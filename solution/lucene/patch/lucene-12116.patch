diff --git a/lucene/src/java/org/apache/lucene/index/values/MultiDocValues.java b/lucene/src/java/org/apache/lucene/index/values/MultiDocValues.java
index 0c458cf..d178093 100644
--- a/lucene/src/java/org/apache/lucene/index/values/MultiDocValues.java
+++ b/lucene/src/java/org/apache/lucene/index/values/MultiDocValues.java
@@ -21,8 +21,6 @@ import java.util.Arrays;
 
 import org.apache.lucene.util.AttributeSource;
 import org.apache.lucene.util.BytesRef;
-import org.apache.lucene.util.FloatsRef;
-import org.apache.lucene.util.LongsRef;
 import org.apache.lucene.util.ReaderUtil;
 
 public class MultiDocValues extends DocValues {
@@ -78,27 +76,26 @@ public class MultiDocValues extends DocValues {
 
   public static class DummyDocValues extends DocValues {
     final int maxDoc;
-    final Values type;
-    static final Source DUMMY = new DummySource();
+    final Source emptySoruce;
 
     public DummyDocValues(int maxDoc, Values type) {
-      this.type = type;
       this.maxDoc = maxDoc;
+      this.emptySoruce = new EmptySource(type);
     }
 
     @Override
     public ValuesEnum getEnum(AttributeSource attrSource) throws IOException {
-      return new DummyEnum(attrSource, maxDoc, type);
+      return emptySoruce.getEnum(attrSource);
     }
 
     @Override
     public Source load() throws IOException {
-      return DUMMY;
+      return emptySoruce;
     }
-   
+
     @Override
     public Values type() {
-      return type;
+      return emptySoruce.type();
     }
 
     public void close() throws IOException {
@@ -177,6 +174,7 @@ public class MultiDocValues extends DocValues {
     public MultiSource(DocValuesIndex[] docValuesIdx, int[] starts) {
       this.docValuesIdx = docValuesIdx;
       this.starts = starts;
+      assert docValuesIdx.length != 0;
 
     }
 
@@ -193,7 +191,8 @@ public class MultiDocValues extends DocValues {
             + " for doc id: " + docID + " slices : " + Arrays.toString(starts);
         assert docValuesIdx[idx] != null;
         try {
-          current = docValuesIdx[idx].docValues.load();
+          current = docValuesIdx[idx].docValues.getSource();
+          missingValues.copy(current.getMissing());
         } catch (IOException e) {
           throw new RuntimeException("load failed", e); // TODO how should we
           // handle this
@@ -211,92 +210,62 @@ public class MultiDocValues extends DocValues {
       return current.getFloat(doc);
     }
 
-    public BytesRef getBytes(int docID) {
+    public BytesRef getBytes(int docID, BytesRef bytesRef) {
       final int doc = ensureSource(docID);
-      return current.getBytes(doc);
+      return current.getBytes(doc, bytesRef);
     }
 
     public long ramBytesUsed() {
       return current.ramBytesUsed();
     }
 
-  }
-
-  private static class DummySource extends Source {
-    private final BytesRef ref = new BytesRef();
-
     @Override
-    public BytesRef getBytes(int docID) {
-      return ref;
+    public ValuesEnum getEnum(AttributeSource attrSource) throws IOException {
+      throw new UnsupportedOperationException(); // TODO
     }
 
     @Override
-    public double getFloat(int docID) {
-      return 0.0d;
+    public Values type() {
+      return docValuesIdx[0].docValues.type();
     }
 
-    @Override
-    public long getInt(int docID) {
-      return 0;
-    }
+  }
 
-    public long ramBytesUsed() {
-      return 0;
+  private static class EmptySource extends Source {
+    private final Values type;
+
+    public EmptySource(Values type) {
+      this.type = type;
     }
-  }
 
-  private static class DummyEnum extends ValuesEnum {
-    private int pos = -1;
-    private final int maxDoc;
+    @Override
+    public BytesRef getBytes(int docID, BytesRef ref) {
+      return this.missingValues.bytesValue;
 
-    public DummyEnum(AttributeSource source, int maxDoc, Values type) {
-      super(source, type);
-      this.maxDoc = maxDoc;
-      switch (type) {
-      case BYTES_VAR_STRAIGHT:
-      case BYTES_FIXED_STRAIGHT:
-      case BYTES_FIXED_DEREF:
-      case BYTES_FIXED_SORTED:
-      case BYTES_VAR_DEREF:
-      case BYTES_VAR_SORTED:
-        // nocommit - this is not correct for Fixed_straight
-        BytesRef bytes = attr.bytes();
-        bytes.length = 0;
-        bytes.offset = 0;
-        break;
-      case PACKED_INTS:
-      case PACKED_INTS_FIXED:
-        LongsRef ints = attr.ints();
-        ints.set(0);
-        break;
-
-      case SIMPLE_FLOAT_4BYTE:
-      case SIMPLE_FLOAT_8BYTE:
-        FloatsRef floats = attr.floats();
-        floats.set(0d);
-        break;
-      default:
-        throw new IllegalArgumentException("unknown Values type: " + type);
-      }
     }
 
     @Override
-    public void close() throws IOException {
+    public double getFloat(int docID) {
+      return missingValues.doubleValue;
     }
 
     @Override
-    public int advance(int target) throws IOException {
-      return pos = (pos < maxDoc ? target : NO_MORE_DOCS);
+    public long getInt(int docID) {
+      return missingValues.longValue;
+    }
+
+    public long ramBytesUsed() {
+      return 0;
     }
 
     @Override
-    public int docID() {
-      return pos;
+    public ValuesEnum getEnum(AttributeSource attrSource) throws IOException {
+      return ValuesEnum.emptyEnum(type);
     }
 
     @Override
-    public int nextDoc() throws IOException {
-      return advance(pos + 1);
+    public Values type() {
+      return type;
     }
   }
