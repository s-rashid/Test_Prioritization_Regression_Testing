diff --git a/lucene/src/java/org/apache/lucene/index/TermsHashPerField.java b/lucene/src/java/org/apache/lucene/index/TermsHashPerField.java
index 9d486df..ca26a8f 100644
--- a/lucene/src/java/org/apache/lucene/index/TermsHashPerField.java
+++ b/lucene/src/java/org/apache/lucene/index/TermsHashPerField.java
@@ -40,6 +40,7 @@ final class TermsHashPerField extends InvertedDocConsumerPerField {
   final DocumentsWriterPerThread.DocState docState;
   final FieldInvertState fieldState;
   TermToBytesRefAttribute termAtt;
+  BytesRef termBytesRef;
 
   // Copied from our perThread
   final IntBlockPool intPool;
@@ -54,7 +55,6 @@ final class TermsHashPerField extends InvertedDocConsumerPerField {
   final BytesRefHash bytesHash;
 
   ParallelPostingsArray postingsArray;
-  private final BytesRef termBytesRef;
   private final AtomicLong bytesUsed;
 
   public TermsHashPerField(DocInverterPerField docInverterPerField, final TermsHash termsHash, final TermsHash nextTermsHash, final FieldInfo fieldInfo) {
@@ -71,8 +71,6 @@ final class TermsHashPerField extends InvertedDocConsumerPerField {
     bytesHash = new BytesRefHash(termBytePool, HASH_INIT_SIZE, byteStarts);
     streamCount = consumer.getStreamCount();
     numPostingInt = 2*streamCount;
-
-    termBytesRef = termsHash.termBytesRef;
     this.fieldInfo = fieldInfo;
     if (nextTermsHash != null)
       nextPerField = (TermsHashPerField) nextTermsHash.addField(docInverterPerField, fieldInfo);
@@ -120,6 +118,7 @@ final class TermsHashPerField extends InvertedDocConsumerPerField {
   @Override
   void start(Fieldable f) {
     termAtt = fieldState.attributeSource.getAttribute(TermToBytesRefAttribute.class);
+    termBytesRef = termAtt.getBytesRef();
     consumer.start(f);
     if (nextPerField != null) {
       nextPerField.start(f);
@@ -181,7 +180,7 @@ final class TermsHashPerField extends InvertedDocConsumerPerField {
     // Get the text & hash of this term.
     int termID;
     try{
-       termID = bytesHash.add(termBytesRef, termAtt.toBytesRef(termBytesRef));
+       termID = bytesHash.add(termBytesRef, termAtt.fillBytesRef());
     }catch (MaxBytesLengthExceededException e) {
       // Not enough room in current block
       // Just skip this term, to remain as robust as
