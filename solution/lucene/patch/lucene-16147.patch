diff --git a/solr/src/test/org/apache/solr/search/TestIndexSearcher.java b/solr/src/test/org/apache/solr/search/TestIndexSearcher.java
index 4ecd72d..0b5e114 100755
--- a/solr/src/test/org/apache/solr/search/TestIndexSearcher.java
+++ b/solr/src/test/org/apache/solr/search/TestIndexSearcher.java
@@ -16,6 +16,9 @@
  */
 package org.apache.solr.search;
 
+import org.apache.lucene.index.IndexReader.AtomicReaderContext;
+import org.apache.lucene.index.IndexReader.ReaderContext;
+import org.apache.lucene.util.ReaderUtil;
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.schema.SchemaField;
@@ -38,12 +41,12 @@ public class TestIndexSearcher extends SolrTestCaseJ4 {
     ValueSource vs = sf.getType().getValueSource(sf, null);
     Map context = ValueSource.newContext(sqr.getSearcher());
     vs.createWeight(context, sqr.getSearcher());
-    SolrIndexReader sr = sqr.getSearcher().getReader();
-    int idx = SolrIndexReader.readerIndex(doc, sr.getLeafOffsets());
-    int base = sr.getLeafOffsets()[idx];
-    SolrIndexReader sub = sr.getLeafReaders()[idx];
-    DocValues vals = vs.getValues(context, sub);
-    return vals.strVal(doc-base);
+    ReaderContext topReaderContext = sqr.getSearcher().getTopReaderContext();
+    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);
+    int idx = ReaderUtil.subIndex(doc, leaves);
+    AtomicReaderContext leaf = leaves[idx];
+    DocValues vals = vs.getValues(context, leaf.reader);
+    return vals.strVal(doc-leaf.docBase);
   }
 
   public void testReopen() throws Exception {
@@ -53,7 +56,7 @@ public class TestIndexSearcher extends SolrTestCaseJ4 {
     assertU(commit());
 
     SolrQueryRequest sr1 = req("q","foo");
-    SolrIndexReader r1 = sr1.getSearcher().getReader();
+    ReaderContext rCtx1 = sr1.getSearcher().getTopReaderContext();
 
     String sval1 = getStringVal(sr1, "v_s",0);
     assertEquals("string1", sval1);
@@ -63,33 +66,33 @@ public class TestIndexSearcher extends SolrTestCaseJ4 {
     assertU(commit());
 
     SolrQueryRequest sr2 = req("q","foo");
-    SolrIndexReader r2 = sr2.getSearcher().getReader();
+    ReaderContext rCtx2 = sr2.getSearcher().getTopReaderContext();
 
     // make sure the readers share the first segment
     // Didn't work w/ older versions of lucene2.9 going from segment -> multi
-    assertEquals(r1.getLeafReaders()[0], r2.getLeafReaders()[0]);
+    assertEquals(ReaderUtil.leaves(rCtx1)[0].reader, ReaderUtil.leaves(rCtx2)[0].reader);
 
     assertU(adoc("id","5", "v_f","3.14159"));
     assertU(adoc("id","6", "v_f","8983", "v_s","string6"));
     assertU(commit());
 
     SolrQueryRequest sr3 = req("q","foo");
-    SolrIndexReader r3 = sr3.getSearcher().getReader();
+    ReaderContext rCtx3 = sr3.getSearcher().getTopReaderContext();
     // make sure the readers share segments
     // assertEquals(r1.getLeafReaders()[0], r3.getLeafReaders()[0]);
-    assertEquals(r2.getLeafReaders()[0], r3.getLeafReaders()[0]);
-    assertEquals(r2.getLeafReaders()[1], r3.getLeafReaders()[1]);
+    assertEquals(ReaderUtil.leaves(rCtx2)[0].reader, ReaderUtil.leaves(rCtx3)[0].reader);
+    assertEquals(ReaderUtil.leaves(rCtx2)[1].reader, ReaderUtil.leaves(rCtx3)[1].reader);
 
     sr1.close();
     sr2.close();            
 
     // should currently be 1, but this could change depending on future index management
-    int baseRefCount = r3.getRefCount();
+    int baseRefCount = rCtx3.reader.getRefCount();
     assertEquals(1, baseRefCount);
 
     assertU(commit());
     SolrQueryRequest sr4 = req("q","foo");
-    SolrIndexReader r4 = sr4.getSearcher().getReader();
+    ReaderContext rCtx4 = sr4.getSearcher().getTopReaderContext();
 
     // force an index change so the registered searcher won't be the one we are testing (and
     // then we should be able to test the refCount going all the way to 0
@@ -97,23 +100,23 @@ public class TestIndexSearcher extends SolrTestCaseJ4 {
     assertU(commit()); 
 
     // test that reader didn't change (according to equals at least... which uses the wrapped reader)
-    assertEquals(r3,r4);
-    assertEquals(baseRefCount+1, r4.getRefCount());
+    assertEquals(rCtx3.reader, rCtx4.reader);
+    assertEquals(baseRefCount+1, rCtx4.reader.getRefCount());
     sr3.close();
-    assertEquals(baseRefCount, r4.getRefCount());
+    assertEquals(baseRefCount, rCtx4.reader.getRefCount());
     sr4.close();
-    assertEquals(baseRefCount-1, r4.getRefCount());
+    assertEquals(baseRefCount-1, rCtx4.reader.getRefCount());
 
 
     SolrQueryRequest sr5 = req("q","foo");
-    SolrIndexReader r5 = sr5.getSearcher().getReader();
+    ReaderContext rCtx5 = sr5.getSearcher().getTopReaderContext();
 
     assertU(delI("1"));
     assertU(commit());
     SolrQueryRequest sr6 = req("q","foo");
-    SolrIndexReader r6 = sr6.getSearcher().getReader();
-    assertEquals(1, r6.getLeafReaders()[0].numDocs()); // only a single doc left in the first segment
-    assertTrue( !r5.getLeafReaders()[0].equals(r6.getLeafReaders()[0]) );  // readers now different
+    ReaderContext rCtx6 = sr6.getSearcher().getTopReaderContext();
+    assertEquals(1, ReaderUtil.leaves(rCtx6)[0].reader.numDocs()); // only a single doc left in the first segment
+    assertTrue( !ReaderUtil.leaves(rCtx5)[0].reader.equals(ReaderUtil.leaves(rCtx6)[0].reader) );  // readers now different
 
     sr5.close();
     sr6.close();
