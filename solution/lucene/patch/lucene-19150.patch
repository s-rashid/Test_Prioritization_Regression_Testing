diff --git a/solr/src/java/org/apache/solr/search/function/ReverseOrdFieldSource.java b/solr/src/java/org/apache/solr/search/function/ReverseOrdFieldSource.java
index 639bdbb..e08e6a8 100644
--- a/solr/src/java/org/apache/solr/search/function/ReverseOrdFieldSource.java
+++ b/solr/src/java/org/apache/solr/search/function/ReverseOrdFieldSource.java
@@ -53,10 +53,12 @@ public class ReverseOrdFieldSource extends ValueSource {
     this.field = field;
   }
 
+  @Override
   public String description() {
     return "rord("+field+')';
   }
 
+  @Override
   public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader;
     final int off = readerContext.docBase;
@@ -65,41 +67,50 @@ public class ReverseOrdFieldSource extends ValueSource {
     final int end = sindex.numOrd();
 
     return new DocValues() {
+      @Override
       public float floatVal(int doc) {
         return (float)(end - sindex.getOrd(doc+off));
       }
 
+      @Override
       public int intVal(int doc) {
         return (end - sindex.getOrd(doc+off));
       }
 
+      @Override
       public long longVal(int doc) {
         return (long)(end - sindex.getOrd(doc+off));
       }
 
+      @Override
       public int ordVal(int doc) {
         return (end - sindex.getOrd(doc+off));
       }
 
+      @Override
       public int numOrd() {
         return end;
       }
 
+      @Override
       public double doubleVal(int doc) {
         return (double)(end - sindex.getOrd(doc+off));
       }
 
+      @Override
       public String strVal(int doc) {
         // the string value of the ordinal, not the string itself
         return Integer.toString((end - sindex.getOrd(doc+off)));
       }
 
+      @Override
       public String toString(int doc) {
         return description() + '=' + strVal(doc);
       }
     };
   }
 
+  @Override
   public boolean equals(Object o) {
     if (o.getClass() !=  ReverseOrdFieldSource.class) return false;
     ReverseOrdFieldSource other = (ReverseOrdFieldSource)o;
@@ -107,6 +118,7 @@ public class ReverseOrdFieldSource extends ValueSource {
   }
 
   private static final int hcode = ReverseOrdFieldSource.class.hashCode();
+  @Override
   public int hashCode() {
     return hcode + field.hashCode();
   };
