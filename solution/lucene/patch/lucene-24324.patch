diff --git a/lucene/contrib/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter.java b/lucene/contrib/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter.java
index 130c0cc..08f9468 100644
--- a/lucene/contrib/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter.java
+++ b/lucene/contrib/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter.java
@@ -20,73 +20,95 @@ package org.apache.lucene.index;
 import java.text.DecimalFormat;
 import java.text.NumberFormat;
 
-import org.apache.lucene.analysis.core.WhitespaceAnalyzer;
+import org.apache.lucene.analysis.MockAnalyzer;
+import org.apache.lucene.analysis.MockTokenizer;
 import org.apache.lucene.document.Document;
-import org.apache.lucene.document.Field;
 import org.apache.lucene.document.Field.Index;
 import org.apache.lucene.document.Field.Store;
-import org.apache.lucene.document.Field.TermVector;
 import org.apache.lucene.index.IndexWriterConfig.OpenMode;
 import org.apache.lucene.store.Directory;
-import org.apache.lucene.util.BytesRef;
-import org.apache.lucene.util.Version;
+import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.LuceneTestCase;
 
-
 public class TestPKIndexSplitter extends LuceneTestCase {
-  public void testSplit() throws Exception {
+
+  public void testSplit() throws Exception {    
     NumberFormat format = new DecimalFormat("000000000");
-    
     Directory dir = newDirectory();
-    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(
-        Version.LUCENE_CURRENT,
-        new WhitespaceAnalyzer(Version.LUCENE_CURRENT))
+    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(
+        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false))
         .setOpenMode(OpenMode.CREATE));
-    for (int x=0; x < 10; x++) {
+    for (int x = 0; x < 11; x++) {
       Document doc = createDocument(x, "1", 3, format);
       w.addDocument(doc);
     }
-    for (int x=15; x < 20; x++) {
+    for (int x = 11; x < 20; x++) {
       Document doc = createDocument(x, "2", 3, format);
       w.addDocument(doc);
     }
     w.close();
     
+    final Term midTerm = new Term("id", format.format(11));
+    
+    checkSplitting(dir, midTerm, 11, 9);
+    
+    // delete some documents
+    w = new IndexWriter(dir, newIndexWriterConfig(
+        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false))
+        .setOpenMode(OpenMode.APPEND));
+    w.deleteDocuments(midTerm);
+    w.deleteDocuments(new Term("id", format.format(2)));
+    w.close();
+    
+    checkSplitting(dir, midTerm, 10, 8);
+    
+    dir.close();
+  }
+  
+  private void checkSplitting(Directory dir, Term splitTerm, int leftCount, int rightCount) throws Exception {
     Directory dir1 = newDirectory();
     Directory dir2 = newDirectory();
-    Term splitTerm = new Term("id", new BytesRef(format.format(11)));
-    PKIndexSplitter splitter = new PKIndexSplitter(splitTerm, 
-        dir, dir1, dir2);
+    PKIndexSplitter splitter = new PKIndexSplitter(dir, dir1, dir2, splitTerm);
     splitter.split();
     
     IndexReader ir1 = IndexReader.open(dir1);
     IndexReader ir2 = IndexReader.open(dir2);
-    assertEquals(10, ir1.maxDoc());
-    assertEquals(4, ir2.maxDoc());
+    assertEquals(leftCount, ir1.numDocs());
+    assertEquals(rightCount, ir2.numDocs());
+    
+    checkContents(ir1, "1");
+    checkContents(ir2, "2");
     
     ir1.close();
     ir2.close();
     
     dir1.close();
     dir2.close();
-    dir.close();
   }
   
-  public Document createDocument(int n, String indexName, 
+  private void checkContents(IndexReader ir, String indexname) throws Exception {
+    final Bits delDocs = MultiFields.getDeletedDocs(ir);
+    for (int i = 0; i < ir.maxDoc(); i++) {
+      if (delDocs == null || !delDocs.get(i)) {
+        assertEquals(indexname, ir.document(i).get("indexname"));
+      }
+    }
+  }
+  
+  private Document createDocument(int n, String indexName, 
       int numFields, NumberFormat format) {
     StringBuilder sb = new StringBuilder();
     Document doc = new Document();
     String id = format.format(n);
-    doc.add(new Field("id", id, Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));
-    doc.add(new Field("indexname", indexName, Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));
+    doc.add(newField("id", id, Store.YES, Index.NOT_ANALYZED));
+    doc.add(newField("indexname", indexName, Store.YES, Index.NOT_ANALYZED));
     sb.append("a");
     sb.append(n);
-    doc.add(new Field("field1", sb.toString(), Store.YES, Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));
+    doc.add(newField("field1", sb.toString(), Store.YES, Index.ANALYZED));
     sb.append(" b");
     sb.append(n);
     for (int i = 1; i < numFields; i++) {
-      doc.add(new Field("field" + (i + 1), sb.toString(), Store.YES,
-                        Index.ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));
+      doc.add(newField("field" + (i + 1), sb.toString(), Store.YES, Index.ANALYZED));
     }
     return doc;
   }
