diff --git a/lucene/src/test/org/apache/lucene/util/TestBitVector.java b/lucene/src/test/org/apache/lucene/util/TestBitVector.java
index 1dad51b..7721940 100644
--- a/lucene/src/test/org/apache/lucene/util/TestBitVector.java
+++ b/lucene/src/test/org/apache/lucene/util/TestBitVector.java
@@ -211,70 +211,4 @@ public class TestBitVector extends LuceneTestCase
         }
         return equal;
     }
-    
-    private static int[] subsetPattern = new int[] { 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1 };
-    
-    /**
-     * Tests BitVector.subset() against the above pattern
-     */
-    public void testSubset() {
-    	doTestSubset(0, 0);
-    	doTestSubset(0, 20);
-    	doTestSubset(0, 7);
-    	doTestSubset(0, 8);
-    	doTestSubset(0, 9);
-    	doTestSubset(0, 15);
-    	doTestSubset(0, 16);
-    	doTestSubset(0, 17);
-    	doTestSubset(1, 7);
-    	doTestSubset(1, 8);
-    	doTestSubset(1, 9);
-    	doTestSubset(1, 15);
-    	doTestSubset(1, 16);
-    	doTestSubset(1, 17);
-    	doTestSubset(2, 20);
-    	doTestSubset(3, 20);
-    	doTestSubset(4, 20);
-    	doTestSubset(5, 20);
-    	doTestSubset(6, 20);
-    	doTestSubset(7, 14);
-    	doTestSubset(7, 15);
-    	doTestSubset(7, 16);
-    	doTestSubset(8, 15);
-    	doTestSubset(9, 20);
-    	doTestSubset(10, 20);
-    	doTestSubset(11, 20);
-    	doTestSubset(12, 20);
-    	doTestSubset(13, 20);
-    }
-    
-    /**
-     * Compare a subset against the corresponding portion of the test pattern
-     */
-    private void doTestSubset(int start, int end) {
-    	BitVector full = createSubsetTestVector();
-    	BitVector subset = full.subset(start, end);
-    	assertEquals(end - start, subset.size());
-    	int count = 0;
-    	for (int i = start, j = 0; i < end; i++, j++) {
-    		if (subsetPattern[i] == 1) {
-    			count++;
-    			assertTrue(subset.get(j));
-    		} else {
-    			assertFalse(subset.get(j));
-    		}
-    	}
-    	assertEquals(count, subset.count());
-    }
-    
-    private BitVector createSubsetTestVector() {
-    	BitVector bv = new BitVector(subsetPattern.length);
-    	for (int i = 0; i < subsetPattern.length; i++) {
-    		if (subsetPattern[i] == 1) {
-    			bv.set(i);
-    		}
-    	}
-    	return bv;
-    }
-    
 }
