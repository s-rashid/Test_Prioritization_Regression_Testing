diff --git a/lucene/src/java/org/apache/lucene/index/SegmentReader.java b/lucene/src/java/org/apache/lucene/index/SegmentReader.java
index bbbd90e..9c85466 100644
--- a/lucene/src/java/org/apache/lucene/index/SegmentReader.java
+++ b/lucene/src/java/org/apache/lucene/index/SegmentReader.java
@@ -44,7 +44,7 @@ import org.apache.lucene.index.codecs.CodecProvider;
 import org.apache.lucene.index.codecs.FieldsProducer;
 import org.apache.lucene.index.values.Bytes;
 import org.apache.lucene.index.values.Ints;
-import org.apache.lucene.index.values.Reader;
+import org.apache.lucene.index.values.DocValues;
 import org.apache.lucene.index.values.Floats;
 import org.apache.lucene.index.values.Values;
 import org.apache.lucene.search.FieldCache; // not great (circular); used only to purge FieldCache entry on close
@@ -141,7 +141,6 @@ public class SegmentReader extends IndexReader implements Cloneable {
         // Ask codec for its Fields
         fields = si.getCodec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));
         assert fields != null;
-        openIndexValuesReaders(cfsDir, si);
         success = true;
       } finally {
         if (!success) {
@@ -155,57 +154,8 @@ public class SegmentReader extends IndexReader implements Cloneable {
       // not assigned yet).
       this.origInstance = origInstance;
     }
-
-    final Map<String,Reader> indexValues = new HashMap<String,Reader>();
-
-    // Only opens files... doesn't actually load any values
-    private void openIndexValuesReaders(Directory dir, SegmentInfo si) throws IOException {
-      final int numFields = fieldInfos.size();
-      for(int i=0;i<numFields;i++) {
-        final FieldInfo fieldInfo = fieldInfos.fieldInfo(i);
-        final Values v = fieldInfo.getIndexValues();
-        final String field = fieldInfo.name;
-        final String id = IndexFileNames.segmentFileName(segment, Integer
-            .toString(fieldInfo.number), "");
-        // nocommit - externalize the filenames 
-        if (v != null && dir.fileExists(id+".dat")) {
-          switch(v) {
-          case PACKED_INTS:
-            indexValues.put(field, Ints.getReader(dir, id, false));
-            break;
-          case PACKED_INTS_FIXED:
-            indexValues.put(field, Ints.getReader(dir, id, true));
-            break;
-          case SIMPLE_FLOAT_4BYTE:
-            indexValues.put(field, Floats.getReader(dir, id, si.docCount));
-            break;
-          case SIMPLE_FLOAT_8BYTE:
-            indexValues.put(field, Floats.getReader(dir, id, si.docCount));
-            break;
-          case BYTES_FIXED_STRAIGHT:
-            indexValues.put(field, Bytes.getReader(dir, id, Bytes.Mode.STRAIGHT, true, si.docCount));
-            break;
-          case BYTES_FIXED_DEREF:
-            indexValues.put(field, Bytes.getReader(dir, id, Bytes.Mode.DEREF, true, si.docCount));
-            break;
-          case BYTES_FIXED_SORTED:
-            indexValues.put(field, Bytes.getReader(dir, id, Bytes.Mode.SORTED, true, si.docCount));
-            break;
-          case BYTES_VAR_STRAIGHT:
-            indexValues.put(field, Bytes.getReader(dir, id, Bytes.Mode.STRAIGHT, false, si.docCount));
-            break;
-          case BYTES_VAR_DEREF:
-            indexValues.put(field, Bytes.getReader(dir, id, Bytes.Mode.DEREF, false, si.docCount));
-            break;
-          case BYTES_VAR_SORTED:
-            indexValues.put(field, Bytes.getReader(dir, id, Bytes.Mode.SORTED, false, si.docCount));
-            break;
-          default:
-            throw new IllegalStateException("unrecognized index values mode " + v);
-          }
-        }
-      }
-    }
+    
+    
 
     synchronized TermVectorsReader getTermVectorsReaderOrig() {
       return termVectorsReaderOrig;
@@ -253,17 +203,9 @@ public class SegmentReader extends IndexReader implements Cloneable {
         if (origInstance != null) {
           FieldCache.DEFAULT.purge(origInstance);
         }
-        closeIndexValuesReaders();
       }
     }
 
-    private void closeIndexValuesReaders() throws IOException {
-      for (Reader reader : indexValues.values()) {
-        reader.close();
-      }
-    }
-
-
     synchronized void openDocStores(SegmentInfo si) throws IOException {
 
       assert si.name.equals(segment);
@@ -1026,6 +968,9 @@ public class SegmentReader extends IndexReader implements Cloneable {
                 fieldOption == IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET) {
         fieldSet.add(fi.name);
       }
+      else if (fi.indexValues != null && fieldOption == IndexReader.FieldOption.DOC_VALUES) {
+        fieldSet.add(fi.name);
+      }
     }
     return fieldSet;
   }
@@ -1344,9 +1289,9 @@ public class SegmentReader extends IndexReader implements Cloneable {
   public int getTermInfosIndexDivisor() {
     return core.termsIndexDivisor;
   }
-
+  
   @Override
-  public Reader getIndexValues(String field) {
-    return core.indexValues.get(field);
+  public DocValues docValues(String field) throws IOException {
+    return core.fields.docValues(field);
   }
 }
