diff --git a/lucene/src/java/org/apache/lucene/index/FieldInfos.java b/lucene/src/java/org/apache/lucene/index/FieldInfos.java
index ef1a3b7..77fb798 100644
--- a/lucene/src/java/org/apache/lucene/index/FieldInfos.java
+++ b/lucene/src/java/org/apache/lucene/index/FieldInfos.java
@@ -42,9 +42,9 @@ public final class FieldInfos {
 
   // whenever you add a new format, make it 1 smaller (negative version logic)!
   static final int FORMAT_CURRENT = FORMAT_PER_FIELD_CODEC;
-  
+
   static final int FORMAT_MINIMUM = FORMAT_START;
-  
+
   static final byte IS_INDEXED = 0x1;
   static final byte STORE_TERMVECTOR = 0x2;
   static final byte STORE_POSITIONS_WITH_TERMVECTOR = 0x4;
@@ -52,7 +52,7 @@ public final class FieldInfos {
   static final byte OMIT_NORMS = 0x10;
   static final byte STORE_PAYLOADS = 0x20;
   static final byte OMIT_TERM_FREQ_AND_POSITIONS = 0x40;
-  
+
   private final ArrayList<FieldInfo> byNumber = new ArrayList<FieldInfo>();
   private final HashMap<String,FieldInfo> byName = new HashMap<String,FieldInfo>();
   private int format;
@@ -111,16 +111,16 @@ public final class FieldInfos {
     }
     return false;
   }
-  
+
   /**
    * Add fields that are indexed. Whether they have termvectors has to be specified.
-   * 
+   *
    * @param names The names of the fields
    * @param storeTermVectors Whether the fields store term vectors or not
    * @param storePositionWithTermVector true if positions should be stored.
    * @param storeOffsetWithTermVector true if offsets should be stored
    */
-  synchronized public void addIndexed(Collection<String> names, boolean storeTermVectors, boolean storePositionWithTermVector, 
+  synchronized public void addIndexed(Collection<String> names, boolean storeTermVectors, boolean storePositionWithTermVector,
                          boolean storeOffsetWithTermVector) {
     for (String name : names) {
       add(name, true, storeTermVectors, storePositionWithTermVector, storeOffsetWithTermVector);
@@ -129,10 +129,10 @@ public final class FieldInfos {
 
   /**
    * Assumes the fields are not storing term vectors.
-   * 
+   *
    * @param names The names of the fields
    * @param isIndexed Whether the fields are indexed or not
-   * 
+   *
    * @see #add(String, boolean)
    */
   synchronized public void add(Collection<String> names, boolean isIndexed) {
@@ -143,7 +143,7 @@ public final class FieldInfos {
 
   /**
    * Calls 5 parameter add with false for all TermVector parameters.
-   * 
+   *
    * @param name The name of the Fieldable
    * @param isIndexed true if the field is indexed
    * @see #add(String, boolean, boolean, boolean, boolean)
@@ -154,7 +154,7 @@ public final class FieldInfos {
 
   /**
    * Calls 5 parameter add with false for term vector positions and offsets.
-   * 
+   *
    * @param name The name of the field
    * @param isIndexed  true if the field is indexed
    * @param storeTermVector true if the term vector should be stored
@@ -162,12 +162,12 @@ public final class FieldInfos {
   synchronized public void add(String name, boolean isIndexed, boolean storeTermVector){
     add(name, isIndexed, storeTermVector, false, false, false);
   }
-  
+
   /** If the field is not yet known, adds it. If it is known, checks to make
    *  sure that the isIndexed flag is the same as was given previously for this
    *  field. If not - marks it as being indexed.  Same goes for the TermVector
    * parameters.
-   * 
+   *
    * @param name The name of the field
    * @param isIndexed true if the field is indexed
    * @param storeTermVector true if the term vector should be stored
@@ -197,7 +197,7 @@ public final class FieldInfos {
     add(name, isIndexed, storeTermVector, storePositionWithTermVector,
         storeOffsetWithTermVector, omitNorms, false, false);
   }
-  
+
   /** If the field is not yet known, adds it. If it is known, checks to make
    *  sure that the isIndexed flag is the same as was given previously for this
    *  field. If not - marks it as being indexed.  Same goes for the TermVector
@@ -231,8 +231,15 @@ public final class FieldInfos {
                fi.omitTermFreqAndPositions);
   }
 
+  synchronized public void update(FieldInfos otherInfos) {
+    int numFields = otherInfos.size();
+    for (int i = 0; i < numFields; i++) {
+      add(otherInfos.fieldInfo(i));
+    }
+  }
+
   private FieldInfo addInternal(String name, boolean isIndexed,
-                                boolean storeTermVector, boolean storePositionWithTermVector, 
+                                boolean storeTermVector, boolean storePositionWithTermVector,
                                 boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) {
     name = StringHelper.intern(name);
     FieldInfo fi = new FieldInfo(name, isIndexed, byNumber.size(), storeTermVector, storePositionWithTermVector,
@@ -253,11 +260,11 @@ public final class FieldInfos {
 
   /**
    * Return the fieldName identified by its number.
-   * 
+   *
    * @param fieldNumber
    * @return the fieldName or an empty string when the field
    * with the given number doesn't exist.
-   */  
+   */
   public String fieldName(int fieldNumber) {
 	FieldInfo fi = fieldInfo(fieldNumber);
 	return (fi != null) ? fi.name : "";
@@ -268,7 +275,7 @@ public final class FieldInfos {
    * @param fieldNumber
    * @return the FieldInfo object or null when the given fieldNumber
    * doesn't exist.
-   */  
+   */
   public FieldInfo fieldInfo(int fieldNumber) {
 	return (fieldNumber >= 0) ? byNumber.get(fieldNumber) : null;
   }
@@ -353,7 +360,7 @@ public final class FieldInfos {
 
     if (input.getFilePointer() != input.length()) {
       throw new CorruptIndexException("did not read all bytes from file \"" + fileName + "\": read " + input.getFilePointer() + " vs size " + input.length());
-    }    
+    }
   }
 
 }
