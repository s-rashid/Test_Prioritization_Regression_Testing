diff --git a/lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec.java b/lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec.java
index 335b0d8..60ddcca 100644
--- a/lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec.java
+++ b/lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec.java
@@ -18,27 +18,22 @@ package org.apache.lucene.index.codecs.docvalues;
  */
 import java.io.IOException;
 import java.util.Comparator;
-import java.util.Iterator;
 import java.util.Set;
-import java.util.Map.Entry;
 
 import org.apache.lucene.index.FieldInfo;
 import org.apache.lucene.index.FieldInfos;
-import org.apache.lucene.index.FieldsEnum;
 import org.apache.lucene.index.IndexFileNames;
+import org.apache.lucene.index.PerDocWriteState;
 import org.apache.lucene.index.SegmentInfo;
 import org.apache.lucene.index.SegmentReadState;
 import org.apache.lucene.index.SegmentWriteState;
-import org.apache.lucene.index.Terms;
-import org.apache.lucene.index.TermsEnum;
 import org.apache.lucene.index.codecs.Codec;
 import org.apache.lucene.index.codecs.FieldsConsumer;
 import org.apache.lucene.index.codecs.FieldsProducer;
-import org.apache.lucene.index.codecs.TermsConsumer;
-import org.apache.lucene.index.values.DocValues;
+import org.apache.lucene.index.codecs.PerDocConsumer;
+import org.apache.lucene.index.codecs.PerDocValues;
 import org.apache.lucene.index.values.Writer;
 import org.apache.lucene.store.Directory;
-import org.apache.lucene.util.AttributeSource;
 import org.apache.lucene.util.BytesRef;
 
 /**
@@ -60,80 +55,46 @@ public class DocValuesCodec extends Codec {
   }
 
   @Override
-  public FieldsConsumer fieldsConsumer(SegmentWriteState state)
+  public PerDocConsumer docsConsumer(final PerDocWriteState state)
       throws IOException {
-    final WrappingFieldsConsumer consumer;
-      consumer = new WrappingFieldsConsumer(other, comparator, state);
-    // nocommit this is a hack and only necessary since
-    // we want to initialized the wrapped
-    // fieldsConsumer lazily with a SegmentWriteState created after the docvalue
-    // ones is. We should fix this in DocumentWriter I guess. See
-    // DocFieldProcessor too!
-    return consumer;
-  }
-
-  private static class WrappingFieldsConsumer extends FieldsConsumer {
-    private final SegmentWriteState state;
-    private FieldsConsumer wrappedConsumer;
-    private final Codec other;
-    private final Comparator<BytesRef> comparator;
+    return new PerDocConsumer() {
 
-    public WrappingFieldsConsumer(Codec other, Comparator<BytesRef> comparator, SegmentWriteState state) {
-      this.other = other;
-      this.comparator = comparator;
-      this.state = state;
-    }
+      @Override
+      public void close() throws IOException {
+      }
 
-    @Override
-    public void close() throws IOException {
-      synchronized (this) {
-        if (wrappedConsumer != null) {
-          wrappedConsumer.close();
-        } 
+      @Override
+      public DocValuesConsumer addValuesField(FieldInfo field)
+          throws IOException {
+        final DocValuesConsumer consumer = Writer.create(field.getDocValues(),
+            docValuesId(state.segmentName, state.codecId, field.number),
+            // TODO can we have a compound file per segment and codec for
+            // docvalues?
+            state.directory, comparator, state.bytesUsed);
+        return consumer;
       }
-    
-    }
+    };
+  }
 
-    @Override
-    public synchronized DocValuesConsumer addValuesField(FieldInfo field)
-        throws IOException {
-      final DocValuesConsumer consumer = Writer.create(field.getDocValues(), docValuesId(state.segmentName, state.codecId, field.number),
-      // TODO can we have a compound file per segment and codec for
-          // docvalues?
-          state.directory, comparator, state.bytesUsed);
-      return consumer;
+  @Override
+  public PerDocValues docsProducer(SegmentReadState state) throws IOException {
+    try {
+    return new DocValuesProducerBase(state.segmentInfo, state.dir, state.fieldInfos, state.codecId);
+    }catch (IOException e) {
+      return new DocValuesProducerBase(state.segmentInfo, state.dir, state.fieldInfos, state.codecId);
     }
+  }
 
-    @Override
-    public TermsConsumer addField(FieldInfo field) throws IOException {
-      synchronized (this) {
-        if (wrappedConsumer == null)
-          wrappedConsumer = other.fieldsConsumer(state);
-      }
-      return wrappedConsumer.addField(field);
-    }
+  @Override
+  public FieldsConsumer fieldsConsumer(SegmentWriteState state)
+      throws IOException {
+    return other.fieldsConsumer(state);
   }
 
   @Override
   public FieldsProducer fieldsProducer(SegmentReadState state)
       throws IOException {
-    final FieldInfos fieldInfos = state.fieldInfos;
-    boolean indexed = false;
-    boolean docValues = false;
-    for (FieldInfo fieldInfo : fieldInfos) {
-      if (fieldInfo.getCodecId() == state.codecId) {
-        indexed |= fieldInfo.isIndexed;
-        docValues |= fieldInfo.hasDocValues();
-        if (indexed && docValues)
-          break;
-      }
-    }
-    final FieldsProducer indexedProducer = indexed ? other.fieldsProducer(state) : FieldsProducer.EMPTY;
-    if (docValues) {
-      return new WrappingFielsdProducer(state, indexedProducer);
-    } else {
-      return FieldsProducer.EMPTY;
-    }
+    return other.fieldsProducer(state);
   }
   
   static String docValuesId(String segmentsName, int codecID, int fieldId) {
@@ -187,140 +148,4 @@ public class DocValuesCodec extends Codec {
     extensions.add(Writer.DATA_EXTENSION);
     extensions.add(Writer.INDEX_EXTENSION);
   }
-
-  static class WrappingFielsdProducer extends DocValuesProducerBase {
-
-    private final FieldsProducer other;
-
-    WrappingFielsdProducer(SegmentReadState state, FieldsProducer other)
-        throws IOException {
-      super(state.segmentInfo, state.dir, state.fieldInfos, state.codecId);
-      this.other = other;
-    }
-
-    @Override
-    public void close() throws IOException {
-      try {
-        other.close();
-      } finally {
-        super.close();
-      }
-    }
-
-    @Override
-    public void loadTermsIndex(int indexDivisor) throws IOException {
-      other.loadTermsIndex(indexDivisor);
-    }
-
-    @Override
-    public FieldsEnum iterator() throws IOException {
-      return new WrappingFieldsEnum(other.iterator(), docValues.entrySet()
-          .iterator());
-    }
-
-    @Override
-    public Terms terms(String field) throws IOException {
-      return other.terms(field);
-    }
-  }
-
-  static abstract class NameValue<V> {
-    String name;
-    V value;
-
-    NameValue<?> smaller(NameValue<?> other) throws IOException {
-      if (other.name == null) {
-        if (this.name == null) {
-          return null;
-        }
-        return this;
-      } else if (this.name == null) {
-        return other;
-      }
-      final int res = this.name.compareTo(other.name);
-      if (res < 0)
-        return this;
-      if (res == 0)
-        other.name = this.name;
-      return other;
-    }
-
-    abstract NameValue<V> next() throws IOException;
-  }
-
-  static class FieldsEnumNameValue extends NameValue<FieldsEnum> {
-    @Override
-    NameValue<FieldsEnum> next() throws IOException {
-      name = value.next();
-      return this;
-    }
-  }
-
-  static class DocValueNameValue extends NameValue<DocValues> {
-    Iterator<Entry<String, DocValues>> iter;
-
-    @Override
-    NameValue<DocValues> next() {
-      if (iter.hasNext()) {
-        Entry<String, DocValues> next = iter.next();
-        value = next.getValue();
-        name = next.getKey();
-      } else {
-        name = null;
-      }
-      return this;
-    }
-  }
-
-  static class WrappingFieldsEnum extends FieldsEnum {
-    private final DocValueNameValue docValues = new DocValueNameValue();
-    private final NameValue<FieldsEnum> fieldsEnum = new FieldsEnumNameValue();
-    private NameValue<?> coordinator;
-
-    @Override
-    public AttributeSource attributes() {
-      return fieldsEnum.value.attributes();
-    }
-
-    public WrappingFieldsEnum(FieldsEnum wrapped,
-        Iterator<Entry<String, DocValues>> docValues) {
-      this.docValues.iter = docValues;
-      this.fieldsEnum.value = wrapped;
-      coordinator = null;
-    }
-
-    @Override
-    public DocValues docValues() throws IOException {
-      if (docValues.name == coordinator.name)
-        return docValues.value;
-      return null;
-    }
-
-    @Override
-    public String next() throws IOException {
-      if (coordinator == null) {
-        coordinator = fieldsEnum.next().smaller(docValues.next());
-      } else {
-        String current = coordinator.name;
-        if (current == docValues.name) {
-          docValues.next();
-        }
-        if (current == fieldsEnum.name) {
-          fieldsEnum.next();
-        }
-        coordinator = docValues.smaller(fieldsEnum);
-
-      }
-      return coordinator == null ? null : coordinator.name;
-    }
-
-    @Override
-    public TermsEnum terms() throws IOException {
-      if (fieldsEnum.name == coordinator.name) {
-        return fieldsEnum.value.terms();
-      }
-      return null;
-    }
-  }
-
 }
