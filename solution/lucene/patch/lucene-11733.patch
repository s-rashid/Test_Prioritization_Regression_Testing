diff --git a/solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory.java b/solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory.java
index 17eb3f6..1d98747 100644
--- a/solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory.java
+++ b/solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory.java
@@ -19,6 +19,7 @@ package org.apache.solr.analysis;
 
 import java.io.IOException;
 import java.io.StringReader;
+import java.lang.reflect.Field;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -26,8 +27,10 @@ import java.util.Map;
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.core.WhitespaceTokenizer;
-import org.apache.lucene.queryParser.ParseException;
+import org.apache.lucene.search.AutomatonQuery;
 import org.apache.lucene.search.Query;
+import org.apache.lucene.util.automaton.Automaton;
+import org.apache.lucene.util.automaton.SpecialOperations;
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.schema.IndexSchema;
 import org.apache.solr.search.SolrQueryParser;
@@ -51,6 +54,8 @@ public class TestReversedWildcardFilterFactory extends SolrTestCaseJ4 {
   public void setUp() throws Exception {
     super.setUp();
     schema = new IndexSchema(solrConfig, getSchemaFile(), null);
+    clearIndex();
+    assertU(commit());
   }
 
   @Test
@@ -105,7 +110,7 @@ public class TestReversedWildcardFilterFactory extends SolrTestCaseJ4 {
   }
   
   @Test
-  public void testQueryParsing() throws IOException, ParseException {
+  public void testQueryParsing() throws Exception {
 
     SolrQueryParser parserOne = new SolrQueryParser(schema, "one");
     assertTrue(parserOne.getAllowLeadingWildcard());
@@ -115,28 +120,53 @@ public class TestReversedWildcardFilterFactory extends SolrTestCaseJ4 {
     // XXX note: this should be false, but for now we return true for any field,
     // XXX if at least one field uses the reversing
     assertTrue(parserThree.getAllowLeadingWildcard());
-    String text = "one +two *hree f*ur fiv* *si\uD834\uDD1Ex";
-    String expectedOne = "one:one +one:two one:\u0001eerh* one:\u0001ru*f one:fiv* one:\u0001x\uD834\uDD1Eis*";
-    String expectedTwo = "two:one +two:two two:\u0001eerh* two:\u0001ru*f two:fiv* two:\u0001x\uD834\uDD1Eis*";
-    String expectedThree = "three:one +three:two three:*hree three:f*ur three:fiv* three:*si\uD834\uDD1Ex";
-    Query q = parserOne.parse(text);
-    assertEquals(expectedOne, q.toString());
-    q = parserTwo.parse(text);
-    assertEquals(expectedTwo, q.toString());
-    q = parserThree.parse(text);
-    assertEquals(expectedThree, q.toString());
+    
+    // add some docs
+    assertU(adoc("id", "1", "one", "one"));
+    assertU(adoc("id", "2", "two", "two"));
+    assertU(adoc("id", "3", "three", "three"));
+    assertU(adoc("id", "4", "one", "four"));
+    assertU(adoc("id", "5", "two", "five"));
+    assertU(adoc("id", "6", "three", "si\uD834\uDD1Ex"));
+    assertU(commit());
+    
+    assertQ("should have matched",
+        req("+id:1 +one:one"),
+        "//result[@numFound=1]");
+    
+    assertQ("should have matched",
+        req("+id:4 +one:f*ur"),
+        "//result[@numFound=1]");
+        
+    assertQ("should have matched",
+        req("+id:6 +three:*si\uD834\uDD1Ex"),
+        "//result[@numFound=1]");
+    
     // test conditional reversal
-    String condText = "*hree t*ree th*ee thr*e ?hree t?ree th?ee th?*ee " + 
-        "short*token ver*longtoken";
-    String expected = "two:\u0001eerh* two:\u0001eer*t two:\u0001ee*ht " +
-        "two:thr*e " +
-        "two:\u0001eerh? two:\u0001eer?t " +
-        "two:th?ee " +
-        "two:th?*ee " +
-        "two:short*token " +
-        "two:\u0001nekotgnol*rev";
-    q = parserTwo.parse(condText);
-    assertEquals(expected, q.toString());
+    assertTrue(wasReversed(parserTwo, "*hree"));
+    assertTrue(wasReversed(parserTwo, "t*ree"));
+    assertTrue(wasReversed(parserTwo, "th*ee"));
+    assertFalse(wasReversed(parserTwo, "thr*e"));
+    assertTrue(wasReversed(parserTwo, "?hree"));
+    assertTrue(wasReversed(parserTwo, "t?ree"));
+    assertFalse(wasReversed(parserTwo, "th?ee"));
+    assertFalse(wasReversed(parserTwo, "th?*ee"));
+    assertFalse(wasReversed(parserTwo, "short*token"));
+    assertTrue(wasReversed(parserTwo, "ver*longtoken"));
+  }
+  
+  /** fragile assert: depends on our implementation, but cleanest way to check for now */ 
+  private boolean wasReversed(SolrQueryParser qp, String query) throws Exception {
+    Query q = qp.parse(query);
+    if (!(q instanceof AutomatonQuery))
+      return false;
+    // this is a hack to get the protected Automaton field in AutomatonQuery, 
+    // may break in later lucene versions - we have no getter... for good reasons.
+    final Field automatonField = AutomatonQuery.class.getDeclaredField("automaton");
+    automatonField.setAccessible(true);
+    Automaton automaton = (Automaton) automatonField.get(q);
+    String prefix = SpecialOperations.getCommonPrefix(automaton);
+    return prefix.length() > 0 && prefix.charAt(0) == '\u0001';
   }
 
   @Test
