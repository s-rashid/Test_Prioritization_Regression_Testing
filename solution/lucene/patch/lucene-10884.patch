diff --git a/solr/src/test/org/apache/solr/SolrTestCaseJ4.java b/solr/src/test/org/apache/solr/SolrTestCaseJ4.java
index 05d9047..4d40831 100755
--- a/solr/src/test/org/apache/solr/SolrTestCaseJ4.java
+++ b/solr/src/test/org/apache/solr/SolrTestCaseJ4.java
@@ -27,7 +27,9 @@ import org.apache.solr.common.params.ModifiableSolrParams;
 import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.common.util.XML;
 import org.apache.solr.core.SolrConfig;
+import org.apache.solr.request.LocalSolrQueryRequest;
 import org.apache.solr.request.SolrQueryRequest;
+import org.apache.solr.search.SolrIndexSearcher;
 import org.apache.solr.util.TestHarness;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
@@ -85,6 +87,7 @@ public abstract class SolrTestCaseJ4 extends LuceneTestCase {
   /** Call initCore in @BeforeClass to instantiate a solr core in your test class.
    * deleteCore will be called for you via SolrTestCaseJ4 @AfterClass */
   public static void initCore(String config, String schema, String solrHome) throws Exception {
+    startTrackingSearchers();
     configString = config;
     schemaString = schema;
     if (solrHome != null) {
@@ -93,6 +96,26 @@ public abstract class SolrTestCaseJ4 extends LuceneTestCase {
     initCore();
   }
 
+
+  static long numOpens;
+  static long numCloses;
+  protected static void startTrackingSearchers() {
+    numOpens = SolrIndexSearcher.numOpens.get();
+    numCloses = SolrIndexSearcher.numCloses.get();
+  }
+
+  protected static void endTrackingSearchers() {
+     long endNumOpens = SolrIndexSearcher.numOpens.get();
+     long endNumCloses = SolrIndexSearcher.numCloses.get();
+
+     if (endNumOpens-numOpens != endNumCloses-numCloses) {
+       String msg = "ERROR: SolrIndexSearcher opens=" + (endNumOpens-numOpens) + " closes=" + (endNumCloses-numCloses);
+       log.error(msg);
+       // TODO: make this fail if we manage to clean up
+       // fail(msg);
+     }
+  }
+
   /** Causes an exception matching the regex pattern to not be logged. */
   public static void ignoreException(String pattern) {
     if (SolrException.ignorePatterns == null)
@@ -260,7 +283,9 @@ public abstract class SolrTestCaseJ4 extends LuceneTestCase {
     solrConfig = null;
     h = null;
     lrf = null;
-    configString = schemaString = null;    
+    configString = schemaString = null;
+
+    endTrackingSearchers();
   }
 
 
@@ -528,6 +553,14 @@ public abstract class SolrTestCaseJ4 extends LuceneTestCase {
     return d;
   }
 
+  public static ModifiableSolrParams params(String... params) {
+    ModifiableSolrParams msp = new ModifiableSolrParams();
+    for (int i=0; i<params.length; i+=2) {
+      msp.add(params[i], params[i+1]);
+    }
+    return msp;
+  }
+
   /**
    * Generates a SolrQueryRequest using the LocalRequestFactory
    * @see #lrf
@@ -552,6 +585,17 @@ public abstract class SolrTestCaseJ4 extends LuceneTestCase {
     return lrf.makeRequest(allParams);
   }
 
+  /**
+   * Generates a SolrQueryRequest
+   */
+  public static SolrQueryRequest req(SolrParams params, String... moreParams) {
+    ModifiableSolrParams mp = new ModifiableSolrParams(params);
+    for (int i=0; i<moreParams.length; i+=2) {
+      mp.add(moreParams[i], moreParams[i+1]);
+    }
+    return new LocalSolrQueryRequest(h.getCore(), mp);
+  }
+
   /** Neccessary to make method signatures un-ambiguous */
   public static class Doc {
     public String xml;
