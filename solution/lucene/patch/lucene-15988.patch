diff --git a/lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.java b/lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.java
index 053af47..166add8 100644
--- a/lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.java
+++ b/lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader.java
@@ -31,6 +31,7 @@ import org.apache.lucene.index.FieldInfos;
 import org.apache.lucene.index.FieldsEnum;
 import org.apache.lucene.index.IndexFileNames;
 import org.apache.lucene.index.SegmentInfo;
+import org.apache.lucene.index.TermState;
 import org.apache.lucene.index.Terms;
 import org.apache.lucene.index.TermsEnum;
 import org.apache.lucene.store.Directory;
@@ -68,7 +69,7 @@ public class PrefixCodedTermsReader extends FieldsProducer {
   private final Comparator<BytesRef> termComp;
 
   // Caches the most recently looked-up field + terms:
-  private final DoubleBarrelLRUCache<FieldAndTerm,TermState> termsCache;
+  private final DoubleBarrelLRUCache<FieldAndTerm,PrefixCodedTermState> termsCache;
 
   // Reads the terms index
   private TermsIndexReaderBase indexReader;
@@ -84,11 +85,6 @@ public class PrefixCodedTermsReader extends FieldsProducer {
     public FieldAndTerm() {
     }
 
-    public FieldAndTerm(String field, BytesRef term) {
-      this.field = field;
-      this.term = new BytesRef(term);
-    }
-
     public FieldAndTerm(FieldAndTerm other) {
       field = other.field;
       term = new BytesRef(other.term);
@@ -116,7 +112,7 @@ public class PrefixCodedTermsReader extends FieldsProducer {
     throws IOException {
     
     this.postingsReader = postingsReader;
-    termsCache = new DoubleBarrelLRUCache<FieldAndTerm,TermState>(termsCacheSize);
+    termsCache = new DoubleBarrelLRUCache<FieldAndTerm,PrefixCodedTermState>(termsCacheSize);
 
     this.termComp = termComp;
     
@@ -278,10 +274,10 @@ public class PrefixCodedTermsReader extends FieldsProducer {
     }
 
     // Iterates through terms in this field, not supporting ord()
-    private class SegmentTermsEnum extends TermsEnum {
+    private final class SegmentTermsEnum extends TermsEnum {
       private final IndexInput in;
       private final DeltaBytesReader bytesReader;
-      private final TermState state;
+      private final PrefixCodedTermState state;
       private boolean seekPending;
       private final FieldAndTerm fieldTerm = new FieldAndTerm();
       private final TermsIndexReaderBase.FieldIndexEnum indexEnum;
@@ -307,14 +303,6 @@ public class PrefixCodedTermsReader extends FieldsProducer {
         return termComp;
       }
 
-      @Override
-      public void cacheCurrentTerm() {
-        TermState stateCopy = (TermState) state.clone();
-        stateCopy.filePointer = in.getFilePointer();
-        termsCache.put(new FieldAndTerm(fieldInfo.name, bytesReader.term),
-                       stateCopy);
-      }
-
       // called only from assert
       private boolean first;
       private int indexTermCount;
@@ -342,7 +330,7 @@ public class PrefixCodedTermsReader extends FieldsProducer {
        *  is found, SeekStatus.NOT_FOUND if a different term
        *  was found, SeekStatus.END if we hit EOF */
       @Override
-      public SeekStatus seek(BytesRef term, boolean useCache) throws IOException {
+      public SeekStatus seek(final BytesRef term, final boolean useCache) throws IOException {
 
         if (indexEnum == null) {
           throw new IllegalStateException("terms index was not loaded");
@@ -357,9 +345,8 @@ public class PrefixCodedTermsReader extends FieldsProducer {
           cachedState = termsCache.get(fieldTerm);
           if (cachedState != null) {
             state.copyFrom(cachedState);
-            seekPending = true;
+            setTermState(term, state);
             positioned = false;
-            bytesReader.term.copy(term);
             //System.out.println("  cached!");
             return SeekStatus.FOUND;
           }
@@ -439,12 +426,7 @@ public class PrefixCodedTermsReader extends FieldsProducer {
           if (cmp == 0) {
             // Done!
             if (useCache) {
-              // Store in cache
-              FieldAndTerm entryKey = new FieldAndTerm(fieldTerm);
-              cachedState = (TermState) state.clone();
-              // this is fp after current term
-              cachedState.filePointer = in.getFilePointer();
-              termsCache.put(entryKey, cachedState);
+              cacheTerm(fieldTerm);
             }
 
             return SeekStatus.FOUND;
@@ -464,6 +446,23 @@ public class PrefixCodedTermsReader extends FieldsProducer {
         return SeekStatus.END;
       }
 
+      private final void setTermState(BytesRef term, final TermState termState) {
+        assert termState != null && termState instanceof PrefixCodedTermState;
+        state.copyFrom(termState);
+        seekPending = true;
+        bytesReader.term.copy(term);
+      }
+
+      private final void cacheTerm(FieldAndTerm other) {
+        // Store in cache
+        final FieldAndTerm entryKey = new FieldAndTerm(other);
+        final PrefixCodedTermState cachedState = (PrefixCodedTermState) state.clone();
+        // this is fp after current term
+        cachedState.filePointer = in.getFilePointer();
+        termsCache.put(entryKey, cachedState);
+      }
+      
+
       @Override
       public BytesRef term() {
         return bytesReader.term;
@@ -498,7 +497,9 @@ public class PrefixCodedTermsReader extends FieldsProducer {
         postingsReader.readTerm(in,
                                 fieldInfo, state,
                                 isIndexTerm);
-        state.ord++;
+        if (doOrd) {
+          state.ord++;
+        }
         positioned = true;
 
         //System.out.println("te.next term=" + bytesReader.term.utf8ToString());
@@ -512,7 +513,7 @@ public class PrefixCodedTermsReader extends FieldsProducer {
 
       @Override
       public DocsEnum docs(Bits skipDocs, DocsEnum reuse) throws IOException {
-        DocsEnum docsEnum = postingsReader.docs(fieldInfo, state, skipDocs, reuse);
+        final DocsEnum docsEnum = postingsReader.docs(fieldInfo, state, skipDocs, reuse);
         assert docsEnum != null;
         return docsEnum;
       }
@@ -527,6 +528,23 @@ public class PrefixCodedTermsReader extends FieldsProducer {
       }
 
       @Override
+      public SeekStatus seek(BytesRef term, TermState otherState) throws IOException {
+        assert otherState != null && otherState instanceof PrefixCodedTermState;
+        assert otherState.getClass() == this.state.getClass() : "Illegal TermState type " + otherState.getClass();
+        assert ((PrefixCodedTermState)otherState).ord < numTerms;
+        setTermState(term, otherState);
+        positioned = false;
+        return SeekStatus.FOUND;
+      }
+      
+      @Override
+      public TermState termState() throws IOException {
+        final PrefixCodedTermState newTermState = (PrefixCodedTermState) state.clone();
+        newTermState.filePointer = in.getFilePointer();
+        return newTermState;
+      }
+
+      @Override
       public SeekStatus seek(long ord) throws IOException {
 
         if (indexEnum == null) {
@@ -562,7 +580,6 @@ public class PrefixCodedTermsReader extends FieldsProducer {
         return SeekStatus.FOUND;
       }
 
-      @Override
       public long ord() {
         if (!doOrd) {
           throw new UnsupportedOperationException();
