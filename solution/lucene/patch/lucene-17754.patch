diff --git a/lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest.java b/lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest.java
index 170ef24..dbc76dd 100644
--- a/lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest.java
+++ b/lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest.java
@@ -20,6 +20,7 @@ package org.apache.lucene.misc;
 
 import org.apache.lucene.search.DefaultSimilarity;
 import org.apache.lucene.search.Similarity;
+import org.apache.lucene.search.SimilarityProvider;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.index.FieldInvertState;
 
@@ -30,8 +31,8 @@ public class SweetSpotSimilarityTest extends LuceneTestCase {
 
   public void testSweetSpotComputeNorm() {
   
-    SweetSpotSimilarity ss = new SweetSpotSimilarity();
-    ss.setLengthNormFactors(1,1,0.5f);
+    final SweetSpotSimilarity ss = new SweetSpotSimilarity();
+    ss.setLengthNormFactors(1,1,0.5f,true);
 
     Similarity d = new DefaultSimilarity();
     Similarity s = ss;
@@ -43,28 +44,28 @@ public class SweetSpotSimilarityTest extends LuceneTestCase {
     for (int i = 1; i < 1000; i++) {
       invertState.setLength(i);
       assertEquals("base case: i="+i,
-                   d.computeNorm("foo", invertState),
-                   s.computeNorm("foo", invertState),
+                   d.computeNorm(invertState),
+                   s.computeNorm(invertState),
                    0.0f);
     }
 
     // make a sweet spot
   
-    ss.setLengthNormFactors(3,10,0.5f);
+    ss.setLengthNormFactors(3,10,0.5f,true);
   
     for (int i = 3; i <=10; i++) {
       invertState.setLength(i);
       assertEquals("3,10: spot i="+i,
                    1.0f,
-                   s.computeNorm("foo", invertState),
+                   s.computeNorm(invertState),
                    0.0f);
     }
   
     for (int i = 10; i < 1000; i++) {
       invertState.setLength(i-9);
-      final float normD = d.computeNorm("foo", invertState);
+      final float normD = d.computeNorm(invertState);
       invertState.setLength(i);
-      final float normS = s.computeNorm("foo", invertState);
+      final float normS = s.computeNorm(invertState);
       assertEquals("3,10: 10<x : i="+i,
                    normD,
                    normS,
@@ -74,22 +75,42 @@ public class SweetSpotSimilarityTest extends LuceneTestCase {
 
     // seperate sweet spot for certain fields
 
-    ss.setLengthNormFactors("bar",8,13, 0.5f, false);
-    ss.setLengthNormFactors("yak",6,9, 0.5f, false);
-
+    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();
+    ssBar.setLengthNormFactors(8,13, 0.5f, false);
+    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();
+    ssYak.setLengthNormFactors(6,9, 0.5f, false);
+    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();
+    ssA.setLengthNormFactors(5,8,0.5f, false);
+    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();
+    ssB.setLengthNormFactors(5,8,0.1f, false);
+    
+    SimilarityProvider sp = new SweetSpotSimilarity() {
+      public Similarity get(String field) {
+        if (field.equals("bar"))
+          return ssBar;
+        else if (field.equals("yak"))
+          return ssYak;
+        else if (field.equals("a"))
+          return ssA;
+        else if (field.equals("b"))
+          return ssB;
+        else
+          return ss;
+      }
+    };
   
     for (int i = 3; i <=10; i++) {
       invertState.setLength(i);
       assertEquals("f: 3,10: spot i="+i,
                    1.0f,
-                   s.computeNorm("foo", invertState),
+                   sp.get("foo").computeNorm(invertState),
                    0.0f);
     }
     for (int i = 10; i < 1000; i++) {
       invertState.setLength(i-9);
-      final float normD = d.computeNorm("foo", invertState);
+      final float normD = d.computeNorm(invertState);
       invertState.setLength(i);
-      final float normS = s.computeNorm("foo", invertState);
+      final float normS = sp.get("foo").computeNorm(invertState);
       assertEquals("f: 3,10: 10<x : i="+i,
                    normD,
                    normS,
@@ -99,21 +120,21 @@ public class SweetSpotSimilarityTest extends LuceneTestCase {
       invertState.setLength(i);
       assertEquals("f: 8,13: spot i="+i,
                    1.0f,
-                   s.computeNorm("bar", invertState),
+                   sp.get("bar").computeNorm(invertState),
                    0.0f);
     }
     for (int i = 6; i <=9; i++) {
       invertState.setLength(i);
       assertEquals("f: 6,9: spot i="+i,
                    1.0f,
-                   s.computeNorm("yak", invertState),
+                   sp.get("yak").computeNorm(invertState),
                    0.0f);
     }
     for (int i = 13; i < 1000; i++) {
       invertState.setLength(i-12);
-      final float normD = d.computeNorm("foo", invertState);
+      final float normD = d.computeNorm(invertState);
       invertState.setLength(i);
-      final float normS = s.computeNorm("bar", invertState);
+      final float normS = sp.get("bar").computeNorm(invertState);
       assertEquals("f: 8,13: 13<x : i="+i,
                    normD,
                    normS,
@@ -121,9 +142,9 @@ public class SweetSpotSimilarityTest extends LuceneTestCase {
     }
     for (int i = 9; i < 1000; i++) {
       invertState.setLength(i-8);
-      final float normD = d.computeNorm("foo", invertState);
+      final float normD = d.computeNorm(invertState);
       invertState.setLength(i);
-      final float normS = s.computeNorm("yak", invertState);
+      final float normS = sp.get("yak").computeNorm(invertState);
       assertEquals("f: 6,9: 9<x : i="+i,
                    normD,
                    normS,
@@ -133,13 +154,10 @@ public class SweetSpotSimilarityTest extends LuceneTestCase {
 
     // steepness
 
-    ss.setLengthNormFactors("a",5,8,0.5f, false);
-    ss.setLengthNormFactors("b",5,8,0.1f, false);
-
     for (int i = 9; i < 1000; i++) {
       invertState.setLength(i);
-      final float normSS = ss.computeNorm("a", invertState);
-      final float normS = s.computeNorm("b", invertState);
+      final float normSS = sp.get("a").computeNorm(invertState);
+      final float normS = sp.get("b").computeNorm(invertState);
       assertTrue("s: i="+i+" : a="+normSS+
                  " < b="+normS,
                  normSS < normS);
