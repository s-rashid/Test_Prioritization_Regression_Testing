diff --git a/lucene/src/java/org/apache/lucene/index/values/VarDerefBytesImpl.java b/lucene/src/java/org/apache/lucene/index/values/VarDerefBytesImpl.java
index beb0c14..2dfa5bd 100644
--- a/lucene/src/java/org/apache/lucene/index/values/VarDerefBytesImpl.java
+++ b/lucene/src/java/org/apache/lucene/index/values/VarDerefBytesImpl.java
@@ -50,16 +50,16 @@ class VarDerefBytesImpl {
   static final String CODEC_NAME = "VarDerefBytes";
   static final int VERSION_START = 0;
   static final int VERSION_CURRENT = VERSION_START;
-  
- 
 
-  private static class AddressParallelArray extends ParallelArrayBase<AddressParallelArray> {
+  private static class AddressParallelArray extends
+      ParallelArrayBase<AddressParallelArray> {
     final int[] address;
-    
+
     AddressParallelArray(int size, AtomicLong bytesUsed) {
       super(size, bytesUsed);
-      address = new int[size]; 
+      address = new int[size];
     }
+
     @Override
     protected int bytesPerEntry() {
       return RamUsageEstimator.NUM_BYTES_INT + super.bytesPerEntry();
@@ -69,46 +69,50 @@ class VarDerefBytesImpl {
     protected void copyTo(AddressParallelArray toArray, int numToCopy) {
       super.copyTo(toArray, numToCopy);
       System.arraycopy(address, 0, toArray.address, 0, size);
-      
+
     }
 
     @Override
     public AddressParallelArray newInstance(int size) {
       return new AddressParallelArray(size, bytesUsed);
     }
-    
-  }
 
+  }
 
   static class Writer extends BytesWriterBase {
     private int[] docToAddress;
     private int address = 1;
-    
-    private final ParallelBytesStartArray<AddressParallelArray> array = new ParallelBytesStartArray<AddressParallelArray>(new AddressParallelArray(0, bytesUsed));
-    private final BytesRefHash hash  = new BytesRefHash(pool, 16, array) ;
 
-    public Writer(Directory dir, String id) throws IOException  {
+    private final ParallelBytesStartArray<AddressParallelArray> array = new ParallelBytesStartArray<AddressParallelArray>(
+        new AddressParallelArray(0, bytesUsed));
+    private final BytesRefHash hash = new BytesRefHash(pool, 16, array);
+
+    public Writer(Directory dir, String id) throws IOException {
       this(dir, id, new DirectAllocator(ByteBlockPool.BYTE_BLOCK_SIZE),
           new AtomicLong());
     }
-    public Writer(Directory dir, String id, Allocator allocator, AtomicLong bytesUsed) throws IOException {
-      super(dir, id, CODEC_NAME, VERSION_CURRENT, false, false, new ByteBlockPool(allocator), bytesUsed);
+
+    public Writer(Directory dir, String id, Allocator allocator,
+        AtomicLong bytesUsed) throws IOException {
+      super(dir, id, CODEC_NAME, VERSION_CURRENT, false, false,
+          new ByteBlockPool(allocator), bytesUsed);
       docToAddress = new int[1];
       bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT);
     }
 
     @Override
     synchronized public void add(int docID, BytesRef bytes) throws IOException {
-      if(bytes.length == 0)
+      if (bytes.length == 0)
         return; // default
-      if(datOut == null)
+      if (datOut == null)
         initDataOut();
       final int e = hash.add(bytes);
 
       if (docID >= docToAddress.length) {
         final int oldSize = docToAddress.length;
-        docToAddress = ArrayUtil.grow(docToAddress, 1+docID);
-        bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * (docToAddress.length - oldSize));
+        docToAddress = ArrayUtil.grow(docToAddress, 1 + docID);
+        bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT
+            * (docToAddress.length - oldSize));
       }
       final int docAddress;
       if (e >= 0) {
@@ -117,12 +121,13 @@ class VarDerefBytesImpl {
         datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);
         address += bytes.length;
       } else {
-        docAddress = array.array.address[(-e)-1];
+        docAddress = array.array.address[(-e) - 1];
       }
       docToAddress[docID] = docAddress;
     }
-    
-    private static int writePrefixLength(DataOutput datOut, BytesRef bytes) throws IOException{
+
+    private static int writePrefixLength(DataOutput datOut, BytesRef bytes)
+        throws IOException {
       if (bytes.length < 128) {
         datOut.writeByte((byte) bytes.length);
         return 1;
@@ -132,7 +137,7 @@ class VarDerefBytesImpl {
         return 2;
       }
     }
-    
+
     public long ramBytesUsed() {
       return bytesUsed.get();
     }
@@ -141,25 +146,26 @@ class VarDerefBytesImpl {
     // some last docs that we didn't see
     @Override
     synchronized public void finish(int docCount) throws IOException {
-      if(datOut == null)
+      if (datOut == null)
         return;
       initIndexOut();
-      idxOut.writeInt(address-1);
+      idxOut.writeInt(address - 1);
 
       // write index
       // TODO(simonw): -- allow forcing fixed array (not -1)
       // TODO(simonw): check the address calculation / make it more intuitive
-      final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount, PackedInts.bitsRequired(address-1));
+      final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,
+          PackedInts.bitsRequired(address - 1));
       final int limit;
       if (docCount > docToAddress.length) {
         limit = docToAddress.length;
       } else {
         limit = docCount;
       }
-      for(int i=0;i<limit;i++) {
+      for (int i = 0; i < limit; i++) {
         w.add(docToAddress[i]);
       }
-      for(int i=limit;i<docCount;i++) {
+      for (int i = limit; i < docCount; i++) {
         w.add(0);
       }
       w.finish();
@@ -170,8 +176,7 @@ class VarDerefBytesImpl {
 
   public static class Reader extends BytesReaderBase {
 
-    Reader(Directory dir, String id, int maxDoc)
-      throws IOException {
+    Reader(Directory dir, String id, int maxDoc) throws IOException {
       super(dir, id, CODEC_NAME, VERSION_START, true);
     }
 
@@ -182,49 +187,53 @@ class VarDerefBytesImpl {
       data.seek(CodecUtil.headerLength(CODEC_NAME));
       index.seek(CodecUtil.headerLength(CODEC_NAME));
       final long totalBytes = index.readInt(); // should be long
-      return new Source(data,index, totalBytes);
+      return new Source(data, index, totalBytes);
     }
 
     private static class Source extends BytesBaseSource {
-      private final BytesRef bytesRef = new BytesRef();
       private final PackedInts.Reader index;
 
-      public Source(IndexInput datIn, IndexInput idxIn, long totalBytes) throws IOException {
+      public Source(IndexInput datIn, IndexInput idxIn, long totalBytes)
+          throws IOException {
         super(datIn, idxIn, new PagedBytes(PAGED_BYTES_BITS), totalBytes);
         index = PackedInts.getReader(idxIn);
       }
 
       @Override
-      public BytesRef getBytes(int docID) {
-        long address =  index.get(docID);
-        if (address == 0) {
-          assert defaultValue.length == 0: " default value manipulated";
-          return defaultValue;
-        } else {
-          data.fillUsingLengthPrefix2(bytesRef, --address);
-          return bytesRef;
-        }
+      public BytesRef getBytes(int docID, BytesRef bytesRef) {
+        long address = index.get(docID);
+        return address == 0 ? null : data.fillUsingLengthPrefix4(bytesRef,
+            --address);
       }
-      
+
       @Override
       public int getValueCount() {
+        throw new UnsupportedOperationException();
+      }
+
+      @Override
+      public Values type() {
+        return Values.BYTES_VAR_DEREF;
+      }
+
+      @Override
+      protected int maxDoc() {
         return index.size();
       }
     }
 
     @Override
     public ValuesEnum getEnum(AttributeSource source) throws IOException {
-      return new VarDerefBytesEnum(source, cloneData(), cloneIndex(), CODEC_NAME);
+      return new VarDerefBytesEnum(source, cloneData(), cloneIndex());
     }
-    
+
     static class VarDerefBytesEnum extends DerefBytesEnum {
 
-      public VarDerefBytesEnum(AttributeSource source, IndexInput datIn, IndexInput idxIn,
-          String codecName) throws IOException {
-        super(source, datIn, idxIn, codecName, -1, Values.BYTES_VAR_DEREF);
+      public VarDerefBytesEnum(AttributeSource source, IndexInput datIn,
+          IndexInput idxIn) throws IOException {
+        super(source, datIn, idxIn, -1, Values.BYTES_VAR_DEREF);
       }
 
-    
       @Override
       protected void fill(long address, BytesRef ref) throws IOException {
         datIn.seek(fp + --address);
@@ -234,16 +243,16 @@ class VarDerefBytesImpl {
           // length is 1 byte
           size = sizeByte;
         } else {
-          size = ((sizeByte & 0x7f)<<8) | ((datIn.readByte() & 0xff));
+          size = ((sizeByte & 0x7f) << 8) | ((datIn.readByte() & 0xff));
         }
-        if(ref.bytes.length < size)
+        if (ref.bytes.length < size)
           ref.grow(size);
         ref.length = size;
         ref.offset = 0;
         datIn.readBytes(ref.bytes, 0, size);
       }
     }
-    
+
     @Override
     public Values type() {
       return Values.BYTES_VAR_DEREF;
