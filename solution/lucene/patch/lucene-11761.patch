diff --git a/lucene/src/java/org/apache/lucene/index/FieldInfos.java b/lucene/src/java/org/apache/lucene/index/FieldInfos.java
index aa11aa7..0c8aef3 100644
--- a/lucene/src/java/org/apache/lucene/index/FieldInfos.java
+++ b/lucene/src/java/org/apache/lucene/index/FieldInfos.java
@@ -39,12 +39,13 @@ public final class FieldInfos {
 
   // First used in 2.9; prior to 2.9 there was no format header
   public static final int FORMAT_START = -2;
+  public static final int FORMAT_PER_FIELD_CODEC = -3;
 
   // Records index values for this field
   public static final int FORMAT_INDEX_VALUES = -3;
 
   // whenever you add a new format, make it 1 smaller (negative version logic)!
-  static final int FORMAT_CURRENT = FORMAT_INDEX_VALUES;
+  static final int FORMAT_CURRENT = FORMAT_PER_FIELD_CODEC;
   
   static final int FORMAT_MINIMUM = FORMAT_START;
   
@@ -60,7 +61,8 @@ public final class FieldInfos {
   private final HashMap<String,FieldInfo> byName = new HashMap<String,FieldInfo>();
   private int format;
 
-  public FieldInfos() { }
+  public FieldInfos() {
+  }
 
   /**
    * Construct a FieldInfos object using the directory and the name of the file
@@ -305,8 +307,8 @@ public final class FieldInfos {
       if (fi.omitNorms) bits |= OMIT_NORMS;
       if (fi.storePayloads) bits |= STORE_PAYLOADS;
       if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;
-
       output.writeString(fi.name);
+      output.writeInt(fi.codecId);
       output.writeByte(bits);
 
       final byte b;
@@ -367,6 +369,8 @@ public final class FieldInfos {
 
     for (int i = 0; i < size; i++) {
       String name = StringHelper.intern(input.readString());
+      // if this is a previous format codec 0 will be preflex!
+      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;
       byte bits = input.readByte();
       boolean isIndexed = (bits & IS_INDEXED) != 0;
       boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;
@@ -375,8 +379,7 @@ public final class FieldInfos {
       boolean omitNorms = (bits & OMIT_NORMS) != 0;
       boolean storePayloads = (bits & STORE_PAYLOADS) != 0;
       boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;
-      
-      FieldInfo fi = addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);
+      final FieldInfo fi = addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);
       if (format <= FORMAT_INDEX_VALUES) {
         final byte b = input.readByte();
         switch(b) {
@@ -417,6 +420,7 @@ public final class FieldInfos {
           throw new IllegalStateException("unhandled indexValues type " + b);
         }
       }
+      fi.codecId = codecId;
     }
 
     if (input.getFilePointer() != input.length()) {
