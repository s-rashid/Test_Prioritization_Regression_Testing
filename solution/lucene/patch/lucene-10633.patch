diff --git a/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestErrorHandling.java b/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestErrorHandling.java
index 616968b..0f70381 100644
--- a/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestErrorHandling.java
+++ b/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestErrorHandling.java
@@ -23,6 +23,9 @@ import java.util.List;
 import java.util.Map;
 import java.util.Properties;
 
+import org.junit.Before;
+import org.junit.BeforeClass;
+
 /**
  * Tests exception handling during imports in DataImportHandler
  *
@@ -31,23 +34,35 @@ import java.util.Properties;
  */
 public class TestErrorHandling extends AbstractDataImportHandlerTestCase {
 
+  @BeforeClass
+  public static void beforeClass() throws Exception {
+    initCore("dataimport-solrconfig.xml", "dataimport-schema.xml");
+  }
+  
+  @Before @Override
+  public void setUp() throws Exception {
+    super.setUp();
+    clearIndex();
+    assertU(commit());
+  }
+  
   public void testMalformedStreamingXml() throws Exception {
     StringDataSource.xml = malformedXml;
-    super.runFullImport(dataConfigWithStreaming);
+    runFullImport(dataConfigWithStreaming);
     assertQ(req("id:1"), "//*[@numFound='1']");
     assertQ(req("id:2"), "//*[@numFound='1']");
   }
 
   public void testMalformedNonStreamingXml() throws Exception {
     StringDataSource.xml = malformedXml;
-    super.runFullImport(dataConfigWithoutStreaming);
+    runFullImport(dataConfigWithoutStreaming);
     assertQ(req("id:1"), "//*[@numFound='1']");
     assertQ(req("id:2"), "//*[@numFound='1']");
   }
 
   public void testAbortOnError() throws Exception {
     StringDataSource.xml = malformedXml;
-    super.runFullImport(dataConfigAbortOnError);
+    runFullImport(dataConfigAbortOnError);
     assertQ(req("*:*"), "//*[@numFound='0']");
   }
 
@@ -56,30 +71,10 @@ public class TestErrorHandling extends AbstractDataImportHandlerTestCase {
     List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();
     rows.add(createMap("id", "3", "desc", "exception-transformer"));
     MockDataSource.setIterator("select * from foo", rows.iterator());
-    super.runFullImport(dataConfigWithTransformer);
+    runFullImport(dataConfigWithTransformer);
     assertQ(req("*:*"), "//*[@numFound='3']");
   }
 
-  @Override
-  public String getSchemaFile() {
-    return "dataimport-schema.xml";
-  }
-
-  @Override
-  public String getSolrConfigFile() {
-    return "dataimport-solrconfig.xml";
-  }
-
-  @Override
-  public void setUp() throws Exception {
-    super.setUp();
-  }
-
-  @Override
-  public void tearDown() throws Exception {
-    super.tearDown();
-  }
-
   public static class StringDataSource extends DataSource<Reader> {
     public static String xml = "";
