diff --git a/solr/src/java/org/apache/solr/search/function/MultiFloatFunction.java b/solr/src/java/org/apache/solr/search/function/MultiFloatFunction.java
index f66bdfe..4e28799 100644
--- a/solr/src/java/org/apache/solr/search/function/MultiFloatFunction.java
+++ b/solr/src/java/org/apache/solr/search/function/MultiFloatFunction.java
@@ -38,6 +38,7 @@ public abstract class MultiFloatFunction extends ValueSource {
   abstract protected String name();
   abstract protected float func(int doc, DocValues[] valsArr);
 
+  @Override
   public String description() {
     StringBuilder sb = new StringBuilder();
     sb.append(name()).append('(');
@@ -54,6 +55,7 @@ public abstract class MultiFloatFunction extends ValueSource {
     return sb.toString();
   }
 
+  @Override
   public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final DocValues[] valsArr = new DocValues[sources.length];
     for (int i=0; i<sources.length; i++) {
@@ -61,21 +63,27 @@ public abstract class MultiFloatFunction extends ValueSource {
     }
 
     return new DocValues() {
+      @Override
       public float floatVal(int doc) {
         return func(doc, valsArr);
       }
+      @Override
       public int intVal(int doc) {
         return (int)floatVal(doc);
       }
+      @Override
       public long longVal(int doc) {
         return (long)floatVal(doc);
       }
+      @Override
       public double doubleVal(int doc) {
         return (double)floatVal(doc);
       }
+      @Override
       public String strVal(int doc) {
         return Float.toString(floatVal(doc));
       }
+      @Override
       public String toString(int doc) {
         StringBuilder sb = new StringBuilder();
         sb.append(name()).append('(');
@@ -100,10 +108,12 @@ public abstract class MultiFloatFunction extends ValueSource {
       source.createWeight(context, searcher);
   }
 
+  @Override
   public int hashCode() {
     return Arrays.hashCode(sources) + name().hashCode();
   }
 
+  @Override
   public boolean equals(Object o) {
     if (this.getClass() != o.getClass()) return false;
     MultiFloatFunction other = (MultiFloatFunction)o;
