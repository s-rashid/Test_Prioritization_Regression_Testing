diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter.java
index 4e46b16..b821fd1 100644
--- a/modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter.java
+++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter.java
@@ -18,12 +18,10 @@ package org.apache.lucene.analysis.compound;
  */
 
 import java.io.File;
-import java.io.FileInputStream;
-import java.io.Reader;
 import java.util.Set;
 
 import org.apache.lucene.analysis.Token;
-import org.apache.lucene.analysis.TokenFilter; // for javadocs
+import org.apache.lucene.analysis.TokenFilter;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.compound.hyphenation.Hyphenation;
 import org.apache.lucene.analysis.compound.hyphenation.HyphenationTree;
@@ -68,8 +66,10 @@ public class HyphenationCompoundWordTokenFilter extends
   public HyphenationCompoundWordTokenFilter(Version matchVersion, TokenStream input,
       HyphenationTree hyphenator, String[] dictionary, int minWordSize,
       int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {
-    this(input, hyphenator, makeDictionary(dictionary), minWordSize,
-        minSubwordSize, maxSubwordSize, onlyLongestMatch);
+    super(matchVersion, input, dictionary, minWordSize, minSubwordSize, maxSubwordSize,
+        onlyLongestMatch);
+
+    this.hyphenator = hyphenator;
   }
 
   /**
@@ -89,7 +89,7 @@ public class HyphenationCompoundWordTokenFilter extends
    */
   public HyphenationCompoundWordTokenFilter(Version matchVersion, TokenStream input,
       HyphenationTree hyphenator, String[] dictionary) {
-    this(input, hyphenator, makeDictionary(dictionary), DEFAULT_MIN_WORD_SIZE,
+    this(matchVersion, input, hyphenator, makeDictionary(dictionary), DEFAULT_MIN_WORD_SIZE,
         DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);
   }
 
@@ -113,7 +113,7 @@ public class HyphenationCompoundWordTokenFilter extends
    */
   public HyphenationCompoundWordTokenFilter(Version matchVersion, TokenStream input,
       HyphenationTree hyphenator, Set<?> dictionary) {
-    this(input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,
+    this(matchVersion, input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,
         DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);
   }
 
@@ -180,84 +180,6 @@ public class HyphenationCompoundWordTokenFilter extends
   }
 
   /**
-   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance.
-   * 
-   * @param input the {@link TokenStream} to process
-   * @param hyphenator the hyphenation pattern tree to use for hyphenation
-   * @param dictionary the word dictionary to match against
-   * @param minWordSize only words longer than this get processed
-   * @param minSubwordSize only subwords longer than this get to the output
-   *        stream
-   * @param maxSubwordSize only subwords shorter than this get to the output
-   *        stream
-   * @param onlyLongestMatch Add only the longest matching subword to the stream
-   * @deprecated use {@link #HyphenationCompoundWordTokenFilter(Version, TokenStream, HyphenationTree, String[], int, int, int, boolean)} instead. 
-   */
-  @Deprecated
-  public HyphenationCompoundWordTokenFilter(TokenStream input,
-      HyphenationTree hyphenator, String[] dictionary, int minWordSize,
-      int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {
-    this(Version.LUCENE_30, input, hyphenator, makeDictionary(dictionary), minWordSize,
-        minSubwordSize, maxSubwordSize, onlyLongestMatch);
-  }
-
-  /**
-   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance.
-   *  
-   * @param input the {@link TokenStream} to process
-   * @param hyphenator the hyphenation pattern tree to use for hyphenation
-   * @param dictionary the word dictionary to match against
-   * @deprecated use {@link #HyphenationCompoundWordTokenFilter(Version, TokenStream, HyphenationTree, String[])} instead.
-   */
-  @Deprecated
-  public HyphenationCompoundWordTokenFilter(TokenStream input,
-      HyphenationTree hyphenator, String[] dictionary) {
-    this(Version.LUCENE_30, input, hyphenator, makeDictionary(dictionary), DEFAULT_MIN_WORD_SIZE,
-        DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);
-  }
-
-  /**
-   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance.
-   *  
-   * @param input the {@link TokenStream} to process
-   * @param hyphenator the hyphenation pattern tree to use for hyphenation
-   * @param dictionary the word dictionary to match against. If this is a {@link org.apache.lucene.analysis.util.CharArraySet CharArraySet} it must have set ignoreCase=false and only contain
-   *        lower case strings. 
-   * @deprecated use {@link #HyphenationCompoundWordTokenFilter(Version, TokenStream, HyphenationTree, Set)} instead.        
-   */
-  @Deprecated
-  public HyphenationCompoundWordTokenFilter(TokenStream input,
-      HyphenationTree hyphenator, Set<?> dictionary) {
-    this(Version.LUCENE_30, input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,
-        DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);
-  }
-
-  /**
-   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance.
-   *  
-   * @param input the {@link TokenStream} to process
-   * @param hyphenator the hyphenation pattern tree to use for hyphenation
-   * @param dictionary the word dictionary to match against. If this is a {@link org.apache.lucene.analysis.util.CharArraySet CharArraySet} it must have set ignoreCase=false and only contain
-   *        lower case strings. 
-   * @param minWordSize only words longer than this get processed
-   * @param minSubwordSize only subwords longer than this get to the output
-   *        stream
-   * @param maxSubwordSize only subwords shorter than this get to the output
-   *        stream
-   * @param onlyLongestMatch Add only the longest matching subword to the stream
-   * @deprecated use {@link #HyphenationCompoundWordTokenFilter(Version, TokenStream, HyphenationTree, Set, int, int, int, boolean)} instead.
-   */
-  @Deprecated
-  public HyphenationCompoundWordTokenFilter(TokenStream input,
-      HyphenationTree hyphenator, Set<?> dictionary, int minWordSize,
-      int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {
-    super(Version.LUCENE_30, input, dictionary, minWordSize, minSubwordSize, maxSubwordSize,
-        onlyLongestMatch);
-
-    this.hyphenator = hyphenator;
-  }
-
-  /**
    * Create a hyphenator tree
    * 
    * @param hyphenationFilename the filename of the XML grammar to load
@@ -284,27 +206,6 @@ public class HyphenationCompoundWordTokenFilter extends
   /**
    * Create a hyphenator tree
    * 
-   * @param hyphenationReader the reader of the XML grammar to load from
-   * @return An object representing the hyphenation patterns
-   * @throws Exception
-   * @deprecated Don't use Readers with fixed charset to load XML files, unless programatically created.
-   * Use {@link #getHyphenationTree(InputSource)} instead, where you can supply default charset and input
-   * stream, if you like.
-   */
-  @Deprecated
-  public static HyphenationTree getHyphenationTree(Reader hyphenationReader)
-      throws Exception {
-    final InputSource is = new InputSource(hyphenationReader);
-    // we need this to load the DTD in very old parsers (like the one in JDK 1.4).
-    // The DTD itsself is provided via EntityResolver, so it should always load, but
-    // some parsers still want to have a base URL (Crimson).
-    is.setSystemId("urn:java:" + HyphenationTree.class.getName());
-    return getHyphenationTree(is);
-  }
-
-  /**
-   * Create a hyphenator tree
-   * 
    * @param hyphenationSource the InputSource pointing to the XML grammar
    * @return An object representing the hyphenation patterns
    * @throws Exception
