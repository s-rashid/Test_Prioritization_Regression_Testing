diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer.java
index f630eab..836b5cd 100644
--- a/modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer.java
+++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchAnalyzer.java
@@ -69,11 +69,10 @@ public final class FrenchAnalyzer extends StopwordAnalyzerBase {
 
   /**
    * Extended list of typical French stopwords.
-   * @deprecated use {@link #getDefaultStopSet()} instead
+   * @deprecated (3.1) remove in Lucene 5.0 (index bw compat)
    */
-  // TODO make this private in 3.1, remove in 4.0
   @Deprecated
-  public final static String[] FRENCH_STOP_WORDS = {
+  private final static String[] FRENCH_STOP_WORDS = {
     "a", "afin", "ai", "ainsi", "apr√®s", "attendu", "au", "aujourd", "auquel", "aussi",
     "autre", "autres", "aux", "auxquelles", "auxquels", "avait", "avant", "avec", "avoir",
     "c", "car", "ce", "ceci", "cela", "celle", "celles", "celui", "cependant", "certain",
@@ -104,8 +103,7 @@ public final class FrenchAnalyzer extends StopwordAnalyzerBase {
   /**
    * Contains words that should be indexed but not stemmed.
    */
-  //TODO make this final in 3.0
-  private Set<?> excltable = Collections.<Object>emptySet();
+  private final Set<?> excltable;
 
   /**
    * Returns an unmodifiable instance of the default stop-words set.
@@ -116,7 +114,7 @@ public final class FrenchAnalyzer extends StopwordAnalyzerBase {
   }
   
   private static class DefaultSetHolder {
-    /** @deprecated remove this in Lucene 4.0 */
+    /** @deprecated (3.1) remove this in Lucene 5.0, index bw compat */
     @Deprecated
     static final Set<?> DEFAULT_STOP_SET_30 = CharArraySet
         .unmodifiableSet(new CharArraySet(Version.LUCENE_CURRENT, Arrays.asList(FRENCH_STOP_WORDS),
@@ -171,57 +169,6 @@ public final class FrenchAnalyzer extends StopwordAnalyzerBase {
     this.excltable = CharArraySet.unmodifiableSet(CharArraySet
         .copy(matchVersion, stemExclutionSet));
   }
- 
-
-  /**
-   * Builds an analyzer with the given stop words.
-   * @deprecated use {@link #FrenchAnalyzer(Version, Set)} instead
-   */
-  @Deprecated
-  public FrenchAnalyzer(Version matchVersion, String... stopwords) {
-    this(matchVersion, StopFilter.makeStopSet(matchVersion, stopwords));
-  }
-
-  /**
-   * Builds an analyzer with the given stop words.
-   * @throws IOException
-   * @deprecated use {@link #FrenchAnalyzer(Version, Set)} instead
-   */
-  @Deprecated
-  public FrenchAnalyzer(Version matchVersion, File stopwords) throws IOException {
-    this(matchVersion, WordlistLoader.getWordSet(stopwords));
-  }
-
-  /**
-   * Builds an exclusionlist from an array of Strings.
-   * @deprecated use {@link #FrenchAnalyzer(Version, Set, Set)} instead
-   */
-  @Deprecated
-  public void setStemExclusionTable(String... exclusionlist) {
-    excltable = StopFilter.makeStopSet(matchVersion, exclusionlist);
-    setPreviousTokenStream(null); // force a new stemmer to be created
-  }
-
-  /**
-   * Builds an exclusionlist from a Map.
-   * @deprecated use {@link #FrenchAnalyzer(Version, Set, Set)} instead
-   */
-  @Deprecated
-  public void setStemExclusionTable(Map<?,?> exclusionlist) {
-    excltable = new HashSet<Object>(exclusionlist.keySet());
-    setPreviousTokenStream(null); // force a new stemmer to be created
-  }
-
-  /**
-   * Builds an exclusionlist from the words contained in the given file.
-   * @throws IOException
-   * @deprecated use {@link #FrenchAnalyzer(Version, Set, Set)} instead
-   */
-  @Deprecated
-  public void setStemExclusionTable(File exclusionlist) throws IOException {
-    excltable = new HashSet<Object>(WordlistLoader.getWordSet(exclusionlist));
-    setPreviousTokenStream(null); // force a new stemmer to be created
-  }
 
   /**
    * Creates
@@ -250,7 +197,7 @@ public final class FrenchAnalyzer extends StopwordAnalyzerBase {
       return new TokenStreamComponents(source, result);
     } else {
       final Tokenizer source = new StandardTokenizer(matchVersion, reader);
-      TokenStream result = new StandardFilter(source);
+      TokenStream result = new StandardFilter(matchVersion, source);
       result = new StopFilter(matchVersion, result, stopwords);
       if(!excltable.isEmpty())
         result = new KeywordMarkerFilter(result, excltable);
