diff --git a/lucene/src/test/org/apache/lucene/search/TestWildcardRandom.java b/lucene/src/test/org/apache/lucene/search/TestWildcardRandom.java
index 9946076..108181f 100644
--- a/lucene/src/test/org/apache/lucene/search/TestWildcardRandom.java
+++ b/lucene/src/test/org/apache/lucene/search/TestWildcardRandom.java
@@ -33,7 +33,7 @@ import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util._TestUtil;
 
 /**
- * Create an index with terms from 0000-9999.
+ * Create an index with terms from 000-999.
  * Generates random wildcards according to patterns,
  * and validates the correct number of hits are returned.
  */
@@ -51,11 +51,11 @@ public class TestWildcardRandom extends LuceneTestCase {
         .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));
     
     Document doc = new Document();
-    Field field = newField("field", "", Field.Store.NO, Field.Index.ANALYZED);
+    Field field = newField("field", "", Field.Store.NO, Field.Index.ANALYZED_NO_NORMS);
     doc.add(field);
     
-    NumberFormat df = new DecimalFormat("0000", new DecimalFormatSymbols(Locale.ENGLISH));
-    for (int i = 0; i < 10000; i++) {
+    NumberFormat df = new DecimalFormat("000", new DecimalFormatSymbols(Locale.ENGLISH));
+    for (int i = 0; i < 1000; i++) {
       field.setValue(df.format(i));
       writer.addDocument(doc);
     }
@@ -99,48 +99,36 @@ public class TestWildcardRandom extends LuceneTestCase {
   }
   
   public void testWildcards() throws Exception {;
-    int num = 100 * RANDOM_MULTIPLIER;
+    int num = (TEST_NIGHTLY ? 100 : 1) * RANDOM_MULTIPLIER;
     for (int i = 0; i < num; i++) {
-      assertPatternHits("NNNN", 1);
-      assertPatternHits("?NNN", 10);
-      assertPatternHits("N?NN", 10);
-      assertPatternHits("NN?N", 10);
-      assertPatternHits("NNN?", 10);
+      assertPatternHits("NNN", 1);
+      assertPatternHits("?NN", 10);
+      assertPatternHits("N?N", 10);
+      assertPatternHits("NN?", 10);
     }
     
-    num = 10 * RANDOM_MULTIPLIER;
+    num = (TEST_NIGHTLY ? 10 : 1) * RANDOM_MULTIPLIER;
     for (int i = 0; i < num; i++) {
-      assertPatternHits("??NN", 100);
-      assertPatternHits("N??N", 100);
-      assertPatternHits("NN??", 100);
-      assertPatternHits("???N", 1000);
-      assertPatternHits("N???", 1000);
-      assertPatternHits("????", 10000);
+      assertPatternHits("??N", 100);
+      assertPatternHits("N??", 100);
+      assertPatternHits("???", 1000);
       
-      assertPatternHits("NNN*", 10);
-      assertPatternHits("NN*", 100);
-      assertPatternHits("N*", 1000);
-      assertPatternHits("*", 10000);
+      assertPatternHits("NN*", 10);
+      assertPatternHits("N*", 100);
+      assertPatternHits("*", 1000);
       
-      assertPatternHits("*NNN", 10);
-      assertPatternHits("*NN", 100);
-      assertPatternHits("*N", 1000);
+      assertPatternHits("*NN", 10);
+      assertPatternHits("*N", 100);
       
-      assertPatternHits("N*NN", 10);
-      assertPatternHits("NN*N", 10);
+      assertPatternHits("N*N", 10);
       
       // combo of ? and * operators
-      assertPatternHits("?NN*", 100);
-      assertPatternHits("N?N*", 100);
-      assertPatternHits("NN?*", 100);
-      assertPatternHits("?N?*", 1000);
-      assertPatternHits("N??*", 1000);
+      assertPatternHits("?N*", 100);
+      assertPatternHits("N?*", 100);
       
-      assertPatternHits("*NN?", 100);
-      assertPatternHits("*N??", 1000);
-      assertPatternHits("*???", 10000);
-      assertPatternHits("*?N?", 1000);
-      assertPatternHits("*??N", 1000);
+      assertPatternHits("*N?", 100);
+      assertPatternHits("*??", 1000);
+      assertPatternHits("*?N", 100);
     }
   }
 }
