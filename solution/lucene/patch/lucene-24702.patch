diff --git a/lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.java b/lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.java
index 025b0bf..4323ac1 100644
--- a/lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.java
+++ b/lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.java
@@ -270,11 +270,11 @@ public class PreFlexFields extends FieldsProducer {
   private class PreTermsEnum extends TermsEnum {
     private SegmentTermEnum termEnum;
     private FieldInfo fieldInfo;
+    private String internedFieldName;
     private boolean skipNext;
     private BytesRef current;
 
     private SegmentTermEnum seekTermEnum;
-    private Term protoTerm;
     
     private static final byte UTF8_NON_BMP_LEAD = (byte) 0xf0;
     private static final byte UTF8_HIGH_BMP_LEAD = (byte) 0xee;
@@ -334,7 +334,7 @@ public class PreFlexFields extends FieldsProducer {
       }
 
       // Seek "back":
-      getTermsDict().seekEnum(te, protoTerm.createTerm(term), true);
+      getTermsDict().seekEnum(te, new Term(fieldInfo.name, term), true);
 
       // Test if the term we seek'd to in fact found a
       // surrogate pair at the same position as the E:
@@ -343,7 +343,7 @@ public class PreFlexFields extends FieldsProducer {
       // Cannot be null (or move to next field) because at
       // "worst" it'd seek to the same term we are on now,
       // unless we are being called from seek
-      if (t2 == null || t2.field() != fieldInfo.name) {
+      if (t2 == null || t2.field() != internedFieldName) {
         return false;
       }
 
@@ -461,13 +461,13 @@ public class PreFlexFields extends FieldsProducer {
           
         // TODO: more efficient seek?  can we simply swap
         // the enums?
-        getTermsDict().seekEnum(termEnum, protoTerm.createTerm(scratchTerm), true);
+        getTermsDict().seekEnum(termEnum, new Term(fieldInfo.name, scratchTerm), true);
 
         final Term t2 = termEnum.term();
 
         // We could hit EOF or different field since this
         // was a seek "forward":
-        if (t2 != null && t2.field() == fieldInfo.name) {
+        if (t2 != null && t2.field() == internedFieldName) {
 
           if (DEBUG_SURROGATES) {
             System.out.println("      got term=" + UnicodeUtil.toHexString(t2.text()) + " " + t2.bytes());
@@ -552,7 +552,7 @@ public class PreFlexFields extends FieldsProducer {
       // current term.
 
       // TODO: can we avoid this copy?
-      if (termEnum.term() == null || termEnum.term().field() != fieldInfo.name) {
+      if (termEnum.term() == null || termEnum.term().field() != internedFieldName) {
         scratchTerm.length = 0;
       } else {
         scratchTerm.copy(termEnum.term().bytes());
@@ -637,7 +637,7 @@ public class PreFlexFields extends FieldsProducer {
 
           // Seek "forward":
           // TODO: more efficient seek?
-          getTermsDict().seekEnum(seekTermEnum, protoTerm.createTerm(scratchTerm), true);
+          getTermsDict().seekEnum(seekTermEnum, new Term(fieldInfo.name, scratchTerm), true);
 
           scratchTerm.bytes[upTo] = scratch[0];
           scratchTerm.bytes[upTo+1] = scratch[1];
@@ -659,7 +659,7 @@ public class PreFlexFields extends FieldsProducer {
           // EOF or a different field:
           boolean matches;
 
-          if (t2 != null && t2.field() == fieldInfo.name) {
+          if (t2 != null && t2.field() == internedFieldName) {
             final BytesRef b2 = t2.bytes();
             assert b2.offset == 0;
             if (b2.length >= upTo+3 && isHighBMPChar(b2.bytes, upTo)) {
@@ -713,20 +713,21 @@ public class PreFlexFields extends FieldsProducer {
     void reset(FieldInfo fieldInfo) throws IOException {
       //System.out.println("pff.reset te=" + termEnum);
       this.fieldInfo = fieldInfo;
-      protoTerm = new Term(fieldInfo.name);
+      internedFieldName = fieldInfo.name.intern();
+      final Term term = new Term(internedFieldName);
       if (termEnum == null) {
-        termEnum = getTermsDict().terms(protoTerm);
-        seekTermEnum = getTermsDict().terms(protoTerm);
+        termEnum = getTermsDict().terms(term);
+        seekTermEnum = getTermsDict().terms(term);
         //System.out.println("  term=" + termEnum.term());
       } else {
-        getTermsDict().seekEnum(termEnum, protoTerm, true);
+        getTermsDict().seekEnum(termEnum, term, true);
       }
       skipNext = true;
 
       unicodeSortOrder = sortTermsByUnicode();
 
       final Term t = termEnum.term();
-      if (t != null && t.field() == fieldInfo.name) {
+      if (t != null && t.field() == internedFieldName) {
         newSuffixStart = 0;
         prevTerm.length = 0;
         surrogateDance();
@@ -761,7 +762,7 @@ public class PreFlexFields extends FieldsProducer {
       }
       skipNext = false;
       final TermInfosReader tis = getTermsDict();
-      final Term t0 = protoTerm.createTerm(term);
+      final Term t0 = new Term(fieldInfo.name, term);
 
       assert termEnum != null;
 
@@ -769,7 +770,7 @@ public class PreFlexFields extends FieldsProducer {
 
       final Term t = termEnum.term();
 
-      if (t != null && t.field() == fieldInfo.name && term.bytesEquals(t.bytes())) {
+      if (t != null && t.field() == internedFieldName && term.bytesEquals(t.bytes())) {
         // If we found an exact match, no need to do the
         // surrogate dance
         if (DEBUG_SURROGATES) {
@@ -777,7 +778,7 @@ public class PreFlexFields extends FieldsProducer {
         }
         current = t.bytes();
         return SeekStatus.FOUND;
-      } else if (t == null || t.field() != fieldInfo.name) {
+      } else if (t == null || t.field() != internedFieldName) {
 
         // TODO: maybe we can handle this like the next()
         // into null?  set term as prevTerm then dance?
@@ -840,8 +841,9 @@ public class PreFlexFields extends FieldsProducer {
         surrogateDance();
 
         final Term t2 = termEnum.term();
-        if (t2 == null || t2.field() != fieldInfo.name) {
-          assert t2 == null || !t2.field().equals(fieldInfo.name); // make sure fields are in fact interned
+        if (t2 == null || t2.field() != internedFieldName) {
+          // PreFlex codec interns field names; verify:
+          assert t2 == null || !t2.field().equals(internedFieldName);
           current = null;
           return SeekStatus.END;
         } else {
@@ -885,7 +887,8 @@ public class PreFlexFields extends FieldsProducer {
         skipNext = false;
         if (termEnum.term() == null) {
           return null;
-        } else if (termEnum.term().field() != fieldInfo.name) {
+        // PreFlex codec interns field names:
+        } else if (termEnum.term().field() != internedFieldName) {
           return null;
         } else {
           return current = termEnum.term().bytes();
@@ -895,15 +898,16 @@ public class PreFlexFields extends FieldsProducer {
       // TODO: can we use STE's prevBuffer here?
       prevTerm.copy(termEnum.term().bytes());
 
-      if (termEnum.next() && termEnum.term().field() == fieldInfo.name) {
+      if (termEnum.next() && termEnum.term().field() == internedFieldName) {
         newSuffixStart = termEnum.newSuffixStart;
         if (DEBUG_SURROGATES) {
           System.out.println("  newSuffixStart=" + newSuffixStart);
         }
         surrogateDance();
         final Term t = termEnum.term();
-        if (t == null || t.field() != fieldInfo.name) {
-          assert t == null || !t.field().equals(fieldInfo.name); // make sure fields are in fact interned
+        if (t == null || t.field() != internedFieldName) {
+          // PreFlex codec interns field names; verify:
+          assert t == null || !t.field().equals(internedFieldName);
           current = null;
         } else {
           current = t.bytes();
@@ -920,8 +924,9 @@ public class PreFlexFields extends FieldsProducer {
         surrogateDance();
         
         final Term t = termEnum.term();
-        if (t == null || t.field() != fieldInfo.name) {
-          assert t == null || !t.field().equals(fieldInfo.name); // make sure fields are in fact interned
+        if (t == null || t.field() != internedFieldName) {
+          // PreFlex codec interns field names; verify:
+          assert t == null || !t.field().equals(internedFieldName);
           return null;
         } else {
           current = t.bytes();
