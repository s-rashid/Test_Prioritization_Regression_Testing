diff --git a/solr/src/java/org/apache/solr/search/SolrQueryParser.java b/solr/src/java/org/apache/solr/search/SolrQueryParser.java
index cd75039..a88a9f4 100644
--- a/solr/src/java/org/apache/solr/search/SolrQueryParser.java
+++ b/solr/src/java/org/apache/solr/search/SolrQueryParser.java
@@ -30,6 +30,7 @@ import org.apache.lucene.util.Version;
 import org.apache.lucene.util.automaton.Automaton;
 import org.apache.lucene.util.automaton.BasicAutomata;
 import org.apache.lucene.util.automaton.BasicOperations;
+import org.apache.lucene.util.automaton.SpecialOperations;
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.solr.analysis.*;
 import org.apache.solr.common.SolrException;
@@ -202,37 +203,36 @@ public class SolrQueryParser extends QueryParser {
     String type = schema.getFieldType(field).getTypeName();
     ReversedWildcardFilterFactory factory = leadingWildcards.get(type);
     if (factory != null) {
+      Term term = new Term(field, termStr);
+      // fsa representing the query
+      Automaton automaton = WildcardQuery.toAutomaton(term);
+      // TODO: we should likely use the automaton to calculate shouldReverse, too.
       if (factory.shouldReverse(termStr)) {
-        int len = termStr.length();
-        char[] chars = new char[len+1];
-        chars[0] = factory.getMarkerChar();      
-        termStr.getChars(0, len, chars, 1);
-        ReversedWildcardFilter.reverse(chars, 1, len);
-        termStr = new String(chars);
+        automaton = BasicOperations.concatenate(automaton, BasicAutomata.makeChar(factory.getMarkerChar()));
+        SpecialOperations.reverse(automaton);
       } else { 
         // reverse wildcardfilter is active: remove false positives
-        Term term = new Term(field, termStr);
-        // fsa representing the query
-        Automaton a = WildcardQuery.toAutomaton(term);
         // fsa representing false positives (markerChar*)
         Automaton falsePositives = BasicOperations.concatenate(
             BasicAutomata.makeChar(factory.getMarkerChar()), 
             BasicAutomata.makeAnyString());
-        return new AutomatonQuery(term, BasicOperations.minus(a, falsePositives)) {
-          // override toString so its completely transparent
-          @Override
-          public String toString(String field) {
-            StringBuilder buffer = new StringBuilder();
-            if (!getField().equals(field)) {
-              buffer.append(getField());
-              buffer.append(":");
-            }
-            buffer.append(term.text());
-            buffer.append(ToStringUtils.boost(getBoost()));
-            return buffer.toString();
-          }
-        };
+        // subtract these away
+        automaton = BasicOperations.minus(automaton, falsePositives);
       }
+      return new AutomatonQuery(term, automaton) {
+        // override toString so its completely transparent
+        @Override
+        public String toString(String field) {
+          StringBuilder buffer = new StringBuilder();
+          if (!getField().equals(field)) {
+            buffer.append(getField());
+            buffer.append(":");
+          }
+          buffer.append(term.text());
+          buffer.append(ToStringUtils.boost(getBoost()));
+          return buffer.toString();
+        }
+      };
     }
     Query q = super.getWildcardQuery(field, termStr);
     if (q instanceof WildcardQuery) {
