diff --git a/lucene/src/test/org/apache/lucene/util/fst/TestFSTs.java b/lucene/src/test/org/apache/lucene/util/fst/TestFSTs.java
index 89192db..d549675 100644
--- a/lucene/src/test/org/apache/lucene/util/fst/TestFSTs.java
+++ b/lucene/src/test/org/apache/lucene/util/fst/TestFSTs.java
@@ -561,7 +561,8 @@ public class TestFSTs extends LuceneTestCase {
         System.out.println("TEST: verify random accepted terms");
       }
       final IntsRef scratch = new IntsRef(10);
-      for(int iter=0;iter<500*RANDOM_MULTIPLIER;iter++) {
+      int num = atLeast(500);
+      for(int iter=0;iter<num;iter++) {
         T output = randomAcceptedWord(fst, scratch);
         assertTrue("accepted word " + inputToString(inputMode, scratch) + " is not valid", termsMap.containsKey(scratch));
         assertEquals(termsMap.get(scratch), output);
@@ -572,7 +573,8 @@ public class TestFSTs extends LuceneTestCase {
         System.out.println("TEST: verify seek");
       }
       IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);
-      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {
+      num = atLeast(100);
+      for(int iter=0;iter<num;iter++) {
         if (VERBOSE) {
           System.out.println("TEST: iter=" + iter);
         }
@@ -645,7 +647,8 @@ public class TestFSTs extends LuceneTestCase {
       }
 
       // test mixed next/seek
-      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {
+      num = atLeast(100);
+      for(int iter=0;iter<num;iter++) {
         if (VERBOSE) {
           System.out.println("TEST: iter " + iter);
         }
@@ -960,7 +963,7 @@ public class TestFSTs extends LuceneTestCase {
 
   @Nightly
   public void testBigSet() throws IOException {
-    testRandomWords(50000, RANDOM_MULTIPLIER);
+    testRandomWords(atLeast(50000), atLeast(1));
   }
 
   private static String inputToString(int inputMode, IntsRef term) {
@@ -1049,7 +1052,8 @@ public class TestFSTs extends LuceneTestCase {
         // Now confirm BytesRefFSTEnum and TermsEnum act the
         // same:
         final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);
-        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {
+        int num = atLeast(1000);
+        for(int iter=0;iter<num;iter++) {
           final BytesRef randomTerm = new BytesRef(getRandomString());
         
           if (VERBOSE) {
