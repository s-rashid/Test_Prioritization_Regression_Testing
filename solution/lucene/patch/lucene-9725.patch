diff --git a/solr/src/java/org/apache/solr/search/function/IntFieldSource.java b/solr/src/java/org/apache/solr/search/function/IntFieldSource.java
index 8547044..d8bfca6 100644
--- a/solr/src/java/org/apache/solr/search/function/IntFieldSource.java
+++ b/solr/src/java/org/apache/solr/search/function/IntFieldSource.java
@@ -21,6 +21,11 @@ import org.apache.lucene.index.IndexReader;
 import org.apache.solr.search.MutableValueInt;
 import org.apache.solr.search.MutableValue;
 import org.apache.lucene.search.FieldCache;
+import org.apache.lucene.search.cache.FloatValuesCreator;
+import org.apache.lucene.search.cache.IntValuesCreator;
+import org.apache.lucene.search.cache.CachedArray.DoubleValues;
+import org.apache.lucene.search.cache.CachedArray.FloatValues;
+import org.apache.lucene.search.cache.CachedArray.IntValues;
 
 import java.io.IOException;
 import java.util.Map;
@@ -32,16 +37,10 @@ import java.util.Map;
  * @version $Id$
  */
 
-public class IntFieldSource extends FieldCacheSource {
-  final FieldCache.IntParser parser;
+public class IntFieldSource extends NumericFieldCacheSource<IntValues> {
 
-  public IntFieldSource(String field) {
-    this(field, null);
-  }
-
-  public IntFieldSource(String field, FieldCache.IntParser parser) {
-    super(field);
-    this.parser = parser;
+  public IntFieldSource(IntValuesCreator creator) {
+    super(creator);
   }
 
   public String description() {
@@ -50,9 +49,9 @@ public class IntFieldSource extends FieldCacheSource {
 
 
   public DocValues getValues(Map context, IndexReader reader) throws IOException {
-    final int[] arr = (parser==null) ?
-            cache.getInts(reader, field) :
-            cache.getInts(reader, field, parser);
+    final IntValues vals = cache.getInts(reader, field, creator);
+    final int[] arr = vals.values;
+    
     return new DocValues() {
       final MutableValueInt val = new MutableValueInt();
       
@@ -135,19 +134,4 @@ public class IntFieldSource extends FieldCacheSource {
       
     };
   }
-
-  public boolean equals(Object o) {
-    if (o.getClass() !=  IntFieldSource.class) return false;
-    IntFieldSource other = (IntFieldSource)o;
-    return super.equals(other)
-           && this.parser==null ? other.parser==null :
-              this.parser.getClass() == other.parser.getClass();
-  }
-
-  public int hashCode() {
-    int h = parser==null ? Integer.class.hashCode() : parser.getClass().hashCode();
-    h += super.hashCode();
-    return h;
-  };
-
 }
