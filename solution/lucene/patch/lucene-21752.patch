diff --git a/lucene/src/java/org/apache/lucene/index/FieldInfos.java b/lucene/src/java/org/apache/lucene/index/FieldInfos.java
index 33124c7..c62649a 100644
--- a/lucene/src/java/org/apache/lucene/index/FieldInfos.java
+++ b/lucene/src/java/org/apache/lucene/index/FieldInfos.java
@@ -28,6 +28,7 @@ import java.util.SortedMap;
 import java.util.TreeMap;
 import java.util.Map.Entry;
 
+import org.apache.lucene.index.SegmentCodecs; // Required for Java 1.5 javadocs
 import org.apache.lucene.index.SegmentCodecs.SegmentCodecsBuilder;
 import org.apache.lucene.index.codecs.CodecProvider;
 import org.apache.lucene.index.values.Type;
@@ -187,7 +188,7 @@ public final class FieldInfos implements Iterable<FieldInfo> {
     }
     
     // used by assert
-    boolean containsConsistent(Integer number, String name) {
+    synchronized boolean containsConsistent(Integer number, String name) {
       return name.equals(numberToName.get(number))
           && number.equals(nameToNumber.get(name));
     }
@@ -222,12 +223,13 @@ public final class FieldInfos implements Iterable<FieldInfo> {
 
   /**
    * Creates a new {@link FieldInfos} instance with a private
-   * {@link FieldNumberBiMap} and a default {@link SegmentCodecsBuilder}
+   * {@link org.apache.lucene.index.FieldInfos.FieldNumberBiMap} and a default {@link SegmentCodecsBuilder}
    * initialized with {@link CodecProvider#getDefault()}.
    * <p>
    * Note: this ctor should not be used during indexing use
    * {@link FieldInfos#FieldInfos(FieldInfos)} or
-   * {@link FieldInfos#FieldInfos(FieldNumberBiMap)} instead.
+   * {@link FieldInfos#FieldInfos(FieldNumberBiMap,org.apache.lucene.index.SegmentCodecs.SegmentCodecsBuilder)}
+   * instead.
    */
   public FieldInfos() {
     this(new FieldNumberBiMap(), SegmentCodecsBuilder.create(CodecProvider.getDefault()));
@@ -556,9 +558,10 @@ public final class FieldInfos implements Iterable<FieldInfo> {
   
   /**
    * Returns <code>true</code> iff this instance is not backed by a
-   * {@link FieldNumberBiMap}. Instances read from a directory via
+   * {@link org.apache.lucene.index.FieldInfos.FieldNumberBiMap}. Instances read from a directory via
    * {@link FieldInfos#FieldInfos(Directory, String)} will always be read-only
-   * since no {@link FieldNumberBiMap} is supplied, otherwise <code>false</code>.
+   * since no {@link org.apache.lucene.index.FieldInfos.FieldNumberBiMap} is supplied, otherwise 
+   * <code>false</code>.
    */
   public final boolean isReadOnly() {
     return globalFieldNumbers == null;
@@ -568,6 +571,7 @@ public final class FieldInfos implements Iterable<FieldInfo> {
     output.writeVInt(FORMAT_CURRENT);
     output.writeVInt(size());
     for (FieldInfo fi : this) {
+      assert !fi.omitTermFreqAndPositions || !fi.storePayloads;
       byte bits = 0x0;
       if (fi.isIndexed) bits |= IS_INDEXED;
       if (fi.storeTermVector) bits |= STORE_TERMVECTOR;
@@ -647,6 +651,14 @@ public final class FieldInfos implements Iterable<FieldInfo> {
       boolean omitNorms = (bits & OMIT_NORMS) != 0;
       boolean storePayloads = (bits & STORE_PAYLOADS) != 0;
       boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;
+
+      // LUCENE-3027: past indices were able to write
+      // storePayloads=true when omitTFAP is also true,
+      // which is invalid.  We correct that, here:
+      if (omitTermFreqAndPositions) {
+        storePayloads = false;
+      }
+
       Type docValuesType = null;
       if (format <= FORMAT_INDEX_VALUES) {
         final byte b = input.readByte();
