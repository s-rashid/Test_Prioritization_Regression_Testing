diff --git a/lucene/src/java/org/apache/lucene/index/IndexWriterConfig.java b/lucene/src/java/org/apache/lucene/index/IndexWriterConfig.java
index 513559e..ef7b27c 100644
--- a/lucene/src/java/org/apache/lucene/index/IndexWriterConfig.java
+++ b/lucene/src/java/org/apache/lucene/index/IndexWriterConfig.java
@@ -348,12 +348,12 @@ public final class IndexWriterConfig implements Cloneable {
 
   /**
    * Determines the minimal number of delete terms required before the buffered
-   * in-memory delete terms are applied and flushed. If there are documents
-   * buffered in memory at the time, they are merged and a new segment is
-   * created.
-
-   * <p>Disabled by default (writer flushes by RAM usage).
-   *
+   * in-memory delete terms and queries are applied and flushed.
+   * <p>Disabled by default (writer flushes by RAM usage).</p>
+   * <p>
+   * NOTE:  This setting won't trigger a segment flush.
+   * </p>
+   * 
    * @throws IllegalArgumentException if maxBufferedDeleteTerms
    * is enabled but smaller than 1
    * @see #setRAMBufferSizeMB
@@ -372,8 +372,8 @@ public final class IndexWriterConfig implements Cloneable {
   }
 
   /**
-   * Returns the number of buffered deleted terms that will trigger a flush if
-   * enabled.
+   * Returns the number of buffered deleted terms that will trigger a flush of all
+   * buffered deletes if enabled.
    *
    * @see #setMaxBufferedDeleteTerms(int)
    */
@@ -406,8 +406,10 @@ public final class IndexWriterConfig implements Cloneable {
    * way to measure the RAM usage of individual Queries so the accounting will
    * under-estimate and you should compensate by either calling commit()
    * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}
-   * to flush by count instead of RAM usage (each buffered delete Query counts
-   * as one).
+   * to flush and apply buffered deletes by count instead of RAM usage
+   * (for each buffered delete Query a constant number of bytes is used to estimate
+   * RAM usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will
+   * not trigger any segment flushes.
    * <p>
    * <b>NOTE</b>: It's not guaranteed that all memory resident documents are flushed 
    * once this limit is exceeded. Depending on the configured {@link FlushPolicy} only a
@@ -417,6 +419,7 @@ public final class IndexWriterConfig implements Cloneable {
    * 
    * The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.
    * @see #setFlushPolicy(FlushPolicy)
+   * @see #setRAMPerThreadHardLimitMB(int)
    *
    * <p>Takes effect immediately, but only the next time a
    * document is added, updated or deleted.
@@ -537,24 +540,43 @@ public final class IndexWriterConfig implements Cloneable {
     return mergePolicy;
   }
 
-  /**
-   * Sets the max number of simultaneous threads that may be indexing documents
-   * at once in IndexWriter. Values &lt; 1 are invalid and if passed
-   * <code>maxThreadStates</code> will be set to
-   * {@link #DEFAULT_MAX_THREAD_STATES}.
-   *
-   * <p>Only takes effect when IndexWriter is first created. */
+  /** Expert: Sets the {@link DocumentsWriterPerThreadPool} instance used by the
+   * IndexWriter to assign thread-states to incoming indexing threads. If no
+   * {@link DocumentsWriterPerThreadPool} is set {@link IndexWriter} will use
+   * {@link ThreadAffinityDocumentsWriterThreadPool} with max number of
+   * thread-states set to {@value #DEFAULT_MAX_THREAD_STATES} (see
+   * {@link #DEFAULT_MAX_THREAD_STATES}).
+   * </p>
+   * <p>
+   * NOTE: The given {@link DocumentsWriterPerThreadPool} instance must not be used with
+   * other {@link IndexWriter} instances once it has been initialized / associated with an
+   * {@link IndexWriter}.
+   * </p>
+   * <p>
+   * NOTE: This only takes effect when IndexWriter is first created.</p>*/
   public IndexWriterConfig setIndexerThreadPool(DocumentsWriterPerThreadPool threadPool) {
+    if(threadPool == null) {
+      throw new IllegalArgumentException("DocumentsWriterPerThreadPool must not be nul");
+    }
     this.indexerThreadPool = threadPool;
     return this;
   }
 
+  /** Returns the configured {@link DocumentsWriterPerThreadPool} instance.
+   * @see #setIndexerThreadPool(DocumentsWriterPerThreadPool)
+   * @return the configured {@link DocumentsWriterPerThreadPool} instance.*/
   public DocumentsWriterPerThreadPool getIndexerThreadPool() {
     return this.indexerThreadPool;
   }
 
-  /** Returns the max number of simultaneous threads that
-   *  may be indexing documents at once in IndexWriter. */
+  /** Returns the max number of simultaneous threads that may be indexing
+   * documents at once in IndexWriter.
+   * <p>
+   * To modify the max number of thread-states a new
+   * {@link DocumentsWriterPerThreadPool} must be set via
+   * {@link #setIndexerThreadPool(DocumentsWriterPerThreadPool)}.
+   * </p>
+   * @see #setIndexerThreadPool(DocumentsWriterPerThreadPool) */
   public int getMaxThreadStates() {
     return indexerThreadPool.getMaxThreadStates();
   }
