diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/core/StopFilter.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/core/StopFilter.java
index 9d81e75..0aba57f 100644
--- a/modules/analysis/common/src/java/org/apache/lucene/analysis/core/StopFilter.java
+++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/core/StopFilter.java
@@ -19,15 +19,15 @@ package org.apache.lucene.analysis.core;
 
 import java.io.IOException;
 import java.util.Arrays;
-import java.util.Set;
 import java.util.List;
+import java.util.Set;
 
 import org.apache.lucene.analysis.TokenFilter;
 import org.apache.lucene.analysis.TokenStream;
-import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
+import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
 import org.apache.lucene.analysis.util.CharArraySet;
-import org.apache.lucene.queryParser.QueryParser; // for javadoc
+import org.apache.lucene.queryParser.QueryParser;
 import org.apache.lucene.util.Version;
 
 /**
@@ -45,34 +45,12 @@ import org.apache.lucene.util.Version;
 public final class StopFilter extends TokenFilter {
 
   private final CharArraySet stopWords;
-  private boolean enablePositionIncrements = false;
+  private boolean enablePositionIncrements = true;
 
   private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);
   private final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);
 
-  /**
-   * Construct a token stream filtering the given input.
-   * If <code>stopWords</code> is an instance of {@link CharArraySet} (true if
-   * <code>makeStopSet()</code> was used to construct the set) it will be directly used
-   * and <code>ignoreCase</code> will be ignored since <code>CharArraySet</code>
-   * directly controls case sensitivity.
-   * <p/>
-   * If <code>stopWords</code> is not an instance of {@link CharArraySet},
-   * a new CharArraySet will be constructed and <code>ignoreCase</code> will be
-   * used to specify the case sensitivity of that set.
-   *
-   * @param enablePositionIncrements true if token positions should record the removed stop words
-   * @param input Input TokenStream
-   * @param stopWords A Set of Strings or char[] or any other toString()-able set representing the stopwords
-   * @param ignoreCase if true, all words are lower cased first
-   * @deprecated use {@link #StopFilter(Version, TokenStream, Set, boolean)} instead
-   */
-  @Deprecated
-  public StopFilter(boolean enablePositionIncrements, TokenStream input, Set<?> stopWords, boolean ignoreCase)
-  {
-    this(Version.LUCENE_30, enablePositionIncrements, input, stopWords, ignoreCase);
-  }
-  
+
   /**
    * Construct a token stream filtering the given input. If
    * <code>stopWords</code> is an instance of {@link CharArraySet} (true if
@@ -97,31 +75,8 @@ public final class StopFilter extends TokenFilter {
    */
   public StopFilter(Version matchVersion, TokenStream input, Set<?> stopWords, boolean ignoreCase)
   {
-   this(matchVersion, matchVersion.onOrAfter(Version.LUCENE_29), input, stopWords, ignoreCase);
-  }
-  
-  /*
-   * convenience ctor to enable deprecated ctors to set posInc explicitly
-   */
-  private StopFilter(Version matchVersion, boolean enablePositionIncrements, TokenStream input, Set<?> stopWords, boolean ignoreCase){
     super(input);
-    this.stopWords = stopWords instanceof CharArraySet ? (CharArraySet)stopWords : new CharArraySet(matchVersion, stopWords, ignoreCase);  
-    this.enablePositionIncrements = enablePositionIncrements;
-  }
-
-  /**
-   * Constructs a filter which removes words from the input
-   * TokenStream that are named in the Set.
-   *
-   * @param enablePositionIncrements true if token positions should record the removed stop words
-   * @param in Input stream
-   * @param stopWords A Set of Strings or char[] or any other toString()-able set representing the stopwords
-   * @see #makeStopSet(Version, java.lang.String[])
-   * @deprecated use {@link #StopFilter(Version, TokenStream, Set)} instead
-   */
-  @Deprecated
-  public StopFilter(boolean enablePositionIncrements, TokenStream in, Set<?> stopWords) {
-    this(Version.LUCENE_CURRENT, enablePositionIncrements, in, stopWords, false);
+    this.stopWords = stopWords instanceof CharArraySet ? (CharArraySet) stopWords : new CharArraySet(matchVersion, stopWords, ignoreCase);
   }
   
   /**
@@ -136,7 +91,7 @@ public final class StopFilter extends TokenFilter {
    * @param stopWords
    *          A Set of Strings or char[] or any other toString()-able set
    *          representing the stopwords
-   * @see #makeStopSet(Version, java.lang.String[])
+   * @see #makeStopSet(Version, java.lang.String...)
    */
   public StopFilter(Version matchVersion, TokenStream in, Set<?> stopWords) {
     this(matchVersion, in, stopWords, false);
@@ -148,25 +103,11 @@ public final class StopFilter extends TokenFilter {
    * This permits this stopWords construction to be cached once when
    * an Analyzer is constructed.
    * 
-   * @see #makeStopSet(Version, java.lang.String[], boolean) passing false to ignoreCase
-   * @deprecated use {@link #makeStopSet(Version, String...)} instead
-   */
-  @Deprecated
-  public static final Set<Object> makeStopSet(String... stopWords) {
-    return makeStopSet(Version.LUCENE_30, stopWords, false);
-  }
-
-  /**
-   * Builds a Set from an array of stop words,
-   * appropriate for passing into the StopFilter constructor.
-   * This permits this stopWords construction to be cached once when
-   * an Analyzer is constructed.
-   * 
    * @param matchVersion Lucene version to enable correct Unicode 4.0 behavior in the returned set if Version > 3.0
    * @param stopWords An array of stopwords
    * @see #makeStopSet(Version, java.lang.String[], boolean) passing false to ignoreCase
    */
-  public static final Set<Object> makeStopSet(Version matchVersion, String... stopWords) {
+  public static Set<Object> makeStopSet(Version matchVersion, String... stopWords) {
     return makeStopSet(matchVersion, stopWords, false);
   }
   
@@ -175,51 +116,25 @@ public final class StopFilter extends TokenFilter {
    * appropriate for passing into the StopFilter constructor.
    * This permits this stopWords construction to be cached once when
    * an Analyzer is constructed.
-   * @param stopWords A List of Strings or char[] or any other toString()-able list representing the stopwords
-   * @return A Set ({@link CharArraySet}) containing the words
-   * @see #makeStopSet(Version, java.lang.String[], boolean) passing false to ignoreCase
-   * @deprecated use {@link #makeStopSet(Version, List)} instead
-   */
-  @Deprecated
-  public static final Set<Object> makeStopSet(List<?> stopWords) {
-    return makeStopSet(Version.LUCENE_30, stopWords, false);
-  }
-
-  /**
-   * Builds a Set from an array of stop words,
-   * appropriate for passing into the StopFilter constructor.
-   * This permits this stopWords construction to be cached once when
-   * an Analyzer is constructed.
    * 
    * @param matchVersion Lucene version to enable correct Unicode 4.0 behavior in the returned set if Version > 3.0
    * @param stopWords A List of Strings or char[] or any other toString()-able list representing the stopwords
    * @return A Set ({@link CharArraySet}) containing the words
    * @see #makeStopSet(Version, java.lang.String[], boolean) passing false to ignoreCase
    */
-  public static final Set<Object> makeStopSet(Version matchVersion, List<?> stopWords) {
+  public static Set<Object> makeStopSet(Version matchVersion, List<?> stopWords) {
     return makeStopSet(matchVersion, stopWords, false);
   }
     
   /**
    * Creates a stopword set from the given stopword array.
-   * @param stopWords An array of stopwords
-   * @param ignoreCase If true, all words are lower cased first.  
-   * @return a Set containing the words
-   * @deprecated use {@link #makeStopSet(Version, String[], boolean)} instead;
-   */  
-  @Deprecated
-  public static final Set<Object> makeStopSet(String[] stopWords, boolean ignoreCase) {
-    return makeStopSet(Version.LUCENE_30, stopWords, ignoreCase);
-  }
-  /**
-   * Creates a stopword set from the given stopword array.
    * 
    * @param matchVersion Lucene version to enable correct Unicode 4.0 behavior in the returned set if Version > 3.0
    * @param stopWords An array of stopwords
    * @param ignoreCase If true, all words are lower cased first.  
    * @return a Set containing the words
    */    
-  public static final Set<Object> makeStopSet(Version matchVersion, String[] stopWords, boolean ignoreCase) {
+  public static Set<Object> makeStopSet(Version matchVersion, String[] stopWords, boolean ignoreCase) {
     CharArraySet stopSet = new CharArraySet(matchVersion, stopWords.length, ignoreCase);
     stopSet.addAll(Arrays.asList(stopWords));
     return stopSet;
@@ -227,24 +142,12 @@ public final class StopFilter extends TokenFilter {
   
   /**
    * Creates a stopword set from the given stopword list.
-   * @param stopWords A List of Strings or char[] or any other toString()-able list representing the stopwords
-   * @param ignoreCase if true, all words are lower cased first
-   * @return A Set ({@link CharArraySet}) containing the words
-   * @deprecated use {@link #makeStopSet(Version, List, boolean)} instead
-   */
-  @Deprecated
-  public static final Set<Object> makeStopSet(List<?> stopWords, boolean ignoreCase){
-    return makeStopSet(Version.LUCENE_30, stopWords, ignoreCase);
-  }
-
-  /**
-   * Creates a stopword set from the given stopword list.
    * @param matchVersion Lucene version to enable correct Unicode 4.0 behavior in the returned set if Version > 3.0
    * @param stopWords A List of Strings or char[] or any other toString()-able list representing the stopwords
    * @param ignoreCase if true, all words are lower cased first
    * @return A Set ({@link CharArraySet}) containing the words
    */
-  public static final Set<Object> makeStopSet(Version matchVersion, List<?> stopWords, boolean ignoreCase){
+  public static Set<Object> makeStopSet(Version matchVersion, List<?> stopWords, boolean ignoreCase){
     CharArraySet stopSet = new CharArraySet(matchVersion, stopWords.size(), ignoreCase);
     stopSet.addAll(stopWords);
     return stopSet;
@@ -271,19 +174,6 @@ public final class StopFilter extends TokenFilter {
   }
 
   /**
-   * Returns version-dependent default for
-   * enablePositionIncrements.  Analyzers that embed
-   * StopFilter use this method when creating the
-   * StopFilter.  Prior to 2.9, this returns false.  On 2.9
-   * or later, it returns true.
-   * @deprecated use {@link #StopFilter(Version, TokenStream, Set)} instead
-   */
-  @Deprecated
-  public static boolean getEnablePositionIncrementsVersionDefault(Version matchVersion) {
-    return matchVersion.onOrAfter(Version.LUCENE_29);
-  }
-
-  /**
    * @see #setEnablePositionIncrements(boolean)
    */
   public boolean getEnablePositionIncrements() {
@@ -297,6 +187,8 @@ public final class StopFilter extends TokenFilter {
    * Generally, <code>true</code> is best as it does not
    * lose information (positions of the original tokens)
    * during indexing.
+   *
+   * Default is true.
    * 
    * <p> When set, when a token is stopped
    * (omitted), the position increment of the following
