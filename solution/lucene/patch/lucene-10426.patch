diff --git a/lucene/src/test/org/apache/lucene/analysis/MockAnalyzer.java b/lucene/src/test/org/apache/lucene/analysis/MockAnalyzer.java
index 0c8f030..18cdad0 100644
--- a/lucene/src/test/org/apache/lucene/analysis/MockAnalyzer.java
+++ b/lucene/src/test/org/apache/lucene/analysis/MockAnalyzer.java
@@ -20,6 +20,10 @@ package org.apache.lucene.analysis;
 import java.io.IOException;
 import java.io.Reader;
 
+import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
+import org.apache.lucene.analysis.tokenattributes.PayloadAttribute;
+import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
+import org.apache.lucene.index.Payload;
 import org.apache.lucene.util.automaton.CharacterRunAutomaton;
 
 /**
@@ -30,8 +34,13 @@ public final class MockAnalyzer extends Analyzer {
   private final boolean lowerCase;
   private final CharacterRunAutomaton filter;
   private final boolean enablePositionIncrements;
+  private final boolean payload;
   private int positionIncrementGap;
 
+  public MockAnalyzer(CharacterRunAutomaton runAutomaton, boolean lowerCase, CharacterRunAutomaton filter, boolean enablePositionIncrements) {
+    this(runAutomaton, lowerCase, filter, enablePositionIncrements, false);    
+  }
+
   /**
    * Creates a new MockAnalyzer.
    * 
@@ -39,12 +48,14 @@ public final class MockAnalyzer extends Analyzer {
    * @param lowerCase true if the tokenizer should lowercase terms
    * @param filter DFA describing how terms should be filtered (set of stopwords, etc)
    * @param enablePositionIncrements true if position increments should reflect filtered terms.
+   * @param payload if payloads should be added
    */
-  public MockAnalyzer(CharacterRunAutomaton runAutomaton, boolean lowerCase, CharacterRunAutomaton filter, boolean enablePositionIncrements) {
+  public MockAnalyzer(CharacterRunAutomaton runAutomaton, boolean lowerCase, CharacterRunAutomaton filter, boolean enablePositionIncrements, boolean payload) {
     this.runAutomaton = runAutomaton;
     this.lowerCase = lowerCase;
     this.filter = filter;
     this.enablePositionIncrements = enablePositionIncrements;
+    this.payload = payload;
   }
 
   /**
@@ -54,7 +65,11 @@ public final class MockAnalyzer extends Analyzer {
    * @param lowerCase true if the tokenizer should lowercase terms
    */
   public MockAnalyzer(CharacterRunAutomaton runAutomaton, boolean lowerCase) {
-    this(runAutomaton, lowerCase, MockTokenFilter.EMPTY_STOPSET, false);
+    this(runAutomaton, lowerCase, MockTokenFilter.EMPTY_STOPSET, false, false);
+  }
+
+  public MockAnalyzer(CharacterRunAutomaton runAutomaton, boolean lowerCase, boolean payload) {
+    this(runAutomaton, lowerCase, MockTokenFilter.EMPTY_STOPSET, false, payload);
   }
   
   /** 
@@ -67,12 +82,16 @@ public final class MockAnalyzer extends Analyzer {
   @Override
   public TokenStream tokenStream(String fieldName, Reader reader) {
     MockTokenizer tokenizer = new MockTokenizer(reader, runAutomaton, lowerCase);
-    return new MockTokenFilter(tokenizer, filter, enablePositionIncrements);
+    TokenFilter filt = new MockTokenFilter(tokenizer, filter, enablePositionIncrements);
+    if (payload){
+      filt = new SimplePayloadFilter(filt, fieldName);
+    }
+    return filt;
   }
 
   private class SavedStreams {
     MockTokenizer tokenizer;
-    MockTokenFilter filter;
+    TokenFilter filter;
   }
 
   @Override
@@ -83,10 +102,14 @@ public final class MockAnalyzer extends Analyzer {
       saved = new SavedStreams();
       saved.tokenizer = new MockTokenizer(reader, runAutomaton, lowerCase);
       saved.filter = new MockTokenFilter(saved.tokenizer, filter, enablePositionIncrements);
+      if (payload){
+        saved.filter = new SimplePayloadFilter(saved.filter, fieldName);
+      }
       setPreviousTokenStream(saved);
       return saved.filter;
     } else {
       saved.tokenizer.reset(reader);
+      saved.filter.reset();
       return saved.filter;
     }
   }
@@ -99,4 +122,30 @@ public final class MockAnalyzer extends Analyzer {
   public int getPositionIncrementGap(String fieldName){
     return positionIncrementGap;
   }
+}
+
+final class SimplePayloadFilter extends TokenFilter {
+  String fieldName;
+  int pos;
+  final PayloadAttribute payloadAttr;
+  final CharTermAttribute termAttr;
+
+  public SimplePayloadFilter(TokenStream input, String fieldName) {
+    super(input);
+    this.fieldName = fieldName;
+    pos = 0;
+    payloadAttr = input.addAttribute(PayloadAttribute.class);
+    termAttr = input.addAttribute(CharTermAttribute.class);
+  }
+
+  @Override
+  public boolean incrementToken() throws IOException {
+    if (input.incrementToken()) {
+      payloadAttr.setPayload(new Payload(("pos: " + pos).getBytes()));
+      pos++;
+      return true;
+    } else {
+      return false;
+    }
+  }
 }
\ No newline at end of file
