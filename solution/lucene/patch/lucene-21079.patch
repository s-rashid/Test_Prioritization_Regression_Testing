diff --git a/lucene/src/java/org/apache/lucene/index/StoredFieldsWriter.java b/lucene/src/java/org/apache/lucene/index/StoredFieldsWriter.java
index 5b92193..35f1b86 100644
--- a/lucene/src/java/org/apache/lucene/index/StoredFieldsWriter.java
+++ b/lucene/src/java/org/apache/lucene/index/StoredFieldsWriter.java
@@ -30,10 +30,9 @@ final class StoredFieldsWriter {
   final DocumentsWriterPerThread docWriter;
   final FieldInfos fieldInfos;
   int lastDocID;
-  private String segment;
 
   int freeCount;
-  
+
   final DocumentsWriterPerThread.DocState docState;
 
   public StoredFieldsWriter(DocumentsWriterPerThread docWriter, FieldInfos fieldInfos) {
@@ -41,7 +40,7 @@ final class StoredFieldsWriter {
     this.fieldInfos = fieldInfos;
     this.docState = docWriter.docState;
   }
-  
+
   private int numStoredFields;
   private Fieldable[] storedFields;
   private int[] fieldNumbers;
@@ -55,7 +54,7 @@ final class StoredFieldsWriter {
   public void startDocument() {
     reset();
   }
-  
+
   public void flush(SegmentWriteState state) throws IOException {
 
     if (state.numDocs > 0) {
@@ -63,38 +62,29 @@ final class StoredFieldsWriter {
       // hit non-aborting exceptions, in which case we will
       // not have yet init'd the FieldsWriter:
       initFieldsWriter();
-
-      // Fill fdx file to include any final docs that we
-      // skipped because they hit non-aborting exceptions
       fill(state.numDocs);
     }
 
     if (fieldsWriter != null) {
-      fieldsWriter.flush();
       fieldsWriter.close();
       fieldsWriter = null;
       lastDocID = 0;
+
       String fieldsName = IndexFileNames.segmentFileName(state.segmentName, "", IndexFileNames.FIELDS_EXTENSION);
       String fieldsIdxName = IndexFileNames.segmentFileName(state.segmentName, "", IndexFileNames.FIELDS_INDEX_EXTENSION);
       state.flushedFiles.add(fieldsName);
       state.flushedFiles.add(fieldsIdxName);
 
-      if (4+((long) state.numDocs)*8 != state.directory.fileLength(fieldsIdxName)) {
+      if (4 + ((long) state.numDocs) * 8 != state.directory.fileLength(fieldsIdxName)) {
         throw new RuntimeException("after flush: fdx size mismatch: " + state.numDocs + " docs vs " + state.directory.fileLength(fieldsIdxName) + " length in bytes of " + fieldsIdxName + " file exists?=" + state.directory.fileExists(fieldsIdxName));
       }
     }
-
   }
 
-  private void initFieldsWriter() throws IOException {
+  private synchronized void initFieldsWriter() throws IOException {
     if (fieldsWriter == null) {
-      segment = docWriter.getSegment();
-      if (segment != null) {
-        fieldsWriter = new FieldsWriter(docWriter.directory,
-                                        segment,
-                                        fieldInfos);
-        lastDocID = 0;
-      }
+      fieldsWriter = new FieldsWriter(docWriter.directory, docWriter.getSegment(), fieldInfos);
+      lastDocID = 0;
     }
   }
 
@@ -104,10 +94,7 @@ final class StoredFieldsWriter {
     reset();
 
     if (fieldsWriter != null) {
-      try {
-        fieldsWriter.close();
-      } catch (Throwable t) {
-      }
+      fieldsWriter.abort();
       fieldsWriter = null;
       lastDocID = 0;
     }
@@ -117,8 +104,7 @@ final class StoredFieldsWriter {
   void fill(int docID) throws IOException {
     // We must "catch up" for all docs before us
     // that had no stored fields:
-    final int end = docID;
-    while(lastDocID < end) {
+    while(lastDocID < docID) {
       fieldsWriter.skipDocument();
       lastDocID++;
     }
@@ -129,36 +115,35 @@ final class StoredFieldsWriter {
 
     initFieldsWriter();
     fill(docState.docID);
-  
-    if (fieldsWriter != null && numStoredFields > 0) {  
+
+    if (fieldsWriter != null && numStoredFields > 0) {
       fieldsWriter.startDocument(numStoredFields);
       for (int i = 0; i < numStoredFields; i++) {
         fieldsWriter.writeField(fieldNumbers[i], storedFields[i]);
       }
       lastDocID++;
     }
-    
+
     reset();
     assert docWriter.writer.testPoint("StoredFieldsWriter.finishDocument end");
   }
 
-  
   public void addField(Fieldable field, FieldInfo fieldInfo) throws IOException {
     if (numStoredFields == storedFields.length) {
-      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJ_REF);
+      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);
       Fieldable[] newArray = new Fieldable[newSize];
       System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);
       storedFields = newArray;
     }
-    
+
     if (numStoredFields == fieldNumbers.length) {
       fieldNumbers = ArrayUtil.grow(fieldNumbers);
     }
-    
+
     storedFields[numStoredFields] = field;
     fieldNumbers[numStoredFields] = fieldInfo.number;
     numStoredFields++;
-    
+
     assert docState.testPoint("StoredFieldsWriterPerThread.processFields.writeField");
   }
 }
