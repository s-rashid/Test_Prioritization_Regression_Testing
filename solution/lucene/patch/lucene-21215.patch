diff --git a/lucene/src/test/org/apache/lucene/index/TestIndexReaderClone.java b/lucene/src/test/org/apache/lucene/index/TestIndexReaderClone.java
index 0ff9c73..b58e122 100644
--- a/lucene/src/test/org/apache/lucene/index/TestIndexReaderClone.java
+++ b/lucene/src/test/org/apache/lucene/index/TestIndexReaderClone.java
@@ -24,8 +24,8 @@ import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.LockObtainFailedException;
-import org.apache.lucene.store.MockRAMDirectory;
 import org.apache.lucene.util.LuceneTestCase;
+import org.apache.lucene.util.Bits;
 
 /**
  * Tests cloning multiple types of readers, modifying the deletedDocs and norms
@@ -35,9 +35,9 @@ import org.apache.lucene.util.LuceneTestCase;
 public class TestIndexReaderClone extends LuceneTestCase {
 
   public void testCloneReadOnlySegmentReader() throws Exception {
-    final Directory dir1 = new MockRAMDirectory();
+    final Directory dir1 = newDirectory();
 
-    TestIndexReaderReopen.createIndex(dir1, false);
+    TestIndexReaderReopen.createIndex(random, dir1, false);
     IndexReader reader = IndexReader.open(dir1, false);
     IndexReader readOnlyReader = reader.clone(true);
     if (!isReadOnly(readOnlyReader)) {
@@ -54,9 +54,9 @@ public class TestIndexReaderClone extends LuceneTestCase {
   // open non-readOnly reader1, clone to non-readOnly
   // reader2, make sure we can change reader2
   public void testCloneNoChangesStillReadOnly() throws Exception {
-    final Directory dir1 = new MockRAMDirectory();
+    final Directory dir1 = newDirectory();
 
-    TestIndexReaderReopen.createIndex(dir1, true);
+    TestIndexReaderReopen.createIndex(random, dir1, true);
     IndexReader r1 = IndexReader.open(dir1, false);
     IndexReader r2 = r1.clone(false);
     if (!deleteWorked(1, r2)) {
@@ -66,13 +66,13 @@ public class TestIndexReaderClone extends LuceneTestCase {
     r2.close();
     dir1.close();
   }
-  
+
   // open non-readOnly reader1, clone to non-readOnly
   // reader2, make sure we can change reader1
   public void testCloneWriteToOrig() throws Exception {
-    final Directory dir1 = new MockRAMDirectory();
+    final Directory dir1 = newDirectory();
 
-    TestIndexReaderReopen.createIndex(dir1, true);
+    TestIndexReaderReopen.createIndex(random, dir1, true);
     IndexReader r1 = IndexReader.open(dir1, false);
     IndexReader r2 = r1.clone(false);
     if (!deleteWorked(1, r1)) {
@@ -82,13 +82,13 @@ public class TestIndexReaderClone extends LuceneTestCase {
     r2.close();
     dir1.close();
   }
-  
+
   // open non-readOnly reader1, clone to non-readOnly
   // reader2, make sure we can change reader2
   public void testCloneWriteToClone() throws Exception {
-    final Directory dir1 = new MockRAMDirectory();
+    final Directory dir1 = newDirectory();
 
-    TestIndexReaderReopen.createIndex(dir1, true);
+    TestIndexReaderReopen.createIndex(random, dir1, true);
     IndexReader r1 = IndexReader.open(dir1, false);
     IndexReader r2 = r1.clone(false);
     if (!deleteWorked(1, r2)) {
@@ -104,18 +104,18 @@ public class TestIndexReaderClone extends LuceneTestCase {
 
     dir1.close();
   }
-  
+
   // create single-segment index, open non-readOnly
   // SegmentReader, add docs, reopen to multireader, then do
   // delete
   public void testReopenSegmentReaderToMultiReader() throws Exception {
-    final Directory dir1 = new MockRAMDirectory();
+    final Directory dir1 = newDirectory();
 
-    TestIndexReaderReopen.createIndex(dir1, false);
+    TestIndexReaderReopen.createIndex(random, dir1, false);
     IndexReader reader1 = IndexReader.open(dir1, false);
 
     TestIndexReaderReopen.modifyIndex(5, dir1);
-    
+
     IndexReader reader2 = reader1.reopen();
     assertTrue(reader1 != reader2);
 
@@ -127,9 +127,9 @@ public class TestIndexReaderClone extends LuceneTestCase {
 
   // open non-readOnly reader1, clone to readOnly reader2
   public void testCloneWriteableToReadOnly() throws Exception {
-    final Directory dir1 = new MockRAMDirectory();
+    final Directory dir1 = newDirectory();
 
-    TestIndexReaderReopen.createIndex(dir1, true);
+    TestIndexReaderReopen.createIndex(random, dir1, true);
     IndexReader reader = IndexReader.open(dir1, false);
     IndexReader readOnlyReader = reader.clone(true);
     if (!isReadOnly(readOnlyReader)) {
@@ -149,9 +149,9 @@ public class TestIndexReaderClone extends LuceneTestCase {
 
   // open non-readOnly reader1, reopen to readOnly reader2
   public void testReopenWriteableToReadOnly() throws Exception {
-    final Directory dir1 = new MockRAMDirectory();
+    final Directory dir1 = newDirectory();
 
-    TestIndexReaderReopen.createIndex(dir1, true);
+    TestIndexReaderReopen.createIndex(random, dir1, true);
     IndexReader reader = IndexReader.open(dir1, false);
     final int docCount = reader.numDocs();
     assertTrue(deleteWorked(1, reader));
@@ -170,9 +170,9 @@ public class TestIndexReaderClone extends LuceneTestCase {
 
   // open readOnly reader1, clone to non-readOnly reader2
   public void testCloneReadOnlyToWriteable() throws Exception {
-    final Directory dir1 = new MockRAMDirectory();
+    final Directory dir1 = newDirectory();
 
-    TestIndexReaderReopen.createIndex(dir1, true);
+    TestIndexReaderReopen.createIndex(random, dir1, true);
     IndexReader reader1 = IndexReader.open(dir1, true);
 
     IndexReader reader2 = reader1.clone(false);
@@ -193,11 +193,11 @@ public class TestIndexReaderClone extends LuceneTestCase {
   // open non-readOnly reader1 on multi-segment index, then
   // optimize the index, then clone to readOnly reader2
   public void testReadOnlyCloneAfterOptimize() throws Exception {
-    final Directory dir1 = new MockRAMDirectory();
+    final Directory dir1 = newDirectory();
 
-    TestIndexReaderReopen.createIndex(dir1, true);
+    TestIndexReaderReopen.createIndex(random, dir1, true);
     IndexReader reader1 = IndexReader.open(dir1, false);
-    IndexWriter w = new IndexWriter(dir1, new IndexWriterConfig(
+    IndexWriter w = new IndexWriter(dir1, newIndexWriterConfig(
         TEST_VERSION_CURRENT, new MockAnalyzer()));
     w.optimize();
     w.close();
@@ -207,7 +207,7 @@ public class TestIndexReaderClone extends LuceneTestCase {
     reader2.close();
     dir1.close();
   }
-  
+
   private static boolean deleteWorked(int doc, IndexReader r) {
     boolean exception = false;
     try {
@@ -218,11 +218,11 @@ public class TestIndexReaderClone extends LuceneTestCase {
     }
     return !exception;
   }
-  
+
   public void testCloneReadOnlyDirectoryReader() throws Exception {
-    final Directory dir1 = new MockRAMDirectory();
+    final Directory dir1 = newDirectory();
 
-    TestIndexReaderReopen.createIndex(dir1, true);
+    TestIndexReaderReopen.createIndex(random, dir1, true);
     IndexReader reader = IndexReader.open(dir1, false);
     IndexReader readOnlyReader = reader.clone(true);
     if (!isReadOnly(readOnlyReader)) {
@@ -234,17 +234,20 @@ public class TestIndexReaderClone extends LuceneTestCase {
   }
 
   public static boolean isReadOnly(IndexReader r) {
-    if (r instanceof ReadOnlySegmentReader
-        || r instanceof ReadOnlyDirectoryReader)
-      return true;
-    return false;
+    if (r instanceof SegmentReader) {
+      return ((SegmentReader) r).readOnly;
+    } else if (r instanceof DirectoryReader) {
+      return ((DirectoryReader) r).readOnly;
+    } else {
+      return false;
+    }
   }
 
   public void testParallelReader() throws Exception {
-    final Directory dir1 = new MockRAMDirectory();
-    TestIndexReaderReopen.createIndex(dir1, true);
-    final Directory dir2 = new MockRAMDirectory();
-    TestIndexReaderReopen.createIndex(dir2, true);
+    final Directory dir1 = newDirectory();
+    TestIndexReaderReopen.createIndex(random, dir1, true);
+    final Directory dir2 = newDirectory();
+    TestIndexReaderReopen.createIndex(random, dir2, true);
     IndexReader r1 = IndexReader.open(dir1, false);
     IndexReader r2 = IndexReader.open(dir2, false);
 
@@ -264,7 +267,7 @@ public class TestIndexReaderClone extends LuceneTestCase {
    * are not the same on each reader 5. Verify the doc deleted is only in the
    * cloned reader 6. Try to delete a document in the original reader, an
    * exception should be thrown
-   * 
+   *
    * @param r1 IndexReader to perform tests on
    * @throws Exception
    */
@@ -277,8 +280,9 @@ public class TestIndexReaderClone extends LuceneTestCase {
     assertTrue(Similarity.getDefault().decodeNormValue(r1.norms("field1")[4]) == norm1);
     assertTrue(Similarity.getDefault().decodeNormValue(pr1Clone.norms("field1")[4]) != norm1);
 
-    assertTrue(!r1.isDeleted(10));
-    assertTrue(pr1Clone.isDeleted(10));
+    final Bits delDocs = MultiFields.getDeletedDocs(r1);
+    assertTrue(delDocs == null || !delDocs.get(10));
+    assertTrue(MultiFields.getDeletedDocs(pr1Clone).get(10));
 
     // try to update the original reader, which should throw an exception
     try {
@@ -291,14 +295,14 @@ public class TestIndexReaderClone extends LuceneTestCase {
   }
 
   public void testMixedReaders() throws Exception {
-    final Directory dir1 = new MockRAMDirectory();
-    TestIndexReaderReopen.createIndex(dir1, true);
-    final Directory dir2 = new MockRAMDirectory();
-    TestIndexReaderReopen.createIndex(dir2, true);
+    final Directory dir1 = newDirectory();
+    TestIndexReaderReopen.createIndex(random, dir1, true);
+    final Directory dir2 = newDirectory();
+    TestIndexReaderReopen.createIndex(random, dir2, true);
     IndexReader r1 = IndexReader.open(dir1, false);
     IndexReader r2 = IndexReader.open(dir2, false);
 
-    MultiReader multiReader = new MultiReader(new IndexReader[] { r1, r2 });
+    MultiReader multiReader = new MultiReader(r1, r2);
     performDefaultTests(multiReader);
     multiReader.close();
     dir1.close();
@@ -306,9 +310,9 @@ public class TestIndexReaderClone extends LuceneTestCase {
   }
 
   public void testSegmentReaderUndeleteall() throws Exception {
-    final Directory dir1 = new MockRAMDirectory();
-    TestIndexReaderReopen.createIndex(dir1, false);
-    SegmentReader origSegmentReader = SegmentReader.getOnlySegmentReader(dir1);
+    final Directory dir1 = newDirectory();
+    TestIndexReaderReopen.createIndex(random, dir1, false);
+    SegmentReader origSegmentReader = getOnlySegmentReader(IndexReader.open(dir1, false));
     origSegmentReader.deleteDocument(10);
     assertDelDocsRefCountEquals(1, origSegmentReader);
     origSegmentReader.undeleteAll();
@@ -317,11 +321,11 @@ public class TestIndexReaderClone extends LuceneTestCase {
     // need to test norms?
     dir1.close();
   }
-  
+
   public void testSegmentReaderCloseReferencing() throws Exception {
-    final Directory dir1 = new MockRAMDirectory();
-    TestIndexReaderReopen.createIndex(dir1, false);
-    SegmentReader origSegmentReader = SegmentReader.getOnlySegmentReader(dir1);
+    final Directory dir1 = newDirectory();
+    TestIndexReaderReopen.createIndex(random, dir1, false);
+    SegmentReader origSegmentReader = getOnlySegmentReader(IndexReader.open(dir1, false));
     origSegmentReader.deleteDocument(1);
     origSegmentReader.setNorm(4, "field1", 0.5f);
 
@@ -336,13 +340,13 @@ public class TestIndexReaderClone extends LuceneTestCase {
     clonedSegmentReader.close();
     dir1.close();
   }
-  
+
   public void testSegmentReaderDelDocsReferenceCounting() throws Exception {
-    final Directory dir1 = new MockRAMDirectory();
-    TestIndexReaderReopen.createIndex(dir1, false);
+    final Directory dir1 = newDirectory();
+    TestIndexReaderReopen.createIndex(random, dir1, false);
 
     IndexReader origReader = IndexReader.open(dir1, false);
-    SegmentReader origSegmentReader = SegmentReader.getOnlySegmentReader(origReader);
+    SegmentReader origSegmentReader = getOnlySegmentReader(origReader);
     // deletedDocsRef should be null because nothing has updated yet
     assertNull(origSegmentReader.deletedDocsRef);
 
@@ -354,7 +358,7 @@ public class TestIndexReaderClone extends LuceneTestCase {
     // the cloned segmentreader should have 2 references, 1 to itself, and 1 to
     // the original segmentreader
     IndexReader clonedReader = (IndexReader) origReader.clone();
-    SegmentReader clonedSegmentReader = SegmentReader.getOnlySegmentReader(clonedReader);
+    SegmentReader clonedSegmentReader = getOnlySegmentReader(clonedReader);
     assertDelDocsRefCountEquals(2, origSegmentReader);
     // deleting a document creates a new deletedDocs bitvector, the refs goes to
     // 1
@@ -367,9 +371,10 @@ public class TestIndexReaderClone extends LuceneTestCase {
     assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);
 
     assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);
-    assertTrue(!origSegmentReader.isDeleted(2)); // doc 2 should not be deleted
+    final Bits delDocs = origSegmentReader.getDeletedDocs();
+    assertTrue(delDocs == null || !delDocs.get(2)); // doc 2 should not be deleted
                                                   // in original segmentreader
-    assertTrue(clonedSegmentReader.isDeleted(2)); // doc 2 should be deleted in
+    assertTrue(clonedSegmentReader.getDeletedDocs().get(2)); // doc 2 should be deleted in
                                                   // cloned segmentreader
 
     // deleting a doc from the original segmentreader should throw an exception
@@ -390,7 +395,7 @@ public class TestIndexReaderClone extends LuceneTestCase {
     // test a reopened reader
     IndexReader reopenedReader = clonedReader.reopen();
     IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();
-    SegmentReader cloneSegmentReader2 = SegmentReader.getOnlySegmentReader(cloneReader2);
+    SegmentReader cloneSegmentReader2 = getOnlySegmentReader(cloneReader2);
     assertDelDocsRefCountEquals(2, cloneSegmentReader2);
     clonedReader.close();
     reopenedReader.close();
@@ -401,8 +406,8 @@ public class TestIndexReaderClone extends LuceneTestCase {
 
   // LUCENE-1648
   public void testCloneWithDeletes() throws Throwable {
-    final Directory dir1 = new MockRAMDirectory();
-    TestIndexReaderReopen.createIndex(dir1, false);
+    final Directory dir1 = newDirectory();
+    TestIndexReaderReopen.createIndex(random, dir1, false);
     IndexReader origReader = IndexReader.open(dir1, false);
     origReader.deleteDocument(1);
 
@@ -411,15 +416,15 @@ public class TestIndexReaderClone extends LuceneTestCase {
     clonedReader.close();
 
     IndexReader r = IndexReader.open(dir1, false);
-    assertTrue(r.isDeleted(1));
+    assertTrue(MultiFields.getDeletedDocs(r).get(1));
     r.close();
     dir1.close();
   }
 
   // LUCENE-1648
   public void testCloneWithSetNorm() throws Throwable {
-    final Directory dir1 = new MockRAMDirectory();
-    TestIndexReaderReopen.createIndex(dir1, false);
+    final Directory dir1 = newDirectory();
+    TestIndexReaderReopen.createIndex(random, dir1, false);
     IndexReader orig = IndexReader.open(dir1, false);
     orig.setNorm(1, "field1", 17.0f);
     final byte encoded = Similarity.getDefault().encodeNormValue(17.0f);
@@ -439,22 +444,22 @@ public class TestIndexReaderClone extends LuceneTestCase {
 
   private void assertDocDeleted(SegmentReader reader, SegmentReader reader2,
       int doc) {
-    assertEquals(reader.isDeleted(doc), reader2.isDeleted(doc));
+    assertEquals(reader.getDeletedDocs().get(doc), reader2.getDeletedDocs().get(doc));
   }
 
   private void assertDelDocsRefCountEquals(int refCount, SegmentReader reader) {
     assertEquals(refCount, reader.deletedDocsRef.get());
   }
-  
+
   public void testCloneSubreaders() throws Exception {
-    final Directory dir1 = new MockRAMDirectory();
- 
-    TestIndexReaderReopen.createIndex(dir1, true);
+    final Directory dir1 = newDirectory();
+
+    TestIndexReaderReopen.createIndex(random, dir1, true);
     IndexReader reader = IndexReader.open(dir1, false);
     reader.deleteDocument(1); // acquire write lock
     IndexReader[] subs = reader.getSequentialSubReaders();
     assert subs.length > 1;
-    
+
     IndexReader[] clones = new IndexReader[subs.length];
     for (int x=0; x < subs.length; x++) {
       clones[x] = (IndexReader) subs[x].clone();
@@ -467,16 +472,16 @@ public class TestIndexReaderClone extends LuceneTestCase {
   }
 
   public void testLucene1516Bug() throws Exception {
-    final Directory dir1 = new MockRAMDirectory();
-    TestIndexReaderReopen.createIndex(dir1, false);
+    final Directory dir1 = newDirectory();
+    TestIndexReaderReopen.createIndex(random, dir1, false);
     IndexReader r1 = IndexReader.open(dir1, false);
     r1.incRef();
     IndexReader r2 = r1.clone(false);
     r1.deleteDocument(5);
     r1.decRef();
-    
+
     r1.incRef();
-    
+
     r2.close();
     r1.decRef();
     r1.close();
@@ -484,12 +489,14 @@ public class TestIndexReaderClone extends LuceneTestCase {
   }
 
   public void testCloseStoredFields() throws Exception {
-    final Directory dir = new MockRAMDirectory();
-    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(
-        TEST_VERSION_CURRENT, new MockAnalyzer()));
-    ((LogMergePolicy) w.getConfig().getMergePolicy()).setUseCompoundFile(false);
+    final Directory dir = newDirectory();
+    IndexWriter w = new IndexWriter(
+        dir,
+        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).
+            setMergePolicy(newLogMergePolicy(false))
+    );
     Document doc = new Document();
-    doc.add(new Field("field", "yes it's stored", Field.Store.YES, Field.Index.ANALYZED));
+    doc.add(newField("field", "yes it's stored", Field.Store.YES, Field.Index.ANALYZED));
     w.addDocument(doc);
     w.close();
     IndexReader r1 = IndexReader.open(dir, false);
