diff --git a/lucene/src/test/org/apache/lucene/index/TestDoc.java b/lucene/src/test/org/apache/lucene/index/TestDoc.java
index 8d544fc..ef9c9ae 100644
--- a/lucene/src/test/org/apache/lucene/index/TestDoc.java
+++ b/lucene/src/test/org/apache/lucene/index/TestDoc.java
@@ -24,7 +24,7 @@ import java.io.PrintWriter;
 import java.io.StringWriter;
 
 import java.util.LinkedList;
-import java.util.List;
+import java.util.Collection;
 
 import junit.framework.TestSuite;
 import junit.textui.TestRunner;
@@ -33,8 +33,8 @@ import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.index.IndexWriterConfig.OpenMode;
+import org.apache.lucene.search.DocIdSetIterator;
 import org.apache.lucene.store.Directory;
-import org.apache.lucene.store.FSDirectory;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.index.codecs.CodecProvider;
 
@@ -47,17 +47,15 @@ public class TestDoc extends LuceneTestCase {
         TestRunner.run (new TestSuite(TestDoc.class));
     }
 
-
     private File workDir;
     private File indexDir;
     private LinkedList<File> files;
 
-
     /** Set the test case. This test case needs
      *  a few text files created in the current working directory.
      */
     @Override
-    protected void setUp() throws Exception {
+    public void setUp() throws Exception {
         super.setUp();
         workDir = new File(TEMP_DIR,"TestDoc");
         workDir.mkdirs();
@@ -65,7 +63,7 @@ public class TestDoc extends LuceneTestCase {
         indexDir = new File(workDir, "testIndex");
         indexDir.mkdirs();
 
-        Directory directory = FSDirectory.open(indexDir);
+        Directory directory = newFSDirectory(indexDir);
         directory.close();
 
         files = new LinkedList<File>();
@@ -110,10 +108,14 @@ public class TestDoc extends LuceneTestCase {
       StringWriter sw = new StringWriter();
       PrintWriter out = new PrintWriter(sw, true);
 
-      Directory directory = FSDirectory.open(indexDir);
-      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(
-        TEST_VERSION_CURRENT, new MockAnalyzer())
-        .setOpenMode(OpenMode.CREATE));
+      Directory directory = newFSDirectory(indexDir);
+      IndexWriter writer = new IndexWriter(
+          directory,
+          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).
+              setOpenMode(OpenMode.CREATE).
+              setMaxBufferedDocs(-1).
+              setMergePolicy(newLogMergePolicy(10))
+      );
 
       SegmentInfo si1 = indexDoc(writer, "test.txt");
       printSegment(out, si1);
@@ -130,7 +132,7 @@ public class TestDoc extends LuceneTestCase {
 
       SegmentInfo siMerge3 = merge(siMerge, siMerge2, "merge3", false);
       printSegment(out, siMerge3);
-      
+
       directory.close();
       out.close();
       sw.close();
@@ -140,10 +142,14 @@ public class TestDoc extends LuceneTestCase {
       sw = new StringWriter();
       out = new PrintWriter(sw, true);
 
-      directory = FSDirectory.open(indexDir);
-      writer = new IndexWriter(directory, new IndexWriterConfig(
-        TEST_VERSION_CURRENT, new MockAnalyzer())
-        .setOpenMode(OpenMode.CREATE));
+      directory = newFSDirectory(indexDir);
+      writer = new IndexWriter(
+          directory,
+          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).
+              setOpenMode(OpenMode.CREATE).
+              setMaxBufferedDocs(-1).
+              setMergePolicy(newLogMergePolicy(10))
+      );
 
       si1 = indexDoc(writer, "test.txt");
       printSegment(out, si1);
@@ -160,7 +166,7 @@ public class TestDoc extends LuceneTestCase {
 
       siMerge3 = merge(siMerge, siMerge2, "merge3", true);
       printSegment(out, siMerge3);
-      
+
       directory.close();
       out.close();
       sw.close();
@@ -186,19 +192,21 @@ public class TestDoc extends LuceneTestCase {
       SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);
       SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);
 
-      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriter.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null);
+      SegmentMerger merger = new SegmentMerger(si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, null, CodecProvider.getDefault(), null, new FieldInfos());
 
       merger.add(r1);
       merger.add(r2);
       merger.merge();
-      merger.closeReaders();
-      
+      r1.close();
+      r2.close();
+
       final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,
-                                               useCompoundFile, merger.hasProx(), merger.getCodec());
-      
+                                               useCompoundFile, merger.fieldInfos().hasProx(), merger.getSegmentCodecs(),
+                                               merger.fieldInfos().hasVectors());
+
       if (useCompoundFile) {
-        List<String> filesToDelete = merger.createCompoundFile(merged + ".cfs", info);
-        for (final String fileToDelete : filesToDelete) 
+        Collection<String> filesToDelete = merger.createCompoundFile(merged + ".cfs", info);
+        for (final String fileToDelete : filesToDelete)
           si1.dir.deleteFile(fileToDelete);
       }
 
@@ -224,7 +232,7 @@ public class TestDoc extends LuceneTestCase {
 
           DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getDeletedDocs(), null);
 
-          while (positions.nextDoc() != positions.NO_MORE_DOCS) {
+          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {
             out.print(" doc=" + positions.docID());
             out.print(" TF=" + positions.freq());
             out.print(" pos=");
