diff --git a/lucene/src/test/org/apache/lucene/util/TestSetOnce.java b/lucene/src/test/org/apache/lucene/util/TestSetOnce.java
index 05af180..3575f2a 100644
--- a/lucene/src/test/org/apache/lucene/util/TestSetOnce.java
+++ b/lucene/src/test/org/apache/lucene/util/TestSetOnce.java
@@ -29,6 +29,11 @@ public class TestSetOnce extends LuceneTestCase {
   private static final class SetOnceThread extends Thread {
     SetOnce<Integer> set;
     boolean success = false;
+    final Random RAND;
+    
+    public SetOnceThread(Random random) {
+      RAND = new Random(random.nextLong());
+    }
     
     @Override
     public void run() {
@@ -46,8 +51,6 @@ public class TestSetOnce extends LuceneTestCase {
     }
   }
   
-  private static final Random RAND = new Random();
-  
   @Test
   public void testEmptyCtor() throws Exception {
     SetOnce<Integer> set = new SetOnce<Integer>();
@@ -71,15 +74,10 @@ public class TestSetOnce extends LuceneTestCase {
   
   @Test
   public void testSetMultiThreaded() throws Exception {
-    long seed = RAND.nextLong();
-    RAND.setSeed(seed);
-    if (VERBOSE) {
-      System.out.println("testSetMultiThreaded: seed=" + seed);
-    }
     final SetOnce<Integer> set = new SetOnce<Integer>();
     SetOnceThread[] threads = new SetOnceThread[10];
     for (int i = 0; i < threads.length; i++) {
-      threads[i] = new SetOnceThread();
+      threads[i] = new SetOnceThread(random);
       threads[i].setName("t-" + (i+1));
       threads[i].set = set;
     }
