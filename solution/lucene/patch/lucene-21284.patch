diff --git a/lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads.java b/lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads.java
index 8f2809c..6cf4163 100644
--- a/lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads.java
+++ b/lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads.java
@@ -18,23 +18,24 @@ package org.apache.lucene.index;
  */
 
 import java.util.Random;
+import java.util.concurrent.atomic.AtomicInteger;
 
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.document.Document;
-import org.apache.lucene.index.TestIndexWriterReader.HeavyAtomicInt;
 import org.apache.lucene.store.Directory;
-import org.apache.lucene.store.MockRAMDirectory;
 import org.apache.lucene.util.LuceneTestCase;
 
 public class TestNRTReaderWithThreads extends LuceneTestCase {
-  Random random = new Random();
-  HeavyAtomicInt seq = new HeavyAtomicInt(1);
+  AtomicInteger seq = new AtomicInteger(1);
 
   public void testIndexing() throws Exception {
-    Directory mainDir = new MockRAMDirectory();
-    IndexWriter writer = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));
-    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);
-    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);
+    Directory mainDir = newDirectory();
+    IndexWriter writer = new IndexWriter(
+        mainDir,
+        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).
+            setMaxBufferedDocs(10).
+            setMergePolicy(newLogMergePolicy(false,2))
+    );
     IndexReader reader = writer.getReader(); // start pooling readers
     reader.close();
     RunThread[] indexThreads = new RunThread[4];
@@ -42,7 +43,7 @@ public class TestNRTReaderWithThreads extends LuceneTestCase {
       indexThreads[x] = new RunThread(x % 2, writer);
       indexThreads[x].setName("Thread " + x);
       indexThreads[x].start();
-    }    
+    }
     long startTime = System.currentTimeMillis();
     long duration = 1000;
     while ((System.currentTimeMillis() - startTime) < duration) {
@@ -75,6 +76,7 @@ public class TestNRTReaderWithThreads extends LuceneTestCase {
     int delCount = 0;
     int addCount = 0;
     int type;
+    final Random r = new Random(random.nextLong());
 
     public RunThread(int type, IndexWriter writer) {
       this.type = type;
@@ -95,7 +97,7 @@ public class TestNRTReaderWithThreads extends LuceneTestCase {
             // we may or may not delete because the term may not exist,
             // however we're opening and closing the reader rapidly
             IndexReader reader = writer.getReader();
-            int id = random.nextInt(seq.intValue());
+            int id = r.nextInt(seq.intValue());
             Term term = new Term("id", Integer.toString(id));
             int count = TestIndexWriterReader.count(term, reader);
             writer.deleteDocuments(term);
