diff --git a/solr/src/java/org/apache/solr/search/function/StringIndexDocValues.java b/solr/src/java/org/apache/solr/search/function/StringIndexDocValues.java
index 55891ca..16d5a14 100755
--- a/solr/src/java/org/apache/solr/search/function/StringIndexDocValues.java
+++ b/solr/src/java/org/apache/solr/search/function/StringIndexDocValues.java
@@ -21,8 +21,10 @@ import org.apache.lucene.search.FieldCache;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexReader.AtomicReaderContext;
 import org.apache.lucene.util.BytesRef;
+import org.apache.noggit.CharArr;
 import org.apache.solr.search.MutableValue;
 import org.apache.solr.search.MutableValueStr;
+import org.apache.solr.util.ByteUtils;
 
 import java.io.IOException;
 
@@ -30,64 +32,97 @@ import java.io.IOException;
  *  Serves as base class for DocValues based on StringIndex 
  **/
 public abstract class StringIndexDocValues extends DocValues {
-    protected final FieldCache.DocTermsIndex termsIndex;
-    protected final ValueSource vs;
-    protected final MutableValueStr val = new MutableValueStr();
-
-    public StringIndexDocValues(ValueSource vs, AtomicReaderContext context, String field) throws IOException {
-      try {
-        termsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, field);
-      } catch (RuntimeException e) {
-        throw new StringIndexException(field, e);
-      }
-      this.vs = vs;
+  protected final FieldCache.DocTermsIndex termsIndex;
+  protected final ValueSource vs;
+  protected final MutableValueStr val = new MutableValueStr();
+  protected final BytesRef spare = new BytesRef();
+  protected final CharArr spareChars = new CharArr();
+
+  public StringIndexDocValues(ValueSource vs, AtomicReaderContext context, String field) throws IOException {
+    try {
+      termsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, field);
+    } catch (RuntimeException e) {
+      throw new StringIndexException(field, e);
     }
+    this.vs = vs;
+  }
+
+  public FieldCache.DocTermsIndex getDocTermsIndex() {
+    return termsIndex;
+  }
+
+  protected abstract String toTerm(String readableValue);
+
+  @Override
+  public boolean exists(int doc) {
+    return termsIndex.getOrd(doc) != 0;
+  }
+
 
-    public FieldCache.DocTermsIndex getDocTermsIndex() {
-      return termsIndex;
+  @Override
+  public boolean bytesVal(int doc, BytesRef target) {
+    int ord=termsIndex.getOrd(doc);
+    if (ord==0) {
+      target.length = 0;
+      return false;
     }
-  
-    protected abstract String toTerm(String readableValue);
-
-    @Override
-    public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {
-      // TODO: are lowerVal and upperVal in indexed form or not?
-      lowerVal = lowerVal == null ? null : toTerm(lowerVal);
-      upperVal = upperVal == null ? null : toTerm(upperVal);
-
-      final BytesRef spare = new BytesRef();
-
-      int lower = Integer.MIN_VALUE;
-      if (lowerVal != null) {
-        lower = termsIndex.binarySearchLookup(new BytesRef(lowerVal), spare);
-        if (lower < 0) {
-          lower = -lower-1;
-        } else if (!includeLower) {
-          lower++;
-        }
+    termsIndex.lookup(ord, target);
+    return true;
+  }
+
+  @Override
+  public String strVal(int doc) {
+    int ord=termsIndex.getOrd(doc);
+    if (ord==0) return null;
+    termsIndex.lookup(ord, spare);
+    spareChars.reset();
+    ByteUtils.UTF8toUTF16(spare, spareChars);
+    return spareChars.toString();
+  }
+
+
+  @Override
+  public abstract Object objectVal(int doc);  // force subclasses to override
+
+  @Override
+  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {
+    // TODO: are lowerVal and upperVal in indexed form or not?
+    lowerVal = lowerVal == null ? null : toTerm(lowerVal);
+    upperVal = upperVal == null ? null : toTerm(upperVal);
+
+    final BytesRef spare = new BytesRef();
+
+    int lower = Integer.MIN_VALUE;
+    if (lowerVal != null) {
+      lower = termsIndex.binarySearchLookup(new BytesRef(lowerVal), spare);
+      if (lower < 0) {
+        lower = -lower-1;
+      } else if (!includeLower) {
+        lower++;
       }
-      
-      int upper = Integer.MAX_VALUE;
-      if (upperVal != null) {
-        upper = termsIndex.binarySearchLookup(new BytesRef(upperVal), spare);
-        if (upper < 0) {
-          upper = -upper-2;
-        } else if (!includeUpper) {
-          upper--;
-        }
+    }
+
+    int upper = Integer.MAX_VALUE;
+    if (upperVal != null) {
+      upper = termsIndex.binarySearchLookup(new BytesRef(upperVal), spare);
+      if (upper < 0) {
+        upper = -upper-2;
+      } else if (!includeUpper) {
+        upper--;
       }
+    }
 
-      final int ll = lower;
-      final int uu = upper;
+    final int ll = lower;
+    final int uu = upper;
 
-      return new ValueSourceScorer(reader, this) {
-        @Override
-        public boolean matchesValue(int doc) {
-          int ord = termsIndex.getOrd(doc);
-          return ord >= ll && ord <= uu;
-        }
-      };
-    }
+    return new ValueSourceScorer(reader, this) {
+      @Override
+      public boolean matchesValue(int doc) {
+        int ord = termsIndex.getOrd(doc);
+        return ord >= ll && ord <= uu;
+      }
+    };
+  }
 
   @Override
   public String toString(int doc) {
@@ -117,7 +152,7 @@ public abstract class StringIndexDocValues extends DocValues {
     public StringIndexException(final String fieldName,
                                 final RuntimeException cause) {
       super("Can't initialize StringIndex to generate (function) " +
-            "DocValues for field: " + fieldName, cause);
+              "DocValues for field: " + fieldName, cause);
     }
   }
