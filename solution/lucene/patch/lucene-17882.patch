diff --git a/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase.java b/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase.java
index 07f78d0..8c3791f 100644
--- a/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase.java
+++ b/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase.java
@@ -197,89 +197,110 @@ public abstract class AbstractDataImportHandlerTestCase extends
       this.root = root;
     }
 
+    @Override
     public String getEntityAttribute(String name) {
       return entityAttrs == null ? delegate.getEntityAttribute(name) : entityAttrs.get(name);
     }
 
+    @Override
     public String getResolvedEntityAttribute(String name) {
       return entityAttrs == null ? delegate.getResolvedEntityAttribute(name) :
               delegate.getVariableResolver().replaceTokens(entityAttrs.get(name));
     }
 
+    @Override
     public List<Map<String, String>> getAllEntityFields() {
       return entityFields == null ? delegate.getAllEntityFields()
               : entityFields;
     }
 
+    @Override
     public VariableResolver getVariableResolver() {
       return delegate.getVariableResolver();
     }
 
+    @Override
     public DataSource getDataSource() {
       return delegate.getDataSource();
     }
 
+    @Override
     public boolean isRootEntity() {
       return root;
     }
 
+    @Override
     public String currentProcess() {
       return delegate.currentProcess();
     }
 
+    @Override
     public Map<String, Object> getRequestParameters() {
       return delegate.getRequestParameters();
     }
 
+    @Override
     public EntityProcessor getEntityProcessor() {
       return null;
     }
 
+    @Override
     public void setSessionAttribute(String name, Object val, String scope) {
       delegate.setSessionAttribute(name, val, scope);
     }
 
+    @Override
     public Object getSessionAttribute(String name, String scope) {
       return delegate.getSessionAttribute(name, scope);
     }
 
+    @Override
     public Context getParentContext() {
       return delegate.getParentContext();
     }
 
+    @Override
     public DataSource getDataSource(String name) {
       return delegate.getDataSource(name);
     }
 
+    @Override
     public SolrCore getSolrCore() {
       return delegate.getSolrCore();
     }
 
+    @Override
     public Map<String, Object> getStats() {
       return delegate.getStats();
     }
 
 
+    @Override
     public String getScript() {
       return script == null ? delegate.getScript() : script;
     }
 
+    @Override
     public String getScriptLanguage() {
       return scriptlang == null ? delegate.getScriptLanguage() : scriptlang;
     }
 
+    @Override
     public void deleteDoc(String id) {
 
     }
 
+    @Override
     public void deleteDocByQuery(String query) {
 
     }
 
+    @Override
     public Object resolve(String var) {
       return delegate.resolve(var);
     }
 
+    @Override
     public String replaceTokens(String template) {
       return delegate.replaceTokens(template);
     }
@@ -318,31 +339,37 @@ public abstract class AbstractDataImportHandlerTestCase extends
       reset();
     }
 
+    @Override
     public void finish() throws IOException {
       finishCalled = true;
       super.finish();
     }
 
+    @Override
     public void processAdd(AddUpdateCommand cmd) throws IOException {
       processAddCalled = true;
       super.processAdd(cmd);
     }
 
+    @Override
     public void processCommit(CommitUpdateCommand cmd) throws IOException {
       processCommitCalled = true;
       super.processCommit(cmd);
     }
 
+    @Override
     public void processDelete(DeleteUpdateCommand cmd) throws IOException {
       processDeleteCalled = true;
       super.processDelete(cmd);
     }
 
+    @Override
     public void processMergeIndexes(MergeIndexesCommand cmd) throws IOException {
       mergeIndexesCalled = true;
       super.processMergeIndexes(cmd);
     }
 
+    @Override
     public void processRollback(RollbackUpdateCommand cmd) throws IOException {
       rollbackCalled = true;
       super.processRollback(cmd);
