diff --git a/solr/src/test/org/apache/solr/search/QueryParsingTest.java b/solr/src/test/org/apache/solr/search/QueryParsingTest.java
index 559c001..95087bc 100644
--- a/solr/src/test/org/apache/solr/search/QueryParsingTest.java
+++ b/solr/src/test/org/apache/solr/search/QueryParsingTest.java
@@ -20,6 +20,7 @@ import org.apache.lucene.search.Sort;
 import org.apache.lucene.search.SortField;
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.common.SolrException;
+import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.schema.IndexSchema;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -39,22 +40,23 @@ public class QueryParsingTest extends SolrTestCaseJ4 {
   @Test
   public void testSort() throws Exception {
     Sort sort;
+    SolrQueryRequest req = req();
 
     IndexSchema schema = h.getCore().getSchema();
-    sort = QueryParsing.parseSort("score desc", schema);
+    sort = QueryParsing.parseSort("score desc", req);
     assertNull("sort", sort);//only 1 thing in the list, no Sort specified
 
-    sort = QueryParsing.parseSort("score asc", schema);
+    sort = QueryParsing.parseSort("score asc", req);
     SortField[] flds = sort.getSort();
     assertEquals(flds[0].getType(), SortField.SCORE);
     assertTrue(flds[0].getReverse());
 
-    sort = QueryParsing.parseSort("weight desc", schema);
+    sort = QueryParsing.parseSort("weight desc", req);
     flds = sort.getSort();
     assertEquals(flds[0].getType(), SortField.FLOAT);
     assertEquals(flds[0].getField(), "weight");
     assertEquals(flds[0].getReverse(), true);
-    sort = QueryParsing.parseSort("weight desc,bday asc", schema);
+    sort = QueryParsing.parseSort("weight desc,bday asc", req);
     flds = sort.getSort();
     assertEquals(flds[0].getType(), SortField.FLOAT);
     assertEquals(flds[0].getField(), "weight");
@@ -63,7 +65,7 @@ public class QueryParsingTest extends SolrTestCaseJ4 {
     assertEquals(flds[1].getField(), "bday");
     assertEquals(flds[1].getReverse(), false);
     //order aliases
-    sort = QueryParsing.parseSort("weight top,bday asc", schema);
+    sort = QueryParsing.parseSort("weight top,bday asc", req);
     flds = sort.getSort();
     assertEquals(flds[0].getType(), SortField.FLOAT);
     assertEquals(flds[0].getField(), "weight");
@@ -71,7 +73,7 @@ public class QueryParsingTest extends SolrTestCaseJ4 {
     assertEquals(flds[1].getType(), SortField.LONG);
     assertEquals(flds[1].getField(), "bday");
     assertEquals(flds[1].getReverse(), false);
-    sort = QueryParsing.parseSort("weight top,bday bottom", schema);
+    sort = QueryParsing.parseSort("weight top,bday bottom", req);
     flds = sort.getSort();
     assertEquals(flds[0].getType(), SortField.FLOAT);
     assertEquals(flds[0].getField(), "weight");
@@ -81,20 +83,20 @@ public class QueryParsingTest extends SolrTestCaseJ4 {
     assertEquals(flds[1].getReverse(), false);
 
     //test weird spacing
-    sort = QueryParsing.parseSort("weight         desc,            bday         asc", schema);
+    sort = QueryParsing.parseSort("weight         desc,            bday         asc", req);
     flds = sort.getSort();
     assertEquals(flds[0].getType(), SortField.FLOAT);
     assertEquals(flds[0].getField(), "weight");
     assertEquals(flds[1].getField(), "bday");
     assertEquals(flds[1].getType(), SortField.LONG);
     //handles trailing commas
-    sort = QueryParsing.parseSort("weight desc,", schema);
+    sort = QueryParsing.parseSort("weight desc,", req);
     flds = sort.getSort();
     assertEquals(flds[0].getType(), SortField.FLOAT);
     assertEquals(flds[0].getField(), "weight");
 
     //test functions
-    sort = QueryParsing.parseSort("pow(weight, 2) desc", schema);
+    sort = QueryParsing.parseSort("pow(weight, 2) desc", req);
     flds = sort.getSort();
     assertEquals(flds[0].getType(), SortField.CUSTOM);
     //Not thrilled about the fragility of string matching here, but...
@@ -102,12 +104,12 @@ public class QueryParsingTest extends SolrTestCaseJ4 {
     assertEquals(flds[0].getField(), "pow(float(weight),const(2.0))");
     
     //test functions (more deep)
-    sort = QueryParsing.parseSort("sum(product(r_f,sum(d_f,t_f,1)),a_f) asc", schema);
+    sort = QueryParsing.parseSort("sum(product(r_f,sum(d_f,t_f,1)),a_f) asc", req);
     flds = sort.getSort();
     assertEquals(flds[0].getType(), SortField.CUSTOM);
     assertEquals(flds[0].getField(), "sum(product(float(r_f),sum(float(d_f),float(t_f),const(1.0))),float(a_f))");
 
-    sort = QueryParsing.parseSort("pow(weight,                 2)         desc", schema);
+    sort = QueryParsing.parseSort("pow(weight,                 2)         desc", req);
     flds = sort.getSort();
     assertEquals(flds[0].getType(), SortField.CUSTOM);
     //Not thrilled about the fragility of string matching here, but...
@@ -115,7 +117,7 @@ public class QueryParsingTest extends SolrTestCaseJ4 {
     assertEquals(flds[0].getField(), "pow(float(weight),const(2.0))");
 
 
-    sort = QueryParsing.parseSort("pow(weight, 2) desc, weight    desc,   bday    asc", schema);
+    sort = QueryParsing.parseSort("pow(weight, 2) desc, weight    desc,   bday    asc", req);
     flds = sort.getSort();
     assertEquals(flds[0].getType(), SortField.CUSTOM);
 
@@ -129,19 +131,19 @@ public class QueryParsingTest extends SolrTestCaseJ4 {
     assertEquals(flds[2].getType(), SortField.LONG);
     
     //handles trailing commas
-    sort = QueryParsing.parseSort("weight desc,", schema);
+    sort = QueryParsing.parseSort("weight desc,", req);
     flds = sort.getSort();
     assertEquals(flds[0].getType(), SortField.FLOAT);
     assertEquals(flds[0].getField(), "weight");
 
     //Test literals in functions
-    sort = QueryParsing.parseSort("strdist(foo_s, \"junk\", jw) desc", schema);
+    sort = QueryParsing.parseSort("strdist(foo_s, \"junk\", jw) desc", req);
     flds = sort.getSort();
     assertEquals(flds[0].getType(), SortField.CUSTOM);
     //the value sources get wrapped, so the out field is different than the input
     assertEquals(flds[0].getField(), "strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)");
 
-    sort = QueryParsing.parseSort("", schema);
+    sort = QueryParsing.parseSort("", req);
     assertNull(sort);
 
   }
@@ -149,44 +151,45 @@ public class QueryParsingTest extends SolrTestCaseJ4 {
   @Test
   public void testBad() throws Exception {
     Sort sort;
+    SolrQueryRequest req = req();
 
     IndexSchema schema = h.getCore().getSchema();
     //test some bad vals
     try {
-      sort = QueryParsing.parseSort("weight, desc", schema);
+      sort = QueryParsing.parseSort("weight, desc", req);
       assertTrue(false);
     } catch (SolrException e) {
       //expected
     }
     try {
-      sort = QueryParsing.parseSort("w", schema);
+      sort = QueryParsing.parseSort("w", req);
       assertTrue(false);
     } catch (SolrException e) {
       //expected
     }
     try {
-      sort = QueryParsing.parseSort("weight desc, bday", schema);
+      sort = QueryParsing.parseSort("weight desc, bday", req);
       assertTrue(false);
     } catch (SolrException e) {
     }
 
     try {
       //bad number of commas
-      sort = QueryParsing.parseSort("pow(weight,,2) desc, bday asc", schema);
+      sort = QueryParsing.parseSort("pow(weight,,2) desc, bday asc", req);
       assertTrue(false);
     } catch (SolrException e) {
     }
 
     try {
       //bad function
-      sort = QueryParsing.parseSort("pow() desc, bday asc", schema);
+      sort = QueryParsing.parseSort("pow() desc, bday asc", req);
       assertTrue(false);
     } catch (SolrException e) {
     }
 
     try {
       //bad number of parens
-      sort = QueryParsing.parseSort("pow((weight,2) desc, bday asc", schema);
+      sort = QueryParsing.parseSort("pow((weight,2) desc, bday asc", req);
       assertTrue(false);
     } catch (SolrException e) {
     }
