diff --git a/solr/src/java/org/apache/solr/search/ValueSourceParser.java b/solr/src/java/org/apache/solr/search/ValueSourceParser.java
index b766860..867ec18 100755
--- a/solr/src/java/org/apache/solr/search/ValueSourceParser.java
+++ b/solr/src/java/org/apache/solr/search/ValueSourceParser.java
@@ -81,23 +81,27 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
 
   static {
     addParser("ord", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         String field = fp.parseId();
         return new OrdFieldSource(field);
       }
     });
     addParser("literal", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         return new LiteralValueSource(fp.getString());
       }
     });
     addParser("rord", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         String field = fp.parseId();
         return new ReverseOrdFieldSource(field);
       }
     });
     addParser("top", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         // top(vs) is now a no-op
         ValueSource source = fp.parseValueSource();
@@ -105,6 +109,7 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
       }
     });
     addParser("linear", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         ValueSource source = fp.parseValueSource();
         float slope = fp.parseFloat();
@@ -113,6 +118,7 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
       }
     });
     addParser("max", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         ValueSource source = fp.parseValueSource();
         float val = fp.parseFloat();
@@ -120,6 +126,7 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
       }
     });
     addParser("recip", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         ValueSource source = fp.parseValueSource();
         float m = fp.parseFloat();
@@ -129,6 +136,7 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
       }
     });
     addParser("scale", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         ValueSource source = fp.parseValueSource();
         float min = fp.parseFloat();
@@ -137,6 +145,7 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
       }
     });
     addParser("div", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         ValueSource a = fp.parseValueSource();
         ValueSource b = fp.parseValueSource();
@@ -144,6 +153,7 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
       }
     });
     addParser("map", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         ValueSource source = fp.parseValueSource();
         float min = fp.parseFloat();
@@ -155,13 +165,16 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
     });
 
     addParser("abs", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         ValueSource source = fp.parseValueSource();
         return new SimpleFloatFunction(source) {
+          @Override
           protected String name() {
             return "abs";
           }
 
+          @Override
           protected float func(int doc, DocValues vals) {
             return Math.abs(vals.floatVal(doc));
           }
@@ -169,6 +182,7 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
       }
     });
     addParser("sum", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         List<ValueSource> sources = fp.parseValueSourceList();
         return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));
@@ -177,6 +191,7 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
     alias("sum","add");    
 
     addParser("product", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         List<ValueSource> sources = fp.parseValueSourceList();
         return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));
@@ -185,14 +200,17 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
     alias("product","mul");
 
     addParser("sub", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         ValueSource a = fp.parseValueSource();
         ValueSource b = fp.parseValueSource();
         return new DualFloatFunction(a, b) {
+          @Override
           protected String name() {
             return "sub";
           }
 
+          @Override
           protected float func(int doc, DocValues aVals, DocValues bVals) {
             return aVals.floatVal(doc) - bVals.floatVal(doc);
           }
@@ -200,12 +218,14 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
       }
     });
     addParser("vector", new ValueSourceParser(){
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException{
         return new VectorValueSource(fp.parseValueSourceList());
       }
     });
     addParser("query", new ValueSourceParser() {
       // boost(query($q),rating)
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         Query q = fp.parseNestedQuery();
         float defVal = 0.0f;
@@ -216,6 +236,7 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
       }
     });
     addParser("boost", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         Query q = fp.parseNestedQuery();
         ValueSource vs = fp.parseValueSource();
@@ -224,6 +245,7 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
       }
     });
     addParser("joindf", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         String f0 = fp.parseArg();
         String qf = fp.parseArg();
@@ -234,6 +256,7 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
     addParser("geodist", HaversineConstFunction.parser);
 
     addParser("hsin", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
 
         double radius = fp.parseDouble();
@@ -274,6 +297,7 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
     });
 
     addParser("ghhsin", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         double radius = fp.parseDouble();
 
@@ -285,6 +309,7 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
     });
 
     addParser("geohash", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
 
         ValueSource lat = fp.parseValueSource();
@@ -294,6 +319,7 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
       }
     });
     addParser("strdist", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
 
         ValueSource str1 = fp.parseValueSource();
@@ -319,117 +345,140 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
     });
 
     addParser(new DoubleParser("rad") {
+      @Override
       public double func(int doc, DocValues vals) {
         return vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;
       }
     });
     addParser(new DoubleParser("deg") {
+      @Override
       public double func(int doc, DocValues vals) {
         return vals.doubleVal(doc) * DistanceUtils.RADIANS_TO_DEGREES;
       }
     });
     addParser(new DoubleParser("sqrt") {
+      @Override
       public double func(int doc, DocValues vals) {
         return Math.sqrt(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("cbrt") {
+      @Override
       public double func(int doc, DocValues vals) {
         return Math.cbrt(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("log") {
+      @Override
       public double func(int doc, DocValues vals) {
         return Math.log10(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("ln") {
+      @Override
       public double func(int doc, DocValues vals) {
         return Math.log(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("exp") {
+      @Override
       public double func(int doc, DocValues vals) {
         return Math.exp(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("sin") {
+      @Override
       public double func(int doc, DocValues vals) {
         return Math.sin(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("cos") {
+      @Override
       public double func(int doc, DocValues vals) {
         return Math.cos(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("tan") {
+      @Override
       public double func(int doc, DocValues vals) {
         return Math.tan(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("asin") {
+      @Override
       public double func(int doc, DocValues vals) {
         return Math.asin(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("acos") {
+      @Override
       public double func(int doc, DocValues vals) {
         return Math.acos(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("atan") {
+      @Override
       public double func(int doc, DocValues vals) {
         return Math.atan(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("sinh") {
+      @Override
       public double func(int doc, DocValues vals) {
         return Math.sinh(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("cosh") {
+      @Override
       public double func(int doc, DocValues vals) {
         return Math.cosh(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("tanh") {
+      @Override
       public double func(int doc, DocValues vals) {
         return Math.tanh(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("ceil") {
+      @Override
       public double func(int doc, DocValues vals) {
         return Math.ceil(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("floor") {
+      @Override
       public double func(int doc, DocValues vals) {
         return Math.floor(vals.doubleVal(doc));
       }
     });
     addParser(new DoubleParser("rint") {
+      @Override
       public double func(int doc, DocValues vals) {
         return Math.rint(vals.doubleVal(doc));
       }
     });
     addParser(new Double2Parser("pow") {
+      @Override
       public double func(int doc, DocValues a, DocValues b) {
         return Math.pow(a.doubleVal(doc), b.doubleVal(doc));
       }
     });
     addParser(new Double2Parser("hypot") {
+      @Override
       public double func(int doc, DocValues a, DocValues b) {
         return Math.hypot(a.doubleVal(doc), b.doubleVal(doc));
       }
     });
     addParser(new Double2Parser("atan2") {
+      @Override
       public double func(int doc, DocValues a, DocValues b) {
         return Math.atan2(a.doubleVal(doc), b.doubleVal(doc));
       }
     });
 
     addParser("sqedist", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         List<ValueSource> sources = fp.parseValueSourceList();
         MVResult mvr = getMultiValueSources(sources);
@@ -439,6 +488,7 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
     });
 
     addParser("dist", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         float power = fp.parseFloat();
         List<ValueSource> sources = fp.parseValueSourceList();
@@ -450,11 +500,13 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
 
     
     addParser("pi", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         return new DoubleConstValueSource(Math.PI);
       }
     });
     addParser("e", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         return new DoubleConstValueSource(Math.E);
       }
@@ -462,6 +514,7 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
 
 
     addParser("docfreq", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         TInfo tinfo = parseTerm(fp);
         return new DocFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);
@@ -469,6 +522,7 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
     });
 
     addParser("idf", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         TInfo tinfo = parseTerm(fp);
         return new IDFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);
@@ -476,6 +530,7 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
     });
 
     addParser("termfreq", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         TInfo tinfo = parseTerm(fp);
         return new TermFreqValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);
@@ -483,6 +538,7 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
     });
 
     addParser("tf", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         TInfo tinfo = parseTerm(fp);
         return new TFValueSource(tinfo.field, tinfo.val, tinfo.indexedField, tinfo.indexedBytes);
@@ -490,6 +546,7 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
     });
 
     addParser("norm", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         String field = fp.parseArg();
         return new NormValueSource(field);
@@ -497,12 +554,14 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
     });
 
     addParser("maxdoc", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         return new MaxDocValueSource();
       }
     });
 
     addParser("numdocs", new ValueSourceParser() {
+      @Override
       public ValueSource parse(FunctionQParser fp) throws ParseException {
         return new NumDocsValueSource();
       }
@@ -599,6 +658,7 @@ public abstract class ValueSourceParser implements NamedListInitializedPlugin {
 class DateValueSourceParser extends ValueSourceParser {
   DateField df = new TrieDateField();
 
+  @Override
   public void init(NamedList args) {
   }
 
@@ -619,6 +679,7 @@ class DateValueSourceParser extends ValueSourceParser {
     return f.getType().getValueSource(f, fp);
   }
 
+  @Override
   public ValueSource parse(FunctionQParser fp) throws ParseException {
     String first = fp.parseArg();
     String second = fp.parseArg();
@@ -655,10 +716,12 @@ class DateValueSourceParser extends ValueSourceParser {
     // "dv"
     if (d1 != null && v2 != null)
       return new DualFloatFunction(new LongConstValueSource(ms1), v2) {
+        @Override
         protected String name() {
           return "ms";
         }
 
+        @Override
         protected float func(int doc, DocValues aVals, DocValues bVals) {
           return ms1 - bVals.longVal(doc);
         }
@@ -667,10 +730,12 @@ class DateValueSourceParser extends ValueSourceParser {
     // "vd"
     if (v1 != null && d2 != null)
       return new DualFloatFunction(v1, new LongConstValueSource(ms2)) {
+        @Override
         protected String name() {
           return "ms";
         }
 
+        @Override
         protected float func(int doc, DocValues aVals, DocValues bVals) {
           return aVals.longVal(doc) - ms2;
         }
@@ -679,10 +744,12 @@ class DateValueSourceParser extends ValueSourceParser {
     // "vv"
     if (v1 != null && v2 != null)
       return new DualFloatFunction(v1, v2) {
+        @Override
         protected String name() {
           return "ms";
         }
 
+        @Override
         protected float func(int doc, DocValues aVals, DocValues bVals) {
           return aVals.longVal(doc) - bVals.longVal(doc);
         }
@@ -706,42 +773,52 @@ class LongConstValueSource extends ConstNumberSource {
     this.fv = constant;
   }
 
+  @Override
   public String description() {
     return "const(" + constant + ")";
   }
 
+  @Override
   public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     return new DocValues() {
+      @Override
       public float floatVal(int doc) {
         return fv;
       }
 
+      @Override
       public int intVal(int doc) {
         return (int) constant;
       }
 
+      @Override
       public long longVal(int doc) {
         return constant;
       }
 
+      @Override
       public double doubleVal(int doc) {
         return dv;
       }
 
+      @Override
       public String strVal(int doc) {
         return Long.toString(constant);
       }
 
+      @Override
       public String toString(int doc) {
         return description();
       }
     };
   }
 
+  @Override
   public int hashCode() {
     return (int) constant + (int) (constant >>> 32);
   }
 
+  @Override
   public boolean equals(Object o) {
     if (LongConstValueSource.class != o.getClass()) return false;
     LongConstValueSource other = (LongConstValueSource) o;
@@ -793,6 +870,7 @@ abstract class DoubleParser extends NamedParser {
 
   public abstract double func(int doc, DocValues vals);
 
+  @Override
   public ValueSource parse(FunctionQParser fp) throws ParseException {
     return new Function(fp.parseValueSource());
   }
@@ -802,6 +880,7 @@ abstract class DoubleParser extends NamedParser {
       super(source);
     }
 
+    @Override
     public String name() {
       return DoubleParser.this.name();
     }
@@ -810,21 +889,27 @@ abstract class DoubleParser extends NamedParser {
     public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
       final DocValues vals =  source.getValues(context, readerContext);
       return new DocValues() {
+        @Override
         public float floatVal(int doc) {
           return (float)doubleVal(doc);
         }
+        @Override
         public int intVal(int doc) {
           return (int)doubleVal(doc);
         }
+        @Override
         public long longVal(int doc) {
           return (long)doubleVal(doc);
         }
+        @Override
         public double doubleVal(int doc) {
           return func(doc, vals);
         }
+        @Override
         public String strVal(int doc) {
           return Double.toString(doubleVal(doc));
         }
+        @Override
         public String toString(int doc) {
           return name() + '(' + vals.toString(doc) + ')';
         }
@@ -841,6 +926,7 @@ abstract class Double2Parser extends NamedParser {
 
   public abstract double func(int doc, DocValues a, DocValues b);
 
+  @Override
   public ValueSource parse(FunctionQParser fp) throws ParseException {
     return new Function(fp.parseValueSource(), fp.parseValueSource());
   }
@@ -858,29 +944,37 @@ abstract class Double2Parser extends NamedParser {
       this.b = b;
     }
 
+    @Override
     public String description() {
       return name() + "(" + a.description() + "," + b.description() + ")";
     }
 
+    @Override
     public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
       final DocValues aVals =  a.getValues(context, readerContext);
       final DocValues bVals =  b.getValues(context, readerContext);
       return new DocValues() {
+        @Override
         public float floatVal(int doc) {
           return (float)doubleVal(doc);
         }
+        @Override
         public int intVal(int doc) {
           return (int)doubleVal(doc);
         }
+        @Override
         public long longVal(int doc) {
           return (long)doubleVal(doc);
         }
+        @Override
         public double doubleVal(int doc) {
           return func(doc, aVals, bVals);
         }
+        @Override
         public String strVal(int doc) {
           return Double.toString(doubleVal(doc));
         }
+        @Override
         public String toString(int doc) {
           return name() + '(' + aVals.toString(doc) + ',' + bVals.toString(doc) + ')';
         }
@@ -891,6 +985,7 @@ abstract class Double2Parser extends NamedParser {
     public void createWeight(Map context, IndexSearcher searcher) throws IOException {
     }
 
+    @Override
     public int hashCode() {
       int h = a.hashCode();
       h ^= (h << 13) | (h >>> 20);
@@ -900,6 +995,7 @@ abstract class Double2Parser extends NamedParser {
       return h;
     }
 
+    @Override
     public boolean equals(Object o) {
       if (this.getClass() != o.getClass()) return false;
       Function other = (Function)o;
