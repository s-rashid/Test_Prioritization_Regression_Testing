diff --git a/lucene/src/java/org/apache/lucene/util/StringHelper.java b/lucene/src/java/org/apache/lucene/util/StringHelper.java
index c2555d3..7809ccd 100644
--- a/lucene/src/java/org/apache/lucene/util/StringHelper.java
+++ b/lucene/src/java/org/apache/lucene/util/StringHelper.java
@@ -1,5 +1,8 @@
 package org.apache.lucene.util;
 
+import java.util.Comparator;
+import java.util.StringTokenizer;
+
 /**
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
@@ -54,4 +57,42 @@ public abstract class StringHelper {
 
   private StringHelper() {
   }
+  
+  /**
+   * @return a Comparator over versioned strings such as X.YY.Z
+   * @lucene.internal
+   */
+  public static Comparator<String> getVersionComparator() {
+    return versionComparator;
+  }
+  
+  private static Comparator<String> versionComparator = new Comparator<String>() {
+    public int compare(String a, String b) {
+      StringTokenizer aTokens = new StringTokenizer(a, ".");
+      StringTokenizer bTokens = new StringTokenizer(b, ".");
+      
+      while (aTokens.hasMoreTokens()) {
+        int aToken = Integer.parseInt(aTokens.nextToken());
+        if (bTokens.hasMoreTokens()) {
+          int bToken = Integer.parseInt(bTokens.nextToken());
+          if (aToken != bToken) {
+            return aToken - bToken;
+          }
+        } else {
+          // a has some extra trailing tokens. if these are all zeroes, thats ok.
+          if (aToken != 0) {
+            return 1; 
+          }
+        }
+      }
+      
+      // b has some extra trailing tokens. if these are all zeroes, thats ok.
+      while (bTokens.hasMoreTokens()) {
+        if (Integer.parseInt(bTokens.nextToken()) != 0)
+          return -1;
+      }
+      
+      return 0;
+    }
+  };
 }
