diff --git a/solr/src/java/org/apache/solr/search/function/ReciprocalFloatFunction.java b/solr/src/java/org/apache/solr/search/function/ReciprocalFloatFunction.java
index 9962775..3b672a2 100644
--- a/solr/src/java/org/apache/solr/search/function/ReciprocalFloatFunction.java
+++ b/solr/src/java/org/apache/solr/search/function/ReciprocalFloatFunction.java
@@ -57,24 +57,31 @@ public class ReciprocalFloatFunction extends ValueSource {
     this.b=b;
   }
 
+  @Override
   public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final DocValues vals = source.getValues(context, readerContext);
     return new DocValues() {
+      @Override
       public float floatVal(int doc) {
         return a/(m*vals.floatVal(doc) + b);
       }
+      @Override
       public int intVal(int doc) {
         return (int)floatVal(doc);
       }
+      @Override
       public long longVal(int doc) {
         return (long)floatVal(doc);
       }
+      @Override
       public double doubleVal(int doc) {
         return (double)floatVal(doc);
       }
+      @Override
       public String strVal(int doc) {
         return Float.toString(floatVal(doc));
       }
+      @Override
       public String toString(int doc) {
         return Float.toString(a) + "/("
                 + m + "*float(" + vals.toString(doc) + ')'
@@ -88,18 +95,21 @@ public class ReciprocalFloatFunction extends ValueSource {
     source.createWeight(context, searcher);
   }
 
+  @Override
   public String description() {
     return Float.toString(a) + "/("
            + m + "*float(" + source.description() + ")"
            + "+" + b + ')';
   }
 
+  @Override
   public int hashCode() {
     int h = Float.floatToIntBits(a) + Float.floatToIntBits(m);
     h ^= (h << 13) | (h >>> 20);
     return h + (Float.floatToIntBits(b)) + source.hashCode();
   }
 
+  @Override
   public boolean equals(Object o) {
     if (ReciprocalFloatFunction.class != o.getClass()) return false;
     ReciprocalFloatFunction other = (ReciprocalFloatFunction)o;
