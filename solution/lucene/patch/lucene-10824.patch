diff --git a/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader.java b/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader.java
index e0eb143..a06ac34 100644
--- a/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader.java
+++ b/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader.java
@@ -16,8 +16,6 @@
  */
 package org.apache.solr.handler.dataimport;
 
-import org.apache.solr.SolrTestCaseJ4;
-import org.junit.Assert;
 import org.junit.Test;
 
 import java.io.StringReader;
@@ -31,9 +29,9 @@ import java.util.Map;
  * @version $Id$
  * @since solr 1.3
  */
-public class TestXPathRecordReader extends SolrTestCaseJ4 {
+public class TestXPathRecordReader extends AbstractDataImportHandlerTestCase {
   @Test
-  public void basic() {
+  public void testBasic() {
     String xml="<root>\n"
              + "   <b><c>Hello C1</c>\n"
              + "      <c>Hello C1</c>\n"
@@ -44,13 +42,13 @@ public class TestXPathRecordReader extends SolrTestCaseJ4 {
     XPathRecordReader rr = new XPathRecordReader("/root/b");
     rr.addField("c", "/root/b/c", true);
     List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));
-    Assert.assertEquals(2, l.size());
-    Assert.assertEquals(2, ((List) l.get(0).get("c")).size());
-    Assert.assertEquals(1, ((List) l.get(1).get("c")).size());
+    assertEquals(2, l.size());
+    assertEquals(2, ((List) l.get(0).get("c")).size());
+    assertEquals(1, ((List) l.get(1).get("c")).size());
   }
 
   @Test
-  public void attributes() {
+  public void testAttributes() {
     String xml="<root>\n"
              + "   <b a=\"x0\" b=\"y0\" />\n"
              + "   <b a=\"x1\" b=\"y1\" />\n"
@@ -60,17 +58,17 @@ public class TestXPathRecordReader extends SolrTestCaseJ4 {
     rr.addField("a", "/root/b/@a", false);
     rr.addField("b", "/root/b/@b", false);
     List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));
-    Assert.assertEquals(3, l.size());
-    Assert.assertEquals("x0", l.get(0).get("a"));
-    Assert.assertEquals("x1", l.get(1).get("a"));
-    Assert.assertEquals("x2", l.get(2).get("a"));
-    Assert.assertEquals("y0", l.get(0).get("b"));
-    Assert.assertEquals("y1", l.get(1).get("b"));
-    Assert.assertEquals("y2", l.get(2).get("b"));
+    assertEquals(3, l.size());
+    assertEquals("x0", l.get(0).get("a"));
+    assertEquals("x1", l.get(1).get("a"));
+    assertEquals("x2", l.get(2).get("a"));
+    assertEquals("y0", l.get(0).get("b"));
+    assertEquals("y1", l.get(1).get("b"));
+    assertEquals("y2", l.get(2).get("b"));
   }
   
   @Test
-  public void attrInRoot(){
+  public void testAttrInRoot(){
     String xml="<r>\n" +
             "<merchantProduct id=\"814636051\" mid=\"189973\">\n" +
             "                   <in_stock type=\"stock-4\" />\n" +
@@ -91,20 +89,20 @@ public class TestXPathRecordReader extends SolrTestCaseJ4 {
     rr.addField("conditionType", "/r/merchantProduct/condition/@type", false);
     List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));
     Map<String, Object> m = l.get(0);
-    Assert.assertEquals("814636051", m.get("id"));
-    Assert.assertEquals("189973", m.get("mid"));
-    Assert.assertEquals("301.46", m.get("price"));
-    Assert.assertEquals("cond-0", m.get("conditionType"));
+    assertEquals("814636051", m.get("id"));
+    assertEquals("189973", m.get("mid"));
+    assertEquals("301.46", m.get("price"));
+    assertEquals("cond-0", m.get("conditionType"));
 
     m = l.get(1);
-    Assert.assertEquals("814636052", m.get("id"));
-    Assert.assertEquals("189974", m.get("mid"));
-    Assert.assertEquals("302.46", m.get("price"));
-    Assert.assertEquals("cond-1", m.get("conditionType"));
+    assertEquals("814636052", m.get("id"));
+    assertEquals("189974", m.get("mid"));
+    assertEquals("302.46", m.get("price"));
+    assertEquals("cond-1", m.get("conditionType"));
   }
 
   @Test
-  public void attributes2Level() {
+  public void testAttributes2Level() {
     String xml="<root>\n"
              + "<a>\n  <b a=\"x0\" b=\"y0\" />\n"
              + "       <b a=\"x1\" b=\"y1\" />\n"
@@ -115,13 +113,13 @@ public class TestXPathRecordReader extends SolrTestCaseJ4 {
     rr.addField("a", "/root/a/b/@a", false);
     rr.addField("b", "/root/a/b/@b", false);
     List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));
-    Assert.assertEquals(3, l.size());
-    Assert.assertEquals("x0", l.get(0).get("a"));
-    Assert.assertEquals("y1", l.get(1).get("b"));
+    assertEquals(3, l.size());
+    assertEquals("x0", l.get(0).get("a"));
+    assertEquals("y1", l.get(1).get("b"));
   }
 
   @Test
-  public void attributes2LevelHetero() {
+  public void testAttributes2LevelHetero() {
     String xml="<root>\n"
              + "<a>\n   <b a=\"x0\" b=\"y0\" />\n"
              + "        <b a=\"x1\" b=\"y1\" />\n"
@@ -148,12 +146,12 @@ public class TestXPathRecordReader extends SolrTestCaseJ4 {
       }
     });
 
-    Assert.assertEquals(1, a.size());
-    Assert.assertEquals(1, x.size());
+    assertEquals(1, a.size());
+    assertEquals(1, x.size());
   }
 
   @Test
-  public void attributes2LevelMissingAttrVal() {
+  public void testAttributes2LevelMissingAttrVal() {
     String xml="<root>\n"
              + "<a>\n  <b a=\"x0\" b=\"y0\" />\n"
              + "       <b a=\"x1\" b=\"y1\" />\n"
@@ -166,13 +164,13 @@ public class TestXPathRecordReader extends SolrTestCaseJ4 {
     rr.addField("a", "/root/a/b/@a", true);
     rr.addField("b", "/root/a/b/@b", true);
     List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));
-    Assert.assertEquals(2, l.size());
-    Assert.assertNull(((List) l.get(1).get("a")).get(1));
-    Assert.assertNull(((List) l.get(1).get("b")).get(0));
+    assertEquals(2, l.size());
+    assertNull(((List) l.get(1).get("a")).get(1));
+    assertNull(((List) l.get(1).get("b")).get(0));
   }
 
   @Test
-  public void elems2LevelMissing() {
+  public void testElems2LevelMissing() {
     String xml="<root>\n"
              + "\t<a>\n"
              + "\t   <b>\n\t  <x>x0</x>\n"
@@ -191,13 +189,13 @@ public class TestXPathRecordReader extends SolrTestCaseJ4 {
     rr.addField("a", "/root/a/b/x", true);
     rr.addField("b", "/root/a/b/y", true);
     List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));
-    Assert.assertEquals(2, l.size());
-    Assert.assertNull(((List) l.get(1).get("a")).get(1));
-    Assert.assertNull(((List) l.get(1).get("b")).get(0));
+    assertEquals(2, l.size());
+    assertNull(((List) l.get(1).get("a")).get(1));
+    assertNull(((List) l.get(1).get("b")).get(0));
   }
 
   @Test
-  public void mixedContent() {
+  public void testMixedContent() {
     String xml = "<xhtml:p xmlns:xhtml=\"http://xhtml.com/\" >This text is \n" +
             "  <xhtml:b>bold</xhtml:b> and this text is \n" +
             "  <xhtml:u>underlined</xhtml:u>!\n" +
@@ -209,18 +207,18 @@ public class TestXPathRecordReader extends SolrTestCaseJ4 {
     List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));
     Map<String, Object> row = l.get(0);
 
-    Assert.assertEquals("bold", ((List) row.get("b")).get(0));
-    Assert.assertEquals("underlined", ((List) row.get("u")).get(0));
+    assertEquals("bold", ((List) row.get("b")).get(0));
+    assertEquals("underlined", ((List) row.get("u")).get(0));
     String p = (String) ((List) row.get("p")).get(0);
-    Assert.assertTrue(p.contains("This text is"));
-    Assert.assertTrue(p.contains("and this text is"));
-    Assert.assertTrue(p.contains("!"));
+    assertTrue(p.contains("This text is"));
+    assertTrue(p.contains("and this text is"));
+    assertTrue(p.contains("!"));
     // Should not contain content from child elements
-    Assert.assertFalse(p.contains("bold"));
+    assertFalse(p.contains("bold"));
   }
 
   @Test
-  public void mixedContentFlattened() {
+  public void testMixedContentFlattened() {
     String xml = "<xhtml:p xmlns:xhtml=\"http://xhtml.com/\" >This text is \n" +
             "  <xhtml:b>bold</xhtml:b> and this text is \n" +
             "  <xhtml:u>underlined</xhtml:u>!\n" +
@@ -229,13 +227,13 @@ public class TestXPathRecordReader extends SolrTestCaseJ4 {
     rr.addField("p", "/p", false, XPathRecordReader.FLATTEN);
     List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));
     Map<String, Object> row = l.get(0);
-    Assert.assertEquals("This text is \n" +
+    assertEquals("This text is \n" +
             "  bold and this text is \n" +
             "  underlined!", ((String)row.get("p")).trim() );
   }
 
   @Test
-  public void elems2LevelWithAttrib() {
+  public void testElems2LevelWithAttrib() {
     String xml = "<root>\n\t<a>\n\t   <b k=\"x\">\n"
             + "\t                        <x>x0</x>\n"
             + "\t                        <y>y0</y>\n"
@@ -257,14 +255,14 @@ public class TestXPathRecordReader extends SolrTestCaseJ4 {
     rr.addField("x", "/root/a/b[@k]/x", true);
     rr.addField("y", "/root/a/b[@k]/y", true);
     List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));
-    Assert.assertEquals(2, l.size());
-    Assert.assertEquals(2, ((List) l.get(0).get("x")).size());
-    Assert.assertEquals(2, ((List) l.get(0).get("y")).size());
-    Assert.assertEquals(0, l.get(1).size());
+    assertEquals(2, l.size());
+    assertEquals(2, ((List) l.get(0).get("x")).size());
+    assertEquals(2, ((List) l.get(0).get("y")).size());
+    assertEquals(0, l.get(1).size());
   }
 
   @Test
-  public void elems2LevelWithAttribMultiple() {
+  public void testElems2LevelWithAttribMultiple() {
     String xml="<root>\n"
              + "\t<a>\n\t   <b k=\"x\" m=\"n\" >\n"
              + "\t             <x>x0</x>\n"
@@ -287,14 +285,14 @@ public class TestXPathRecordReader extends SolrTestCaseJ4 {
     rr.addField("x", "/root/a/b[@k][@m='n']/x", true);
     rr.addField("y", "/root/a/b[@k][@m='n']/y", true);
     List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));
-    Assert.assertEquals(2, l.size());
-    Assert.assertEquals(1, ((List) l.get(0).get("x")).size());
-    Assert.assertEquals(1, ((List) l.get(0).get("y")).size());
-    Assert.assertEquals(0, l.get(1).size());
+    assertEquals(2, l.size());
+    assertEquals(1, ((List) l.get(0).get("x")).size());
+    assertEquals(1, ((List) l.get(0).get("y")).size());
+    assertEquals(0, l.get(1).size());
   }
 
   @Test
-  public void elems2LevelWithAttribVal() {
+  public void testElems2LevelWithAttribVal() {
     String xml="<root>\n\t<a>\n   <b k=\"x\">\n"
              + "\t                  <x>x0</x>\n"
              + "\t                  <y>y0</y>\n"
@@ -311,44 +309,43 @@ public class TestXPathRecordReader extends SolrTestCaseJ4 {
     rr.addField("x", "/root/a/b[@k='x']/x", true);
     rr.addField("y", "/root/a/b[@k='x']/y", true);
     List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));
-    Assert.assertEquals(2, l.size());
-    Assert.assertEquals(1, ((List) l.get(0).get("x")).size());
-    Assert.assertEquals(1, ((List) l.get(0).get("y")).size());
-    Assert.assertEquals(0, l.get(1).size());
+    assertEquals(2, l.size());
+    assertEquals(1, ((List) l.get(0).get("x")).size());
+    assertEquals(1, ((List) l.get(0).get("y")).size());
+    assertEquals(0, l.get(1).size());
   }
 
   @Test
-  public void  attribValWithSlash() {
+  public void testAttribValWithSlash() {
     String xml = "<root><b>\n" +
             "  <a x=\"a/b\" h=\"hello-A\"/>  \n" +
             "</b></root>";
     XPathRecordReader rr = new XPathRecordReader("/root/b");
     rr.addField("x", "/root/b/a[@x='a/b']/@h", false);
     List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));
-    Assert.assertEquals(1, l.size());
+    assertEquals(1, l.size());
     Map<String, Object> m = l.get(0);
-    Assert.assertEquals("hello-A", m.get("x"));    
+    assertEquals("hello-A", m.get("x"));    
   }
 
   @Test
-  public void  unsupported_Xpaths() {
+  public void testUnsupported_Xpaths() {
     String xml = "<root><b><a x=\"a/b\" h=\"hello-A\"/>  </b></root>";
     XPathRecordReader rr=null;
     try {
       rr = new XPathRecordReader("//b");
-      Assert.fail("A RuntimeException was expected: //b forEach cannot begin with '//'.");
+      fail("A RuntimeException was expected: //b forEach cannot begin with '//'.");
       }
     catch (RuntimeException ex) {  }
      try {
       rr.addField("bold"  ,"b",        false);
-      Assert.fail("A RuntimeException was expected: 'b' xpaths must begin with '/'.");
+      fail("A RuntimeException was expected: 'b' xpaths must begin with '/'.");
       }
     catch (RuntimeException ex) {  }
-
   }
 
   @Test
-  public void any_decendent_from_root() {
+  public void testAny_decendent_from_root() {
     XPathRecordReader rr = new XPathRecordReader("/anyd/contenido");
     rr.addField("descdend", "//boo",                   true);
     rr.addField("inr_descd","//boo/i",                false);
@@ -373,22 +370,22 @@ public class TestXPathRecordReader extends SolrTestCaseJ4 {
              + "</anyd>";
 
     List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));
-    Assert.assertEquals(1, l.size());
+    assertEquals(1, l.size());
     Map<String, Object> m = l.get(0);
-    Assert.assertEquals("This one is  inside a forEach", m.get("cont").toString().trim());
-    Assert.assertEquals("10097"             ,m.get("id"));
-    Assert.assertEquals("My flattened title",m.get("title").toString().trim());
-    Assert.assertEquals("My summary"        ,m.get("resume").toString().trim());
-    Assert.assertEquals("My text"           ,m.get("text").toString().trim());
-    Assert.assertEquals("not ignored as its",(String) ((List) m.get("descdend")).get(0) );
-    Assert.assertEquals("antler"            ,(String) ((List) m.get("descdend")).get(1) );
-    Assert.assertEquals("Within the body of",(String) ((List) m.get("descdend")).get(2) );
-    Assert.assertEquals("inner  as well"    ,(String) ((List) m.get("descdend")).get(3) );
-    Assert.assertEquals("sub clauses"       ,m.get("inr_descd").toString().trim());
+    assertEquals("This one is  inside a forEach", m.get("cont").toString().trim());
+    assertEquals("10097"             ,m.get("id"));
+    assertEquals("My flattened title",m.get("title").toString().trim());
+    assertEquals("My summary"        ,m.get("resume").toString().trim());
+    assertEquals("My text"           ,m.get("text").toString().trim());
+    assertEquals("not ignored as its",(String) ((List) m.get("descdend")).get(0) );
+    assertEquals("antler"            ,(String) ((List) m.get("descdend")).get(1) );
+    assertEquals("Within the body of",(String) ((List) m.get("descdend")).get(2) );
+    assertEquals("inner  as well"    ,(String) ((List) m.get("descdend")).get(3) );
+    assertEquals("sub clauses"       ,m.get("inr_descd").toString().trim());
   }
 
   @Test
-  public void any_decendent_of_a_child1() {
+  public void testAny_decendent_of_a_child1() {
     XPathRecordReader rr = new XPathRecordReader("/anycd");
     rr.addField("descdend", "/anycd//boo",         true);
 
@@ -407,19 +404,19 @@ public class TestXPathRecordReader extends SolrTestCaseJ4 {
              + "</anycd>";
 
     List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));
-    Assert.assertEquals(1, l.size());
+    assertEquals(1, l.size());
     Map<String, Object> m = l.get(0);
-    Assert.assertEquals("top level"         ,(String) ((List) m.get("descdend")).get(0) );
-    Assert.assertEquals("this element"      ,(String) ((List) m.get("descdend")).get(1) );
-    Assert.assertEquals("not ignored as its",(String) ((List) m.get("descdend")).get(2) );
-    Assert.assertEquals("antler"            ,(String) ((List) m.get("descdend")).get(3) );
-    Assert.assertEquals("title"             ,(String) ((List) m.get("descdend")).get(4) );
-    Assert.assertEquals("Within the body of",(String) ((List) m.get("descdend")).get(5) );
-    Assert.assertEquals("inner  as well"    ,(String) ((List) m.get("descdend")).get(6) );
+    assertEquals("top level"         ,(String) ((List) m.get("descdend")).get(0) );
+    assertEquals("this element"      ,(String) ((List) m.get("descdend")).get(1) );
+    assertEquals("not ignored as its",(String) ((List) m.get("descdend")).get(2) );
+    assertEquals("antler"            ,(String) ((List) m.get("descdend")).get(3) );
+    assertEquals("title"             ,(String) ((List) m.get("descdend")).get(4) );
+    assertEquals("Within the body of",(String) ((List) m.get("descdend")).get(5) );
+    assertEquals("inner  as well"    ,(String) ((List) m.get("descdend")).get(6) );
   }
 
   @Test
-  public void any_decendent_of_a_child2() {
+  public void testAny_decendent_of_a_child2() {
     XPathRecordReader rr = new XPathRecordReader("/anycd");
     rr.addField("descdend", "/anycd/contenido//boo",         true);
 
@@ -438,17 +435,17 @@ public class TestXPathRecordReader extends SolrTestCaseJ4 {
              + "</anycd>";
 
     List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));
-    Assert.assertEquals(1, l.size());
+    assertEquals(1, l.size());
     Map<String, Object> m = l.get(0);
-    Assert.assertEquals("not ignored as its",((List) m.get("descdend")).get(0) );
-    Assert.assertEquals("antler"            ,((List) m.get("descdend")).get(1) );
-    Assert.assertEquals("title"             ,((List) m.get("descdend")).get(2) );
-    Assert.assertEquals("Within the body of",((List) m.get("descdend")).get(3) );
-    Assert.assertEquals("inner  as well"    ,((List) m.get("descdend")).get(4) );
+    assertEquals("not ignored as its",((List) m.get("descdend")).get(0) );
+    assertEquals("antler"            ,((List) m.get("descdend")).get(1) );
+    assertEquals("title"             ,((List) m.get("descdend")).get(2) );
+    assertEquals("Within the body of",((List) m.get("descdend")).get(3) );
+    assertEquals("inner  as well"    ,((List) m.get("descdend")).get(4) );
   }
   
   @Test
-  public void another() {
+  public void testAnother() {
     String xml="<root>\n"
             + "       <contenido id=\"10097\" idioma=\"cat\">\n"
              + "    <antetitulo></antetitulo>\n"
@@ -464,17 +461,17 @@ public class TestXPathRecordReader extends SolrTestCaseJ4 {
     rr.addField("text", "/root/contenido/texto", false);
 
     List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));
-    Assert.assertEquals(1, l.size());
+    assertEquals(1, l.size());
     Map<String, Object> m = l.get(0);
-    Assert.assertEquals("10097", m.get("id"));
-    Assert.assertEquals("This is my title", m.get("title").toString().trim());
-    Assert.assertEquals("This is my summary", m.get("resume").toString().trim());
-    Assert.assertEquals("This is the body of my text", m.get("text").toString()
+    assertEquals("10097", m.get("id"));
+    assertEquals("This is my title", m.get("title").toString().trim());
+    assertEquals("This is my summary", m.get("resume").toString().trim());
+    assertEquals("This is the body of my text", m.get("text").toString()
             .trim());
   }
 
   @Test
-  public void sameForEachAndXpath(){
+  public void testSameForEachAndXpath(){
     String xml="<root>\n" +
             "   <cat>\n" +
             "     <name>hello</name>\n" +
@@ -484,11 +481,11 @@ public class TestXPathRecordReader extends SolrTestCaseJ4 {
     XPathRecordReader rr = new XPathRecordReader("/root/cat/name");
     rr.addField("catName", "/root/cat/name",false);
     List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));
-    Assert.assertEquals("hello",l.get(0).get("catName"));
+    assertEquals("hello",l.get(0).get("catName"));
   }
 
   @Test
-  public void putNullTest(){
+  public void testPutNullTest(){
     String xml = "<root>\n" +
             "  <i>\n" +
             "    <x>\n" +
@@ -521,29 +518,29 @@ public class TestXPathRecordReader extends SolrTestCaseJ4 {
     List<String> b = (List<String>) map.get("b");
     List<String> c = (List<String>) map.get("c");
 
-    Assert.assertEquals("A.1.1",a.get(0));
-    Assert.assertEquals("B.1.1",b.get(0));
-    Assert.assertNull(c.get(0));
+    assertEquals("A.1.1",a.get(0));
+    assertEquals("B.1.1",b.get(0));
+    assertNull(c.get(0));
 
-    Assert.assertNull(a.get(1));
-    Assert.assertEquals("B.1.2",b.get(1));
-    Assert.assertEquals("C.1.2",c.get(1));
+    assertNull(a.get(1));
+    assertEquals("B.1.2",b.get(1));
+    assertEquals("C.1.2",c.get(1));
 
     map = l.get(1);
     a = (List<String>) map.get("a");
     b = (List<String>) map.get("b");
     c = (List<String>) map.get("c");
-    Assert.assertEquals("A.2.1",a.get(0));
-    Assert.assertNull(b.get(0));
-    Assert.assertEquals("C.2.1",c.get(0));
+    assertEquals("A.2.1",a.get(0));
+    assertNull(b.get(0));
+    assertEquals("C.2.1",c.get(0));
 
-    Assert.assertNull(a.get(1));
-    Assert.assertEquals("B.2.2",b.get(1));
-    Assert.assertEquals("C.2.2",c.get(1));
+    assertNull(a.get(1));
+    assertEquals("B.2.2",b.get(1));
+    assertEquals("C.2.2",c.get(1));
   }
 
 
- @Test
+  @Test
   public void testError(){
     String malformedXml = "<root>\n" +
           "    <node>\n" +
@@ -564,7 +561,7 @@ public class TestXPathRecordReader extends SolrTestCaseJ4 {
     rr.addField("desc", "/root/node/desc", true);
    try {
      rr.getAllRecords(new StringReader(malformedXml));
-     Assert.fail("A RuntimeException was expected: the input XML is invalid.");
+     fail("A RuntimeException was expected: the input XML is invalid.");
    } catch (Exception e) { }
  }
 }
