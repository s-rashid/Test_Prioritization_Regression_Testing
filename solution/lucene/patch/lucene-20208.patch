diff --git a/lucene/src/test/org/apache/lucene/index/TestFieldInfos.java b/lucene/src/test/org/apache/lucene/index/TestFieldInfos.java
index 566b900..d68afdd 100644
--- a/lucene/src/test/org/apache/lucene/index/TestFieldInfos.java
+++ b/lucene/src/test/org/apache/lucene/index/TestFieldInfos.java
@@ -18,11 +18,13 @@ package org.apache.lucene.index;
  */
 
 import org.apache.lucene.util.LuceneTestCase;
+import org.apache.lucene.util._TestUtil;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.IndexOutput;
 
 import java.io.IOException;
+import java.util.Arrays;
 
 //import org.cnlp.utils.properties.ResourceBundleHelper;
 
@@ -36,44 +38,124 @@ public class TestFieldInfos extends LuceneTestCase {
     DocHelper.setupDoc(testDoc);
   }
 
-  public void test() throws IOException {
-    //Positive test of FieldInfos
+  public FieldInfos createAndWriteFieldInfos(Directory dir, String filename) throws IOException{
+  //Positive test of FieldInfos
     assertTrue(testDoc != null);
     FieldInfos fieldInfos = new FieldInfos();
-    fieldInfos.add(testDoc);
+    _TestUtil.add(testDoc, fieldInfos);
     //Since the complement is stored as well in the fields map
     assertTrue(fieldInfos.size() == DocHelper.all.size()); //this is all b/c we are using the no-arg constructor
-    Directory dir = newDirectory();
-    String name = "testFile";
-    IndexOutput output = dir.createOutput(name);
+    
+    
+    IndexOutput output = dir.createOutput(filename);
     assertTrue(output != null);
     //Use a RAMOutputStream
-    
-      fieldInfos.write(output);
-      output.close();
-      assertTrue(dir.fileLength(name) > 0);
-      FieldInfos readIn = new FieldInfos(dir, name);
-      assertTrue(fieldInfos.size() == readIn.size());
-      FieldInfo info = readIn.fieldInfo("textField1");
-      assertTrue(info != null);
-      assertTrue(info.storeTermVector == false);
-      assertTrue(info.omitNorms == false);
+  
+    fieldInfos.write(output);
+    output.close();
+    return fieldInfos;
+  }
+  public void test() throws IOException {
+    String name = "testFile";
+    Directory dir = newDirectory();
+    FieldInfos fieldInfos = createAndWriteFieldInfos(dir, name);
+    assertTrue(dir.fileLength(name) > 0);
+    FieldInfos readIn = new FieldInfos(dir, name);
+    assertTrue(fieldInfos.size() == readIn.size());
+    FieldInfo info = readIn.fieldInfo("textField1");
+    assertTrue(info != null);
+    assertTrue(info.storeTermVector == false);
+    assertTrue(info.omitNorms == false);
 
-      info = readIn.fieldInfo("textField2");
-      assertTrue(info != null);
-      assertTrue(info.storeTermVector == true);
-      assertTrue(info.omitNorms == false);
+    info = readIn.fieldInfo("textField2");
+    assertTrue(info != null);
+    assertTrue(info.storeTermVector == true);
+    assertTrue(info.omitNorms == false);
 
-      info = readIn.fieldInfo("textField3");
-      assertTrue(info != null);
-      assertTrue(info.storeTermVector == false);
-      assertTrue(info.omitNorms == true);
+    info = readIn.fieldInfo("textField3");
+    assertTrue(info != null);
+    assertTrue(info.storeTermVector == false);
+    assertTrue(info.omitNorms == true);
 
-      info = readIn.fieldInfo("omitNorms");
-      assertTrue(info != null);
-      assertTrue(info.storeTermVector == false);
-      assertTrue(info.omitNorms == true);
+    info = readIn.fieldInfo("omitNorms");
+    assertTrue(info != null);
+    assertTrue(info.storeTermVector == false);
+    assertTrue(info.omitNorms == true);
 
-      dir.close();
+    dir.close();
+  }
+  
+  public void testReadOnly() throws IOException {
+    String name = "testFile";
+    Directory dir = newDirectory();
+    FieldInfos fieldInfos = createAndWriteFieldInfos(dir, name);
+    FieldInfos readOnly = new FieldInfos(dir, name);
+    assertReadOnly(readOnly, fieldInfos);
+    FieldInfos readOnlyClone = (FieldInfos)readOnly.clone();
+    assertNotSame(readOnly, readOnlyClone);
+    // clone is also read only - no global field map
+    assertReadOnly(readOnlyClone, fieldInfos);
+    dir.close();
+  }
+  
+  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {
+    assertTrue(readOnly.isReadOnly());
+    assertFalse(modifiable.isReadOnly());
+    try {
+      readOnly.add(modifiable.fieldInfo(0));
+      fail("instance should be read only");
+    } catch (IllegalStateException e) {
+      // expected
+    }
+    
+    try {
+      readOnly.addOrUpdate("bogus", random.nextBoolean());
+      fail("instance should be read only");
+    } catch (IllegalStateException e) {
+      // expected
+    }
+    try {
+      readOnly.addOrUpdate("bogus", random.nextBoolean(), random.nextBoolean());
+      fail("instance should be read only");
+    } catch (IllegalStateException e) {
+      // expected
+    }
+    try {
+      readOnly.addOrUpdate("bogus", random.nextBoolean(), random.nextBoolean(),
+          random.nextBoolean(), random.nextBoolean());
+      fail("instance should be read only");
+    } catch (IllegalStateException e) {
+      // expected
+    }
+    try {
+      readOnly.addOrUpdate("bogus", random.nextBoolean(), random.nextBoolean(),
+          random.nextBoolean(), random.nextBoolean(), random.nextBoolean());
+      fail("instance should be read only");
+    } catch (IllegalStateException e) {
+      // expected
+    }
+    try {
+      readOnly.addOrUpdate("bogus", random.nextBoolean(), random.nextBoolean(),
+          random.nextBoolean(), random.nextBoolean(), random.nextBoolean(),
+          random.nextBoolean(), random.nextBoolean(), null);
+      fail("instance should be read only");
+    } catch (IllegalStateException e) {
+      // expected
+    }
+    try {
+      readOnly.addOrUpdate(Arrays.asList("a", "b", "c"), random.nextBoolean());
+      fail("instance should be read only");
+    } catch (IllegalStateException e) {
+      // expected
+    }
+    
+    assertEquals(modifiable.size(), readOnly.size());
+    // assert we can iterate
+    for (FieldInfo fi : readOnly) {
+      assertEquals(fi.name, modifiable.fieldName(fi.number));
+    }
+    
   }
+  
+  
 }
