diff --git a/lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper.java b/lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper.java
index d50d8fe..6d06c8d 100644
--- a/lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper.java
+++ b/lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper.java
@@ -18,10 +18,8 @@ package org.apache.lucene.index;
  */
 
 import java.io.IOException;
-import java.util.List;
-import java.util.ArrayList;
 import org.apache.lucene.util.Bits;
-import org.apache.lucene.util.ReaderUtil;
+import org.apache.lucene.util.ReaderUtil; // javadoc
 
 import org.apache.lucene.index.DirectoryReader; // javadoc
 import org.apache.lucene.index.MultiReader; // javadoc
@@ -49,22 +47,8 @@ import org.apache.lucene.index.MultiReader; // javadoc
  */
 
 public final class SlowMultiReaderWrapper extends FilterIndexReader {
-  /** This method may return the reader back, if the
-   *  incoming reader is already atomic. */
-  public static IndexReader wrap(IndexReader reader) throws IOException {
-    final List<IndexReader> subs = new ArrayList<IndexReader>();
-    ReaderUtil.gatherSubReaders(subs, reader);
-    if (subs == null) {
-      // already an atomic reader
-      return reader;
-    } else if (subs.size() == 1) {
-      return subs.get(0);
-    } else {
-      return new SlowMultiReaderWrapper(reader);
-    }
-  }
 
-  private SlowMultiReaderWrapper(IndexReader other) throws IOException {
+  public SlowMultiReaderWrapper(IndexReader other) {
     super(other);
   }
 
@@ -79,12 +63,8 @@ public final class SlowMultiReaderWrapper extends FilterIndexReader {
   }
 
   @Override
-  public void doClose() throws IOException {
-    throw new UnsupportedOperationException("please call close on the original reader instead");
-  }
-
-  @Override
   public IndexReader[] getSequentialSubReaders() {
     return null;
-  } 
+  }
+  
 }
