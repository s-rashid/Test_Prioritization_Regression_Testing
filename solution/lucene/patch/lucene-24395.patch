diff --git a/solr/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java b/solr/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
index 39b9a04..f004c0c 100644
--- a/solr/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
+++ b/solr/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
@@ -17,6 +17,9 @@
 
 package org.apache.solr.handler.admin;
 
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.util.IOUtils;
 import org.apache.solr.cloud.CloudDescriptor;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.common.params.CoreAdminParams;
@@ -42,7 +45,9 @@ import org.apache.lucene.store.Directory;
 
 import java.io.File;
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.Date;
+import java.util.List;
 
 /**
  *
@@ -171,22 +176,53 @@ public class CoreAdminHandler extends RequestHandlerBase {
   }
 
   protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {
-    boolean doPersist = false;
     SolrParams params = req.getParams();
-    SolrParams required = params.required();
-    String cname = required.get(CoreAdminParams.CORE);
+    String cname = params.required().get(CoreAdminParams.CORE);
     SolrCore core = coreContainer.getCore(cname);
     SolrQueryRequest wrappedReq = null;
+
+    SolrCore[] sourceCores = null;
+    RefCounted<SolrIndexSearcher>[] searchers = null;
+    // stores readers created from indexDir param values
+    IndexReader[] readersToBeClosed = null;
     if (core != null) {
       try {
-        doPersist = coreContainer.isPersistent();
-
-        String[] dirNames = required.getParams(CoreAdminParams.INDEX_DIR);
+        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);
+        if (dirNames == null || dirNames.length == 0) {
+          String[] sources = params.getParams("srcCore");
+          if (sources == null || sources.length == 0)
+            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,
+                "At least one indexDir or srcCore must be specified");
+
+          sourceCores = new SolrCore[sources.length];
+          for (int i = 0; i < sources.length; i++) {
+            String source = sources[i];
+            SolrCore srcCore = coreContainer.getCore(source);
+            if (srcCore == null)
+              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
+                  "Core: " + source + " does not exist");
+            sourceCores[i] = srcCore;
+          }
+        } else  {
+          readersToBeClosed = new IndexReader[dirNames.length];
+          DirectoryFactory dirFactory = core.getDirectoryFactory();
+          for (int i = 0; i < dirNames.length; i++) {
+            readersToBeClosed[i] = IndexReader.open(dirFactory.open(dirNames[i]), true);
+          }
+        }
 
-        DirectoryFactory dirFactory = core.getDirectoryFactory();
-        Directory[] dirs = new Directory[dirNames.length];
-        for (int i = 0; i < dirNames.length; i++) {
-          dirs[i] = dirFactory.open(dirNames[i]);
+        IndexReader[] readers = null;
+        if (readersToBeClosed != null)  {
+          readers = readersToBeClosed;
+        } else {
+          readers = new IndexReader[sourceCores.length];
+          searchers = new RefCounted[sourceCores.length];
+          for (int i = 0; i < sourceCores.length; i++) {
+            SolrCore solrCore = sourceCores[i];
+            // record the searchers so that we can decref
+            searchers[i] = solrCore.getSearcher();
+            readers[i] = searchers[i].get().getIndexReader();
+          }
         }
 
         UpdateRequestProcessorChain processorChain =
@@ -194,13 +230,24 @@ public class CoreAdminHandler extends RequestHandlerBase {
         wrappedReq = new LocalSolrQueryRequest(core, req.getParams());
         UpdateRequestProcessor processor =
                 processorChain.createProcessor(wrappedReq, rsp);
-        processor.processMergeIndexes(new MergeIndexesCommand(dirs, req));
+        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));
       } finally {
+        if (searchers != null) {
+          for (RefCounted<SolrIndexSearcher> searcher : searchers) {
+            if (searcher != null) searcher.decref();
+          }
+        }
+        if (sourceCores != null) {
+          for (SolrCore solrCore : sourceCores) {
+            if (solrCore != null) solrCore.close();
+          }
+        }
+        if (readersToBeClosed != null) IOUtils.closeSafely(true, readersToBeClosed);
+        if (wrappedReq != null) wrappedReq.close();
         core.close();
-        wrappedReq.close();
       }
     }
-    return doPersist;
+    return coreContainer.isPersistent();
   }
 
   /**
