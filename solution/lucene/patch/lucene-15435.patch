diff --git a/solr/src/java/org/apache/solr/search/function/ValueSource.java b/solr/src/java/org/apache/solr/search/function/ValueSource.java
index 48a56ce..daaffd6 100644
--- a/solr/src/java/org/apache/solr/search/function/ValueSource.java
+++ b/solr/src/java/org/apache/solr/search/function/ValueSource.java
@@ -18,6 +18,8 @@
 package org.apache.solr.search.function;
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.IndexReader.AtomicReaderContext;
+import org.apache.lucene.index.IndexReader.ReaderContext;
 import org.apache.lucene.search.FieldComparator;
 import org.apache.lucene.search.FieldComparatorSource;
 import org.apache.lucene.search.Scorer;
@@ -25,6 +27,7 @@ import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.SortField;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.index.MultiFields;
+import org.apache.solr.common.SolrException;
 
 import java.io.IOException;
 import java.io.Serializable;
@@ -90,10 +93,46 @@ public abstract class ValueSource implements Serializable {
   /**
    * Returns a new non-threadsafe context map.
    */
-  public static Map newContext() {
-    return new IdentityHashMap();
+  public static Map newContext(IndexSearcher searcher) {
+    Map context = new IdentityHashMap();
+    context.put("searcher", searcher);
+    return context;
   }
 
+  /* @lucene.internal
+   * This will most likely go away in the future.
+   */
+  public static AtomicReaderContext readerToContext(Map fcontext, IndexReader reader) {
+    Object v = fcontext.get(reader);
+    if (v == null) {
+      IndexSearcher searcher = (IndexSearcher)fcontext.get("searcher");
+      if (searcher == null) {
+        return null;
+        // TODO
+        // throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "no searcher found in function context");
+      }
+      ReaderContext rcontext = searcher.getIndexReader().getTopReaderContext();
+      if (rcontext.isAtomic) {
+        assert rcontext.reader == reader;
+        fcontext.put(rcontext.reader, (AtomicReaderContext)rcontext);
+      } else {
+        for (AtomicReaderContext subCtx : rcontext.leaves()) {
+          fcontext.put(subCtx.reader, subCtx);
+        }
+      }
+
+      v = fcontext.get(reader);
+      if (v == null) {
+        return null;
+        // TODO
+        // throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "reader " + reader + " is not from the top reader " + searcher.getIndexReader());
+      }
+    }
+
+    return (AtomicReaderContext)v;
+  }
+
+
   class ValueSourceComparatorSource extends FieldComparatorSource {
