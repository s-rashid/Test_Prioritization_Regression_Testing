diff --git a/solr/src/test/org/apache/solr/analysis/TestLuceneMatchVersion.java b/solr/src/test/org/apache/solr/analysis/TestLuceneMatchVersion.java
index 493997c..89a8b9d 100644
--- a/solr/src/test/org/apache/solr/analysis/TestLuceneMatchVersion.java
+++ b/solr/src/test/org/apache/solr/analysis/TestLuceneMatchVersion.java
@@ -16,15 +16,12 @@
  */
 package org.apache.solr.analysis;
 
-import java.io.StringReader;
 import java.lang.reflect.Field;
 
-import org.apache.lucene.analysis.standard.StandardTokenizer;
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.core.Config;
 import org.apache.solr.schema.IndexSchema;
 import org.apache.solr.schema.FieldType;
-import org.apache.solr.util.AbstractSolrTestCase;
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
 import org.apache.lucene.util.Version;
@@ -53,17 +50,11 @@ public class TestLuceneMatchVersion extends SolrTestCaseJ4 {
     TokenizerChain ana = (TokenizerChain) type.getAnalyzer();
     assertEquals(DEFAULT_VERSION, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);
     assertEquals(DEFAULT_VERSION, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);
-    TokenizerChain.TokenStreamInfo tsi = ana.getStream("textDefault",new StringReader(""));
-    StandardTokenizer tok = (StandardTokenizer) tsi.getTokenizer();
-    assertTrue(tok.isReplaceInvalidAcronym());
-    
-    type = schema.getFieldType("text20");
+
+    type = schema.getFieldType("text30");
     ana = (TokenizerChain) type.getAnalyzer();
-    assertEquals(Version.LUCENE_20, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);
-    assertEquals(Version.LUCENE_24, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);
-    tsi = ana.getStream("text20",new StringReader(""));
-    tok = (StandardTokenizer) tsi.getTokenizer();
-    assertFalse(tok.isReplaceInvalidAcronym());
+    assertEquals(Version.LUCENE_30, ((BaseTokenizerFactory) ana.getTokenizerFactory()).luceneMatchVersion);
+    assertEquals(Version.LUCENE_31, ((BaseTokenFilterFactory) ana.getTokenFilterFactories()[2]).luceneMatchVersion);
 
     // this is a hack to get the private matchVersion field in StandardAnalyzer's superclass, may break in later lucene versions - we have no getter :(
     final Field matchVersionField = StandardAnalyzer.class.getSuperclass().getDeclaredField("matchVersion");
@@ -74,9 +65,9 @@ public class TestLuceneMatchVersion extends SolrTestCaseJ4 {
     assertTrue(ana1 instanceof StandardAnalyzer);
     assertEquals(DEFAULT_VERSION, matchVersionField.get(ana1));
 
-    type = schema.getFieldType("textStandardAnalyzer20");
+    type = schema.getFieldType("textStandardAnalyzer30");
     ana1 = type.getAnalyzer();
     assertTrue(ana1 instanceof StandardAnalyzer);
-    assertEquals(Version.LUCENE_20, matchVersionField.get(ana1));
+    assertEquals(Version.LUCENE_30, matchVersionField.get(ana1));
   }
 }
