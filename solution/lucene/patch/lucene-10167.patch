diff --git a/lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/surround/parser/QueryParser.java b/lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/surround/parser/QueryParser.java
index bab1f30..be6f9b8 100644
--- a/lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/surround/parser/QueryParser.java
+++ b/lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/surround/parser/QueryParser.java
@@ -56,22 +56,22 @@ public class QueryParser implements QueryParserConstants {
   }
 
   protected SrndQuery getFieldsQuery(
-      SrndQuery q, ArrayList fieldNames) {
+      SrndQuery q, ArrayList<String> fieldNames) {
     /* FIXME: check acceptable subquery: at least one subquery should not be
      * a fields query.
      */
     return new FieldsQuery(q, fieldNames, fieldOperator);
   }
 
-  protected SrndQuery getOrQuery(List queries, boolean infix, Token orToken) {
+  protected SrndQuery getOrQuery(List<SrndQuery> queries, boolean infix, Token orToken) {
     return new OrQuery(queries, infix, orToken.image);
   }
 
-  protected SrndQuery getAndQuery(List queries, boolean infix, Token andToken) {
+  protected SrndQuery getAndQuery(List<SrndQuery> queries, boolean infix, Token andToken) {
     return new AndQuery( queries, infix, andToken.image);
   }
 
-  protected SrndQuery getNotQuery(List queries, Token notToken) {
+  protected SrndQuery getNotQuery(List<SrndQuery> queries, Token notToken) {
     return new NotQuery( queries, notToken.image);
   }
 
@@ -91,7 +91,7 @@ public class QueryParser implements QueryParserConstants {
   }
 
   protected SrndQuery getDistanceQuery(
-        List queries,
+        List<SrndQuery> queries,
         boolean infix,
         Token dToken,
         boolean ordered) throws ParseException {
@@ -144,16 +144,16 @@ public class QueryParser implements QueryParserConstants {
 
   final public SrndQuery FieldsQuery() throws ParseException {
   SrndQuery q;
-  ArrayList fieldNames;
+  ArrayList<String> fieldNames;
     fieldNames = OptionalFields();
     q = OrQuery();
    {if (true) return (fieldNames == null) ? q : getFieldsQuery(q, fieldNames);}
     throw new Error("Missing return statement in function");
   }
 
-  final public ArrayList OptionalFields() throws ParseException {
+  final public ArrayList<String> OptionalFields() throws ParseException {
   Token fieldName;
-  ArrayList fieldNames = null;
+  ArrayList<String> fieldNames = null;
     label_1:
     while (true) {
       if (jj_2_1(2)) {
@@ -165,7 +165,7 @@ public class QueryParser implements QueryParserConstants {
           fieldName = jj_consume_token(TERM);
       jj_consume_token(COLON);
       if (fieldNames == null) {
-        fieldNames = new ArrayList();
+        fieldNames = new ArrayList<String>();
       }
       fieldNames.add(fieldName.image);
     }
@@ -175,7 +175,7 @@ public class QueryParser implements QueryParserConstants {
 
   final public SrndQuery OrQuery() throws ParseException {
   SrndQuery q;
-  ArrayList queries = null;
+  ArrayList<SrndQuery> queries = null;
   Token oprt = null;
     q = AndQuery();
     label_2:
@@ -191,7 +191,7 @@ public class QueryParser implements QueryParserConstants {
       oprt = jj_consume_token(OR);
                   /* keep only last used operator */
       if (queries == null) {
-        queries = new ArrayList();
+        queries = new ArrayList<SrndQuery>();
         queries.add(q);
       }
       q = AndQuery();
@@ -203,7 +203,7 @@ public class QueryParser implements QueryParserConstants {
 
   final public SrndQuery AndQuery() throws ParseException {
   SrndQuery q;
-  ArrayList queries = null;
+  ArrayList<SrndQuery> queries = null;
   Token oprt = null;
     q = NotQuery();
     label_3:
@@ -219,7 +219,7 @@ public class QueryParser implements QueryParserConstants {
       oprt = jj_consume_token(AND);
                    /* keep only last used operator */
       if (queries == null) {
-        queries = new ArrayList();
+        queries = new ArrayList<SrndQuery>();
         queries.add(q);
       }
       q = NotQuery();
@@ -231,7 +231,7 @@ public class QueryParser implements QueryParserConstants {
 
   final public SrndQuery NotQuery() throws ParseException {
   SrndQuery q;
-  ArrayList queries = null;
+  ArrayList<SrndQuery> queries = null;
   Token oprt = null;
     q = NQuery();
     label_4:
@@ -247,7 +247,7 @@ public class QueryParser implements QueryParserConstants {
       oprt = jj_consume_token(NOT);
                     /* keep only last used operator */
       if (queries == null) {
-        queries = new ArrayList();
+        queries = new ArrayList<SrndQuery>();
         queries.add(q);
       }
       q = NQuery();
@@ -259,7 +259,7 @@ public class QueryParser implements QueryParserConstants {
 
   final public SrndQuery NQuery() throws ParseException {
   SrndQuery q;
-  ArrayList queries;
+  ArrayList<SrndQuery> queries;
   Token dt;
     q = WQuery();
     label_5:
@@ -273,7 +273,7 @@ public class QueryParser implements QueryParserConstants {
         break label_5;
       }
       dt = jj_consume_token(N);
-      queries = new ArrayList();
+      queries = new ArrayList<SrndQuery>();
       queries.add(q); /* left associative */
 
       q = WQuery();
@@ -286,7 +286,7 @@ public class QueryParser implements QueryParserConstants {
 
   final public SrndQuery WQuery() throws ParseException {
   SrndQuery q;
-  ArrayList queries;
+  ArrayList<SrndQuery> queries;
   Token wt;
     q = PrimaryQuery();
     label_6:
@@ -300,7 +300,7 @@ public class QueryParser implements QueryParserConstants {
         break label_6;
       }
       wt = jj_consume_token(W);
-      queries = new ArrayList();
+      queries = new ArrayList<SrndQuery>();
       queries.add(q); /* left associative */
 
       q = PrimaryQuery();
@@ -345,7 +345,7 @@ public class QueryParser implements QueryParserConstants {
 
   final public SrndQuery PrefixOperatorQuery() throws ParseException {
   Token oprt;
-  List queries;
+  List<SrndQuery> queries;
     switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
     case OR:
       oprt = jj_consume_token(OR);
@@ -379,9 +379,9 @@ public class QueryParser implements QueryParserConstants {
     throw new Error("Missing return statement in function");
   }
 
-  final public List FieldsQueryList() throws ParseException {
+  final public List<SrndQuery> FieldsQueryList() throws ParseException {
   SrndQuery q;
-  ArrayList queries = new ArrayList();
+  ArrayList<SrndQuery> queries = new ArrayList<SrndQuery>();
     jj_consume_token(LPAREN);
     q = FieldsQuery();
                      queries.add(q);
