diff --git a/lucene/src/test-framework/org/apache/lucene/util/_TestUtil.java b/lucene/src/test-framework/org/apache/lucene/util/_TestUtil.java
index 92da41f..89f1f3f 100644
--- a/lucene/src/test-framework/org/apache/lucene/util/_TestUtil.java
+++ b/lucene/src/test-framework/org/apache/lucene/util/_TestUtil.java
@@ -287,35 +287,46 @@ public class _TestUtil {
     return sb.toString();
   }
   
-  public static String randomUnicodeString(Random r, int minLength, int maxLength) {
-    if(minLength > maxLength)
-      throw new IllegalArgumentException("minLength must be >= maxLength");
-    final boolean lenEqual = minLength==maxLength;
-    final int end = lenEqual?minLength:minLength + r.nextInt(maxLength-minLength+1);
-    if (end == 0) {
-      // allow 0 length
-      return "";
-    }
+  /** Returns random string, with a given UTF-8 byte length*/
+  public static String randomFixedByteLengthUnicodeString(Random r, int length) {
     
-    // TODO(simonw): check this
-    final int fixedPlane = 5;//minLength % 5;
-    final char[] buffer = new char[end];
-    for (int i = 0; i < end; i++) {
-      int t = lenEqual? fixedPlane: r.nextInt(5);
-      //buffer[i] = (char) (97 + r.nextInt(26));
-      if (0 == t && i < end - 1 && !lenEqual) {
+    final char[] buffer = new char[length*3];
+    int bytes = length;
+    int i = 0;
+    for (; i < buffer.length && bytes != 0; i++) {
+      int t;
+      if (bytes >= 4) {
+        t = r.nextInt(5);
+      } else if (bytes >= 3) {
+        t = r.nextInt(4);
+      } else if (bytes >= 2) {
+        t = r.nextInt(2);
+      } else {
+        t = 0;
+      }
+      if (t == 0) {
+        buffer[i] = (char) r.nextInt(0x80);
+        bytes--;
+      } else if (1 == t) {
+        buffer[i] = (char) nextInt(r, 0x80, 0x7ff);
+        bytes -= 2;
+      } else if (2 == t) {
+        buffer[i] = (char) nextInt(r, 0x800, 0xd7ff);
+        bytes -= 3;
+      } else if (3 == t) {
+        buffer[i] = (char) nextInt(r, 0xe000, 0xffff);
+        bytes -= 3;
+      } else if (4 == t) {
         // Make a surrogate pair
         // High surrogate
         buffer[i++] = (char) nextInt(r, 0xd800, 0xdbff);
         // Low surrogate
         buffer[i] = (char) nextInt(r, 0xdc00, 0xdfff);
+        bytes -= 4;
       }
-      else if (t <= 1) buffer[i] = (char) r.nextInt(0x80);
-      else if (2 == t) buffer[i] = (char) nextInt(r, 0x80, 0x800);
-      else if (3 == t) buffer[i] = (char) nextInt(r, 0x800, 0xd7ff);
-      else if (4 == t) buffer[i] = (char) nextInt(r, 0xe000, 0xffff);
+
     }
-    return new String(buffer, 0, end);
+    return new String(buffer, 0, i);
   }
 
   public static CodecProvider alwaysCodec(final Codec c) {
