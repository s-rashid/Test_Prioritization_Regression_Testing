diff --git a/modules/analysis/common/src/java/org/apache/lucene/analysis/pt/PortugueseMinimalStemmer.java b/modules/analysis/common/src/java/org/apache/lucene/analysis/pt/PortugueseMinimalStemmer.java
index 7ce19e3..01342ce 100644
--- a/modules/analysis/common/src/java/org/apache/lucene/analysis/pt/PortugueseMinimalStemmer.java
+++ b/modules/analysis/common/src/java/org/apache/lucene/analysis/pt/PortugueseMinimalStemmer.java
@@ -1,10 +1,5 @@
 package org.apache.lucene.analysis.pt;
 
-import java.util.Arrays;
-
-import org.apache.lucene.analysis.util.CharArraySet;
-import org.apache.lucene.util.Version;
-
 /**
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
@@ -31,89 +26,14 @@ import org.apache.lucene.util.Version;
  * which is just the plural reduction step of the RSLP
  * algorithm from <i>A Stemming Algorithmm for the Portuguese Language</i>,
  * Orengo et al.
+ * @see RSLPStemmerBase
  */
-public class PortugueseMinimalStemmer {
+public class PortugueseMinimalStemmer extends RSLPStemmerBase {
   
-  private static final CharArraySet excIS = new CharArraySet(Version.LUCENE_31,
-      Arrays.asList("lápis", "cais", "mais", "crúcis", "biquínis", "pois", 
-          "depois","dois","leis"),
-      false);
-  
-  private static final CharArraySet excS = new CharArraySet(Version.LUCENE_31,
-      Arrays.asList("aliás", "pires", "lápis", "cais", "mais", "mas", "menos",
-          "férias", "fezes", "pêsames", "crúcis", "gás", "atrás", "moisés",
-          "através", "convés", "ês", "país", "após", "ambas", "ambos",
-          "messias", "depois"), 
-      false);
+  private static final Step pluralStep = 
+    parse(PortugueseMinimalStemmer.class, "portuguese.rslp").get("Plural");
   
   public int stem(char s[], int len) {
-    if (len < 3 || s[len-1] != 's')
-      return len;
-    
-    if (s[len-2] == 'n') {
-      len--;
-      s[len-1] = 'm';
-      return len;
-    }
-    
-    if (len >= 6 && s[len-3] == 'õ' && s[len-2] == 'e') {
-      len--;
-      s[len-2] = 'ã';
-      s[len-1] = 'o';
-      return len;
-    }
-      
-    if (len >= 4 && s[len-3] == 'ã' && s[len-2] == 'e')
-      if (!(len == 4 && s[0] == 'm')) {
-        len--;
-        s[len-1] = 'o';
-        return len;
-      }
-    
-    if (len >= 4 && s[len-2] == 'i') {
-      if (s[len-3] == 'a')
-        if (!(len == 4 && (s[0] == 'c' || s[0] == 'm'))) {
-          len--;
-          s[len-1] = 'l';
-          return len;
-        }
-   
-      if (len >= 5 && s[len-3] == 'é') {
-        len--;
-        s[len-2] = 'e';
-        s[len-1] = 'l';
-        return len;
-      }
-    
-      if (len >= 5 && s[len-3] == 'e') {
-        len--;
-        s[len-1] = 'l';
-        return len;
-      }
-    
-      if (len >= 5 && s[len-3] == 'ó') {
-        len--;
-        s[len-2] = 'o';
-        s[len-1] = 'l';
-        return len;
-      }
-  
-      if (!excIS.contains(s, 0, len)) {
-        s[len-1] = 'l';
-        return len;
-      }
-    }
-    
-    if (len >= 6 && s[len-3] == 'l' && s[len-2] == 'e')
-      return len - 2;
-    
-    if (len >= 6 && s[len-3] == 'r' && s[len-2] == 'e')
-      if (!(len == 7 && s[0] == 'á' && s[1] == 'r' && s[2] == 'v' && s[3] == 'o'))
-        return len - 2;
-      
-    if (excS.contains(s, 0, len))
-      return len;
-    else
-      return len-1;
+    return pluralStep.apply(s, len);
   }
 }
