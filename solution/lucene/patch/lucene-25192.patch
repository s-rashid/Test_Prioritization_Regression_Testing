diff --git a/lucene/src/java/org/apache/lucene/index/values/IntsImpl.java b/lucene/src/java/org/apache/lucene/index/values/IntsImpl.java
index 4921f4b..a525df0 100644
--- a/lucene/src/java/org/apache/lucene/index/values/IntsImpl.java
+++ b/lucene/src/java/org/apache/lucene/index/values/IntsImpl.java
@@ -21,19 +21,24 @@ import java.util.Collection;
 import java.util.concurrent.atomic.AtomicLong;
 
 import org.apache.lucene.index.IndexFileNames;
+import org.apache.lucene.index.values.IndexDocValuesArray;
+import org.apache.lucene.index.values.IndexDocValues.Source;
+import org.apache.lucene.index.values.IndexDocValues.SourceEnum;
+import org.apache.lucene.index.values.IndexDocValuesArray.ByteValues;
+import org.apache.lucene.index.values.IndexDocValuesArray.IntValues;
+import org.apache.lucene.index.values.IndexDocValuesArray.LongValues;
+import org.apache.lucene.index.values.IndexDocValuesArray.ShortValues;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.IndexInput;
 import org.apache.lucene.store.IndexOutput;
-import org.apache.lucene.util.ArrayUtil;
 import org.apache.lucene.util.AttributeSource;
 import org.apache.lucene.util.CodecUtil;
 import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LongsRef;
-import org.apache.lucene.util.RamUsageEstimator;
 import org.apache.lucene.util.packed.PackedInts;
 
 /**
- * Stores ints packed with fixed-bit precision.
+ * Stores ints packed and fixed with fixed-bit precision.
  * 
  * @lucene.experimental
  * */
@@ -41,45 +46,59 @@ class IntsImpl {
 
   private static final String CODEC_NAME = "Ints";
   private static final byte PACKED = 0x00;
-  private static final byte FIXED = 0x01;
-
+  private static final byte FIXED_64 = 0x01;
+  private static final byte FIXED_32 = 0x02;
+  private static final byte FIXED_16 = 0x03;
+  private static final byte FIXED_8 = 0x04;
+  
   static final int VERSION_START = 0;
   static final int VERSION_CURRENT = VERSION_START;
 
   static class IntsWriter extends Writer {
 
-    // TODO: can we bulkcopy this on a merge?
+    // TODO: optimize merging here!!
     private LongsRef intsRef;
-    private long[] docToValue;
+    private final IndexDocValuesArray array;
     private long minValue;
     private long maxValue;
     private boolean started;
     private final String id;
     private int lastDocId = -1;
-    private IndexOutput datOut;
+    private final Directory dir;
+    private final byte typeOrd;
+    
 
-    protected IntsWriter(Directory dir, String id, AtomicLong bytesUsed)
-        throws IOException {
+    protected IntsWriter(Directory dir, String id, AtomicLong bytesUsed,
+        ValueType valueType) throws IOException {
       super(bytesUsed);
-      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, "",
-          DATA_EXTENSION));
-      boolean success = false;
-      try {
-        CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);
-        this.id = id;
-        docToValue = new long[1];
-        bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_LONG); // TODO the
-                                                               // bitset
-                                                               // needs memory
-                                                               // too
-        success = true;
-      } finally {
-        if (!success) {
-          datOut.close();
-        }
+      this.dir = dir;
+      this.id = id;
+      switch (valueType) {
+      case FIXED_INTS_16:
+        array= new ShortValues(bytesUsed);
+        typeOrd = FIXED_16;
+        break;
+      case FIXED_INTS_32:
+        array = new IntValues(bytesUsed);
+        typeOrd = FIXED_32;
+        break;
+      case FIXED_INTS_64:
+        array = new LongValues(bytesUsed);
+        typeOrd = FIXED_64;
+        break;
+      case FIXED_INTS_8:
+        array = new ByteValues(bytesUsed);
+        typeOrd = FIXED_8;
+        break;
+      case VAR_INTS:
+        array = new LongValues(bytesUsed);
+        typeOrd = PACKED;
+        break;
+      default:
+        throw new IllegalStateException("unknown type " + valueType);
       }
     }
-
+    
     @Override
     public void add(int docID, long v) throws IOException {
       assert lastDocId < docID;
@@ -94,65 +113,60 @@ class IntsImpl {
         }
       }
       lastDocId = docID;
-
-      if (docID >= docToValue.length) {
-        final long len = docToValue.length;
-        docToValue = ArrayUtil.grow(docToValue, 1 + docID);
-        bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_LONG
-            * ((docToValue.length) - len));
-      }
-      docToValue[docID] = v;
+      array.set(docID, v);
     }
 
     @Override
     public void finish(int docCount) throws IOException {
+      IndexOutput datOut = null;
+      boolean success = false;
       try {
+        datOut = dir.createOutput(IndexFileNames.segmentFileName(id, "",
+            DATA_EXTENSION));
+        CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);
         if (!started) {
           minValue = maxValue = 0;
         }
-        // if we exceed the range of positive longs we must switch to fixed ints
-        if ((maxValue - minValue) < (((long)1) << 63) && (maxValue - minValue) >= 0) {
-          writePackedInts(docCount);
-        } else {
-          writeFixedInts(docCount);
+        byte headerType = typeOrd;
+        if (typeOrd == PACKED) {
+          final long delta = maxValue - minValue;
+          // if we exceed the range of positive longs we must switch to fixed ints
+          if (delta <= ( maxValue >= 0 && minValue <= 0 ? Long.MAX_VALUE : Long.MAX_VALUE -1) &&  delta >= 0) {
+            writePackedInts(datOut, docCount);
+            return;
+          } 
+          headerType = FIXED_64;
         }
-
+        datOut.writeByte(headerType);
+        array.write(datOut, docCount);
+        success = true;
       } finally {
-        datOut.close();
-        bytesUsed
-            .addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG * docToValue.length));
-        docToValue = null;
-      }
-    }
-
-    private void writeFixedInts(int docCount) throws IOException {
-      datOut.writeByte(FIXED);
-      datOut.writeInt(docCount);
-      for (int i = 0; i < docToValue.length; i++) {
-        datOut.writeLong(docToValue[i]); // write full array - we use 0 as default
-      }
-      for (int i = docToValue.length; i < docCount; i++) {
-        datOut.writeLong(0); // fill with defaults values
+        IOUtils.closeSafely(!success, datOut);
+        array.clear();
       }
     }
 
-    private void writePackedInts(int docCount) throws IOException {
+    private void writePackedInts(IndexOutput datOut, int docCount) throws IOException {
       datOut.writeByte(PACKED);
       datOut.writeLong(minValue);
+      assert array.type() == ValueType.FIXED_INTS_64;
+      final long[] docToValue = (long[])array.getArray();
       // write a default value to recognize docs without a value for that
       // field
-      final long defaultValue = maxValue>= 0 && minValue <=0 ? 0-minValue : ++maxValue-minValue;
+      final long defaultValue = maxValue >= 0 && minValue <= 0 ? 0 - minValue
+          : ++maxValue - minValue;
       datOut.writeLong(defaultValue);
       PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,
-          PackedInts.bitsRequired(maxValue-minValue));
-      final int limit = docToValue.length > docCount ? docCount : docToValue.length;
+          PackedInts.bitsRequired(maxValue - minValue));
+      final int limit = docToValue.length > docCount ? docCount
+          : docToValue.length;
       for (int i = 0; i < limit; i++) {
         w.add(docToValue[i] == 0 ? defaultValue : docToValue[i] - minValue);
       }
       for (int i = limit; i < docCount; i++) {
         w.add(defaultValue);
       }
-      
+
       w.finish();
     }
 
@@ -183,7 +197,7 @@ class IntsImpl {
    */
   static class IntsReader extends IndexDocValues {
     private final IndexInput datIn;
-    private final boolean packed;
+    private final byte type;
 
     protected IntsReader(Directory dir, String id) throws IOException {
       datIn = dir.openInput(IndexFileNames.segmentFileName(id, "",
@@ -191,7 +205,7 @@ class IntsImpl {
       boolean success = false;
       try {
         CodecUtil.checkHeader(datIn, CODEC_NAME, VERSION_START, VERSION_START);
-        packed = PACKED == datIn.readByte();
+        type = datIn.readByte();
         success = true;
       } finally {
         if (!success) {
@@ -206,100 +220,21 @@ class IntsImpl {
      */
     @Override
     public Source load() throws IOException {
-      final IndexInput input = (IndexInput) datIn.clone();
       boolean success = false;
+      final Source source;
+      IndexInput input = null;
       try {
-        final Source source = packed ? new PackedIntsSource(input)
-            : new FixedIntsSource(input);
+        input = (IndexInput) datIn.clone();
+        input.seek(CodecUtil.headerLength(CODEC_NAME) + 1);
+        source  = loadFixedSource(type, input);
         success = true;
         return source;
       } finally {
         if (!success) {
-          IOUtils.closeSafely(true, datIn);
+          IOUtils.closeSafely(true, input, datIn);
         }
       }
     }
-    
-    private static class FixedIntsSource extends Source {
-      private final long[] values;
-      public FixedIntsSource(IndexInput dataIn) throws IOException {
-        dataIn.seek(CodecUtil.headerLength(CODEC_NAME) + 1);
-        final int numDocs = dataIn.readInt();
-        values = new long[numDocs];
-        for (int i = 0; i < values.length; i++) {
-          values[i] = dataIn.readLong();
-        }
-      }
-      
-      @Override
-      public long getInt(int docID) {
-        assert docID >= 0 && docID < values.length;
-        return values[docID];
-      }
-
-      @Override
-      public ValueType type() {
-        return ValueType.INTS;
-      }
-
-      @Override
-      public ValuesEnum getEnum(AttributeSource attrSource)
-          throws IOException {
-        return new SourceEnum(attrSource, type(), this, values.length) {
-          
-          @Override
-          public int advance(int target) throws IOException {
-            if (target >= numDocs)
-              return pos = NO_MORE_DOCS;
-            intsRef.ints[intsRef.offset] = values[target];
-            return pos = target;
-          }
-        };
-      }
-      
-    }
-
-    private static class PackedIntsSource extends Source {
-      private final long minValue;
-      private final long defaultValue;
-      private final PackedInts.Reader values;
-
-      public PackedIntsSource(IndexInput dataIn) throws IOException {
-        dataIn.seek(CodecUtil.headerLength(CODEC_NAME) + 1);
-        minValue = dataIn.readLong();
-        defaultValue = dataIn.readLong();
-        values = PackedInts.getReader(dataIn);
-      }
-
-      @Override
-      public long getInt(int docID) {
-        // TODO -- can we somehow avoid 2X method calls
-        // on each get? must push minValue down, and make
-        // PackedInts implement Ints.Source
-        assert docID >= 0;
-        final long value = values.get(docID);
-        return value == defaultValue ? 0 : minValue + value;
-      }
-
-      @Override
-      public ValuesEnum getEnum(AttributeSource attrSource)
-          throws IOException {
-        return new SourceEnum(attrSource, type(), this, values.size()) {
-          @Override
-          public int advance(int target) throws IOException {
-            if (target >= numDocs)
-              return pos = NO_MORE_DOCS;
-            intsRef.ints[intsRef.offset] = source.getInt(target);
-            return pos = target;
-          }
-        };
-      }
-
-      @Override
-      public ValueType type() {
-        return ValueType.INTS;
-      }
-    }
 
     @Override
     public void close() throws IOException {
@@ -312,8 +247,8 @@ class IntsImpl {
       final IndexInput input = (IndexInput) datIn.clone();
       boolean success = false;
       try {
-        ValuesEnum inst = packed ? new PackedIntsEnumImpl(source, input)
-            : new FixedIntsEnumImpl(source, input);
+        input.seek(CodecUtil.headerLength(CODEC_NAME) + 1);
+        final ValuesEnum inst = directEnum(type, source, input);
         success = true;
         return inst;
       } finally {
@@ -325,77 +260,108 @@ class IntsImpl {
 
     @Override
     public ValueType type() {
-      return ValueType.INTS;
+      return ValueType.VAR_INTS;
     }
-
   }
-
-  private static final class PackedIntsEnumImpl extends ValuesEnum {
-    private final PackedInts.ReaderIterator ints;
-    private long minValue;
-    private final IndexInput dataIn;
+  
+  private static ValuesEnum directEnum(byte ord, AttributeSource attrSource, IndexInput input) throws IOException {
+    switch (ord) {
+    case FIXED_16:
+      return new ShortValues((AtomicLong)null).getDirectEnum(attrSource, input);
+    case FIXED_32:
+      return new IntValues((AtomicLong)null).getDirectEnum(attrSource, input);
+    case FIXED_64:
+      return new LongValues((AtomicLong)null).getDirectEnum(attrSource, input);
+    case FIXED_8:
+      return new ByteValues((AtomicLong)null).getDirectEnum(attrSource, input);
+    case PACKED:
+      return new PackedIntsEnumImpl(attrSource, input);
+    default:
+      throw new IllegalStateException("unknown type ordinal " + ord);
+    }
+  }
+  
+  private static IndexDocValues.Source loadFixedSource(byte ord, IndexInput input) throws IOException {
+    switch (ord) {
+    case FIXED_16:
+      return new ShortValues(input);
+    case FIXED_32:
+      return new IntValues(input);
+    case FIXED_64:
+      return new LongValues(input);
+    case FIXED_8:
+      return new ByteValues(input);
+    case PACKED:
+      return new PackedIntsSource(input);
+    default:
+      throw new IllegalStateException("unknown type ordinal " + ord);
+    }
+  }
+  
+  static class PackedIntsSource extends Source {
+    private final long minValue;
     private final long defaultValue;
-    private final int maxDoc;
-    private int pos = -1;
+    private final PackedInts.Reader values;
 
-    private PackedIntsEnumImpl(AttributeSource source, IndexInput dataIn)
-        throws IOException {
-      super(source, ValueType.INTS);
-      intsRef.offset = 0;
-      this.dataIn = dataIn;
-      dataIn.seek(CodecUtil.headerLength(CODEC_NAME) + 1);
+    public PackedIntsSource(IndexInput dataIn) throws IOException {
+      
       minValue = dataIn.readLong();
       defaultValue = dataIn.readLong();
-      this.ints = PackedInts.getReaderIterator(dataIn);
-      maxDoc = ints.size();
-    }
-
-    @Override
-    public void close() throws IOException {
-      ints.close();
-      dataIn.close();
+      values = PackedInts.getReader(dataIn);
     }
 
     @Override
-    public int advance(int target) throws IOException {
-      if (target >= maxDoc) {
-        return pos = NO_MORE_DOCS;
-      }
-      final long val = ints.advance(target);
-      intsRef.ints[intsRef.offset] = val == defaultValue ? 0 : minValue + val;
-      return pos = target;
+    public long getInt(int docID) {
+      // TODO -- can we somehow avoid 2X method calls
+      // on each get? must push minValue down, and make
+      // PackedInts implement Ints.Source
+      assert docID >= 0;
+      final long value = values.get(docID);
+      return value == defaultValue ? 0 : minValue + value;
     }
 
     @Override
-    public int docID() {
-      return pos;
+    public ValuesEnum getEnum(AttributeSource attrSource) throws IOException {
+      return new SourceEnum(attrSource, type(), this, values.size()) {
+        @Override
+        public int advance(int target) throws IOException {
+          if (target >= numDocs)
+            return pos = NO_MORE_DOCS;
+          intsRef.ints[intsRef.offset] = source.getInt(target);
+          return pos = target;
+        }
+      };
     }
 
     @Override
-    public int nextDoc() throws IOException {
-      if (pos >= maxDoc) {
-        return pos = NO_MORE_DOCS;
-      }
-      return advance(pos + 1);
+    public ValueType type() {
+      return ValueType.VAR_INTS;
     }
   }
-  
-  private static final class FixedIntsEnumImpl extends ValuesEnum {
+
+
+  private static final class PackedIntsEnumImpl extends ValuesEnum {
+    private final PackedInts.ReaderIterator ints;
+    private long minValue;
     private final IndexInput dataIn;
+    private final long defaultValue;
     private final int maxDoc;
     private int pos = -1;
 
-    private FixedIntsEnumImpl(AttributeSource source, IndexInput dataIn)
+    private PackedIntsEnumImpl(AttributeSource source, IndexInput dataIn)
         throws IOException {
-      super(source, ValueType.INTS);
+      super(source, ValueType.VAR_INTS);
       intsRef.offset = 0;
       this.dataIn = dataIn;
-      dataIn.seek(CodecUtil.headerLength(CODEC_NAME) + 1);
-      maxDoc = dataIn.readInt();
+      minValue = dataIn.readLong();
+      defaultValue = dataIn.readLong();
+      this.ints = PackedInts.getReaderIterator(dataIn);
+      maxDoc = ints.size();
     }
 
     @Override
     public void close() throws IOException {
+      ints.close();
       dataIn.close();
     }
 
@@ -404,11 +370,8 @@ class IntsImpl {
       if (target >= maxDoc) {
         return pos = NO_MORE_DOCS;
       }
-      assert target > pos;
-      if (target > pos+1) {
-        dataIn.seek(dataIn.getFilePointer() + ((target - pos - 1) * 8));
-      }
-      intsRef.ints[intsRef.offset] = dataIn.readLong();
+      final long val = ints.advance(target);
+      intsRef.ints[intsRef.offset] = val == defaultValue ? 0 : minValue + val;
       return pos = target;
     }
 
@@ -425,5 +388,7 @@ class IntsImpl {
       return advance(pos + 1);
     }
   }
+
  
+
 }
\ No newline at end of file
