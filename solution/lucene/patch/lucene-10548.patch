diff --git a/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase.java b/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase.java
index a814e02..c19588e 100644
--- a/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase.java
+++ b/solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/AbstractDataImportHandlerTestCase.java
@@ -16,11 +16,14 @@
  */
 package org.apache.solr.handler.dataimport;
 
+import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.core.SolrCore;
 import org.apache.solr.request.LocalSolrQueryRequest;
-import org.apache.solr.util.AbstractSolrTestCase;
 import org.apache.solr.common.util.NamedList;
+import org.junit.After;
+import org.junit.Before;
 
+import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.File;
 import java.util.HashMap;
@@ -38,14 +41,16 @@ import java.util.Map;
  * @since solr 1.3
  */
 public abstract class AbstractDataImportHandlerTestCase extends
-        AbstractSolrTestCase {
+        SolrTestCaseJ4 {
 
   @Override
+  @Before
   public void setUp() throws Exception {
     super.setUp();
   }
 
   @Override
+  @After
   public void tearDown() throws Exception {
     // remove dataimport.properties
     File f = new File("solr/conf/dataimport.properties");
@@ -140,6 +145,29 @@ public abstract class AbstractDataImportHandlerTestCase extends
     return result;
   }
 
+  public static File createFile(File tmpdir, String name, byte[] content,
+                                boolean changeModifiedTime) throws IOException {
+    File file = new File(tmpdir.getAbsolutePath() + File.separator + name);
+    file.deleteOnExit();
+    FileOutputStream f = new FileOutputStream(file);
+    f.write(content);
+    f.close();
+    if (changeModifiedTime)
+      file.setLastModified(System.currentTimeMillis() - 3600000);
+    return file;
+  }
+  
+  public static Map<String, String> getField(String col, String type,
+                                             String re, String srcCol, String splitBy) {
+    HashMap<String, String> vals = new HashMap<String, String>();
+    vals.put("column", col);
+    vals.put("type", type);
+    vals.put("regex", re);
+    vals.put("sourceColName", srcCol);
+    vals.put("splitBy", splitBy);
+    return vals;
+  }
+  
   static class TestContext extends Context {
     private final Map<String, String> entityAttrs;
     private final Context delegate;
