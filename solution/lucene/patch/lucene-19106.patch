diff --git a/solr/src/java/org/apache/solr/search/function/OrdFieldSource.java b/solr/src/java/org/apache/solr/search/function/OrdFieldSource.java
index 7c24957..09435ac 100644
--- a/solr/src/java/org/apache/solr/search/function/OrdFieldSource.java
+++ b/solr/src/java/org/apache/solr/search/function/OrdFieldSource.java
@@ -52,11 +52,13 @@ public class OrdFieldSource extends ValueSource {
     this.field = field;
   }
 
+  @Override
   public String description() {
     return "ord(" + field + ')';
   }
 
 
+  @Override
   public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final int off = readerContext.docBase;
     final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader;
@@ -66,35 +68,43 @@ public class OrdFieldSource extends ValueSource {
         return readableValue;
       }
       
+      @Override
       public float floatVal(int doc) {
         return (float)sindex.getOrd(doc+off);
       }
 
+      @Override
       public int intVal(int doc) {
         return sindex.getOrd(doc+off);
       }
 
+      @Override
       public long longVal(int doc) {
         return (long)sindex.getOrd(doc+off);
       }
 
+      @Override
       public double doubleVal(int doc) {
         return (double)sindex.getOrd(doc+off);
       }
 
+      @Override
       public int ordVal(int doc) {
         return sindex.getOrd(doc+off);
       }
 
+      @Override
       public int numOrd() {
         return sindex.numOrd();
       }
 
+      @Override
       public String strVal(int doc) {
         // the string value of the ordinal, not the string itself
         return Integer.toString(sindex.getOrd(doc+off));
       }
 
+      @Override
       public String toString(int doc) {
         return description() + '=' + intVal(doc);
       }
@@ -119,11 +129,13 @@ public class OrdFieldSource extends ValueSource {
     };
   }
 
+  @Override
   public boolean equals(Object o) {
     return o.getClass() == OrdFieldSource.class && this.field.equals(((OrdFieldSource)o).field);
   }
 
   private static final int hcode = OrdFieldSource.class.hashCode();
+  @Override
   public int hashCode() {
     return hcode + field.hashCode();
   };
