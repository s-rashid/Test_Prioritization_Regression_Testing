diff --git a/solr/src/java/org/apache/solr/schema/SortableDoubleField.java b/solr/src/java/org/apache/solr/schema/SortableDoubleField.java
index b12858b..bb57454 100644
--- a/solr/src/java/org/apache/solr/schema/SortableDoubleField.java
+++ b/solr/src/java/org/apache/solr/schema/SortableDoubleField.java
@@ -40,10 +40,13 @@ import java.io.IOException;
  * 
  * @deprecated use {@link DoubleField} or {@link TrieDoubleField} - will be removed in 5.x
  */
+@Deprecated
 public class SortableDoubleField extends FieldType {
+  @Override
   protected void init(IndexSchema schema, Map<String,String> args) {
   }
 
+  @Override
   public SortField getSortField(SchemaField field,boolean reverse) {
     return getStringSort(field,reverse);
   }
@@ -53,10 +56,12 @@ public class SortableDoubleField extends FieldType {
     return new SortableDoubleFieldSource(field.name);
   }
 
+  @Override
   public String toInternal(String val) {
     return NumberUtils.double2sortableStr(val);
   }
 
+  @Override
   public String toExternal(Fieldable f) {
     return indexedToReadable(f.stringValue());
   }
@@ -66,6 +71,7 @@ public class SortableDoubleField extends FieldType {
     return NumberUtils.SortableStr2double(f.stringValue());
   }
   
+  @Override
   public String indexedToReadable(String indexedForm) {
     return NumberUtils.SortableStr2doubleStr(indexedForm);
   }
@@ -76,6 +82,7 @@ public class SortableDoubleField extends FieldType {
     out.write( indexedToReadable(ByteUtils.UTF8toUTF16(input)) );
   }
 
+  @Override
   public void write(TextResponseWriter writer, String name, Fieldable f) throws IOException {
     String sval = f.stringValue();
     writer.writeDouble(name, NumberUtils.SortableStr2double(sval));
@@ -97,41 +104,50 @@ class SortableDoubleFieldSource extends FieldCacheSource {
     this.defVal = defVal;
   }
 
+  @Override
   public String description() {
     return "sdouble(" + field + ')';
   }
 
+  @Override
   public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
     final double def = defVal;
 
     return new StringIndexDocValues(this, readerContext, field) {
       private final BytesRef spare = new BytesRef();
 
+      @Override
       protected String toTerm(String readableValue) {
         return NumberUtils.double2sortableStr(readableValue);
       }
 
+      @Override
       public float floatVal(int doc) {
         return (float)doubleVal(doc);
       }
 
+      @Override
       public int intVal(int doc) {
         return (int)doubleVal(doc);
       }
 
+      @Override
       public long longVal(int doc) {
         return (long)doubleVal(doc);
       }
 
+      @Override
       public double doubleVal(int doc) {
         int ord=termsIndex.getOrd(doc);
         return ord==0 ? def  : NumberUtils.SortableStr2double(termsIndex.lookup(ord, spare));
       }
 
+      @Override
       public String strVal(int doc) {
         return Double.toString(doubleVal(doc));
       }
 
+      @Override
       public String toString(int doc) {
         return description() + '=' + doubleVal(doc);
       }
@@ -162,6 +178,7 @@ class SortableDoubleFieldSource extends FieldCacheSource {
     };
   }
 
+  @Override
   public boolean equals(Object o) {
     return o instanceof SortableDoubleFieldSource
             && super.equals(o)
@@ -169,6 +186,7 @@ class SortableDoubleFieldSource extends FieldCacheSource {
   }
 
   private static int hcode = SortableDoubleFieldSource.class.hashCode();
+  @Override
   public int hashCode() {
     long bits = Double.doubleToLongBits(defVal);
     int ibits = (int)(bits ^ (bits>>>32));  // mix upper bits into lower.
