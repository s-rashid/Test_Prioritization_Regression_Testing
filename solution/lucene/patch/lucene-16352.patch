diff --git a/lucene/src/test/org/apache/lucene/analysis/TestNumericTokenStream.java b/lucene/src/test/org/apache/lucene/analysis/TestNumericTokenStream.java
index e86307a..586848b 100644
--- a/lucene/src/test/org/apache/lucene/analysis/TestNumericTokenStream.java
+++ b/lucene/src/test/org/apache/lucene/analysis/TestNumericTokenStream.java
@@ -38,13 +38,13 @@ public class TestNumericTokenStream extends BaseTokenStreamTestCase {
     final BytesRef bytes = new BytesRef();
     stream.reset();
     assertEquals(64, numericAtt.getValueSize());
-    assertEquals(lvalue, numericAtt.getRawValue());
     for (int shift=0; shift<64; shift+=NumericUtils.PRECISION_STEP_DEFAULT) {
       assertTrue("New token is available", stream.incrementToken());
       assertEquals("Shift value wrong", shift, numericAtt.getShift());
       final int hash = bytesAtt.toBytesRef(bytes);
       assertEquals("Hash incorrect", bytes.hashCode(), hash);
       assertEquals("Term is incorrectly encoded", lvalue & ~((1L << shift) - 1L), NumericUtils.prefixCodedToLong(bytes));
+      assertEquals("Term raw value is incorrectly encoded", lvalue & ~((1L << shift) - 1L), numericAtt.getRawValue());
       assertEquals("Type incorrect", (shift == 0) ? NumericTokenStream.TOKEN_TYPE_FULL_PREC : NumericTokenStream.TOKEN_TYPE_LOWER_PREC, typeAtt.type());
     }
     assertFalse("More tokens available", stream.incrementToken());
@@ -61,13 +61,13 @@ public class TestNumericTokenStream extends BaseTokenStreamTestCase {
     final BytesRef bytes = new BytesRef();
     stream.reset();
     assertEquals(32, numericAtt.getValueSize());
-    assertEquals(ivalue, numericAtt.getRawValue());
     for (int shift=0; shift<32; shift+=NumericUtils.PRECISION_STEP_DEFAULT) {
       assertTrue("New token is available", stream.incrementToken());
       assertEquals("Shift value wrong", shift, numericAtt.getShift());
       final int hash = bytesAtt.toBytesRef(bytes);
       assertEquals("Hash incorrect", bytes.hashCode(), hash);
       assertEquals("Term is incorrectly encoded", ivalue & ~((1 << shift) - 1), NumericUtils.prefixCodedToInt(bytes));
+      assertEquals("Term raw value is incorrectly encoded", ((long) ivalue) & ~((1L << shift) - 1L), numericAtt.getRawValue());
       assertEquals("Type incorrect", (shift == 0) ? NumericTokenStream.TOKEN_TYPE_FULL_PREC : NumericTokenStream.TOKEN_TYPE_LOWER_PREC, typeAtt.type());
     }
     assertFalse("More tokens available", stream.incrementToken());
