diff --git a/lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool.java b/lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool.java
index cba0fc9..b00e85a 100644
--- a/lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool.java
+++ b/lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool.java
@@ -1,6 +1,20 @@
 package org.apache.lucene.index;
-
-import java.util.Iterator;
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
@@ -11,6 +25,7 @@ public class ThreadAffinityDocumentsWriterThreadPool extends DocumentsWriterPerT
 
   public ThreadAffinityDocumentsWriterThreadPool(int maxNumPerThreads) {
     super(maxNumPerThreads);
+    assert getMaxThreadStates() >= 1;
   }
 
   @Override
@@ -21,25 +36,25 @@ public class ThreadAffinityDocumentsWriterThreadPool extends DocumentsWriterPerT
         return threadState;
       }
     }
-
-    // find the state that has minimum amount of threads waiting
-    Iterator<ThreadState> it = getActivePerThreadsIterator();
     ThreadState minThreadState = null;
-    while (it.hasNext()) {
-      ThreadState state = it.next();
-      if (minThreadState == null || state.getQueueLength() < minThreadState.getQueueLength()) {
-        minThreadState = state;
-      }
-    }
-
+    // find the state that has minimum amount of threads waiting
+    minThreadState = minContendedThreadState();
     if (minThreadState == null || minThreadState.hasQueuedThreads()) {
       ThreadState newState = newThreadState();
       if (newState != null) {
         minThreadState = newState;
         threadBindings.put(requestingThread, newState);
+      } else if (minThreadState == null) {
+        /*
+         * no new threadState available we just take the minContented one
+         * This must return a valid thread state since we accessed the 
+         * synced context in newThreadState() above.
+         */
+        minThreadState = minContendedThreadState();
       }
     }
-
+    assert minThreadState != null: "ThreadState is null";
+    
     minThreadState.lock();
     return minThreadState;
   }
@@ -53,4 +68,5 @@ public class ThreadAffinityDocumentsWriterThreadPool extends DocumentsWriterPerT
   public void clearAllThreadBindings() {
     threadBindings.clear();
   }
+  
 }
