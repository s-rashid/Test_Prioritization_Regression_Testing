diff --git a/solr/src/java/org/apache/solr/response/TextResponseWriter.java b/solr/src/java/org/apache/solr/response/TextResponseWriter.java
index 8c7209a..50cb27a 100644
--- a/solr/src/java/org/apache/solr/response/TextResponseWriter.java
+++ b/solr/src/java/org/apache/solr/response/TextResponseWriter.java
@@ -28,16 +28,21 @@ import org.apache.solr.schema.IndexSchema;
 import org.apache.solr.search.DocList;
 import java.io.IOException;
 import java.io.Writer;
-import java.util.Date;
-import java.util.Iterator;
-import java.util.Map;
-import java.util.Set;
+import java.util.*;
 
 /** Base class for text-oriented response writers.
  *
  * @version $Id$
  */
 public abstract class TextResponseWriter {
+
+  // indent up to 40 spaces
+  static final char[] indentChars = new char[81];
+  static {
+    Arrays.fill(indentChars,' ');
+    indentChars[0] = '\n';  // start with a newline
+  }
+
   
   protected final FastWriter writer;
   protected final IndexSchema schema;
@@ -50,6 +55,8 @@ public abstract class TextResponseWriter {
   protected int level;
   protected boolean doIndent;
 
+  protected Calendar cal;  // reusable calendar instance
+
 
   public TextResponseWriter(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) {
     this.writer = FastWriter.wrap(writer);
@@ -63,6 +70,8 @@ public abstract class TextResponseWriter {
     returnFields = rsp.getReturnFields();
   }
 
+
+
   /** done with this ResponseWriter... make sure any buffers are flushed to writer */
   public void close() throws IOException {
     writer.flushBuffer();
@@ -77,10 +86,9 @@ public abstract class TextResponseWriter {
   }
 
   public void indent(int lev) throws IOException {
-    writer.write(XMLWriter.indentChars, 0, Math.min((lev<<1)+1, XMLWriter.indentChars.length));
+    writer.write(indentChars, 0, Math.min((lev<<1)+1, indentChars.length));
   }
 
-
   //
   // Functions to manipulate the current logical nesting level.
   // Any indentation will be partially based on level.
@@ -173,8 +181,10 @@ public abstract class TextResponseWriter {
 
   public abstract void writeMap(String name, Map val, boolean excludeOuter, boolean isFirstVal) throws IOException;
 
-  public abstract void writeArray(String name, Object[] val) throws IOException;
-
+  public void writeArray(String name, Object[] val) throws IOException {
+    writeArray(name, Arrays.asList(val).iterator());
+  }
+  
   public abstract void writeArray(String name, Iterator val) throws IOException;
 
   public abstract void writeNull(String name) throws IOException;
@@ -228,20 +238,65 @@ public abstract class TextResponseWriter {
     }
   }
 
-  public abstract void writeDate(String name, Date val) throws IOException;
 
-  /** if this form of the method is called, val is the Solr ISO8601 based date format */
-  public abstract void writeDate(String name, String val) throws IOException;
+  public void writeDate(String name, Date val) throws IOException {
+    // using a stringBuilder for numbers can be nice since
+    // a temporary string isn't used (it's added directly to the
+    // builder's buffer.
+
+    StringBuilder sb = new StringBuilder();
+    if (cal==null) cal = Calendar.getInstance(TimeZone.getTimeZone("GMT"), Locale.US);
+    cal.setTime(val);
+
+    int i = cal.get(Calendar.YEAR);
+    sb.append(i);
+    sb.append('-');
+    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1
+    if (i<10) sb.append('0');
+    sb.append(i);
+    sb.append('-');
+    i=cal.get(Calendar.DAY_OF_MONTH);
+    if (i<10) sb.append('0');
+    sb.append(i);
+    sb.append('T');
+    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format
+    if (i<10) sb.append('0');
+    sb.append(i);
+    sb.append(':');
+    i=cal.get(Calendar.MINUTE);
+    if (i<10) sb.append('0');
+    sb.append(i);
+    sb.append(':');
+    i=cal.get(Calendar.SECOND);
+    if (i<10) sb.append('0');
+    sb.append(i);
+    i=cal.get(Calendar.MILLISECOND);
+    if (i != 0) {
+      sb.append('.');
+      if (i<100) sb.append('0');
+      if (i<10) sb.append('0');
+      sb.append(i);
+
+      // handle canonical format specifying fractional
+      // seconds shall not end in '0'.  Given the slowness of
+      // integer div/mod, simply checking the last character
+      // is probably the fastest way to check.
+      int lastIdx = sb.length()-1;
+      if (sb.charAt(lastIdx)=='0') {
+        lastIdx--;
+        if (sb.charAt(lastIdx)=='0') {
+          lastIdx--;
+        }
+        sb.setLength(lastIdx+1);
+      }
 
-  public abstract void writeShort(String name, String val) throws IOException;
-
-  public void writeShort(String name, short val) throws IOException{
-    writeShort(name, Short.toString(val));
+    }
+    sb.append('Z');
+    writeDate(name, sb.toString());
   }
+  
 
-  public abstract void writeByte(String name, String s) throws IOException;
+  /** if this form of the method is called, val is the Solr ISO8601 based date format */
+  public abstract void writeDate(String name, String val) throws IOException;
 
-  public void writeByte(String name, byte val) throws IOException{
-    writeByte(name, Byte.toString(val));
-  }
 }
