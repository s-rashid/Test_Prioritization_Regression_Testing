diff --git a/solr/src/java/org/apache/solr/search/SolrIndexSearcher.java b/solr/src/java/org/apache/solr/search/SolrIndexSearcher.java
index fbc4ced..06eaa74 100644
--- a/solr/src/java/org/apache/solr/search/SolrIndexSearcher.java
+++ b/solr/src/java/org/apache/solr/search/SolrIndexSearcher.java
@@ -184,6 +184,7 @@ public class SolrIndexSearcher extends IndexSearcher implements SolrInfoMBean {
   }
 
 
+  @Override
   public String toString() {
     return name;
   }
@@ -207,6 +208,7 @@ public class SolrIndexSearcher extends IndexSearcher implements SolrInfoMBean {
    *
    * In particular, the underlying reader and any cache's in use are closed.
    */
+  @Override
   public void close() throws IOException {
     if (cachingEnabled) {
       StringBuilder sb = new StringBuilder();
@@ -390,6 +392,7 @@ public class SolrIndexSearcher extends IndexSearcher implements SolrInfoMBean {
   /**
    * Retrieve the {@link Document} instance corresponding to the document id.
    */
+  @Override
   public Document doc(int i) throws IOException {
     return doc(i, (Set<String>)null);
   }
@@ -398,6 +401,7 @@ public class SolrIndexSearcher extends IndexSearcher implements SolrInfoMBean {
    * This method does not currently use the Solr document cache.
    * 
    * @see IndexReader#document(int, FieldSelector) */
+  @Override
   public Document doc(int n, FieldSelector fieldSelector) throws IOException {
     return getIndexReader().document(n, fieldSelector);
   }
@@ -1129,13 +1133,17 @@ public class SolrIndexSearcher extends IndexSearcher implements SolrInfoMBean {
 
       if (!needScores) {
         collector = new Collector () {
+          @Override
           public void setScorer(Scorer scorer) throws IOException {
           }
+          @Override
           public void collect(int doc) throws IOException {
             numHits[0]++;
           }
+          @Override
           public void setNextReader(AtomicReaderContext context) throws IOException {
           }
+          @Override
           public boolean acceptsDocsOutOfOrder() {
             return true;
           }
@@ -1143,16 +1151,20 @@ public class SolrIndexSearcher extends IndexSearcher implements SolrInfoMBean {
       } else {
         collector = new Collector() {
           Scorer scorer;
+          @Override
           public void setScorer(Scorer scorer) throws IOException {
             this.scorer = scorer;
           }
+          @Override
           public void collect(int doc) throws IOException {
             numHits[0]++;
             float score = scorer.score();
             if (score > topscore[0]) topscore[0]=score;            
           }
+          @Override
           public void setNextReader(AtomicReaderContext context) throws IOException {
           }
+          @Override
           public boolean acceptsDocsOutOfOrder() {
             return true;
           }
@@ -1250,16 +1262,20 @@ public class SolrIndexSearcher extends IndexSearcher implements SolrInfoMBean {
        } else {
          collector = setCollector = new DocSetDelegateCollector(smallSetSize, maxDoc, new Collector() {
            Scorer scorer;
-           public void setScorer(Scorer scorer) throws IOException {
+           @Override
+          public void setScorer(Scorer scorer) throws IOException {
              this.scorer = scorer;
            }
-           public void collect(int doc) throws IOException {
+           @Override
+          public void collect(int doc) throws IOException {
              float score = scorer.score();
              if (score > topscore[0]) topscore[0]=score;
            }
-           public void setNextReader(AtomicReaderContext context) throws IOException {
+           @Override
+          public void setNextReader(AtomicReaderContext context) throws IOException {
            }
-           public boolean acceptsDocsOutOfOrder() {
+           @Override
+          public boolean acceptsDocsOutOfOrder() {
              return false;
            }
          });
