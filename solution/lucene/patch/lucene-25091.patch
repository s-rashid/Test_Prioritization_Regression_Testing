diff --git a/lucene/contrib/misc/src/test/org/apache/lucene/index/codecs/appending/TestAppendingCodec.java b/lucene/contrib/misc/src/test/org/apache/lucene/index/codecs/appending/TestAppendingCodec.java
index 125cc18..c7b55f1 100644
--- a/lucene/contrib/misc/src/test/org/apache/lucene/index/codecs/appending/TestAppendingCodec.java
+++ b/lucene/contrib/misc/src/test/org/apache/lucene/index/codecs/appending/TestAppendingCodec.java
@@ -154,14 +154,14 @@ public class TestAppendingCodec extends LuceneTestCase {
     Terms terms = fields.terms("f");
     assertNotNull(terms);
     TermsEnum te = terms.iterator();
-    assertEquals(SeekStatus.FOUND, te.seek(new BytesRef("quick")));
-    assertEquals(SeekStatus.FOUND, te.seek(new BytesRef("brown")));
-    assertEquals(SeekStatus.FOUND, te.seek(new BytesRef("fox")));
-    assertEquals(SeekStatus.FOUND, te.seek(new BytesRef("jumped")));
-    assertEquals(SeekStatus.FOUND, te.seek(new BytesRef("over")));
-    assertEquals(SeekStatus.FOUND, te.seek(new BytesRef("lazy")));
-    assertEquals(SeekStatus.FOUND, te.seek(new BytesRef("dog")));
-    assertEquals(SeekStatus.FOUND, te.seek(new BytesRef("the")));
+    assertEquals(SeekStatus.FOUND, te.seekCeil(new BytesRef("quick")));
+    assertEquals(SeekStatus.FOUND, te.seekCeil(new BytesRef("brown")));
+    assertEquals(SeekStatus.FOUND, te.seekCeil(new BytesRef("fox")));
+    assertEquals(SeekStatus.FOUND, te.seekCeil(new BytesRef("jumped")));
+    assertEquals(SeekStatus.FOUND, te.seekCeil(new BytesRef("over")));
+    assertEquals(SeekStatus.FOUND, te.seekCeil(new BytesRef("lazy")));
+    assertEquals(SeekStatus.FOUND, te.seekCeil(new BytesRef("dog")));
+    assertEquals(SeekStatus.FOUND, te.seekCeil(new BytesRef("the")));
     DocsEnum de = te.docs(null, null);
     assertTrue(de.advance(0) != DocsEnum.NO_MORE_DOCS);
     assertEquals(2, de.freq());
