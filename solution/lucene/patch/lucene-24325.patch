diff --git a/modules/grouping/src/java/org/apache/lucene/search/grouping/TopGroups.java b/modules/grouping/src/java/org/apache/lucene/search/grouping/TopGroups.java
index a46aa41..b8da9b6 100644
--- a/modules/grouping/src/java/org/apache/lucene/search/grouping/TopGroups.java
+++ b/modules/grouping/src/java/org/apache/lucene/search/grouping/TopGroups.java
@@ -1,7 +1,5 @@
 package org.apache.lucene.search.grouping;
 
-import org.apache.lucene.search.SortField;
-
 /**
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
@@ -19,6 +17,14 @@ import org.apache.lucene.search.SortField;
  * limitations under the License.
  */
 
+import java.io.IOException;
+import java.util.Arrays;
+
+import org.apache.lucene.search.ScoreDoc;
+import org.apache.lucene.search.Sort;
+import org.apache.lucene.search.SortField;
+import org.apache.lucene.search.TopDocs;
+
 /** Represents result returned by a grouping search.
  *
  * @lucene.experimental */
@@ -58,4 +64,113 @@ public class TopGroups<GROUP_VALUE_TYPE> {
     this.groups = oldTopGroups.groups;
     this.totalGroupCount = totalGroupCount;
   }
+
+  /** Merges an array of TopGroups, for example obtained
+   *  from the second-pass collector across multiple
+   *  shards.  Each TopGroups must have been sorted by the
+   *  same groupSort and docSort, and the top groups passed
+   *  to all second-pass collectors must be the same.
+   *
+   * <b>NOTE</b>: this cannot merge totalGroupCount; ie the
+   * returned TopGroups will have null totalGroupCount.
+   *
+   * <b>NOTE</b>: the topDocs in each GroupDocs is actually
+   * an instance of TopDocsAndShards
+   */
+  public static <T> TopGroups<T> merge(TopGroups<T>[] shardGroups, Sort groupSort, Sort docSort, int docOffset, int docTopN)
+    throws IOException {
+
+    //System.out.println("TopGroups.merge");
+
+    if (shardGroups.length == 0) {
+      return null;
+    }
+
+    int totalHitCount = 0;
+    int totalGroupedHitCount = 0;
+
+    final int numGroups = shardGroups[0].groups.length;
+    for(TopGroups<T> shard : shardGroups) {
+      if (numGroups != shard.groups.length) {
+        throw new IllegalArgumentException("number of groups differs across shards; you must pass same top groups to all shards' second-pass collector");
+      }
+      totalHitCount += shard.totalHitCount;
+      totalGroupedHitCount += shard.totalGroupedHitCount;
+    }
+
+    @SuppressWarnings("unchecked")
+    final GroupDocs<T>[] mergedGroupDocs = new GroupDocs[numGroups];
+
+    final TopDocs[] shardTopDocs = new TopDocs[shardGroups.length];
+
+    for(int groupIDX=0;groupIDX<numGroups;groupIDX++) {
+      final T groupValue = shardGroups[0].groups[groupIDX].groupValue;
+      //System.out.println("  merge groupValue=" + groupValue + " sortValues=" + Arrays.toString(shardGroups[0].groups[groupIDX].groupSortValues));
+      float maxScore = Float.MIN_VALUE;
+      int totalHits = 0;
+      for(int shardIDX=0;shardIDX<shardGroups.length;shardIDX++) {
+        //System.out.println("    shard=" + shardIDX);
+        final TopGroups<T> shard = shardGroups[shardIDX];
+        final GroupDocs shardGroupDocs = shard.groups[groupIDX];
+        if (groupValue == null) {
+          if (shardGroupDocs.groupValue != null) {
+            throw new IllegalArgumentException("group values differ across shards; you must pass same top groups to all shards' second-pass collector");
+          }
+        } else if (!groupValue.equals(shardGroupDocs.groupValue)) {
+          throw new IllegalArgumentException("group values differ across shards; you must pass same top groups to all shards' second-pass collector");
+        }
+
+        /*
+        for(ScoreDoc sd : shardGroupDocs.scoreDocs) {
+          System.out.println("      doc=" + sd.doc);
+        }
+        */
+
+        shardTopDocs[shardIDX] = new TopDocs(shardGroupDocs.totalHits,
+                                             shardGroupDocs.scoreDocs,
+                                             shardGroupDocs.maxScore);
+        maxScore = Math.max(maxScore, shardGroupDocs.maxScore);
+        totalHits += shardGroupDocs.totalHits;
+      }
+
+      final TopDocs.TopDocsAndShards mergedTopDocs = TopDocs.merge(docSort, docOffset + docTopN, shardTopDocs);
+
+      // Slice;
+      final ScoreDoc[] mergedScoreDocs;
+      final int[] mergedShardIndex;
+      if (docOffset == 0) {
+        mergedScoreDocs = mergedTopDocs.scoreDocs;
+        mergedShardIndex = mergedTopDocs.shardIndex;
+      } else if (docOffset >= mergedTopDocs.scoreDocs.length) {
+        mergedScoreDocs = new ScoreDoc[0];
+        mergedShardIndex = new int[0];
+      } else {
+        mergedScoreDocs = new ScoreDoc[mergedTopDocs.scoreDocs.length - docOffset];
+        System.arraycopy(mergedTopDocs.scoreDocs,
+                         docOffset,
+                         mergedScoreDocs,
+                         0,
+                         mergedTopDocs.scoreDocs.length - docOffset);
+        mergedShardIndex = new int[mergedTopDocs.scoreDocs.length - docOffset];
+        System.arraycopy(mergedTopDocs.shardIndex,
+                         docOffset,
+                         mergedShardIndex,
+                         0,
+                         mergedTopDocs.scoreDocs.length - docOffset);
+      }
+      //System.out.println("SHARDS=" + Arrays.toString(mergedTopDocs.shardIndex));
+      mergedGroupDocs[groupIDX] = new GroupDocsAndShards<T>(maxScore,
+                                                            totalHits,
+                                                            mergedScoreDocs,
+                                                            groupValue,
+                                                            shardGroups[0].groups[groupIDX].groupSortValues,
+                                                            mergedShardIndex);
+    }
+
+    return new TopGroups<T>(groupSort.getSort(),
+                            docSort == null ? null : docSort.getSort(),
+                            totalHitCount,
+                            totalGroupedHitCount,
+                            mergedGroupDocs);
+  }
 }
