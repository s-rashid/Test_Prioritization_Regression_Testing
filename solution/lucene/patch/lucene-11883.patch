diff --git a/lucene/src/java/org/apache/lucene/index/codecs/CodecProvider.java b/lucene/src/java/org/apache/lucene/index/codecs/CodecProvider.java
index 136b7d0..dfbb9d5 100644
--- a/lucene/src/java/org/apache/lucene/index/codecs/CodecProvider.java
+++ b/lucene/src/java/org/apache/lucene/index/codecs/CodecProvider.java
@@ -20,13 +20,13 @@ package org.apache.lucene.index.codecs;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.Map;
 import java.util.Set;
 
-import org.apache.lucene.index.SegmentWriteState;
 import org.apache.lucene.index.codecs.preflex.PreFlexCodec;
 import org.apache.lucene.index.codecs.pulsing.PulsingCodec;
-import org.apache.lucene.index.codecs.standard.StandardCodec;
 import org.apache.lucene.index.codecs.simpletext.SimpleTextCodec;
+import org.apache.lucene.index.codecs.standard.StandardCodec;
 
 /** Holds a set of codecs, keyed by name.  You subclass
  *  this, instantiate it, and register your codecs, then
@@ -36,10 +36,13 @@ import org.apache.lucene.index.codecs.simpletext.SimpleTextCodec;
  *
  *  @lucene.experimental */
 
-public abstract class CodecProvider {
+public class CodecProvider {
   private SegmentInfosWriter infosWriter = new DefaultSegmentInfosWriter();
   private SegmentInfosReader infosReader = new DefaultSegmentInfosReader();
+  private String defaultFieldCodec = defaultCodec;
+  private final Map<String, String> perFieldMap = new HashMap<String, String>();
 
+  
   private final HashMap<String, Codec> codecs = new HashMap<String, Codec>();
 
   private final Set<String> knownExtensions = new HashSet<String>();
@@ -86,8 +89,6 @@ public abstract class CodecProvider {
     return codec;
   }
 
-  public abstract Codec getWriter(SegmentWriteState state);
-  
   public SegmentInfosWriter getSegmentInfosWriter() {
     return infosWriter;
   }
@@ -110,6 +111,62 @@ public abstract class CodecProvider {
   public synchronized static String getDefaultCodec() {
     return defaultCodec;
   }
+  
+  /**
+   * Sets the {@link Codec} for a given field. Not that setting a fields code is
+   * write-once. If the fields codec is already set this method will throw an
+   * {@link IllegalArgumentException}
+   * 
+   * @param field
+   *          the name of the field
+   * @param codec
+   *          the name of the codec
+   * @throws IllegalArgumentException
+   *           if the codec for the given field is already set
+   * 
+   */
+  public synchronized void setFieldCodec(String field, String codec) {
+    if (perFieldMap.containsKey(field))
+      throw new IllegalArgumentException("codec for field: " + field
+          + " already set to " + perFieldMap.get(field));
+    perFieldMap.put(field, codec);
+  }
+
+  /**
+   * Returns the {@link Codec} name for the given field or the default codec if
+   * not set.
+   * 
+   * @param name
+   *          the fields name
+   * @return the {@link Codec} name for the given field or the default codec if
+   *         not set.
+   */
+  public synchronized String getFieldCodec(String name) {
+    final String codec;
+    if ((codec = perFieldMap.get(name)) == null) {
+      return defaultFieldCodec;
+    }
+    return codec;
+  }
+
+  /**
+   * Returns the default {@link Codec} for this {@link CodecProvider}
+   * 
+   * @return the default {@link Codec} for this {@link CodecProvider}
+   */
+  public synchronized String getDefaultFieldCodec() {
+    return defaultFieldCodec;
+  }
+
+  /**
+   * Sets the default {@link Codec} for this {@link CodecProvider}
+   * 
+   * @param codec
+   *          the codecs name
+   */
+  public synchronized void setDefaultFieldCodec(String codec) {
+    defaultFieldCodec = codec;
+  }
 }
 
 class DefaultCodecProvider extends CodecProvider {
@@ -118,10 +175,6 @@ class DefaultCodecProvider extends CodecProvider {
     register(new PreFlexCodec());
     register(new PulsingCodec(1));
     register(new SimpleTextCodec());
-  }
-
-  @Override
-  public Codec getWriter(SegmentWriteState state) {
-    return lookup(CodecProvider.getDefaultCodec());
+    setDefaultFieldCodec(CodecProvider.getDefaultCodec());
   }
 }
