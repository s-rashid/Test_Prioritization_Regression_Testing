diff --git a/lucene/src/java/org/apache/lucene/util/BytesRefHash.java b/lucene/src/java/org/apache/lucene/util/BytesRefHash.java
index 5a4336f..c5b180c 100644
--- a/lucene/src/java/org/apache/lucene/util/BytesRefHash.java
+++ b/lucene/src/java/org/apache/lucene/util/BytesRefHash.java
@@ -227,8 +227,9 @@ public final class BytesRefHash {
   public void clear(boolean resetPool) {
     lastCount = count;
     count = 0;
-    if (resetPool)
+    if (resetPool) {
       pool.reset();
+    }
     bytesStart = bytesStartArray.clear();
     if (lastCount != -1 && shrink(lastCount)) {
       // shrink clears the hash entries
@@ -240,6 +241,16 @@ public final class BytesRefHash {
   public void clear() {
     clear(true);
   }
+  
+  /**
+   * Closes the BytesRefHash and releases all internally used memory
+   */
+  public void close() {
+    clear(true);
+    ords = null;
+    bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT
+        * -hashSize);
+  }
 
   /**
    * Adds a new {@link BytesRef}
@@ -453,8 +464,14 @@ public final class BytesRefHash {
    * effect.
    */
   public void reinit() {
-    if (bytesStart == null)
+    if (bytesStart == null) {
       bytesStart = bytesStartArray.init();
+    }
+    
+    if (ords == null) {
+      ords = new int[hashSize];
+      bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT * hashSize);
+    }
   }
 
   /**
@@ -515,98 +532,82 @@ public final class BytesRefHash {
      */
     public abstract AtomicLong bytesUsed();
   }
-
-  public static class DirectBytesStartArray extends BytesStartArray {
-
+  
+  /**
+   * A direct {@link BytesStartArray} that tracks all memory allocation using an {@link AtomicLong} instance.
+   */
+  public static class TrackingDirectBytesStartArray extends BytesStartArray {
     protected final int initSize;
     private int[] bytesStart;
-    private final AtomicLong bytesUsed = new AtomicLong(0);
-
-    public DirectBytesStartArray(int initSize) {
+    protected final AtomicLong bytesUsed;
+    
+    public TrackingDirectBytesStartArray(int initSize, AtomicLong bytesUsed) {
       this.initSize = initSize;
+      this.bytesUsed = bytesUsed;
     }
 
     @Override
     public int[] clear() {
+      if (bytesStart != null) {
+        bytesUsed.addAndGet(-bytesStart.length * RamUsageEstimator.NUM_BYTES_INT);
+      }
       return bytesStart = null;
     }
 
     @Override
     public int[] grow() {
       assert bytesStart != null;
-      return bytesStart = ArrayUtil.grow(bytesStart, bytesStart.length + 1);
+      final int oldSize = bytesStart.length;
+      bytesStart = ArrayUtil.grow(bytesStart, bytesStart.length + 1);
+      bytesUsed.addAndGet((bytesStart.length - oldSize) * RamUsageEstimator.NUM_BYTES_INT);
+      return bytesStart;
     }
 
     @Override
     public int[] init() {
-      return bytesStart = new int[ArrayUtil.oversize(initSize,
+      bytesStart = new int[ArrayUtil.oversize(initSize,
           RamUsageEstimator.NUM_BYTES_INT)];
+      bytesUsed.addAndGet((bytesStart.length) * RamUsageEstimator.NUM_BYTES_INT);
+      return bytesStart;
     }
 
     @Override
     public AtomicLong bytesUsed() {
       return bytesUsed;
     }
-
   }
-  
-  public static class ParallelBytesStartArray<T extends ParallelArrayBase<T>> extends BytesStartArray {
-    private final T prototype;
-    public T array;
+
+  public static class DirectBytesStartArray extends BytesStartArray {
+    protected final int initSize;
+    private int[] bytesStart;
+    private final AtomicLong bytesUsed;
     
-    public ParallelBytesStartArray(T template) {
-      this.prototype = template;
-    }
-    @Override
-    public int[] init() {
-      if(array == null) { 
-        array = prototype.newInstance(2);
-      }
-      return array.textStart;
+    public DirectBytesStartArray(int initSize) {
+      this.bytesUsed = new AtomicLong(0);
+      this.initSize = initSize;
     }
 
-    @Override
-    public int[] grow() {
-      array = array.grow();
-      return array.textStart;
-    }
 
     @Override
     public int[] clear() {
-      if(array != null) {
-        array.deref();
-        array = null;
-      }
-      return null;
+      return bytesStart = null;
     }
 
     @Override
-    public AtomicLong bytesUsed() {
-      return array.bytesUsed();
-    }
-    
-  }
-  
-  public abstract static class ParallelArrayBase<T extends ParallelArrayBase<T>> extends ParallelArray<T> {
-    final int[] textStart;
-    
-    protected ParallelArrayBase(int size, AtomicLong bytesUsed) {
-      super(size, bytesUsed);
-      textStart = new int[size];
+    public int[] grow() {
+      assert bytesStart != null;
+      return bytesStart = ArrayUtil.grow(bytesStart, bytesStart.length + 1);
     }
 
     @Override
-    protected int bytesPerEntry() {
-      return RamUsageEstimator.NUM_BYTES_INT;
+    public int[] init() {
+      return bytesStart = new int[ArrayUtil.oversize(initSize,
+          RamUsageEstimator.NUM_BYTES_INT)];
     }
 
     @Override
-    protected void copyTo(T toArray, int numToCopy) {
-      System.arraycopy(textStart, 0, toArray.textStart, 0, size);
+    public AtomicLong bytesUsed() {
+      return bytesUsed;
     }
-
-    @Override
-    public abstract T newInstance(int size);
-    
   }
 }
