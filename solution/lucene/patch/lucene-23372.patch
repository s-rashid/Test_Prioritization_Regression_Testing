diff --git a/lucene/src/java/org/apache/lucene/index/values/SourceCache.java b/lucene/src/java/org/apache/lucene/index/values/SourceCache.java
index 565df06..7080006 100644
--- a/lucene/src/java/org/apache/lucene/index/values/SourceCache.java
+++ b/lucene/src/java/org/apache/lucene/index/values/SourceCache.java
@@ -21,23 +21,23 @@ import java.io.IOException;
 import java.util.Comparator;
 
 import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.values.DocValues.SortedSource;
-import org.apache.lucene.index.values.DocValues.Source;
+import org.apache.lucene.index.values.IndexDocValues.SortedSource;
+import org.apache.lucene.index.values.IndexDocValues.Source;
 import org.apache.lucene.util.BytesRef;
 
 /**
- * Abstract base class for {@link DocValues} {@link Source} /
+ * Abstract base class for {@link IndexDocValues} {@link Source} /
  * {@link SortedSource} cache.
  * <p>
  * {@link Source} and {@link SortedSource} instances loaded via
- * {@link DocValues#load()} and {@link DocValues#loadSorted(Comparator)} are
+ * {@link IndexDocValues#load()} and {@link IndexDocValues#loadSorted(Comparator)} are
  * entirely memory resident and need to be maintained by the caller. Each call
- * to {@link DocValues#load()} or {@link DocValues#loadSorted(Comparator)} will
+ * to {@link IndexDocValues#load()} or {@link IndexDocValues#loadSorted(Comparator)} will
  * cause an entire reload of the underlying data. Source and
- * {@link SortedSource} instances obtained from {@link DocValues#getSource()}
- * and {@link DocValues#getSource()} respectively are maintained by a
- * {@link SourceCache} that is closed ({@link #close(DocValues)}) once the
- * {@link IndexReader} that created the {@link DocValues} instance is closed.
+ * {@link SortedSource} instances obtained from {@link IndexDocValues#getSource()}
+ * and {@link IndexDocValues#getSource()} respectively are maintained by a
+ * {@link SourceCache} that is closed ({@link #close(IndexDocValues)}) once the
+ * {@link IndexReader} that created the {@link IndexDocValues} instance is closed.
  * <p>
  * Unless {@link Source} and {@link SortedSource} instances are managed by
  * another entity it is recommended to use the cached variants to obtain a
@@ -45,9 +45,9 @@ import org.apache.lucene.util.BytesRef;
  * <p>
  * Implementation of this API must be thread-safe.
  * 
- * @see DocValues#setCache(SourceCache)
- * @see DocValues#getSource()
- * @see DocValues#getSortedSorted(Comparator)
+ * @see IndexDocValues#setCache(SourceCache)
+ * @see IndexDocValues#getSource()
+ * @see IndexDocValues#getSortedSorted(Comparator)
  * 
  * @lucene.experimental
  */
@@ -55,38 +55,38 @@ public abstract class SourceCache {
 
   /**
    * Atomically loads a {@link Source} into the cache from the given
-   * {@link DocValues} and returns it iff no other {@link Source} has already
+   * {@link IndexDocValues} and returns it iff no other {@link Source} has already
    * been cached. Otherwise the cached source is returned.
    * <p>
    * This method will not return <code>null</code>
    */
-  public abstract Source load(DocValues values) throws IOException;
+  public abstract Source load(IndexDocValues values) throws IOException;
 
   /**
    * Atomically loads a {@link SortedSource} into the cache from the given
-   * {@link DocValues} and returns it iff no other {@link SortedSource} has
+   * {@link IndexDocValues} and returns it iff no other {@link SortedSource} has
    * already been cached. Otherwise the cached source is returned.
    * <p>
    * This method will not return <code>null</code>
    */
-  public abstract SortedSource loadSorted(DocValues values,
+  public abstract SortedSource loadSorted(IndexDocValues values,
       Comparator<BytesRef> comp) throws IOException;
 
   /**
    * Atomically invalidates the cached {@link Source} and {@link SortedSource}
    * instances if any and empties the cache.
    */
-  public abstract void invalidate(DocValues values);
+  public abstract void invalidate(IndexDocValues values);
 
   /**
    * Atomically closes the cache and frees all resources.
    */
-  public synchronized void close(DocValues values) {
+  public synchronized void close(IndexDocValues values) {
     invalidate(values);
   }
 
   /**
-   * Simple per {@link DocValues} instance cache implementation that holds a
+   * Simple per {@link IndexDocValues} instance cache implementation that holds a
    * {@link Source} and {@link SortedSource} reference as a member variable.
    * <p>
    * If a {@link DirectSourceCache} instance is closed or invalidated the cached
@@ -96,14 +96,14 @@ public abstract class SourceCache {
     private Source ref;
     private SortedSource sortedRef;
 
-    public synchronized Source load(DocValues values) throws IOException {
+    public synchronized Source load(IndexDocValues values) throws IOException {
       if (ref == null) {
         ref = values.load();
       }
       return ref;
     }
 
-    public synchronized SortedSource loadSorted(DocValues values,
+    public synchronized SortedSource loadSorted(IndexDocValues values,
         Comparator<BytesRef> comp) throws IOException {
       if (sortedRef == null) {
         sortedRef = values.loadSorted(comp);
@@ -111,7 +111,7 @@ public abstract class SourceCache {
       return sortedRef;
     }
 
-    public synchronized void invalidate(DocValues values) {
+    public synchronized void invalidate(IndexDocValues values) {
       ref = null;
       sortedRef = null;
     }
