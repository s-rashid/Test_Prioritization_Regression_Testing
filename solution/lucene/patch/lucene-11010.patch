diff --git a/solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache.java b/solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache.java
index 6bc83de..ed352f2 100644
--- a/solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache.java
+++ b/solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache.java
@@ -59,8 +59,6 @@ public class ConcurrentLRUCache<K,V> {
   public ConcurrentLRUCache(int upperWaterMark, final int lowerWaterMark, int acceptableWatermark,
                             int initialSize, boolean runCleanupThread, boolean runNewThreadForCleanup,
                             EvictionListener<K,V> evictionListener) {
-log.info("new ConcurrentLRUCache: " + this);
-
     if (upperWaterMark < 1) throw new IllegalArgumentException("upperWaterMark must be > 0");
     if (lowerWaterMark >= upperWaterMark)
       throw new IllegalArgumentException("lowerWaterMark must be  < upperWaterMark");
@@ -502,9 +500,8 @@ log.info("new ConcurrentLRUCache: " + this);
     }
   }
 
- private volatile boolean isDestroyed =  false;
+ private boolean isDestroyed =  false;
   public void destroy() {
-    log.info("destroying " + this);
     try {
       if(cleanupThread != null){
         cleanupThread.stopThread();
@@ -610,7 +607,7 @@ log.info("new ConcurrentLRUCache: " + this);
   protected void finalize() throws Throwable {
     try {
       if(!isDestroyed){
-        log.error("ConcurrentLRUCache was not destroyed prior to finalize(), indicates a bug -- POSSIBLE RESOURCE LEAK!!! - " + this);
+        log.error("ConcurrentLRUCache was not destroyed prior to finalize(), indicates a bug -- POSSIBLE RESOURCE LEAK!!!");
         destroy();
       }
     } finally {
