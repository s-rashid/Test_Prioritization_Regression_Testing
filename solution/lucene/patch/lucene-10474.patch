diff --git a/lucene/src/test/org/apache/lucene/analysis/MockAnalyzer.java b/lucene/src/test/org/apache/lucene/analysis/MockAnalyzer.java
index 18cdad0..d23b093 100644
--- a/lucene/src/test/org/apache/lucene/analysis/MockAnalyzer.java
+++ b/lucene/src/test/org/apache/lucene/analysis/MockAnalyzer.java
@@ -22,7 +22,6 @@ import java.io.Reader;
 
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
 import org.apache.lucene.analysis.tokenattributes.PayloadAttribute;
-import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
 import org.apache.lucene.index.Payload;
 import org.apache.lucene.util.automaton.CharacterRunAutomaton;
 
@@ -38,7 +37,7 @@ public final class MockAnalyzer extends Analyzer {
   private int positionIncrementGap;
 
   public MockAnalyzer(CharacterRunAutomaton runAutomaton, boolean lowerCase, CharacterRunAutomaton filter, boolean enablePositionIncrements) {
-    this(runAutomaton, lowerCase, filter, enablePositionIncrements, false);    
+    this(runAutomaton, lowerCase, filter, enablePositionIncrements, true);    
   }
 
   /**
@@ -65,7 +64,7 @@ public final class MockAnalyzer extends Analyzer {
    * @param lowerCase true if the tokenizer should lowercase terms
    */
   public MockAnalyzer(CharacterRunAutomaton runAutomaton, boolean lowerCase) {
-    this(runAutomaton, lowerCase, MockTokenFilter.EMPTY_STOPSET, false, false);
+    this(runAutomaton, lowerCase, MockTokenFilter.EMPTY_STOPSET, false, true);
   }
 
   public MockAnalyzer(CharacterRunAutomaton runAutomaton, boolean lowerCase, boolean payload) {
@@ -148,4 +147,10 @@ final class SimplePayloadFilter extends TokenFilter {
       return false;
     }
   }
-}
\ No newline at end of file
+
+  @Override
+  public void reset() throws IOException {
+    super.reset();
+    pos = 0;
+  }
+}
