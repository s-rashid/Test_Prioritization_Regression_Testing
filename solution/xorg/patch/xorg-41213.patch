diff --git a/randr/rrcrtc.c b/randr/rrcrtc.c
index 091517a..1b6350e 100644
--- a/randr/rrcrtc.c
+++ b/randr/rrcrtc.c
@@ -48,69 +48,6 @@ RRCrtcChanged (RRCrtcPtr crtc, Bool layoutChanged)
     }
 }
 
-static void
-RRTransformInit (RRTransformPtr transform)
-{
-    PictureTransformInitIdentity (&transform->transform);
-    pict_f_transform_init_identity (&transform->f_transform);
-    pict_f_transform_init_identity (&transform->f_inverse);
-    transform->filter = NULL;
-    transform->params = NULL;
-    transform->nparams = 0;
-}
-
-static Bool
-RRTransformSetFilter (RRTransformPtr	dst,
-		      PictFilterPtr	filter,
-		      xFixed		*params,
-		      int		nparams,
-		      int		width,
-		      int		height)
-{
-    xFixed  *new_params;
-
-    if (nparams)
-    {
-	new_params = xalloc (nparams * sizeof (xFixed));
-	if (!new_params)
-	    return FALSE;
-	memcpy (new_params, params, nparams * sizeof (xFixed));
-    }
-    else
-	new_params = NULL;
-    if (dst->params)
-	xfree (dst->params);
-    dst->filter = filter;
-    dst->params = new_params;
-    dst->nparams = nparams;
-    dst->width = width;
-    dst->height = height;
-    return TRUE;
-}
-
-static Bool
-RRTransformCopy (RRTransformPtr dst, RRTransformPtr src)
-{
-    if (src)
-    {
-	if (!RRTransformSetFilter (dst, src->filter,
-				   src->params, src->nparams, src->width, src->height))
-	    return FALSE;
-	dst->transform = src->transform;
-	dst->f_transform = src->f_transform;
-	dst->f_inverse = src->f_inverse;
-    }
-    else
-    {
-	if (!RRTransformSetFilter (dst, NULL, NULL, 0, 0, 0))
-	    return FALSE;
-	PictureTransformInitIdentity (&dst->transform);
-	pict_f_transform_init_identity (&dst->f_transform);
-	pict_f_transform_init_identity (&dst->f_inverse);
-    }
-    return TRUE;
-}
-
 /*
  * Create a CRTC
  */
@@ -196,6 +133,7 @@ RRCrtcNotify (RRCrtcPtr	    crtc,
 	      int	    x,
 	      int	    y,
 	      Rotation	    rotation,
+	      RRTransformPtr transform,
 	      int	    numOutputs,
 	      RROutputPtr   *outputs)
 {
@@ -291,6 +229,10 @@ RRCrtcNotify (RRCrtcPtr	    crtc,
 	crtc->rotation = rotation;
 	RRCrtcChanged (crtc, TRUE);
     }
+    if (!RRTransformEqual (transform, &crtc->client_current_transform)) {
+	RRTransformCopy (&crtc->client_current_transform, transform);
+	RRCrtcChanged (crtc, TRUE);
+    }
     return TRUE;
 }
 
@@ -391,7 +333,7 @@ RRCrtcSet (RRCrtcPtr    crtc,
 
 		if (!mode)
 		{
-		    RRCrtcNotify (crtc, NULL, x, y, rotation, 0, NULL);
+		    RRCrtcNotify (crtc, NULL, x, y, rotation, NULL, 0, NULL);
 		    ret = TRUE;
 		}
 		else
@@ -417,7 +359,7 @@ RRCrtcSet (RRCrtcPtr    crtc,
 		     */
 		    if (ret)
 		    {
-			RRCrtcNotify (crtc, mode, x, y, rotation, 1, outputs);
+			RRCrtcNotify (crtc, mode, x, y, rotation, NULL, 1, outputs);
 			RRScreenSizeNotify (pScreen);
 		    }
 		}
@@ -450,27 +392,6 @@ RRCrtcGetTransform (RRCrtcPtr crtc)
 }
 
 /*
- * Called when driver applies a transform to a crtc
- */
-void
-RRCrtcSetTransform (RRCrtcPtr crtc, RRTransformPtr transform)
-{
-    if (!crtc->mode)
-	return;
-
-    RRTransformCopy (&crtc->client_current_transform, transform);
-
-    RRComputeTransform (crtc->x, crtc->y,
-			crtc->mode->mode.width,
-			crtc->mode->mode.height,
-			crtc->rotation,
-			transform,
-			&crtc->transform,
-			&crtc->f_transform,
-			&crtc->f_inverse);
-}
-
-/*
  * Check whether the pending and current transforms are the same
  */
 Bool
@@ -674,141 +595,6 @@ RRCrtcTransformSet (RRCrtcPtr		crtc,
     return Success;
 }
 
-#define F(x)	IntToxFixed(x)
-
-/*
- * Compute the complete transformation matrix including
- * client-specified transform, rotation/reflection values and the crtc 
- * offset.
- *
- * Return TRUE if the resulting transform is not a simple translation.
- */
-Bool
-RRComputeTransform (int			    x,
-		    int			    y,
-		    int			    width,
-		    int			    height,
-		    Rotation		    rotation,
-		    RRTransformPtr	    rr_transform,
-
-		    PictTransformPtr	    transform,
-		    struct pict_f_transform *f_transform,
-		    struct pict_f_transform *f_inverse)
-{
-    PictTransform	    inverse;
-
-    PictureTransformInitIdentity (transform);
-    PictureTransformInitIdentity (&inverse);
-    pict_f_transform_init_identity (f_transform);
-    pict_f_transform_init_identity (f_inverse);
-    if (rotation != RR_Rotate_0)
-    {
-	double	f_rot_cos, f_rot_sin, f_rot_dx, f_rot_dy;
-	double	f_scale_x, f_scale_y, f_scale_dx, f_scale_dy;
-	xFixed	rot_cos, rot_sin, rot_dx, rot_dy;
-	xFixed	scale_x, scale_y, scale_dx, scale_dy;
-
-	/* rotation */
-	switch (rotation & 0xf) {
-	default:
-	case RR_Rotate_0:
-	    f_rot_cos = 1;	    f_rot_sin = 0;
-	    f_rot_dx  = 0;	    f_rot_dy  = 0;
-	    rot_cos = F ( 1);	    rot_sin = F ( 0);
-	    rot_dx  = F ( 0);	    rot_dy  = F ( 0);
-	    break;
-	case RR_Rotate_90:
-	    f_rot_cos = 0;	    f_rot_sin = 1;
-	    f_rot_dx  = height;	    f_rot_dy  = 0;
-	    rot_cos = F ( 0);	    rot_sin = F ( 1);
-	    rot_dx =  F ( height);  rot_dy  = F (0);
-	    break;
-	case RR_Rotate_180:
-	    f_rot_cos = -1;	    f_rot_sin = 0;
-	    f_rot_dx  = width;	    f_rot_dy  = height;
-	    rot_cos = F (-1);	    rot_sin = F ( 0);
-	    rot_dx  = F (width);   rot_dy  = F ( height);
-	    break;
-	case RR_Rotate_270:
-	    f_rot_cos = 0;	    f_rot_sin = -1;
-	    f_rot_dx  = 0;	    f_rot_dy  = width;
-	    rot_cos = F ( 0);	    rot_sin = F (-1);
-	    rot_dx  = F ( 0);	    rot_dy  = F ( width);
-	    break;
-	}
-	
-	PictureTransformRotate (&inverse, transform, rot_cos, rot_sin);
-	PictureTransformTranslate (&inverse, transform, rot_dx, rot_dy);
-	pict_f_transform_rotate (f_inverse, f_transform, f_rot_cos, f_rot_sin);
-	pict_f_transform_translate (f_inverse, f_transform, f_rot_dx, f_rot_dy);
-
-	/* reflection */
-	f_scale_x = 1;
-	f_scale_dx = 0;
-	f_scale_y = 1;
-	f_scale_dy = 0;
-	scale_x = F (1);
-	scale_dx = 0;
-	scale_y = F (1);
-	scale_dy = 0;
-	if (rotation & RR_Reflect_X)
-	{
-	    f_scale_x = -1;
-	    scale_x = F(-1);
-	    if (rotation & (RR_Rotate_0|RR_Rotate_180)) {
-		f_scale_dx = width;
-		scale_dx = F(width);
-	    } else {
-		f_scale_dx = height;
-		scale_dx = F(height);
-	    }
-	}
-	if (rotation & RR_Reflect_Y)
-	{
-	    f_scale_y = -1;
-	    scale_y = F(-1);
-	    if (rotation & (RR_Rotate_0|RR_Rotate_180)) {
-		f_scale_dy = height;
-		scale_dy = F(height);
-	    } else {
-		f_scale_dy = width;
-		scale_dy = F(width);
-	    }
-	}
-	
-	PictureTransformScale (&inverse, transform, scale_x, scale_y);
-	pict_f_transform_scale (f_inverse, f_transform, f_scale_x, f_scale_y);
-	PictureTransformTranslate (&inverse, transform, scale_dx, scale_dy);
-	pict_f_transform_translate (f_inverse, f_transform, f_scale_dx, f_scale_dy);
-    }
-    
-#ifdef RANDR_12_INTERFACE
-    if (rr_transform)
-    {
-        PictureTransformMultiply (transform, transform, &rr_transform->transform);
-	pict_f_transform_multiply (f_transform, f_transform, &rr_transform->f_transform);
-	pict_f_transform_multiply (f_inverse, &rr_transform->f_inverse, f_inverse);
-    }
-#endif
-    /*
-     * Compute the class of the resulting transform
-     */
-    if (PictureTransformIsIdentity (transform))
-    {
-	PictureTransformInitTranslate (transform, F ( x), F ( y));
-
-	pict_f_transform_init_translate (f_transform, F( x), F( y));
-	pict_f_transform_init_translate (f_inverse,   F(-x), F(-y));
-	return FALSE;
-    }
-    else
-    {
-	PictureTransformTranslate (&inverse, transform, x, y);
-	pict_f_transform_translate (f_inverse, f_transform, x, y);
-	return TRUE;
-    }
-}
-
 /*
  * Initialize crtc type
  */
@@ -1116,7 +902,7 @@ ProcRRSetCrtcConfig (ClientPtr client)
 	    PictTransform transform;
 	    struct pict_f_transform f_transform, f_inverse;
 
-	    RRComputeTransform (stuff->x, stuff->y,
+	    RRTransformCompute (stuff->x, stuff->y,
 				mode->mode.width, mode->mode.height,
 				rotation,
 				&crtc->client_pending_transform,
