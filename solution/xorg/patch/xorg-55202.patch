diff --git a/glx/singlepix.c b/glx/singlepix.c
index 85fc486..55cd443 100644
--- a/glx/singlepix.c
+++ b/glx/singlepix.c
@@ -43,7 +43,8 @@
 #include "glthread.h"
 #include "dispatch.h"
 
-int __glXDisp_ReadPixels(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_ReadPixels(__GLXclientState * cl, GLbyte * pc)
 {
     GLsizei width, height;
     GLenum format, type;
@@ -67,26 +68,25 @@ int __glXDisp_ReadPixels(__GLXclientState *cl, GLbyte *pc)
     swapBytes = *(GLboolean *)(pc + 24);
     lsbFirst = *(GLboolean *)(pc + 25);
     compsize = __glReadPixels_size(format,type,width,height);
-    if (compsize < 0) compsize = 0;
+    if (compsize < 0)
+        compsize = 0;
 
     CALL_PixelStorei( GET_DISPATCH(), (GL_PACK_SWAP_BYTES, swapBytes) );
     CALL_PixelStorei( GET_DISPATCH(), (GL_PACK_LSB_FIRST, lsbFirst) );
     __GLX_GET_ANSWER_BUFFER(answer,cl,compsize,1);
     __glXClearErrorOccured();
-    CALL_ReadPixels( GET_DISPATCH(), (
-		 *(GLint    *)(pc + 0),
+    CALL_ReadPixels(GET_DISPATCH(), (*(GLint *) (pc + 0),
 		 *(GLint    *)(pc + 4),
 		 *(GLsizei  *)(pc + 8),
 		 *(GLsizei  *)(pc + 12),
 		 *(GLenum   *)(pc + 16),
-		 *(GLenum   *)(pc + 20),
-		 answer
-		 ) );
+                                     *(GLenum *) (pc + 20), answer));
 
     if (__glXErrorOccured()) {
 	__GLX_BEGIN_REPLY(0);
 	__GLX_SEND_HEADER();
-    } else {
+    }
+    else {
 	__GLX_BEGIN_REPLY(compsize);
 	__GLX_SEND_HEADER();
 	__GLX_SEND_VOID_ARRAY(compsize);
@@ -95,7 +95,8 @@ int __glXDisp_ReadPixels(__GLXclientState *cl, GLbyte *pc)
     return Success;
 }
 
-int __glXDisp_GetTexImage(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_GetTexImage(__GLXclientState * cl, GLbyte * pc)
 {
     GLint level, compsize;
     GLenum format, type, target;
@@ -118,33 +119,36 @@ int __glXDisp_GetTexImage(__GLXclientState *cl, GLbyte *pc)
     target = *(GLenum *)(pc + 0);
     swapBytes = *(GLboolean *)(pc + 16);
 
-    CALL_GetTexLevelParameteriv( GET_DISPATCH(), (target, level, GL_TEXTURE_WIDTH, &width) );
-    CALL_GetTexLevelParameteriv( GET_DISPATCH(), (target, level, GL_TEXTURE_HEIGHT, &height) );
+    CALL_GetTexLevelParameteriv(GET_DISPATCH(),
+                                (target, level, GL_TEXTURE_WIDTH, &width));
+    CALL_GetTexLevelParameteriv(GET_DISPATCH(),
+                                (target, level, GL_TEXTURE_HEIGHT, &height));
     if ( target == GL_TEXTURE_3D) {
-	CALL_GetTexLevelParameteriv( GET_DISPATCH(), (target, level, GL_TEXTURE_DEPTH, &depth) );
+        CALL_GetTexLevelParameteriv(GET_DISPATCH(),
+                                    (target, level, GL_TEXTURE_DEPTH, &depth));
     }
     /*
      * The three queries above might fail if we're in a state where queries
      * are illegal, but then width, height, and depth would still be zero anyway.
      */
-    compsize = __glGetTexImage_size(target,level,format,type,width,height,depth);
-    if (compsize < 0) compsize = 0;
+    compsize =
+        __glGetTexImage_size(target, level, format, type, width, height, depth);
+    if (compsize < 0)
+        compsize = 0;
 
     CALL_PixelStorei( GET_DISPATCH(), (GL_PACK_SWAP_BYTES, swapBytes) );
     __GLX_GET_ANSWER_BUFFER(answer,cl,compsize,1);
     __glXClearErrorOccured();
-    CALL_GetTexImage( GET_DISPATCH(), (
-		  *(GLenum   *)(pc + 0),
+    CALL_GetTexImage(GET_DISPATCH(), (*(GLenum *) (pc + 0),
 		  *(GLint    *)(pc + 4),
 		  *(GLenum   *)(pc + 8),
-		  *(GLenum   *)(pc + 12),
-		  answer
-		  ) );
+                                      *(GLenum *) (pc + 12), answer));
 
     if (__glXErrorOccured()) {
 	__GLX_BEGIN_REPLY(0);
 	__GLX_SEND_HEADER();
-    } else {
+    }
+    else {
 	__GLX_BEGIN_REPLY(compsize);
 	((xGLXGetTexImageReply *)&__glXReply)->width = width;
 	((xGLXGetTexImageReply *)&__glXReply)->height = height;
@@ -155,7 +159,8 @@ int __glXDisp_GetTexImage(__GLXclientState *cl, GLbyte *pc)
     return Success;
 }
 
-int __glXDisp_GetPolygonStipple(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_GetPolygonStipple(__GLXclientState * cl, GLbyte * pc)
 {
     GLboolean lsbFirst;
     __GLXcontext *cx;
@@ -181,7 +186,8 @@ int __glXDisp_GetPolygonStipple(__GLXclientState *cl, GLbyte *pc)
     if (__glXErrorOccured()) {
 	__GLX_BEGIN_REPLY(0);
 	__GLX_SEND_HEADER();
-    } else {
+    }
+    else {
 	__GLX_BEGIN_REPLY(128);
 	__GLX_SEND_HEADER();
 	__GLX_SEND_BYTE_ARRAY(128);
@@ -189,7 +195,8 @@ int __glXDisp_GetPolygonStipple(__GLXclientState *cl, GLbyte *pc)
     return Success;
 }
 
-static int GetSeparableFilter(__GLXclientState *cl, GLbyte *pc, GLXContextTag tag)
+static int
+GetSeparableFilter(__GLXclientState * cl, GLbyte * pc, GLXContextTag tag)
 {
     GLint compsize, compsize2;
     GLenum format, type, target;
@@ -213,8 +220,10 @@ static int GetSeparableFilter(__GLXclientState *cl, GLbyte *pc, GLXContextTag ta
     /* target must be SEPARABLE_2D, however I guess we can let the GL
        barf on this one.... */
 
-    CALL_GetConvolutionParameteriv(GET_DISPATCH(), (target, GL_CONVOLUTION_WIDTH, &width));
-    CALL_GetConvolutionParameteriv(GET_DISPATCH(), (target, GL_CONVOLUTION_HEIGHT, &height));
+    CALL_GetConvolutionParameteriv(GET_DISPATCH(),
+                                   (target, GL_CONVOLUTION_WIDTH, &width));
+    CALL_GetConvolutionParameteriv(GET_DISPATCH(),
+                                   (target, GL_CONVOLUTION_HEIGHT, &height));
     /*
      * The two queries above might fail if we're in a state where queries
      * are illegal, but then width and height would still be zero anyway.
@@ -222,27 +231,26 @@ static int GetSeparableFilter(__GLXclientState *cl, GLbyte *pc, GLXContextTag ta
     compsize = __glGetTexImage_size(target,1,format,type,width,1,1);
     compsize2 = __glGetTexImage_size(target,1,format,type,height,1,1);
 
-    if (compsize < 0) compsize = 0;
-    if (compsize2 < 0) compsize2 = 0;
+    if (compsize < 0)
+        compsize = 0;
+    if (compsize2 < 0)
+        compsize2 = 0;
     compsize = __GLX_PAD(compsize);
     compsize2 = __GLX_PAD(compsize2);
 
     CALL_PixelStorei(GET_DISPATCH(), (GL_PACK_SWAP_BYTES, swapBytes));
     __GLX_GET_ANSWER_BUFFER(answer,cl,compsize + compsize2,1);
     __glXClearErrorOccured();
-    CALL_GetSeparableFilter( GET_DISPATCH(), (
-		  *(GLenum   *)(pc + 0),
+    CALL_GetSeparableFilter(GET_DISPATCH(), (*(GLenum *) (pc + 0),
 		  *(GLenum   *)(pc + 4),
 		  *(GLenum   *)(pc + 8),
-		  answer,
-		  answer + compsize,
-		  NULL
-		  ) );
+                                             answer, answer + compsize, NULL));
 
     if (__glXErrorOccured()) {
 	__GLX_BEGIN_REPLY(0);
 	__GLX_SEND_HEADER();
-    } else {
+    }
+    else {
 	__GLX_BEGIN_REPLY(compsize + compsize2);
 	((xGLXGetSeparableFilterReply *)&__glXReply)->width = width;
 	((xGLXGetSeparableFilterReply *)&__glXReply)->height = height;
@@ -253,22 +261,24 @@ static int GetSeparableFilter(__GLXclientState *cl, GLbyte *pc, GLXContextTag ta
     return Success;
 }
 
-int __glXDisp_GetSeparableFilter(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_GetSeparableFilter(__GLXclientState * cl, GLbyte * pc)
 {
     const GLXContextTag tag = __GLX_GET_SINGLE_CONTEXT_TAG(pc);
 
     return GetSeparableFilter(cl, pc + __GLX_SINGLE_HDR_SIZE, tag);
 }
 
-int __glXDisp_GetSeparableFilterEXT(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_GetSeparableFilterEXT(__GLXclientState * cl, GLbyte * pc)
 {
     const GLXContextTag tag = __GLX_GET_VENDPRIV_CONTEXT_TAG(pc);
 
     return GetSeparableFilter(cl, pc + __GLX_VENDPRIV_HDR_SIZE, tag);
 }
 
-static int GetConvolutionFilter(__GLXclientState *cl, GLbyte *pc,
-				GLXContextTag tag)
+static int
+GetConvolutionFilter(__GLXclientState * cl, GLbyte * pc, GLXContextTag tag)
 {
     GLint compsize;
     GLenum format, type, target;
@@ -293,31 +303,32 @@ static int GetConvolutionFilter(__GLXclientState *cl, GLbyte *pc,
 				   (target, GL_CONVOLUTION_WIDTH, &width));
     if (target == GL_CONVOLUTION_1D) {
         height = 1;
-    } else {
+    }
+    else {
 	CALL_GetConvolutionParameteriv(GET_DISPATCH(),
-				       (target, GL_CONVOLUTION_HEIGHT, &height));
+                                       (target, GL_CONVOLUTION_HEIGHT,
+                                        &height));
     }
     /*
      * The two queries above might fail if we're in a state where queries
      * are illegal, but then width and height would still be zero anyway.
      */
     compsize = __glGetTexImage_size(target,1,format,type,width,height,1);
-    if (compsize < 0) compsize = 0;
+    if (compsize < 0)
+        compsize = 0;
 
     CALL_PixelStorei(GET_DISPATCH(), (GL_PACK_SWAP_BYTES, swapBytes));
     __GLX_GET_ANSWER_BUFFER(answer,cl,compsize,1);
     __glXClearErrorOccured();
-    CALL_GetConvolutionFilter( GET_DISPATCH(), (
-		  *(GLenum   *)(pc + 0),
+    CALL_GetConvolutionFilter(GET_DISPATCH(), (*(GLenum *) (pc + 0),
 		  *(GLenum   *)(pc + 4),
-		  *(GLenum   *)(pc + 8),
-		  answer
-		  ) );
+                                               *(GLenum *) (pc + 8), answer));
 
     if (__glXErrorOccured()) {
 	__GLX_BEGIN_REPLY(0);
 	__GLX_SEND_HEADER();
-    } else {
+    }
+    else {
 	__GLX_BEGIN_REPLY(compsize);
 	((xGLXGetConvolutionFilterReply *)&__glXReply)->width = width;
 	((xGLXGetConvolutionFilterReply *)&__glXReply)->height = height;
@@ -328,21 +339,24 @@ static int GetConvolutionFilter(__GLXclientState *cl, GLbyte *pc,
     return Success;
 }
 
-int __glXDisp_GetConvolutionFilter(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_GetConvolutionFilter(__GLXclientState * cl, GLbyte * pc)
 {
     const GLXContextTag tag = __GLX_GET_SINGLE_CONTEXT_TAG(pc);
 
     return GetConvolutionFilter(cl, pc + __GLX_SINGLE_HDR_SIZE, tag);
 }
 
-int __glXDisp_GetConvolutionFilterEXT(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_GetConvolutionFilterEXT(__GLXclientState * cl, GLbyte * pc)
 {
     const GLXContextTag tag = __GLX_GET_VENDPRIV_CONTEXT_TAG(pc);
 
     return GetConvolutionFilter(cl, pc + __GLX_VENDPRIV_HDR_SIZE, tag);
 }
 
-static int GetHistogram(__GLXclientState *cl, GLbyte *pc, GLXContextTag tag)
+static int
+GetHistogram(__GLXclientState * cl, GLbyte * pc, GLXContextTag tag)
 {
     GLint compsize;
     GLenum format, type, target;
@@ -371,7 +385,8 @@ static int GetHistogram(__GLXclientState *cl, GLbyte *pc, GLXContextTag tag)
      * are illegal, but then width would still be zero anyway.
      */
     compsize = __glGetTexImage_size(target,1,format,type,width,1,1);
-    if (compsize < 0) compsize = 0;
+    if (compsize < 0)
+        compsize = 0;
 
     CALL_PixelStorei(GET_DISPATCH(), (GL_PACK_SWAP_BYTES, swapBytes));
     __GLX_GET_ANSWER_BUFFER(answer,cl,compsize,1);
@@ -381,7 +396,8 @@ static int GetHistogram(__GLXclientState *cl, GLbyte *pc, GLXContextTag tag)
     if (__glXErrorOccured()) {
 	__GLX_BEGIN_REPLY(0);
 	__GLX_SEND_HEADER();
-    } else {
+    }
+    else {
 	__GLX_BEGIN_REPLY(compsize);
 	((xGLXGetHistogramReply *)&__glXReply)->width = width;
 	__GLX_SEND_HEADER();
@@ -391,21 +407,24 @@ static int GetHistogram(__GLXclientState *cl, GLbyte *pc, GLXContextTag tag)
     return Success;
 }
 
-int __glXDisp_GetHistogram(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_GetHistogram(__GLXclientState * cl, GLbyte * pc)
 {
     const GLXContextTag tag = __GLX_GET_SINGLE_CONTEXT_TAG(pc);
 
     return GetHistogram(cl, pc + __GLX_SINGLE_HDR_SIZE, tag);
 }
 
-int __glXDisp_GetHistogramEXT(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_GetHistogramEXT(__GLXclientState * cl, GLbyte * pc)
 {
     const GLXContextTag tag = __GLX_GET_VENDPRIV_CONTEXT_TAG(pc);
 
     return GetHistogram(cl, pc + __GLX_VENDPRIV_HDR_SIZE, tag);
 }
 
-static int GetMinmax(__GLXclientState *cl, GLbyte *pc, GLXContextTag tag)
+static int
+GetMinmax(__GLXclientState * cl, GLbyte * pc, GLXContextTag tag)
 {
     GLint compsize;
     GLenum format, type, target;
@@ -427,7 +446,8 @@ static int GetMinmax(__GLXclientState *cl, GLbyte *pc, GLXContextTag tag)
     reset = *(GLboolean *)(pc + 13);
 
     compsize = __glGetTexImage_size(target,1,format,type,2,1,1);
-    if (compsize < 0) compsize = 0;
+    if (compsize < 0)
+        compsize = 0;
 
     CALL_PixelStorei(GET_DISPATCH(), (GL_PACK_SWAP_BYTES, swapBytes));
     __GLX_GET_ANSWER_BUFFER(answer,cl,compsize,1);
@@ -437,7 +457,8 @@ static int GetMinmax(__GLXclientState *cl, GLbyte *pc, GLXContextTag tag)
     if (__glXErrorOccured()) {
 	__GLX_BEGIN_REPLY(0);
 	__GLX_SEND_HEADER();
-    } else {
+    }
+    else {
 	__GLX_BEGIN_REPLY(compsize);
 	__GLX_SEND_HEADER();
 	__GLX_SEND_VOID_ARRAY(compsize);
@@ -446,21 +467,24 @@ static int GetMinmax(__GLXclientState *cl, GLbyte *pc, GLXContextTag tag)
     return Success;
 }
 
-int __glXDisp_GetMinmax(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_GetMinmax(__GLXclientState * cl, GLbyte * pc)
 {
     const GLXContextTag tag = __GLX_GET_SINGLE_CONTEXT_TAG(pc);
 
     return GetMinmax(cl, pc + __GLX_SINGLE_HDR_SIZE, tag);
 }
 
-int __glXDisp_GetMinmaxEXT(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_GetMinmaxEXT(__GLXclientState * cl, GLbyte * pc)
 {
     const GLXContextTag tag = __GLX_GET_VENDPRIV_CONTEXT_TAG(pc);
 
     return GetMinmax(cl, pc + __GLX_VENDPRIV_HDR_SIZE, tag);
 }
 
-static int GetColorTable(__GLXclientState *cl, GLbyte *pc, GLXContextTag tag)
+static int
+GetColorTable(__GLXclientState * cl, GLbyte * pc, GLXContextTag tag)
 {
     GLint compsize;
     GLenum format, type, target;
@@ -488,22 +512,21 @@ static int GetColorTable(__GLXclientState *cl, GLbyte *pc, GLXContextTag tag)
      * are illegal, but then width would still be zero anyway.
      */
     compsize = __glGetTexImage_size(target,1,format,type,width,1,1);
-    if (compsize < 0) compsize = 0;
+    if (compsize < 0)
+        compsize = 0;
 
     CALL_PixelStorei(GET_DISPATCH(), (GL_PACK_SWAP_BYTES, swapBytes));
     __GLX_GET_ANSWER_BUFFER(answer,cl,compsize,1);
     __glXClearErrorOccured();
-    CALL_GetColorTable( GET_DISPATCH(), (
-		  *(GLenum   *)(pc + 0),
+    CALL_GetColorTable(GET_DISPATCH(), (*(GLenum *) (pc + 0),
 		  *(GLenum   *)(pc + 4),
-		  *(GLenum   *)(pc + 8),
-		  answer
-		  ) );
+                                        *(GLenum *) (pc + 8), answer));
 
     if (__glXErrorOccured()) {
 	__GLX_BEGIN_REPLY(0);
 	__GLX_SEND_HEADER();
-    } else {
+    }
+    else {
 	__GLX_BEGIN_REPLY(compsize);
 	((xGLXGetColorTableReply *)&__glXReply)->width = width;
 	__GLX_SEND_HEADER();
@@ -513,14 +536,16 @@ static int GetColorTable(__GLXclientState *cl, GLbyte *pc, GLXContextTag tag)
     return Success;
 }
 
-int __glXDisp_GetColorTable(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_GetColorTable(__GLXclientState * cl, GLbyte * pc)
 {
     const GLXContextTag tag = __GLX_GET_SINGLE_CONTEXT_TAG(pc);
 
     return GetColorTable(cl, pc + __GLX_SINGLE_HDR_SIZE, tag);
 }
 
-int __glXDisp_GetColorTableSGI(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_GetColorTableSGI(__GLXclientState * cl, GLbyte * pc)
 {
     const GLXContextTag tag = __GLX_GET_VENDPRIV_CONTEXT_TAG(pc);
 
