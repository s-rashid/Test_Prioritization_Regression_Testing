diff --git a/hw/xquartz/GL/visualConfigs.c b/hw/xquartz/GL/visualConfigs.c
index 81f88fb..64c8291 100644
--- a/hw/xquartz/GL/visualConfigs.c
+++ b/hw/xquartz/GL/visualConfigs.c
@@ -57,18 +57,16 @@
 #include "visualConfigs.h"
 
 /* Based originally on code from indirect.c which was based on code from i830_dri.c. */
-void setVisualConfigs(void) {
+__GLXconfig *__glXAquaCreateVisualConfigs(int *numConfigsPtr, int screenNumber) {
     int numConfigs = 0;
-    __GLXvisualConfig *visualConfigs = NULL;
-    void **visualPrivates = NULL;
+    __GLXconfig *visualConfigs, *c;
     struct glCapabilities caps;
     struct glCapabilitiesConfig *conf = NULL;
     int stereo, depth, aux, buffers, stencil, accum, color, msample;
-    int i = 0; 
     
     if(getGlCapabilities(&caps)) {
 	ErrorF("error from getGlCapabilities()!\n");
-	return;
+        return NULL;
     }
     
     /*
@@ -113,24 +111,18 @@ void setVisualConfigs(void) {
 	    * (conf->multisample_buffers + 1);
     }
 
+    if(numConfigsPtr)
+        *numConfigsPtr = numConfigs; 
+    
     visualConfigs = xcalloc(sizeof(*visualConfigs), numConfigs);
 
     if(NULL == visualConfigs) {
 	ErrorF("xcalloc failure when allocating visualConfigs\n");
 	freeGlCapabilities(&caps);
-	return;
-    }
-    
-    visualPrivates = xcalloc(sizeof(void *), numConfigs);
-
-    if(NULL == visualPrivates) {
-	ErrorF("xcalloc failure when allocating visualPrivates");
-	freeGlCapabilities(&caps);
-	xfree(visualConfigs);
-	return;
+        return NULL;
     }
     
-    i = 0; /* current buffer */
+    c = visualConfigs; /* current buffer */
     for(conf = caps.configurations; conf; conf = conf->next) {
 	for(stereo = 0; stereo < (conf->stereo ? 2 : 1); ++stereo) {
 	    for(aux = 0; aux < (conf->aux_buffers ? 2 : 1); ++aux) {
@@ -142,98 +134,146 @@ void setVisualConfigs(void) {
 						    conf->total_accum_buffers : 1); ++accum) {
 				for(depth = 0; depth < conf->total_depth_buffer_depths; ++depth) {
 				    for(msample = 0; msample < (conf->multisample_buffers + 1); ++msample) {
-					visualConfigs[i].vid = (VisualID)(-1);
-					visualConfigs[i].class = TrueColor;
 					
-					visualConfigs[i].rgba = true;
-					visualConfigs[i].redSize = conf->color_buffers[color].r;
-					visualConfigs[i].greenSize = conf->color_buffers[color].g;
-					visualConfigs[i].blueSize = conf->color_buffers[color].b;
+                                        // Global
+                                        c->visualID = -1;
+                                        c->visualType = GLX_TRUE_COLOR;
+                                        c->next = c + 1;
+
+                                        c->screen = screenNumber;
 
-					if(GLCAPS_COLOR_BUF_INVALID_VALUE == conf->color_buffers[color].a) {
-					    /* This visual has no alpha. */
-					    visualConfigs[i].alphaSize = 0;
+                                        c->level = 0;
+                                        c->indexBits = 0;
+                                        c->pixmapMode = 0; // TODO: What should this be?
+                                        
+                                        if(conf->accelerated) {
+                                            c->visualRating = GLX_NONE;
 					} else {
-					    visualConfigs[i].alphaSize = conf->color_buffers[color].a;
+                                            c->visualRating = GLX_SLOW_VISUAL_EXT;
 					}
 	
-					/* 
-					 * If the .a/alpha value is unset, then don't add it to the
-					 * bufferSize specification.  The INVALID_VALUE indicates that it
-					 * was unset.
-					 * 
-					 * This prevents odd bufferSizes, such as 14.
-					 */
-					if(GLCAPS_COLOR_BUF_INVALID_VALUE == conf->color_buffers[color].a) {
-					    visualConfigs[i].bufferSize = conf->color_buffers[color].r +
-						conf->color_buffers[color].g + conf->color_buffers[color].b;
+                                        c->transparentPixel = GLX_NONE;
+                                        c->transparentRed = GLX_NONE;
+                                        c->transparentGreen = GLX_NONE;
+                                        c->transparentBlue = GLX_NONE;
+                                        c->transparentAlpha = GLX_NONE;
+                                        c->transparentIndex = GLX_NONE;
+                                        
+                                        c->visualSelectGroup = 0;
+                                        
+                                        c->swapMethod = GLX_SWAP_UNDEFINED_OML;
+                                        
+                                        // Stereo
+                                        c->stereoMode = stereo ? TRUE : FALSE;
+
+                                        // Aux buffers
+                                        c->numAuxBuffers = aux ? conf->aux_buffers : 0;
+                                        
+                                        // Double Buffered
+                                        c->doubleBufferMode = buffers ? TRUE : FALSE;
+
+                                        // Stencil Buffer
+                                        if(conf->total_stencil_bit_depths > 0) {
+                                            c->stencilBits = conf->stencil_bit_depths[stencil];
+                                        } else {
+                                            c->stencilBits = 0;
+                                        }
+                                        
+                                        // Color
+                                        c->redBits = conf->color_buffers[color].r;
+                                        c->greenBits = conf->color_buffers[color].g;
+                                        c->blueBits = conf->color_buffers[color].b;
+                                        
+                                        if(GLCAPS_COLOR_BUF_INVALID_VALUE != conf->color_buffers[color].a) {
+                                            c->alphaBits = conf->color_buffers[color].a;
 					} else {
-					    visualConfigs[i].bufferSize = conf->color_buffers[color].r +
-						conf->color_buffers[color].g + conf->color_buffers[color].b +
-						conf->color_buffers[color].a;
+                                            c->alphaBits = 0;
 					}
 
+                                        c->rgbBits = c->redBits + c->blueBits +
+                                                                   c->blueBits + c->alphaBits;
+
 					/*
 					 * I'm uncertain about these masks.
 					 * I don't think we actually care what the values are in our
 					 * libGL, so it doesn't seem to make a difference.
+                                         *
+                                         * These need to match dfb in xprScreen.c or we'll have a default
+                                         * visual without a corresponding GLX visual.  This causes
+                                         * http://xquartz.macosforge.org/trac/ticket/287
 					 */
-					visualConfigs[i].redMask = -1;
-					visualConfigs[i].greenMask = -1;
-					visualConfigs[i].blueMask = -1;
-					visualConfigs[i].alphaMask = -1;
+                                        c->redMask = 0xff0000;
+                                        c->greenMask = 0x00ff00;
+                                        c->blueMask = 0x0000ff;
+                                        c->alphaMask = 0;
 					
+                                        // Accumulation Buffers
 					if(conf->total_accum_buffers > 0) {
-					    visualConfigs[i].accumRedSize = conf->accum_buffers[accum].r;
-					    visualConfigs[i].accumGreenSize = conf->accum_buffers[accum].g;
-					    visualConfigs[i].accumBlueSize = conf->accum_buffers[accum].b;
+                                            c->accumRedBits = conf->accum_buffers[accum].r;
+                                            c->accumGreenBits = conf->accum_buffers[accum].g;
+                                            c->accumBlueBits = conf->accum_buffers[accum].b;
 					    if(GLCAPS_COLOR_BUF_INVALID_VALUE != conf->accum_buffers[accum].a) {
-						visualConfigs[i].accumAlphaSize = conf->accum_buffers[accum].a;
+                                                c->accumAlphaBits = conf->accum_buffers[accum].a;
 					    } else {
-						visualConfigs[i].accumAlphaSize = 0;
+                                                c->accumAlphaBits = 0;
 					    }
 					} else {
-					    visualConfigs[i].accumRedSize = 0;
-					    visualConfigs[i].accumGreenSize = 0;
-					    visualConfigs[i].accumBlueSize = 0;
-					    visualConfigs[i].accumAlphaSize = 0;
+                                            c->accumRedBits = 0;
+                                            c->accumGreenBits = 0;
+                                            c->accumBlueBits = 0;
+                                            c->accumAlphaBits = 0;
 					}
 					
-					visualConfigs[i].doubleBuffer = buffers ? TRUE : FALSE;
-					visualConfigs[i].stereo = stereo ? TRUE : FALSE;
-
-  					visualConfigs[i].depthSize = conf->depth_buffers[depth];
+                                        // Depth
+                                        c->depthBits = conf->depth_buffers[depth];
 				
-					if(conf->total_stencil_bit_depths > 0) {
-					    visualConfigs[i].stencilSize = conf->stencil_bit_depths[stencil];
+                                        // MultiSample
+                                        if(msample > 0) {
+                                            c->samples = conf->multisample_samples;
+                                            c->sampleBuffers = conf->multisample_buffers;
 					} else {
-					    visualConfigs[i].stencilSize = 0;
+                                            c->samples = 0;
+                                            c->sampleBuffers = 0;
 					}
-					visualConfigs[i].auxBuffers = aux ? conf->aux_buffers : 0;
-					visualConfigs[i].level = 0;
 				
-					if(conf->accelerated) {
-					    visualConfigs[i].visualRating = GLX_NONE;
-					} else {
-					    visualConfigs[i].visualRating = GLX_SLOW_VISUAL_EXT;
-					}
+                                        /* 
+                                         * The Apple libGL supports GLXPixmaps and 
+                                         * GLXPbuffers in direct mode.
+                                         */
+                                        /* SGIX_fbconfig / GLX 1.3 */
+                                        c->drawableType = GLX_WINDOW_BIT | GLX_PIXMAP_BIT | GLX_PBUFFER_BIT;
+                                        c->renderType = GLX_RGBA_BIT;
+                                        c->xRenderable = GL_TRUE;
+                                        c->fbconfigID = -1;
 					
-					visualConfigs[i].transparentPixel = GLX_NONE;
-					visualConfigs[i].transparentRed = GLX_NONE;
-					visualConfigs[i].transparentGreen = GLX_NONE;
-					visualConfigs[i].transparentBlue = GLX_NONE;
-					visualConfigs[i].transparentAlpha = GLX_NONE;
-					visualConfigs[i].transparentIndex = GLX_NONE;
+                                        /* SGIX_pbuffer / GLX 1.3 */
 					
-					if(msample > 0) {
-					    visualConfigs[i].multiSampleSize = conf->multisample_samples;
-					    visualConfigs[i].nMultiSampleBuffers = conf->multisample_buffers;
-					} else {
-					    visualConfigs[i].multiSampleSize = 0;
-					    visualConfigs[i].nMultiSampleBuffers = 0;
-					}
+                                        /* 
+                                         * The CGL layer provides a way of retrieving
+                                         * the maximum pbuffer width/height, but only
+                                         * if we create a context and call glGetIntegerv.
+                                         * 
+                                         * The following values are from a test program
+                                         * that does so.
+                                         */
+                                        c->maxPbufferWidth = 8192;
+                                        c->maxPbufferHeight = 8192;
+                                        c->maxPbufferPixels = /*Do we need this?*/ 0;
+                                        /* 
+                                         * There is no introspection for this sort of thing
+                                         * with CGL.  What should we do realistically?
+                                         */
+                                        c->optimalPbufferWidth = 0;
+                                        c->optimalPbufferHeight = 0;
+                                        
+                                        /* EXT_texture_from_pixmap */
+                                        c->bindToTextureRgb = 0;
+                                        c->bindToTextureRgba = 0;
+                                        c->bindToMipmapTexture = 0;
+                                        c->bindToTextureTargets = 0;
+                                        c->yInverted = 0;
 										
-					++i;
+                                        c = c->next;
 				    }
 				}
 			    }
@@ -244,12 +284,12 @@ void setVisualConfigs(void) {
 	}
     }
 
-    if (i != numConfigs) {
-	ErrorF("numConfigs calculation error in setVisualConfigs!  numConfigs is %d  i is %d\n", numConfigs, i);
-	abort();
+    (c-1)->next = NULL;
+
+    if (c - visualConfigs != numConfigs) {
+        FatalError("numConfigs calculation error in setVisualConfigs!  numConfigs is %d  i is %d\n", numConfigs, c - visualConfigs);
     }
 
     freeGlCapabilities(&caps);
-
-    GlxSetVisualConfigs(numConfigs, visualConfigs, visualPrivates);
+    return visualConfigs;
 }
