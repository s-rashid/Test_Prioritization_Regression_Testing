diff --git a/Xext/xace.c b/Xext/xace.c
index ef69fe3..b2e7dda 100644
--- a/Xext/xace.c
+++ b/Xext/xace.c
@@ -38,7 +38,8 @@ _X_EXPORT CallbackListPtr XaceHooks[XACE_NUM_HOOKS] = {0};
 
 /* Special-cased hook functions.  Called by Xserver.
  */
-int XaceHookDispatch(ClientPtr client, int major)
+int
+XaceHookDispatch(ClientPtr client, int major)
 {
     /* Call the audit begin callback, there is no return value. */
     XaceAuditRec rec = { client, 0 };
@@ -49,7 +50,8 @@ int XaceHookDispatch(ClientPtr client, int major)
 	XaceCoreDispatchRec rec = { client, Success /* default allow */ };
 	CallCallbacks(&XaceHooks[XACE_CORE_DISPATCH], &rec);
 	return rec.status;
-    } else {
+    }
+    else {
 	/* Call the extension dispatch hook */
 	ExtensionEntry *ext = GetExtensionEntry(major);
 	XaceExtAccessRec rec = { client, ext, DixUseAccess, Success };
@@ -60,7 +62,8 @@ int XaceHookDispatch(ClientPtr client, int major)
     }
 }
 
-int XaceHookPropertyAccess(ClientPtr client, WindowPtr pWin,
+int
+XaceHookPropertyAccess(ClientPtr client, WindowPtr pWin,
 			   PropertyPtr *ppProp, Mask access_mode)
 {
     XacePropertyAccessRec rec = { client, pWin, ppProp, access_mode, Success };
@@ -68,15 +71,16 @@ int XaceHookPropertyAccess(ClientPtr client, WindowPtr pWin,
     return rec.status;
 }
 
-int XaceHookSelectionAccess(ClientPtr client,
-			    Selection **ppSel, Mask access_mode)
+int
+XaceHookSelectionAccess(ClientPtr client, Selection ** ppSel, Mask access_mode)
 {
     XaceSelectionAccessRec rec = { client, ppSel, access_mode, Success };
     CallCallbacks(&XaceHooks[XACE_SELECTION_ACCESS], &rec);
     return rec.status;
 }
 
-void XaceHookAuditEnd(ClientPtr ptr, int result)
+void
+XaceHookAuditEnd(ClientPtr ptr, int result)
 {
     XaceAuditRec rec = { ptr, result };
     /* call callbacks, there is no return value. */
@@ -85,7 +89,8 @@ void XaceHookAuditEnd(ClientPtr ptr, int result)
 
 /* Entry point for hook functions.  Called by Xserver.
  */
-int XaceHook(int hook, ...)
+int
+XaceHook(int hook, ...)
 {
     union {
 	XaceResourceAccessRec res;
@@ -112,8 +117,7 @@ int XaceHook(int hook, ...)
      * the arguments and integer return parameter, or in some cases just
      * sets calldata directly to a single argument (with no return result)
      */
-    switch (hook)
-    {
+    switch (hook) {
 	case XACE_RESOURCE_ACCESS:
 	    u.res.client = va_arg(ap, ClientPtr);
 	    u.res.id = va_arg(ap, XID);
@@ -122,6 +126,7 @@ int XaceHook(int hook, ...)
 	    u.res.ptype = va_arg(ap, RESTYPE);
 	    u.res.parent = va_arg(ap, pointer);
 	    u.res.access_mode = va_arg(ap, Mask);
+
 	    u.res.status = Success; /* default allow */
 	    prv = &u.res.status;
 	    break;
@@ -129,6 +134,7 @@ int XaceHook(int hook, ...)
 	    u.dev.client = va_arg(ap, ClientPtr);
 	    u.dev.dev = va_arg(ap, DeviceIntPtr);
 	    u.dev.access_mode = va_arg(ap, Mask);
+
 	    u.dev.status = Success; /* default allow */
 	    prv = &u.dev.status;
 	    break;
@@ -136,16 +142,20 @@ int XaceHook(int hook, ...)
 	    u.send.client = va_arg(ap, ClientPtr);
 	    u.send.dev = va_arg(ap, DeviceIntPtr);
 	    u.send.pWin = va_arg(ap, WindowPtr);
+
 	    u.send.events = va_arg(ap, xEventPtr);
 	    u.send.count = va_arg(ap, int);
+
 	    u.send.status = Success; /* default allow */
 	    prv = &u.send.status;
 	    break;
 	case XACE_RECEIVE_ACCESS:
 	    u.recv.client = va_arg(ap, ClientPtr);
 	    u.recv.pWin = va_arg(ap, WindowPtr);
+
 	    u.recv.events = va_arg(ap, xEventPtr);
 	    u.recv.count = va_arg(ap, int);
+
 	    u.recv.status = Success; /* default allow */
 	    prv = &u.recv.status;
 	    break;
@@ -153,11 +163,13 @@ int XaceHook(int hook, ...)
 	    u.client.client = va_arg(ap, ClientPtr);
 	    u.client.target = va_arg(ap, ClientPtr);
 	    u.client.access_mode = va_arg(ap, Mask);
+
 	    u.client.status = Success; /* default allow */
 	    prv = &u.client.status;
 	    break;
 	case XACE_EXT_ACCESS:
 	    u.ext.client = va_arg(ap, ClientPtr);
+
 	    u.ext.ext = va_arg(ap, ExtensionEntry*);
 	    u.ext.access_mode = DixGetAttrAccess;
 	    u.ext.status = Success; /* default allow */
@@ -166,6 +178,7 @@ int XaceHook(int hook, ...)
 	case XACE_SERVER_ACCESS:
 	    u.server.client = va_arg(ap, ClientPtr);
 	    u.server.access_mode = va_arg(ap, Mask);
+
 	    u.server.status = Success; /* default allow */
 	    prv = &u.server.status;
 	    break;
@@ -174,17 +187,20 @@ int XaceHook(int hook, ...)
 	    u.screen.client = va_arg(ap, ClientPtr);
 	    u.screen.screen = va_arg(ap, ScreenPtr);
 	    u.screen.access_mode = va_arg(ap, Mask);
+
 	    u.screen.status = Success; /* default allow */
 	    prv = &u.screen.status;
 	    break;
 	case XACE_AUTH_AVAIL:
 	    u.auth.client = va_arg(ap, ClientPtr);
 	    u.auth.authId = va_arg(ap, XID);
+
 	    break;
 	case XACE_KEY_AVAIL:
 	    u.key.event = va_arg(ap, xEventPtr);
 	    u.key.keybd = va_arg(ap, DeviceIntPtr);
 	    u.key.count = va_arg(ap, int);
+
 	    break;
 	default:
 	    va_end(ap);
@@ -218,14 +234,11 @@ int XaceHook(int hook, ...)
  *	region of the window will be destroyed (overwritten) in pBuf.
  */
 void
-XaceCensorImage(
-	ClientPtr client,
+XaceCensorImage(ClientPtr client,
 	RegionPtr pVisibleRegion,
 	long widthBytesLine,
 	DrawablePtr pDraw,
-	int x, int y, int w, int h,
-	unsigned int format,
-	char *pBuf)
+                int x, int y, int w, int h, unsigned int format, char *pBuf)
 {
     RegionRec imageRegion;  /* region representing x,y,w,h */
     RegionRec censorRegion; /* region to obliterate */
@@ -242,8 +255,7 @@ XaceCensorImage(
     /* censorRegion = imageRegion - visibleRegion */
     RegionSubtract(&censorRegion, &imageRegion, pVisibleRegion);
     nRects = RegionNumRects(&censorRegion);
-    if (nRects > 0)
-    { /* we have something to censor */
+    if (nRects > 0) {           /* we have something to censor */
 	GCPtr pScratchGC = NULL;
 	PixmapPtr pPix = NULL;
 	xRectangle *pRects = NULL;
@@ -256,15 +268,11 @@ XaceCensorImage(
 	/* convert region to list-of-rectangles for PolyFillRect */
 
 	pRects = malloc(nRects * sizeof(xRectangle));
-	if (!pRects)
-	{
+        if (!pRects) {
 	    failed = TRUE;
 	    goto failSafe;
 	}
-	for (pBox = RegionRects(&censorRegion), i = 0;
-	     i < nRects;
-	     i++, pBox++)
-	{
+        for (pBox = RegionRects(&censorRegion), i = 0; i < nRects; i++, pBox++) {
 	    pRects[i].x = pBox->x1;
 	    pRects[i].y = pBox->y1 - imageBox.y1;
 	    pRects[i].width  = pBox->x2 - pBox->x1;
@@ -273,8 +281,7 @@ XaceCensorImage(
 
 	/* use pBuf as a fake pixmap */
 
-	if (format == ZPixmap)
-	{
+        if (format == ZPixmap) {
 	    depth = pDraw->depth;
 	    bitsPerPixel = pDraw->bitsPerPixel;
 	}
@@ -282,15 +289,13 @@ XaceCensorImage(
 	pPix = GetScratchPixmapHeader(pDraw->pScreen, w, h,
 		    depth, bitsPerPixel,
 		    widthBytesLine, (pointer)pBuf);
-	if (!pPix)
-	{
+        if (!pPix) {
 	    failed = TRUE;
 	    goto failSafe;
 	}
 
 	pScratchGC = GetScratchGC(depth, pPix->drawable.pScreen);
-	if (!pScratchGC)
-	{
+        if (!pScratchGC) {
 	    failed = TRUE;
 	    goto failSafe;
 	}
@@ -300,16 +305,17 @@ XaceCensorImage(
 			    pScratchGC, nRects, pRects);
 
     failSafe:
-	if (failed)
-	{
+        if (failed) {
 	    /* Censoring was not completed above.  To be safe, wipe out
 	     * all the image data so that nothing trusted gets out.
 	     */
 	    memset(pBuf, 0, (int)(widthBytesLine * h));
 	}
 	free(pRects);
-	if (pScratchGC) FreeScratchGC(pScratchGC);
-	if (pPix)       FreeScratchPixmapHeader(pPix);
+        if (pScratchGC)
+            FreeScratchGC(pScratchGC);
+        if (pPix)
+            FreeScratchPixmapHeader(pPix);
     }
     RegionUninit(&imageRegion);
     RegionUninit(&censorRegion);
@@ -318,14 +324,18 @@ XaceCensorImage(
 /*
  * Xtrans wrappers for use by modules
  */
-int XaceGetConnectionNumber(ClientPtr client)
+int
+XaceGetConnectionNumber(ClientPtr client)
 {
     XtransConnInfo ci = ((OsCommPtr)client->osPrivate)->trans_conn;
+
     return _XSERVTransGetConnectionNumber(ci);
 }
 
-int XaceIsLocal(ClientPtr client)
+int
+XaceIsLocal(ClientPtr client)
 {
     XtransConnInfo ci = ((OsCommPtr)client->osPrivate)->trans_conn;
+
     return _XSERVTransIsLocal(ci);
 }
