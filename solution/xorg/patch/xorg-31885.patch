diff --git a/hw/kdrive/ephyr/ephyr.c b/hw/kdrive/ephyr/ephyr.c
index e8001df..c5cb21a 100644
--- a/hw/kdrive/ephyr/ephyr.c
+++ b/hw/kdrive/ephyr/ephyr.c
@@ -34,6 +34,7 @@
 #include "ephyr.h"
 
 #include "inputstr.h"
+#include "scrnintstr.h"
 
 extern int KdTsPhyScreen;
 KdKeyboardInfo *ephyrKbd;
@@ -83,7 +84,7 @@ ephyrScreenInitialize (KdScreenInfo *screen, EphyrScrPriv *scrpriv)
   int width = 640, height = 480; 
   unsigned long redMask, greenMask, blueMask;
   
-  if (hostx_want_screen_size(&width, &height) 
+  if (hostx_want_screen_size(screen, &width, &height)
       || !screen->width || !screen->height)
     {
       screen->width = width;
@@ -99,13 +100,13 @@ ephyrScreenInitialize (KdScreenInfo *screen, EphyrScrPriv *scrpriv)
 	  && (screen->fb[0].depth == 24 || screen->fb[0].depth == 16
 	      || screen->fb[0].depth == 8))
 	{
-	  hostx_set_server_depth(screen->fb[0].depth);
+	  hostx_set_server_depth(screen, screen->fb[0].depth);
 	}
       else 
 	ErrorF("\nXephyr: requested screen depth not supported, setting to match hosts.\n");
     }
   
-  screen->fb[0].depth = hostx_get_server_depth();
+  screen->fb[0].depth = hostx_get_server_depth(screen);
   screen->rate = 72;
   
   if (screen->fb[0].depth <= 8)
@@ -146,7 +147,7 @@ ephyrScreenInitialize (KdScreenInfo *screen, EphyrScrPriv *scrpriv)
 	  screen->fb[0].bitsPerPixel = 32;
 	}
 
-      hostx_get_visual_masks (&redMask, &greenMask, &blueMask);
+      hostx_get_visual_masks (screen, &redMask, &greenMask, &blueMask);
 
       screen->fb[0].redMask = (Pixel) redMask;
       screen->fb[0].greenMask = (Pixel) greenMask;
@@ -194,9 +195,7 @@ ephyrWindowLinear (ScreenPtr	pScreen,
   EphyrPriv	    *priv = pScreenPriv->card->driver;
   
   if (!pScreenPriv->enabled)
-    {
       return 0;
-    }
 
   *size = priv->bytes_per_line;
   return priv->base + row * priv->bytes_per_line + offset;
@@ -210,8 +209,8 @@ ephyrMapFramebuffer (KdScreenInfo *screen)
   KdPointerMatrix m;
   int buffer_height;
   
-  EPHYR_DBG(" screen->width: %d, screen->height: %d",
-	    screen->width, screen->height);
+  EPHYR_DBG("screen->width: %d, screen->height: %d index=%d",
+	     screen->width, screen->height, screen->mynum);
   
   KdComputePointerMatrix (&m, scrpriv->randr, screen->width, screen->height);
   KdSetPointerMatrix (&m);
@@ -227,7 +226,7 @@ ephyrMapFramebuffer (KdScreenInfo *screen)
   else
     buffer_height = 3 * screen->height;
   
-  priv->base = hostx_screen_init (screen->width, screen->height, buffer_height);
+  priv->base = hostx_screen_init (screen, screen->width, screen->height, buffer_height);
 
   screen->memory_base  = (CARD8 *) (priv->base);
   screen->memory_size  = priv->bytes_per_line * buffer_height;
@@ -304,7 +303,7 @@ ephyrShadowUpdate (ScreenPtr pScreen, shadowBufPtr pBuf)
    * pBuf->pDamage  regions     
   */
   shadowUpdateRotatePacked(pScreen, pBuf);
-  hostx_paint_rect(0,0,0,0, screen->width, screen->height);
+  hostx_paint_rect(screen, 0,0,0,0, screen->width, screen->height);
 }
 
 static void
@@ -330,13 +329,13 @@ ephyrInternalDamageRedisplay (ScreenPtr pScreen)
       
       while (nbox--)
 	{
-	  hostx_paint_rect(pbox->x1, pbox->y1,
+          hostx_paint_rect(screen,
+                           pbox->x1, pbox->y1,
 			   pbox->x1, pbox->y1,
 			   pbox->x2 - pbox->x1,
 			   pbox->y2 - pbox->y1);
 	  pbox++;
 	}
-      
       DamageEmpty (scrpriv->pDamage);
     }
 }
@@ -435,7 +434,7 @@ ephyrRandRGetInfo (ScreenPtr pScreen, Rotation *rotations)
   
   *rotations = RR_Rotate_All|RR_Reflect_All;
   
-  if (!hostx_want_preexisting_window()
+  if (!hostx_want_preexisting_window (screen)
       && !hostx_want_fullscreen()) /* only if no -parent switch */
     {
       while (sizes[n].width != 0 && sizes[n].height != 0)
@@ -586,9 +585,7 @@ ephyrRandRInit (ScreenPtr pScreen)
   rrScrPrivPtr    pScrPriv;
   
   if (!RRScreenInit (pScreen))
-    {
       return FALSE;
-    }
   
   pScrPriv = rrGetScrPriv(pScreen);
   pScrPriv->rrGetInfo = ephyrRandRGetInfo;
@@ -606,6 +603,12 @@ ephyrCreateColormap (ColormapPtr pmap)
 Bool
 ephyrInitScreen (ScreenPtr pScreen)
 {
+  KdScreenPriv(pScreen);
+  KdScreenInfo	*screen    = pScreenPriv->screen;
+
+  EPHYR_DBG ("pScreen->myNum:%d\n", pScreen->myNum) ;
+  hostx_set_screen_number (screen, pScreen->myNum);
+  hostx_set_win_title (screen, "(ctrl+shift grabs mouse and keyboard)") ;
   pScreen->CreateColormap = ephyrCreateColormap;
   return TRUE;
 }
@@ -634,7 +637,8 @@ ephyrCreateResources (ScreenPtr pScreen)
   KdScreenInfo	*screen    = pScreenPriv->screen;
   EphyrScrPriv	*scrpriv   = screen->driver;
 
-  EPHYR_DBG("mark");
+  EPHYR_DBG("mark pScreen=%p mynum=%d shadow=%d",
+            pScreen, pScreen->myNum, scrpriv->shadow);
 
   if (scrpriv->shadow) 
     return KdShadowSet (pScreen, 
@@ -743,6 +747,56 @@ ephyrUpdateModifierState(unsigned int state)
     }
 }
 
+static void
+ephyrBlockSigio (void)
+{
+    sigset_t set;
+
+    sigemptyset (&set);
+    sigaddset (&set, SIGIO);
+    sigprocmask (SIG_BLOCK, &set, 0);
+}
+
+static void
+ephyrUnblockSigio (void)
+{
+    sigset_t set;
+
+    sigemptyset (&set);
+    sigaddset (&set, SIGIO);
+    sigprocmask (SIG_UNBLOCK, &set, 0);
+}
+
+static Bool
+ephyrCursorOffScreen(ScreenPtr *ppScreen, int *x, int *y)
+{
+  return FALSE;
+}
+
+static void
+ephyrCrossScreen (ScreenPtr pScreen, Bool entering)
+{
+}
+
+int ephyrCurScreen; /*current event screen*/
+
+static void
+ephyrWarpCursor (ScreenPtr pScreen, int x, int y)
+{
+    ephyrBlockSigio ();
+    ephyrCurScreen = pScreen->myNum;
+    miPointerWarpCursor (pScreen, x, y);
+    ephyrUnblockSigio ();
+}
+
+miPointerScreenFuncRec ephyrPointerScreenFuncs =
+{
+  ephyrCursorOffScreen,
+  ephyrCrossScreen,
+  ephyrWarpCursor
+};
+
+
 void
 ephyrPoll(void)
 {
@@ -754,18 +808,36 @@ ephyrPoll(void)
 	{
 	case EPHYR_EV_MOUSE_MOTION:
           if (!ephyrMouse ||
-              !((EphyrPointerPrivate *)ephyrMouse->driverPrivate)->enabled)
+              !((EphyrPointerPrivate *)ephyrMouse->driverPrivate)->enabled) {
+              EPHYR_DBG ("skipping mouse motion:%d\n", ephyrCurScreen) ;
               continue;
+          }
+          {
+            if (ephyrCurScreen != ev.data.mouse_motion.screen)
+              {
+                  EPHYR_DBG ("warping mouse cursor:%d\n", ephyrCurScreen) ;
+                  ephyrWarpCursor(screenInfo.screens[ev.data.mouse_motion.screen],
+                                   ev.data.mouse_motion.x,
+                                   ev.data.mouse_motion.y );
+              }
+            else
+              {
+                  EPHYR_DBG ("enqueuing mouse motion:%d\n", ephyrCurScreen) ;
 	  KdEnqueuePointerEvent(ephyrMouse, mouseState,  
 			        ev.data.mouse_motion.x, 
 			        ev.data.mouse_motion.y,
                                 0);
+              }
+          }
 	  break;
 	  
 	case EPHYR_EV_MOUSE_PRESS:
           if (!ephyrMouse ||
-              !((EphyrPointerPrivate *)ephyrMouse->driverPrivate)->enabled)
+              !((EphyrPointerPrivate *)ephyrMouse->driverPrivate)->enabled) {
+              EPHYR_DBG ("skipping mouse press:%d\n", ephyrCurScreen) ;
               continue;
+          }
+          EPHYR_DBG ("enqueuing mouse press:%d\n", ephyrCurScreen) ;
 	  ephyrUpdateModifierState(ev.key_state);
 	  mouseState |= ev.data.mouse_down.button_num;
 	  KdEnqueuePointerEvent(ephyrMouse, mouseState|KD_MOUSE_DELTA, 0, 0, 0);
@@ -777,6 +849,7 @@ ephyrPoll(void)
               continue;
 	  ephyrUpdateModifierState(ev.key_state);
 	  mouseState &= ~ev.data.mouse_up.button_num;
+          EPHYR_DBG ("enqueuing mouse release:%d\n", ephyrCurScreen) ;
 	  KdEnqueuePointerEvent(ephyrMouse, mouseState|KD_MOUSE_DELTA, 0, 0, 0);
 	  break;
 
@@ -792,7 +865,6 @@ ephyrPoll(void)
           if (!ephyrKbd ||
               !((EphyrKbdPrivate *)ephyrKbd->driverPrivate)->enabled)
               continue;
-	  ephyrUpdateModifierState(ev.key_state);
 	  KdEnqueueKeyboardEvent (ephyrKbd, ev.data.key_up.scancode, TRUE);
 	  break;
 
