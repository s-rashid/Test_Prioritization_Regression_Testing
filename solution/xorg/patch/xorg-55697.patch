diff --git a/hw/xfree86/xaa/xaaLine.c b/hw/xfree86/xaa/xaaLine.c
index d6c06eb..d7c6097 100644
--- a/hw/xfree86/xaa/xaaLine.c
+++ b/hw/xfree86/xaa/xaaLine.c
@@ -17,23 +17,16 @@
 #include "xaa.h"
 #include "xaalocal.h"
 
-
 void
 #ifdef POLYSEGMENT
-XAAPolySegment(
-    DrawablePtr	pDrawable,
-    GCPtr	pGC,
-    int		nseg,
-    xSegment	*pSeg
+ XAAPolySegment(DrawablePtr pDrawable, GCPtr pGC, int nseg, xSegment * pSeg
 #else
-XAAPolyLines(
-    DrawablePtr pDrawable,
-    GCPtr	pGC,
-    int		mode,		/* Origin or Previous */
+XAAPolyLines(DrawablePtr pDrawable, GCPtr pGC, int mode,        /* Origin or Previous */
     int		npt,		/* number of points */
     DDXPointPtr pptInit
 #endif
-){
+    )
+{
     XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_GC(pGC);
     BoxPtr pboxInit = RegionRects(pGC->pCompositeClip);
     int nboxInit = RegionNumRects(pGC->pCompositeClip);
@@ -42,6 +35,7 @@ XAAPolyLines(
     int yorg = pDrawable->y;
     int nbox;
     BoxPtr pbox;
+
 #ifndef POLYSEGMENT
     DDXPointPtr ppt;
 #endif
@@ -55,6 +49,7 @@ XAAPolyLines(
 	int maxValX = infoRec->SolidLineLimits.x2;
 	int minValY = infoRec->SolidLineLimits.y1;
 	int maxValY = infoRec->SolidLineLimits.y2;
+
 #ifdef POLYSEGMENT
 	int n = nseg;
 	xSegment *s = pSeg;
@@ -90,8 +85,7 @@ XAAPolyLines(
 #endif
 	    if (x1 > maxValX || x1 < minValX ||
 		x2 > maxValX || x2 < minValX ||
-		y1 > maxValY || y1 < minValY ||
-		y2 > maxValY || y2 < minValY) {
+                y1 > maxValY || y1 < minValY || y2 > maxValY || y2 < minValY) {
 #ifdef POLYSEGMENT
 		XAAFallbackOps.PolySegment(pDrawable, pGC, nseg, pSeg);
 #else
@@ -144,11 +138,13 @@ XAAPolyLines(
 		y2 = y1 + 1; 
 		y1 = tmp + 1;
 #ifdef POLYSEGMENT
-		if (pGC->capStyle != CapNotLast) y1--;
+                if (pGC->capStyle != CapNotLast)
+                    y1--;
 #endif
 	    }
 #ifdef POLYSEGMENT
-	    else if (pGC->capStyle != CapNotLast) y2++;
+            else if (pGC->capStyle != CapNotLast)
+                y2++;
 #endif
 	    /* get to first band that might contain part of line */
 	    while(nbox && (pbox->y2 <= y1)) {
@@ -161,8 +157,10 @@ XAAPolyLines(
 		if ((x1 >= pbox->x1) && (x1 < pbox->x2)) {
 		    tmp = max(y1, pbox->y1);
 		    len = min(y2, pbox->y2) - tmp;
-		    if (len) (*infoRec->SubsequentSolidHorVertLine)(
-				infoRec->pScrn, x1, tmp, len, DEGREES_270);
+                    if (len)
+                        (*infoRec->SubsequentSolidHorVertLine) (infoRec->pScrn,
+                                                                x1, tmp, len,
+                                                                DEGREES_270);
 		}
 		nbox--;
 		pbox++;
@@ -170,18 +168,21 @@ XAAPolyLines(
 #ifndef POLYSEGMENT
 	    y2 = ppt->y + yorg;
 #endif
-	} else if (y1 == y2) { /* horizontal line */
+        }
+        else if (y1 == y2) {    /* horizontal line */
 	/* force line from left to right, keeping endpoint semantics */
 	    if (x1 > x2) {
 		tmp = x2; 
 		x2 = x1 + 1; 
 		x1 = tmp + 1;
 #ifdef POLYSEGMENT
-		if (pGC->capStyle != CapNotLast)  x1--;
+                if (pGC->capStyle != CapNotLast)
+                    x1--;
 #endif
 	    }
 #ifdef POLYSEGMENT
-	    else if (pGC->capStyle != CapNotLast) x2++;
+            else if (pGC->capStyle != CapNotLast)
+                x2++;
 #endif
 
 	    /* find the correct band */
@@ -193,6 +194,7 @@ XAAPolyLines(
 	    /* try to draw the line, if we haven't gone beyond it */
 	    if (nbox && (pbox->y1 <= y1)) {
 		int orig_y = pbox->y1;
+
 		/* when we leave this band, we're done */
 		while(nbox && (orig_y == pbox->y1)) {
 		    if (pbox->x2 <= x1) {
@@ -210,8 +212,10 @@ XAAPolyLines(
 
 		    tmp = max(x1, pbox->x1);
 		    len = min(x2, pbox->x2) - tmp;
-		    if (len) (*infoRec->SubsequentSolidHorVertLine)(
-				infoRec->pScrn, tmp, y1, len, DEGREES_0);
+                    if (len)
+                        (*infoRec->SubsequentSolidHorVertLine) (infoRec->pScrn,
+                                                                tmp, y1, len,
+                                                                DEGREES_0);
 		    nbox--;
 		    pbox++;
 		}
@@ -219,7 +223,8 @@ XAAPolyLines(
 #ifndef POLYSEGMENT
 	    x2 = ppt->x + xorg;
 #endif
-	} else{ /* sloped line */
+        }
+        else {                  /* sloped line */
 	    unsigned int oc1, oc2;
 	    int dmin, dmaj, e, octant;
 
@@ -227,7 +232,9 @@ XAAPolyLines(
 	        if((dmaj = x2 - x1) < 0) {
 		   dmaj = -dmaj;
 		   octant = XDECREASING;
-		} else octant = 0;		   
+                }
+                else
+                    octant = 0;
 
 	        if((dmin = y2 - y1) < 0) {
 		   dmin = -dmin;
@@ -235,7 +242,9 @@ XAAPolyLines(
 		}	
 	
 		if(dmin >= dmaj){
-		    tmp = dmin; dmin = dmaj; dmaj = tmp;
+                    tmp = dmin;
+                    dmin = dmaj;
+                    dmaj = tmp;
 		    octant |= YMAJOR;
 		}
 
@@ -243,7 +252,8 @@ XAAPolyLines(
 		len = dmaj;
 		dmin <<= 1;
 		dmaj <<= 1;
-	    } else {	/* Muffle compiler */
+            }
+            else {              /* Muffle compiler */
 		dmin = dmaj = e = octant = len = 0;
 	    }
 
@@ -253,47 +263,66 @@ XAAPolyLines(
 		OUTCODES(oc2, x2, y2, pbox);
 		if (!(oc1 | oc2)) {   /* unclipped */
 		    if(infoRec->SubsequentSolidTwoPointLine) {
-			(*infoRec->SubsequentSolidTwoPointLine)(
-				infoRec->pScrn, x1, y1, x2, y2, 
+                        (*infoRec->SubsequentSolidTwoPointLine) (infoRec->pScrn,
+                                                                 x1, y1, x2, y2,
 #ifdef POLYSEGMENT
-			    	(pGC->capStyle != CapNotLast) ? 0 :
+                                                                 (pGC->
+                                                                  capStyle !=
+                                                                  CapNotLast) ?
+                                                                 0 :
 #endif
-				OMIT_LAST
-			);
-		    } else {
-			(*infoRec->SubsequentSolidBresenhamLine)(
-				infoRec->pScrn, x1, y1, dmaj, dmin, e, 
+                                                                 OMIT_LAST);
+                    }
+                    else {
+                        (*infoRec->SubsequentSolidBresenhamLine) (infoRec->
+                                                                  pScrn, x1, y1,
+                                                                  dmaj, dmin, e,
 #ifdef POLYSEGMENT
-			    	(pGC->capStyle != CapNotLast) ? (len+1) :
+                                                                  (pGC->
+                                                                   capStyle !=
+                                                                   CapNotLast)
+                                                                  ? (len + 1) :
 #endif
 			    	len, octant);
 		    }
 		    break;
-		} else if (oc1 & oc2) { /* completely clipped */
+                }
+                else if (oc1 & oc2) {   /* completely clipped */
 		    pbox++;
-		} else if (infoRec->ClippingFlags & HARDWARE_CLIP_SOLID_LINE) {
+                }
+                else if (infoRec->ClippingFlags & HARDWARE_CLIP_SOLID_LINE) {
 		    (*infoRec->SetClippingRectangle)(infoRec->pScrn,
-			pbox->x1, pbox->y1, pbox->x2 - 1, pbox->y2 - 1);
+                                                      pbox->x1, pbox->y1,
+                                                      pbox->x2 - 1,
+                                                      pbox->y2 - 1);
 
 		    if(infoRec->SubsequentSolidBresenhamLine) {
-			(*infoRec->SubsequentSolidBresenhamLine)(
-				infoRec->pScrn, x1, y1, dmaj, dmin, e, 
+                        (*infoRec->SubsequentSolidBresenhamLine) (infoRec->
+                                                                  pScrn, x1, y1,
+                                                                  dmaj, dmin, e,
 #ifdef POLYSEGMENT
-			    	(pGC->capStyle != CapNotLast) ? (len+1) :
+                                                                  (pGC->
+                                                                   capStyle !=
+                                                                   CapNotLast)
+                                                                  ? (len + 1) :
 #endif
 			    	len, octant);
-		    } else {
-			(*infoRec->SubsequentSolidTwoPointLine)(
-				infoRec->pScrn, x1, y1, x2, y2, 
+                    }
+                    else {
+                        (*infoRec->SubsequentSolidTwoPointLine) (infoRec->pScrn,
+                                                                 x1, y1, x2, y2,
 #ifdef POLYSEGMENT
-			    	(pGC->capStyle != CapNotLast) ? 0 :
+                                                                 (pGC->
+                                                                  capStyle !=
+                                                                  CapNotLast) ?
+                                                                 0 :
 #endif
-				OMIT_LAST
-			);
+                                                                 OMIT_LAST);
 		    }
 		    (*infoRec->DisableClipping)(infoRec->pScrn);
 		    pbox++;
-		} else {
+                }
+                else {
 		    int new_x1 = x1, new_y1 = y1, new_x2 = x2, new_y2 = y2;
 		    int clip1 = 0, clip2 = 0;
 		    int err, adx, ady;
@@ -301,7 +330,8 @@ XAAPolyLines(
 		    if(octant & YMAJOR) {
 			ady = dmaj >> 1;
 			adx = dmin >> 1;
-		    } else {
+                    }
+                    else {
 			ady = dmin >> 1;
 			adx = dmaj >> 1;
 		    }
@@ -310,8 +340,7 @@ XAAPolyLines(
 				       pbox->x2 - 1, pbox->y2 - 1,
 				       &new_x1, &new_y1, &new_x2, &new_y2,
 				       adx, ady, &clip1, &clip2,
-				       octant, bias, oc1, oc2) == -1)
-		    {
+                                       octant, bias, oc1, oc2) == -1) {
 			pbox++;
 			continue;
 		    }
@@ -328,6 +357,7 @@ XAAPolyLines(
 #endif
 		    if (len) {
 		    	int abserr, clipdx, clipdy;
+
 			/* unwind bresenham error term to first point */
 			if (clip1) {
 			    clipdx = abs(new_x1 - x1);
@@ -337,23 +367,25 @@ XAAPolyLines(
 				err = e + clipdy*dmin - clipdx*dmaj;
 			    else
 				err = e + clipdx*dmin - clipdy*dmaj;
-			} else
+                        }
+                        else
 			    err = e;
 
 #define range infoRec->SolidBresenhamLineErrorTermBits
 			abserr = abs(err);			    
 			while((abserr & range) || 
-			      (dmaj & range) ||
-			      (dmin & range)) {
+                               (dmaj & range) || (dmin & range)) {
 				dmin >>= 1;
 				dmaj >>= 1;
 				abserr >>= 1;
 				err /= 2;
 			}
 
-			(*infoRec->SubsequentSolidBresenhamLine)(
-				infoRec->pScrn, new_x1, new_y1,
-				dmaj, dmin, err, len, octant);
+                        (*infoRec->SubsequentSolidBresenhamLine) (infoRec->
+                                                                  pScrn, new_x1,
+                                                                  new_y1, dmaj,
+                                                                  dmin, err,
+                                                                  len, octant);
 		    }
 		    pbox++;
 		}
@@ -370,17 +402,14 @@ XAAPolyLines(
     if ((pGC->capStyle != CapNotLast) &&
 	((ppt->x + xorg != pptInit->x + pDrawable->x) ||
 	 (ppt->y + yorg != pptInit->y + pDrawable->y) ||
-	 (ppt == pptInit + 1)))
-    {
+         (ppt == pptInit + 1))) {
 	nbox = nboxInit;
 	pbox = pboxInit;
-	while (nbox--)
-	{
+        while (nbox--) {
 	    if ((x2 >= pbox->x1) && (y2 >= pbox->y1) &&
-		(x2 <  pbox->x2) && (y2 <  pbox->y2))
-	    {
-		(*infoRec->SubsequentSolidHorVertLine)(
-			infoRec->pScrn, x2, y2, 1, DEGREES_0);
+                (x2 < pbox->x2) && (y2 < pbox->y2)) {
+                (*infoRec->SubsequentSolidHorVertLine) (infoRec->pScrn, x2, y2,
+                                                        1, DEGREES_0);
 		break;
 	    }
 	    else
@@ -391,4 +420,3 @@ XAAPolyLines(
 
     SET_SYNC_FLAG(infoRec);
 }
-
