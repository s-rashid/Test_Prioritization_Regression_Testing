diff --git a/hw/xfree86/common/xf86VGAarbiter.c b/hw/xfree86/common/xf86VGAarbiter.c
index c389739..9b72331 100644
--- a/hw/xfree86/common/xf86VGAarbiter.c
+++ b/hw/xfree86/common/xf86VGAarbiter.c
@@ -35,6 +35,7 @@
 #ifdef HAVE_PCI_DEVICE_VGAARB_INIT
 #include "xf86VGAarbiterPriv.h"
 #include "xf86Bus.h"
+#include "xf86Priv.h"
 #include "pciaccess.h"
 
 #ifdef DEBUG
@@ -153,18 +154,34 @@ xf86VGAarbiterDeviceDecodes(ScrnInfoPtr pScrn)
 }
 
 Bool
-xf86VGAarbiterWrapFunctions(ScreenPtr pScreen)
+xf86VGAarbiterWrapFunctions(void)
 {
     ScrnInfoPtr pScrn;
     VGAarbiterScreenPtr pScreenPriv;
     miPointerScreenPtr PointPriv;
 #ifdef RENDER
-    PictureScreenPtr    ps = GetPictureScreenIfSet(pScreen);
+    PictureScreenPtr    ps;
 #endif
+    ScreenPtr pScreen;
+    int vga_count, i;
 
     if (vga_no_arb)
 	return FALSE;
 
+    /*
+     * we need to wrap the arbiter if we have more than
+     * one VGA card - hotplug cries.
+     */
+    pci_device_vgaarb_get_info(NULL, &vga_count, NULL);
+    if (vga_count < 2 || !xf86Screens)
+        return FALSE;
+
+    xf86Msg(X_INFO,"Found %d VGA devices: arbiter wrapping enabled\n",
+            vga_count);
+
+    for (i = 0; i < xf86NumScreens; i++) {
+        pScreen = xf86Screens[i]->pScreen;
+        ps = GetPictureScreenIfSet(pScreen);
     pScrn = xf86Screens[pScreen->myNum];
     PointPriv = dixLookupPrivate(&pScreen->devPrivates, miPointerScreenKey);
 
@@ -206,6 +223,8 @@ xf86VGAarbiterWrapFunctions(ScreenPtr pScreen)
     WRAP_SCREEN_INFO(LeaveVT, VGAarbiterLeaveVT);
     WRAP_SCREEN_INFO(FreeScreen, VGAarbiterFreeScreen);
     WRAP_SPRITE;
+    }
+
     return TRUE;
 }
 
@@ -1152,6 +1171,6 @@ void xf86VGAarbiterUnlock(ScrnInfoPtr pScrn) {}
 Bool xf86VGAarbiterAllowDRI(ScreenPtr pScreen) { return TRUE; }
 void xf86VGAarbiterScrnInit(ScrnInfoPtr pScrn) {}
 void xf86VGAarbiterDeviceDecodes(ScrnInfoPtr pScrn) {}
-Bool xf86VGAarbiterWrapFunctions(ScreenPtr pScreen) { return FALSE; }
+Bool xf86VGAarbiterWrapFunctions(void) { return FALSE; }
 
 #endif
