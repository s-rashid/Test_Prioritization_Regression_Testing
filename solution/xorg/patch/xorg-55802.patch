diff --git a/hw/xquartz/xpr/dri.c b/hw/xquartz/xpr/dri.c
index a58f2c7..0ce1d07 100644
--- a/hw/xquartz/xpr/dri.c
+++ b/hw/xquartz/xpr/dri.c
@@ -75,12 +75,16 @@ SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #include <AvailabilityMacros.h>
 
 static DevPrivateKeyRec DRIScreenPrivKeyRec;
+
 #define DRIScreenPrivKey (&DRIScreenPrivKeyRec)
 static DevPrivateKeyRec DRIWindowPrivKeyRec;
+
 #define DRIWindowPrivKey (&DRIWindowPrivKeyRec)
 static DevPrivateKeyRec DRIPixmapPrivKeyRec;
+
 #define DRIPixmapPrivKey (&DRIPixmapPrivKeyRec)
 static DevPrivateKeyRec DRIPixmapBufferPrivKeyRec;
+
 #define DRIPixmapBufferPrivKey (&DRIPixmapBufferPrivKeyRec)
 
 static RESTYPE DRIDrawablePrivResType;
@@ -213,7 +217,8 @@ DRIAuthConnection(ScreenPtr pScreen, unsigned int magic)
 
     DRIScreenPrivPtr pDRIPriv = DRI_SCREEN_PRIV(pScreen);
 
-    if (drmAuthMagic(pDRIPriv->drmFD, magic)) return FALSE;
+    if (drmAuthMagic(pDRIPriv->drmFD, magic))
+        return FALSE;
 #endif
     return TRUE;
 }
@@ -251,7 +256,8 @@ DRIUpdateSurface(DRIDrawablePrivPtr pDRIDrawablePriv, DrawablePtr pDraw)
 
         flags |= XP_BOUNDS | XP_SHAPE;
 
-    } else if (pDraw->type == DRAWABLE_PIXMAP) {
+    }
+    else if (pDraw->type == DRAWABLE_PIXMAP) {
         wc.x = 0;
         wc.y = 0;
         wc.width = pDraw->width;
@@ -265,7 +271,8 @@ DRIUpdateSurface(DRIDrawablePrivPtr pDRIDrawablePriv, DrawablePtr pDraw)
 
 /* Return NULL if an error occurs. */
 static DRIDrawablePrivPtr
-CreateSurfaceForWindow(ScreenPtr pScreen, WindowPtr pWin, xp_window_id *widPtr) {
+CreateSurfaceForWindow(ScreenPtr pScreen, WindowPtr pWin, xp_window_id * widPtr)
+{
     DRIDrawablePrivPtr pDRIDrawablePriv;
     xp_window_id wid = 0;
 
@@ -316,8 +323,7 @@ CreateSurfaceForWindow(ScreenPtr pScreen, WindowPtr pWin, xp_window_id *widPtr)
 	}
 
 	/* save private off of preallocated index */
-	dixSetPrivate(&pWin->devPrivates, DRIWindowPrivKey,
-		      pDRIDrawablePriv);
+        dixSetPrivate(&pWin->devPrivates, DRIWindowPrivKey, pDRIDrawablePriv);
     }
 
     *widPtr = wid;
@@ -327,7 +333,8 @@ CreateSurfaceForWindow(ScreenPtr pScreen, WindowPtr pWin, xp_window_id *widPtr)
 
 /* Return NULL if an error occurs. */
 static DRIDrawablePrivPtr
-CreateSurfaceForPixmap(ScreenPtr pScreen, PixmapPtr pPix) {
+CreateSurfaceForPixmap(ScreenPtr pScreen, PixmapPtr pPix)
+{
     DRIDrawablePrivPtr pDRIDrawablePriv;
      
     pDRIDrawablePriv = DRI_DRAWABLE_PRIV_FROM_PIXMAP(pPix);
@@ -361,14 +368,12 @@ CreateSurfaceForPixmap(ScreenPtr pScreen, PixmapPtr pPix) {
 	 */
 
 	/* save private off of preallocated index */
-	dixSetPrivate(&pPix->devPrivates, DRIPixmapPrivKey,
-		      pDRIDrawablePriv);
+        dixSetPrivate(&pPix->devPrivates, DRIPixmapPrivKey, pDRIDrawablePriv);
     }
     
     return pDRIDrawablePriv;
 }
 
-
 Bool
 DRICreateSurface(ScreenPtr pScreen, Drawable id,
                  DrawablePtr pDrawable, xp_client_id client_id,
@@ -400,7 +405,6 @@ DRICreateSurface(ScreenPtr pScreen, Drawable id,
         return FALSE;
     }
     
-    
     /* Finish initialization of new surfaces */
     if (pDRIDrawablePriv->refCount == 0) {
         unsigned int key[2] = {0};
@@ -412,8 +416,7 @@ DRICreateSurface(ScreenPtr pScreen, Drawable id,
 	     * Xplugin accepts a 0 wid if the surface id is offscreen, such 
 	     * as for a pixmap.
 	     */
-            err = xp_export_surface(wid, pDRIDrawablePriv->sid,
-                                    client_id, key);
+            err = xp_export_surface(wid, pDRIDrawablePriv->sid, client_id, key);
             if (err != Success) {
                 xp_destroy_surface(pDRIDrawablePriv->sid);
                 free(pDRIDrawablePriv);
@@ -426,7 +429,8 @@ DRICreateSurface(ScreenPtr pScreen, Drawable id,
 		    WindowPtr pWin = (WindowPtr)pDrawable;
 		    
 		    dixSetPrivate(&pWin->devPrivates, DRIWindowPrivKey, NULL);
-		} else if(pDrawable->type == DRAWABLE_PIXMAP) {
+                }
+                else if (pDrawable->type == DRAWABLE_PIXMAP) {
 		    PixmapPtr pPix = (PixmapPtr)pDrawable;
 		    
 		    dixSetPrivate(&pPix->devPrivates, DRIPixmapPrivKey, NULL);
@@ -445,7 +449,8 @@ DRICreateSurface(ScreenPtr pScreen, Drawable id,
         if (surface_hash == NULL)
             surface_hash = x_hash_table_new(NULL, NULL, NULL, NULL);
         x_hash_table_insert(surface_hash,
-                            x_cvt_uint_to_vptr(pDRIDrawablePriv->sid), pDRIDrawablePriv);
+                            x_cvt_uint_to_vptr(pDRIDrawablePriv->sid),
+                            pDRIDrawablePriv);
 
         /* track this in case this window is destroyed */
         AddResource(id, DRIDrawablePrivResType, (pointer)pDrawable);
@@ -479,9 +484,11 @@ DRIDestroySurface(ScreenPtr pScreen, Drawable id, DrawablePtr pDrawable,
 
     if (pDrawable->type == DRAWABLE_WINDOW) {
         pDRIDrawablePriv = DRI_DRAWABLE_PRIV_FROM_WINDOW((WindowPtr)pDrawable);
-    } else if (pDrawable->type == DRAWABLE_PIXMAP) {
+    }
+    else if (pDrawable->type == DRAWABLE_PIXMAP) {
         pDRIDrawablePriv = DRI_DRAWABLE_PRIV_FROM_PIXMAP((PixmapPtr)pDrawable);
-    } else {
+    }
+    else {
         return FALSE;
     }
 
@@ -491,8 +498,8 @@ DRIDestroySurface(ScreenPtr pScreen, Drawable id, DrawablePtr pDrawable,
 	 */
 
         if (notify != NULL) {
-            pDRIDrawablePriv->notifiers = x_hook_remove(pDRIDrawablePriv->notifiers,
-                                                        notify, notify_data);
+            pDRIDrawablePriv->notifiers =
+                x_hook_remove(pDRIDrawablePriv->notifiers, notify, notify_data);
         }
 
 	--pDRIDrawablePriv->refCount;
@@ -530,7 +537,8 @@ DRIDrawablePrivDelete(pointer pResource, XID id)
     if (pDrawable->type == DRAWABLE_WINDOW) {
         pWin = (WindowPtr)pDrawable;
         pDRIDrawablePriv = DRI_DRAWABLE_PRIV_FROM_WINDOW(pWin);
-    } else if (pDrawable->type == DRAWABLE_PIXMAP) {
+    }
+    else if (pDrawable->type == DRAWABLE_PIXMAP) {
         pPix = (PixmapPtr)pDrawable;
         pDRIDrawablePriv = DRI_DRAWABLE_PRIV_FROM_PIXMAP(pPix);
     }
@@ -553,7 +561,6 @@ DRIDrawablePrivDelete(pointer pResource, XID id)
 	DRISurfaceNotify(pDRIDrawablePriv->sid, AppleDRISurfaceNotifyDestroyed);
     }
   
-
     if (pDRIDrawablePriv->notifiers != NULL)
         x_hook_free(pDRIDrawablePriv->notifiers);
 
@@ -561,7 +568,8 @@ DRIDrawablePrivDelete(pointer pResource, XID id)
 
     if (pDrawable->type == DRAWABLE_WINDOW) {
 	dixSetPrivate(&pWin->devPrivates, DRIWindowPrivKey, NULL);
-    } else if (pDrawable->type == DRAWABLE_PIXMAP) {
+    }
+    else if (pDrawable->type == DRAWABLE_PIXMAP) {
 	dixSetPrivate(&pPix->devPrivates, DRIPixmapPrivKey, NULL);
     }
 
@@ -639,7 +647,8 @@ DRIPostValidateTree(WindowPtr pParent, WindowPtr pChild, VTKind kind)
 
     if (pParent) {
         pScreen = pParent->drawable.pScreen;
-    } else {
+    }
+    else {
         pScreen = pChild->drawable.pScreen;
     }
     pDRIPriv = DRI_SCREEN_PRIV(pScreen);
@@ -687,9 +696,7 @@ DRIGetWrappedFuncs(ScreenPtr pScreen)
 }
 
 void
-DRIQueryVersion(int *majorVersion,
-                int *minorVersion,
-                int *patchVersion)
+DRIQueryVersion(int *majorVersion, int *minorVersion, int *patchVersion)
 {
     *majorVersion = APPLE_DRI_MAJOR_VERSION;
     *minorVersion = APPLE_DRI_MINOR_VERSION;
@@ -710,8 +717,7 @@ DRISurfaceNotify(xp_surface_id id, int kind)
     arg.id = id;
     arg.kind = kind;
 
-    if (surface_hash != NULL)
-    {
+    if (surface_hash != NULL) {
         pDRIDrawablePriv = x_hash_table_lookup(surface_hash,
                                                x_cvt_uint_to_vptr(id), NULL);
     }
@@ -719,15 +725,13 @@ DRISurfaceNotify(xp_surface_id id, int kind)
     if (pDRIDrawablePriv == NULL)
         return;
 
-    if (kind == AppleDRISurfaceNotifyDestroyed)
-    {
+    if (kind == AppleDRISurfaceNotifyDestroyed) {
 	x_hash_table_remove(surface_hash, x_cvt_uint_to_vptr(id));
     }
 
     x_hook_run(pDRIDrawablePriv->notifiers, &arg);
 
-    if (kind == AppleDRISurfaceNotifyDestroyed)
-    {
+    if (kind == AppleDRISurfaceNotifyDestroyed) {
 	xp_error error;
 	
 	error = xp_destroy_surface(pDRIDrawablePriv->sid);
@@ -747,9 +751,9 @@ DRISurfaceNotify(xp_surface_id id, int kind)
  * This creates a shared memory buffer for use with GLXPixmaps
  * and AppleSGLX.
  */
-Bool DRICreatePixmap(ScreenPtr pScreen, Drawable id,
-		     DrawablePtr pDrawable, char *path,
-		     size_t pathmax) 
+Bool
+DRICreatePixmap(ScreenPtr pScreen, Drawable id,
+                DrawablePtr pDrawable, char *path, size_t pathmax)
 {
     DRIPixmapBufferPtr shared;
     PixmapPtr pPix;
@@ -769,7 +773,8 @@ Bool DRICreatePixmap(ScreenPtr pScreen, Drawable id,
 
     if(pDrawable->bitsPerPixel >= 24) {
 	shared->bytesPerPixel = 4;
-    } else if(pDrawable->bitsPerPixel <= 16) {
+    }
+    else if (pDrawable->bitsPerPixel <= 16) {
 	shared->bytesPerPixel = 2;
     }
     
@@ -777,8 +782,7 @@ Bool DRICreatePixmap(ScreenPtr pScreen, Drawable id,
     shared->height = pDrawable->height;
     
     if(-1 == snprintf(shared->shmPath, sizeof(shared->shmPath),
-                      "%d_0x%lx", getpid(),
-                      (unsigned long)id)) {
+                       "%d_0x%lx", getpid(), (unsigned long) id)) {
         FatalError("buffer overflow in %s\n", __func__);
     }
     
@@ -822,9 +826,10 @@ Bool DRICreatePixmap(ScreenPtr pScreen, Drawable id,
     return TRUE;
 }
 
-
-Bool DRIGetPixmapData(DrawablePtr pDrawable, int *width, int *height,
-		      int *pitch, int *bpp, void **ptr) {
+Bool
+DRIGetPixmapData(DrawablePtr pDrawable, int *width, int *height,
+                 int *pitch, int *bpp, void **ptr)
+{
     PixmapPtr pPix;
     DRIPixmapBufferPtr shared;
 
@@ -851,7 +856,8 @@ Bool DRIGetPixmapData(DrawablePtr pDrawable, int *width, int *height,
 }
 
 static Bool
-DRIFreePixmapImp(DrawablePtr pDrawable) {
+DRIFreePixmapImp(DrawablePtr pDrawable)
+{
     DRIPixmapBufferPtr shared;
     PixmapPtr pPix;
 
@@ -876,7 +882,8 @@ DRIFreePixmapImp(DrawablePtr pDrawable) {
 }
 
 void 
-DRIDestroyPixmap(DrawablePtr pDrawable) {
+DRIDestroyPixmap(DrawablePtr pDrawable)
+{
     if(DRIFreePixmapImp(pDrawable))
 	FreeResourceByType(pDrawable->id, DRIDrawablePrivResType, FALSE);
 
