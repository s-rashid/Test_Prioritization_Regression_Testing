diff --git a/hw/kdrive/src/kdrive.c b/hw/kdrive/src/kdrive.c
index 5cfe54f..76c03fd 100644
--- a/hw/kdrive/src/kdrive.c
+++ b/hw/kdrive/src/kdrive.c
@@ -148,9 +148,9 @@ KdSetRootClip (ScreenPtr pScreen, BOOL enable)
 	REGION_EMPTY(pScreen, &pWin->borderClip);
 	REGION_BREAK (pWin->drawable.pScreen, &pWin->clipList);
     }
-    
+
     ResizeChildrenWinSize (pWin, 0, 0, 0, 0);
-    
+
     if (WasViewable)
     {
 	if (pWin->firstChild)
@@ -185,7 +185,7 @@ void
 KdDisableScreen (ScreenPtr pScreen)
 {
     KdScreenPriv(pScreen);
-    
+
     if (!pScreenPriv->enabled)
 	return;
     if (!pScreenPriv->closed)
@@ -209,7 +209,7 @@ KdDoSwitchCmd (char *reason)
     {
 	char    *command = xalloc (strlen (kdSwitchCmd) +
 				   1 +
-				   strlen (reason) + 
+				   strlen (reason) +
 				   1);
 	if (!command)
 	    return;
@@ -392,7 +392,7 @@ KdParseScreen (KdScreenInfo *screen,
     int	    fb;
     int	    i;
     int	    pixels, mm;
-    
+
     screen->dumb = kdDumbDriver;
     screen->softCursor = kdSoftCursor;
     screen->origin = kdOrigin;
@@ -409,16 +409,16 @@ KdParseScreen (KdScreenInfo *screen,
 	return;
     if (strlen (arg) >= sizeof (save))
 	return;
-    
+
     for (i = 0; i < 2; i++)
     {
 	arg = KdParseFindNext (arg, "x/@XY", save, &delim);
 	if (!save[0])
 	    return;
-	
+
 	pixels = atoi(save);
 	mm = 0;
-	
+
 	if (delim == '/')
 	{
 	    arg = KdParseFindNext (arg, "x@XY", save, &delim);
@@ -426,7 +426,7 @@ KdParseScreen (KdScreenInfo *screen,
 		return;
 	    mm = atoi(save);
 	}
-	
+
 	if (i == 0)
 	{
 	    screen->width = pixels;
@@ -476,7 +476,7 @@ KdParseScreen (KdScreenInfo *screen,
 	arg = KdParseFindNext (arg, "xY", save, &delim);
 	screen->randr |= RR_Reflect_Y;
     }
-    
+
     fb = 0;
     while (fb < KD_MAX_FB)
     {
@@ -691,7 +691,7 @@ KdOsInit (KdOsFuncs *pOsFuncs)
     kdOsFuncs = pOsFuncs;
     if (pOsFuncs)
     {
-	if (serverGeneration == 1) 
+	if (serverGeneration == 1)
 	{
 	    KdDoSwitchCmd ("start");
             if (pOsFuncs->Init)
@@ -704,7 +704,7 @@ Bool
 KdAllocatePrivates (ScreenPtr pScreen)
 {
     KdPrivScreenPtr	pScreenPriv;
-    
+
     if (kdGeneration != serverGeneration)
 	kdGeneration = serverGeneration;
 
@@ -741,20 +741,20 @@ KdCloseScreen (int index, ScreenPtr pScreen)
     KdScreenInfo    *screen = pScreenPriv->screen;
     KdCardInfo	    *card = pScreenPriv->card;
     Bool	    ret;
-    
+
     pScreenPriv->closed = TRUE;
     pScreen->CloseScreen = pScreenPriv->CloseScreen;
     if(pScreen->CloseScreen)
         ret = (*pScreen->CloseScreen) (index, pScreen);
     else
 	ret = TRUE;
-    
+
     if (pScreenPriv->dpmsState != KD_DPMS_NORMAL)
 	(*card->cfuncs->dpms) (pScreen, KD_DPMS_NORMAL);
-    
+
     if (screen->mynum == card->selected)
 	KdDisableScreen (pScreen);
-    
+
     /*
      * Restore video hardware when last screen is closed
      */
@@ -763,7 +763,7 @@ KdCloseScreen (int index, ScreenPtr pScreen)
 	if (kdEnabled && card->cfuncs->restore)
 	    (*card->cfuncs->restore) (card);
     }
-	
+
     if (!pScreenPriv->screen->dumb && card->cfuncs->finiAccel)
 	(*card->cfuncs->finiAccel) (pScreen);
 
@@ -794,9 +794,9 @@ KdCloseScreen (int index, ScreenPtr pScreen)
 	    }
 	}
     }
-    
+
     pScreenPriv->screen->pScreen = 0;
-    
+
     xfree ((pointer) pScreenPriv);
     return ret;
 }
@@ -806,10 +806,10 @@ KdSaveScreen (ScreenPtr pScreen, int on)
 {
     KdScreenPriv(pScreen);
     int	    dpmsState;
-    
+
     if (!pScreenPriv->card->cfuncs->dpms)
 	return FALSE;
-    
+
     dpmsState = pScreenPriv->dpmsState;
     switch (on) {
     case SCREEN_SAVER_OFF:
@@ -861,7 +861,7 @@ KdSetSubpixelOrder (ScreenPtr pScreen, Rotation randr)
     int			subpixel_order = screen->subpixel_order;
     Rotation		subpixel_dir;
     int			i;
-    
+
     static struct {
 	int	    subpixel_order;
 	Rotation    direction;
@@ -874,7 +874,7 @@ KdSetSubpixelOrder (ScreenPtr pScreen, Rotation randr)
 
     static struct {
 	int	bit;
-	int	normal; 
+	int	normal;
 	int	reflect;
     } reflects[] = {
 	{ RR_Reflect_X, SubPixelHorizontalRGB,	SubPixelHorizontalBGR },
@@ -882,7 +882,7 @@ KdSetSubpixelOrder (ScreenPtr pScreen, Rotation randr)
 	{ RR_Reflect_Y, SubPixelVerticalRGB,	SubPixelVerticalBGR },
 	{ RR_Reflect_Y, SubPixelVerticalRGB,	SubPixelVerticalRGB },
     };
-    
+
     /* map subpixel to direction */
     for (i = 0; i < 4; i++)
 	if (orders[i].subpixel_order == subpixel_order)
@@ -890,7 +890,7 @@ KdSetSubpixelOrder (ScreenPtr pScreen, Rotation randr)
     if (i < 4)
     {
 	subpixel_dir = KdAddRotation (randr & RR_Rotate_All, orders[i].direction);
-	
+
 	/* map back to subpixel order */
 	for (i = 0; i < 4; i++)
 	    if (orders[i].direction & subpixel_dir)
@@ -931,7 +931,7 @@ KdScreenInit(int index, ScreenPtr pScreen, int argc, char **argv)
     KdAllocatePrivates (pScreen);
 
     pScreenPriv = KdGetScreenPriv(pScreen);
-    
+
     if (!rotated)
     {
 	width = screen->width;
@@ -963,10 +963,10 @@ KdScreenInit(int index, ScreenPtr pScreen, int argc, char **argv)
      * our GC functions; fbFinishScreenInit initializes MI
      * backing store
      */
-    if (!fbSetupScreen (pScreen, 
-			screen->fb[0].frameBuffer, 
-			width, height, 
-			monitorResolution, monitorResolution, 
+    if (!fbSetupScreen (pScreen,
+			screen->fb[0].frameBuffer,
+			width, height,
+			monitorResolution, monitorResolution,
 			screen->fb[0].pixelStride,
 			screen->fb[0].bitsPerPixel))
     {
@@ -980,17 +980,17 @@ KdScreenInit(int index, ScreenPtr pScreen, int argc, char **argv)
     pScreen->UninstallColormap	= KdUninstallColormap;
     pScreen->ListInstalledColormaps = KdListInstalledColormaps;
     pScreen->StoreColors	= KdStoreColors;
-     
+
     pScreen->SaveScreen		= KdSaveScreen;
     pScreen->CreateWindow	= KdCreateWindow;
 
 #if KD_MAX_FB > 1
     if (screen->fb[1].depth)
     {
-	if (!fbOverlayFinishScreenInit (pScreen, 
-					screen->fb[0].frameBuffer, 
-					screen->fb[1].frameBuffer, 
-					width, height, 
+	if (!fbOverlayFinishScreenInit (pScreen,
+					screen->fb[0].frameBuffer,
+					screen->fb[1].frameBuffer,
+					width, height,
 					monitorResolution, monitorResolution,
 					screen->fb[0].pixelStride,
 					screen->fb[1].pixelStride,
@@ -1005,8 +1005,8 @@ KdScreenInit(int index, ScreenPtr pScreen, int argc, char **argv)
     else
 #endif
     {
-	if (!fbFinishScreenInit (pScreen, 
-				 screen->fb[0].frameBuffer, 
+	if (!fbFinishScreenInit (pScreen,
+				 screen->fb[0].frameBuffer,
 				 width, height,
 				 monitorResolution, monitorResolution,
 				 screen->fb[0].pixelStride,
@@ -1015,7 +1015,7 @@ KdScreenInit(int index, ScreenPtr pScreen, int argc, char **argv)
 	    return FALSE;
 	}
     }
-    
+
     /*
      * Fix screen sizes; for some reason mi takes dpi instead of mm.
      * Rounding errors are annoying
@@ -1028,14 +1028,14 @@ KdScreenInit(int index, ScreenPtr pScreen, int argc, char **argv)
 	pScreen->mmHeight = *height_mmp;
     else
 	*height_mmp = pScreen->mmHeight;
-    
+
     /*
      * Plug in our own block/wakeup handlers.
      * miScreenInit installs NoopDDA in both places
      */
     pScreen->BlockHandler	= KdBlockHandler;
     pScreen->WakeupHandler	= KdWakeupHandler;
-    
+
 #ifdef RENDER
     if (!fbPictureInit (pScreen, 0, 0))
 	return FALSE;
@@ -1043,26 +1043,26 @@ KdScreenInit(int index, ScreenPtr pScreen, int argc, char **argv)
     if (card->cfuncs->initScreen)
 	if (!(*card->cfuncs->initScreen) (pScreen))
 	    return FALSE;
-	    
+
     if (!screen->dumb && card->cfuncs->initAccel)
 	if (!(*card->cfuncs->initAccel) (pScreen))
 	    screen->dumb = TRUE;
-    
+
     if (card->cfuncs->finishInitScreen)
 	if (!(*card->cfuncs->finishInitScreen) (pScreen))
 	    return FALSE;
-	    
+
 #if 0
     fbInitValidateTree (pScreen);
 #endif
-    
+
 #if 0
     pScreen->backingStoreSupport = Always;
     miInitializeBackingStore (pScreen);
 #endif
 
 
-    /* 
+    /*
      * Wrap CloseScreen, the order now is:
      *	KdCloseScreen
      *	miBSCloseScreen
@@ -1073,9 +1073,9 @@ KdScreenInit(int index, ScreenPtr pScreen, int argc, char **argv)
 
     pScreenPriv->CreateScreenResources = pScreen->CreateScreenResources;
     pScreen->CreateScreenResources = KdCreateScreenResources;
-    
+
     if (screen->softCursor ||
-	!card->cfuncs->initCursor || 
+	!card->cfuncs->initCursor ||
 	!(*card->cfuncs->initCursor) (pScreen))
     {
 	/* Use MI for cursor display and event queueing. */
@@ -1083,7 +1083,7 @@ KdScreenInit(int index, ScreenPtr pScreen, int argc, char **argv)
 	miDCInitialize(pScreen, &kdPointerScreenFuncs);
     }
 
-    
+
     if (!fbCreateDefColormap (pScreen))
     {
 	return FALSE;
@@ -1100,7 +1100,7 @@ KdScreenInit(int index, ScreenPtr pScreen, int argc, char **argv)
 	if(kdOsFuncs->Enable)
 	    (*kdOsFuncs->Enable) ();
     }
-    
+
     if (screen->mynum == card->selected)
     {
 	if(card->cfuncs->preserve)
@@ -1115,7 +1115,7 @@ KdScreenInit(int index, ScreenPtr pScreen, int argc, char **argv)
 	if (!screen->dumb && card->cfuncs->enableAccel)
 	    (*card->cfuncs->enableAccel) (pScreen);
     }
-    
+
     return TRUE;
 }
 
@@ -1126,9 +1126,9 @@ KdInitScreen (ScreenInfo    *pScreenInfo,
 	      char	    **argv)
 {
     KdCardInfo	*card = screen->card;
-    
+
     (*card->cfuncs->scrinit) (screen);
-    
+
     if (!card->cfuncs->initAccel)
 	screen->dumb = TRUE;
     if (!card->cfuncs->initCursor)
@@ -1166,26 +1166,26 @@ KdSetPixmapFormats (ScreenInfo	*pScreenInfo)
 		    bpp = 32;
 		if (!depthToBpp[screen->fb[fb].depth])
 		    depthToBpp[screen->fb[fb].depth] = bpp;
-		else if (depthToBpp[screen->fb[fb].depth] != bpp) 
+		else if (depthToBpp[screen->fb[fb].depth] != bpp)
 		    return FALSE;
 	    }
 	}
     }
-    
+
     /*
      * Fill in additional formats
      */
     for (i = 0; i < NUM_KD_DEPTHS; i++)
 	if (!depthToBpp[kdDepths[i].depth])
 	    depthToBpp[kdDepths[i].depth] = kdDepths[i].bpp;
-	
+
     pScreenInfo->imageByteOrder     = IMAGE_BYTE_ORDER;
     pScreenInfo->bitmapScanlineUnit = BITMAP_SCANLINE_UNIT;
     pScreenInfo->bitmapScanlinePad  = BITMAP_SCANLINE_PAD;
     pScreenInfo->bitmapBitOrder     = BITMAP_BIT_ORDER;
-    
+
     pScreenInfo->numPixmapFormats = 0;
-    
+
     for (i = 1; i <= 32; i++)
     {
 	if (depthToBpp[i])
@@ -1196,7 +1196,7 @@ KdSetPixmapFormats (ScreenInfo	*pScreenInfo)
 	    format->scanlinePad = BITMAP_SCANLINE_PAD;
 	}
     }
-    
+
     return TRUE;
 }
 
@@ -1215,7 +1215,7 @@ KdAddScreen (ScreenInfo	    *pScreenInfo,
 	unsigned long	visuals;
 	Pixel		rm, gm, bm;
 	int		fb;
-	
+
 	visuals = 0;
 	rm = gm = bm = 0;
 	for (fb = 0; fb < KD_MAX_FB && screen->fb[fb].depth; fb++)
@@ -1236,7 +1236,7 @@ KdAddScreen (ScreenInfo	    *pScreenInfo,
     }
 
     kdCurrentScreen = screen;
-    
+
     AddScreen (KdScreenInit, argc, argv);
 }
 
@@ -1292,14 +1292,14 @@ KdInitOutput (ScreenInfo    *pScreenInfo,
 		KdInitScreen (pScreenInfo, screen, argc, argv);
 	}
     }
-    
+
     /*
      * Merge the various pixmap formats together, this can fail
      * when two screens share depth but not bitsPerPixel
      */
     if (!KdSetPixmapFormats (pScreenInfo))
 	return;
-    
+
     /*
      * Add all of the screens
      */
