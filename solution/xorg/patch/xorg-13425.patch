diff --git a/hw/xfree86/os-support/shared/ia64Pci.c b/hw/xfree86/os-support/shared/ia64Pci.c
index d0046a7..30a0622 100644
--- a/hw/xfree86/os-support/shared/ia64Pci.c
+++ b/hw/xfree86/os-support/shared/ia64Pci.c
@@ -29,12 +29,165 @@
  * This file contains the glue needed to support various IA-64 chipsets.
  */
 
+#include <fcntl.h>
+#include <unistd.h>
+#include <signal.h>
+#include <dirent.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/ioctl.h>
+#include <linux/pci.h>
+
+#include "compiler.h"
 #include "460gxPCI.h"
 #include "e8870PCI.h"
 #include "zx1PCI.h"
+#include "altixPCI.h"
 #include "Pci.h"
 #include "ia64Pci.h"
 
+/*
+ * We use special in/out routines here since Altix platforms require the
+ * use of the sysfs legacy_io interface.  The legacy_io file maps to the I/O
+ * space of a given PCI domain; reads and writes are used to do port I/O.
+ * The file descriptor for the file is stored in the upper bits of the
+ * value passed in by the caller, and is created and populated by
+ * xf86MapDomainIO.
+ *
+ * If the legacy_io interface doesn't exist, we fall back to the glibc in/out
+ * routines, which are prefixed by an underscore (e.g. _outb).
+ */
+static int ia64_port_to_fd(unsigned long port)
+{
+    return (port >> 24) & 0xffffffff;
+}
+
+void outb(unsigned long port, unsigned char val)
+{
+    int fd = ia64_port_to_fd(port);
+
+    if (!fd) {
+	_outb(val, port & 0xffff);
+	goto out;
+    }
+    if (lseek(fd, port & 0xffff, SEEK_SET) == -1) {
+	ErrorF("I/O lseek failed\n");
+	goto out;
+    }
+    if (write(fd, &val, 1) != 1) {
+	ErrorF("I/O write failed\n");
+	goto out;
+    }
+ out:
+    return;
+}
+
+void outw(unsigned long port, unsigned short val)
+{
+    int fd = ia64_port_to_fd(port);
+
+    if (!fd) {
+	_outw(val, port & 0xffff);
+	goto out;
+    }
+    if (lseek(fd, port & 0xffff, SEEK_SET) == -1) {
+	ErrorF("I/O lseek failed\n");
+	goto out;
+    }
+    if (write(fd, &val, 2) != 2) {
+	ErrorF("I/O write failed\n");
+	goto out;
+    }
+ out:
+    return;
+}
+
+void outl(unsigned long port, unsigned int val)
+{
+    int fd = ia64_port_to_fd(port);
+
+    if (!fd) {
+	_outl(val, port & 0xffff);
+	goto out;
+    }
+    if (lseek(fd, port & 0xffff, SEEK_SET) == -1) {
+	ErrorF("I/O lseek failed\n");
+	goto out;
+    }
+    if (write(fd, &val, 4) != 4) {
+	ErrorF("I/O write failed\n");
+	goto out;
+    }
+ out:
+    return;
+}
+
+unsigned int inb(unsigned long port)
+{
+    int fd = ia64_port_to_fd(port);
+    unsigned char val;
+
+    if (!fd)
+	return _inb(port & 0xffff);
+
+    if (lseek(fd, port & 0xffff, SEEK_SET) == -1) {
+	ErrorF("I/O lseek failed\n");
+	val = -1;
+	goto out;
+    }
+    if (read(fd, &val, 1) != 1) {
+	ErrorF("I/O read failed\n");
+	val = -1;
+	goto out;
+    }
+ out:
+    return val;
+}
+
+unsigned int inw(unsigned long port)
+{
+    int fd = ia64_port_to_fd(port);
+    unsigned short val;
+
+    if (!fd)
+	return _inw(port & 0xffff);
+
+    if (lseek(fd, port & 0xffff, SEEK_SET) == -1) {
+	ErrorF("I/O lseek failed\n");
+	val = -1;
+	goto out;
+    }
+    if (read(fd, &val, 2) != 2) {
+	ErrorF("I/O read failed\n");
+	val = -1;
+	goto out;
+    }
+ out:
+    return val;
+}
+
+unsigned int inl(unsigned long port)
+{
+    int fd = ia64_port_to_fd(port);
+    unsigned int val;
+
+    if (!fd)
+	return _inl(port & 0xffff);
+
+    if (lseek(fd, port & 0xffff, SEEK_SET) == -1) {
+	ErrorF("I/O lseek failed\n");
+	val = -1;
+	goto out;
+    }
+    if (read(fd, &val, 4) != 4) {
+	ErrorF("I/O read failed\n");
+	val = -1;
+	goto out;
+    }
+ out:
+    return val;
+}
+
 void
 ia64ScanPCIWrapper(scanpciWrapperOpt flags)
 {
@@ -58,6 +211,9 @@ ia64ScanPCIWrapper(scanpciWrapperOpt flags)
 	    case ZX1_CHIPSET:
 		xf86PreScanZX1();
 		return;
+	    case ALTIX_CHIPSET:
+		xf86PreScanAltix();
+		return;
 	    default:
 		return;
 	}
@@ -74,6 +230,9 @@ ia64ScanPCIWrapper(scanpciWrapperOpt flags)
 	    case ZX1_CHIPSET:
 		xf86PostScanZX1();
 		return;
+	    case ALTIX_CHIPSET:
+		xf86PostScanAltix();
+		return;
 	    default:
 		return;
 	}
