diff --git a/randr/rrcrtc.c b/randr/rrcrtc.c
index 13dd7da..36caa58 100644
--- a/randr/rrcrtc.c
+++ b/randr/rrcrtc.c
@@ -36,8 +36,7 @@ RRCrtcChanged (RRCrtcPtr crtc, Bool layoutChanged)
     ScreenPtr	pScreen = crtc->pScreen;
 
     crtc->changed = TRUE;
-    if (pScreen)
-    {
+    if (pScreen) {
 	rrScrPriv(pScreen);
     
 	pScrPriv->changed = TRUE;
@@ -134,9 +133,7 @@ RRCrtcNotify (RRCrtcPtr	    crtc,
 	      int	    x,
 	      int	    y,
 	      Rotation	    rotation,
-	      RRTransformPtr transform,
-	      int	    numOutputs,
-	      RROutputPtr   *outputs)
+             RRTransformPtr transform, int numOutputs, RROutputPtr * outputs)
 {
     int	    i, j;
     
@@ -144,13 +141,11 @@ RRCrtcNotify (RRCrtcPtr	    crtc,
      * Check to see if any of the new outputs were
      * not in the old list and mark them as changed
      */
-    for (i = 0; i < numOutputs; i++)
-    {
+    for (i = 0; i < numOutputs; i++) {
 	for (j = 0; j < crtc->numOutputs; j++)
 	    if (outputs[i] == crtc->outputs[j])
 		break;
-	if (j == crtc->numOutputs)
-	{
+        if (j == crtc->numOutputs) {
 	    outputs[i]->crtc = crtc;
 	    RROutputChanged (outputs[i], FALSE);
 	    RRCrtcChanged (crtc, FALSE);
@@ -160,13 +155,11 @@ RRCrtcNotify (RRCrtcPtr	    crtc,
      * Check to see if any of the old outputs are
      * not in the new list and mark them as changed
      */
-    for (j = 0; j < crtc->numOutputs; j++)
-    {
+    for (j = 0; j < crtc->numOutputs; j++) {
 	for (i = 0; i < numOutputs; i++)
 	    if (outputs[i] == crtc->outputs[j])
 		break;
-	if (i == numOutputs)
-	{
+        if (i == numOutputs) {
 	    if (crtc->outputs[j]->crtc == crtc)
 		crtc->outputs[j]->crtc = NULL;
 	    RROutputChanged (crtc->outputs[j], FALSE);
@@ -176,12 +169,10 @@ RRCrtcNotify (RRCrtcPtr	    crtc,
     /*
      * Reallocate the crtc output array if necessary
      */
-    if (numOutputs != crtc->numOutputs)
-    {
+    if (numOutputs != crtc->numOutputs) {
 	RROutputPtr *newoutputs;
 	
-	if (numOutputs)
-	{
+        if (numOutputs) {
 	    if (crtc->numOutputs)
 		newoutputs = realloc(crtc->outputs,
 				    numOutputs * sizeof (RROutputPtr));
@@ -190,8 +181,7 @@ RRCrtcNotify (RRCrtcPtr	    crtc,
 	    if (!newoutputs)
 		return FALSE;
 	}
-	else
-	{
+        else {
 	    free(crtc->outputs);
 	    newoutputs = NULL;
 	}
@@ -205,8 +195,7 @@ RRCrtcNotify (RRCrtcPtr	    crtc,
     /*
      * Update remaining crtc fields
      */
-    if (mode != crtc->mode)
-    {
+    if (mode != crtc->mode) {
 	if (crtc->mode)
 	    RRModeDestroy (crtc->mode);
 	crtc->mode = mode;
@@ -214,18 +203,15 @@ RRCrtcNotify (RRCrtcPtr	    crtc,
 	    mode->refcnt++;
 	RRCrtcChanged (crtc, TRUE);
     }
-    if (x != crtc->x)
-    {
+    if (x != crtc->x) {
 	crtc->x = x;
 	RRCrtcChanged (crtc, TRUE);
     }
-    if (y != crtc->y)
-    {
+    if (y != crtc->y) {
 	crtc->y = y;
 	RRCrtcChanged (crtc, TRUE);
     }
-    if (rotation != crtc->rotation)
-    {
+    if (rotation != crtc->rotation) {
 	crtc->rotation = rotation;
 	RRCrtcChanged (crtc, TRUE);
     }
@@ -233,8 +219,7 @@ RRCrtcNotify (RRCrtcPtr	    crtc,
 	RRTransformCopy (&crtc->client_current_transform, transform);
 	RRCrtcChanged (crtc, TRUE);
     }
-    if (crtc->changed && mode)
-    {
+    if (crtc->changed && mode) {
 	RRTransformCompute (x, y,
 			    mode->mode.width, mode->mode.height,
 			    rotation,
@@ -249,6 +234,7 @@ void
 RRDeliverCrtcEvent (ClientPtr client, WindowPtr pWin, RRCrtcPtr crtc)
 {
     ScreenPtr pScreen = pWin->drawable.pScreen;
+
     rrScrPriv (pScreen);
     xRRCrtcChangeNotifyEvent	ce;
     RRModePtr	mode = crtc->mode;
@@ -259,16 +245,14 @@ RRDeliverCrtcEvent (ClientPtr client, WindowPtr pWin, RRCrtcPtr crtc)
     ce.window = pWin->drawable.id;
     ce.crtc = crtc->id;
     ce.rotation = crtc->rotation;
-    if (mode)
-    {
+    if (mode) {
 	ce.mode = mode->mode.id;
 	ce.x = crtc->x;
 	ce.y = crtc->y;
 	ce.width = mode->mode.width;
 	ce.height = mode->mode.height;
     }
-    else
-    {
+    else {
 	ce.mode = None;
 	ce.x = 0;
 	ce.y = 0;
@@ -282,12 +266,13 @@ static Bool
 RRCrtcPendingProperties (RRCrtcPtr crtc)
 {
     ScreenPtr	pScreen = crtc->pScreen;
+
     rrScrPriv(pScreen);
     int		o;
 
-    for (o = 0; o < pScrPriv->numOutputs; o++)
-    {
+    for (o = 0; o < pScrPriv->numOutputs; o++) {
 	RROutputPtr output = pScrPriv->outputs[o];
+
 	if (output->crtc == crtc && output->pendingProperties)
 	    return TRUE;
     }
@@ -340,6 +325,7 @@ static void
 mark_crtcs (rrScrPrivPtr pScrPriv, int *reachable, int cur)
 {
     int i;
+
     reachable[cur] = TRUE;
     for (i = 0; i < pScrPriv->numCrtcs; ++i) {
         if (reachable[i] || !pScrPriv->crtcs[i]->mode)
@@ -357,6 +343,7 @@ RRComputeContiguity (ScreenPtr pScreen)
     int i, n = pScrPriv->numCrtcs;
 
     int *reachable = calloc(n, sizeof(int));
+
     if (!reachable)
         goto out;
 
@@ -387,14 +374,12 @@ Bool
 RRCrtcSet (RRCrtcPtr    crtc,
 	   RRModePtr	mode,
 	   int		x,
-	   int		y,
-	   Rotation	rotation,
-	   int		numOutputs,
-	   RROutputPtr  *outputs)
+          int y, Rotation rotation, int numOutputs, RROutputPtr * outputs)
 {
     ScreenPtr	pScreen = crtc->pScreen;
     Bool	ret = FALSE;
     Bool	recompute = TRUE;
+
     rrScrPriv(pScreen);
 
     /* See if nothing changed */
@@ -404,17 +389,13 @@ RRCrtcSet (RRCrtcPtr    crtc,
 	crtc->rotation == rotation &&
 	crtc->numOutputs == numOutputs &&
 	!memcmp (crtc->outputs, outputs, numOutputs * sizeof (RROutputPtr)) &&
-	!RRCrtcPendingProperties (crtc) &&
-	!RRCrtcPendingTransform (crtc))
-    {
+        !RRCrtcPendingProperties(crtc) && !RRCrtcPendingTransform(crtc)) {
 	recompute = FALSE;
 	ret = TRUE;
     }
-    else
-    {
+    else {
 #if RANDR_12_INTERFACE
-	if (pScrPriv->rrCrtcSet)
-	{
+        if (pScrPriv->rrCrtcSet) {
 	    ret = (*pScrPriv->rrCrtcSet) (pScreen, crtc, mode, x, y, 
 					  rotation, numOutputs, outputs);
 	}
@@ -422,49 +403,46 @@ RRCrtcSet (RRCrtcPtr    crtc,
 #endif
 	{
 #if RANDR_10_INTERFACE
-	    if (pScrPriv->rrSetConfig)
-	    {
+            if (pScrPriv->rrSetConfig) {
 		RRScreenSize	    size;
 		RRScreenRate	    rate;
 
-		if (!mode)
-		{
+                if (!mode) {
 		    RRCrtcNotify (crtc, NULL, x, y, rotation, NULL, 0, NULL);
 		    ret = TRUE;
 		}
-		else
-		{
+                else {
 		    size.width = mode->mode.width;
 		    size.height = mode->mode.height;
-		    if (outputs[0]->mmWidth && outputs[0]->mmHeight)
-		    {
+                    if (outputs[0]->mmWidth && outputs[0]->mmHeight) {
 			size.mmWidth = outputs[0]->mmWidth;
 			size.mmHeight = outputs[0]->mmHeight;
 		    }
-		    else
-		    {
+                    else {
 			size.mmWidth = pScreen->mmWidth;
 			size.mmHeight = pScreen->mmHeight;
 		    }
 		    size.nRates = 1;
 		    rate.rate = RRVerticalRefresh (&mode->mode);
 		    size.pRates = &rate;
-		    ret = (*pScrPriv->rrSetConfig) (pScreen, rotation, rate.rate, &size);
+                    ret =
+                        (*pScrPriv->rrSetConfig) (pScreen, rotation, rate.rate,
+                                                  &size);
 		    /*
 		     * Old 1.0 interface tied screen size to mode size
 		     */
-		    if (ret)
-		    {
-			RRCrtcNotify (crtc, mode, x, y, rotation, NULL, 1, outputs);
+                    if (ret) {
+                        RRCrtcNotify(crtc, mode, x, y, rotation, NULL, 1,
+                                     outputs);
 			RRScreenSizeNotify (pScreen);
 		    }
 		}
 	    }
 #endif
 	}
-	if (ret)
-	{
+        if (ret) {
 	    int	o;
+
 	    RRTellChanged (pScreen);
 
 	    for (o = 0; o < numOutputs; o++)
@@ -517,15 +495,12 @@ RRCrtcDestroyResource (pointer value, XID pid)
     RRCrtcPtr	crtc = (RRCrtcPtr) value;
     ScreenPtr	pScreen = crtc->pScreen;
 
-    if (pScreen)
-    {
+    if (pScreen) {
 	rrScrPriv(pScreen);
 	int		i;
     
-	for (i = 0; i < pScrPriv->numCrtcs; i++)
-	{
-	    if (pScrPriv->crtcs[i] == crtc)
-	    {
+        for (i = 0; i < pScrPriv->numCrtcs; i++) {
+            if (pScrPriv->crtcs[i] == crtc) {
 		memmove (pScrPriv->crtcs + i, pScrPriv->crtcs + i + 1,
 			 (pScrPriv->numCrtcs - (i + 1)) * sizeof (RRCrtcPtr));
 		--pScrPriv->numCrtcs;
@@ -545,12 +520,10 @@ RRCrtcDestroyResource (pointer value, XID pid)
  */
 
 Bool
-RRCrtcGammaSet (RRCrtcPtr   crtc,
-		CARD16	    *red,
-		CARD16	    *green,
-		CARD16	    *blue)
+RRCrtcGammaSet(RRCrtcPtr crtc, CARD16 *red, CARD16 *green, CARD16 *blue)
 {
     Bool	ret = TRUE;
+
 #if RANDR_12_INTERFACE
     ScreenPtr	pScreen = crtc->pScreen;
 #endif
@@ -559,8 +532,7 @@ RRCrtcGammaSet (RRCrtcPtr   crtc,
     memcpy (crtc->gammaGreen, green, crtc->gammaSize * sizeof (CARD16));
     memcpy (crtc->gammaBlue, blue, crtc->gammaSize * sizeof (CARD16));
 #if RANDR_12_INTERFACE
-    if (pScreen)
-    {
+    if (pScreen) {
 	rrScrPriv(pScreen);
 	if (pScrPriv->rrCrtcSetGamma)
 	    ret = (*pScrPriv->rrCrtcSetGamma) (pScreen, crtc);
@@ -577,13 +549,13 @@ Bool
 RRCrtcGammaGet(RRCrtcPtr crtc)
 {
     Bool ret = TRUE;
+
 #if RANDR_12_INTERFACE
     ScreenPtr	pScreen = crtc->pScreen;
 #endif
 
 #if RANDR_12_INTERFACE
-    if (pScreen)
-    {
+    if (pScreen) {
         rrScrPriv(pScreen);
         if (pScrPriv->rrCrtcGetGamma)
             ret = (*pScrPriv->rrCrtcGetGamma) (pScreen, crtc);
@@ -640,15 +612,13 @@ RRCrtcGetScanoutSize(RRCrtcPtr crtc, int *width, int *height)
  */
 
 Bool
-RRCrtcGammaSetSize (RRCrtcPtr	crtc,
-		    int		size)
+RRCrtcGammaSetSize(RRCrtcPtr crtc, int size)
 {
     CARD16  *gamma;
 
     if (size == crtc->gammaSize)
 	return TRUE;
-    if (size)
-    {
+    if (size) {
 	gamma = malloc(size * 3 * sizeof (CARD16));
 	if (!gamma)
 	    return FALSE;
@@ -673,9 +643,7 @@ RRCrtcTransformSet (RRCrtcPtr		crtc,
 		    struct pixman_f_transform *f_transform,
 		    struct pixman_f_transform *f_inverse,
 		    char		*filter_name,
-		    int			filter_len,
-		    xFixed		*params,
-		    int			nparams)
+                   int filter_len, xFixed * params, int nparams)
 {
     PictFilterPtr   filter = NULL;
     int		    width = 0, height = 0;
@@ -683,15 +651,11 @@ RRCrtcTransformSet (RRCrtcPtr		crtc,
     if (!crtc->transforms)
 	return BadValue;
 
-    if (filter_len)
-    {
-	filter = PictureFindFilter (crtc->pScreen,
-				    filter_name,
-				    filter_len);
+    if (filter_len) {
+        filter = PictureFindFilter(crtc->pScreen, filter_name, filter_len);
 	if (!filter)
 	    return BadName;
-	if (filter->ValidateParams)
-	{
+        if (filter->ValidateParams) {
 	    if (!filter->ValidateParams (crtc->pScreen, filter->id,
 					 params, nparams, &width, &height))
 		return BadMatch;
@@ -701,8 +665,7 @@ RRCrtcTransformSet (RRCrtcPtr		crtc,
 	    height = filter->height;
 	}
     }
-    else
-    {
+    else {
 	if (nparams)
 	    return BadMatch;
     }
@@ -780,8 +743,7 @@ ProcRRGetCrtcInfo (ClientPtr client)
 	rep.width = panned_area.x2 - panned_area.x1;
 	rep.height = panned_area.y2 - panned_area.y1;
     }
-    else
-    {
+    else {
 	RRCrtcGetScanoutSize (crtc, &width, &height);
 	rep.x = crtc->x;
 	rep.y = crtc->y;
@@ -802,8 +764,7 @@ ProcRRGetCrtcInfo (ClientPtr client)
     rep.length = rep.nOutput + rep.nPossibleOutput;
 
     extraLen = rep.length << 2;
-    if (extraLen)
-    {
+    if (extraLen) {
 	extra = malloc(extraLen);
 	if (!extra)
 	    return BadAlloc;
@@ -814,8 +775,7 @@ ProcRRGetCrtcInfo (ClientPtr client)
     outputs = (RROutput *) extra;
     possible = (RROutput *) (outputs + rep.nOutput);
     
-    for (i = 0; i < crtc->numOutputs; i++)
-    {
+    for (i = 0; i < crtc->numOutputs; i++) {
 	outputs[i] = crtc->outputs[i]->id;
 	if (client->swapped)
 	    swapl(&outputs[i]);
@@ -823,8 +783,7 @@ ProcRRGetCrtcInfo (ClientPtr client)
     k = 0;
     for (i = 0; i < pScrPriv->numOutputs; i++)
 	for (j = 0; j < pScrPriv->outputs[i]->numCrtcs; j++)
-	    if (pScrPriv->outputs[i]->crtcs[j] == crtc)
-	    {
+            if (pScrPriv->outputs[i]->crtcs[j] == crtc) {
 		possible[k] = pScrPriv->outputs[i]->id;
 		if (client->swapped)
 		    swapl(&possible[k]);
@@ -846,8 +805,7 @@ ProcRRGetCrtcInfo (ClientPtr client)
 	swaps(&rep.nPossibleOutput);
     }
     WriteToClient(client, sizeof(xRRGetCrtcInfoReply), (char *)&rep);
-    if (extraLen)
-    {
+    if (extraLen) {
 	WriteToClient (client, extraLen, (char *) extra);
 	free(extra);
     }
@@ -877,20 +835,17 @@ ProcRRSetCrtcConfig (ClientPtr client)
     
     VERIFY_RR_CRTC(stuff->crtc, crtc, DixSetAttrAccess);
 
-    if (stuff->mode == None)
-    {
+    if (stuff->mode == None) {
 	mode = NULL;
 	if (numOutputs > 0)
 	    return BadMatch;
     }
-    else
-    {
+    else {
 	VERIFY_RR_MODE(stuff->mode, mode, DixSetAttrAccess);
 	if (numOutputs == 0)
 	    return BadMatch;
     }
-    if (numOutputs)
-    {
+    if (numOutputs) {
 	outputs = malloc(numOutputs * sizeof (RROutputPtr));
 	if (!outputs)
 	    return BadAlloc;
@@ -899,12 +854,10 @@ ProcRRSetCrtcConfig (ClientPtr client)
 	outputs = NULL;
     
     outputIds = (RROutput *) (stuff + 1);
-    for (i = 0; i < numOutputs; i++)
-    {
+    for (i = 0; i < numOutputs; i++) {
 	rc = dixLookupResourceByType((pointer *)(outputs + i), outputIds[i],
 				     RROutputType, client, DixSetAttrAccess);
-	if (rc != Success)
-	{
+        if (rc != Success) {
 	    free(outputs);
 	    return rc;
 	}
@@ -912,41 +865,35 @@ ProcRRSetCrtcConfig (ClientPtr client)
 	for (j = 0; j < outputs[i]->numCrtcs; j++)
 	    if (outputs[i]->crtcs[j] == crtc)
 		break;
-	if (j == outputs[i]->numCrtcs)
-	{
+        if (j == outputs[i]->numCrtcs) {
 	    free(outputs);
 	    return BadMatch;
 	}
 	/* validate mode for this output */
-	for (j = 0; j < outputs[i]->numModes + outputs[i]->numUserModes; j++)
-	{
+        for (j = 0; j < outputs[i]->numModes + outputs[i]->numUserModes; j++) {
 	    RRModePtr	m = (j < outputs[i]->numModes ? 
 			     outputs[i]->modes[j] :
 			     outputs[i]->userModes[j - outputs[i]->numModes]);
 	    if (m == mode)
 		break;
 	}
-	if (j == outputs[i]->numModes + outputs[i]->numUserModes)
-	{
+        if (j == outputs[i]->numModes + outputs[i]->numUserModes) {
 	    free(outputs);
 	    return BadMatch;
 	}
     }
     /* validate clones */
-    for (i = 0; i < numOutputs; i++)
-    {
-	for (j = 0; j < numOutputs; j++)
-	{
+    for (i = 0; i < numOutputs; i++) {
+        for (j = 0; j < numOutputs; j++) {
 	    int k;
+
 	    if (i == j)
 		continue;
-	    for (k = 0; k < outputs[i]->numClones; k++)
-	    {
+            for (k = 0; k < outputs[i]->numClones; k++) {
 		if (outputs[i]->clones[k] == outputs[j])
 		    break;
 	    }
-	    if (k == outputs[i]->numClones)
-	    {
+            if (k == outputs[i]->numClones) {
 		free(outputs);
 		return BadMatch;
 	    }
@@ -959,8 +906,7 @@ ProcRRSetCrtcConfig (ClientPtr client)
     time = ClientTimeToServerTime(stuff->timestamp);
     configTime = ClientTimeToServerTime(stuff->configTimestamp);
     
-    if (!pScrPriv)
-    {
+    if (!pScrPriv) {
 	time = currentTime;
 	rep.status = RRSetConfigFailed;
 	goto sendReply;
@@ -987,10 +933,8 @@ ProcRRSetCrtcConfig (ClientPtr client)
 	return BadValue;
     }
 
-    if (mode)
-    {
-	if ((~crtc->rotations) & rotation)
-	{
+    if (mode) {
+        if ((~crtc->rotations) & rotation) {
 	    /*
 	     * requested rotation or reflection not supported by screen
 	     */
@@ -1007,8 +951,7 @@ ProcRRSetCrtcConfig (ClientPtr client)
 	 * then it must allow crtcs to display a subset of the screen, so
 	 * only do this check for drivers without transform support.
 	 */
-	if (pScrPriv->rrScreenSetSize && !crtc->transforms)
-	{
+        if (pScrPriv->rrScreenSetSize && !crtc->transforms) {
 	    int source_width;
 	    int	source_height;
 	    PictTransform transform;
@@ -1020,16 +963,15 @@ ProcRRSetCrtcConfig (ClientPtr client)
 				&crtc->client_pending_transform,
 				&transform, &f_transform, &f_inverse);
 
-	    RRModeGetScanoutSize (mode, &transform, &source_width, &source_height);
-	    if (stuff->x + source_width > pScreen->width)
-	    {
+            RRModeGetScanoutSize(mode, &transform, &source_width,
+                                 &source_height);
+            if (stuff->x + source_width > pScreen->width) {
 		client->errorValue = stuff->x;
 		free(outputs);
 		return BadValue;
 	    }
 	    
-	    if (stuff->y + source_height > pScreen->height)
-	    {
+            if (stuff->y + source_height > pScreen->height) {
 		client->errorValue = stuff->y;
 		free(outputs);
 		return BadValue;
@@ -1039,8 +981,7 @@ ProcRRSetCrtcConfig (ClientPtr client)
     }
     
     if (!RRCrtcSet (crtc, mode, stuff->x, stuff->y,
-		   rotation, numOutputs, outputs))
-    {
+                   rotation, numOutputs, outputs)) {
 	rep.status = RRSetConfigFailed;
 	goto sendReply;
     }
@@ -1056,8 +997,7 @@ sendReply:
     rep.sequenceNumber = client->sequence;
     rep.newTimestamp = pScrPriv->lastSetTime.milliseconds;
 
-    if (client->swapped) 
-    {
+    if (client->swapped) {
 	swaps(&rep.sequenceNumber);
 	swapl(&rep.length);
 	swapl(&rep.newTimestamp);
@@ -1264,8 +1204,7 @@ ProcRRGetCrtcGamma (ClientPtr client)
 	swaps(&reply.size);
     }
     WriteToClient (client, sizeof (xRRGetCrtcGammaReply), (char *) &reply);
-    if (crtc->gammaSize)
-    {
+    if (crtc->gammaSize) {
 	memcpy(extra, crtc->gammaRed, len);
 	client->pSwapReplyFunc = (ReplySwapPtr)CopySwap16Write;
 	WriteSwappedDataToClient (client, len, extra);
@@ -1334,7 +1273,6 @@ ProcRRSetCrtcTransform (ClientPtr client)
 			       filter, nbytes, params, nparams);
 }
 
-
 #define CrtcTransformExtra	(SIZEOF(xRRGetCrtcTransformReply) - 32)
 				
 static int
@@ -1352,8 +1290,7 @@ transform_filter_length (RRTransformPtr transform)
 static int
 transform_filter_encode (ClientPtr client, char *output,
 			 CARD16	*nbytesFilter,
-			 CARD16	*nparamsFilter,
-			 RRTransformPtr transform)
+                        CARD16 *nparamsFilter, RRTransformPtr transform)
 {
     int	    nbytes, nparams;
 
@@ -1380,7 +1317,8 @@ transform_filter_encode (ClientPtr client, char *output,
 }
 
 static void
-transform_encode (ClientPtr client, xRenderTransform *wire, PictTransform *pict)
+transform_encode(ClientPtr client, xRenderTransform * wire,
+                 PictTransform * pict)
 {
     xRenderTransform_from_PictTransform (wire, pict);
     if (client->swapped)
@@ -1420,26 +1358,26 @@ ProcRRGetCrtcTransform (ClientPtr client)
     transform_encode (client, &reply->pendingTransform, &pending->transform);
     extra += transform_filter_encode (client, extra,
 				      &reply->pendingNbytesFilter,
-				      &reply->pendingNparamsFilter,
-				      pending);
+                                     &reply->pendingNparamsFilter, pending);
 
     transform_encode (client, &reply->currentTransform, &current->transform);
     extra += transform_filter_encode (client, extra,
 				      &reply->currentNbytesFilter,
-				      &reply->currentNparamsFilter,
-				      current);
+                                     &reply->currentNparamsFilter, current);
 
     if (client->swapped) {
 	swaps(&reply->sequenceNumber);
 	swapl(&reply->length);
     }
-    WriteToClient (client, sizeof (xRRGetCrtcTransformReply) + nextra, (char *) reply);
+    WriteToClient(client, sizeof(xRRGetCrtcTransformReply) + nextra,
+                  (char *) reply);
     free(reply);
     return Success;
 }
 
 void
-RRConstrainCursorHarder(DeviceIntPtr pDev, ScreenPtr pScreen, int mode, int *x, int *y)
+RRConstrainCursorHarder(DeviceIntPtr pDev, ScreenPtr pScreen, int mode, int *x,
+                        int *y)
 {
     rrScrPriv (pScreen);
     int i;
