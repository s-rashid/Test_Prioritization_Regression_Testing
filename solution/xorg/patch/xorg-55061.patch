diff --git a/damageext/damageext.c b/damageext/damageext.c
index 86f880c..f21f71c 100644
--- a/damageext/damageext.c
+++ b/damageext/damageext.c
@@ -33,6 +33,7 @@ static RESTYPE		DamageExtType;
 static RESTYPE		DamageExtWinType;
 
 static DevPrivateKeyRec DamageClientPrivateKeyRec;
+
 #define DamageClientPrivateKey (&DamageClientPrivateKeyRec)
 
 static void
@@ -54,10 +55,8 @@ DamageExtNotify (DamageExtPtr pDamageExt, BoxPtr pBoxes, int nBoxes)
     ev.geometry.y = pDrawable->y;
     ev.geometry.width = pDrawable->width;
     ev.geometry.height = pDrawable->height;
-    if (pBoxes)
-    {
-	for (i = 0; i < nBoxes; i++)
-	{
+    if (pBoxes) {
+        for (i = 0; i < nBoxes; i++) {
 	    ev.level = pDamageExt->level;
 	    if (i < nBoxes - 1)
 		ev.level |= DamageNotifyMore;
@@ -68,8 +67,7 @@ DamageExtNotify (DamageExtPtr pDamageExt, BoxPtr pBoxes, int nBoxes)
 	    WriteEventsToClient (pClient, 1, (xEvent *) &ev);
 	}
     }
-    else
-    {
+    else {
 	ev.area.x = 0;
 	ev.area.y = 0;
 	ev.area.width = pDrawable->width;
@@ -77,8 +75,7 @@ DamageExtNotify (DamageExtPtr pDamageExt, BoxPtr pBoxes, int nBoxes)
 	WriteEventsToClient (pClient, 1, (xEvent *) &ev);
     }
     /* Composite extension marks clients with manual Subwindows as critical */
-    if (pDamageClient->critical > 0)
-    {
+    if (pDamageClient->critical > 0) {
 	SetCriticalOutputPending ();
 	pClient->smart_priority = SMART_MAX_PRIORITY;
     }
@@ -92,7 +89,8 @@ DamageExtReport (DamagePtr pDamage, RegionPtr pRegion, void *closure)
     switch (pDamageExt->level) {
     case DamageReportRawRegion:
     case DamageReportDeltaRegion:
-	DamageExtNotify (pDamageExt, RegionRects(pRegion), RegionNumRects(pRegion));
+        DamageExtNotify(pDamageExt, RegionRects(pRegion),
+                        RegionNumRects(pRegion));
 	break;
     case DamageReportBoundingBox:
 	DamageExtNotify (pDamageExt, RegionExtents(pRegion), 1);
@@ -129,6 +127,7 @@ ProcDamageQueryVersion(ClientPtr client)
 {
     DamageClientPtr pDamageClient = GetDamageClient (client);
     xDamageQueryVersionReply rep;
+
     REQUEST(xDamageQueryVersionReq);
 
     REQUEST_SIZE_MATCH(xDamageQueryVersionReq);
@@ -138,7 +137,8 @@ ProcDamageQueryVersion(ClientPtr client)
     if (stuff->majorVersion < SERVER_DAMAGE_MAJOR_VERSION) {
 	rep.majorVersion = stuff->majorVersion;
 	rep.minorVersion = stuff->minorVersion;
-    } else {
+    }
+    else {
 	rep.majorVersion = SERVER_DAMAGE_MAJOR_VERSION;
 	if (stuff->majorVersion == SERVER_DAMAGE_MAJOR_VERSION &&
 	    stuff->minorVersion < SERVER_DAMAGE_MINOR_VERSION)
@@ -205,11 +205,8 @@ ProcDamageCreate (ClientPtr client)
     pDamageExt->pDamage = DamageCreate (DamageExtReport,
 					DamageExtDestroy,
 					level,
-					FALSE,
-					pDrawable->pScreen,
-					pDamageExt);
-    if (!pDamageExt->pDamage)
-    {
+                                       FALSE, pDrawable->pScreen, pDamageExt);
+    if (!pDamageExt->pDamage) {
 	free(pDamageExt);
 	return BadAlloc;
     }
@@ -219,8 +216,7 @@ ProcDamageCreate (ClientPtr client)
     DamageSetReportAfterOp (pDamageExt->pDamage, TRUE);
     DamageRegister (pDamageExt->pDrawable, pDamageExt->pDamage);
 
-    if (pDrawable->type == DRAWABLE_WINDOW)
-    {
+    if (pDrawable->type == DRAWABLE_WINDOW) {
 	pRegion = &((WindowPtr) pDrawable)->borderClip;
 	DamageReportDamage(pDamageExt->pDamage, pRegion);
     }
@@ -253,18 +249,17 @@ ProcDamageSubtract (ClientPtr client)
     VERIFY_REGION_OR_NONE(pRepair, stuff->repair, client, DixWriteAccess);
     VERIFY_REGION_OR_NONE(pParts, stuff->parts, client, DixWriteAccess);
 
-    if (pDamageExt->level != DamageReportRawRegion)
-    {
+    if (pDamageExt->level != DamageReportRawRegion) {
 	DamagePtr   pDamage = pDamageExt->pDamage;
-	if (pRepair)
-	{
+
+        if (pRepair) {
 	    if (pParts)
 		RegionIntersect(pParts, DamageRegion (pDamage), pRepair);
 	    if (DamageSubtract (pDamage, pRepair))
-		DamageExtReport (pDamage, DamageRegion (pDamage), (void *) pDamageExt);
+                DamageExtReport(pDamage, DamageRegion(pDamage),
+                                (void *) pDamageExt);
 	}
-	else
-	{
+        else {
 	    if (pParts)
 		RegionCopy(pParts, DamageRegion (pDamage));
 	    DamageEmpty (pDamage);
@@ -309,13 +304,9 @@ static const int version_requests[] = {
 static int (*ProcDamageVector[XDamageNumberRequests])(ClientPtr) = {
 /*************** Version 1 ******************/
     ProcDamageQueryVersion,
-    ProcDamageCreate,
-    ProcDamageDestroy,
-    ProcDamageSubtract,
+        ProcDamageCreate, ProcDamageDestroy, ProcDamageSubtract,
 /*************** Version 1.1 ****************/
-    ProcDamageAdd,
-};
-
+ProcDamageAdd,};
 
 static int
 ProcDamageDispatch (ClientPtr client)
@@ -393,12 +384,9 @@ SProcDamageAdd (ClientPtr client)
 static int (*SProcDamageVector[XDamageNumberRequests])(ClientPtr) = {
 /*************** Version 1 ******************/
     SProcDamageQueryVersion,
-    SProcDamageCreate,
-    SProcDamageDestroy,
-    SProcDamageSubtract,
+        SProcDamageCreate, SProcDamageDestroy, SProcDamageSubtract,
 /*************** Version 1.1 ****************/
-    SProcDamageAdd,
-};
+SProcDamageAdd,};
 
 static int
 SProcDamageDispatch (ClientPtr client)
@@ -410,9 +398,7 @@ SProcDamageDispatch (ClientPtr client)
 }
 
 static void
-DamageClientCallback (CallbackListPtr	*list,
-		      pointer		closure,
-		      pointer		data)
+DamageClientCallback(CallbackListPtr *list, pointer closure, pointer data)
 {
     NewClientInfoRec	*clientinfo = (NewClientInfoRec *) data;
     ClientPtr		pClient = clientinfo->client;
@@ -423,8 +409,7 @@ DamageClientCallback (CallbackListPtr	*list,
     pDamageClient->minor_version = 0;
 }
 
-/*ARGSUSED*/
-static void
+ /*ARGSUSED*/ static void
 DamageResetProc (ExtensionEntry *extEntry)
 {
     DeleteCallback (&ClientStateCallback, DamageClientCallback, 0);
@@ -441,8 +426,7 @@ FreeDamageExt (pointer value, XID did)
     pDamageExt->id = 0;
     if (WindowDrawable(pDamageExt->pDrawable->type))
 	FreeResourceByType (pDamageExt->pDrawable->id, DamageExtWinType, TRUE);
-    if (pDamageExt->pDamage)
-    {
+    if (pDamageExt->pDamage) {
 	DamageUnregister (pDamageExt->pDrawable, pDamageExt->pDamage);
 	DamageDestroy (pDamageExt->pDamage);
     }
@@ -461,8 +445,7 @@ FreeDamageExtWin (pointer value, XID wid)
 }
 
 static void
-SDamageNotifyEvent (xDamageNotifyEvent *from,
-		    xDamageNotifyEvent *to)
+SDamageNotifyEvent(xDamageNotifyEvent * from, xDamageNotifyEvent * to)
 {
     to->type = from->type;
     cpswaps (from->sequenceNumber, to->sequenceNumber);
@@ -495,7 +478,8 @@ DamageExtensionInit(void)
     if (!DamageExtWinType)
 	return;
 
-    if (!dixRegisterPrivateKey(&DamageClientPrivateKeyRec, PRIVATE_CLIENT, sizeof (DamageClientRec)))
+    if (!dixRegisterPrivateKey
+        (&DamageClientPrivateKeyRec, PRIVATE_CLIENT, sizeof(DamageClientRec)))
 	return;
 
     if (!AddCallback (&ClientStateCallback, DamageClientCallback, 0))
@@ -504,12 +488,12 @@ DamageExtensionInit(void)
     if ((extEntry = AddExtension(DAMAGE_NAME, XDamageNumberEvents, 
 				 XDamageNumberErrors,
 				 ProcDamageDispatch, SProcDamageDispatch,
-				 DamageResetProc, StandardMinorOpcode)) != 0)
-    {
+                                 DamageResetProc, StandardMinorOpcode)) != 0) {
 	DamageReqCode = (unsigned char)extEntry->base;
 	DamageEventBase = extEntry->eventBase;
 	EventSwapVector[DamageEventBase + XDamageNotify] =
 			(EventSwapPtr) SDamageNotifyEvent;
-	SetResourceTypeErrorValue(DamageExtType, extEntry->errorBase + BadDamage);
+        SetResourceTypeErrorValue(DamageExtType,
+                                  extEntry->errorBase + BadDamage);
     }
 }
