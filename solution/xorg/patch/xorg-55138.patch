diff --git a/fb/fbpict.c b/fb/fbpict.c
index 57c93fd..097a1a6 100644
--- a/fb/fbpict.c
+++ b/fb/fbpict.c
@@ -43,11 +43,7 @@ fbComposite (CARD8      op,
 	     INT16      xSrc,
 	     INT16      ySrc,
 	     INT16      xMask,
-	     INT16      yMask,
-	     INT16      xDst,
-	     INT16      yDst,
-	     CARD16     width,
-	     CARD16     height)
+            INT16 yMask, INT16 xDst, INT16 yDst, CARD16 width, CARD16 height)
 {
     pixman_image_t *src, *mask, *dest;
     int src_xoff, src_yoff;
@@ -62,13 +58,11 @@ fbComposite (CARD8      op,
     mask = image_from_pict (pMask, FALSE, &msk_xoff, &msk_yoff);
     dest = image_from_pict (pDst, TRUE, &dst_xoff, &dst_yoff);
 
-    if (src && dest && !(pMask && !mask))
-    {
+    if (src && dest && !(pMask && !mask)) {
 	pixman_image_composite (op, src, mask, dest,
 				xSrc + src_xoff, ySrc + src_yoff,
 				xMask + msk_xoff, yMask + msk_yoff,
-				xDst + dst_xoff, yDst + dst_yoff,
-				width, height);
+                               xDst + dst_xoff, yDst + dst_yoff, width, height);
     }
 
     free_pixman_pict (pSrc, src);
@@ -108,8 +102,10 @@ create_linear_gradient_image (PictGradient *gradient)
     p2.x = linear->p2.x;
     p2.y = linear->p2.y;
     
-    return pixman_image_create_linear_gradient (
-	&p1, &p2, (pixman_gradient_stop_t *)gradient->stops, gradient->nstops);
+    return pixman_image_create_linear_gradient(&p1, &p2,
+                                               (pixman_gradient_stop_t *)
+                                               gradient->stops,
+                                               gradient->nstops);
 }
 
 static pixman_image_t *
@@ -124,10 +120,11 @@ create_radial_gradient_image (PictGradient *gradient)
     c2.x = radial->c2.x;
     c2.y = radial->c2.y;
     
-    return pixman_image_create_radial_gradient (
-	&c1, &c2, radial->c1.radius,
+    return pixman_image_create_radial_gradient(&c1, &c2, radial->c1.radius,
 	radial->c2.radius,
-	(pixman_gradient_stop_t *)gradient->stops, gradient->nstops);
+                                               (pixman_gradient_stop_t *)
+                                               gradient->stops,
+                                               gradient->nstops);
 }
 
 static pixman_image_t *
@@ -139,16 +136,14 @@ create_conical_gradient_image (PictGradient *gradient)
     center.x = conical->center.x;
     center.y = conical->center.y;
     
-    return pixman_image_create_conical_gradient (
-	&center, conical->angle, (pixman_gradient_stop_t *)gradient->stops,
+    return pixman_image_create_conical_gradient(&center, conical->angle,
+                                                (pixman_gradient_stop_t *)
+                                                gradient->stops,
 	gradient->nstops);
 }
 
 static pixman_image_t *
-create_bits_picture (PicturePtr pict,
-		     Bool       has_clip,
-		     int	*xoff,
-		     int	*yoff)
+create_bits_picture(PicturePtr pict, Bool has_clip, int *xoff, int *yoff)
 {
     PixmapPtr pixmap;
     FbBits *bits;
@@ -159,10 +154,10 @@ create_bits_picture (PicturePtr pict,
     fbGetDrawablePixmap (pict->pDrawable, pixmap, *xoff, *yoff);
     fbGetPixmapBitsData(pixmap, bits, stride, bpp);
 
-    image = pixman_image_create_bits (
-	(pixman_format_code_t)pict->format,
-	pixmap->drawable.width, pixmap->drawable.height,
-	(uint32_t *)bits, stride * sizeof (FbStride));
+    image = pixman_image_create_bits((pixman_format_code_t) pict->format,
+                                     pixmap->drawable.width,
+                                     pixmap->drawable.height, (uint32_t *) bits,
+                                     stride * sizeof(FbStride));
 
     if (!image)
 	return NULL;
@@ -184,8 +179,7 @@ create_bits_picture (PicturePtr pict,
     /* pCompositeClip is undefined for source pictures, so
      * only set the clip region for pictures with drawables
      */
-    if (has_clip)
-    {
+    if (has_clip) {
 	if (pict->clientClipType != CT_NONE)
 	    pixman_image_set_has_client_clip (image, TRUE);
 
@@ -209,17 +203,18 @@ create_bits_picture (PicturePtr pict,
     return image;
 }
 
-static pixman_image_t *
-image_from_pict_internal (PicturePtr pict, Bool has_clip, int *xoff, int *yoff, Bool is_alpha_map);
+static pixman_image_t *image_from_pict_internal(PicturePtr pict, Bool has_clip,
+                                                int *xoff, int *yoff,
+                                                Bool is_alpha_map);
 
 static void
-set_image_properties (pixman_image_t *image, PicturePtr pict, Bool has_clip, int *xoff, int *yoff, Bool is_alpha_map)
+set_image_properties(pixman_image_t * image, PicturePtr pict, Bool has_clip,
+                     int *xoff, int *yoff, Bool is_alpha_map)
 {
     pixman_repeat_t repeat;
     pixman_filter_t filter;
     
-    if (pict->transform)
-    {
+    if (pict->transform) {
 	/* For source images, adjust the transform to account
 	 * for the drawable offset within the pixman image,
 	 * then set the offset to 0 as it will be used
@@ -236,12 +231,12 @@ set_image_properties (pixman_image_t *image, PicturePtr pict, Bool has_clip, int
 	    pixman_image_set_transform (image, &adjusted);
 	    *xoff = 0;
 	    *yoff = 0;
-	} else
+        }
+        else
 	    pixman_image_set_transform (image, pict->transform);
     }
     
-    switch (pict->repeatType)
-    {
+    switch (pict->repeatType) {
     default:
     case RepeatNone:
 	repeat = PIXMAN_REPEAT_NONE;
@@ -265,21 +260,21 @@ set_image_properties (pixman_image_t *image, PicturePtr pict, Bool has_clip, int
     /* Fetch alpha map unless 'pict' is being used
      * as the alpha map for this operation
      */
-    if (pict->alphaMap && !is_alpha_map)
-    {
+    if (pict->alphaMap && !is_alpha_map) {
 	int alpha_xoff, alpha_yoff;
-	pixman_image_t *alpha_map = image_from_pict_internal (pict->alphaMap, FALSE, &alpha_xoff, &alpha_yoff, TRUE);
+        pixman_image_t *alpha_map =
+            image_from_pict_internal(pict->alphaMap, FALSE, &alpha_xoff,
+                                     &alpha_yoff, TRUE);
 	
-	pixman_image_set_alpha_map (
-	    image, alpha_map, pict->alphaOrigin.x, pict->alphaOrigin.y);
+        pixman_image_set_alpha_map(image, alpha_map, pict->alphaOrigin.x,
+                                   pict->alphaOrigin.y);
 	
 	free_pixman_pict (pict->alphaMap, alpha_map);
     }
     
     pixman_image_set_component_alpha (image, pict->componentAlpha);
 
-    switch (pict->filter)
-    {
+    switch (pict->filter) {
     default:
     case PictFilterNearest:
     case PictFilterFast:
@@ -296,32 +291,31 @@ set_image_properties (pixman_image_t *image, PicturePtr pict, Bool has_clip, int
 	break;
     }
     
-    pixman_image_set_filter (image, filter, (pixman_fixed_t *)pict->filter_params, pict->filter_nparams);
+    pixman_image_set_filter(image, filter,
+                            (pixman_fixed_t *) pict->filter_params,
+                            pict->filter_nparams);
     pixman_image_set_source_clipping (image, TRUE);
 }
 
 static pixman_image_t *
-image_from_pict_internal (PicturePtr pict, Bool has_clip, int *xoff, int *yoff, Bool is_alpha_map)
+image_from_pict_internal(PicturePtr pict, Bool has_clip, int *xoff, int *yoff,
+                         Bool is_alpha_map)
 {
     pixman_image_t *image = NULL;
 
     if (!pict)
 	return NULL;
 
-    if (pict->pDrawable)
-    {
+    if (pict->pDrawable) {
 	image = create_bits_picture (pict, has_clip, xoff, yoff);
     }
-    else if (pict->pSourcePict)
-    {
+    else if (pict->pSourcePict) {
 	SourcePict *sp = pict->pSourcePict;
 	
-	if (sp->type == SourcePictTypeSolidFill)
-	{
+        if (sp->type == SourcePictTypeSolidFill) {
 	    image = create_solid_fill_image (pict);
 	}
-	else
-	{
+        else {
 	    PictGradient *gradient = &pict->pSourcePict->gradient;
 	    
 	    if (sp->type == SourcePictTypeLinear)
