diff --git a/hw/xquartz/GL/indirect.c b/hw/xquartz/GL/indirect.c
index 1f4f79c..d9dc2a1 100644
--- a/hw/xquartz/GL/indirect.c
+++ b/hw/xquartz/GL/indirect.c
@@ -2,7 +2,7 @@
  * GLX implementation that uses Apple's OpenGL.framework
  * (Indirect rendering path -- it's also used for some direct mode code too)
  *
- * Copyright (c) 2007-2011 Apple Inc.
+ * Copyright (c) 2007-2012 Apple Inc.
  * Copyright (c) 2004 Torrey T. Lyons. All Rights Reserved.
  * Copyright (c) 2002 Greg Parker. All Rights Reserved.
  *
@@ -56,30 +56,41 @@
 #include "dri.h"
 
 #include "darwin.h"
-#define GLAQUA_DEBUG_MSG(msg, args...) ASL_LOG(ASL_LEVEL_DEBUG, "GLXAqua", msg, ##args)
+#define GLAQUA_DEBUG_MSG(msg, args ...) ASL_LOG(ASL_LEVEL_DEBUG, "GLXAqua", \
+                                                msg, \
+                                                ## args)
 
-__GLXprovider *GlxGetDRISWrastProvider(void);
+__GLXprovider *
+GlxGetDRISWrastProvider(void);
 
-static void setup_dispatch_table(void);
-GLuint __glFloorLog2(GLuint val);
-void warn_func(void *p1, char *format, ...);
+static void
+setup_dispatch_table(void);
+GLuint
+__glFloorLog2(GLuint val);
+void
+warn_func(void * p1, char *format, ...);
 
 // some prototypes
-static __GLXscreen *__glXAquaScreenProbe(ScreenPtr pScreen);
-static __GLXdrawable *__glXAquaScreenCreateDrawable(ClientPtr client,
-                                                    __GLXscreen * screen,
-                                                    DrawablePtr pDraw,
-                                                    XID drawId, int type,
+static __GLXscreen *
+__glXAquaScreenProbe(ScreenPtr pScreen);
+static __GLXdrawable *
+__glXAquaScreenCreateDrawable(ClientPtr client, __GLXscreen *screen,
+                              DrawablePtr pDraw, XID drawId, int type,
                                                     XID glxDrawId,
                                                     __GLXconfig * conf);
 
-static void __glXAquaContextDestroy(__GLXcontext * baseContext);
-static int __glXAquaContextMakeCurrent(__GLXcontext * baseContext);
-static int __glXAquaContextLoseCurrent(__GLXcontext * baseContext);
-static int __glXAquaContextCopy(__GLXcontext * baseDst, __GLXcontext * baseSrc,
+static void
+__glXAquaContextDestroy(__GLXcontext *baseContext);
+static int
+__glXAquaContextMakeCurrent(__GLXcontext *baseContext);
+static int
+__glXAquaContextLoseCurrent(__GLXcontext *baseContext);
+static int
+__glXAquaContextCopy(__GLXcontext *baseDst, __GLXcontext *baseSrc,
                                 unsigned long mask);
 
-static CGLPixelFormatObj makeFormat(__GLXconfig * conf);
+static CGLPixelFormatObj
+makeFormat(__GLXconfig *conf);
 
 __GLXprovider __glXDRISWRastProvider = {
     __glXAquaScreenProbe,
@@ -186,11 +197,11 @@ __glXAquaContextDestroy(__GLXcontext * baseContext)
     if (context != NULL) {
         if (context->sid != 0 && surface_hash != NULL) {
             lst =
-                x_hash_table_lookup(surface_hash,
-                                    x_cvt_uint_to_vptr(context->sid), NULL);
+                x_hash_table_lookup(surface_hash, x_cvt_uint_to_vptr(
+                                        context->sid), NULL);
             lst = x_list_remove(lst, context);
-            x_hash_table_insert(surface_hash, x_cvt_uint_to_vptr(context->sid),
-                                lst);
+            x_hash_table_insert(surface_hash, x_cvt_uint_to_vptr(
+                                    context->sid), lst);
         }
 
         if (context->ctx != NULL)
@@ -232,7 +243,6 @@ surface_notify(void *_arg, void *data)
     __GLXAquaDrawable *draw = (__GLXAquaDrawable *) data;
     __GLXAquaContext *context;
     x_list *lst;
-
     if (_arg == NULL || data == NULL) {
         ErrorF("surface_notify called with bad params");
         return;
@@ -250,14 +260,15 @@ surface_notify(void *_arg, void *data)
     case AppleDRISurfaceNotifyChanged:
         if (surface_hash != NULL) {
             lst =
-                x_hash_table_lookup(surface_hash, x_cvt_uint_to_vptr(arg->id),
-                                    NULL);
+                x_hash_table_lookup(surface_hash, x_cvt_uint_to_vptr(
+                                        arg->id), NULL);
             for (; lst != NULL; lst = lst->next) {
                 context = lst->data;
                 xp_update_gl_context(context->ctx);
             }
         }
         break;
+
     default:
         ErrorF("surface_notify: unknown kind %d\n", arg->kind);
         break;
@@ -284,7 +295,8 @@ attach(__GLXAquaContext * context, __GLXAquaDrawable * draw)
     if (draw->sid == 0) {
         //if (!quartzProcs->CreateSurface(pDraw->pScreen, pDraw->id, pDraw,
         if (!DRICreateSurface(pDraw->pScreen, pDraw->id, pDraw,
-                              0, &draw->sid, NULL, surface_notify, draw))
+                              0, &draw->sid, NULL,
+                              surface_notify, draw))
             return TRUE;
         draw->pDraw = pDraw;
     }
@@ -311,12 +323,12 @@ attach(__GLXAquaContext * context, __GLXAquaDrawable * draw)
             surface_hash = x_hash_table_new(NULL, NULL, NULL, NULL);
 
         lst =
-            x_hash_table_lookup(surface_hash, x_cvt_uint_to_vptr(context->sid),
-                                NULL);
+            x_hash_table_lookup(surface_hash, x_cvt_uint_to_vptr(
+                                    context->sid), NULL);
         if (x_list_find(lst, context) == NULL) {
             lst = x_list_prepend(lst, context);
-            x_hash_table_insert(surface_hash, x_cvt_uint_to_vptr(context->sid),
-                                lst);
+            x_hash_table_insert(surface_hash, x_cvt_uint_to_vptr(
+                                    context->sid), lst);
         }
 
         GLAQUA_DEBUG_MSG("attached 0x%x to 0x%x\n", (unsigned int) pDraw->id,
@@ -333,7 +345,6 @@ static void
 unattach(__GLXAquaContext * context)
 {
     x_list *lst;
-
     GLAQUA_DEBUG_MSG("unattach\n");
     if (context == NULL) {
         ErrorF("Tried to unattach a null context\n");
@@ -343,8 +354,8 @@ unattach(__GLXAquaContext * context)
         GLAQUA_DEBUG_MSG("unattaching\n");
 
         if (surface_hash != NULL) {
-            lst =
-                x_hash_table_lookup(surface_hash, (void *) context->sid, NULL);
+            lst = x_hash_table_lookup(surface_hash, (void *)context->sid,
+                                      NULL);
             lst = x_list_remove(lst, context);
             x_hash_table_insert(surface_hash, (void *) context->sid, lst);
         }
@@ -517,9 +528,8 @@ __glXAquaScreenProbe(ScreenPtr pScreen)
     screen->base.swapInterval = /*FIXME*/ NULL;
     screen->base.pScreen = pScreen;
 
-    screen->base.fbconfigs =
-        __glXAquaCreateVisualConfigs(&screen->base.numFBConfigs,
-                                     pScreen->myNum);
+    screen->base.fbconfigs = __glXAquaCreateVisualConfigs(
+        &screen->base.numFBConfigs, pScreen->myNum);
 
     __glXScreenInit(&screen->base, pScreen);
 
@@ -576,7 +586,9 @@ __glXAquaScreenCreateDrawable(ClientPtr client,
                               __GLXscreen * screen,
                               DrawablePtr pDraw,
                               XID drawId,
-                              int type, XID glxDrawId, __GLXconfig * conf)
+                              int type,
+                              XID glxDrawId,
+                              __GLXconfig *conf)
 {
     __GLXAquaDrawable *glxPriv;
 
@@ -587,8 +599,8 @@ __glXAquaScreenCreateDrawable(ClientPtr client,
 
     memset(glxPriv, 0, sizeof *glxPriv);
 
-    if (!__glXDrawableInit
-        (&glxPriv->base, screen, pDraw, type, glxDrawId, conf)) {
+    if (!__glXDrawableInit(&glxPriv->base, screen, pDraw, type, glxDrawId,
+                           conf)) {
         free(glxPriv);
         return NULL;
     }
@@ -619,7 +631,8 @@ __glFloorLog2(GLuint val)
 }
 
 #ifndef OPENGL_FRAMEWORK_PATH
-#define OPENGL_FRAMEWORK_PATH "/System/Library/Frameworks/OpenGL.framework/OpenGL"
+#define OPENGL_FRAMEWORK_PATH \
+    "/System/Library/Frameworks/OpenGL.framework/OpenGL"
 #endif
 
 static void
