diff --git a/hw/xfree86/modes/xf86Modes.c b/hw/xfree86/modes/xf86Modes.c
index 959e376..033d4ae 100644
--- a/hw/xfree86/modes/xf86Modes.c
+++ b/hw/xfree86/modes/xf86Modes.c
@@ -51,7 +51,7 @@ extern XF86ConfigPtr xf86configptr;
  *
  * Exact copy of xf86Mode.c's.
  */
-_X_EXPORT double
+double
 xf86ModeHSync(const DisplayModeRec *mode)
 {
     double hsync = 0.0;
@@ -69,7 +69,7 @@ xf86ModeHSync(const DisplayModeRec *mode)
  *
  * Exact copy of xf86Mode.c's.
  */
-_X_EXPORT double
+double
 xf86ModeVRefresh(const DisplayModeRec *mode)
 {
     double refresh = 0.0;
@@ -88,7 +88,7 @@ xf86ModeVRefresh(const DisplayModeRec *mode)
     return refresh;
 }
 
-_X_EXPORT int
+int
 xf86ModeWidth (const DisplayModeRec *mode, Rotation rotation)
 {
     switch (rotation & 0xf) {
@@ -103,7 +103,7 @@ xf86ModeWidth (const DisplayModeRec *mode, Rotation rotation)
     }
 }
 
-_X_EXPORT int
+int
 xf86ModeHeight (const DisplayModeRec *mode, Rotation rotation)
 {
     switch (rotation & 0xf) {
@@ -119,7 +119,7 @@ xf86ModeHeight (const DisplayModeRec *mode, Rotation rotation)
 }
 
 /** Calculates the memory bandwidth (in MiB/sec) of a mode. */
-_X_EXPORT unsigned int
+unsigned int
 xf86ModeBandwidth(DisplayModePtr mode, int depth)
 {
     float a_active, a_total, active_percent, pixels_per_second;
@@ -137,7 +137,7 @@ xf86ModeBandwidth(DisplayModePtr mode, int depth)
 }
 
 /** Sets a default mode name of <width>x<height> on a mode. */
-_X_EXPORT void
+void
 xf86SetModeDefaultName(DisplayModePtr mode)
 {
     if (mode->name != NULL)
@@ -154,7 +154,7 @@ xf86SetModeDefaultName(DisplayModePtr mode)
  *
  * Exact copy of xf86Mode.c's.
  */
-_X_EXPORT void
+void
 xf86SetModeCrtc(DisplayModePtr p, int adjustFlags)
 {
     if ((p == NULL) || ((p->type & M_T_CRTC_C) == M_T_BUILTIN))
@@ -205,7 +205,7 @@ xf86SetModeCrtc(DisplayModePtr p, int adjustFlags)
 /**
  * Allocates and returns a copy of pMode, including pointers within pMode.
  */
-_X_EXPORT DisplayModePtr
+DisplayModePtr
 xf86DuplicateMode(const DisplayModeRec *pMode)
 {
     DisplayModePtr pNew;
@@ -229,7 +229,7 @@ xf86DuplicateMode(const DisplayModeRec *pMode)
  *
  * \param modeList doubly-linked mode list
  */
-_X_EXPORT DisplayModePtr
+DisplayModePtr
 xf86DuplicateModes(ScrnInfoPtr pScrn, DisplayModePtr modeList)
 {
     DisplayModePtr first = NULL, last = NULL;
@@ -263,7 +263,7 @@ xf86DuplicateModes(ScrnInfoPtr pScrn, DisplayModePtr modeList)
  *
  * This isn't in xf86Modes.c, but it might deserve to be there.
  */
-_X_EXPORT Bool
+Bool
 xf86ModesEqual(const DisplayModeRec *pMode1, const DisplayModeRec *pMode2)
 {
      if (pMode1->Clock == pMode2->Clock &&
@@ -299,7 +299,7 @@ add(char **p, char *new)
  *
  * Convenient VRefresh printing was added, though, compared to xf86Mode.c
  */
-_X_EXPORT void
+void
 xf86PrintModeline(int scrnIndex,DisplayModePtr mode)
 {
     char tmp[256];
@@ -345,7 +345,7 @@ xf86PrintModeline(int scrnIndex,DisplayModePtr mode)
  *
  * \bug only V_INTERLACE and V_DBLSCAN are supported.  Is that enough?
  */
-_X_EXPORT void
+void
 xf86ValidateModesFlags(ScrnInfoPtr pScrn, DisplayModePtr modeList,
 			    int flags)
 {
@@ -364,7 +364,7 @@ xf86ValidateModesFlags(ScrnInfoPtr pScrn, DisplayModePtr modeList,
  *
  * \param modeList doubly-linked list of modes.
  */
-_X_EXPORT void
+void
 xf86ValidateModesSize(ScrnInfoPtr pScrn, DisplayModePtr modeList,
 			  int maxX, int maxY, int maxPitch)
 {
@@ -391,7 +391,7 @@ xf86ValidateModesSize(ScrnInfoPtr pScrn, DisplayModePtr modeList,
  *
  * \param modeList doubly-linked list of modes.
  */
-_X_EXPORT void
+void
 xf86ValidateModesSync(ScrnInfoPtr pScrn, DisplayModePtr modeList,
 			  MonPtr mon)
 {
@@ -436,7 +436,7 @@ xf86ValidateModesSync(ScrnInfoPtr pScrn, DisplayModePtr modeList,
  * \param max pointer to maximums of clock ranges
  * \param n_ranges number of ranges.
  */
-_X_EXPORT void
+void
 xf86ValidateModesClocks(ScrnInfoPtr pScrn, DisplayModePtr modeList,
 			    int *min, int *max, int n_ranges)
 {
@@ -469,7 +469,7 @@ xf86ValidateModesClocks(ScrnInfoPtr pScrn, DisplayModePtr modeList,
  *
  * \param modeList doubly-linked list of modes.
  */
-_X_EXPORT void
+void
 xf86ValidateModesUserConfig(ScrnInfoPtr pScrn, DisplayModePtr modeList)
 {
     DisplayModePtr mode;
@@ -501,7 +501,7 @@ xf86ValidateModesUserConfig(ScrnInfoPtr pScrn, DisplayModePtr modeList)
  * \param bandwidth bandwidth in MHz.
  * \param depth color depth.
  */
-_X_EXPORT void
+void
 xf86ValidateModesBandwidth(ScrnInfoPtr pScrn, DisplayModePtr modeList,
 			   unsigned int bandwidth, int depth)
 {
@@ -518,7 +518,7 @@ xf86ValidateModesBandwidth(ScrnInfoPtr pScrn, DisplayModePtr modeList,
     }
 }
 
-_X_EXPORT Bool
+Bool
 xf86ModeIsReduced(const DisplayModeRec *mode)
 {
     if ((((mode->HDisplay * 5 / 4) & ~0x07) > mode->HTotal) &&
@@ -535,7 +535,7 @@ xf86ModeIsReduced(const DisplayModeRec *mode)
  *
  * \param modeList doubly-linked list of modes.
  */
-_X_EXPORT void
+void
 xf86ValidateModesReducedBlanking(ScrnInfoPtr pScrn, DisplayModePtr modeList)
 {
     DisplayModePtr mode;
@@ -558,7 +558,7 @@ xf86ValidateModesReducedBlanking(ScrnInfoPtr pScrn, DisplayModePtr modeList)
  * \param verbose determines whether the reason for mode invalidation is
  *	  printed.
  */
-_X_EXPORT void
+void
 xf86PruneInvalidModes(ScrnInfoPtr pScrn, DisplayModePtr *modeList,
 			  Bool verbose)
 {
@@ -592,7 +592,7 @@ xf86PruneInvalidModes(ScrnInfoPtr pScrn, DisplayModePtr *modeList,
  *
  * \param modes doubly-linked mode list.
  */
-_X_EXPORT DisplayModePtr
+DisplayModePtr
 xf86ModesAdd(DisplayModePtr modes, DisplayModePtr new)
 {
     if (modes == NULL)
@@ -658,7 +658,7 @@ xf86GetConfigModes (XF86ConfModeLinePtr conf_mode)
 /**
  * Build a mode list from a monitor configuration
  */
-_X_EXPORT DisplayModePtr
+DisplayModePtr
 xf86GetMonitorModes (ScrnInfoPtr pScrn, XF86ConfMonitorPtr conf_monitor)
 {
     DisplayModePtr	    modes = NULL;
@@ -690,7 +690,7 @@ xf86GetMonitorModes (ScrnInfoPtr pScrn, XF86ConfMonitorPtr conf_monitor)
 /**
  * Build a mode list containing all of the default modes
  */
-_X_EXPORT DisplayModePtr
+DisplayModePtr
 xf86GetDefaultModes (Bool interlaceAllowed, Bool doubleScanAllowed)
 {
     DisplayModePtr  head = NULL, mode;
