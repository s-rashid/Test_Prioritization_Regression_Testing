diff --git a/hw/xfree86/utils/gtf/gtf.c b/hw/xfree86/utils/gtf/gtf.c
index 87fcb3f..15503bb 100644
--- a/hw/xfree86/utils/gtf/gtf.c
+++ b/hw/xfree86/utils/gtf/gtf.c
@@ -128,27 +128,20 @@
 #define C_PRIME           (((C - J) * K/256.0) + J)
 #define M_PRIME           (K/256.0 * M)
 
-
 /* struct definitions */
 
-typedef struct __mode
-{
+typedef struct __mode {
     int hr, hss, hse, hfl;
     int vr, vss, vse, vfl;
     float pclk, h_freq, v_freq;
 } mode;
 
-
-typedef struct __options
-{
+typedef struct __options {
     int x, y;
     int xorgmode, fbmode;
     float v_freq;
 } options;
 
-
-
-
 /* prototypes */
 
 void print_value(int n, const char *name, float val);
@@ -158,9 +151,6 @@ mode *vert_refresh (int h_pixels, int v_lines, float freq,
                     int interlaced, int margins);
 options *parse_command_line (int argc, char *argv[]);
 
-
-
-
 /*
  * print_value() - print the result of the named computation; this is
  * useful when comparing against the GTF EXCEL spreadsheet.
@@ -168,18 +158,18 @@ options *parse_command_line (int argc, char *argv[]);
 
 int global_verbose = 0;
 
-void print_value(int n, const char *name, float val)
+void
+print_value(int n, const char *name, float val)
 {
     if (global_verbose) {
         printf("%2d: %-27s: %15f\n", n, name, val);
     }
 }
 
-
-
 /* print_xf86_mode() - print the XServer modeline, given mode timings. */
 
-void print_xf86_mode (mode *m)
+void
+print_xf86_mode(mode * m)
 {
     printf ("\n");
     printf ("  # %dx%d @ %.2f Hz (GTF) hsync: %.2f kHz; pclk: %.2f MHz\n",
@@ -190,13 +180,10 @@ void print_xf86_mode (mode *m)
             "  %d %d %d %d"
             "  -HSync +Vsync\n\n",
             m->hr, m->vr, m->v_freq, m->pclk,
-            m->hr, m->hss, m->hse, m->hfl,
-            m->vr, m->vss, m->vse, m->vfl);
+           m->hr, m->hss, m->hse, m->hfl, m->vr, m->vss, m->vse, m->vfl);
     
 }
 
-
-
 /*
  * print_fb_mode() - print a mode description in fbset(8) format;
  * see the fb.modes(8) manpage.  The timing description used in
@@ -243,17 +230,15 @@ void print_xf86_mode (mode *m)
  * to edit the mode description after it's generated.
  */
 
-void print_fb_mode (mode *m)
+void
+print_fb_mode(mode * m)
 {
     printf ("\n");
-    printf ("mode \"%dx%d %.2fHz 32bit (GTF)\"\n",
-            m->hr, m->vr, m->v_freq);
+    printf("mode \"%dx%d %.2fHz 32bit (GTF)\"\n", m->hr, m->vr, m->v_freq);
     printf ("    # PCLK: %.2f MHz, H: %.2f kHz, V: %.2f Hz\n",
             m->pclk, m->h_freq, m->v_freq);
-    printf ("    geometry %d %d %d %d 32\n",
-            m->hr, m->vr, m->hr, m->vr);
-    printf ("    timings %d %d %d %d %d %d %d\n",
-            (int) rint(1000000.0/m->pclk),/* pixclock in picoseconds */
+    printf("    geometry %d %d %d %d 32\n", m->hr, m->vr, m->hr, m->vr);
+    printf("    timings %d %d %d %d %d %d %d\n", (int) rint(1000000.0 / m->pclk),       /* pixclock in picoseconds */
             m->hfl - m->hse,              /* left margin (in pixels) */
             m->hss - m->hr,               /* right margin (in pixels) */
             m->vfl - m->vse,              /* upper margin (in pixel lines) */
@@ -266,9 +251,6 @@ void print_fb_mode (mode *m)
     
 }
 
-
-
-
 /*
  * vert_refresh() - as defined by the GTF Timing Standard, compute the
  * Stage 1 Parameters using the vertical refresh frequency.  In other
@@ -282,8 +264,8 @@ void print_fb_mode (mode *m)
  * XServer of fbset mode descriptions, from what I can tell).
  */
 
-mode *vert_refresh (int h_pixels, int v_lines, float freq,
-                    int interlaced, int margins)
+mode *
+vert_refresh(int h_pixels, int v_lines, float freq, int interlaced, int margins)
 {
     float h_pixels_rnd;
     float v_lines_rnd;
@@ -314,7 +296,6 @@ mode *vert_refresh (int h_pixels, int v_lines, float freq,
 
     mode *m = (mode*) malloc (sizeof (mode));
     
-    
     /*  1. In order to give correct results, the number of horizontal
      *  pixels requested is first processed to ensure that it is divisible
      *  by the character size, by rounding it to the nearest character
@@ -327,7 +308,6 @@ mode *vert_refresh (int h_pixels, int v_lines, float freq,
     
     print_value(1, "[H PIXELS RND]", h_pixels_rnd);
 
-    
     /*  2. If interlace is requested, the number of vertical lines assumed
      *  by the calculation must be halved, as the computation calculates
      *  the number of vertical lines per field. In either case, the
@@ -338,12 +318,10 @@ mode *vert_refresh (int h_pixels, int v_lines, float freq,
      */
 
     v_lines_rnd = interlaced ?
-            rint((float) v_lines) / 2.0 :
-            rint((float) v_lines);
+        rint((float) v_lines) / 2.0 : rint((float) v_lines);
     
     print_value(2, "[V LINES RND]", v_lines_rnd);
     
-    
     /*  3. Find the frame rate required:
      *
      *  [V FIELD RATE RQD] = IF([INT RQD?]="y", [I/P FREQ RQD]*2,
@@ -354,7 +332,6 @@ mode *vert_refresh (int h_pixels, int v_lines, float freq,
 
     print_value(3, "[V FIELD RATE RQD]", v_field_rate_rqd);
     
-
     /*  4. Find number of lines in Top margin:
      *
      *  [TOP MARGIN (LINES)] = IF([MARGINS RQD?]="Y",
@@ -366,7 +343,6 @@ mode *vert_refresh (int h_pixels, int v_lines, float freq,
 
     print_value(4, "[TOP MARGIN (LINES)]", top_margin);
     
-
     /*  5. Find number of lines in Bottom margin:
      *
      *  [BOT MARGIN (LINES)] = IF([MARGINS RQD?]="Y",
@@ -374,11 +350,11 @@ mode *vert_refresh (int h_pixels, int v_lines, float freq,
      *          0)
      */
 
-    bottom_margin = margins ? rint(MARGIN_PERCENT/100.0 * v_lines_rnd) : (0.0);
+    bottom_margin =
+        margins ? rint(MARGIN_PERCENT / 100.0 * v_lines_rnd) : (0.0);
 
     print_value(5, "[BOT MARGIN (LINES)]", bottom_margin);
 
-    
     /*  6. If interlace is required, then set variable [INTERLACE]=0.5:
      *   
      *  [INTERLACE]=(IF([INT RQD?]="y",0.5,0))
@@ -388,7 +364,6 @@ mode *vert_refresh (int h_pixels, int v_lines, float freq,
 
     print_value(6, "[INTERLACE]", interlace);
     
-
     /*  7. Estimate the Horizontal period
      *
      *  [H PERIOD EST] = ((1/[V FIELD RATE RQD]) - [MIN VSYNC+BP]/1000000) /
@@ -402,7 +377,6 @@ mode *vert_refresh (int h_pixels, int v_lines, float freq,
 
     print_value(7, "[H PERIOD EST]", h_period_est);
     
-
     /*  8. Find the number of lines in V sync + back porch:
      *
      *  [V SYNC+BP] = ROUND(([MIN VSYNC+BP]/[H PERIOD EST]),0)
@@ -412,7 +386,6 @@ mode *vert_refresh (int h_pixels, int v_lines, float freq,
 
     print_value(8, "[V SYNC+BP]", vsync_plus_bp);
     
-    
     /*  9. Find the number of lines in V back porch alone:
      *
      *  [V BACK PORCH] = [V SYNC+BP] - [V SYNC RND]
@@ -424,7 +397,6 @@ mode *vert_refresh (int h_pixels, int v_lines, float freq,
     
     print_value(9, "[V BACK PORCH]", v_back_porch);
     
-
     /*  10. Find the total number of lines in Vertical field period:
      *
      *  [TOTAL V LINES] = [V LINES RND] + [TOP MARGIN (LINES)] +
@@ -437,7 +409,6 @@ mode *vert_refresh (int h_pixels, int v_lines, float freq,
     
     print_value(10, "[TOTAL V LINES]", total_v_lines);
     
-
     /*  11. Estimate the Vertical field frequency:
      *
      *  [V FIELD RATE EST] = 1 / [H PERIOD EST] / [TOTAL V LINES] * 1000000
@@ -447,7 +418,6 @@ mode *vert_refresh (int h_pixels, int v_lines, float freq,
     
     print_value(11, "[V FIELD RATE EST]", v_field_rate_est);
     
-
     /*  12. Find the actual horizontal period:
      *
      *  [H PERIOD] = [H PERIOD EST] / ([V FIELD RATE RQD] / [V FIELD RATE EST])
@@ -457,7 +427,6 @@ mode *vert_refresh (int h_pixels, int v_lines, float freq,
     
     print_value(12, "[H PERIOD]", h_period);
     
-
     /*  13. Find the actual Vertical field frequency:
      *
      *  [V FIELD RATE] = 1 / [H PERIOD] / [TOTAL V LINES] * 1000000
@@ -467,7 +436,6 @@ mode *vert_refresh (int h_pixels, int v_lines, float freq,
 
     print_value(13, "[V FIELD RATE]", v_field_rate);
     
-
     /*  14. Find the Vertical frame frequency:
      *
      *  [V FRAME RATE] = (IF([INT RQD?]="y", [V FIELD RATE]/2, [V FIELD RATE]))
@@ -477,7 +445,6 @@ mode *vert_refresh (int h_pixels, int v_lines, float freq,
 
     print_value(14, "[V FRAME RATE]", v_frame_rate);
     
-
     /*  15. Find number of pixels in left margin:
      *
      *  [LEFT MARGIN (PIXELS)] = (IF( [MARGINS RQD?]="Y",
@@ -492,7 +459,6 @@ mode *vert_refresh (int h_pixels, int v_lines, float freq,
     
     print_value(15, "[LEFT MARGIN (PIXELS)]", left_margin);
     
-
     /*  16. Find number of pixels in right margin:
      *
      *  [RIGHT MARGIN (PIXELS)] = (IF( [MARGINS RQD?]="Y",
@@ -507,7 +473,6 @@ mode *vert_refresh (int h_pixels, int v_lines, float freq,
     
     print_value(16, "[RIGHT MARGIN (PIXELS)]", right_margin);
     
-
     /*  17. Find total number of active pixels in image and left and right
      *  margins:
      *
@@ -519,7 +484,6 @@ mode *vert_refresh (int h_pixels, int v_lines, float freq,
     
     print_value(17, "[TOTAL ACTIVE PIXELS]", total_active_pixels);
     
-    
     /*  18. Find the ideal blanking duty cycle from the blanking duty cycle
      *  equation:
      *
@@ -530,7 +494,6 @@ mode *vert_refresh (int h_pixels, int v_lines, float freq,
     
     print_value(18, "[IDEAL DUTY CYCLE]", ideal_duty_cycle);
     
-
     /*  19. Find the number of pixels in the blanking time to the nearest
      *  double character cell:
      *
@@ -548,7 +511,6 @@ mode *vert_refresh (int h_pixels, int v_lines, float freq,
     
     print_value(19, "[H BLANK (PIXELS)]", h_blank);
     
-
     /*  20. Find total number of pixels:
      *
      *  [TOTAL PIXELS] = [TOTAL ACTIVE PIXELS] + [H BLANK (PIXELS)]
@@ -558,7 +520,6 @@ mode *vert_refresh (int h_pixels, int v_lines, float freq,
     
     print_value(20, "[TOTAL PIXELS]", total_pixels);
     
-
     /*  21. Find pixel clock frequency:
      *
      *  [PIXEL FREQ] = [TOTAL PIXELS] / [H PERIOD]
@@ -568,7 +529,6 @@ mode *vert_refresh (int h_pixels, int v_lines, float freq,
     
     print_value(21, "[PIXEL FREQ]", pixel_freq);
     
-
     /*  22. Find horizontal frequency:
      *
      *  [H FREQ] = 1000 / [H PERIOD]
@@ -578,26 +538,22 @@ mode *vert_refresh (int h_pixels, int v_lines, float freq,
     
     print_value(22, "[H FREQ]", h_freq);
     
-
-
     /* Stage 1 computations are now complete; I should really pass
        the results to another function and do the Stage 2
        computations, but I only need a few more values so I'll just
        append the computations here for now */
 
-    
-
     /*  17. Find the number of pixels in the horizontal sync period:
      *
      *  [H SYNC (PIXELS)] =(ROUND(([H SYNC%] / 100 * [TOTAL PIXELS] /
      *                             [CELL GRAN RND]),0))*[CELL GRAN RND]
      */
 
-    h_sync = rint(H_SYNC_PERCENT/100.0 * total_pixels / CELL_GRAN) * CELL_GRAN;
+    h_sync =
+        rint(H_SYNC_PERCENT / 100.0 * total_pixels / CELL_GRAN) * CELL_GRAN;
 
     print_value(17, "[H SYNC (PIXELS)]", h_sync);
     
-
     /*  18. Find the number of pixels in the horizontal front porch period:
      *
      *  [H FRONT PORCH (PIXELS)] = ([H BLANK (PIXELS)]/2)-[H SYNC (PIXELS)]
@@ -607,7 +563,6 @@ mode *vert_refresh (int h_pixels, int v_lines, float freq,
 
     print_value(18, "[H FRONT PORCH (PIXELS)]", h_front_porch);
     
-    
     /*  36. Find the number of lines in the odd front porch period:
      *
      *  [V ODD FRONT PORCH(LINES)]=([MIN PORCH RND]+[INTERLACE])
@@ -617,7 +572,6 @@ mode *vert_refresh (int h_pixels, int v_lines, float freq,
     
     print_value(36, "[V ODD FRONT PORCH(LINES)]", v_odd_front_porch_lines);
     
-
     /* finally, pack the results in the mode struct */
     
     m->hr  = (int) (h_pixels_rnd);
@@ -638,22 +592,21 @@ mode *vert_refresh (int h_pixels, int v_lines, float freq,
     
 }
 
-
-
-
 /*
  * parse_command_line() - parse the command line and return an
  * alloced structure containing the results.  On error print usage
  * and return NULL.
  */ 
 
-options *parse_command_line (int argc, char *argv[])
+options *
+parse_command_line(int argc, char *argv[])
 {
     int n;
 
     options *o = (options *) calloc (1, sizeof (options));
 
-    if (argc < 4) goto bad_option;
+    if (argc < 4)
+        goto bad_option;
 
     o->x = atoi (argv[1]);
     o->y = atoi (argv[2]);
@@ -664,17 +617,19 @@ options *parse_command_line (int argc, char *argv[])
     n = 4;
 
     while (n < argc) {
-        if ((strcmp (argv[n], "-v") == 0) ||
-            (strcmp (argv[n], "--verbose") == 0)) {
+        if ((strcmp(argv[n], "-v") == 0) || (strcmp(argv[n], "--verbose") == 0)) {
             global_verbose = 1;
-        } else if ((strcmp (argv[n], "-f") == 0) ||
+        }
+        else if ((strcmp(argv[n], "-f") == 0) ||
                    (strcmp (argv[n], "--fbmode") == 0)) {
             o->fbmode = 1;
-        } else if ((strcmp (argv[n], "-x") == 0) ||
+        }
+        else if ((strcmp(argv[n], "-x") == 0) ||
 		   (strcmp (argv[n], "--xorgmode") == 0) ||
                    (strcmp (argv[n], "--xf86mode") == 0)) {
             o->xorgmode = 1;
-        } else {
+        }
+        else {
             goto bad_option;
         }
         
@@ -684,7 +639,8 @@ options *parse_command_line (int argc, char *argv[])
     /* if neither xorgmode nor fbmode were requested, default to
        xorgmode */
 
-    if (!o->fbmode && !o->xorgmode) o->xorgmode = 1;
+    if (!o->fbmode && !o->xorgmode)
+        o->xorgmode = 1;
     
     return o;
     
@@ -700,8 +656,7 @@ options *parse_command_line (int argc, char *argv[])
              "resolution (required)\n");
     fprintf (stderr, "            y : the desired vertical "
              "resolution (required)\n");
-    fprintf (stderr, "      refresh : the desired refresh "
-             "rate (required)\n");
+    fprintf(stderr, "      refresh : the desired refresh " "rate (required)\n");
     fprintf (stderr, " -v|--verbose : enable verbose printouts "
              "(traces each step of the computation)\n");
     fprintf (stderr, "  -f|--fbmode : output an fbset(8)-style mode "
@@ -717,18 +672,19 @@ options *parse_command_line (int argc, char *argv[])
 
 }
 
-
-
-int main (int argc, char *argv[])
+int
+main(int argc, char *argv[])
 {
     mode *m;
     options *o;
 
     o = parse_command_line (argc, argv);
-    if (!o) exit (1);
+    if (!o)
+        exit(1);
     
     m = vert_refresh (o->x, o->y, o->v_freq, 0, 0);
-    if (!m) exit (1);
+    if (!m)
+        exit(1);
 
     if (o->xorgmode)
         print_xf86_mode(m);
