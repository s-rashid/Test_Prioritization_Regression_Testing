diff --git a/hw/xquartz/applewm.c b/hw/xquartz/applewm.c
index 55976c4..70fb60a 100644
--- a/hw/xquartz/applewm.c
+++ b/hw/xquartz/applewm.c
@@ -70,7 +70,6 @@ static AppleWMProcsPtr appleWMProcs;
 
 static int WMErrorBase;
 
-
 static unsigned char WMReqCode = 0;
 static int WMEventBase = 0;
 
@@ -80,9 +79,12 @@ static XID eventResource;
 /* Currently selected events */
 static unsigned int eventMask = 0;
 
-static int WMFreeClient (pointer data, XID id);
-static int WMFreeEvents (pointer data, XID id);
-static void SNotifyEvent(xAppleWMNotifyEvent *from, xAppleWMNotifyEvent *to);
+static int
+WMFreeClient(pointer data, XID id);
+static int
+WMFreeEvents(pointer data, XID id);
+static void
+SNotifyEvent(xAppleWMNotifyEvent * from, xAppleWMNotifyEvent * to);
 
 typedef struct _WMEvent *WMEventPtr;
 typedef struct _WMEvent {
@@ -96,6 +98,7 @@ static inline BoxRec
 make_box (int x, int y, int w, int h)
 {
     BoxRec r;
+
     r.x1 = x;
     r.y1 = y;
     r.x2 = x + w;
@@ -105,9 +108,7 @@ make_box (int x, int y, int w, int h)
 
 /* Updates the _NATIVE_SCREEN_ORIGIN property on the given root window. */
 void
-AppleWMSetScreenOrigin(
-    WindowPtr pWin
-)
+AppleWMSetScreenOrigin(WindowPtr pWin)
 {
     int32_t data[2];
 
@@ -123,9 +124,7 @@ AppleWMSetScreenOrigin(
    be mapped but remain ordered-out until the animation
    completes (when the Dock will order them in). */
 Bool
-AppleWMDoReorderWindow(
-    WindowPtr pWin
-)
+AppleWMDoReorderWindow(WindowPtr pWin)
 {
     Atom atom;
     PropertyPtr prop;
@@ -140,11 +139,8 @@ AppleWMDoReorderWindow(
     return 1;
 }
 
-
 static int
-ProcAppleWMQueryVersion(
-    register ClientPtr client
-)
+ProcAppleWMQueryVersion(register ClientPtr client)
 {
     xAppleWMQueryVersionReply rep;
 
@@ -163,7 +159,6 @@ ProcAppleWMQueryVersion(
     return Success;
 }
 
-
 /* events */
 
 static inline void
@@ -176,15 +171,18 @@ updateEventMask (WMEventPtr *pHead)
         eventMask |= pCur->mask;
 }
 
-/*ARGSUSED*/
-static int
-WMFreeClient (pointer data, XID id) {
+ /*ARGSUSED*/ static int
+WMFreeClient(pointer data, XID id)
+{
     WMEventPtr   pEvent;
     WMEventPtr   *pHead, pCur, pPrev;
     int i;
 
     pEvent = (WMEventPtr) data;
-    i = dixLookupResourceByType((pointer *)&pHead, eventResource, EventType, serverClient, DixReadAccess | DixWriteAccess | DixDestroyAccess);
+    i = dixLookupResourceByType((pointer *) &pHead, eventResource, EventType,
+                                serverClient,
+                                DixReadAccess | DixWriteAccess |
+                                DixDestroyAccess);
     if (i == Success && pHead) {
         pPrev = 0;
         for (pCur = *pHead; pCur && pCur != pEvent; pCur=pCur->next)
@@ -201,9 +199,9 @@ WMFreeClient (pointer data, XID id) {
     return 1;
 }
 
-/*ARGSUSED*/
-static int
-WMFreeEvents (pointer data, XID id) {
+ /*ARGSUSED*/ static int
+WMFreeEvents(pointer data, XID id)
+{
     WMEventPtr   *pHead, pCur, pNext;
 
     pHead = (WMEventPtr *) data;
@@ -226,14 +224,13 @@ ProcAppleWMSelectInput (register ClientPtr client)
     int             i;
 
     REQUEST_SIZE_MATCH (xAppleWMSelectInputReq);
-    i = dixLookupResourceByType((pointer *)&pHead, eventResource, EventType, client, DixWriteAccess);
+    i = dixLookupResourceByType((pointer *) &pHead, eventResource, EventType,
+                                client, DixWriteAccess);
     if (stuff->mask != 0) {
         if (i == Success && pHead) {
             /* check for existing entry. */
-            for (pEvent = *pHead; pEvent; pEvent = pEvent->next)
-            {
-                if (pEvent->client == client)
-                {
+            for (pEvent = *pHead; pEvent; pEvent = pEvent->next) {
+                if (pEvent->client == client) {
                     pEvent->mask = stuff->mask;
                     updateEventMask (pHead);
                     return Success;
@@ -262,12 +259,10 @@ ProcAppleWMSelectInput (register ClientPtr client)
          * the list may be arbitrarily rearranged which cannot be
          * done through the resource database.
          */
-        if (i != Success || !pHead)
-        {
+        if (i != Success || !pHead) {
             pHead = (WMEventPtr *) malloc(sizeof (WMEventPtr));
             if (!pHead ||
-                !AddResource (eventResource, EventType, (pointer)pHead))
-            {
+                !AddResource(eventResource, EventType, (pointer) pHead)) {
                 FreeResource (clientResource, RT_NONE);
                 return BadAlloc;
             }
@@ -276,7 +271,8 @@ ProcAppleWMSelectInput (register ClientPtr client)
         pNewEvent->next = *pHead;
         *pHead = pNewEvent;
         updateEventMask (pHead);
-    } else if (stuff->mask == 0) {
+    }
+    else if (stuff->mask == 0) {
         /* delete the interest */
         if (i == Success && pHead) {
             pNewEvent = 0;
@@ -295,7 +291,8 @@ ProcAppleWMSelectInput (register ClientPtr client)
                 updateEventMask (pHead);
             }
         }
-    } else {
+    }
+    else {
         client->errorValue = stuff->mask;
         return BadValue;
     }
@@ -307,12 +304,14 @@ ProcAppleWMSelectInput (register ClientPtr client)
  */
 
 void
-AppleWMSendEvent (int type, unsigned int mask, int which, int arg) {
+AppleWMSendEvent(int type, unsigned int mask, int which, int arg)
+{
     WMEventPtr      *pHead, pEvent;
     xAppleWMNotifyEvent se;
     int             i;
 
-    i = dixLookupResourceByType((pointer *)&pHead, eventResource, EventType, serverClient, DixReadAccess);
+    i = dixLookupResourceByType((pointer *) &pHead, eventResource, EventType,
+                                serverClient, DixReadAccess);
     if (i != Success || !pHead)
         return;
     for (pEvent = *pHead; pEvent; pEvent = pEvent->next) {
@@ -333,13 +332,10 @@ AppleWMSelectedEvents (void)
     return eventMask;
 }
 
-
 /* general utility functions */
 
 static int
-ProcAppleWMDisableUpdate(
-    register ClientPtr client
-)
+ProcAppleWMDisableUpdate(register ClientPtr client)
 {
     REQUEST_SIZE_MATCH(xAppleWMDisableUpdateReq);
 
@@ -349,9 +345,7 @@ ProcAppleWMDisableUpdate(
 }
 
 static int
-ProcAppleWMReenableUpdate(
-    register ClientPtr client
-)
+ProcAppleWMReenableUpdate(register ClientPtr client)
 {
     REQUEST_SIZE_MATCH(xAppleWMReenableUpdateReq);
 
@@ -360,17 +354,15 @@ ProcAppleWMReenableUpdate(
     return Success;
 }
 
-
 /* window functions */
 
 static int
-ProcAppleWMSetWindowMenu(
-    register ClientPtr client
-)
+ProcAppleWMSetWindowMenu(register ClientPtr client)
 {
     const char *bytes, **items;
     char *shortcuts;
     int max_len, nitems, i, j;
+
     REQUEST(xAppleWMSetWindowMenuReq);
 
     REQUEST_AT_LEAST_SIZE(xAppleWMSetWindowMenuReq);
@@ -382,13 +374,11 @@ ProcAppleWMSetWindowMenu(
     max_len = (stuff->length << 2) - sizeof(xAppleWMSetWindowMenuReq);
     bytes = (char *) &stuff[1];
 
-    for (i = j = 0; i < max_len && j < nitems;)
-    {
+    for (i = j = 0; i < max_len && j < nitems;) {
         shortcuts[j] = bytes[i++];
         items[j++] = bytes + i;
 
-        while (i < max_len)
-        {
+        while (i < max_len) {
             if (bytes[i++] == 0)
                 break;
         }
@@ -401,9 +391,7 @@ ProcAppleWMSetWindowMenu(
 }
 
 static int
-ProcAppleWMSetWindowMenuCheck(
-    register ClientPtr client
-)
+ProcAppleWMSetWindowMenuCheck(register ClientPtr client)
 {
     REQUEST(xAppleWMSetWindowMenuCheckReq);
 
@@ -413,9 +401,7 @@ ProcAppleWMSetWindowMenuCheck(
 }
 
 static int
-ProcAppleWMSetFrontProcess(
-    register ClientPtr client
-)
+ProcAppleWMSetFrontProcess(register ClientPtr client)
 {
     REQUEST_SIZE_MATCH(xAppleWMSetFrontProcessReq);
 
@@ -432,8 +418,7 @@ ProcAppleWMSetWindowLevel(register ClientPtr client)
 
     REQUEST_SIZE_MATCH(xAppleWMSetWindowLevelReq);
 
-    if (Success != dixLookupWindow(&pWin, stuff->window, client,
-				   DixReadAccess))
+    if (Success != dixLookupWindow(&pWin, stuff->window, client, DixReadAccess))
         return BadValue;
 
     if (stuff->level >= AppleWMNumWindowLevels) {
@@ -471,6 +456,7 @@ static int
 ProcAppleWMAttachTransient(register ClientPtr client)
 {
     WindowPtr pWinChild, pWinParent;
+
     REQUEST(xAppleWMAttachTransientReq);
     int err;
     
@@ -479,13 +465,16 @@ ProcAppleWMAttachTransient(register ClientPtr client)
     if(!appleWMProcs->AttachTransient)
         return BadRequest;
 
-    if (Success != dixLookupWindow(&pWinChild, stuff->child, client, DixReadAccess))
+    if (Success !=
+        dixLookupWindow(&pWinChild, stuff->child, client, DixReadAccess))
         return BadValue;
 
     if(stuff->parent) {
-        if(Success != dixLookupWindow(&pWinParent, stuff->parent, client, DixReadAccess))
+        if (Success !=
+            dixLookupWindow(&pWinParent, stuff->parent, client, DixReadAccess))
             return BadValue;
-    } else {
+    }
+    else {
         pWinParent = NULL;
     }
 
@@ -498,9 +487,7 @@ ProcAppleWMAttachTransient(register ClientPtr client)
 }
 
 static int
-ProcAppleWMSetCanQuit(
-    register ClientPtr client
-)
+ProcAppleWMSetCanQuit(register ClientPtr client)
 {
     REQUEST(xAppleWMSetCanQuitReq);
 
@@ -510,16 +497,14 @@ ProcAppleWMSetCanQuit(
     return Success;
 }
 
-
 /* frame functions */
 
 static int
-ProcAppleWMFrameGetRect(
-    register ClientPtr client
-)
+ProcAppleWMFrameGetRect(register ClientPtr client)
 {
     xAppleWMFrameGetRectReply rep;
     BoxRec ir, or, rr;
+
     REQUEST(xAppleWMFrameGetRectReq);
 
     REQUEST_SIZE_MATCH(xAppleWMFrameGetRectReq);
@@ -532,8 +517,7 @@ ProcAppleWMFrameGetRect(
 
     if (appleWMProcs->FrameGetRect(stuff->frame_rect,
                                    stuff->frame_class,
-                                   &or, &ir, &rr) != Success)
-    {
+                                   &or, &ir, &rr) != Success) {
         return BadValue;
     }
 
@@ -547,13 +531,12 @@ ProcAppleWMFrameGetRect(
 }
 
 static int
-ProcAppleWMFrameHitTest(
-    register ClientPtr client
-)
+ProcAppleWMFrameHitTest(register ClientPtr client)
 {
     xAppleWMFrameHitTestReply rep;
     BoxRec ir, or;
     int ret;
+
     REQUEST(xAppleWMFrameHitTestReq);
 
     REQUEST_SIZE_MATCH(xAppleWMFrameHitTestReq);
@@ -565,8 +548,7 @@ ProcAppleWMFrameHitTest(
     or = make_box (stuff->ox, stuff->oy, stuff->ow, stuff->oh);
 
     if (appleWMProcs->FrameHitTest(stuff->frame_class, stuff->px,
-                                   stuff->py, &or, &ir, &ret) != Success)
-    {
+                                   stuff->py, &or, &ir, &ret) != Success) {
         return BadValue;
     }
 
@@ -577,20 +559,18 @@ ProcAppleWMFrameHitTest(
 }
 
 static int
-ProcAppleWMFrameDraw(
-    register ClientPtr client
-)
+ProcAppleWMFrameDraw(register ClientPtr client)
 {
     BoxRec ir, or;
     unsigned int title_length, title_max;
     unsigned char *title_bytes;
+
     REQUEST(xAppleWMFrameDrawReq);
     WindowPtr pWin;
 
     REQUEST_AT_LEAST_SIZE(xAppleWMFrameDrawReq);
 
-    if (Success != dixLookupWindow(&pWin, stuff->window, client,
-				   DixReadAccess))
+    if (Success != dixLookupWindow(&pWin, stuff->window, client, DixReadAccess))
         return BadValue;
 
     ir = make_box (stuff->ix, stuff->iy, stuff->iw, stuff->ih);
@@ -614,18 +594,14 @@ ProcAppleWMFrameDraw(
     return Success;
 }
 
-
 /* dispatch */
 
 static int
-ProcAppleWMDispatch (
-    register ClientPtr  client
-)
+ProcAppleWMDispatch(register ClientPtr client)
 {
     REQUEST(xReq);
 
-    switch (stuff->data)
-    {
+    switch (stuff->data) {
     case X_AppleWMQueryVersion:
         return ProcAppleWMQueryVersion(client);
     }
@@ -633,8 +609,7 @@ ProcAppleWMDispatch (
     if (!LocalClient(client))
         return WMErrorBase + AppleWMClientNotLocal;
 
-    switch (stuff->data)
-    {
+    switch (stuff->data) {
     case X_AppleWMSelectInput:
         return ProcAppleWMSelectInput(client);
     case X_AppleWMDisableUpdate:
@@ -667,7 +642,8 @@ ProcAppleWMDispatch (
 }
 
 static void
-SNotifyEvent(xAppleWMNotifyEvent *from, xAppleWMNotifyEvent *to) {
+SNotifyEvent(xAppleWMNotifyEvent * from, xAppleWMNotifyEvent * to)
+{
     to->type = from->type;
     to->kind = from->kind;
     cpswaps (from->sequenceNumber, to->sequenceNumber);
@@ -676,9 +652,7 @@ SNotifyEvent(xAppleWMNotifyEvent *from, xAppleWMNotifyEvent *to) {
 }
 
 static int
-SProcAppleWMQueryVersion(
-    register ClientPtr  client
-)
+SProcAppleWMQueryVersion(register ClientPtr client)
 {
     REQUEST(xAppleWMQueryVersionReq);
     swaps(&stuff->length);
@@ -686,9 +660,7 @@ SProcAppleWMQueryVersion(
 }
 
 static int
-SProcAppleWMDispatch (
-    register ClientPtr  client
-)
+SProcAppleWMDispatch(register ClientPtr client)
 {
     REQUEST(xReq);
 
@@ -697,8 +669,7 @@ SProcAppleWMDispatch (
         return WMErrorBase + AppleWMClientNotLocal;
 
     /* only local clients are allowed WM access */
-    switch (stuff->data)
-    {
+    switch (stuff->data) {
     case X_AppleWMQueryVersion:
         return SProcAppleWMQueryVersion(client);
     default:
@@ -707,8 +678,7 @@ SProcAppleWMDispatch (
 }
 
 void
-AppleWMExtensionInit(
-    AppleWMProcsPtr procsPtr)
+AppleWMExtensionInit(AppleWMProcsPtr procsPtr)
 {
     ExtensionEntry* extEntry;
 
@@ -722,10 +692,9 @@ AppleWMExtensionInit(
                                  AppleWMNumberErrors,
                                  ProcAppleWMDispatch,
                                  SProcAppleWMDispatch,
-                                 NULL,
-                                 StandardMinorOpcode)))
-    {
+                                 NULL, StandardMinorOpcode))) {
         size_t i;
+
         WMReqCode = (unsigned char)extEntry->base;
         WMErrorBase = extEntry->errorBase;
         WMEventBase = extEntry->eventBase;
