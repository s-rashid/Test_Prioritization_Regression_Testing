diff --git a/dix/cursor.c b/dix/cursor.c
index 6da763b..7df854c 100644
--- a/dix/cursor.c
+++ b/dix/cursor.c
@@ -128,16 +128,11 @@ FreeCursor(pointer value, XID cid)
     for (nscr = 0; nscr < screenInfo.numScreens; nscr++)
     {
 	pscr = screenInfo.screens[nscr];
-#ifdef MPX
-        pDev = inputInfo.devices;
-        while(pDev)
+        for(pDev = inputInfo.devices; pDev; pDev = pDev->next)
         {
-#endif
+            if (MPHasCursor(pDev))
             (void)( *pscr->UnrealizeCursor)(pDev, pscr, pCurs);
-#ifdef MPX
-            pDev = pDev->next;
         }
-#endif
     }
     FreeCursorBits(pCurs->bits);
     xfree( pCurs);
@@ -231,16 +226,12 @@ AllocCursorARGB(unsigned char *psrcbits, unsigned char *pmaskbits, CARD32 *argb,
     for (nscr = 0; nscr < screenInfo.numScreens; nscr++)
     {
         pscr = screenInfo.screens[nscr];
-#ifdef MPX
-        pDev = inputInfo.devices;
-        while(pDev)
+        for (pDev = inputInfo.devices; pDev; pDev = pDev->next)
         {
             if (MPHasCursor(pDev))
             {
-#endif
                 if (!( *pscr->RealizeCursor)(pDev, pscr, pCurs))
                 {
-#ifdef MPX
                     /* Realize failed for device pDev on screen pscr.
                      * We have to assume that for all devices before, realize
                      * worked. We need to rollback all devices so far on the
@@ -254,11 +245,9 @@ AllocCursorARGB(unsigned char *psrcbits, unsigned char *pmaskbits, CARD32 *argb,
                             ( *pscr->UnrealizeCursor)(pDevIt, pscr, pCurs);
                         pDevIt = pDevIt->next;
                     }
-#endif
                     while (--nscr >= 0)
                     {
                         pscr = screenInfo.screens[nscr];
-#ifdef MPX
                         /* now unrealize all devices on previous screens */
                         pDevIt = inputInfo.devices;
                         while (pDevIt)
@@ -267,19 +256,14 @@ AllocCursorARGB(unsigned char *psrcbits, unsigned char *pmaskbits, CARD32 *argb,
                                 ( *pscr->UnrealizeCursor)(pDevIt, pscr, pCurs);
                             pDevIt = pDevIt->next;
                         }
-#else
                         ( *pscr->UnrealizeCursor)(pDev, pscr, pCurs);
-#endif
                     }
                     FreeCursorBits(bits);
                     xfree(pCurs);
                     return (CursorPtr)NULL;
                 }
-#ifdef MPX
             }
-            pDev = pDev->next;
         }
-#endif
     }
     return pCurs;
 }
@@ -462,16 +446,12 @@ AllocGlyphCursor(Font source, unsigned sourceChar, Font mask, unsigned maskChar,
     for (nscr = 0; nscr < screenInfo.numScreens; nscr++)
     {
         pscr = screenInfo.screens[nscr];
-#ifdef MPX
-        pDev = inputInfo.devices;
-        while(pDev)
+        for (pDev = inputInfo.devices; pDev; pDev = pDev->next)
         {
             if (MPHasCursor(pDev))
             {
-#endif
                 if (!( *pscr->RealizeCursor)(pDev, pscr, pCurs))
                 {
-#ifdef MPX
                     /* Realize failed for device pDev on screen pscr.
                      * We have to assume that for all devices before, realize
                      * worked. We need to rollback all devices so far on the
@@ -485,11 +465,9 @@ AllocGlyphCursor(Font source, unsigned sourceChar, Font mask, unsigned maskChar,
                             ( *pscr->UnrealizeCursor)(pDevIt, pscr, pCurs);
                         pDevIt = pDevIt->next;
                     }
-#endif
                     while (--nscr >= 0)
                     {
                         pscr = screenInfo.screens[nscr];
-#ifdef MPX
                         /* now unrealize all devices on previous screens */
                         pDevIt = inputInfo.devices;
                         while (pDevIt)
@@ -498,19 +476,14 @@ AllocGlyphCursor(Font source, unsigned sourceChar, Font mask, unsigned maskChar,
                                 ( *pscr->UnrealizeCursor)(pDevIt, pscr, pCurs);
                             pDevIt = pDevIt->next;
                         }
-#else
                         ( *pscr->UnrealizeCursor)(pDev, pscr, pCurs);
-#endif
                     }
                     FreeCursorBits(bits);
                     xfree(pCurs);
                     return BadAlloc;
                 }
-#ifdef MPX
             }
-            pDev = pDev->next;
         }
-#endif
     }
     *ppCurs = pCurs;
     return Success;
