diff --git a/hw/dmx/config/dmxconfig.c b/hw/dmx/config/dmxconfig.c
index a31e5f7..2cc9ab3 100644
--- a/hw/dmx/config/dmxconfig.c
+++ b/hw/dmx/config/dmxconfig.c
@@ -35,7 +35,6 @@
  * Provides interface for reading DMX configuration files and for
  * combining that information with command-line configuration parameters. */
     
-
 #ifdef HAVE_DMX_CONFIG_H
 #include <dmx-config.h>
 #endif
@@ -81,14 +80,18 @@ static int dmxDisplaysFromCommandLine;
 /** Make a note that \a display is the name of an X11 display that
  * should be initialized as a backend (output) display.  Called from
  * #ddxProcessArgument. */
-void dmxConfigStoreDisplay(const char *display)
+void
+dmxConfigStoreDisplay(const char *display)
 {
     DMXConfigListPtr entry = malloc(sizeof(*entry));
+
     entry->name = strdup(display);
     entry->next = NULL;
-    if (!dmxConfigCmd.displays) dmxConfigCmd.displays = entry;
+    if (!dmxConfigCmd.displays)
+        dmxConfigCmd.displays = entry;
     else {
         DMXConfigList *pt;
+
         for (pt = dmxConfigCmd.displays; pt->next; pt = pt->next);
         if (!pt)
             dmxLog(dmxFatal, "dmxConfigStoreDisplay: end of list non-NULL\n");
@@ -99,14 +102,18 @@ void dmxConfigStoreDisplay(const char *display)
 
 /** Make a note that \a input is the name of an X11 display that should
  * be used for input (either a backend or a console input device). */
-void dmxConfigStoreInput(const char *input)
+void
+dmxConfigStoreInput(const char *input)
 {
     DMXConfigListPtr entry = malloc(sizeof(*entry));
+
     entry->name = strdup(input);
     entry->next = NULL;
-    if (!dmxConfigCmd.inputs) dmxConfigCmd.inputs = entry;
+    if (!dmxConfigCmd.inputs)
+        dmxConfigCmd.inputs = entry;
     else {
         DMXConfigList *pt;
+
         for (pt = dmxConfigCmd.inputs; pt->next; pt = pt->next);
         if (!pt)
             dmxLog(dmxFatal, "dmxConfigStoreInput: end of list non-NULL\n");
@@ -116,14 +123,18 @@ void dmxConfigStoreInput(const char *input)
 
 /** Make a note that \a input is the name of an X11 display that should
  * be used for input from XInput extension devices. */
-void dmxConfigStoreXInput(const char *input)
+void
+dmxConfigStoreXInput(const char *input)
 {
     DMXConfigListPtr entry = malloc(sizeof(*entry));
+
     entry->name = strdup(input);
     entry->next = NULL;
-    if (!dmxConfigCmd.xinputs) dmxConfigCmd.xinputs = entry;
+    if (!dmxConfigCmd.xinputs)
+        dmxConfigCmd.xinputs = entry;
     else {
         DMXConfigList *pt;
+
         for (pt = dmxConfigCmd.xinputs; pt->next; pt = pt->next);
         if (!pt)
             dmxLog(dmxFatal, "dmxConfigStoreXInput: end of list non-NULL\n");
@@ -132,7 +143,8 @@ void dmxConfigStoreXInput(const char *input)
 }
 
 /** Make a note that \a file is the configuration file. */
-void dmxConfigStoreFile(const char *file)
+void
+dmxConfigStoreFile(const char *file)
 {
     if (dmxConfigCmd.filename)
         dmxLog(dmxFatal, "Only one -configfile allowed\n");
@@ -141,17 +153,21 @@ void dmxConfigStoreFile(const char *file)
 
 /** Make a note that \a config should be used as the configuration for
  * current instantiation of the DMX server. */
-void dmxConfigStoreConfig(const char *config)
+void
+dmxConfigStoreConfig(const char *config)
 {
-    if (dmxConfigCmd.config) dmxLog(dmxFatal, "Only one -config allowed\n");
+    if (dmxConfigCmd.config)
+        dmxLog(dmxFatal, "Only one -config allowed\n");
     dmxConfigCmd.config = strdup(config);
 }
 
-static int dmxConfigReadFile(const char *filename, int debug)
+static int
+dmxConfigReadFile(const char *filename, int debug)
 {
     FILE *str;
 
-    if (!(str = fopen(filename, "r"))) return -1;
+    if (!(str = fopen(filename, "r")))
+        return -1;
     dmxLog(dmxInfo, "Reading configuration file \"%s\"\n", filename);
     yyin    = str;
     yydebug = debug;
@@ -160,26 +176,31 @@ static int dmxConfigReadFile(const char *filename, int debug)
     return 0;
 }
 
-static const char *dmxConfigMatch(const char *target, DMXConfigEntryPtr entry)
+static const char *
+dmxConfigMatch(const char *target, DMXConfigEntryPtr entry)
 {
     DMXConfigVirtualPtr v     = entry->virtual;
     const char          *name = NULL;
 
-    if (v && v->name) name = v->name;
+    if (v && v->name)
+        name = v->name;
 
-    if (v && !dmxConfigCmd.config) return v->name ? v->name : "<noname>";
-    if (!name)                     return NULL;
-    if (!strcmp(name, target))     return name;
+    if (v && !dmxConfigCmd.config)
+        return v->name ? v->name : "<noname>";
+    if (!name)
+        return NULL;
+    if (!strcmp(name, target))
+        return name;
     return NULL;
 }
 
-static DMXScreenInfo *dmxConfigAddDisplay(const char *name,
+static DMXScreenInfo *
+dmxConfigAddDisplay(const char *name,
                                           int scrnWidth,   int scrnHeight,
                                           int scrnX,       int scrnY,
                                           int scrnXSign,   int scrnYSign,
                                           int rootWidth,   int rootHeight,
-                                          int rootX,       int rootY,
-                                          int rootXSign,   int rootYSign)
+                    int rootX, int rootY, int rootXSign, int rootYSign)
 {
     DMXScreenInfo *dmxScreen;
     
@@ -208,7 +229,8 @@ static DMXScreenInfo *dmxConfigAddDisplay(const char *name,
     return dmxScreen;
 }
 
-DMXInputInfo *dmxConfigAddInput(const char *name, int core)
+DMXInputInfo *
+dmxConfigAddInput(const char *name, int core)
 {
     DMXInputInfo *dmxInput;
 
@@ -229,7 +251,8 @@ DMXInputInfo *dmxConfigAddInput(const char *name, int core)
     return dmxInput;
 }
 
-static void dmxConfigCopyFromDisplay(DMXConfigDisplayPtr d)
+static void
+dmxConfigCopyFromDisplay(DMXConfigDisplayPtr d)
 {
     DMXScreenInfo *dmxScreen;
 
@@ -245,7 +268,8 @@ static void dmxConfigCopyFromDisplay(DMXConfigDisplayPtr d)
     dmxScreen->whereY = d->rootYOrigin;
 }
 
-static void dmxConfigCopyFromWall(DMXConfigWallPtr w)
+static void
+dmxConfigCopyFromWall(DMXConfigWallPtr w)
 {
     DMXConfigStringPtr pt;
     DMXScreenInfo      *dmxScreen;
@@ -254,7 +278,9 @@ static void dmxConfigCopyFromWall(DMXConfigWallPtr w)
 
     if (!w->xwall && !w->ywall) { /* Try to make it square */
         int count;
-        for (pt = w->nameList, count = 0; pt; pt = pt->next) ++count;
+
+        for (pt = w->nameList, count = 0; pt; pt = pt->next)
+            ++count;
         w->xwall = sqrt(count) + .5;
     }
 
@@ -265,21 +291,25 @@ static void dmxConfigCopyFromWall(DMXConfigWallPtr w)
             dmxScreen->where  = PosAbsolute;
             dmxScreen->whereX = 0;
             dmxScreen->whereY = 0;
-        } else if (w->xwall) {  /* Tile left to right, then top to bottom */
+        }
+        else if (w->xwall) {    /* Tile left to right, then top to bottom */
             if (!((dmxNumScreens-1) % w->xwall)) {
                 dmxScreen->where          = PosBelow;
                 dmxScreen->whereRefScreen = edge;
                 edge                      = dmxNumScreens-1;
-            } else {
+            }
+            else {
                 dmxScreen->where          = PosRightOf;
                 dmxScreen->whereRefScreen = last;
             }
-        } else {                /* Tile top to bottom, then left to right */
+        }
+        else {                  /* Tile top to bottom, then left to right */
             if (!((dmxNumScreens-1) % w->ywall)) {
                 dmxScreen->where          = PosRightOf;
                 dmxScreen->whereRefScreen = edge;
                 edge                      = dmxNumScreens-1;
-            } else {
+            }
+            else {
                 dmxScreen->where          = PosBelow;
                 dmxScreen->whereRefScreen = last;
             }
@@ -297,14 +327,17 @@ static void dmxConfigCopyFromWall(DMXConfigWallPtr w)
     }
 }
 
-static void dmxConfigCopyFromOption(DMXConfigOptionPtr o)
+static void
+dmxConfigCopyFromOption(DMXConfigOptionPtr o)
 {
     DMXConfigStringPtr pt;
     int                argc   = 0;
     char               **argv = NULL;
 
-    if (serverGeneration != 1) return; /* FIXME: only do once, for now */
-    if (!o || !o->string) return;
+    if (serverGeneration != 1)
+        return;                 /* FIXME: only do once, for now */
+    if (!o || !o->string)
+        return;
     for (pt = o->option; pt; pt = pt->next) {
         if (pt->string) {
             ++argc;
@@ -317,40 +350,56 @@ static void dmxConfigCopyFromOption(DMXConfigOptionPtr o)
     free(argv);
 }
 
-static void dmxConfigCopyFromParam(DMXConfigParamPtr p)
+static void
+dmxConfigCopyFromParam(DMXConfigParamPtr p)
 {
     const char **argv;
     int        argc;
     
     if ((argv = dmxConfigLookupParam(p, "xkbrules", &argc)) && argc == 2) {
         dmxConfigSetXkbRules(argv[1]);
-    } else if ((argv = dmxConfigLookupParam(p, "xkbmodel", &argc))
+    }
+    else if ((argv = dmxConfigLookupParam(p, "xkbmodel", &argc))
                && argc == 2) {
         dmxConfigSetXkbModel(argv[1]);
-    } else if ((argv = dmxConfigLookupParam(p, "xkblayout", &argc))
+    }
+    else if ((argv = dmxConfigLookupParam(p, "xkblayout", &argc))
                && argc == 2) {
         dmxConfigSetXkbLayout(argv[1]);
-    } else if ((argv = dmxConfigLookupParam(p, "xkbvariant", &argc))
+    }
+    else if ((argv = dmxConfigLookupParam(p, "xkbvariant", &argc))
                && argc == 2) {
         dmxConfigSetXkbVariant(argv[1]);
-    } else if ((argv = dmxConfigLookupParam(p, "xkboptions", &argc))
+    }
+    else if ((argv = dmxConfigLookupParam(p, "xkboptions", &argc))
                && argc == 2) {
         dmxConfigSetXkbOptions(argv[1]);
     }
 }
 
-static void dmxConfigCopyData(DMXConfigVirtualPtr v)
+static void
+dmxConfigCopyData(DMXConfigVirtualPtr v)
 {
     DMXConfigSubPtr sub;
     
-    if (v->dim) dmxSetWidthHeight(v->dim->x, v->dim->y);
-    else        dmxSetWidthHeight(0, 0);
+    if (v->dim)
+        dmxSetWidthHeight(v->dim->x, v->dim->y);
+    else
+        dmxSetWidthHeight(0, 0);
     for (sub = v->subentry; sub; sub = sub->next) {
         switch (sub->type) {
-        case dmxConfigDisplay: dmxConfigCopyFromDisplay(sub->display); break;
-        case dmxConfigWall:    dmxConfigCopyFromWall(sub->wall);       break;
-        case dmxConfigOption:  dmxConfigCopyFromOption(sub->option);   break;
-        case dmxConfigParam:   dmxConfigCopyFromParam(sub->param);     break;
+        case dmxConfigDisplay:
+            dmxConfigCopyFromDisplay(sub->display);
+            break;
+        case dmxConfigWall:
+            dmxConfigCopyFromWall(sub->wall);
+            break;
+        case dmxConfigOption:
+            dmxConfigCopyFromOption(sub->option);
+            break;
+        case dmxConfigParam:
+            dmxConfigCopyFromParam(sub->param);
+            break;
         default:
             dmxLog(dmxFatal,
                    "dmxConfigCopyData: not a display, wall, or value\n");
@@ -358,7 +407,8 @@ static void dmxConfigCopyData(DMXConfigVirtualPtr v)
     }
 }
 
-static void dmxConfigFromCommandLine(void)
+static void
+dmxConfigFromCommandLine(void)
 {
     DMXConfigListPtr pt;
     
@@ -367,16 +417,19 @@ static void dmxConfigFromCommandLine(void)
         DMXScreenInfo *dmxScreen = dmxConfigAddDisplay(pt->name,
                                                        0, 0, 0, 0, 0, 0,
                                                        0, 0, 0, 0, 0, 0);
+
         if (dmxNumScreens == 1) {
             dmxScreen->where  = PosAbsolute;
             dmxScreen->whereX = 0;
             dmxScreen->whereY = 0;
             dmxLog(dmxInfo, "Added %s at %d %d\n",
                    dmxScreen->name, dmxScreen->whereX, dmxScreen->whereY);
-        } else {
+        }
+        else {
             dmxScreen->where          = PosRightOf;
             dmxScreen->whereRefScreen = dmxNumScreens - 2;
-            if (dmxScreen->whereRefScreen < 0) dmxScreen->whereRefScreen = 0;
+            if (dmxScreen->whereRefScreen < 0)
+                dmxScreen->whereRefScreen = 0;
             dmxLog(dmxInfo, "Added %s %s %s\n",
                    dmxScreen->name,
                    dmxScreen->where == PosBelow ? "below" : "right of",
@@ -385,14 +438,16 @@ static void dmxConfigFromCommandLine(void)
     }
 }
 
-static void dmxConfigFromConfigFile(void)
+static void
+dmxConfigFromConfigFile(void)
 {
     DMXConfigEntryPtr pt;
     const char        *name;
 
     for (pt = dmxConfigEntry; pt; pt = pt->next) {
                                 /* FIXME -- if an input is specified, use it */
-        if (pt->type != dmxConfigVirtual) continue;
+        if (pt->type != dmxConfigVirtual)
+            continue;
         if ((name = dmxConfigMatch(dmxConfigCmd.config, pt))) {
             dmxLog(dmxInfo, "Using configuration \"%s\"\n", name);
             dmxConfigCopyData(pt->virtual);
@@ -403,18 +458,22 @@ static void dmxConfigFromConfigFile(void)
            dmxConfigCmd.config, dmxConfigCmd.filename);
 }
 
-static void dmxConfigConfigInputs(void)
+static void
+dmxConfigConfigInputs(void)
 {
     DMXConfigListPtr pt;
 
-    if (dmxNumInputs) return;
+    if (dmxNumInputs)
+        return;
     
     if (dmxConfigCmd.inputs) {   /* Use command line */
         for (pt = dmxConfigCmd.inputs; pt; pt = pt->next)
             dmxConfigAddInput(pt->name, TRUE);
-    } else if (dmxNumScreens) { /* Use first display */
+    }
+    else if (dmxNumScreens) {   /* Use first display */
         dmxConfigAddInput(dmxScreens[0].name, TRUE);
-    } else {                     /* Use dummy */
+    }
+    else {                      /* Use dummy */
         dmxConfigAddInput("dummy", TRUE);
     }
 
@@ -427,7 +486,8 @@ static void dmxConfigConfigInputs(void)
 /** Set up the appropriate global variables so that the DMX server will
  * be initialized using the configuration specified in the config file
  * and on the command line. */
-void dmxConfigConfigure(void)
+void
+dmxConfigConfigure(void)
 {
     if (dmxConfigEntry) {
         dmxConfigFreeEntry(dmxConfigEntry);
@@ -440,7 +500,8 @@ void dmxConfigConfigure(void)
                    dmxConfigCmd.filename);
         dmxConfigReadFile(dmxConfigCmd.filename, 0);
         dmxConfigFromConfigFile();
-    } else {
+    }
+    else {
         if (dmxConfigCmd.config)
             dmxLog(dmxWarning,
                    "Configuration name (%s) without configuration file\n",
@@ -454,11 +515,13 @@ void dmxConfigConfigure(void)
  * sets MAXSCREENS to that value.  This is difficult since the number
  * depends on the command line (which is easy to count) or on the config
  * file, which has to be parsed. */
-void dmxConfigSetMaxScreens(void)
+void
+dmxConfigSetMaxScreens(void)
 {
     static int processing = 0;
 
-    if (processing) return;     /* Prevent reentry via ProcessCommandLine */
+    if (processing)
+        return;                 /* Prevent reentry via ProcessCommandLine */
     processing = 1;
     if (dmxConfigCmd.filename) {
         if (!dmxNumScreens)
@@ -466,7 +529,8 @@ void dmxConfigSetMaxScreens(void)
 #ifndef MAXSCREENS
         SetMaxScreens(dmxNumScreens);
 #endif
-    } else
+    }
+    else
 #ifndef MAXSCREENS
         SetMaxScreens(dmxDisplaysFromCommandLine);
 #endif
