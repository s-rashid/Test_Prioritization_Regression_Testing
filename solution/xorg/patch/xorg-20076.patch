diff --git a/afb/afbpushpxl.c b/afb/afbpushpxl.c
index 0e42856..c717f0e 100644
--- a/afb/afbpushpxl.c
+++ b/afb/afbpushpxl.c
@@ -62,92 +62,6 @@ SOFTWARE.
 #include "maskbits.h"
 #include "afb.h"
 
-/*  afbSolidPP is courtesy of xhacks@csri.toronto.edu
-
-	For fillStyle==FillSolid, a monochrome PushPixels can be reduced to
-	a ROP in the following way:  (Note that the ROP is the same as the
-	result of ROP(src=0x3,dst=0x5))
-
-								src=0011 0000 0011
-								dst=0101 0101 0101
-								rop	  fg=0 fg=1
-		GXclear				0x0 0000 0100 0100 0
-		GXand					0x1 0001 0100 0101  s&d
-		GXandReverse		0x2 0010 0100 0110 s&~d
-		GXcopy				0x3 0011 0100 0111 s
-		GXandInverted		0x4 0100 0101 0100 ~s&d
-		GXnoop				0x5 0101 0101 0101 d
-		GXxor					0x6 0110 0101 0110 s^d
-		GXor					0x7 0111 0101 0111 s|d
-		GXnor					0x8 1000 0110 0100 ~s&~d
-		GXequiv				0x9 1001 0110 0101 ~s^d
-		GXinvert				0xa 1010 0110 0110 ~d
-		GXorReverse			0xb 1011 0110 0111 s|~d
-		GXcopyInverted		0xc 1100 0111 0100 ~s
-		GXorInverted		0xd 1101 0111 0101 ~s|d
-		GXnand				0xe 1110 0111 0110 ~s|~d
-		GXset					0xf 1111 0111 0111 1
-
-For src=0: newRop = 0x4|(rop>>2)
-For src=1: newRop = 0x4|(rop&3)
-*/
-
-/* afbSolidPP -- squeegees the forground color of pGC through pBitMap
- * into pDrawable.  pBitMap is a stencil (dx by dy of it is used, it may
- * be bigger) which is placed on the drawable at xOrg, yOrg.  Where a 1 bit
- * is set in the bitmap, the fill style is put onto the drawable using
- * the GC's logical function. The drawable is not changed where the bitmap
- * has a zero bit or outside the area covered by the stencil.
- */
-void
-afbSolidPP(pGC, pBitMap, pDrawable, dx, dy, xOrg, yOrg)
-	GCPtr		pGC;
-	PixmapPtr		pBitMap;
-	DrawablePtr pDrawable;
-	int				dx, dy, xOrg, yOrg;
-{
-	unsigned char alu;
-	RegionRec rgnDst;
-	DDXPointPtr pptSrc;
-	BoxRec srcBox;
-	register DDXPointPtr ppt;
-	register BoxPtr pbox;
-	int i;
-
-	if (!pGC->planemask & 1) return;
-
-	/* compute the reduced rop function */
-	alu = pGC->alu;
-	if (!(pGC->fgPixel&1)) alu >>= 2;
-	alu = (alu & 0x3) | 0x4;
-	if (alu == GXnoop) return;
-
-	srcBox.x1 = xOrg;
-	srcBox.y1 = yOrg;
-	srcBox.x2 = xOrg + dx;
-	srcBox.y2 = yOrg + dy;
-	REGION_INIT(pGC->pScreen, &rgnDst, &srcBox, 1);
-
-	/* clip the shape of the dst to the destination composite clip */
-	REGION_INTERSECT(pGC->pScreen, &rgnDst, &rgnDst, pGC->pCompositeClip);
-
-	if (!REGION_NIL(&rgnDst)) {
-		i = REGION_NUM_RECTS(&rgnDst);
-		pptSrc = (DDXPointPtr)ALLOCATE_LOCAL(i * sizeof(DDXPointRec));
-		if(pptSrc) {
-			for (pbox = REGION_RECTS(&rgnDst), ppt = pptSrc; --i >= 0;
-				  pbox++, ppt++) {
-				ppt->x = pbox->x1 - xOrg;
-				ppt->y = pbox->y1 - yOrg;
-			}
-			afbDoBitblt((DrawablePtr)pBitMap, pDrawable, alu, &rgnDst, pptSrc,
-							 pGC->planemask);
-			DEALLOCATE_LOCAL(pptSrc);
-		}
-	}
-	REGION_UNINIT(pGC->pScreen, &rgnDst);
-}
-
 #define NPT 128
 
 /* afbPushPixels -- squeegees the forground color of pGC through pBitMap
@@ -158,11 +72,7 @@ afbSolidPP(pGC, pBitMap, pDrawable, dx, dy, xOrg, yOrg)
  * has a zero bit or outside the area covered by the stencil.
  */
 void
-afbPushPixels(pGC, pBitMap, pDrawable, dx, dy, xOrg, yOrg)
-	GCPtr pGC;
-	PixmapPtr pBitMap;
-	DrawablePtr pDrawable;
-	int dx, dy, xOrg, yOrg;
+afbPushPixels(GCPtr pGC, PixmapPtr pBitMap, DrawablePtr pDrawable, int dx, int dy, int xOrg, int yOrg)
 {
 	int h, dxDivPPW, ibEnd;
 	PixelType *pwLineStart;
