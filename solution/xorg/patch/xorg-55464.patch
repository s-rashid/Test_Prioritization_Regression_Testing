diff --git a/hw/xfree86/ddc/interpret_edid.c b/hw/xfree86/ddc/interpret_edid.c
index 46958f7..882a6b2 100644
--- a/hw/xfree86/ddc/interpret_edid.c
+++ b/hw/xfree86/ddc/interpret_edid.c
@@ -39,7 +39,8 @@ static void get_vendor_section(Uchar*, struct vendor *);
 static void get_version_section(Uchar*, struct edid_version *);
 static void get_display_section(Uchar*, struct disp_features *,
 				struct edid_version *);
-static void get_established_timing_section(Uchar*, struct established_timings *);
+static void get_established_timing_section(Uchar *,
+                                           struct established_timings *);
 static void get_std_timing_section(Uchar*, struct std_timings *,
 				   struct edid_version *);
 static void fetch_detailed_block(Uchar *c, struct edid_version *ver,
@@ -65,8 +66,7 @@ static void
 find_max_detailed_clock(struct detailed_monitor_section *det, void *ret)
 {
     if (det->type == DT) {
-        *(int *)ret = max(*((int *)ret),
-                          det->section.d_timings.clock);
+        *(int *) ret = max(*((int *) ret), det->section.d_timings.clock);
     }
 }
 
@@ -86,6 +86,7 @@ handle_edid_quirks(xf86MonPtr m)
     xf86ForEachDetailedBlock(m, find_ranges_section, &ranges);
     if (ranges && ranges->max_clock) {
         int clock = 0;
+
         xf86ForEachDetailedBlock(m, find_max_detailed_clock, &clock);
         if (clock && (ranges->max_clock * 1e6 < clock)) {
             xf86Msg(X_WARNING, "EDID timing clock %.2f exceeds claimed max "
@@ -101,14 +102,15 @@ struct det_hv_parameter {
     float target_aspect;
 };
 
-static void handle_detailed_hvsize(struct detailed_monitor_section *det_mon,
-                                   void *data)
+static void
+handle_detailed_hvsize(struct detailed_monitor_section *det_mon, void *data)
 {
     struct det_hv_parameter *p = (struct det_hv_parameter *)data;
     float timing_aspect;
 
     if (det_mon->type == DT) {
         struct detailed_timings *timing;
+
         timing = &det_mon->section.d_timings;
 
         if (!timing->v_size)
@@ -122,7 +124,8 @@ static void handle_detailed_hvsize(struct detailed_monitor_section *det_mon,
     }
 }
 
-static void encode_aspect_ratio(xf86MonPtr m)
+static void
+encode_aspect_ratio(xf86MonPtr m)
 {
     /*
      * some monitors encode the aspect ratio instead of the physical size.
@@ -135,6 +138,7 @@ static void encode_aspect_ratio(xf86MonPtr m)
 	(m->features.hsize == 5 && m->features.vsize == 4)) {
 
         struct det_hv_parameter p;
+
         p.real_hsize = 0;
         p.real_vsize = 0;
         p.target_aspect = (float)m->features.hsize /m->features.vsize;
@@ -143,11 +147,13 @@ static void encode_aspect_ratio(xf86MonPtr m)
 
 	if (!p.real_hsize || !p.real_vsize) {
 	    m->features.hsize = m->features.vsize = 0;
-	} else if ((m->features.hsize * 10 == p.real_hsize) &&
+        }
+        else if ((m->features.hsize * 10 == p.real_hsize) &&
 		   (m->features.vsize * 10 == p.real_vsize)) {
 	    /* exact match is just unlikely, should do a better check though */
 	    m->features.hsize = m->features.vsize = 0;
-	} else {
+        }
+        else {
 	    /* convert mm to cm */
 	    m->features.hsize = (p.real_hsize + 5) / 10;
 	    m->features.vsize = (p.real_vsize + 5) / 10;
@@ -163,16 +169,18 @@ xf86InterpretEDID(int scrnIndex, Uchar *block)
 {
     xf86MonPtr m;
 
-    if (!block) return NULL;
-    if (! (m = xnfcalloc(sizeof(xf86Monitor),1))) return NULL;
+    if (!block)
+        return NULL;
+    if (!(m = xnfcalloc(sizeof(xf86Monitor), 1)))
+        return NULL;
     m->scrnIndex = scrnIndex;
     m->rawData = block;
 
     get_vendor_section(SECTION(VENDOR_SECTION,block),&m->vendor);
     get_version_section(SECTION(VERSION_SECTION,block),&m->ver);
-    if (!validate_version(scrnIndex, &m->ver)) goto error;
-    get_display_section(SECTION(DISPLAY_SECTION,block),&m->features,
-			&m->ver);
+    if (!validate_version(scrnIndex, &m->ver))
+        goto error;
+    get_display_section(SECTION(DISPLAY_SECTION, block), &m->features, &m->ver);
     get_established_timing_section(SECTION(ESTABLISHED_TIMING_SECTION,block),
 				   &m->timings1);
     get_std_timing_section(SECTION(STD_TIMING_SECTION,block),m->timings2,
@@ -190,7 +198,8 @@ xf86InterpretEDID(int scrnIndex, Uchar *block)
     return NULL;
 }
 
-static int get_cea_detail_timing(Uchar *blk, xf86MonPtr mon,
+static int
+get_cea_detail_timing(Uchar * blk, xf86MonPtr mon,
                                  struct detailed_monitor_section *det_mon)
 {
     int dt_num;
@@ -202,8 +211,7 @@ static int get_cea_detail_timing(Uchar *blk, xf86MonPtr mon,
         return dt_num;
 
     for (; dt_offset < (CEA_EXT_MAX_DATA_OFFSET - DET_TIMING_INFO_LEN) &&
-           dt_num < CEA_EXT_DET_TIMING_NUM;
-	   _NEXT_DT_MD_SECTION(dt_offset)) {
+         dt_num < CEA_EXT_DET_TIMING_NUM; _NEXT_DT_MD_SECTION(dt_offset)) {
 
         fetch_detailed_block(blk + dt_offset, &mon->ver, det_mon + dt_num);
         dt_num = dt_num + 1 ;
@@ -212,9 +220,9 @@ static int get_cea_detail_timing(Uchar *blk, xf86MonPtr mon,
     return dt_num;
 }
 
-static void handle_cea_detail_block(Uchar *ext, xf86MonPtr mon,
-                                    handle_detailed_fn fn,
-                                    void *data)
+static void
+handle_cea_detail_block(Uchar * ext, xf86MonPtr mon,
+                        handle_detailed_fn fn, void *data)
 {
     int i;
     struct detailed_monitor_section det_mon[CEA_EXT_DET_TIMING_NUM];
@@ -226,9 +234,8 @@ static void handle_cea_detail_block(Uchar *ext, xf86MonPtr mon,
         fn(det_mon + i, data);
 }
 
-void xf86ForEachDetailedBlock(xf86MonPtr mon,
-                              handle_detailed_fn fn,
-                              void *data)
+void
+xf86ForEachDetailedBlock(xf86MonPtr mon, handle_detailed_fn fn, void *data)
 {
     int i;
     Uchar *ext;
@@ -281,7 +288,8 @@ extract_cea_data_block(Uchar *ext, int data_type)
     return NULL;
 }
 
-static void handle_cea_video_block(Uchar *ext, handle_video_fn fn, void *data)
+static void
+handle_cea_video_block(Uchar * ext, handle_video_fn fn, void *data)
 {
     struct cea_video_block *video;
     struct cea_video_block *video_end;
@@ -300,9 +308,8 @@ static void handle_cea_video_block(Uchar *ext, handle_video_fn fn, void *data)
     }
 }
 
-void xf86ForEachVideoBlock(xf86MonPtr mon,
-	                   handle_video_fn fn,
-                           void *data)
+void
+xf86ForEachVideoBlock(xf86MonPtr mon, handle_video_fn fn, void *data)
 {
     int i;
     Uchar *ext;
@@ -361,17 +368,18 @@ get_version_section(Uchar *c, struct edid_version *r)
 }
 
 static void 
-get_display_section(Uchar *c, struct disp_features *r,
-		    struct edid_version *v)
+get_display_section(Uchar * c, struct disp_features *r, struct edid_version *v)
 {
     r->input_type = INPUT_TYPE;
     if (!DIGITAL(r->input_type)) {
 	r->input_voltage = INPUT_VOLTAGE;
 	r->input_setup = SETUP;
 	r->input_sync = SYNC;
-    } else if (v->revision == 2 || v->revision == 3) {
+    }
+    else if (v->revision == 2 || v->revision == 3) {
 	r->input_dfp = DFP;
-    } else if (v->revision >= 4) {
+    }
+    else if (v->revision >= 4) {
 	r->input_bpc = BPC;
 	r->input_interface = DIGITAL_INTERFACE;
     }
@@ -408,19 +416,36 @@ get_cvt_timing_section(Uchar *c, struct cvt_timings *r)
 	if (c[0] && c[1] && c[2]) {
 	    r[i].height = (c[0] + ((c[1] & 0xF0) << 8) + 1) * 2;
 	    switch (c[1] & 0xc0) {
-		case 0x00: r[i].width = r[i].height * 4 / 3; break;
-		case 0x40: r[i].width = r[i].height * 16 / 9; break;
-		case 0x80: r[i].width = r[i].height * 16 / 10; break;
-		case 0xc0: r[i].width = r[i].height * 15 / 9; break;
+            case 0x00:
+                r[i].width = r[i].height * 4 / 3;
+                break;
+            case 0x40:
+                r[i].width = r[i].height * 16 / 9;
+                break;
+            case 0x80:
+                r[i].width = r[i].height * 16 / 10;
+                break;
+            case 0xc0:
+                r[i].width = r[i].height * 15 / 9;
+                break;
 	    }
 	    switch (c[2] & 0x60) {
-		case 0x00: r[i].rate = 50; break;
-		case 0x20: r[i].rate = 60; break;
-		case 0x40: r[i].rate = 75; break;
-		case 0x60: r[i].rate = 85; break;
+            case 0x00:
+                r[i].rate = 50;
+                break;
+            case 0x20:
+                r[i].rate = 60;
+                break;
+            case 0x40:
+                r[i].rate = 75;
+                break;
+            case 0x60:
+                r[i].rate = 85;
+                break;
 	    }
 	    r[i].rates = c[2] & 0x1f;
-	} else {
+        }
+        else {
 	    return;
 	}
 	c += 3;
@@ -428,8 +453,7 @@ get_cvt_timing_section(Uchar *c, struct cvt_timings *r)
 }
 
 static void
-get_std_timing_section(Uchar *c, struct std_timings *r,
-		       struct edid_version *v)
+get_std_timing_section(Uchar * c, struct std_timings *r, struct edid_version *v)
 {
     int i;
 
@@ -439,7 +463,8 @@ get_std_timing_section(Uchar *c, struct std_timings *r,
 	    VSIZE1(r[i].vsize);
 	    r[i].refresh = REFRESH_R;
 	    r[i].id = STD_TIMING_ID;
-	} else {
+        }
+        else {
 	    r[i].hsize = r[i].vsize = r[i].refresh = r[i].id = 0;
 	}
 	NEXT_STD_TIMING;
@@ -499,7 +524,8 @@ fetch_detailed_block(Uchar *c, struct edid_version *ver,
 	if (c[3] <= 0x0F && memcmp(c, empty_block, sizeof(empty_block))) {
             det_mon->type = DS_VENDOR + c[3];
         }
-    } else {
+    }
+    else {
         det_mon->type = DT;
         get_detailed_timing_section(c, &det_mon->section.d_timings);
     }
@@ -521,18 +547,20 @@ static void
 copy_string(Uchar *c, Uchar *s)
 {
   int i;
+
   c = c + 5;
   for (i = 0; (i < 13 && *c != 0x0A); i++) 
     *(s++) = *(c++);
   *s = 0;
-  while (i-- && (*--s == 0x20)) *s = 0;
+    while (i-- && (*--s == 0x20))
+        *s = 0;
 }
 
 static void
-get_dst_timing_section(Uchar *c, struct std_timings *t,
-		       struct edid_version *v)
+get_dst_timing_section(Uchar * c, struct std_timings *t, struct edid_version *v)
 {
   int j;
+
     c = c + 5;
     for (j = 0; j < 5; j++) {
 	t[j].hsize = HSIZE1;
@@ -559,7 +587,8 @@ get_monitor_ranges(Uchar *c, struct monitor_ranges *r)
 	r->gtf_2nd_m = M_2ND_GTF;
 	r->gtf_2nd_k = K_2ND_GTF;
 	r->gtf_2nd_j = J_2ND_GTF;
-    } else {
+    }
+    else {
 	r->gtf_2nd_f = 0;
     }
     if (HAVE_CVT) {
@@ -571,7 +600,8 @@ get_monitor_ranges(Uchar *c, struct monitor_ranges *r)
 	r->supported_blanking = SUPPORTED_BLANKING;
 	r->supported_scaling = SUPPORTED_SCALING;
 	r->preferred_refresh = PREFERRED_REFRESH;
-    } else {
+    }
+    else {
 	r->max_clock_khz = 0;
     }
 }
@@ -618,8 +648,7 @@ static Bool
 validate_version(int scrnIndex, struct edid_version *r)
 {
     if (r->version != 1) {
-	xf86DrvMsg(scrnIndex, X_ERROR, "Unknown EDID version %d\n",
-		   r->version);
+        xf86DrvMsg(scrnIndex, X_ERROR, "Unknown EDID version %d\n", r->version);
 	return FALSE;
     }
 
