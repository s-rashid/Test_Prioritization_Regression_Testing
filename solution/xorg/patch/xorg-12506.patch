diff --git a/hw/xfree86/os-support/bus/ppcPci.c b/hw/xfree86/os-support/bus/ppcPci.c
index 2aa9835..1be10ab 100644
--- a/hw/xfree86/os-support/bus/ppcPci.c
+++ b/hw/xfree86/os-support/bus/ppcPci.c
@@ -1,4 +1,4 @@
-/* $XFree86: xc/programs/Xserver/hw/xfree86/os-support/bus/ppcPci.c,v 1.9 2002/08/27 22:07:07 tsi Exp $ */
+/* $XFree86: xc/programs/Xserver/hw/xfree86/os-support/bus/ppcPci.c,v 1.8 2002/07/24 19:06:52 tsi Exp $ */
 /*
  * ppcPci.c - PowerPC PCI access functions
  *
@@ -79,13 +79,14 @@ ppcPciInit()
 
 #else
 
-  extern void motoppcPciInit(void);
-
+  static void motoppcPciInit(void);
   motoppcPciInit();
 
 #endif
 }
 
+#if defined(PowerMAX_OS)
+
 /*
  * Motorola PowerPC platform support
  *
@@ -101,6 +102,11 @@ ppcPciInit()
  */
 static ADDRESS motoppcBusAddrToHostAddr(PCITAG, PciAddrType, ADDRESS);
 static ADDRESS motoppcHostAddrToBusAddr(PCITAG, PciAddrType, ADDRESS);
+static CARD32 pciCfgMech1Read(PCITAG tag, int offset);
+static void pciCfgMech1Write(PCITAG tag, int offset, CARD32 val);
+static void pciCfgMech1SetBits(PCITAG tag, int offset,
+			       CARD32 mask, CARD32 val);
+
 
 static pciBusFuncs_t motoppcFuncs0 = {
 /* pciReadLong      */	pciCfgMech1Read,
@@ -126,7 +132,7 @@ static pciBusInfo_t motoppcPci0 = {
 
 extern volatile unsigned char *ioBase;
 
-void
+static void
 motoppcPciInit()
 {
   pciNumBuses    = 1;
@@ -134,6 +140,9 @@ motoppcPciInit()
   pciFindFirstFP = pciGenFindFirst;
   pciFindNextFP  = pciGenFindNext;
 
+  if (!xf86EnableIO())
+      FatalError("motoppcPciInit: EnableIO failed\n");
+  
   if (ioBase == MAP_FAILED) {
 	  ppcPciIoMap(0);  /* Make inb/outb et al work for pci0 and its secondaries */
 
@@ -210,3 +219,89 @@ motoppcHostAddrToBusAddr(PCITAG tag, PciAddrType type, ADDRESS addr)
 
   /*NOTREACHED*/
 }
+
+#if defined (__powerpc__)
+static int buserr_detected;
+
+static
+void buserr(int sig)
+{
+	buserr_detected = 1;
+}
+#endif
+
+static CARD32
+pciCfgMech1Read(PCITAG tag, int offset)
+{
+  unsigned long rv = 0xffffffff;
+#ifdef DEBUGPCI
+  ErrorF("pciCfgMech1Read(tag=%08x,offset=%08x)\n", tag, offset);
+#endif
+
+#if defined(__powerpc__)
+  signal(SIGBUS, buserr);
+  buserr_detected = 0;
+#endif
+
+  outl(0xCF8, PCI_EN | tag | (offset & 0xfc));
+  rv = inl(0xCFC);
+
+#if defined(__powerpc__)
+  signal(SIGBUS, SIG_DFL);
+  if (buserr_detected)
+  {
+#ifdef DEBUGPCI
+    ErrorF("pciCfgMech1Read() BUS ERROR\n");
+#endif
+    return(0xffffffff);
+  }
+  else
+#endif
+    return(rv);
+}
+
+static void
+pciCfgMech1Write(PCITAG tag, int offset, CARD32 val)
+{
+#ifdef DEBUGPCI
+  ErrorF("pciCfgMech1Write(tag=%08x,offset=%08x,val=%08x)\n",
+        tag, offset,val);
+#endif
+
+#if defined(__powerpc__)
+  signal(SIGBUS, SIG_IGN);
+#endif
+
+  outl(0xCF8, PCI_EN | tag | (offset & 0xfc));
+#if defined(Lynx) && defined(__powerpc__)
+  outb(0x80, 0x00);	/* without this the next access fails
+                         * on my Powerstack system when we use
+                         * assembler inlines for outl */
+#endif
+  outl(0xCFC, val);
+
+#if defined(__powerpc__)
+  signal(SIGBUS, SIG_DFL);
+#endif
+}
+
+static void
+pciCfgMech1SetBits(PCITAG tag, int offset, CARD32 mask, CARD32 val)
+{
+    unsigned long rv = 0xffffffff;
+
+#if defined(__powerpc__)
+    signal(SIGBUS, buserr);
+#endif
+
+    outl(0xCF8, PCI_EN | tag | (offset & 0xfc));
+    rv = inl(0xCFC);
+    rv = (rv & ~mask) | val;
+    outl(0xCFC, rv);
+
+#if defined(__powerpc__)
+    signal(SIGBUS, SIG_DFL);
+#endif
+}
+
+#endif /* PowerMAX_OS */
