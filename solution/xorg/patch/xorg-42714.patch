diff --git a/hw/xfree86/modes/xf86Crtc.h b/hw/xfree86/modes/xf86Crtc.h
index 4b6f7d2..24195a3 100644
--- a/hw/xfree86/modes/xf86Crtc.h
+++ b/hw/xfree86/modes/xf86Crtc.h
@@ -638,7 +638,7 @@ typedef struct _xf86CrtcConfig {
 
 } xf86CrtcConfigRec, *xf86CrtcConfigPtr;
 
-extern int xf86CrtcConfigPrivateIndex;
+extern _X_EXPORT int xf86CrtcConfigPrivateIndex;
 
 #define XF86_CRTC_CONFIG_PTR(p)	((xf86CrtcConfigPtr) ((p)->privates[xf86CrtcConfigPrivateIndex].ptr))
 
@@ -646,11 +646,11 @@ extern int xf86CrtcConfigPrivateIndex;
  * Initialize xf86CrtcConfig structure
  */
 
-void
+extern _X_EXPORT void
 xf86CrtcConfigInit (ScrnInfoPtr				scrn,
 		    const xf86CrtcConfigFuncsRec	*funcs);
 
-void
+extern _X_EXPORT void
 xf86CrtcSetSizeRange (ScrnInfoPtr scrn,
 		      int minWidth, int minHeight,
 		      int maxWidth, int maxHeight);
@@ -658,11 +658,11 @@ xf86CrtcSetSizeRange (ScrnInfoPtr scrn,
 /*
  * Crtc functions
  */
-xf86CrtcPtr
+extern _X_EXPORT xf86CrtcPtr
 xf86CrtcCreate (ScrnInfoPtr		scrn,
 		const xf86CrtcFuncsRec	*funcs);
 
-void
+extern _X_EXPORT void
 xf86CrtcDestroy (xf86CrtcPtr		crtc);
 
 
@@ -670,61 +670,62 @@ xf86CrtcDestroy (xf86CrtcPtr		crtc);
  * Sets the given video mode on the given crtc
  */
 
-Bool
+extern _X_EXPORT Bool
 xf86CrtcSetModeTransform (xf86CrtcPtr crtc, DisplayModePtr mode, Rotation rotation,
 			  RRTransformPtr transform, int x, int y);
 
-Bool
+extern _X_EXPORT Bool
 xf86CrtcSetMode (xf86CrtcPtr crtc, DisplayModePtr mode, Rotation rotation,
 		 int x, int y);
 
 /*
  * Assign crtc rotation during mode set
  */
-Bool
+extern _X_EXPORT Bool
 xf86CrtcRotate (xf86CrtcPtr crtc);
 
 /*
  * free shadow memory allocated for all crtcs
  */
-void
+extern _X_EXPORT void
 xf86RotateFreeShadow(ScrnInfoPtr pScrn);
 
 /*
  * Clean up rotation during CloseScreen
  */
-void
+extern _X_EXPORT void
 xf86RotateCloseScreen (ScreenPtr pScreen);
 
 /**
  * Return whether any output is assigned to the crtc
  */
-Bool
+extern _X_EXPORT Bool
 xf86CrtcInUse (xf86CrtcPtr crtc);
 
 /*
  * Output functions
  */
-xf86OutputPtr
+extern _X_EXPORT xf86OutputPtr
 xf86OutputCreate (ScrnInfoPtr		    scrn,
 		  const xf86OutputFuncsRec  *funcs,
 		  const char		    *name);
 
-void
+extern _X_EXPORT void
 xf86OutputUseScreenMonitor (xf86OutputPtr output, Bool use_screen_monitor);
 
-Bool
+extern _X_EXPORT Bool
 xf86OutputRename (xf86OutputPtr output, const char *name);
 
-void
+extern _X_EXPORT void
 xf86OutputDestroy (xf86OutputPtr	output);
 
-void
+extern _X_EXPORT void
 xf86ProbeOutputModes (ScrnInfoPtr pScrn, int maxX, int maxY);
 
-void
+extern _X_EXPORT void
 xf86SetScrnInfoModes (ScrnInfoPtr pScrn);
 
+extern _X_EXPORT
 #ifdef RANDR_13_INTERFACE
 int
 #else
@@ -732,52 +733,52 @@ Bool
 #endif
 xf86CrtcScreenInit (ScreenPtr pScreen);
 
-Bool
+extern _X_EXPORT Bool
 xf86InitialConfiguration (ScrnInfoPtr pScrn, Bool canGrow);
 
-void
+extern _X_EXPORT void
 xf86DPMSSet(ScrnInfoPtr pScrn, int PowerManagementMode, int flags);
     
-Bool
+extern _X_EXPORT Bool
 xf86SaveScreen(ScreenPtr pScreen, int mode);
 
-void
+extern _X_EXPORT void
 xf86DisableUnusedFunctions(ScrnInfoPtr pScrn);
 
-DisplayModePtr
+extern _X_EXPORT DisplayModePtr
 xf86OutputFindClosestMode (xf86OutputPtr output, DisplayModePtr desired);
     
-Bool
+extern _X_EXPORT Bool
 xf86SetSingleMode (ScrnInfoPtr pScrn, DisplayModePtr desired, Rotation rotation);
 
 /**
  * Set the EDID information for the specified output
  */
-void
+extern _X_EXPORT void
 xf86OutputSetEDID (xf86OutputPtr output, xf86MonPtr edid_mon);
 
 /**
  * Return the list of modes supported by the EDID information
  * stored in 'output'
  */
-DisplayModePtr
+extern _X_EXPORT DisplayModePtr
 xf86OutputGetEDIDModes (xf86OutputPtr output);
 
-xf86MonPtr
+extern _X_EXPORT xf86MonPtr
 xf86OutputGetEDID (xf86OutputPtr output, I2CBusPtr pDDCBus);
 
 /**
  * Initialize dga for this screen
  */
 
-Bool
+extern _X_EXPORT Bool
 xf86DiDGAInit (ScreenPtr pScreen, unsigned long dga_address);
 
 /**
  * Re-initialize dga for this screen (as when the set of modes changes)
  */
 
-Bool
+extern _X_EXPORT Bool
 xf86DiDGAReInit (ScreenPtr pScreen);
 
 /*
@@ -785,13 +786,13 @@ xf86DiDGAReInit (ScreenPtr pScreen);
  * the information from the outputs
  */
 
-void
+extern _X_EXPORT void
 xf86CrtcSetScreenSubpixelOrder (ScreenPtr pScreen);
 
 /*
  * Get a standard string name for a connector type 
  */
-char *
+extern _X_EXPORT char *
 xf86ConnectorGetName(xf86ConnectorType connector);
 
 /*
@@ -799,7 +800,7 @@ xf86ConnectorGetName(xf86ConnectorType connector);
  * modes (used in EnterVT functions, or at server startup)
  */
 
-Bool
+extern _X_EXPORT Bool
 xf86SetDesiredModes (ScrnInfoPtr pScrn);
 
 /**
@@ -808,7 +809,7 @@ xf86SetDesiredModes (ScrnInfoPtr pScrn);
  *
  * Driver should call this from ScreenInit function
  */
-Bool
+extern _X_EXPORT Bool
 xf86_cursors_init (ScreenPtr screen, int max_width, int max_height, int flags);
 
 /**
@@ -818,25 +819,25 @@ xf86_cursors_init (ScreenPtr screen, int max_width, int max_height, int flags);
  * 
  * Driver should call this from crtc commit function.
  */
-void
+extern _X_EXPORT void
 xf86_reload_cursors (ScreenPtr screen);
 
 /**
  * Called from EnterVT to turn the cursors back on
  */
-void
+extern _X_EXPORT void
 xf86_show_cursors (ScrnInfoPtr scrn);
 
 /**
  * Called by the driver to turn cursors off
  */
-void
+extern _X_EXPORT void
 xf86_hide_cursors (ScrnInfoPtr scrn);
 
 /**
  * Clean up CRTC-based cursor code. Driver must call this at CloseScreen time.
  */
-void
+extern _X_EXPORT void
 xf86_cursors_fini (ScreenPtr screen);
 
 /*
@@ -845,7 +846,7 @@ xf86_cursors_fini (ScreenPtr screen);
  * wraps xf86XVClipVideoHelper()
  */
 
-Bool
+extern _X_EXPORT Bool
 xf86_crtc_clip_video_helper(ScrnInfoPtr pScrn,
 			    xf86CrtcPtr *crtc_ret,
 			    xf86CrtcPtr desired_crtc,
@@ -858,13 +859,13 @@ xf86_crtc_clip_video_helper(ScrnInfoPtr pScrn,
 			    INT32	width,
 			    INT32	height);
     
-xf86_crtc_notify_proc_ptr
+extern _X_EXPORT xf86_crtc_notify_proc_ptr
 xf86_wrap_crtc_notify (ScreenPtr pScreen, xf86_crtc_notify_proc_ptr new);
 
-void
+extern _X_EXPORT void
 xf86_unwrap_crtc_notify(ScreenPtr pScreen, xf86_crtc_notify_proc_ptr old);
 
-void
+extern _X_EXPORT void
 xf86_crtc_notify(ScreenPtr pScreen);
 
 #endif /* _XF86CRTC_H_ */
