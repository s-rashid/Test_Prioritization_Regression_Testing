diff --git a/miext/rootless/rootlessCommon.h b/miext/rootless/rootlessCommon.h
index 6faf1fe..fd9c941 100644
--- a/miext/rootless/rootlessCommon.h
+++ b/miext/rootless/rootlessCommon.h
@@ -44,7 +44,6 @@
 
 #include "picturestr.h"
 
-
 // Debug output, or not.
 #ifdef ROOTLESSDEBUG
 #define RL_DEBUG_MSG ErrorF
@@ -52,20 +51,22 @@
 #define RL_DEBUG_MSG(a, ...)
 #endif
 
-
 // Global variables
 extern DevPrivateKeyRec rootlessGCPrivateKeyRec;
+
 #define rootlessGCPrivateKey (&rootlessGCPrivateKeyRec)
 
 extern DevPrivateKeyRec rootlessScreenPrivateKeyRec;
+
 #define rootlessScreenPrivateKey (&rootlessScreenPrivateKeyRec)
 
 extern DevPrivateKeyRec rootlessWindowPrivateKeyRec;
+
 #define rootlessWindowPrivateKey (&rootlessWindowPrivateKeyRec)
 
 extern DevPrivateKeyRec rootlessWindowOldPixmapPrivateKeyRec;
-#define rootlessWindowOldPixmapPrivateKey (&rootlessWindowOldPixmapPrivateKeyRec)
 
+#define rootlessWindowOldPixmapPrivateKey (&rootlessWindowOldPixmapPrivateKeyRec)
 
 // RootlessGCRec: private per-gc data
 typedef struct {
@@ -73,7 +74,6 @@ typedef struct {
     GCOps *originalOps;
 } RootlessGCRec;
 
-
 // RootlessScreenRec: per-screen private data
 typedef struct _RootlessScreenRec {
     // Rootless implementation functions
@@ -135,7 +135,6 @@ typedef struct _RootlessScreenRec {
     SCREENREC(screen)->fn = screen->fn; \
     screen->fn = Rootless##fn
 
-
 // Accessors for screen and window privates
 
 #define SCREENREC(pScreen) ((RootlessScreenRec *) \
@@ -158,7 +157,6 @@ typedef struct _RootlessScreenRec {
         SCREENREC(pScreen)->frameProcs.proc params;     \
     }
 
-
 // BoxRec manipulators
 // Copied from shadowfb
 
@@ -185,7 +183,6 @@ typedef struct _RootlessScreenRec {
 #define BOX_NOT_EMPTY(box) \
     (((box.x2 - box.x1) > 0) && ((box.y2 - box.y1) > 0))
 
-
 // HUGE_ROOT and NORMAL_ROOT
 // We don't want to clip windows to the edge of the screen.
 // HUGE_ROOT temporarily makes the root window really big.
@@ -212,7 +209,6 @@ extern RegionRec rootlessHugeRoot;
         w->winSize = saveRoot;                  \
     } while (0)
 
-
 // Returns TRUE if this window is a top-level window (i.e. child of the root)
 // The root is not a top-level window.
 #define IsTopLevel(pWin) \
@@ -222,7 +218,6 @@ extern RegionRec rootlessHugeRoot;
 #define IsRoot(pWin) \
     ((pWin) == (pWin)->drawable.pScreen->root)
 
-
 /*
  * SetPixmapBaseToScreen
  *  Move the given pixmap's base address to where pixel (0, 0)
@@ -245,7 +240,6 @@ extern RegionRec rootlessHugeRoot;
     }                                                                       \
 }
 
-
 // Returns TRUE if this window is visible inside a frame
 // (e.g. it is visible and has a top-level or root parent)
 Bool IsFramedWindow(WindowPtr pWin);
