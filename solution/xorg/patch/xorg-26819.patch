diff --git a/dix/dixutils.c b/dix/dixutils.c
index fca55d9..f9980c5 100644
--- a/dix/dixutils.c
+++ b/dix/dixutils.c
@@ -194,115 +194,129 @@ CompareISOLatin1Lowered(unsigned char *s1, int s1len,
     return (int) c1 - (int) c2;
 }
 
-#ifdef XACE
-
-/* SecurityLookupWindow and SecurityLookupDrawable:
- * Look up the window/drawable taking into account the client doing
- * the lookup and the type of access desired.  Return the window/drawable
- * if it exists and the client is allowed access, else return NULL.
- * Most Proc* functions should be calling these instead of
- * LookupWindow and LookupDrawable, which do no access checks.
- * XACE note: need to see if client->lastDrawableID can still be used here.
+/*
+ * dixLookupWindow and dixLookupDrawable:
+ * Look up the window/drawable taking into account the client doing the
+ * lookup, the type of drawable desired, and the type of access desired.
+ * Return Success with *pDraw set if the window/drawable exists and the client
+ * is allowed access, else return an error code with *pDraw set to NULL.  The
+ * access mask values are defined in resource.h.  The type mask values are
+ * defined in pixmap.h, with zero equivalent to M_DRAWABLE.
  */
-
-_X_EXPORT WindowPtr
-SecurityLookupWindow(XID rid, ClientPtr client, Mask access_mode)
+_X_EXPORT int
+dixLookupDrawable(DrawablePtr *pDraw, XID id, ClientPtr client,
+		  Mask type, Mask access)
 {
-    client->errorValue = rid;
-    if(rid == INVALID)
-	return NULL;
-    return (WindowPtr)SecurityLookupIDByType(client, rid, RT_WINDOW, access_mode);
-}
+    DrawablePtr pTmp;
+    RESTYPE rtype;
+    *pDraw = NULL;
+    client->errorValue = id;
 
+    if (id == INVALID)
+	return BadDrawable;
 
-_X_EXPORT pointer
-SecurityLookupDrawable(XID rid, ClientPtr client, Mask access_mode)
-{
-    register DrawablePtr pDraw;
+    if (id == client->lastDrawableID) {
+	pTmp = client->lastDrawable;
 
-    if(rid == INVALID)
-	return (pointer) NULL;
-    pDraw = (DrawablePtr)SecurityLookupIDByClass(client, rid, RC_DRAWABLE,
-						 access_mode);
-    if (pDraw && (pDraw->type != UNDRAWABLE_WINDOW))
-        return (pointer)pDraw;		
-    return (pointer)NULL;
-}
+	/* an access check is required for cached drawables */
+	rtype = (pTmp->type | M_WINDOW) ? RT_WINDOW : RT_PIXMAP;
+	if (!XaceHook(XACE_RESOURCE_ACCESS, client, id, rtype, access, pTmp))
+	    return BadDrawable;
+    } else
+	pTmp = (DrawablePtr)SecurityLookupIDByClass(client, id, RC_DRAWABLE,
+						   access);
+    if (!pTmp)
+	return BadDrawable;
+    if (!((1 << pTmp->type) | (type ? type : M_DRAWABLE)))
+	return BadMatch;
 
-/* We can't replace the LookupWindow and LookupDrawable functions with
- * macros because of compatibility with loadable servers.
- */
+    if (pTmp->type | M_DRAWABLE) {
+	client->lastDrawable = pTmp;
+	client->lastDrawableID = id;
+	client->lastGCID = INVALID;
+	client->lastGC = (GCPtr)NULL;
+    }
+    *pDraw = pTmp;
+    return Success;
+}
 
-_X_EXPORT WindowPtr
-LookupWindow(XID rid, ClientPtr client)
+_X_EXPORT int
+dixLookupWindow(WindowPtr *pWin, XID id, ClientPtr client, Mask access)
 {
-    return SecurityLookupWindow(rid, client, DixUnknownAccess);
+    int rc;
+    rc = dixLookupDrawable((DrawablePtr*)pWin, id, client, M_WINDOW, access);
+    return (rc == BadDrawable) ? BadWindow : rc;
 }
 
-_X_EXPORT pointer
-LookupDrawable(XID rid, ClientPtr client)
+_X_EXPORT int
+dixLookupGC(GCPtr *pGC, XID id, ClientPtr client, Mask access)
 {
-    return SecurityLookupDrawable(rid, client, DixUnknownAccess);
+    GCPtr pTmp = (GCPtr)SecurityLookupIDByType(client, id, RT_GC, access);
+    if (pTmp) {
+	*pGC = pTmp;
+	return Success;
+    }
+    client->errorValue = id;
+    *pGC = NULL;
+    return BadGC;
 }
 
-#else /* not XACE */
-
-WindowPtr
-LookupWindow(XID rid, ClientPtr client)
+_X_EXPORT int
+dixLookupClient(ClientPtr *pClient, XID rid, ClientPtr client)
 {
-    WindowPtr	pWin;
+    pointer pRes = (pointer)SecurityLookupIDByClass(client, rid, RC_ANY,
+						    DixReadAccess);
+    int clientIndex = CLIENT_ID(rid);
 
-    client->errorValue = rid;
-    if(rid == INVALID)
-	return NULL;
-    if (client->lastDrawableID == rid)
-    {
-        if (client->lastDrawable->type == DRAWABLE_WINDOW)
-            return ((WindowPtr) client->lastDrawable);
-        return (WindowPtr) NULL;
-    }
-    pWin = (WindowPtr)LookupIDByType(rid, RT_WINDOW);
-    if (pWin && pWin->drawable.type == DRAWABLE_WINDOW) {
-	client->lastDrawable = (DrawablePtr) pWin;
-	client->lastDrawableID = rid;
-	client->lastGCID = INVALID;
-	client->lastGC = (GCPtr)NULL;
+    if (clientIndex && pRes && clients[clientIndex] && !(rid & SERVER_BIT)) {
+	*pClient = clients[clientIndex];
+	return Success;
     }
-    return pWin;
+    *pClient = NULL;
+    return BadValue;
 }
 
-
-pointer
-LookupDrawable(XID rid, ClientPtr client)
+/*
+ * These are deprecated compatibility functions and will be removed soon!
+ * Please use the new dixLookup*() functions above.
+ */
+_X_EXPORT WindowPtr
+SecurityLookupWindow(XID id, ClientPtr client, Mask access_mode)
 {
-    register DrawablePtr pDraw;
-
-    if(rid == INVALID)
-	return (pointer) NULL;
-    if (client->lastDrawableID == rid)
-	return ((pointer) client->lastDrawable);
-    pDraw = (DrawablePtr)LookupIDByClass(rid, RC_DRAWABLE);
-    if (pDraw && (pDraw->type != UNDRAWABLE_WINDOW))
-        return (pointer)pDraw;		
-    return (pointer)NULL;
+    WindowPtr pWin;
+    int i = dixLookupWindow(&pWin, id, client, access_mode);
+    return (i == Success) ? pWin : NULL;
 }
 
-#endif /* XACE */
+_X_EXPORT WindowPtr
+LookupWindow(XID id, ClientPtr client)
+{
+    return SecurityLookupWindow(id, client, DixUnknownAccess);
+}
 
-_X_EXPORT ClientPtr
-LookupClient(XID rid, ClientPtr client)
+_X_EXPORT pointer
+SecurityLookupDrawable(XID id, ClientPtr client, Mask access_mode)
 {
-    pointer pRes = (pointer)SecurityLookupIDByClass(client, rid, RC_ANY,
-						    DixReadAccess);
-    int clientIndex = CLIENT_ID(rid);
+    DrawablePtr pDraw;
+    int i = dixLookupDrawable(&pDraw, id, client, access_mode, TRUE);
+    return (i == Success) ? pDraw : NULL;
+}
 
-    if (clientIndex && pRes && clients[clientIndex] && !(rid & SERVER_BIT))
+_X_EXPORT pointer
+LookupDrawable(XID id, ClientPtr client)
     {
-	return clients[clientIndex];
+    return SecurityLookupDrawable(id, client, DixUnknownAccess);
     }
-    return (ClientPtr)NULL;
+
+_X_EXPORT ClientPtr
+LookupClient(XID id, ClientPtr client)
+{
+    ClientPtr pClient;
+    int i = dixLookupClient(&pClient, id, client);
+    return (i == Success) ? pClient : NULL;
 }
 
+/* end deprecated functions */
 
 int
 AlterSaveSetForClient(ClientPtr client, WindowPtr pWin, unsigned mode,
