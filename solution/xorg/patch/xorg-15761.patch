diff --git a/hw/xfree86/os-support/solaris/sun_io.c b/hw/xfree86/os-support/solaris/sun_io.c
index c4dc236..9634403 100644
--- a/hw/xfree86/os-support/solaris/sun_io.c
+++ b/hw/xfree86/os-support/solaris/sun_io.c
@@ -1,4 +1,5 @@
 /* $XFree86: xc/programs/Xserver/hw/xfree86/os-support/sunos/sun_io.c,v 1.2 2002/10/11 01:40:37 dawes Exp $ */
+/* $XdotOrg: $ */
 /*
  * Copyright 1990,91 by Thomas Roell, Dinkelscherben, Germany
  * Copyright 1993 by David Dawes <dawes@xfree86.org>
@@ -23,6 +24,35 @@
  * PERFORMANCE OF THIS SOFTWARE.
  *
  */
+/* Copyright 2005 Sun Microsystems, Inc.  All rights reserved.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, and/or sell copies of the Software, and to permit persons
+ * to whom the Software is furnished to do so, provided that the above
+ * copyright notice(s) and this permission notice appear in all copies of
+ * the Software and that both the above copyright notice(s) and this
+ * permission notice appear in supporting documentation.
+ * 
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+ * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
+ * OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
+ * INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
+ * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
+ * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
+ * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * 
+ * Except as contained in this notice, the name of a copyright holder
+ * shall not be used in advertising or otherwise to promote the sale, use
+ * or other dealings in this Software without prior written authorization
+ * of the copyright holder.
+ */
+
+/* Solaris support routines for builtin "keyboard" driver */
 
 #ifdef HAVE_XORG_CONFIG_H
 #include <xorg-config.h>
@@ -30,39 +60,101 @@
 
 #include "xf86Priv.h"
 #include "xf86_OSlib.h"
+#include "sun_kbd.h"
 
-void
-xf86SoundKbdBell(int loudness, int pitch, int duration)
+static sunKbdPrivRec sunKeyboardPriv;
+
+_X_HIDDEN void
+xf86KbdInit(void)
 {
-	int	kbdCmd;
+    const char *kbdName = "keyboard";
+    pointer *kbdOptions = NULL;
+    IDevPtr pDev;
 
-	if (loudness && pitch)
+    /* There should be a better way to find the keyboard device name, but
+       this seems to work for now. */
+    for (pDev = xf86ConfigLayout.inputs; pDev && pDev->identifier; pDev++) {
+	if (!xf86NameCmp(pDev->driver, "keyboard")) {
+	    kbdName = pDev->identifier;
+	    kbdOptions = pDev->commonOptions;
+	    break;
+	}
+    }
+
+    if (xf86Info.kbdFd < 0) {
+	xf86Info.kbdFd = sunKbdOpen(kbdName, kbdOptions);
+	if (xf86Info.kbdFd < 0) {
+	    FatalError("Unable to open keyboard: /dev/kbd\n");
+	}
+    }
+
+    memset(&sunKeyboardPriv, 0, sizeof(sunKbdPrivRec));    
+    if (sunKbdInit(&sunKeyboardPriv, xf86Info.kbdFd,
+		   kbdName, kbdOptions)	!= Success) {
+    	FatalError("Unable to initialize keyboard driver\n");
+    }
+}
+
+_X_HIDDEN int
+xf86KbdOn(void)
 	{
-		kbdCmd = KBD_CMD_BELL;
-		if (ioctl (xf86Info.kbdFd, KIOCCMD, &kbdCmd) == -1) {
-			ErrorF("Failed to activate bell\n");
-			return;
+    if (sunKbdOn(&sunKeyboardPriv) != Success) {
+	FatalError("Enabling keyboard");
+    }
+
+    return xf86Info.kbdFd;
 		}
 
-		usleep(xf86Info.bell_duration * loudness * 20);
+_X_HIDDEN int
+xf86KbdOff(void)
+{
+    if (sunKbdOff(&sunKeyboardPriv) != Success) {
+	FatalError("Disabling keyboard");
+    }
 
-		kbdCmd = KBD_CMD_NOBELL;
-		if (ioctl (xf86Info.kbdFd, KIOCCMD, &kbdCmd) == -1)
-			ErrorF ("Failed to deactivate bell\n");
+    return xf86Info.kbdFd;
 	}
+
+_X_EXPORT void
+xf86SoundKbdBell(int loudness, int pitch, int duration)
+{
+    sunKbdSoundBell(&sunKeyboardPriv, loudness, pitch, duration);
 }
 
-void
+_X_HIDDEN void
 xf86SetKbdLeds(int leds)
 {
-	if( ioctl(xf86Info.kbdFd, KIOCSLED, &leds) < 0 )
-		ErrorF("Failed to set Keyboard LED's\n");
+    sunKbdSetLeds(&sunKeyboardPriv, leds);
 }
 
-#include "xf86OSKbd.h"
+_X_HIDDEN int
+xf86GetKbdLeds(void)
+{
+    return sunKbdGetLeds(&sunKeyboardPriv);
+}
 
-Bool
-xf86OSKbdPreInit(InputInfoPtr pInfo)
+_X_HIDDEN void
+xf86SetKbdRepeat(char rad)
 {
-    return FALSE;
+    sunKbdSetRepeat(&sunKeyboardPriv, rad);
+}
+
+/*
+ * Lets try reading more than one keyboard event at a time in the hopes that
+ * this will be slightly more efficient.  Or we could just try the MicroSoft
+ * method, and forget about efficiency. :-)
+ */
+_X_HIDDEN void
+xf86KbdEvents(void)
+{
+    Firm_event event[64];
+    int        nBytes, i;
+
+    /* I certainly hope its not possible to read partial events */
+
+    if ((nBytes = read(xf86Info.kbdFd, (char *)event, sizeof(event))) > 0)
+    {
+	for (i = 0; i < (nBytes / sizeof(Firm_event)); i++)
+	    sunPostKbdEvent(sunKeyboardPriv.ktype, &event[i]);
+    }
 }
