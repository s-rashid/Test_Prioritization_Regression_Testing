diff --git a/glx/glxdriswrast.c b/glx/glxdriswrast.c
index d064a05..c69b4d2 100644
--- a/glx/glxdriswrast.c
+++ b/glx/glxdriswrast.c
@@ -150,8 +150,7 @@ __glXDRIcontextMakeCurrent(__GLXcontext *baseContext)
     __GLXDRIscreen *screen = (__GLXDRIscreen *) context->base.pGlxScreen;
 
     return (*screen->core->bindContext)(context->driContext,
-					draw->driDrawable,
-					read->driDrawable);
+                                         draw->driDrawable, read->driDrawable);
 }
 
 static int
@@ -179,8 +178,7 @@ __glXDRIcontextCopy(__GLXcontext *baseDst, __GLXcontext *baseSrc,
 
 static int
 __glXDRIbindTexImage(__GLXcontext *baseContext,
-		     int buffer,
-		     __GLXdrawable *glxPixmap)
+                     int buffer, __GLXdrawable * glxPixmap)
 {
     __GLXDRIdrawable *drawable = (__GLXDRIdrawable *) glxPixmap;
     const __DRItexBufferExtension *texBuffer = drawable->screen->texBuffer;
@@ -193,21 +191,19 @@ __glXDRIbindTexImage(__GLXcontext *baseContext,
     if (texBuffer->base.version >= 2 && texBuffer->setTexBuffer2 != NULL) {
 	(*texBuffer->setTexBuffer2)(context->driContext,
 				    glxPixmap->target,
-				    glxPixmap->format,
-				    drawable->driDrawable);
-    } else
+                                     glxPixmap->format, drawable->driDrawable);
+    }
+    else
 #endif
     texBuffer->setTexBuffer(context->driContext,
-			    glxPixmap->target,
-			    drawable->driDrawable);
+                                glxPixmap->target, drawable->driDrawable);
 
     return Success;
 }
 
 static int
 __glXDRIreleaseTexImage(__GLXcontext *baseContext,
-			int buffer,
-			__GLXdrawable *pixmap)
+                        int buffer, __GLXdrawable * pixmap)
 {
     /* FIXME: Just unbind the texture? */
     return Success;
@@ -217,16 +213,14 @@ __glXDRIreleaseTexImage(__GLXcontext *baseContext,
 
 static int
 __glXDRIbindTexImage(__GLXcontext *baseContext,
-		     int buffer,
-		     __GLXdrawable *glxPixmap)
+                     int buffer, __GLXdrawable * glxPixmap)
 {
     return Success;
 }
 
 static int
 __glXDRIreleaseTexImage(__GLXcontext *baseContext,
-			int buffer,
-			__GLXdrawable *pixmap)
+                        int buffer, __GLXdrawable * pixmap)
 {
     return Success;
 }
@@ -299,9 +293,7 @@ __glXDRIscreenCreateDrawable(ClientPtr client,
 			     __GLXscreen *screen,
 			     DrawablePtr pDraw,
 			     XID drawId,
-			     int type,
-			     XID glxDrawId,
-			     __GLXconfig *glxConfig)
+                             int type, XID glxDrawId, __GLXconfig * glxConfig)
 {
     XID gcvals[2];
     int status;
@@ -325,22 +317,23 @@ __glXDRIscreenCreateDrawable(ClientPtr client,
     private->base.copySubBuffer = __glXDRIdrawableCopySubBuffer;
 
     gcvals[0] = GXcopy;
-    private->gc = CreateGC(pDraw, GCFunction, gcvals, &status, (XID)0, serverClient);
+    private->gc =
+        CreateGC(pDraw, GCFunction, gcvals, &status, (XID) 0, serverClient);
     gcvals[1] = FALSE;
-    private->swapgc = CreateGC(pDraw, GCFunction | GCGraphicsExposures, gcvals, &status, (XID)0, serverClient);
+    private->swapgc =
+        CreateGC(pDraw, GCFunction | GCGraphicsExposures, gcvals, &status,
+                 (XID) 0, serverClient);
 
     private->driDrawable =
 	(*driScreen->swrast->createNewDrawable)(driScreen->driScreen,
-						config->driConfig,
-						private);
+                                                 config->driConfig, private);
 
     return &private->base;
 }
 
 static void
 swrastGetDrawableInfo(__DRIdrawable *draw,
-		      int *x, int *y, int *w, int *h,
-		      void *loaderPrivate)
+                      int *x, int *y, int *w, int *h, void *loaderPrivate)
 {
     __GLXDRIdrawable *drawable = loaderPrivate;
     DrawablePtr pDraw = drawable->base.pDraw;
@@ -353,8 +346,7 @@ swrastGetDrawableInfo(__DRIdrawable *draw,
 
 static void
 swrastPutImage(__DRIdrawable *draw, int op,
-	     int x, int y, int w, int h, char *data,
-	     void *loaderPrivate)
+               int x, int y, int w, int h, char *data, void *loaderPrivate)
 {
     __GLXDRIdrawable *drawable = loaderPrivate;
     DrawablePtr pDraw = drawable->base.pDraw;
@@ -373,14 +365,12 @@ swrastPutImage(__DRIdrawable *draw, int op,
 
     ValidateGC(pDraw, gc);
 
-    gc->ops->PutImage(pDraw, gc, pDraw->depth,
-		      x, y, w, h, 0, ZPixmap, data);
+    gc->ops->PutImage(pDraw, gc, pDraw->depth, x, y, w, h, 0, ZPixmap, data);
 }
 
 static void
 swrastGetImage(__DRIdrawable *draw,
-	     int x, int y, int w, int h, char *data,
-	     void *loaderPrivate)
+               int x, int y, int w, int h, char *data, void *loaderPrivate)
 {
     __GLXDRIdrawable *drawable = loaderPrivate;
     DrawablePtr pDraw = drawable->base.pDraw;
@@ -421,8 +411,7 @@ initializeExtensions(__GLXDRIscreen *screen)
 
 #ifdef __DRI_TEX_BUFFER
 	if (strcmp(extensions[i]->name, __DRI_TEX_BUFFER) == 0) {
-	    screen->texBuffer =
-		(const __DRItexBufferExtension *) extensions[i];
+            screen->texBuffer = (const __DRItexBufferExtension *) extensions[i];
 	    /* GLX_EXT_texture_from_pixmap is always enabled. */
 	}
 #endif
@@ -458,12 +447,10 @@ __glXDRIscreenProbe(ScreenPtr pScreen)
     screen->driScreen =
 	(*screen->swrast->createNewScreen)(pScreen->myNum,
 					   loader_extensions,
-					   &screen->driConfigs,
-					   screen);
+                                            &screen->driConfigs, screen);
 
     if (screen->driScreen == NULL) {
-	LogMessage(X_ERROR,
-		   "AIGLX error: Calling driver entry point failed\n");
+        LogMessage(X_ERROR, "AIGLX error: Calling driver entry point failed\n");
 	goto handle_error;
     }
 
@@ -479,8 +466,7 @@ __glXDRIscreenProbe(ScreenPtr pScreen)
     screen->base.GLXmajor = 1;
     screen->base.GLXminor = 4;
 
-    LogMessage(X_INFO,
-	       "AIGLX: Loaded and initialized %s\n", driverName);
+    LogMessage(X_INFO, "AIGLX: Loaded and initialized %s\n", driverName);
 
     return &screen->base;
 
