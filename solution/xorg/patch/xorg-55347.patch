diff --git a/hw/dmx/input/usb-keyboard.c b/hw/dmx/input/usb-keyboard.c
index 9db1adb..65bfcd0 100644
--- a/hw/dmx/input/usb-keyboard.c
+++ b/hw/dmx/input/usb-keyboard.c
@@ -242,27 +242,34 @@ static KeySym map[NUM_KEYCODES * GLYPHS_PER_KEY] = {
     /* 0x7f */  XK_Menu,	NoSymbol,	NoSymbol,	NoSymbol,
 };
 
-static int kbdUSBKeyDown(myPrivate *priv, int keyCode)
+static int
+kbdUSBKeyDown(myPrivate * priv, int keyCode)
 {
     CARD8  byte = keyCode >> 5;
     CARD32 bit  = 1 << (keyCode & 0x1f);
 
-    if (byte > NUM_STATE_ENTRIES) return 0;
+    if (byte > NUM_STATE_ENTRIES)
+        return 0;
     return priv->kbdState[byte] & bit;
 }
 
-static void kbdUSBKeyState(myPrivate *priv, int type, int keyCode)
+static void
+kbdUSBKeyState(myPrivate * priv, int type, int keyCode)
 {
     CARD8  byte = keyCode >> 5;
     CARD32 bit  = 1 << (keyCode & 0x1f);
 
-    if (byte > NUM_STATE_ENTRIES) return;
-    if (type == KeyPress) priv->kbdState[byte] |= bit;
-    else                  priv->kbdState[byte] &= ~bit;
+    if (byte > NUM_STATE_ENTRIES)
+        return;
+    if (type == KeyPress)
+        priv->kbdState[byte] |= bit;
+    else
+        priv->kbdState[byte] &= ~bit;
 }
 
 /** Set the LEDs. */
-void kbdUSBCtrl(DevicePtr pDev, KeybdCtrl *ctrl)
+void
+kbdUSBCtrl(DevicePtr pDev, KeybdCtrl * ctrl)
 {
     GETPRIV;
     struct timeval     tv;
@@ -274,9 +281,12 @@ void kbdUSBCtrl(DevicePtr pDev, KeybdCtrl *ctrl)
         event.time.tv_sec    = tv.tv_sec;
         event.time.tv_usec   = tv.tv_usec;
         event.type           = EV_LED;
-        if (i == 0)      led = 1; /* LED_CAPSL == 0x01 */
-        else if (i == 1) led = 0; /* LED_NUML  == 0x00 */
-        else             led = i;
+        if (i == 0)
+            led = 1;            /* LED_CAPSL == 0x01 */
+        else if (i == 1)
+            led = 0;            /* LED_NUML  == 0x00 */
+        else
+            led = i;
         event.code           = led;
         event.value          = !!(ctrl->leds & (1 << led));
         write(priv->fd, &event, sizeof(event));
@@ -284,17 +294,17 @@ void kbdUSBCtrl(DevicePtr pDev, KeybdCtrl *ctrl)
 }
 
 /** Initialize \a pDev using #usbInit. */
-void kbdUSBInit(DevicePtr pDev)
+void
+kbdUSBInit(DevicePtr pDev)
 {
     usbInit(pDev, usbKeyboard);
 }
 
-static void kbdUSBConvert(DevicePtr pDev,
+static void
+kbdUSBConvert(DevicePtr pDev,
                           unsigned int scanCode,
                           int value,
-                          ENQUEUEPROC enqueue,
-                          CHECKPROC checkspecial,
-                          BLOCK block)
+              ENQUEUEPROC enqueue, CHECKPROC checkspecial, BLOCK block)
 {
     GETPRIV;
     XkbSrvInfoPtr  xkbi = priv->pKeyboard->key->xkbInfo;
@@ -315,6 +325,7 @@ static void kbdUSBConvert(DevicePtr pDev,
         int effectiveGroup = XkbGetEffectiveGroup(xkbi,
                                                   &xkbi->state,
                                                   scanCode);
+
         keySym = XkbKeySym(xkbi->desc, scanCode, effectiveGroup);
 #if 0
         switch (keySym) {
@@ -323,9 +334,12 @@ static void kbdUSBConvert(DevicePtr pDev,
         case XK_Shift_Lock:
         case XK_Caps_Lock:
             /* Ignore releases and all but first press */
-            if (kbdLinuxModIgnore(priv, &xE, keySym)) return;
-            if (kbdLinuxKeyDown(priv, &xE)) xE.u.u.type = KeyRelease;
-            else                            xE.u.u.type = KeyPress;
+            if (kbdLinuxModIgnore(priv, &xE, keySym))
+                return;
+            if (kbdLinuxKeyDown(priv, &xE))
+                xE.u.u.type = KeyRelease;
+            else
+                xE.u.u.type = KeyPress;
             break;
         }
 #endif
@@ -337,9 +351,9 @@ static void kbdUSBConvert(DevicePtr pDev,
             /* No auto-repeat? */
             if ((feed && !feed->ctrl.autoRepeat)
                 || priv->pDevice->key->xkbInfo->desc->map->modmap[keyCode]
-                || (feed
-                    && !(feed->ctrl.autoRepeats[keyCode >> 3]
-                         & (1 << (keyCode & 7))))) return; /* Ignore */
+                || (feed && !(feed->ctrl.autoRepeats[keyCode >> 3]
+                              & (1 << (keyCode & 7)))))
+                return;         /* Ignore */
             
             /* Do auto-repeat */
             enqueue(pDev, KeyRelease, keyCode, keySym, NULL, block);
@@ -347,7 +361,8 @@ static void kbdUSBConvert(DevicePtr pDev,
         }
         
         /* If key is already up, ignore */
-        if (type == KeyRelease && !kbdUSBKeyDown(priv, keyCode)) return;
+        if (type == KeyRelease && !kbdUSBKeyDown(priv, keyCode))
+            return;
     }
 
     switching = 0;
@@ -366,11 +381,10 @@ static void kbdUSBConvert(DevicePtr pDev,
  * with the \a enqueue function.  The \a block type is passed to the
  * functions so that they may block SIGIO handling as appropriate to the
  * caller of this function. */
-void kbdUSBRead(DevicePtr pDev,
+void
+kbdUSBRead(DevicePtr pDev,
                 MOTIONPROC motion,
-                ENQUEUEPROC enqueue,
-                CHECKPROC checkspecial,
-                BLOCK block)
+           ENQUEUEPROC enqueue, CHECKPROC checkspecial, BLOCK block)
 {
     GETPRIV;
     struct input_event raw;
@@ -385,15 +399,18 @@ void kbdUSBRead(DevicePtr pDev,
 }
 
 /** Turn \a pDev on (i.e., take input from \a pDev). */
-int kbdUSBOn(DevicePtr pDev)
+int
+kbdUSBOn(DevicePtr pDev)
 {
     GETPRIV;
 
-    if (priv->fd < 0) kbdUSBInit(pDev);
+    if (priv->fd < 0)
+        kbdUSBInit(pDev);
     return priv->fd;
 }
 
-static void kbdUSBGetMap(DevicePtr pDev, KeySymsPtr pKeySyms, CARD8 *pModMap)
+static void
+kbdUSBGetMap(DevicePtr pDev, KeySymsPtr pKeySyms, CARD8 *pModMap)
 {
     KeySym        *k, *mapCopy;
     int           i;
@@ -406,21 +423,36 @@ static void kbdUSBGetMap(DevicePtr pDev, KeySymsPtr pKeySyms, CARD8 *pModMap)
         pModMap[i] = NoSymbol;  /* make sure it is restored */
 
     for (k = mapCopy, i = MIN_KEYCODE;
-         i < NUM_KEYCODES + MIN_KEYCODE;
-         i++, k += 4) {
+         i < NUM_KEYCODES + MIN_KEYCODE; i++, k += 4) {
         switch(*k) {
         case XK_Shift_L:
-        case XK_Shift_R:     pModMap[i] = ShiftMask;      break;
+        case XK_Shift_R:
+            pModMap[i] = ShiftMask;
+            break;
         case XK_Control_L:
-        case XK_Control_R:   pModMap[i] = ControlMask;    break;
-        case XK_Caps_Lock:   pModMap[i] = LockMask;       break;
+        case XK_Control_R:
+            pModMap[i] = ControlMask;
+            break;
+        case XK_Caps_Lock:
+            pModMap[i] = LockMask;
+            break;
         case XK_Alt_L:
-        case XK_Alt_R:       pModMap[i] = AltMask;        break;
-        case XK_Num_Lock:    pModMap[i] = NumLockMask;    break;
-        case XK_Scroll_Lock: pModMap[i] = ScrollLockMask; break;
+        case XK_Alt_R:
+            pModMap[i] = AltMask;
+            break;
+        case XK_Num_Lock:
+            pModMap[i] = NumLockMask;
+            break;
+        case XK_Scroll_Lock:
+            pModMap[i] = ScrollLockMask;
+            break;
         case XK_Kana_Lock:
-        case XK_Kana_Shift:  pModMap[i] = KanaMask;       break;
-        case XK_Mode_switch: pModMap[i] = AltLangMask;    break;
+        case XK_Kana_Shift:
+            pModMap[i] = KanaMask;
+            break;
+        case XK_Mode_switch:
+            pModMap[i] = AltLangMask;
+            break;
         }
     }
 
@@ -432,7 +464,8 @@ static void kbdUSBGetMap(DevicePtr pDev, KeySymsPtr pKeySyms, CARD8 *pModMap)
 
 /** Fill the \a info structure with information needed to initialize \a
  * pDev. */ 
-void kbdUSBGetInfo(DevicePtr pDev, DMXLocalInitInfoPtr info)
+void
+kbdUSBGetInfo(DevicePtr pDev, DMXLocalInitInfoPtr info)
 {
     info->keyboard         = 1;
     info->keyClass         = 1;
