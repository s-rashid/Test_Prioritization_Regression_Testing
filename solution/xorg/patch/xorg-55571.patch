diff --git a/hw/xfree86/os-support/linux/int10/vm86/linux_vm86.c b/hw/xfree86/os-support/linux/int10/vm86/linux_vm86.c
index 34afd95..8502b21 100644
--- a/hw/xfree86/os-support/linux/int10/vm86/linux_vm86.c
+++ b/hw/xfree86/os-support/linux/int10/vm86/linux_vm86.c
@@ -59,18 +59,38 @@ vm86_GP_fault(xf86Int10InfoPtr pInt)
     done = 0;
     do {
 	switch (MEM_RB(pInt, (int)csp++)) {
-	case 0x66:      /* operand prefix */  prefix66=1; break;
-	case 0x67:      /* address prefix */  prefix67=1; break;
-	case 0x2e:      /* CS */              pref_seg=X86_CS; break;
-	case 0x3e:      /* DS */              pref_seg=X86_DS; break;
-	case 0x26:      /* ES */              pref_seg=X86_ES; break;
-	case 0x36:      /* SS */              pref_seg=X86_SS; break;
-	case 0x65:      /* GS */              pref_seg=X86_GS; break;
-	case 0x64:      /* FS */              pref_seg=X86_FS; break;
-	case 0xf0:      /* lock */            break;
+        case 0x66:             /* operand prefix */
+            prefix66 = 1;
+            break;
+        case 0x67:             /* address prefix */
+            prefix67 = 1;
+            break;
+        case 0x2e:             /* CS */
+            pref_seg = X86_CS;
+            break;
+        case 0x3e:             /* DS */
+            pref_seg = X86_DS;
+            break;
+        case 0x26:             /* ES */
+            pref_seg = X86_ES;
+            break;
+        case 0x36:             /* SS */
+            pref_seg = X86_SS;
+            break;
+        case 0x65:             /* GS */
+            pref_seg = X86_GS;
+            break;
+        case 0x64:             /* FS */
+            pref_seg = X86_FS;
+            break;
+        case 0xf0:             /* lock */
+            break;
 	case 0xf2:      /* repnz */
-	case 0xf3:      /* rep */             is_rep=1; break;
-	default: done=1;
+        case 0xf3:             /* rep */
+            is_rep = 1;
+            break;
+        default:
+            done = 1;
 	}
     } while (!done);
     csp--;   /* oops one too many */
@@ -84,7 +104,8 @@ vm86_GP_fault(xf86Int10InfoPtr pInt)
 	/* WARNING: no test for DI wrapping! */
 	X86_EDI += port_rep_inb(pInt, X86_DX, SEG_EADR((CARD32), X86_ES, DI),
 				X86_FLAGS & DF, is_rep ? LWECX : 1);
-	if (is_rep) LWECX_ZERO;
+        if (is_rep)
+            LWECX_ZERO;
 	X86_IP++;
 	break;
 
@@ -99,21 +120,25 @@ vm86_GP_fault(xf86Int10InfoPtr pInt)
 	    X86_DI += port_rep_inw(pInt, X86_DX, SEG_ADR((CARD32), X86_ES, DI),
 				   X86_FLAGS & DF, is_rep ? LWECX : 1);
 	}
-	if (is_rep) LWECX_ZERO;
+        if (is_rep)
+            LWECX_ZERO;
 	X86_IP++;
 	break;
 
     case 0x6e:                  /* (rep) outsb */
-	if (pref_seg < 0) pref_seg = X86_DS;
+        if (pref_seg < 0)
+            pref_seg = X86_DS;
 	/* WARNING: no test for _SI wrapping! */
 	X86_SI += port_rep_outb(pInt, X86_DX, (CARD32)LIN_PREF_SI,
 			        X86_FLAGS & DF, is_rep ? LWECX : 1);
-	if (is_rep) LWECX_ZERO;
+        if (is_rep)
+            LWECX_ZERO;
 	X86_IP++;
 	break;
 
     case 0x6f:                  /* (rep) outsw / outsd */
-	if (pref_seg < 0) pref_seg = X86_DS;
+        if (pref_seg < 0)
+            pref_seg = X86_DS;
 	/* WARNING: no test for _SI wrapping! */
 	if (prefix66) {
 	    X86_SI += port_rep_outl(pInt, X86_DX, (CARD32)LIN_PREF_SI,
@@ -123,13 +148,16 @@ vm86_GP_fault(xf86Int10InfoPtr pInt)
 	    X86_SI += port_rep_outw(pInt, X86_DX, (CARD32)LIN_PREF_SI,
 				    X86_FLAGS & DF, is_rep ? LWECX : 1);
 	}
-	if (is_rep) LWECX_ZERO;
+        if (is_rep)
+            LWECX_ZERO;
 	X86_IP++;
 	break;
 
     case 0xe5:                  /* inw xx, inl xx */
-	if (prefix66) X86_EAX = x_inl(csp[1]);
-	else X86_AX = x_inw(csp[1]);
+        if (prefix66)
+            X86_EAX = x_inl(csp[1]);
+        else
+            X86_AX = x_inw(csp[1]);
 	X86_IP += 2;
 	break;
 
@@ -139,8 +167,10 @@ vm86_GP_fault(xf86Int10InfoPtr pInt)
 	break;
 
     case 0xed:                  /* inw dx, inl dx */
-	if (prefix66) X86_EAX = x_inl(X86_DX);
-	else X86_AX = x_inw(X86_DX);
+        if (prefix66)
+            X86_EAX = x_inl(X86_DX);
+        else
+            X86_AX = x_inw(X86_DX);
 	X86_IP += 1;
 	break;
 
@@ -150,8 +180,10 @@ vm86_GP_fault(xf86Int10InfoPtr pInt)
 	break;
 
     case 0xe7:                  /* outw xx */
-	if (prefix66) x_outl(csp[1], X86_EAX);
-	else x_outw(csp[1], X86_AX);
+        if (prefix66)
+            x_outl(csp[1], X86_EAX);
+        else
+            x_outw(csp[1], X86_AX);
 	X86_IP += 2;
 	break;
 
@@ -161,8 +193,10 @@ vm86_GP_fault(xf86Int10InfoPtr pInt)
 	break;
 
     case 0xef:                  /* outw dx */
-	if (prefix66) x_outl(X86_DX, X86_EAX);
-	else x_outw(X86_DX, X86_AX);
+        if (prefix66)
+            x_outl(X86_DX, X86_EAX);
+        else
+            x_outw(X86_DX, X86_AX);
 	X86_IP += 1;
 	break;
 
@@ -177,7 +211,8 @@ vm86_GP_fault(xf86Int10InfoPtr pInt)
 
     case 0x0f:
 	xf86DrvMsg(pInt->scrnIndex, X_ERROR,
-	    "CPU 0x0f Trap at CS:EIP=0x%4.4x:0x%8.8lx\n", X86_CS, X86_EIP);
+                   "CPU 0x0f Trap at CS:EIP=0x%4.4x:0x%8.8lx\n", X86_CS,
+                   X86_EIP);
 	goto op0ferr;
 
     default:
@@ -213,7 +248,8 @@ do_vm86(xf86Int10InfoPtr pInt)
 
     switch (VM86_TYPE(retval)) {
     case VM86_UNKNOWN:
-	if (!vm86_GP_fault(pInt)) return 0;
+        if (!vm86_GP_fault(pInt))
+            return 0;
 	break;
     case VM86_STI:
 	xf86DrvMsg(pInt->scrnIndex, X_ERROR, "vm86_sti :-((\n");
@@ -259,7 +295,8 @@ xf86ExecX86int10(xf86Int10InfoPtr pInt)
     int sig = setup_int(pInt);
 
     if (int_handler(pInt))
-	while(do_vm86(pInt)) {};
+        while (do_vm86(pInt)) {
+        };
 
     finish_int(pInt, sig);
 }
@@ -276,16 +313,12 @@ vm86_rep(struct vm86_struct *ptr)
 			 "push %%gs\n\t"
 			 "movl %2,%%ebx\n\t"
 			 "movl %1,%%eax\n\t"
-			 "int $0x80\n\t"
-			 "pop %%gs\n\t"
-			 "popl %%ebx"
-			 :"=a" (__res)
+                         "int $0x80\n\t" "pop %%gs\n\t" "popl %%ebx":"=a"(__res)
 			 :"n" ((int)113), "r" ((struct vm86_struct *)ptr));
 #else
     __asm__ __volatile__("push %%gs\n\t"
 			 "int $0x80\n\t"
-			 "pop %%gs"
-			 :"=a" (__res):"a" ((int)113),
+                         "pop %%gs":"=a"(__res):"a"((int) 113),
 			 "b" ((struct vm86_struct *)ptr));
 #endif
 
@@ -293,7 +326,8 @@ vm86_rep(struct vm86_struct *ptr)
 		errno = -__res;
 		__res = -1;
 	    }
-	    else errno = 0;
+    else
+        errno = 0;
 	    return __res;
 }
 
