diff --git a/dix/getevents.c b/dix/getevents.c
index 306d0ff..2f6f06c 100644
--- a/dix/getevents.c
+++ b/dix/getevents.c
@@ -185,14 +185,30 @@ init_raw(DeviceIntPtr dev, RawDeviceEvent *event, Time ms, int type, int detail)
     event->header = ET_Internal;
     event->length = sizeof(RawDeviceEvent);
     switch(type) {
-        case MotionNotify:      event->type = ET_RawMotion; break;
-        case ButtonPress:       event->type = ET_RawButtonPress; break;
-        case ButtonRelease:     event->type = ET_RawButtonRelease; break;
-        case KeyPress:          event->type = ET_RawKeyPress; break;
-        case KeyRelease:        event->type = ET_RawKeyRelease; break;
-        case XI_TouchBegin:     event->type = ET_RawTouchBegin; break;
-        case XI_TouchUpdate:    event->type = ET_RawTouchUpdate; break;
-        case XI_TouchEnd:       event->type = ET_RawTouchEnd; break;
+    case MotionNotify:
+        event->type = ET_RawMotion;
+        break;
+    case ButtonPress:
+        event->type = ET_RawButtonPress;
+        break;
+    case ButtonRelease:
+        event->type = ET_RawButtonRelease;
+        break;
+    case KeyPress:
+        event->type = ET_RawKeyPress;
+        break;
+    case KeyRelease:
+        event->type = ET_RawKeyRelease;
+        break;
+    case XI_TouchBegin:
+        event->type = ET_RawTouchBegin;
+        break;
+    case XI_TouchUpdate:
+        event->type = ET_RawTouchUpdate;
+        break;
+    case XI_TouchEnd:
+        event->type = ET_RawTouchEnd;
+        break;
     }
     event->time = ms;
     event->deviceid = dev->id;
@@ -205,17 +221,14 @@ set_raw_valuators(RawDeviceEvent *event, ValuatorMask *mask, double* data)
 {
     int i;
 
-    for (i = 0; i < valuator_mask_size(mask); i++)
-    {
-        if (valuator_mask_isset(mask, i))
-        {
+    for (i = 0; i < valuator_mask_size(mask); i++) {
+        if (valuator_mask_isset(mask, i)) {
             SetBit(event->valuators.mask, i);
             data[i] = valuator_mask_get_double(mask, i);
         }
     }
 }
 
-
 static void
 set_valuators(DeviceIntPtr dev, DeviceEvent* event, ValuatorMask *mask)
 {
@@ -223,10 +236,8 @@ set_valuators(DeviceIntPtr dev, DeviceEvent* event, ValuatorMask *mask)
 
     /* Set the data to the previous value for unset absolute axes. The values
      * may be used when sent as part of an XI 1.x valuator event. */
-    for (i = 0; i < valuator_mask_size(mask); i++)
-    {
-        if (valuator_mask_isset(mask, i))
-        {
+    for (i = 0; i < valuator_mask_size(mask); i++) {
+        if (valuator_mask_isset(mask, i)) {
             SetBit(event->valuators.mask, i);
             if (valuator_get_mode(dev, i) == Absolute)
                 SetBit(event->valuators.mode, i);
@@ -239,9 +250,7 @@ set_valuators(DeviceIntPtr dev, DeviceEvent* event, ValuatorMask *mask)
 
 void
 CreateClassesChangedEvent(InternalEvent* event,
-                          DeviceIntPtr master,
-                          DeviceIntPtr slave,
-                          int flags)
+                          DeviceIntPtr master, DeviceIntPtr slave, int flags)
 {
     int i;
     DeviceChangedEvent *dce;
@@ -258,17 +267,14 @@ CreateClassesChangedEvent(InternalEvent* event,
     dce->flags = flags;
     dce->sourceid = slave->id;
 
-    if (slave->button)
-    {
+    if (slave->button) {
         dce->buttons.num_buttons = slave->button->numButtons;
         for (i = 0; i < dce->buttons.num_buttons; i++)
             dce->buttons.names[i] = slave->button->labels[i];
     }
-    if (slave->valuator)
-    {
+    if (slave->valuator) {
         dce->num_valuators = slave->valuator->numAxes;
-        for (i = 0; i < dce->num_valuators; i++)
-        {
+        for (i = 0; i < dce->num_valuators; i++) {
             dce->valuators[i].min = slave->valuator->axes[i].min_value;
             dce->valuators[i].max = slave->valuator->axes[i].max_value;
             dce->valuators[i].resolution = slave->valuator->axes[i].resolution;
@@ -277,8 +283,7 @@ CreateClassesChangedEvent(InternalEvent* event,
             dce->valuators[i].scroll = slave->valuator->axes[i].scroll;
         }
     }
-    if (slave->key)
-    {
+    if (slave->key) {
         dce->keys.min_keycode = slave->key->xkbInfo->desc->min_key_code;
         dce->keys.max_keycode = slave->key->xkbInfo->desc->max_key_code;
     }
@@ -336,15 +341,13 @@ updateSlaveDeviceCoords(DeviceIntPtr master, DeviceIntPtr pDev)
         return;
 
     /* scale back to device coordinates */
-    if(pDev->valuator->numAxes > 0)
-    {
+    if (pDev->valuator->numAxes > 0) {
         pDev->last.valuators[0] = rescaleValuatorAxis(pDev->last.valuators[0],
                                                       NULL,
                                                       pDev->valuator->axes + 0,
                                                       0, scr->width);
     }
-    if(pDev->valuator->numAxes > 1)
-    {
+    if (pDev->valuator->numAxes > 1) {
         pDev->last.valuators[1] = rescaleValuatorAxis(pDev->last.valuators[1],
                                                       NULL,
                                                       pDev->valuator->axes + 1,
@@ -357,14 +360,13 @@ updateSlaveDeviceCoords(DeviceIntPtr master, DeviceIntPtr pDev)
      */
     if ((lastSlave = master->last.slave) && lastSlave->valuator) {
         for (i = 2; i < pDev->valuator->numAxes; i++) {
-            if (i >= lastSlave->valuator->numAxes)
-            {
+            if (i >= lastSlave->valuator->numAxes) {
                 pDev->last.valuators[i] = 0;
                 valuator_mask_set_double(pDev->last.scroll, i, 0);
             }
-            else
-            {
+            else {
                 double val = pDev->last.valuators[i];
+
                 val = rescaleValuatorAxis(val, lastSlave->valuator->axes + i,
                                           pDev->valuator->axes + i, 0, 0);
                 pDev->last.valuators[i] = val;
@@ -382,6 +384,7 @@ void
 AllocateMotionHistory(DeviceIntPtr pDev)
 {
     int size;
+
     free(pDev->valuator->motion);
 
     if (pDev->valuator->numMotionEvents < 1)
@@ -396,6 +399,7 @@ AllocateMotionHistory(DeviceIntPtr pDev)
     else {
         ValuatorClassPtr v = pDev->valuator;
         int numAxes;
+
         /* XI1 doesn't understand mixed mode devices */
         for (numAxes = 0; numAxes < v->numAxes; numAxes++)
             if (valuator_get_mode(pDev, numAxes) != valuator_get_mode(pDev, 0))
@@ -428,6 +432,7 @@ GetMotionHistory(DeviceIntPtr pDev, xTimecoord **buff, unsigned long start,
     int i = 0, ret = 0;
     int j, coord;
     Time current;
+
     /* The size of a single motion event. */
     int size;
     AxisInfo from, *to; /* for scaling */
@@ -464,8 +469,7 @@ GetMotionHistory(DeviceIntPtr pDev, xTimecoord **buff, unsigned long start,
             return ret;
         }
         else if (current >= start) {
-            if (core)
-            {
+            if (core) {
                 memcpy(obuff, ibuff, sizeof(Time)); /* copy timestamp */
 
                 icbuf = (INT32*)(ibuff + sizeof(Time));
@@ -479,7 +483,8 @@ GetMotionHistory(DeviceIntPtr pDev, xTimecoord **buff, unsigned long start,
                 /* scale to screen coords */
                 to = &core_axis;
                 to->max_value = pScreen->width;
-                coord = rescaleValuatorAxis(coord, &from, to, 0, pScreen->width);
+                coord =
+                    rescaleValuatorAxis(coord, &from, to, 0, pScreen->width);
 
                 memcpy(corebuf, &coord, sizeof(INT16));
                 corebuf++;
@@ -490,17 +495,17 @@ GetMotionHistory(DeviceIntPtr pDev, xTimecoord **buff, unsigned long start,
                 memcpy(&coord, icbuf++, sizeof(INT32));
 
                 to->max_value = pScreen->height;
-                coord = rescaleValuatorAxis(coord, &from, to, 0, pScreen->height);
+                coord =
+                    rescaleValuatorAxis(coord, &from, to, 0, pScreen->height);
                 memcpy(corebuf, &coord, sizeof(INT16));
 
-            } else if (IsMaster(pDev))
-            {
+            }
+            else if (IsMaster(pDev)) {
                 memcpy(obuff, ibuff, sizeof(Time)); /* copy timestamp */
 
                 ocbuf = (INT32*)(obuff + sizeof(Time));
                 icbuf = (INT32*)(ibuff + sizeof(Time));
-                for (j = 0; j < MAX_VALUATORS; j++)
-                {
+                for (j = 0; j < MAX_VALUATORS; j++) {
                     if (j >= pDev->valuator->numAxes)
                         break;
 
@@ -509,7 +514,9 @@ GetMotionHistory(DeviceIntPtr pDev, xTimecoord **buff, unsigned long start,
                     memcpy(&from.max_value, icbuf++, sizeof(INT32));
                     memcpy(&coord, icbuf++, sizeof(INT32));
 
-                    to = (j < pDev->valuator->numAxes) ? &pDev->valuator->axes[j] : NULL;
+                    to = (j <
+                          pDev->valuator->numAxes) ? &pDev->valuator->
+                        axes[j] : NULL;
 
                     /* x/y scaled to screen if no range is present */
                     if (j == 0 && (from.max_value < from.min_value))
@@ -522,7 +529,8 @@ GetMotionHistory(DeviceIntPtr pDev, xTimecoord **buff, unsigned long start,
                     memcpy(ocbuf, &coord, sizeof(INT32));
                     ocbuf++;
                 }
-            } else
+            }
+            else
                 memcpy(obuff, ibuff, size);
 
             /* don't advance by size here. size may be different to the
@@ -530,7 +538,8 @@ GetMotionHistory(DeviceIntPtr pDev, xTimecoord **buff, unsigned long start,
             if (core)
                 obuff += sizeof(INT32) + sizeof(Time);
             else
-                obuff += (sizeof(INT32) * pDev->valuator->numAxes) + sizeof(Time);
+                obuff +=
+                    (sizeof(INT32) * pDev->valuator->numAxes) + sizeof(Time);
             ret++;
         }
     }
@@ -538,7 +547,6 @@ GetMotionHistory(DeviceIntPtr pDev, xTimecoord **buff, unsigned long start,
     return ret;
 }
 
-
 /**
  * Update the motion history for a specific device, with the list of
  * valuators.
@@ -562,8 +570,7 @@ updateMotionHistory(DeviceIntPtr pDev, CARD32 ms, ValuatorMask *mask,
         return;
 
     v = pDev->valuator;
-    if (IsMaster(pDev))
-    {
+    if (IsMaster(pDev)) {
         buff += ((sizeof(INT32) * 3 * MAX_VALUATORS) + sizeof(CARD32)) *
                 v->last_motion;
 
@@ -572,14 +579,13 @@ updateMotionHistory(DeviceIntPtr pDev, CARD32 ms, ValuatorMask *mask,
 
         memset(buff, 0, sizeof(INT32) * 3 * MAX_VALUATORS);
 
-        for (i = 0; i < v->numAxes; i++)
-        {
+        for (i = 0; i < v->numAxes; i++) {
             int val;
+
             /* XI1 doesn't support mixed mode devices */
             if (valuator_get_mode(pDev, i) != valuator_get_mode(pDev, 0))
                 break;
-            if (valuator_mask_size(mask) <= i || !valuator_mask_isset(mask, i))
-            {
+            if (valuator_mask_size(mask) <= i || !valuator_mask_isset(mask, i)) {
                 buff += 3 * sizeof(INT32);
                 continue;
             }
@@ -591,8 +597,8 @@ updateMotionHistory(DeviceIntPtr pDev, CARD32 ms, ValuatorMask *mask,
             memcpy(buff, &val, sizeof(INT32));
             buff += sizeof(INT32);
         }
-    } else
-    {
+    }
+    else {
 
         buff += ((sizeof(INT32) * pDev->valuator->numAxes) + sizeof(CARD32)) *
             pDev->valuator->last_motion;
@@ -602,11 +608,10 @@ updateMotionHistory(DeviceIntPtr pDev, CARD32 ms, ValuatorMask *mask,
 
         memset(buff, 0, sizeof(INT32) * pDev->valuator->numAxes);
 
-        for (i = 0; i < MAX_VALUATORS; i++)
-        {
+        for (i = 0; i < MAX_VALUATORS; i++) {
             int val;
-            if (valuator_mask_size(mask) <= i || !valuator_mask_isset(mask, i))
-            {
+
+            if (valuator_mask_size(mask) <= i || !valuator_mask_isset(mask, i)) {
                 buff += sizeof(INT32);
                 continue;
             }
@@ -626,7 +631,6 @@ updateMotionHistory(DeviceIntPtr pDev, CARD32 ms, ValuatorMask *mask,
     return;
 }
 
-
 /**
  * Returns the maximum number of events GetKeyboardEvents
  * and GetPointerEvents will ever return.
@@ -634,7 +638,8 @@ updateMotionHistory(DeviceIntPtr pDev, CARD32 ms, ValuatorMask *mask,
  * This MUST be absolutely constant, from init until exit.
  */
 int
-GetMaximumEventsNum(void) {
+GetMaximumEventsNum(void)
+{
     /* One raw event
      * One device event
      * One possible device changed event
@@ -644,7 +649,6 @@ GetMaximumEventsNum(void) {
     return 100;
 }
 
-
 /**
  * Clip an axis to its bounds, which are declared in the call to
  * InitValuatorAxisClassStruct.
@@ -678,9 +682,9 @@ clipValuators(DeviceIntPtr pDev, ValuatorMask *mask)
     int i;
 
     for (i = 0; i < valuator_mask_size(mask); i++)
-        if (valuator_mask_isset(mask, i))
-        {
+        if (valuator_mask_isset(mask, i)) {
             double val = valuator_mask_get_double(mask, i);
+
             clipAxis(pDev, i, &val);
             valuator_mask_set_double(mask, i, val);
         }
@@ -699,17 +703,20 @@ clipValuators(DeviceIntPtr pDev, ValuatorMask *mask)
  * @return The updated @events pointer.
  */
 InternalEvent*
-UpdateFromMaster(InternalEvent* events, DeviceIntPtr dev, int type, int *num_events)
+UpdateFromMaster(InternalEvent *events, DeviceIntPtr dev, int type,
+                 int *num_events)
 {
     DeviceIntPtr master;
 
-    master = GetMaster(dev, (type & DEVCHANGE_POINTER_EVENT) ?  MASTER_POINTER : MASTER_KEYBOARD);
+    master =
+        GetMaster(dev,
+                  (type & DEVCHANGE_POINTER_EVENT) ? MASTER_POINTER :
+                  MASTER_KEYBOARD);
 
-    if (master && master->last.slave != dev)
-    {
-        CreateClassesChangedEvent(events, master, dev, type | DEVCHANGE_SLAVE_SWITCH);
-        if (IsPointerDevice(master))
-        {
+    if (master && master->last.slave != dev) {
+        CreateClassesChangedEvent(events, master, dev,
+                                  type | DEVCHANGE_SLAVE_SWITCH);
+        if (IsPointerDevice(master)) {
             updateSlaveDeviceCoords(master, dev);
             master->last.numValuators = dev->last.numValuators;
         }
@@ -731,8 +738,7 @@ clipAbsolute(DeviceIntPtr dev, ValuatorMask *mask)
 {
     int i;
 
-    for (i = 0; i < valuator_mask_size(mask); i++)
-    {
+    for (i = 0; i < valuator_mask_size(mask); i++) {
         double val;
 
         if (!valuator_mask_isset(mask, i))
@@ -756,8 +762,7 @@ moveRelative(DeviceIntPtr dev, ValuatorMask *mask)
     Bool clip_xy = IsMaster(dev) || !IsFloating(dev);
 
     /* calc other axes, clip, drop back into valuators */
-    for (i = 0; i < valuator_mask_size(mask); i++)
-    {
+    for (i = 0; i < valuator_mask_size(mask); i++) {
         double val = dev->last.valuators[i];
 
         if (!valuator_mask_isset(mask, i))
@@ -800,16 +805,14 @@ scale_from_screen(DeviceIntPtr dev, ValuatorMask *mask)
     double scaled;
     ScreenPtr scr = miPointerGetScreen(dev);
 
-    if (valuator_mask_isset(mask, 0))
-    {
+    if (valuator_mask_isset(mask, 0)) {
         scaled = valuator_mask_get_double(mask, 0) + scr->x;
         scaled = rescaleValuatorAxis(scaled,
                                      NULL, dev->valuator->axes + 0,
                                      0, scr->width);
         valuator_mask_set_double(mask, 0, scaled);
     }
-    if (valuator_mask_isset(mask, 1))
-    {
+    if (valuator_mask_isset(mask, 1)) {
         scaled = valuator_mask_get_double(mask, 1) + scr->y;
         scaled = rescaleValuatorAxis(scaled,
                                      NULL, dev->valuator->axes + 1,
@@ -818,7 +821,6 @@ scale_from_screen(DeviceIntPtr dev, ValuatorMask *mask)
     }
 }
 
-
 /**
  * Scale from (absolute) device to screen coordinates here,
  *
@@ -834,15 +836,13 @@ scale_from_screen(DeviceIntPtr dev, ValuatorMask *mask)
  */
 static ScreenPtr
 scale_to_desktop(DeviceIntPtr dev, ValuatorMask *mask,
-                 double *devx, double *devy,
-                 double *screenx, double *screeny)
+                 double *devx, double *devy, double *screenx, double *screeny)
 {
     ScreenPtr scr = miPointerGetScreen(dev);
     double x, y;
 
     BUG_WARN(!dev->valuator || dev->valuator->numAxes < 2);
-    if (!dev->valuator || dev->valuator->numAxes < 2)
-    {
+    if (!dev->valuator || dev->valuator->numAxes < 2) {
         /* if we have no axes, last.valuators must be in screen coords
          * anyway */
         *devx = *screenx = dev->last.valuators[0];
@@ -895,8 +895,7 @@ scale_to_desktop(DeviceIntPtr dev, ValuatorMask *mask,
  */
 static ScreenPtr
 positionSprite(DeviceIntPtr dev, int mode, ValuatorMask *mask,
-               double *devx, double *devy,
-               double *screenx, double *screeny)
+               double *devx, double *devy, double *screenx, double *screeny)
 {
     ScreenPtr scr = miPointerGetScreen(dev);
     double tmpx, tmpy;
@@ -927,14 +926,16 @@ positionSprite(DeviceIntPtr dev, int mode, ValuatorMask *mask,
     /* Recalculate the per-screen device coordinates */
     if (valuator_mask_isset(mask, 0)) {
         double x;
-        x = rescaleValuatorAxis(*screenx - scr->x, NULL, dev->valuator->axes + 0,
-                                0, scr->width);
+
+        x = rescaleValuatorAxis(*screenx - scr->x, NULL,
+                                dev->valuator->axes + 0, 0, scr->width);
         valuator_mask_set_double(mask, 0, x);
     }
     if (valuator_mask_isset(mask, 1)) {
         double y;
-        y = rescaleValuatorAxis(*screeny - scr->y, NULL, dev->valuator->axes + 1,
-                                0, scr->height);
+
+        y = rescaleValuatorAxis(*screeny - scr->y, NULL,
+                                dev->valuator->axes + 1, 0, scr->height);
         valuator_mask_set_double(mask, 1, y);
     }
 
@@ -956,9 +957,9 @@ updateHistory(DeviceIntPtr dev, ValuatorMask *mask, CARD32 ms)
         return;
 
     updateMotionHistory(dev, ms, mask, dev->last.valuators);
-    if(!IsMaster(dev) && !IsFloating(dev))
-    {
+    if (!IsMaster(dev) && !IsFloating(dev)) {
         DeviceIntPtr master = GetMaster(dev, MASTER_POINTER);
+
         updateMotionHistory(master, ms, mask, dev->last.valuators);
     }
 }
@@ -967,6 +968,7 @@ static void
 queueEventList(DeviceIntPtr device, InternalEvent *events, int nevents)
 {
     int i;
+
     for (i = 0; i < nevents; i++)
         mieqEnqueue(device, &events[i]);
 }
@@ -1015,7 +1017,8 @@ QueueKeyboardEvents(DeviceIntPtr device, int type,
  */
 int
 GetKeyboardEvents(InternalEvent *events, DeviceIntPtr pDev, int type,
-                  int key_code, const ValuatorMask *mask_in) {
+                  int key_code, const ValuatorMask *mask_in)
+{
     int num_events = 0;
     CARD32 ms = 0;
     DeviceEvent *event;
@@ -1038,7 +1041,8 @@ GetKeyboardEvents(InternalEvent *events, DeviceIntPtr pDev, int type,
 
     num_events = 1;
 
-    events = UpdateFromMaster(events, pDev, DEVCHANGE_KEYBOARD_EVENT, &num_events);
+    events =
+        UpdateFromMaster(events, pDev, DEVCHANGE_KEYBOARD_EVENT, &num_events);
 
     /* Handle core repeating, via press/release/press/release. */
     if (type == KeyPress && key_is_down(pDev, key_code, KEY_POSTED)) {
@@ -1084,6 +1088,7 @@ GetKeyboardEvents(InternalEvent *events, DeviceIntPtr pDev, int type,
 
     if (!IsFloating(pDev)) {
             DeviceIntPtr master = GetMaster(pDev, MASTER_POINTER);
+
             event_set_root_coordinates(event,
                                        master->last.valuators[0],
                                        master->last.valuators[1]);
@@ -1103,6 +1108,7 @@ InternalEvent*
 InitEventList(int num_events)
 {
     InternalEvent *events = calloc(num_events, sizeof(InternalEvent));
+
     return events;
 }
 
@@ -1166,8 +1172,7 @@ transformAbsolute(DeviceIntPtr dev, ValuatorMask *mask)
 
 static void
 storeLastValuators(DeviceIntPtr dev, ValuatorMask *mask,
-                   int xaxis, int yaxis,
-                   double devx, double devy)
+                   int xaxis, int yaxis, double devx, double devy)
 {
     int i;
 
@@ -1177,8 +1182,7 @@ storeLastValuators(DeviceIntPtr dev, ValuatorMask *mask,
     if (valuator_mask_isset(mask, yaxis))
         dev->last.valuators[1] = devy;
 
-    for (i = 0; i < valuator_mask_size(mask); i++)
-    {
+    for (i = 0; i < valuator_mask_size(mask); i++) {
         if (i == xaxis || i == yaxis)
             continue;
 
@@ -1207,7 +1211,8 @@ QueuePointerEvents(DeviceIntPtr device, int type,
 {
     int nevents;
 
-    nevents = GetPointerEvents(InputEventList, device, type, buttons, flags, mask);
+    nevents =
+        GetPointerEvents(InputEventList, device, type, buttons, flags, mask);
     queueEventList(device, InputEventList, nevents);
 }
 
@@ -1264,12 +1269,11 @@ fill_pointer_events(InternalEvent *events, DeviceIntPtr pDev, int type,
     ValuatorMask mask;
     ScreenPtr scr;
 
-    switch (type)
-    {
+    switch (type) {
         case MotionNotify:
-            if (!pDev->valuator)
-            {
-                ErrorF("[dix] motion events from device %d without valuators\n", pDev->id);
+        if (!pDev->valuator) {
+            ErrorF("[dix] motion events from device %d without valuators\n",
+                   pDev->id);
                 return 0;
             }
             if (!mask_in || valuator_mask_num_valuators(mask_in) <= 0)
@@ -1279,9 +1283,10 @@ fill_pointer_events(InternalEvent *events, DeviceIntPtr pDev, int type,
         case ButtonRelease:
             if (!pDev->button || !buttons)
                 return 0;
-            if (mask_in && valuator_mask_size(mask_in) > 0 && !pDev->valuator)
-            {
-                ErrorF("[dix] button event with valuator from device %d without valuators\n", pDev->id);
+        if (mask_in && valuator_mask_size(mask_in) > 0 && !pDev->valuator) {
+            ErrorF
+                ("[dix] button event with valuator from device %d without valuators\n",
+                 pDev->id);
                 return 0;
             }
             break;
@@ -1291,8 +1296,7 @@ fill_pointer_events(InternalEvent *events, DeviceIntPtr pDev, int type,
 
     valuator_mask_copy(&mask, mask_in);
 
-    if ((flags & POINTER_NORAW) == 0)
-    {
+    if ((flags & POINTER_NORAW) == 0) {
 	raw = &events->raw_event;
 	events++;
 	num_events++;
@@ -1303,14 +1307,14 @@ fill_pointer_events(InternalEvent *events, DeviceIntPtr pDev, int type,
 
     /* valuators are in driver-native format (rel or abs) */
 
-    if (flags & POINTER_ABSOLUTE)
-    {
+    if (flags & POINTER_ABSOLUTE) {
         if (flags & POINTER_SCREEN) /* valuators are in screen coords */
             scale_from_screen(pDev, &mask);
 
         transformAbsolute(pDev, &mask);
         clipAbsolute(pDev, &mask);
-    } else {
+    }
+    else {
         if (flags & POINTER_ACCELERATE)
             accelPointer(pDev, &mask, ms);
         moveRelative(pDev, &mask);
@@ -1337,6 +1341,7 @@ fill_pointer_events(InternalEvent *events, DeviceIntPtr pDev, int type,
     /* Update the MD's co-ordinates, which are always in desktop space. */
     if (!IsMaster(pDev) && !IsFloating(pDev)) {
         DeviceIntPtr master = GetMaster(pDev, MASTER_POINTER);
+
         master->last.valuators[0] = screenx;
         master->last.valuators[1] = screeny;
     }
@@ -1394,9 +1399,7 @@ emulate_scroll_button_events(InternalEvent *events,
                              int type,
                              int axis,
                              const ValuatorMask *mask,
-                             ValuatorMask *last,
-                             CARD32 ms,
-                             int max_events)
+                             ValuatorMask *last, CARD32 ms, int max_events)
 {
     AxisInfoPtr ax;
     double delta;
@@ -1421,16 +1424,16 @@ emulate_scroll_button_events(InternalEvent *events,
     if (!valuator_mask_isset(last, axis))
         valuator_mask_set_double(last, axis, 0);
 
-    delta = valuator_mask_get_double(mask, axis) - valuator_mask_get_double(last, axis);
+    delta =
+        valuator_mask_get_double(mask, axis) - valuator_mask_get_double(last,
+                                                                        axis);
     total = delta;
     b = (ax->scroll.type == SCROLL_TYPE_VERTICAL) ? 5 : 7;
 
-    if ((incr > 0 && delta < 0) ||
-        (incr < 0 && delta > 0))
+    if ((incr > 0 && delta < 0) || (incr < 0 && delta > 0))
         b--; /* we're scrolling up or left → button 4 or 6 */
 
-    while (fabs(delta) >= fabs(incr))
-    {
+    while (fabs(delta) >= fabs(incr)) {
         int nev_tmp;
 
         if (delta > 0)
@@ -1443,17 +1446,14 @@ emulate_scroll_button_events(InternalEvent *events,
          * We may get a bigger scroll delta than we can generate events
          * for. In that case, we keep decreasing delta, but skip events.
          */
-        if (num_events + 4 < max_events)
-        {
-            if (type != ButtonRelease)
-            {
+        if (num_events + 4 < max_events) {
+            if (type != ButtonRelease) {
                 nev_tmp = fill_pointer_events(events, dev, ButtonPress, b, ms,
                                               flags, NULL);
                 events += nev_tmp;
                 num_events += nev_tmp;
             }
-            if (type != ButtonPress)
-            {
+            if (type != ButtonPress) {
                 nev_tmp = fill_pointer_events(events, dev, ButtonRelease, b, ms,
                                               flags, NULL);
                 events += nev_tmp;
@@ -1463,8 +1463,7 @@ emulate_scroll_button_events(InternalEvent *events,
     }
 
     /* We emulated, update last.scroll */
-    if (total != delta)
-    {
+    if (total != delta) {
         total -= delta;
         valuator_mask_set_double(last, axis,
                                  valuator_mask_get_double(last, axis) + total);
@@ -1473,7 +1472,6 @@ emulate_scroll_button_events(InternalEvent *events,
     return num_events;
 }
 
-
 /**
  * Generate a complete series of InternalEvents (filled into the EventList)
  * representing pointer motion, or button presses.  If the device is a slave
@@ -1518,15 +1516,13 @@ GetPointerEvents(InternalEvent *events, DeviceIntPtr pDev, int type,
     /* Turn a scroll button press into a smooth-scrolling event if
      * necessary. This only needs to cater for the XIScrollFlagPreferred
      * axis (if more than one scrolling axis is present) */
-    if (type == ButtonPress)
-    {
+    if (type == ButtonPress) {
         double val, adj;
         int axis;
         int h_scroll_axis = -1;
         int v_scroll_axis = -1;
 
-        if (pDev->valuator)
-        {
+        if (pDev->valuator) {
             h_scroll_axis = pDev->valuator->h_scroll_axis;
             v_scroll_axis = pDev->valuator->v_scroll_axis;
         }
@@ -1555,8 +1551,7 @@ GetPointerEvents(InternalEvent *events, DeviceIntPtr pDev, int type,
             break;
         }
 
-        if (adj != 0.0 && axis != -1)
-        {
+        if (adj != 0.0 && axis != -1) {
             adj *= pDev->valuator->axes[axis].scroll.increment;
             val = valuator_mask_get_double(&mask, axis) + adj;
             valuator_mask_set_double(&mask, axis, val);
@@ -1582,7 +1577,8 @@ GetPointerEvents(InternalEvent *events, DeviceIntPtr pDev, int type,
 
         valuator_mask_set_double(&scroll, i, pDev->last.valuators[i]);
 
-        nev_tmp = emulate_scroll_button_events(events, pDev, realtype, i, &scroll,
+        nev_tmp =
+            emulate_scroll_button_events(events, pDev, realtype, i, &scroll,
                                                pDev->last.scroll, ms,
                                                GetMaximumEventsNum() - num_events);
         events += nev_tmp;
@@ -1605,8 +1601,7 @@ GetPointerEvents(InternalEvent *events, DeviceIntPtr pDev, int type,
  *
  */
 void
-QueueProximityEvents(DeviceIntPtr device, int type,
-                     const ValuatorMask *mask)
+QueueProximityEvents(DeviceIntPtr device, int type, const ValuatorMask *mask)
 {
     int nevents;
 
@@ -1624,7 +1619,8 @@ QueueProximityEvents(DeviceIntPtr device, int type,
  * @return the number of events written into events.
  */
 int
-GetProximityEvents(InternalEvent *events, DeviceIntPtr pDev, int type, const ValuatorMask *mask_in)
+GetProximityEvents(InternalEvent *events, DeviceIntPtr pDev, int type,
+                   const ValuatorMask *mask_in)
 {
     int num_events = 1, i;
     DeviceEvent *event;
@@ -1643,8 +1639,7 @@ GetProximityEvents(InternalEvent *events, DeviceIntPtr pDev, int type, const Val
     valuator_mask_copy(&mask, mask_in);
 
     /* ignore relative axes for proximity. */
-    for (i = 0; i < valuator_mask_size(&mask); i++)
-    {
+    for (i = 0; i < valuator_mask_size(&mask); i++) {
         if (valuator_mask_isset(&mask, i) &&
             valuator_get_mode(pDev, i) == Relative)
             valuator_mask_unset(&mask, i);
@@ -1654,7 +1649,8 @@ GetProximityEvents(InternalEvent *events, DeviceIntPtr pDev, int type, const Val
      * in an empty event, EventToXI() will fail to convert → no event sent
      * to client. */
 
-    events = UpdateFromMaster(events, pDev, DEVCHANGE_POINTER_EVENT, &num_events);
+    events =
+        UpdateFromMaster(events, pDev, DEVCHANGE_POINTER_EVENT, &num_events);
 
     event = &events->device_event;
     init_device_event(event, pDev, GetTimeInMillis());
@@ -1709,7 +1705,8 @@ QueueTouchEvents(DeviceIntPtr device, int type,
 {
     int nevents;
 
-    nevents = GetTouchEvents(InputEventList, device, ddx_touchid, type, flags, mask);
+    nevents =
+        GetTouchEvents(InputEventList, device, ddx_touchid, type, flags, mask);
     queueEventList(device, InputEventList, nevents);
 }
 
@@ -1758,8 +1755,7 @@ GetTouchEvents(InternalEvent *events, DeviceIntPtr dev, uint32_t ddx_touchid,
 
     /* Find and/or create the DDX touch info */
 
-    if (flags & TOUCH_CLIENT_ID) /* A DIX-submitted TouchEnd */
-    {
+    if (flags & TOUCH_CLIENT_ID) {      /* A DIX-submitted TouchEnd */
         touchpoint.dix_ti = TouchFindByClientID(dev, ddx_touchid);
         BUG_WARN(!touchpoint.dix_ti);
 
@@ -1768,19 +1764,20 @@ GetTouchEvents(InternalEvent *events, DeviceIntPtr dev, uint32_t ddx_touchid,
 
         if (!mask_in ||
             !valuator_mask_isset(mask_in, 0) ||
-            !valuator_mask_isset(mask_in, 1))
-        {
-            ErrorF("[dix] dix-submitted events must have x/y valuator information.\n");
+            !valuator_mask_isset(mask_in, 1)) {
+            ErrorF
+                ("[dix] dix-submitted events must have x/y valuator information.\n");
             return 0;
         }
 
         need_rawevent = FALSE;
         client_id = touchpoint.dix_ti->client_id;
-    } else /* a DDX-submitted touch */
-    {
-        touchpoint.ti = TouchFindByDDXID(dev, ddx_touchid, (type == XI_TouchBegin));
-        if (!touchpoint.ti)
-        {
+    }
+    else {                      /* a DDX-submitted touch */
+
+        touchpoint.ti =
+            TouchFindByDDXID(dev, ddx_touchid, (type == XI_TouchBegin));
+        if (!touchpoint.ti) {
             ErrorF("[dix] %s: unable to %s touch point %x\n", dev->name,
                     type == XI_TouchBegin ? "begin" : "find", ddx_touchid);
             return 0;
@@ -1794,12 +1791,12 @@ GetTouchEvents(InternalEvent *events, DeviceIntPtr dev, uint32_t ddx_touchid,
         emulate_pointer = !!(flags & TOUCH_POINTER_EMULATED);
 
     if (!IsMaster(dev))
-        events = UpdateFromMaster(events, dev, DEVCHANGE_POINTER_EVENT, &num_events);
+        events =
+            UpdateFromMaster(events, dev, DEVCHANGE_POINTER_EVENT, &num_events);
 
     valuator_mask_copy(&mask, mask_in);
 
-    if (need_rawevent)
-    {
+    if (need_rawevent) {
         raw = &events->raw_event;
         events++;
         num_events++;
@@ -1812,8 +1809,7 @@ GetTouchEvents(InternalEvent *events, DeviceIntPtr dev, uint32_t ddx_touchid,
 
     init_event(dev, event, ms);
     /* if submitted for master device, get the sourceid from there */
-    if (flags & TOUCH_CLIENT_ID)
-    {
+    if (flags & TOUCH_CLIENT_ID) {
         event->sourceid = touchpoint.dix_ti->sourceid;
         /* TOUCH_CLIENT_ID implies norawevent */
     }
@@ -1824,8 +1820,7 @@ GetTouchEvents(InternalEvent *events, DeviceIntPtr dev, uint32_t ddx_touchid,
         /* If we're starting a touch, we must have x & y co-ordinates. */
         if (!mask_in ||
             !valuator_mask_isset(mask_in, 0) ||
-            !valuator_mask_isset(mask_in, 1))
-        {
+            !valuator_mask_isset(mask_in, 1)) {
             ErrorF("%s: Attempted to start touch without x/y (driver bug)\n",
                    dev->name);
             return 0;
@@ -1833,8 +1828,7 @@ GetTouchEvents(InternalEvent *events, DeviceIntPtr dev, uint32_t ddx_touchid,
         break;
     case XI_TouchUpdate:
         event->type = ET_TouchUpdate;
-        if (!mask_in || valuator_mask_num_valuators(mask_in) <= 0)
-        {
+        if (!mask_in || valuator_mask_num_valuators(mask_in) <= 0) {
             ErrorF("%s: TouchUpdate with no valuators? Driver bug\n",
                     dev->name);
         }
@@ -1849,12 +1843,15 @@ GetTouchEvents(InternalEvent *events, DeviceIntPtr dev, uint32_t ddx_touchid,
     default:
         return 0;
     }
-    if (t->mode == XIDirectTouch && !(flags & TOUCH_CLIENT_ID))
-    {
+    if (t->mode == XIDirectTouch && !(flags & TOUCH_CLIENT_ID)) {
         if (!valuator_mask_isset(&mask, 0))
-            valuator_mask_set_double(&mask, 0, valuator_mask_get_double(touchpoint.ti->valuators, 0));
+            valuator_mask_set_double(&mask, 0,
+                                     valuator_mask_get_double(touchpoint.ti->
+                                                              valuators, 0));
         if (!valuator_mask_isset(&mask, 1))
-            valuator_mask_set_double(&mask, 1, valuator_mask_get_double(touchpoint.ti->valuators, 1));
+            valuator_mask_set_double(&mask, 1,
+                                     valuator_mask_get_double(touchpoint.ti->
+                                                              valuators, 1));
     }
 
     /* Get our screen event co-ordinates (root_x/root_y/event_x/event_y):
@@ -1866,6 +1863,7 @@ GetTouchEvents(InternalEvent *events, DeviceIntPtr dev, uint32_t ddx_touchid,
         if (!(flags & TOUCH_CLIENT_ID)) {
             for (i = 0; i < valuator_mask_size(&mask); i++) {
                 double val;
+
                 if (valuator_mask_fetch_double(&mask, i, &val))
                     valuator_mask_set_double(touchpoint.ti->valuators, i, val);
             }
@@ -1905,15 +1903,13 @@ GetTouchEvents(InternalEvent *events, DeviceIntPtr dev, uint32_t ddx_touchid,
     event->touchid = client_id;
     event->flags = flags;
 
-    if (emulate_pointer)
-    {
+    if (emulate_pointer) {
         event->flags |= TOUCH_POINTER_EMULATED;
         event->detail.button = 1;
     }
 
     set_valuators(dev, event, &mask);
-    for (i = 0; i < v->numAxes; i++)
-    {
+    for (i = 0; i < v->numAxes; i++) {
         if (valuator_mask_isset(&mask, i))
             v->axisVal[i] = valuator_mask_get(&mask, i);
     }
@@ -1921,7 +1917,6 @@ GetTouchEvents(InternalEvent *events, DeviceIntPtr dev, uint32_t ddx_touchid,
     return num_events;
 }
 
-
 /**
  * Synthesize a single motion event for the core pointer.
  *
@@ -1930,10 +1925,7 @@ GetTouchEvents(InternalEvent *events, DeviceIntPtr dev, uint32_t ddx_touchid,
  */
 void
 PostSyntheticMotion(DeviceIntPtr pDev,
-                    int x,
-                    int y,
-                    int screen,
-                    unsigned long time)
+                    int x, int y, int screen, unsigned long time)
 {
     DeviceEvent ev;
 
