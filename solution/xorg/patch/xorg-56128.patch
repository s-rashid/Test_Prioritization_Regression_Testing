diff --git a/xfixes/region.c b/xfixes/region.c
index 4c22637..624109d 100644
--- a/xfixes/region.c
+++ b/xfixes/region.c
@@ -28,6 +28,7 @@
 #include "scrnintstr.h"
 #include <picturestr.h>
 extern int RenderErrBase;
+
 #include <regionstr.h>
 #include <gcstruct.h>
 #include <window.h>
@@ -48,10 +49,10 @@ XFixesRegionCopy (RegionPtr pRegion)
 {
     RegionPtr   pNew = RegionCreate(RegionExtents(pRegion),
 				      RegionNumRects(pRegion));
+
     if (!pNew)
 	return 0;
-    if (!RegionCopy(pNew, pRegion))
-    {
+    if (!RegionCopy(pNew, pRegion)) {
 	RegionDestroy(pNew);
 	return 0;
     }
@@ -71,6 +72,7 @@ ProcXFixesCreateRegion (ClientPtr client)
 {
     int		things;
     RegionPtr	pRegion;
+
     REQUEST (xXFixesCreateRegionReq);
     
     REQUEST_AT_LEAST_SIZE(xXFixesCreateRegionReq);
@@ -108,6 +110,7 @@ ProcXFixesCreateRegionFromBitmap (ClientPtr client)
     RegionPtr	pRegion;
     PixmapPtr	pPixmap;
     int rc;
+
     REQUEST (xXFixesCreateRegionFromBitmapReq);
 
     REQUEST_SIZE_MATCH (xXFixesCreateRegionFromBitmapReq);
@@ -115,8 +118,7 @@ ProcXFixesCreateRegionFromBitmap (ClientPtr client)
 
     rc = dixLookupResourceByType((pointer *)&pPixmap, stuff->bitmap, RT_PIXMAP,
 			   client, DixReadAccess);
-    if (rc != Success)
-    {
+    if (rc != Success) {
 	client->errorValue = stuff->bitmap;
 	return rc;
     }
@@ -153,30 +155,28 @@ ProcXFixesCreateRegionFromWindow (ClientPtr client)
     Bool	copy = TRUE;
     WindowPtr	pWin;
     int rc;
+
     REQUEST (xXFixesCreateRegionFromWindowReq);
     
     REQUEST_SIZE_MATCH (xXFixesCreateRegionFromWindowReq);
     LEGAL_NEW_RESOURCE (stuff->region, client);
     rc = dixLookupResourceByType((pointer *)&pWin, stuff->window, RT_WINDOW,
 			   client, DixGetAttrAccess);
-    if (rc != Success)
-    {
+    if (rc != Success) {
 	client->errorValue = stuff->window;
 	return rc;
     }
     switch (stuff->kind) {
     case WindowRegionBounding:
 	pRegion = wBoundingShape(pWin);
-	if (!pRegion)
-	{
+        if (!pRegion) {
 	    pRegion = CreateBoundingShape (pWin);
 	    copy = FALSE;
 	}
 	break;
     case WindowRegionClip:
 	pRegion = wClipShape(pWin);
-	if (!pRegion)
-	{
+        if (!pRegion) {
 	    pRegion = CreateClipShape (pWin);
 	    copy = FALSE;
 	}
@@ -213,6 +213,7 @@ ProcXFixesCreateRegionFromGC (ClientPtr client)
     RegionPtr	pRegion, pClip;
     GCPtr	pGC;
     int 	rc;
+
     REQUEST (xXFixesCreateRegionFromGCReq);
 
     REQUEST_SIZE_MATCH (xXFixesCreateRegionFromGCReq);
@@ -261,6 +262,7 @@ ProcXFixesCreateRegionFromPicture (ClientPtr client)
 {
     RegionPtr	pRegion;
     PicturePtr	pPicture;
+
     REQUEST (xXFixesCreateRegionFromPictureReq);
 
     REQUEST_SIZE_MATCH (xXFixesCreateRegionFromPictureReq);
@@ -330,6 +332,7 @@ ProcXFixesSetRegion (ClientPtr client)
 {
     int		things;
     RegionPtr	pRegion, pNew;
+
     REQUEST (xXFixesSetRegionReq);
 
     REQUEST_AT_LEAST_SIZE(xXFixesSetRegionReq);
@@ -343,8 +346,7 @@ ProcXFixesSetRegion (ClientPtr client)
     pNew = RegionFromRects(things, (xRectangle *) (stuff + 1), CT_UNSORTED);
     if (!pNew)
 	return BadAlloc;
-    if (!RegionCopy(pRegion, pNew))
-    {
+    if (!RegionCopy(pRegion, pNew)) {
 	RegionDestroy(pNew);
 	return BadAlloc;
     }
@@ -368,6 +370,7 @@ int
 ProcXFixesCopyRegion (ClientPtr client)
 {
     RegionPtr	pSource, pDestination;
+
     REQUEST (xXFixesCopyRegionReq);
     
     VERIFY_REGION(pSource, stuff->source, client, DixReadAccess);
@@ -395,6 +398,7 @@ int
 ProcXFixesCombineRegion (ClientPtr client)
 {
     RegionPtr	pSource1, pSource2, pDestination;
+
     REQUEST (xXFixesCombineRegionReq);
 
     REQUEST_SIZE_MATCH (xXFixesCombineRegionReq);
@@ -438,6 +442,7 @@ ProcXFixesInvertRegion (ClientPtr client)
 {
     RegionPtr	pSource, pDestination;
     BoxRec	bounds;
+
     REQUEST(xXFixesInvertRegionReq);
 
     REQUEST_SIZE_MATCH(xXFixesInvertRegionReq);
@@ -483,6 +488,7 @@ int
 ProcXFixesTranslateRegion (ClientPtr client)
 {
     RegionPtr	pRegion;
+
     REQUEST(xXFixesTranslateRegionReq);
 
     REQUEST_SIZE_MATCH(xXFixesTranslateRegionReq);
@@ -509,6 +515,7 @@ int
 ProcXFixesRegionExtents (ClientPtr client)
 {
     RegionPtr	pSource, pDestination;
+
     REQUEST(xXFixesRegionExtentsReq);
 
     REQUEST_SIZE_MATCH(xXFixesRegionExtentsReq);
@@ -541,6 +548,7 @@ ProcXFixesFetchRegion (ClientPtr client)
     BoxPtr		    pExtent;
     BoxPtr		    pBox;
     int			    i, nBox;
+
     REQUEST(xXFixesFetchRegionReq);
 
     REQUEST_SIZE_MATCH(xXFixesFetchRegionReq);
@@ -550,8 +558,7 @@ ProcXFixesFetchRegion (ClientPtr client)
     pBox = RegionRects (pRegion);
     nBox = RegionNumRects (pRegion);
     
-    reply = malloc(sizeof (xXFixesFetchRegionReply) +
-		    nBox * sizeof (xRectangle));
+    reply = malloc(sizeof(xXFixesFetchRegionReply) + nBox * sizeof(xRectangle));
     if (!reply)
 	return BadAlloc;
     reply->type = X_Reply;
@@ -563,15 +570,13 @@ ProcXFixesFetchRegion (ClientPtr client)
     reply->height = pExtent->y2 - pExtent->y1;
 
     pRect = (xRectangle *) (reply + 1);
-    for (i = 0; i < nBox; i++)
-    {
+    for (i = 0; i < nBox; i++) {
 	pRect[i].x = pBox[i].x1;
 	pRect[i].y = pBox[i].y1;
 	pRect[i].width = pBox[i].x2 - pBox[i].x1;
 	pRect[i].height = pBox[i].y2 - pBox[i].y1;
     }
-    if (client->swapped)
-    {
+    if (client->swapped) {
 	swaps(&reply->sequenceNumber);
 	swapl(&reply->length);
 	swaps(&reply->x);
@@ -604,6 +609,7 @@ ProcXFixesSetGCClipRegion (ClientPtr client)
     RegionPtr	pRegion;
     ChangeGCVal	vals[2];
     int		rc;
+
     REQUEST(xXFixesSetGCClipRegionReq);
     REQUEST_SIZE_MATCH(xXFixesSetGCClipRegionReq);
 
@@ -613,8 +619,7 @@ ProcXFixesSetGCClipRegion (ClientPtr client)
 
     VERIFY_REGION_OR_NONE (pRegion, stuff->region, client, DixReadAccess);
 
-    if (pRegion)
-    {
+    if (pRegion) {
 	pRegion = XFixesRegionCopy (pRegion);
 	if (!pRegion)
 	    return BadAlloc;
@@ -623,7 +628,8 @@ ProcXFixesSetGCClipRegion (ClientPtr client)
     vals[0].val = stuff->xOrigin;
     vals[1].val = stuff->yOrigin;
     ChangeGC (NullClient, pGC, GCClipXOrigin|GCClipYOrigin, vals);
-    (*pGC->funcs->ChangeClip)(pGC, pRegion ? CT_REGION : CT_NONE, (pointer)pRegion, 0);
+    (*pGC->funcs->ChangeClip) (pGC, pRegion ? CT_REGION : CT_NONE,
+                               (pointer) pRegion, 0);
 
     return Success;
 }
@@ -651,13 +657,13 @@ ProcXFixesSetWindowShapeRegion (ClientPtr client)
     RegionPtr	    pRegion;
     RegionPtr	    *pDestRegion;
     int rc;
+
     REQUEST(xXFixesSetWindowShapeRegionReq);
 
     REQUEST_SIZE_MATCH(xXFixesSetWindowShapeRegionReq);
     rc = dixLookupResourceByType((pointer *)&pWin, stuff->dest, RT_WINDOW,
 			   client, DixSetAttrAccess);
-    if (rc != Success)
-    {
+    if (rc != Success) {
 	client->errorValue = stuff->dest;
 	return rc;
     }
@@ -671,8 +677,7 @@ ProcXFixesSetWindowShapeRegion (ClientPtr client)
 	client->errorValue = stuff->destKind;
 	return BadValue;
     }
-    if (pRegion)
-    {
+    if (pRegion) {
 	pRegion = XFixesRegionCopy (pRegion);
 	if (!pRegion)
 	    return BadAlloc;
@@ -693,10 +698,8 @@ ProcXFixesSetWindowShapeRegion (ClientPtr client)
 	if (stuff->xOff || stuff->yOff)
 	    RegionTranslate(pRegion, stuff->xOff, stuff->yOff);
     }
-    else
-    {
-	if (pWin->optional)
-	{
+    else {
+        if (pWin->optional) {
 	    switch (stuff->destKind) {
 	    default:
 	    case ShapeBounding:
@@ -740,6 +743,7 @@ ProcXFixesSetPictureClipRegion (ClientPtr client)
 {
     PicturePtr		pPicture;
     RegionPtr		pRegion;
+
     REQUEST(xXFixesSetPictureClipRegionReq);
     
     REQUEST_SIZE_MATCH (xXFixesSetPictureClipRegionReq);
@@ -768,6 +772,7 @@ int
 ProcXFixesExpandRegion (ClientPtr client)
 {
     RegionPtr	pSource, pDestination;
+
     REQUEST (xXFixesExpandRegionReq);
     BoxPtr	pTmp;
     BoxPtr	pSrc;
@@ -780,22 +785,20 @@ ProcXFixesExpandRegion (ClientPtr client)
     
     nBoxes = RegionNumRects(pSource);
     pSrc = RegionRects(pSource);
-    if (nBoxes)
-    {
+    if (nBoxes) {
 	pTmp = malloc(nBoxes * sizeof (BoxRec));
 	if (!pTmp)
 	    return BadAlloc;
-	for (i = 0; i < nBoxes; i++)
-	{
+        for (i = 0; i < nBoxes; i++) {
 	    pTmp[i].x1 = pSrc[i].x1 - stuff->left;
 	    pTmp[i].x2 = pSrc[i].x2 + stuff->right;
 	    pTmp[i].y1 = pSrc[i].y1 - stuff->top;
 	    pTmp[i].y2 = pSrc[i].y2 + stuff->bottom;
 	}
 	RegionEmpty(pDestination);
-	for (i = 0; i < nBoxes; i++)
-	{
+        for (i = 0; i < nBoxes; i++) {
 	    RegionRec	r;
+
 	    RegionInit(&r, &pTmp[i], 0);
 	    RegionUnion(pDestination, pDestination, &r);
 	}
@@ -830,6 +833,7 @@ PanoramiXFixesSetGCClipRegion (ClientPtr client)
     REQUEST(xXFixesSetGCClipRegionReq);
     int		    result = Success, j;
     PanoramiXRes    *gc;
+
     REQUEST_SIZE_MATCH(xXFixesSetGCClipRegionReq);
 
     if ((result = dixLookupResourceByType((void **)&gc, stuff->gc, XRT_GC,
@@ -841,7 +845,8 @@ PanoramiXFixesSetGCClipRegion (ClientPtr client)
     FOR_NSCREENS_BACKWARD(j) {
         stuff->gc = gc->info[j].id;
         result = (*PanoramiXSaveXFixesVector[X_XFixesSetGCClipRegion]) (client);
-        if(result != Success) break;
+        if (result != Success)
+            break;
     }
 
     return result;
@@ -852,6 +857,7 @@ PanoramiXFixesSetWindowShapeRegion (ClientPtr client)
 {
     int		    result = Success, j;
     PanoramiXRes    *win;
+
     REQUEST(xXFixesSetWindowShapeRegionReq);
 
     REQUEST_SIZE_MATCH(xXFixesSetWindowShapeRegionReq);
@@ -865,8 +871,10 @@ PanoramiXFixesSetWindowShapeRegion (ClientPtr client)
 
     FOR_NSCREENS_FORWARD(j) {
 	stuff->dest = win->info[j].id;
-	result = (*PanoramiXSaveXFixesVector[X_XFixesSetWindowShapeRegion]) (client);
-        if(result != Success) break;
+        result =
+            (*PanoramiXSaveXFixesVector[X_XFixesSetWindowShapeRegion]) (client);
+        if (result != Success)
+            break;
     }
 
     return result;
@@ -890,8 +898,10 @@ PanoramiXFixesSetPictureClipRegion (ClientPtr client)
 
     FOR_NSCREENS_BACKWARD(j) {
         stuff->picture = pict->info[j].id;
-	result = (*PanoramiXSaveXFixesVector[X_XFixesSetPictureClipRegion]) (client);
-        if(result != Success) break;
+        result =
+            (*PanoramiXSaveXFixesVector[X_XFixesSetPictureClipRegion]) (client);
+        if (result != Success)
+            break;
     }
 
     return result;
