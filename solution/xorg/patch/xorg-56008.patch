diff --git a/mi/misprite.c b/mi/misprite.c
index 1025c5a..c9fcabc 100644
--- a/mi/misprite.c
+++ b/mi/misprite.c
@@ -134,7 +134,6 @@ typedef struct {
 #define LINE_OVERLAP(pCbox,x1,y1,x2,y2,lw2) \
     BOX_OVERLAP((pCbox), (x1)-(lw2), (y1)-(lw2), (x2)+(lw2), (y2)+(lw2))
 
-
 #define SPRITE_DEBUG_ENABLE 0
 #if SPRITE_DEBUG_ENABLE
 #define SPRITE_DEBUG(x)	ErrorF x
@@ -184,10 +183,12 @@ miSpriteIsDown(miCursorInfoPtr pDevCursor)
  */
 
 static DevPrivateKeyRec miSpriteScreenKeyRec;
+
 #define miSpriteScreenKey (&miSpriteScreenKeyRec)
 #define GetSpriteScreen(pScreen) \
 	(dixLookupPrivate(&(pScreen)->devPrivates, miSpriteScreenKey))
 static DevPrivateKeyRec miSpriteDevPrivatesKeyRec;
+
 #define miSpriteDevPrivatesKey (&miSpriteDevPrivatesKeyRec)
 
 static Bool	    miSpriteCloseScreen(int i, ScreenPtr pScreen);
@@ -201,22 +202,17 @@ static void	    miSpriteSourceValidate(DrawablePtr pDrawable, int x, int y,
 					   int width, int height,
 					   unsigned int subWindowMode);
 static void	    miSpriteCopyWindow (WindowPtr pWindow,
-					DDXPointRec ptOldOrg,
-					RegionPtr prgnSrc);
+                               DDXPointRec ptOldOrg, RegionPtr prgnSrc);
 static void	    miSpriteBlockHandler(int i, pointer blockData,
-					 pointer pTimeout,
-					 pointer pReadMask);
+                                 pointer pTimeout, pointer pReadMask);
 static void	    miSpriteInstallColormap(ColormapPtr pMap);
-static void	    miSpriteStoreColors(ColormapPtr pMap, int ndef,
-					xColorItem *pdef);
+static void miSpriteStoreColors(ColormapPtr pMap, int ndef, xColorItem * pdef);
 
-static void	    miSpriteComputeSaved(DeviceIntPtr pDev,
-                                         ScreenPtr pScreen);
+static void miSpriteComputeSaved(DeviceIntPtr pDev, ScreenPtr pScreen);
 
 static Bool         miSpriteDeviceCursorInitialize(DeviceIntPtr pDev,
                                                    ScreenPtr pScreen);
-static void         miSpriteDeviceCursorCleanup(DeviceIntPtr pDev,
-                                                ScreenPtr pScreen);
+static void miSpriteDeviceCursorCleanup(DeviceIntPtr pDev, ScreenPtr pScreen);
 
 #define SCREEN_PROLOGUE(pPriv, pScreen, field) ((pScreen)->field = \
    (pPriv)->field)
@@ -249,12 +245,9 @@ miPointerSpriteFuncRec miSpritePointerFuncs = {
  * other misc functions
  */
 
-static void miSpriteRemoveCursor(DeviceIntPtr pDev,
-                                 ScreenPtr pScreen);
-static void miSpriteSaveUnderCursor(DeviceIntPtr pDev,
-                                 ScreenPtr pScreen);
-static void miSpriteRestoreCursor(DeviceIntPtr pDev,
-                                 ScreenPtr pScreen);
+static void miSpriteRemoveCursor(DeviceIntPtr pDev, ScreenPtr pScreen);
+static void miSpriteSaveUnderCursor(DeviceIntPtr pDev, ScreenPtr pScreen);
+static void miSpriteRestoreCursor(DeviceIntPtr pDev, ScreenPtr pScreen);
 
 static void
 miSpriteRegisterBlockHandler(ScreenPtr pScreen, miSpriteScreenPtr pScreenPriv)
@@ -272,16 +265,13 @@ miSpriteReportDamage (DamagePtr pDamage, RegionPtr pRegion, void *closure)
     miCursorInfoPtr         pCursorInfo;
     DeviceIntPtr            pDev;
 
-    for (pDev = inputInfo.devices; pDev; pDev = pDev->next)
-    {
-        if (DevHasCursor(pDev))
-        {
+    for (pDev = inputInfo.devices; pDev; pDev = pDev->next) {
+        if (DevHasCursor(pDev)) {
             pCursorInfo = MISPRITE(pDev);
 
             if (pCursorInfo->isUp &&
                 pCursorInfo->pScreen == pScreen &&
-                RegionContainsRect(pRegion, &pCursorInfo->saved) != rgnOUT)
-            {
+                RegionContainsRect(pRegion, &pCursorInfo->saved) != rgnOUT) {
                 SPRITE_DEBUG(("Damage remove\n"));
                 miSpriteRemoveCursor (pDev, pScreen);
             }
@@ -296,8 +286,7 @@ miSpriteReportDamage (DamagePtr pDamage, RegionPtr pRegion, void *closure)
  */
 
 Bool
-miSpriteInitialize (ScreenPtr               pScreen,
-                    miPointerScreenFuncPtr  screenFuncs)
+miSpriteInitialize(ScreenPtr pScreen, miPointerScreenFuncPtr screenFuncs)
 {
     miSpriteScreenPtr	pScreenPriv;
     VisualPtr		pVisual;
@@ -308,7 +297,8 @@ miSpriteInitialize (ScreenPtr               pScreen,
     if (!dixRegisterPrivateKey(&miSpriteScreenKeyRec, PRIVATE_SCREEN, 0))
 	return FALSE;
 
-    if (!dixRegisterPrivateKey(&miSpriteDevPrivatesKeyRec, PRIVATE_DEVICE, sizeof(miCursorInfoRec)))
+    if (!dixRegisterPrivateKey
+        (&miSpriteDevPrivatesKeyRec, PRIVATE_DEVICE, sizeof(miCursorInfoRec)))
 	return FALSE;
 
     pScreenPriv = malloc(sizeof (miSpriteScreenRec));
@@ -318,19 +308,14 @@ miSpriteInitialize (ScreenPtr               pScreen,
     pScreenPriv->pDamage = DamageCreate (miSpriteReportDamage,
 					 NULL,
 					 DamageReportRawRegion,
-					 TRUE,
-					 pScreen,
-					 pScreen);
+                                        TRUE, pScreen, pScreen);
 
-    if (!miPointerInitialize (pScreen, &miSpritePointerFuncs, screenFuncs,TRUE))
-    {
+    if (!miPointerInitialize(pScreen, &miSpritePointerFuncs, screenFuncs, TRUE)) {
 	free(pScreenPriv);
 	return FALSE;
     }
     for (pVisual = pScreen->visuals;
-	 pVisual->vid != pScreen->rootVisual;
-	 pVisual++)
-	;
+         pVisual->vid != pScreen->rootVisual; pVisual++);
     pScreenPriv->pVisual = pVisual;
     pScreenPriv->CloseScreen = pScreen->CloseScreen;
     pScreenPriv->GetImage = pScreen->GetImage;
@@ -402,8 +387,7 @@ miSpriteCloseScreen (int i, ScreenPtr pScreen)
 
 static void
 miSpriteGetImage (DrawablePtr pDrawable, int sx, int sy, int w, int h,
-                  unsigned int format, unsigned long planemask,
-                  char *pdstLine)
+                 unsigned int format, unsigned long planemask, char *pdstLine)
 {
     ScreenPtr           pScreen = pDrawable->pScreen;
     DeviceIntPtr        pDev;
@@ -412,17 +396,13 @@ miSpriteGetImage (DrawablePtr pDrawable, int sx, int sy, int w, int h,
 
     SCREEN_PROLOGUE (pPriv, pScreen, GetImage);
 
-    if (pDrawable->type == DRAWABLE_WINDOW)
-    {
-        for(pDev = inputInfo.devices; pDev; pDev = pDev->next)
-        {
-            if (DevHasCursor(pDev))
-            {
+    if (pDrawable->type == DRAWABLE_WINDOW) {
+        for (pDev = inputInfo.devices; pDev; pDev = pDev->next) {
+            if (DevHasCursor(pDev)) {
                  pCursorInfo = MISPRITE(pDev);
                  if (pCursorInfo->isUp && pCursorInfo->pScreen == pScreen &&
                       ORG_OVERLAP(&pCursorInfo->saved,pDrawable->x,pDrawable->y,
-                                  sx, sy, w, h))
-                 {
+                                sx, sy, w, h)) {
                      SPRITE_DEBUG (("GetImage remove\n"));
                      miSpriteRemoveCursor (pDev, pScreen);
                  }
@@ -430,8 +410,7 @@ miSpriteGetImage (DrawablePtr pDrawable, int sx, int sy, int w, int h,
         }
     }
 
-    (*pScreen->GetImage) (pDrawable, sx, sy, w, h,
-			  format, planemask, pdstLine);
+    (*pScreen->GetImage) (pDrawable, sx, sy, w, h, format, planemask, pdstLine);
 
     SCREEN_EPILOGUE (pPriv, pScreen, GetImage);
 }
@@ -447,32 +426,24 @@ miSpriteGetSpans (DrawablePtr pDrawable, int wMax, DDXPointPtr ppt,
 
     SCREEN_PROLOGUE (pPriv, pScreen, GetSpans);
 
-    if (pDrawable->type == DRAWABLE_WINDOW)
-    {
-        for(pDev = inputInfo.devices; pDev; pDev = pDev->next)
-        {
-            if (DevHasCursor(pDev))
-            {
+    if (pDrawable->type == DRAWABLE_WINDOW) {
+        for (pDev = inputInfo.devices; pDev; pDev = pDev->next) {
+            if (DevHasCursor(pDev)) {
                 pCursorInfo = MISPRITE(pDev);
 
-                if (pCursorInfo->isUp && pCursorInfo->pScreen == pScreen)
-                {
+                if (pCursorInfo->isUp && pCursorInfo->pScreen == pScreen) {
                     DDXPointPtr    pts;
                     int    	       *widths;
                     int    	       nPts;
-                    int    	       xorg,
-                                   yorg;
+                    int xorg, yorg;
 
                     xorg = pDrawable->x;
                     yorg = pDrawable->y;
 
                     for (pts = ppt, widths = pwidth, nPts = nspans;
-                            nPts--;
-                            pts++, widths++)
-                    {
+                         nPts--; pts++, widths++) {
                         if (SPN_OVERLAP(&pCursorInfo->saved,pts->y+yorg,
-                                    pts->x+xorg,*widths))
-                        {
+                                        pts->x + xorg, *widths)) {
                             SPRITE_DEBUG (("GetSpans remove\n"));
                             miSpriteRemoveCursor (pDev, pScreen);
                             break;
@@ -499,17 +470,13 @@ miSpriteSourceValidate (DrawablePtr pDrawable, int x, int y, int width,
 
     SCREEN_PROLOGUE (pPriv, pScreen, SourceValidate);
 
-    if (pDrawable->type == DRAWABLE_WINDOW)
-    {
-	for(pDev = inputInfo.devices; pDev; pDev = pDev->next)
-	{
-	    if (DevHasCursor(pDev))
-	    {
+    if (pDrawable->type == DRAWABLE_WINDOW) {
+        for (pDev = inputInfo.devices; pDev; pDev = pDev->next) {
+            if (DevHasCursor(pDev)) {
 		pCursorInfo = MISPRITE(pDev);
 		if (pCursorInfo->isUp && pCursorInfo->pScreen == pScreen &&
 		    ORG_OVERLAP(&pCursorInfo->saved, pDrawable->x, pDrawable->y,
-				x, y, width, height))
-		{
+                                x, y, width, height)) {
 		    SPRITE_DEBUG (("SourceValidate remove\n"));
 		    miSpriteRemoveCursor (pDev, pScreen);
 		}
@@ -518,7 +485,8 @@ miSpriteSourceValidate (DrawablePtr pDrawable, int x, int y, int width,
     }
 
     if (pScreen->SourceValidate)
-	(*pScreen->SourceValidate) (pDrawable, x, y, width, height, subWindowMode);
+        (*pScreen->SourceValidate) (pDrawable, x, y, width, height,
+                                    subWindowMode);
 
     SCREEN_EPILOGUE (pPriv, pScreen, SourceValidate);
 }
@@ -533,17 +501,14 @@ miSpriteCopyWindow (WindowPtr pWindow, DDXPointRec ptOldOrg, RegionPtr prgnSrc)
 
     SCREEN_PROLOGUE (pPriv, pScreen, CopyWindow);
 
-    for(pDev = inputInfo.devices; pDev; pDev = pDev->next)
-    {
-        if (DevHasCursor(pDev))
-        {
+    for (pDev = inputInfo.devices; pDev; pDev = pDev->next) {
+        if (DevHasCursor(pDev)) {
             pCursorInfo = MISPRITE(pDev);
             /*
              * Damage will take care of destination check
              */
             if (pCursorInfo->isUp && pCursorInfo->pScreen == pScreen &&
-                    RegionContainsRect(prgnSrc, &pCursorInfo->saved) != rgnOUT)
-            {
+                RegionContainsRect(prgnSrc, &pCursorInfo->saved) != rgnOUT) {
                 SPRITE_DEBUG (("CopyWindow remove\n"));
                 miSpriteRemoveCursor (pDev, pScreen);
             }
@@ -564,29 +529,21 @@ miSpriteBlockHandler (int i, pointer blockData, pointer pTimeout,
     miCursorInfoPtr         pCursorInfo;
     Bool                WorkToDo = FALSE;
 
-    for(pDev = inputInfo.devices; pDev; pDev = pDev->next)
-    {
-        if (DevHasCursor(pDev))
-        {
+    for (pDev = inputInfo.devices; pDev; pDev = pDev->next) {
+        if (DevHasCursor(pDev)) {
             pCursorInfo = MISPRITE(pDev);
             if (pCursorInfo && !pCursorInfo->isUp
-                    && pCursorInfo->pScreen == pScreen
-                    && pCursorInfo->shouldBeUp)
-            {
+                && pCursorInfo->pScreen == pScreen && pCursorInfo->shouldBeUp) {
                 SPRITE_DEBUG (("BlockHandler save"));
                 miSpriteSaveUnderCursor (pDev, pScreen);
             }
         }
     }
-    for(pDev = inputInfo.devices; pDev; pDev = pDev->next)
-    {
-        if (DevHasCursor(pDev))
-        {
+    for (pDev = inputInfo.devices; pDev; pDev = pDev->next) {
+        if (DevHasCursor(pDev)) {
             pCursorInfo = MISPRITE(pDev);
             if (pCursorInfo && !pCursorInfo->isUp &&
-                    pCursorInfo->pScreen == pScreen &&
-                    pCursorInfo->shouldBeUp)
-            {
+                pCursorInfo->pScreen == pScreen && pCursorInfo->shouldBeUp) {
                 SPRITE_DEBUG (("BlockHandler restore\n"));
                 miSpriteRestoreCursor (pDev, pScreen);
                 if (!pCursorInfo->isUp)
@@ -619,14 +576,12 @@ miSpriteInstallColormap (ColormapPtr pMap)
 
     /* InstallColormap can be called before devices are initialized. */
     pPriv->pInstalledMap = pMap;
-    if (pPriv->pColormap != pMap)
-    {
+    if (pPriv->pColormap != pMap) {
         DeviceIntPtr pDev;
         miCursorInfoPtr     pCursorInfo;
-        for (pDev = inputInfo.devices; pDev; pDev = pDev->next)
-        {
-            if (DevHasCursor(pDev))
-            {
+
+        for (pDev = inputInfo.devices; pDev; pDev = pDev->next) {
+            if (DevHasCursor(pDev)) {
                 pCursorInfo = MISPRITE(pDev);
                 pCursorInfo->checkPixels = TRUE;
                 if (pCursorInfo->isUp && pCursorInfo->pScreen == pScreen)
@@ -654,12 +609,10 @@ miSpriteStoreColors (ColormapPtr pMap, int ndef, xColorItem *pdef)
 
     SCREEN_EPILOGUE(pPriv, pScreen, StoreColors);
 
-    if (pPriv->pColormap == pMap)
-    {
+    if (pPriv->pColormap == pMap) {
         updated = 0;
         pVisual = pMap->pVisual;
-        if (pVisual->class == DirectColor)
-        {
+        if (pVisual->class == DirectColor) {
             /* Direct color - match on any of the subfields */
 
 #define MaskMatch(a,b,mask) (((a) & (pVisual->mask)) == ((b) & (pVisual->mask)))
@@ -676,39 +629,29 @@ miSpriteStoreColors (ColormapPtr pMap, int ndef, xColorItem *pdef)
 	    UpdateDAC(dev, plane,green,greenMask) \
 	    UpdateDAC(dev, plane,blue,blueMask)
 
-            for (i = 0; i < ndef; i++)
-            {
+            for (i = 0; i < ndef; i++) {
                 CheckDirect (pPriv, SOURCE_COLOR)
                 CheckDirect (pPriv, MASK_COLOR)
             }
         }
-        else
-        {
+        else {
             /* PseudoColor/GrayScale - match on exact pixel */
-            for (i = 0; i < ndef; i++)
-            {
-                if (pdef[i].pixel ==
-                        pPriv->colors[SOURCE_COLOR].pixel)
-                {
+            for (i = 0; i < ndef; i++) {
+                if (pdef[i].pixel == pPriv->colors[SOURCE_COLOR].pixel) {
                     pPriv->colors[SOURCE_COLOR] = pdef[i];
                     if (++updated == 2)
                         break;
                 }
-                if (pdef[i].pixel ==
-                        pPriv->colors[MASK_COLOR].pixel)
-                {
+                if (pdef[i].pixel == pPriv->colors[MASK_COLOR].pixel) {
                     pPriv->colors[MASK_COLOR] = pdef[i];
                     if (++updated == 2)
                         break;
                 }
             }
         }
-        if (updated)
-        {
-            for(pDev = inputInfo.devices; pDev; pDev = pDev->next)
-            {
-                if (DevHasCursor(pDev))
-                {
+        if (updated) {
+            for (pDev = inputInfo.devices; pDev; pDev = pDev->next) {
+                if (DevHasCursor(pDev)) {
                     pCursorInfo = MISPRITE(pDev);
                     pCursorInfo->checkPixels = TRUE;
                     if (pCursorInfo->isUp && pCursorInfo->pScreen == pScreen)
@@ -735,8 +678,7 @@ miSpriteFindColors (miCursorInfoPtr pDevCursor, ScreenPtr pScreen)
           pCursor->foreBlue == sourceColor->blue &&
 	  pCursor->backRed == maskColor->red &&
 	  pCursor->backGreen == maskColor->green &&
-	  pCursor->backBlue == maskColor->blue))
-    {
+          pCursor->backBlue == maskColor->blue)) {
 	pScreenPriv->pColormap = pScreenPriv->pInstalledMap;
 	sourceColor->red = pCursor->foreRed;
 	sourceColor->green = pCursor->foreGreen;
@@ -796,8 +738,7 @@ miSpriteSetCursor (DeviceIntPtr pDev, ScreenPtr pScreen,
     pPointer = MISPRITE(pDev);
     pScreenPriv = GetSpriteScreen(pScreen);
 
-    if (!pCursor)
-    {
+    if (!pCursor) {
 	if (pPointer->shouldBeUp)
 	    --pScreenPriv->numberOfCursors;
     	pPointer->shouldBeUp = FALSE;
@@ -815,16 +756,13 @@ miSpriteSetCursor (DeviceIntPtr pDev, ScreenPtr pScreen,
 	miSpriteRegisterBlockHandler(pScreen, pScreenPriv);
     if (pPointer->x == x &&
 	pPointer->y == y &&
-	pPointer->pCursor == pCursor &&
-	!pPointer->checkPixels)
-    {
+        pPointer->pCursor == pCursor && !pPointer->checkPixels) {
 	return;
     }
     pPointer->x = x;
     pPointer->y = y;
     pPointer->pCacheWin = NullWindow;
-    if (pPointer->checkPixels || pPointer->pCursor != pCursor)
-    {
+    if (pPointer->checkPixels || pPointer->pCursor != pCursor) {
 	pPointer->pCursor = pCursor;
 	miSpriteFindColors (pPointer, pScreen);
     }
@@ -834,8 +772,7 @@ miSpriteSetCursor (DeviceIntPtr pDev, ScreenPtr pScreen,
 	miSpriteRemoveCursor (pDev, pScreen);
     }
 
-    if (!pPointer->isUp && pPointer->pCursor)
-    {
+    if (!pPointer->isUp && pPointer->pCursor) {
 	SPRITE_DEBUG (("SetCursor restore %d\n", pDev->id));
         miSpriteSaveUnderCursor(pDev, pScreen);
 	miSpriteRestoreCursor (pDev, pScreen);
@@ -856,16 +793,16 @@ miSpriteMoveCursor (DeviceIntPtr pDev, ScreenPtr pScreen, int x, int y)
     miSpriteSetCursor (pDev, pScreen, pCursor, x, y);
 }
 
-
 static Bool
 miSpriteDeviceCursorInitialize(DeviceIntPtr pDev, ScreenPtr pScreen)
 {
     int ret = miDCDeviceInitialize(pDev, pScreen);
 
-    if (ret)
-    {
+    if (ret) {
         miCursorInfoPtr pCursorInfo;
-        pCursorInfo = dixLookupPrivate(&pDev->devPrivates, miSpriteDevPrivatesKey);
+
+        pCursorInfo =
+            dixLookupPrivate(&pDev->devPrivates, miSpriteDevPrivatesKey);
         pCursorInfo->pCursor = NULL;
         pCursorInfo->x = 0;
         pCursorInfo->y = 0;
@@ -883,7 +820,8 @@ miSpriteDeviceCursorInitialize(DeviceIntPtr pDev, ScreenPtr pScreen)
 static void
 miSpriteDeviceCursorCleanup(DeviceIntPtr pDev, ScreenPtr pScreen)
 {
-    miCursorInfoPtr pCursorInfo = dixLookupPrivate(&pDev->devPrivates, miSpriteDevPrivatesKey);
+    miCursorInfoPtr pCursorInfo =
+        dixLookupPrivate(&pDev->devPrivates, miSpriteDevPrivatesKey);
 
     if (DevHasCursor(pDev))
         miDCDeviceCleanup(pDev, pScreen);
@@ -901,7 +839,6 @@ miSpriteRemoveCursor (DeviceIntPtr pDev, ScreenPtr pScreen)
     miSpriteScreenPtr   pScreenPriv;
     miCursorInfoPtr     pCursorInfo;
 
-
     if (IsFloating(pDev))
         return;
 
@@ -920,8 +857,7 @@ miSpriteRemoveCursor (DeviceIntPtr pDev, ScreenPtr pScreen)
                                 pCursorInfo->saved.x2 -
                                 pCursorInfo->saved.x1,
                                 pCursorInfo->saved.y2 -
-                                pCursorInfo->saved.y1))
-    {
+                                pCursorInfo->saved.y1)) {
         miSpriteIsUp(pCursorInfo);
     }
     miSpriteEnableDamage(pScreen, pScreenPriv);
@@ -956,14 +892,12 @@ miSpriteSaveUnderCursor(DeviceIntPtr pDev, ScreenPtr pScreen)
                         pCursorInfo->saved.y1,
                         pCursorInfo->saved.x2 -
                         pCursorInfo->saved.x1,
-                        pCursorInfo->saved.y2 -
-                        pCursorInfo->saved.y1);
+                        pCursorInfo->saved.y2 - pCursorInfo->saved.y1);
     SPRITE_DEBUG(("SaveUnderCursor %d\n", pDev->id));
     miSpriteEnableDamage(pScreen, pScreenPriv);
     DamageDrawInternal (pScreen, FALSE);
 }
 
-
 /*
  * Called from the block handler, restores the cursor
  * before waiting for something to do.
@@ -996,8 +930,7 @@ miSpriteRestoreCursor (DeviceIntPtr pDev, ScreenPtr pScreen)
     if (miDCPutUpCursor(pDev, pScreen,
                 pCursor, x, y,
                 pScreenPriv->colors[SOURCE_COLOR].pixel,
-                pScreenPriv->colors[MASK_COLOR].pixel))
-    {
+                        pScreenPriv->colors[MASK_COLOR].pixel)) {
         miSpriteIsUp(pCursorInfo);
         pCursorInfo->pScreen = pScreen;
     }
@@ -1034,4 +967,3 @@ miSpriteComputeSaved (DeviceIntPtr pDev, ScreenPtr pScreen)
     pCursorInfo->saved.x2 = pCursorInfo->saved.x1 + w + wpad * 2;
     pCursorInfo->saved.y2 = pCursorInfo->saved.y1 + h + hpad * 2;
 }
-
