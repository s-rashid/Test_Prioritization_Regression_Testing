diff --git a/miext/rootless/rootlessGC.c b/miext/rootless/rootlessGC.c
index 68a9dc7..9328995 100644
--- a/miext/rootless/rootlessGC.c
+++ b/miext/rootless/rootlessGC.c
@@ -49,15 +49,13 @@
 
 #include "rootlessCommon.h"
 
-
 // GC functions
 static void RootlessValidateGC(GCPtr pGC, unsigned long changes,
                                DrawablePtr pDrawable);
 static void RootlessChangeGC(GCPtr pGC, unsigned long mask);
 static void RootlessCopyGC(GCPtr pGCSrc, unsigned long mask, GCPtr pGCDst);
 static void RootlessDestroyGC(GCPtr pGC);
-static void RootlessChangeClip(GCPtr pGC, int type, pointer pvalue,
-                               int nrects);
+static void RootlessChangeClip(GCPtr pGC, int type, pointer pvalue, int nrects);
 static void RootlessDestroyClip(GCPtr pGC);
 static void RootlessCopyClip(GCPtr pgcDst, GCPtr pgcSrc);
 
@@ -75,8 +73,7 @@ GCFuncs rootlessGCFuncs = {
 
 // GC operations
 static void RootlessFillSpans(DrawablePtr dst, GCPtr pGC, int nInit,
-			      DDXPointPtr pptInit, int *pwidthInit, 
-			      int sorted);
+                              DDXPointPtr pptInit, int *pwidthInit, int sorted);
 static void RootlessSetSpans(DrawablePtr dst, GCPtr pGC, char *pSrc,
 			     DDXPointPtr pptInit, int *pwidthInit,
 			     int nspans, int sorted);
@@ -98,32 +95,31 @@ static void RootlessPolySegment(DrawablePtr dst, GCPtr pGC,
                                 int nseg, xSegment *pSeg);
 static void RootlessPolyRectangle(DrawablePtr dst, GCPtr pGC,
                                   int nRects, xRectangle *pRects);
-static void RootlessPolyArc(DrawablePtr dst, GCPtr pGC, int narcs, xArc *parcs);
-static void RootlessFillPolygon(DrawablePtr dst, GCPtr pGC,
-                                int shape, int mode, int count,
-                                DDXPointPtr pptInit);
-static void RootlessPolyFillRect(DrawablePtr dst, GCPtr pGC,
-                                 int nRectsInit, xRectangle *pRectsInit);
-static void RootlessPolyFillArc(DrawablePtr dst, GCPtr pGC,
-                                int narcsInit, xArc *parcsInit);
-static int RootlessPolyText8(DrawablePtr dst, GCPtr pGC,
-			     int x, int y, int count, char *chars);
-static int RootlessPolyText16(DrawablePtr dst, GCPtr pGC,
-			      int x, int y, int count, unsigned short *chars);
-static void RootlessImageText8(DrawablePtr dst, GCPtr pGC,
-                               int x, int y, int count, char *chars);
-static void RootlessImageText16(DrawablePtr dst, GCPtr pGC,
-                                int x, int y, int count, unsigned short *chars);
-static void RootlessImageGlyphBlt(DrawablePtr dst, GCPtr pGC,
-                                  int x, int y, unsigned int nglyphInit,
+static void RootlessPolyArc(DrawablePtr dst, GCPtr pGC, int narcs,
+                            xArc * parcs);
+static void RootlessFillPolygon(DrawablePtr dst, GCPtr pGC, int shape, int mode,
+                                int count, DDXPointPtr pptInit);
+static void RootlessPolyFillRect(DrawablePtr dst, GCPtr pGC, int nRectsInit,
+                                 xRectangle *pRectsInit);
+static void RootlessPolyFillArc(DrawablePtr dst, GCPtr pGC, int narcsInit,
+                                xArc * parcsInit);
+static int RootlessPolyText8(DrawablePtr dst, GCPtr pGC, int x, int y,
+                             int count, char *chars);
+static int RootlessPolyText16(DrawablePtr dst, GCPtr pGC, int x, int y,
+                              int count, unsigned short *chars);
+static void RootlessImageText8(DrawablePtr dst, GCPtr pGC, int x, int y,
+                               int count, char *chars);
+static void RootlessImageText16(DrawablePtr dst, GCPtr pGC, int x, int y,
+                                int count, unsigned short *chars);
+static void RootlessImageGlyphBlt(DrawablePtr dst, GCPtr pGC, int x, int y,
+                                  unsigned int nglyphInit,
                                   CharInfoPtr *ppciInit, pointer unused);
-static void RootlessPolyGlyphBlt(DrawablePtr dst, GCPtr pGC,
-                                 int x, int y, unsigned int nglyph,
-                                 CharInfoPtr *ppci, pointer pglyphBase);
+static void RootlessPolyGlyphBlt(DrawablePtr dst, GCPtr pGC, int x, int y,
+                                 unsigned int nglyph, CharInfoPtr * ppci,
+                                 pointer pglyphBase);
 static void RootlessPushPixels(GCPtr pGC, PixmapPtr pBitMap, DrawablePtr dst,
 			       int dx, int dy, int xOrg, int yOrg);
 
-
 static GCOps rootlessGCOps = {
     RootlessFillSpans,
     RootlessSetSpans,
@@ -269,7 +265,6 @@ canAccelFill(DrawablePtr pDraw, GCPtr pGC)
     return canAccelBlit(pDraw, pGC);
 }
 
-
 /*
  * Screen function to create a graphics context
  */
@@ -294,7 +289,6 @@ RootlessCreateGC(GCPtr pGC)
     return result;
 }
 
-
 /*
  * GC funcs
  *
@@ -321,7 +315,6 @@ RootlessCreateGC(GCPtr pGC)
         (pGC)->ops = &rootlessGCOps; \
 }
 
-
 static void
 RootlessValidateGC(GCPtr pGC, unsigned long changes, DrawablePtr pDrawable)
 {
@@ -329,8 +322,7 @@ RootlessValidateGC(GCPtr pGC, unsigned long changes, DrawablePtr pDrawable)
 
     gcrec->originalOps = NULL;
 
-    if (pDrawable->type == DRAWABLE_WINDOW)
-    {
+    if (pDrawable->type == DRAWABLE_WINDOW) {
 #ifdef ROOTLESS_PROTECT_ALPHA
         unsigned int depth = pDrawable->depth;
 
@@ -343,56 +335,62 @@ RootlessValidateGC(GCPtr pGC, unsigned long changes, DrawablePtr pDrawable)
 #else
         VALIDATE_GC(pGC, changes, pDrawable);
 #endif
-    } else {
+    }
+    else {
         pGC->funcs->ValidateGC(pGC, changes, pDrawable);
     }
 
     GCFUNC_WRAP(pGC);
 }
 
-static void RootlessChangeGC(GCPtr pGC, unsigned long mask)
+static void
+RootlessChangeGC(GCPtr pGC, unsigned long mask)
 {
     GCFUNC_UNWRAP(pGC);
     pGC->funcs->ChangeGC(pGC, mask);
     GCFUNC_WRAP(pGC);
 }
 
-static void RootlessCopyGC(GCPtr pGCSrc, unsigned long mask, GCPtr pGCDst)
+static void
+RootlessCopyGC(GCPtr pGCSrc, unsigned long mask, GCPtr pGCDst)
 {
     GCFUNC_UNWRAP(pGCDst);
     pGCDst->funcs->CopyGC(pGCSrc, mask, pGCDst);
     GCFUNC_WRAP(pGCDst);
 }
 
-static void RootlessDestroyGC(GCPtr pGC)
+static void
+RootlessDestroyGC(GCPtr pGC)
 {
     GCFUNC_UNWRAP(pGC);
     pGC->funcs->DestroyGC(pGC);
     GCFUNC_WRAP(pGC);
 }
 
-static void RootlessChangeClip(GCPtr pGC, int type, pointer pvalue, int nrects)
+static void
+RootlessChangeClip(GCPtr pGC, int type, pointer pvalue, int nrects)
 {
     GCFUNC_UNWRAP(pGC);
     pGC->funcs->ChangeClip(pGC, type, pvalue, nrects);
     GCFUNC_WRAP(pGC);
 }
 
-static void RootlessDestroyClip(GCPtr pGC)
+static void
+RootlessDestroyClip(GCPtr pGC)
 {
     GCFUNC_UNWRAP(pGC);
     pGC->funcs->DestroyClip(pGC);
     GCFUNC_WRAP(pGC);
 }
 
-static void RootlessCopyClip(GCPtr pgcDst, GCPtr pgcSrc)
+static void
+RootlessCopyClip(GCPtr pgcDst, GCPtr pgcSrc)
 {
     GCFUNC_UNWRAP(pgcDst);
     pgcDst->funcs->CopyClip(pgcDst, pgcSrc);
     GCFUNC_WRAP(pgcDst);
 }
 
-
 /*
  * GC ops
  *
@@ -424,7 +422,8 @@ RootlessFillSpans(DrawablePtr dst, GCPtr pGC, int nInit,
 
     if (nInit <= 0) {
         pGC->ops->FillSpans(dst, pGC, nInit, pptInit, pwidthInit, sorted);
-    } else {
+    }
+    else {
         DDXPointPtr ppt = pptInit;
         int *pwidth = pwidthInit;
         int i = nInit;
@@ -451,8 +450,7 @@ RootlessFillSpans(DrawablePtr dst, GCPtr pGC, int nInit,
 
         RootlessStartDrawing((WindowPtr) dst);
 
-        if (canAccelFill(dst, pGC))
-        {
+        if (canAccelFill(dst, pGC)) {
             GC_UNSET_PM(pGC, dst);
         }
 
@@ -470,16 +468,15 @@ RootlessFillSpans(DrawablePtr dst, GCPtr pGC, int nInit,
 
 static void
 RootlessSetSpans(DrawablePtr dst, GCPtr pGC, char *pSrc,
-                 DDXPointPtr pptInit, int *pwidthInit,
-                 int nspans, int sorted)
+                 DDXPointPtr pptInit, int *pwidthInit, int nspans, int sorted)
 {
     GCOP_UNWRAP(pGC);
     RL_DEBUG_MSG("set spans start ");
 
     if (nspans <= 0) {
-        pGC->ops->SetSpans(dst, pGC, pSrc, pptInit, pwidthInit,
-                           nspans, sorted);
-    } else {
+        pGC->ops->SetSpans(dst, pGC, pSrc, pptInit, pwidthInit, nspans, sorted);
+    }
+    else {
         DDXPointPtr ppt = pptInit;
         int *pwidth = pwidthInit;
         int i = nspans;
@@ -505,8 +502,7 @@ RootlessSetSpans(DrawablePtr dst, GCPtr pGC, char *pSrc,
         box.y2++;
 
         RootlessStartDrawing((WindowPtr) dst);
-        pGC->ops->SetSpans(dst, pGC, pSrc, pptInit, pwidthInit,
-                           nspans, sorted);
+        pGC->ops->SetSpans(dst, pGC, pSrc, pptInit, pwidthInit, nspans, sorted);
 
         TRIM_AND_TRANSLATE_BOX(box, dst, pGC);
         if (BOX_NOT_EMPTY(box))
@@ -545,8 +541,7 @@ RootlessPutImage(DrawablePtr dst, GCPtr pGC,
 /* changed area is *dest* rect */
 static RegionPtr
 RootlessCopyArea(DrawablePtr pSrc, DrawablePtr dst, GCPtr pGC,
-                 int srcx, int srcy, int w, int h,
-                 int dstx, int dsty)
+                 int srcx, int srcy, int w, int h, int dstx, int dsty)
 {
     RegionPtr result;
     BoxRec box;
@@ -561,8 +556,7 @@ RootlessCopyArea(DrawablePtr pSrc, DrawablePtr dst, GCPtr pGC,
            a simple copy operation, we can remove the alpha-protecting
            planemask (since source has opaque alpha as well) */
 
-        if (canAccelBlit(pSrc, pGC))
-        {
+        if (canAccelBlit(pSrc, pGC)) {
             GC_UNSET_PM(pGC, dst);
         }
 
@@ -587,10 +581,10 @@ RootlessCopyArea(DrawablePtr pSrc, DrawablePtr dst, GCPtr pGC,
 }
 
 /* changed area is *dest* rect */
-static RegionPtr RootlessCopyPlane(DrawablePtr pSrc, DrawablePtr dst,
+static RegionPtr
+RootlessCopyPlane(DrawablePtr pSrc, DrawablePtr dst,
                                    GCPtr pGC, int srcx, int srcy,
-                                   int w, int h, int dstx, int dsty,
-                                   unsigned long plane)
+                  int w, int h, int dstx, int dsty, unsigned long plane)
 {
     RegionPtr result;
     BoxRec box;
@@ -628,7 +622,8 @@ static RegionPtr RootlessCopyPlane(DrawablePtr pSrc, DrawablePtr dst,
 #define abs(a) ((a) > 0 ? (a) : -(a))
 
 /* changed area is box around all points */
-static void RootlessPolyPoint(DrawablePtr dst, GCPtr pGC,
+static void
+RootlessPolyPoint(DrawablePtr dst, GCPtr pGC,
                               int mode, int npt, DDXPointPtr pptInit)
 {
     GCOP_UNWRAP(pGC);
@@ -690,8 +685,7 @@ static void RootlessPolyPoint(DrawablePtr dst, GCPtr pGC,
         box.y2 = box.y1 = firsty = pptInit->y;
         while (--npt) {
             pptInit++;
-            if (abs(pptInit->x - firstx) > 20 ||
-                abs(pptInit->y - firsty) > 20) {
+            if (abs(pptInit->x - firstx) > 20 || abs(pptInit->y - firsty) > 20) {
                 box.x2++;
                 box.y2++;
                 TRIM_AND_TRANSLATE_BOX(box, dst, pGC);
@@ -699,11 +693,16 @@ static void RootlessPolyPoint(DrawablePtr dst, GCPtr pGC,
                     RootlessDamageBox ((WindowPtr) dst, &box);
                 box.x2 = box.x1 = firstx = pptInit->x;
                 box.y2 = box.y1 = firsty = pptInit->y;
-            } else {
-                if (box.x1 > pptInit->x) box.x1 = pptInit->x;
-                else if (box.x2 < pptInit->x) box.x2 = pptInit->x;
-                if (box.y1 > pptInit->y) box.y1 = pptInit->y;
-                else if (box.y2 < pptInit->y) box.y2 = pptInit->y;
+            }
+            else {
+                if (box.x1 > pptInit->x)
+                    box.x1 = pptInit->x;
+                else if (box.x2 < pptInit->x)
+                    box.x2 = pptInit->x;
+                if (box.y1 > pptInit->y)
+                    box.y1 = pptInit->y;
+                else if (box.y2 < pptInit->y)
+                    box.y2 = pptInit->y;
             }
         }
         box.x2++;
@@ -721,7 +720,8 @@ static void RootlessPolyPoint(DrawablePtr dst, GCPtr pGC,
 #undef ROOTLESS_CHANGED_AREA
 
 /* changed area is box around each line */
-static void RootlessPolylines(DrawablePtr dst, GCPtr pGC,
+static void
+RootlessPolylines(DrawablePtr dst, GCPtr pGC,
                               int mode, int npt, DDXPointPtr pptInit)
 {
     GCOP_UNWRAP(pGC);
@@ -761,7 +761,8 @@ static void RootlessPolylines(DrawablePtr dst, GCPtr pGC,
                 else if (box.y2 < y)
                     box.y2 = y;
             }
-        } else {
+        }
+        else {
             while (--npt) {
                 pptInit++;
                 if (box.x1 > pptInit->x)
@@ -795,8 +796,8 @@ static void RootlessPolylines(DrawablePtr dst, GCPtr pGC,
 }
 
 /* changed area is box around each line segment */
-static void RootlessPolySegment(DrawablePtr dst, GCPtr pGC,
-                                int nseg, xSegment *pSeg)
+static void
+RootlessPolySegment(DrawablePtr dst, GCPtr pGC, int nseg, xSegment * pSeg)
 {
     GCOP_UNWRAP(pGC);
     RL_DEBUG_MSG("poly segment start (win 0x%x)", dst);
@@ -814,7 +815,8 @@ static void RootlessPolySegment(DrawablePtr dst, GCPtr pGC,
         if (pSeg->x2 > pSeg->x1) {
             box.x1 = pSeg->x1;
             box.x2 = pSeg->x2;
-        } else {
+        }
+        else {
             box.x2 = pSeg->x1;
             box.x1 = pSeg->x2;
         }
@@ -822,7 +824,8 @@ static void RootlessPolySegment(DrawablePtr dst, GCPtr pGC,
         if (pSeg->y2 > pSeg->y1) {
             box.y1 = pSeg->y1;
             box.y2 = pSeg->y2;
-        } else {
+        }
+        else {
             box.y2 = pSeg->y1;
             box.y1 = pSeg->y2;
         }
@@ -830,18 +833,28 @@ static void RootlessPolySegment(DrawablePtr dst, GCPtr pGC,
         while (--nseg) {
             pSeg++;
             if (pSeg->x2 > pSeg->x1) {
-                if (pSeg->x1 < box.x1) box.x1 = pSeg->x1;
-                if (pSeg->x2 > box.x2) box.x2 = pSeg->x2;
-            } else {
-                if (pSeg->x2 < box.x1) box.x1 = pSeg->x2;
-                if (pSeg->x1 > box.x2) box.x2 = pSeg->x1;
+                if (pSeg->x1 < box.x1)
+                    box.x1 = pSeg->x1;
+                if (pSeg->x2 > box.x2)
+                    box.x2 = pSeg->x2;
+            }
+            else {
+                if (pSeg->x2 < box.x1)
+                    box.x1 = pSeg->x2;
+                if (pSeg->x1 > box.x2)
+                    box.x2 = pSeg->x1;
             }
             if (pSeg->y2 > pSeg->y1) {
-                if (pSeg->y1 < box.y1) box.y1 = pSeg->y1;
-                if (pSeg->y2 > box.y2) box.y2 = pSeg->y2;
-            } else {
-                if (pSeg->y2 < box.y1) box.y1 = pSeg->y2;
-                if (pSeg->y1 > box.y2) box.y2 = pSeg->y1;
+                if (pSeg->y1 < box.y1)
+                    box.y1 = pSeg->y1;
+                if (pSeg->y2 > box.y2)
+                    box.y2 = pSeg->y2;
+            }
+            else {
+                if (pSeg->y2 < box.y1)
+                    box.y1 = pSeg->y2;
+                if (pSeg->y1 > box.y2)
+                    box.y2 = pSeg->y1;
             }
         }
 
@@ -865,7 +878,8 @@ static void RootlessPolySegment(DrawablePtr dst, GCPtr pGC,
 }
 
 /* changed area is box around each line (not entire rects) */
-static void RootlessPolyRectangle(DrawablePtr dst, GCPtr pGC,
+static void
+RootlessPolyRectangle(DrawablePtr dst, GCPtr pGC,
                                   int nRects, xRectangle *pRects)
 {
     GCOP_UNWRAP(pGC);
@@ -879,7 +893,8 @@ static void RootlessPolyRectangle(DrawablePtr dst, GCPtr pGC,
         int offset1, offset2, offset3;
 
         offset2 = pGC->lineWidth;
-        if (!offset2) offset2 = 1;
+        if (!offset2)
+            offset2 = 1;
         offset1 = offset2 >> 1;
         offset3 = offset2 - offset1;
 
@@ -924,9 +939,9 @@ static void RootlessPolyRectangle(DrawablePtr dst, GCPtr pGC,
     RL_DEBUG_MSG("poly rectangle end\n");
 }
 
-
 /* changed area is box around each arc (assumes all arcs are 360 degrees) */
-static void RootlessPolyArc(DrawablePtr dst, GCPtr pGC, int narcs, xArc *parcs)
+static void
+RootlessPolyArc(DrawablePtr dst, GCPtr pGC, int narcs, xArc * parcs)
 {
     GCOP_UNWRAP(pGC);
     RL_DEBUG_MSG("poly arc start ");
@@ -976,11 +991,10 @@ static void RootlessPolyArc(DrawablePtr dst, GCPtr pGC, int narcs, xArc *parcs)
     RL_DEBUG_MSG("poly arc end\n");
 }
 
-
 /* changed area is box around each poly */
-static void RootlessFillPolygon(DrawablePtr dst, GCPtr pGC,
-                                int shape, int mode, int count,
-                                DDXPointPtr pptInit)
+static void
+RootlessFillPolygon(DrawablePtr dst, GCPtr pGC,
+                    int shape, int mode, int count, DDXPointPtr pptInit)
 {
     GC_SAVE(pGC);
     GCOP_UNWRAP(pGC);
@@ -989,7 +1003,8 @@ static void RootlessFillPolygon(DrawablePtr dst, GCPtr pGC,
 
     if (count <= 2) {
         pGC->ops->FillPolygon(dst, pGC, shape, mode, count, pptInit);
-    } else {
+    }
+    else {
         DDXPointPtr ppt = pptInit;
         int i = count;
         BoxRec box;
@@ -1014,7 +1029,8 @@ static void RootlessFillPolygon(DrawablePtr dst, GCPtr pGC,
                 else if (box.y2 < y)
                     box.y2 = y;
             }
-        } else {
+        }
+        else {
             while (--i) {
                 ppt++;
                 if (box.x1 > ppt->x)
@@ -1033,8 +1049,7 @@ static void RootlessFillPolygon(DrawablePtr dst, GCPtr pGC,
 
         RootlessStartDrawing((WindowPtr) dst);
 
-        if (canAccelFill(dst, pGC))
-        {
+        if (canAccelFill(dst, pGC)) {
             GC_UNSET_PM(pGC, dst);
         }
 
@@ -1051,7 +1066,8 @@ static void RootlessFillPolygon(DrawablePtr dst, GCPtr pGC,
 }
 
 /* changed area is the rects */
-static void RootlessPolyFillRect(DrawablePtr dst, GCPtr pGC,
+static void
+RootlessPolyFillRect(DrawablePtr dst, GCPtr pGC,
                                  int nRectsInit, xRectangle *pRectsInit)
 {
     GC_SAVE(pGC);
@@ -1061,7 +1077,8 @@ static void RootlessPolyFillRect(DrawablePtr dst, GCPtr pGC,
 
     if (nRectsInit <= 0) {
         pGC->ops->PolyFillRect(dst, pGC, nRectsInit, pRectsInit);
-    } else {
+    }
+    else {
         BoxRec box;
         xRectangle *pRects = pRectsInit;
         int nRects = nRectsInit;
@@ -1085,8 +1102,7 @@ static void RootlessPolyFillRect(DrawablePtr dst, GCPtr pGC,
 
         RootlessStartDrawing((WindowPtr) dst);
  
-        if (canAccelFill(dst, pGC))
-        {
+        if (canAccelFill(dst, pGC)) {
             GC_UNSET_PM(pGC, dst);
         }
 
@@ -1102,10 +1118,9 @@ static void RootlessPolyFillRect(DrawablePtr dst, GCPtr pGC,
     RL_DEBUG_MSG("fill rect end\n");
 }
 
-
 /* changed area is box around each arc (assuming arcs are all 360 degrees) */
-static void RootlessPolyFillArc(DrawablePtr dst, GCPtr pGC,
-                                int narcsInit, xArc *parcsInit)
+static void
+RootlessPolyFillArc(DrawablePtr dst, GCPtr pGC, int narcsInit, xArc * parcsInit)
 {
     GC_SAVE(pGC);
     GCOP_UNWRAP(pGC);
@@ -1137,8 +1152,7 @@ static void RootlessPolyFillArc(DrawablePtr dst, GCPtr pGC,
 
         RootlessStartDrawing((WindowPtr) dst);
 
-        if (canAccelFill(dst, pGC))
-        {
+        if (canAccelFill(dst, pGC)) {
             GC_UNSET_PM(pGC, dst);
         }
 
@@ -1147,7 +1161,8 @@ static void RootlessPolyFillArc(DrawablePtr dst, GCPtr pGC,
         TRIM_AND_TRANSLATE_BOX(box, dst, pGC);
         if (BOX_NOT_EMPTY(box))
             RootlessDamageBox ((WindowPtr) dst, &box);
-    } else {
+    }
+    else {
         pGC->ops->PolyFillArc(dst, pGC, narcsInit, parcsInit);
     }
 
@@ -1156,8 +1171,8 @@ static void RootlessPolyFillArc(DrawablePtr dst, GCPtr pGC,
     RL_DEBUG_MSG("fill arc end\n");
 }
 
-
-static void RootlessImageText8(DrawablePtr dst, GCPtr pGC,
+static void
+RootlessImageText8(DrawablePtr dst, GCPtr pGC,
                                int x, int y, int count, char *chars)
 {
     GC_SAVE(pGC);
@@ -1172,23 +1187,22 @@ static void RootlessImageText8(DrawablePtr dst, GCPtr pGC,
         bot = max(FONTMAXBOUNDS(pGC->font, descent), FONTDESCENT(pGC->font));
 
         Min = count * FONTMINBOUNDS(pGC->font, characterWidth);
-        if (Min > 0) Min = 0;
+        if (Min > 0)
+            Min = 0;
         Max = count * FONTMAXBOUNDS(pGC->font, characterWidth);
-        if (Max < 0) Max = 0;
+        if (Max < 0)
+            Max = 0;
 
         /* ugh */
-        box.x1 = dst->x + x + Min +
-        FONTMINBOUNDS(pGC->font, leftSideBearing);
-        box.x2 = dst->x + x + Max +
-        FONTMAXBOUNDS(pGC->font, rightSideBearing);
+        box.x1 = dst->x + x + Min + FONTMINBOUNDS(pGC->font, leftSideBearing);
+        box.x2 = dst->x + x + Max + FONTMAXBOUNDS(pGC->font, rightSideBearing);
 
         box.y1 = dst->y + y - top;
         box.y2 = dst->y + y + bot;
 
         RootlessStartDrawing((WindowPtr) dst);
 
-        if (canAccelFill(dst, pGC))
-        {
+        if (canAccelFill(dst, pGC)) {
             GC_UNSET_PM(pGC, dst);
         }
 
@@ -1197,7 +1211,8 @@ static void RootlessImageText8(DrawablePtr dst, GCPtr pGC,
         TRIM_BOX(box, pGC);
         if (BOX_NOT_EMPTY(box))
             RootlessDamageBox ((WindowPtr) dst, &box);
-    } else {
+    }
+    else {
         pGC->ops->ImageText8(dst, pGC, x, y, count, chars);
     }
 
@@ -1206,7 +1221,8 @@ static void RootlessImageText8(DrawablePtr dst, GCPtr pGC,
     RL_DEBUG_MSG("imagetext8 end\n");
 }
 
-static int RootlessPolyText8(DrawablePtr dst, GCPtr pGC,
+static int
+RootlessPolyText8(DrawablePtr dst, GCPtr pGC,
                              int x, int y, int count, char *chars)
 {
     int width; // the result, sorta
@@ -1227,8 +1243,10 @@ static int RootlessPolyText8(DrawablePtr dst, GCPtr pGC,
         box.x2 = dst->x + x + FONTMAXBOUNDS(pGC->font, rightSideBearing);
 
         if (count > 1) {
-            if (width > 0) box.x2 += width;
-            else box.x1 += width;
+            if (width > 0)
+                box.x2 += width;
+            else
+                box.x1 += width;
         }
 
         box.y1 = dst->y + y - FONTMAXBOUNDS(pGC->font, ascent);
@@ -1244,7 +1262,8 @@ static int RootlessPolyText8(DrawablePtr dst, GCPtr pGC,
     return width + x;
 }
 
-static void RootlessImageText16(DrawablePtr dst, GCPtr pGC,
+static void
+RootlessImageText16(DrawablePtr dst, GCPtr pGC,
                                 int x, int y, int count, unsigned short *chars)
 {
     GC_SAVE(pGC);
@@ -1259,23 +1278,22 @@ static void RootlessImageText16(DrawablePtr dst, GCPtr pGC,
         bot = max(FONTMAXBOUNDS(pGC->font, descent), FONTDESCENT(pGC->font));
 
         Min = count * FONTMINBOUNDS(pGC->font, characterWidth);
-        if (Min > 0) Min = 0;
+        if (Min > 0)
+            Min = 0;
         Max = count * FONTMAXBOUNDS(pGC->font, characterWidth);
-        if (Max < 0) Max = 0;
+        if (Max < 0)
+            Max = 0;
 
         /* ugh */
-        box.x1 = dst->x + x + Min +
-            FONTMINBOUNDS(pGC->font, leftSideBearing);
-        box.x2 = dst->x + x + Max +
-            FONTMAXBOUNDS(pGC->font, rightSideBearing);
+        box.x1 = dst->x + x + Min + FONTMINBOUNDS(pGC->font, leftSideBearing);
+        box.x2 = dst->x + x + Max + FONTMAXBOUNDS(pGC->font, rightSideBearing);
 
         box.y1 = dst->y + y - top;
         box.y2 = dst->y + y + bot;
 
         RootlessStartDrawing((WindowPtr) dst);
 
-        if (canAccelFill(dst, pGC))
-        {
+        if (canAccelFill(dst, pGC)) {
             GC_UNSET_PM(pGC, dst);
         }
 
@@ -1284,7 +1302,8 @@ static void RootlessImageText16(DrawablePtr dst, GCPtr pGC,
         TRIM_BOX(box, pGC);
         if (BOX_NOT_EMPTY(box))
             RootlessDamageBox ((WindowPtr) dst, &box);
-    } else {
+    }
+    else {
         pGC->ops->ImageText16(dst, pGC, x, y, count, chars);
     }
 
@@ -1293,7 +1312,8 @@ static void RootlessImageText16(DrawablePtr dst, GCPtr pGC,
     RL_DEBUG_MSG("imagetext16 end\n");
 }
 
-static int RootlessPolyText16(DrawablePtr dst, GCPtr pGC,
+static int
+RootlessPolyText16(DrawablePtr dst, GCPtr pGC,
                             int x, int y, int count, unsigned short *chars)
 {
     int width; // the result, sorta
@@ -1314,8 +1334,10 @@ static int RootlessPolyText16(DrawablePtr dst, GCPtr pGC,
         box.x2 = dst->x + x + FONTMAXBOUNDS(pGC->font, rightSideBearing);
 
         if (count > 1) {
-            if (width > 0) box.x2 += width;
-            else box.x1 += width;
+            if (width > 0)
+                box.x2 += width;
+            else
+                box.x1 += width;
         }
 
         box.y1 = dst->y + y - FONTMAXBOUNDS(pGC->font, ascent);
@@ -1331,7 +1353,8 @@ static int RootlessPolyText16(DrawablePtr dst, GCPtr pGC,
     return width + x;
 }
 
-static void RootlessImageGlyphBlt(DrawablePtr dst, GCPtr pGC,
+static void
+RootlessImageGlyphBlt(DrawablePtr dst, GCPtr pGC,
                                   int x, int y, unsigned int nglyphInit,
                                   CharInfoPtr *ppciInit, pointer unused)
 {
@@ -1349,10 +1372,12 @@ static void RootlessImageGlyphBlt(DrawablePtr dst, GCPtr pGC,
         bot = max(FONTMAXBOUNDS(pGC->font, descent), FONTDESCENT(pGC->font));
 
         box.x1 = ppci[0]->metrics.leftSideBearing;
-        if (box.x1 > 0) box.x1 = 0;
+        if (box.x1 > 0)
+            box.x1 = 0;
         box.x2 = ppci[nglyph - 1]->metrics.rightSideBearing -
             ppci[nglyph - 1]->metrics.characterWidth;
-        if (box.x2 < 0) box.x2 = 0;
+        if (box.x2 < 0)
+            box.x2 = 0;
 
         box.x2 += dst->x + x;
         box.x1 += dst->x + x;
@@ -1372,8 +1397,7 @@ static void RootlessImageGlyphBlt(DrawablePtr dst, GCPtr pGC,
 
         RootlessStartDrawing((WindowPtr) dst);
 
-        if (canAccelFill(dst, pGC))
-        {
+        if (canAccelFill(dst, pGC)) {
             GC_UNSET_PM(pGC, dst);
         }
 
@@ -1382,7 +1406,8 @@ static void RootlessImageGlyphBlt(DrawablePtr dst, GCPtr pGC,
         TRIM_BOX(box, pGC);
         if (BOX_NOT_EMPTY(box))
             RootlessDamageBox ((WindowPtr) dst, &box);
-    } else {
+    }
+    else {
         pGC->ops->ImageGlyphBlt(dst, pGC, x, y, nglyphInit, ppciInit, unused);
     }
 
@@ -1391,7 +1416,8 @@ static void RootlessImageGlyphBlt(DrawablePtr dst, GCPtr pGC,
     RL_DEBUG_MSG("imageglyph end\n");
 }
 
-static void RootlessPolyGlyphBlt(DrawablePtr dst, GCPtr pGC,
+static void
+RootlessPolyGlyphBlt(DrawablePtr dst, GCPtr pGC,
                                  int x, int y, unsigned int nglyph,
                                  CharInfoPtr *ppci, pointer pglyphBase)
 {
@@ -1416,8 +1442,10 @@ static void RootlessPolyGlyphBlt(DrawablePtr dst, GCPtr pGC,
                 ppci++;
             }
 
-            if (width > 0) box.x2 += width;
-            else box.x1 += width;
+            if (width > 0)
+                box.x2 += width;
+            else
+                box.x1 += width;
         }
 
         box.y1 = dst->y + y - FONTMAXBOUNDS(pGC->font, ascent);
@@ -1432,7 +1460,6 @@ static void RootlessPolyGlyphBlt(DrawablePtr dst, GCPtr pGC,
     RL_DEBUG_MSG("polyglyph end\n");
 }
 
-
 /* changed area is in dest */
 static void
 RootlessPushPixels(GCPtr pGC, PixmapPtr pBitMap, DrawablePtr dst,
