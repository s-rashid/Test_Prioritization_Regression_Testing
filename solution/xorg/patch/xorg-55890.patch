diff --git a/hw/xwin/winshadgdi.c b/hw/xwin/winshadgdi.c
index 6339010..3b7b8b5 100644
--- a/hw/xwin/winshadgdi.c
+++ b/hw/xwin/winshadgdi.c
@@ -33,25 +33,21 @@
 #endif
 #include "win.h"
 
-
 /*
  * Local function prototypes
  */
 
 #ifdef XWIN_MULTIWINDOW
-static wBOOL CALLBACK
-winRedrawAllProcShadowGDI (HWND hwnd, LPARAM lParam);
+static wBOOL CALLBACK winRedrawAllProcShadowGDI(HWND hwnd, LPARAM lParam);
 
-static wBOOL CALLBACK
-winRedrawDamagedWindowShadowGDI (HWND hwnd, LPARAM lParam);
+static wBOOL CALLBACK winRedrawDamagedWindowShadowGDI(HWND hwnd, LPARAM lParam);
 #endif
 
 static Bool
 winAllocateFBShadowGDI (ScreenPtr pScreen);
 
 static void
-winShadowUpdateGDI (ScreenPtr pScreen, 
-		    shadowBufPtr pBuf);
+ winShadowUpdateGDI(ScreenPtr pScreen, shadowBufPtr pBuf);
 
 static Bool
 winCloseScreenShadowGDI (int nIndex, ScreenPtr pScreen);
@@ -78,9 +74,7 @@ static Bool
 winInstallColormapShadowGDI (ColormapPtr pColormap);
 
 static Bool
-winStoreColorsShadowGDI (ColormapPtr pmap, 
-			 int ndef,
-			 xColorItem *pdefs);
+ winStoreColorsShadowGDI(ColormapPtr pmap, int ndef, xColorItem * pdefs);
 
 static Bool
 winCreateColormapShadowGDI (ColormapPtr pColormap);
@@ -88,7 +82,6 @@ winCreateColormapShadowGDI (ColormapPtr pColormap);
 static Bool
 winDestroyColormapShadowGDI (ColormapPtr pColormap);
 
-
 /*
  * Internal function to get the DIB format that is compatible with the screen
  */
@@ -99,14 +92,14 @@ winQueryScreenDIBFormat (ScreenPtr pScreen, BITMAPINFOHEADER *pbmih)
 {
   winScreenPriv(pScreen);
   HBITMAP		hbmp;
+
 #if CYGDEBUG
   LPDWORD		pdw = NULL;
 #endif
   
   /* Create a memory bitmap compatible with the screen */
   hbmp = CreateCompatibleBitmap (pScreenPriv->hdcScreen, 1, 1);
-  if (hbmp == NULL)
-    {
+    if (hbmp == NULL) {
       ErrorF ("winQueryScreenDIBFormat - CreateCompatibleBitmap failed\n");
       return FALSE;
     }
@@ -117,12 +110,7 @@ winQueryScreenDIBFormat (ScreenPtr pScreen, BITMAPINFOHEADER *pbmih)
 
   /* Get the biBitCount */
   if (!GetDIBits (pScreenPriv->hdcScreen,
-		  hbmp,
-		  0, 1,
-		  NULL,
-		  (BITMAPINFO*) pbmih,
-		  DIB_RGB_COLORS))
-    {
+                   hbmp, 0, 1, NULL, (BITMAPINFO *) pbmih, DIB_RGB_COLORS)) {
       ErrorF ("winQueryScreenDIBFormat - First call to GetDIBits failed\n");
       DeleteObject (hbmp);
       return FALSE;
@@ -138,12 +126,7 @@ winQueryScreenDIBFormat (ScreenPtr pScreen, BITMAPINFOHEADER *pbmih)
 
   /* Get optimal color table, or the optimal bitfields */
   if (!GetDIBits (pScreenPriv->hdcScreen,
-		  hbmp,
-		  0, 1,
-		  NULL,
-		  (BITMAPINFO*)pbmih,
-		  DIB_RGB_COLORS))
-    {
+                   hbmp, 0, 1, NULL, (BITMAPINFO *) pbmih, DIB_RGB_COLORS)) {
       ErrorF ("winQueryScreenDIBFormat - Second call to GetDIBits "
 	      "failed\n");
       DeleteObject (hbmp);
@@ -156,7 +139,6 @@ winQueryScreenDIBFormat (ScreenPtr pScreen, BITMAPINFOHEADER *pbmih)
   return TRUE;
 }
 
-
 /*
  * Internal function to determine the GDI bits per rgb and bit masks
  */
@@ -172,8 +154,7 @@ winQueryRGBBitsAndMasks (ScreenPtr pScreen)
   DWORD			dwRedBits, dwGreenBits, dwBlueBits;
 
   /* Color masks for 8 bpp are standardized */
-  if (GetDeviceCaps (pScreenPriv->hdcScreen, RASTERCAPS) & RC_PALETTE)
-    {
+    if (GetDeviceCaps(pScreenPriv->hdcScreen, RASTERCAPS) & RC_PALETTE) {
       /* 
        * RGB BPP for 8 bit palletes is always 8
        * and the color masks are always 0.
@@ -187,8 +168,7 @@ winQueryRGBBitsAndMasks (ScreenPtr pScreen)
 
   /* Color masks for 24 bpp are standardized */
   if (GetDeviceCaps (pScreenPriv->hdcScreen, PLANES)
-      * GetDeviceCaps (pScreenPriv->hdcScreen, BITSPIXEL) == 24)
-    {
+        * GetDeviceCaps(pScreenPriv->hdcScreen, BITSPIXEL) == 24) {
       ErrorF ("winQueryRGBBitsAndMasks - GetDeviceCaps (BITSPIXEL) "
 	      "returned 24 for the screen.  Using default 24bpp masks.\n");
 
@@ -206,15 +186,13 @@ winQueryRGBBitsAndMasks (ScreenPtr pScreen)
   /* Allocate a bitmap header and color table */
   pbmih = (BITMAPINFOHEADER*) malloc (sizeof (BITMAPINFOHEADER)
 				      + 256  * sizeof (RGBQUAD));
-  if (pbmih == NULL)
-    {
+    if (pbmih == NULL) {
       ErrorF ("winQueryRGBBitsAndMasks - malloc failed\n");
       return FALSE;
     }
 
   /* Get screen description */
-  if (winQueryScreenDIBFormat (pScreen, pbmih))
-    {
+    if (winQueryScreenDIBFormat(pScreen, pbmih)) {
       /* Get a pointer to bitfields */
       pdw = (DWORD*) ((CARD8*)pbmih + sizeof (BITMAPINFOHEADER));
       
@@ -222,19 +200,28 @@ winQueryRGBBitsAndMasks (ScreenPtr pScreen)
       winDebug ("%s - Masks: %08x %08x %08x\n", __FUNCTION__,
 	      pdw[0], pdw[1], pdw[2]);
       winDebug ("%s - Bitmap: %dx%d %d bpp %d planes\n", __FUNCTION__,
-              pbmih->biWidth, pbmih->biHeight, pbmih->biBitCount, pbmih->biPlanes);
+                 pbmih->biWidth, pbmih->biHeight, pbmih->biBitCount,
+                 pbmih->biPlanes);
       winDebug ("%s - Compression: %d %s\n", __FUNCTION__,
               pbmih->biCompression,
-              (pbmih->biCompression == BI_RGB?"(BI_RGB)":
-               (pbmih->biCompression == BI_RLE8?"(BI_RLE8)":
-                (pbmih->biCompression == BI_RLE4?"(BI_RLE4)":
-                 (pbmih->biCompression == BI_BITFIELDS?"(BI_BITFIELDS)":""
-                 )))));
+                 (pbmih->biCompression ==
+                  BI_RGB ? "(BI_RGB)" : (pbmih->biCompression ==
+                                         BI_RLE8 ? "(BI_RLE8)" : (pbmih->
+                                                                  biCompression
+                                                                  ==
+                                                                  BI_RLE4 ?
+                                                                  "(BI_RLE4)"
+                                                                  : (pbmih->
+                                                                     biCompression
+                                                                     ==
+                                                                     BI_BITFIELDS
+                                                                     ?
+                                                                     "(BI_BITFIELDS)"
+                                                                     : "")))));
 #endif
 
       /* Handle BI_RGB case, which is returned by Wine */
-      if (pbmih->biCompression == BI_RGB)
-        {
+        if (pbmih->biCompression == BI_RGB) {
 	  dwRedBits = 5;
 	  dwGreenBits = 5;
 	  dwBlueBits = 5;
@@ -246,8 +233,7 @@ winQueryRGBBitsAndMasks (ScreenPtr pScreen)
 	  pScreenPriv->dwGreenMask = 0x03e0;
 	  pScreenPriv->dwBlueMask = 0x001f;
         }
-      else 
-        {
+        else {
           /* Count the number of bits in each mask */
           dwRedBits = winCountBits (pdw[0]);
           dwGreenBits = winCountBits (pdw[1]);
@@ -267,8 +253,7 @@ winQueryRGBBitsAndMasks (ScreenPtr pScreen)
 	  pScreenPriv->dwBlueMask = pdw[2];
 	}
     }
-  else
-    {
+    else {
       ErrorF ("winQueryRGBBitsAndMasks - winQueryScreenDIBFormat failed\n");
       fReturn = FALSE;
     }
@@ -279,7 +264,6 @@ winQueryRGBBitsAndMasks (ScreenPtr pScreen)
   return fReturn;
 }
 
-
 #ifdef XWIN_MULTIWINDOW
 /*
  * Redraw all ---?
@@ -306,8 +290,10 @@ winRedrawDamagedWindowShadowGDI (HWND hwnd, LPARAM lParam)
     return TRUE; /* Don't care minimized windows */
   
   /* Convert the damaged area from Screen coords to Client coords */
-  topLeft.x = pDamage->x1; topLeft.y = pDamage->y1;
-  bottomRight.x = pDamage->x2; bottomRight.y = pDamage->y2;
+    topLeft.x = pDamage->x1;
+    topLeft.y = pDamage->y1;
+    bottomRight.x = pDamage->x2;
+    bottomRight.y = pDamage->y2;
   topLeft.x += GetSystemMetrics (SM_XVIRTUALSCREEN);
   bottomRight.x += GetSystemMetrics (SM_XVIRTUALSCREEN);
   topLeft.y += GetSystemMetrics (SM_YVIRTUALSCREEN);
@@ -318,8 +304,7 @@ winRedrawDamagedWindowShadowGDI (HWND hwnd, LPARAM lParam)
 
   GetClientRect (hwnd, &rcClient);
 
-  if (IntersectRect (&rcRedraw, &rcClient, &rcDamage))
-    {
+    if (IntersectRect(&rcRedraw, &rcClient, &rcDamage)) {
       InvalidateRect (hwnd, &rcRedraw, FALSE);
       UpdateWindow (hwnd);
     }
@@ -327,7 +312,6 @@ winRedrawDamagedWindowShadowGDI (HWND hwnd, LPARAM lParam)
 }
 #endif
 
-
 /*
  * Allocate a DIB for the shadow framebuffer GDI server
  */
@@ -346,44 +330,38 @@ winAllocateFBShadowGDI (ScreenPtr pScreen)
 
   ErrorF ("winAllocateFBShadowGDI - Creating DIB with width: %d height: %d "
 	  "depth: %d\n",
-	  (int) pScreenPriv->pbmih->biWidth, (int) -pScreenPriv->pbmih->biHeight, pScreenPriv->pbmih->biBitCount);
+           (int) pScreenPriv->pbmih->biWidth,
+           (int) -pScreenPriv->pbmih->biHeight, pScreenPriv->pbmih->biBitCount);
 
   /* Create a DI shadow bitmap with a bit pointer */
   pScreenPriv->hbmpShadow = CreateDIBSection (pScreenPriv->hdcScreen,
-					      (BITMAPINFO *) pScreenPriv->pbmih,
-					      DIB_RGB_COLORS,
+                                               (BITMAPINFO *) pScreenPriv->
+                                               pbmih, DIB_RGB_COLORS,
 					      (VOID**) &pScreenInfo->pfb,
-					      NULL,
-					      0);
-  if (pScreenPriv->hbmpShadow == NULL || pScreenInfo->pfb == NULL)
-    {
+                                               NULL, 0);
+    if (pScreenPriv->hbmpShadow == NULL || pScreenInfo->pfb == NULL) {
       winW32Error (2, "winAllocateFBShadowGDI - CreateDIBSection failed:");
       return FALSE;
     }
-  else
-    {
+    else {
 #if CYGDEBUG
       winDebug ("winAllocateFBShadowGDI - Shadow buffer allocated\n");
 #endif
     }
 
   /* Get information about the bitmap that was allocated */
-  GetObject (pScreenPriv->hbmpShadow,
-	     sizeof (dibsection),
-	     &dibsection);
+    GetObject(pScreenPriv->hbmpShadow, sizeof(dibsection), &dibsection);
 
 #if CYGDEBUG || YES
   /* Print information about bitmap allocated */
   winDebug ("winAllocateFBShadowGDI - Dibsection width: %d height: %d "
 	  "depth: %d size image: %d\n",
 	  (int) dibsection.dsBmih.biWidth, (int) dibsection.dsBmih.biHeight,
-	  dibsection.dsBmih.biBitCount,
-	  (int) dibsection.dsBmih.biSizeImage);
+             dibsection.dsBmih.biBitCount, (int) dibsection.dsBmih.biSizeImage);
 #endif
 
   /* Select the shadow bitmap into the shadow DC */
-  SelectObject (pScreenPriv->hdcShadow,
-		pScreenPriv->hbmpShadow);
+    SelectObject(pScreenPriv->hdcShadow, pScreenPriv->hbmpShadow);
 
 #if CYGDEBUG
   winDebug ("winAllocateFBShadowGDI - Attempting a shadow blit\n");
@@ -393,17 +371,13 @@ winAllocateFBShadowGDI (ScreenPtr pScreen)
   fReturn = BitBlt (pScreenPriv->hdcScreen,
 		    0, 0,
 		    pScreenInfo->dwWidth, pScreenInfo->dwHeight,
-		    pScreenPriv->hdcShadow,
-		    0, 0,
-		    SRCCOPY);
-  if (fReturn)
-    {
+                     pScreenPriv->hdcShadow, 0, 0, SRCCOPY);
+    if (fReturn) {
 #if CYGDEBUG
       winDebug ("winAllocateFBShadowGDI - Shadow blit success\n");
 #endif
     }
-  else
-    {
+    else {
       winW32Error (2, "winAllocateFBShadowGDI - Shadow blit failure\n");
 #if 0      
       return FALSE;
@@ -416,8 +390,7 @@ winAllocateFBShadowGDI (ScreenPtr pScreen)
     }
 
   /* Look for height weirdness */
-  if (dibsection.dsBmih.biHeight < 0)
-    {
+    if (dibsection.dsBmih.biHeight < 0) {
       dibsection.dsBmih.biHeight = -dibsection.dsBmih.biHeight;
     }
 
@@ -458,8 +431,7 @@ winFreeFBShadowGDI (ScreenPtr pScreen)
  */
 
 static void
-winShadowUpdateGDI (ScreenPtr pScreen, 
-		    shadowBufPtr pBuf)
+winShadowUpdateGDI(ScreenPtr pScreen, shadowBufPtr pBuf)
 {
   winScreenPriv(pScreen);
   winScreenInfo		*pScreenInfo = pScreenPriv->pScreenInfo;
@@ -468,6 +440,7 @@ winShadowUpdateGDI (ScreenPtr pScreen,
   BoxPtr		pBox = RegionRects (damage);
   int			x, y, w, h;
   HRGN			hrgnTemp = NULL, hrgnCombined = NULL;
+
 #ifdef XWIN_UPDATESTATS
   static DWORD		s_dwNonUnitRegions = 0;
   static DWORD		s_dwTotalUpdates = 0;
@@ -480,14 +453,14 @@ winShadowUpdateGDI (ScreenPtr pScreen,
    * and we are fullscreen, or if we have a bad display depth
    */
   if ((!pScreenPriv->fActive && pScreenInfo->fFullScreen)
-      || pScreenPriv->fBadDepth) return;
+        || pScreenPriv->fBadDepth)
+        return;
 
 #ifdef XWIN_UPDATESTATS
   ++s_dwTotalUpdates;
   s_dwTotalBoxes += dwBox;
 
-  if (dwBox != 1)
-    {
+    if (dwBox != 1) {
       ++s_dwNonUnitRegions;
       ErrorF ("winShadowUpdatGDI - dwBox: %d\n", dwBox);
     }
@@ -507,11 +480,9 @@ winShadowUpdateGDI (ScreenPtr pScreen,
    */
   if (!pScreenInfo->fMultiWindow &&
       (pScreenInfo->dwClipUpdatesNBoxes == 0 ||
-      dwBox < pScreenInfo->dwClipUpdatesNBoxes))
-    {
+         dwBox < pScreenInfo->dwClipUpdatesNBoxes)) {
       /* Loop through all boxes in the damaged region */
-      while (dwBox--)
-	{
+        while (dwBox--) {
 	  /*
 	   * Calculate x offset, y offset, width, and height for
 	   * current damage box
@@ -522,24 +493,18 @@ winShadowUpdateGDI (ScreenPtr pScreen,
 	  h = pBox->y2 - pBox->y1;
 	  
 	  BitBlt (pScreenPriv->hdcScreen,
-		  x, y,
-		  w, h,
-		  pScreenPriv->hdcShadow,
-		  x, y,
-		  SRCCOPY);
+                   x, y, w, h, pScreenPriv->hdcShadow, x, y, SRCCOPY);
 	  
 	  /* Get a pointer to the next box */
 	  ++pBox;
 	}
     }
-  else if (!pScreenInfo->fMultiWindow)
-    {
+    else if (!pScreenInfo->fMultiWindow) {
       /* Compute a GDI region from the damaged region */
       hrgnCombined = CreateRectRgn (pBox->x1, pBox->y1, pBox->x2, pBox->y2);
       dwBox--;
       pBox++;
-      while (dwBox--)
-	{
+        while (dwBox--) {
 	  hrgnTemp = CreateRectRgn (pBox->x1, pBox->y1, pBox->x2, pBox->y2);
 	  CombineRgn (hrgnCombined, hrgnCombined, hrgnTemp, RGN_OR);
 	  DeleteObject (hrgnTemp);
@@ -560,8 +525,7 @@ winShadowUpdateGDI (ScreenPtr pScreen,
 	      pBoxExtents->x2 - pBoxExtents->x1,
 	      pBoxExtents->y2 - pBoxExtents->y1,
 	      pScreenPriv->hdcShadow,
-	      pBoxExtents->x1, pBoxExtents->y1,
-	      SRCCOPY);
+               pBoxExtents->x1, pBoxExtents->y1, SRCCOPY);
 
       /* Reset the clip region */
       SelectClipRgn (pScreenPriv->hdcScreen, NULL);
@@ -576,7 +540,6 @@ winShadowUpdateGDI (ScreenPtr pScreen,
 #endif
 }
 
-
 static Bool
 winInitScreenShadowGDI (ScreenPtr pScreen)
 {
@@ -589,22 +552,19 @@ winInitScreenShadowGDI (ScreenPtr pScreen)
   /* Allocate bitmap info header */
   pScreenPriv->pbmih = (BITMAPINFOHEADER*) malloc (sizeof (BITMAPINFOHEADER)
                                                    + 256 * sizeof (RGBQUAD));
-  if (pScreenPriv->pbmih == NULL)
-    {
+    if (pScreenPriv->pbmih == NULL) {
       ErrorF ("winInitScreenShadowGDI - malloc () failed\n");
       return FALSE;
     }
 
   /* Query the screen format */
-  if (!winQueryScreenDIBFormat (pScreen, pScreenPriv->pbmih))
-    {
+    if (!winQueryScreenDIBFormat(pScreen, pScreenPriv->pbmih)) {
       ErrorF ("winInitScreenShadowGDI - winQueryScreenDIBFormat failed\n");
       return FALSE;
     }
 
   /* Determine our color masks */
-  if (!winQueryRGBBitsAndMasks (pScreen))
-    {
+    if (!winQueryRGBBitsAndMasks(pScreen)) {
       ErrorF ("winInitScreenShadowGDI - winQueryRGBBitsAndMasks failed\n");
       return FALSE;
     }
@@ -654,15 +614,13 @@ winCloseScreenShadowGDI (int nIndex, ScreenPtr pScreen)
     winDeleteNotifyIcon (pScreenPriv);
 
   /* Free the exit confirmation dialog box, if it exists */
-  if (g_hDlgExit != NULL)
-    {
+    if (g_hDlgExit != NULL) {
       DestroyWindow (g_hDlgExit);
       g_hDlgExit = NULL;
     }
 
   /* Kill our window */
-  if (pScreenPriv->hwndScreen)
-    {
+    if (pScreenPriv->hwndScreen) {
       DestroyWindow (pScreenPriv->hwndScreen);
       pScreenPriv->hwndScreen = NULL;
     }
@@ -681,7 +639,6 @@ winCloseScreenShadowGDI (int nIndex, ScreenPtr pScreen)
   return fReturn;
 }
 
-
 /*
  * Tell mi what sort of visuals we need.
  * 
@@ -703,12 +660,10 @@ winInitVisualsShadowGDI (ScreenPtr pScreen)
 	  (unsigned int) pScreenPriv->dwGreenMask,
 	  (unsigned int) pScreenPriv->dwBlueMask,
 	  (int) pScreenPriv->dwBitsPerRGB,
-	  (int) pScreenInfo->dwDepth,
-	  (int) pScreenInfo->dwBPP);
+           (int) pScreenInfo->dwDepth, (int) pScreenInfo->dwBPP);
 
   /* Create a single visual according to the Windows screen depth */
-  switch (pScreenInfo->dwDepth)
-    {
+    switch (pScreenInfo->dwDepth) {
     case 24:
     case 16:
     case 15:
@@ -719,8 +674,7 @@ winInitVisualsShadowGDI (ScreenPtr pScreen)
 				     -1,
 				     pScreenPriv->dwRedMask,
 				     pScreenPriv->dwGreenMask,
-				     pScreenPriv->dwBlueMask))
-	{
+                                      pScreenPriv->dwBlueMask)) {
 	  ErrorF ("winInitVisualsShadowGDI - miSetVisualTypesAndMasks "
 		  "failed\n");
 	  return FALSE;
@@ -731,14 +685,7 @@ winInitVisualsShadowGDI (ScreenPtr pScreen)
 	break;
 
       /* Setup a pseudocolor visual */
-      if (!miSetVisualTypesAndMasks (8,
-				     PseudoColorMask,
-				     8,
-				     -1,
-				     0,
-				     0,
-				     0))
-	{
+        if (!miSetVisualTypesAndMasks(8, PseudoColorMask, 8, -1, 0, 0, 0)) {
 	  ErrorF ("winInitVisualsShadowGDI - miSetVisualTypesAndMasks "
 		  "failed for PseudoColor\n");
 	  return FALSE;
@@ -753,8 +700,7 @@ winInitVisualsShadowGDI (ScreenPtr pScreen)
 				     PseudoColor,
 				     pScreenPriv->dwRedMask,
 				     pScreenPriv->dwGreenMask,
-				     pScreenPriv->dwBlueMask))
-	{
+                                      pScreenPriv->dwBlueMask)) {
 	  ErrorF ("winInitVisualsShadowGDI - miSetVisualTypesAndMasks "
 		  "failed\n");
 	  return FALSE;
@@ -773,7 +719,6 @@ winInitVisualsShadowGDI (ScreenPtr pScreen)
   return TRUE;
 }
 
-
 /*
  * Adjust the proposed video mode
  */
@@ -789,8 +734,7 @@ winAdjustVideoModeShadowGDI (ScreenPtr pScreen)
   hdc = GetDC (NULL);
 
   /* We're in serious trouble if we can't get a DC */
-  if (hdc == NULL)
-    {
+    if (hdc == NULL) {
       ErrorF ("winAdjustVideoModeShadowGDI - GetDC () failed\n");
       return FALSE;
     }
@@ -808,7 +752,6 @@ winAdjustVideoModeShadowGDI (ScreenPtr pScreen)
   return TRUE;
 }
 
-
 /*
  * Blt exposed regions to the screen
  */
@@ -826,8 +769,7 @@ winBltExposedRegionsShadowGDI (ScreenPtr pScreen)
   hdcUpdate = BeginPaint (pScreenPriv->hwndScreen, &ps);
 
   /* Realize the palette, if we have one */
-  if (pScreenPriv->pcmapInstalled != NULL)
-    {
+    if (pScreenPriv->pcmapInstalled != NULL) {
       pCmapPriv = winGetCmapPriv (pScreenPriv->pcmapInstalled);
       
       SelectPalette (hdcUpdate, pCmapPriv->hPalette, FALSE);
@@ -838,9 +780,7 @@ winBltExposedRegionsShadowGDI (ScreenPtr pScreen)
   BitBlt (hdcUpdate,
 	  0, 0,
 	  pScreenInfo->dwWidth, pScreenInfo->dwHeight,
-	  pScreenPriv->hdcShadow,
-	  0, 0,
-	  SRCCOPY);
+           pScreenPriv->hdcShadow, 0, 0, SRCCOPY);
 
   /* EndPaint frees the DC */
   EndPaint (pScreenPriv->hwndScreen, &ps);
@@ -855,7 +795,6 @@ winBltExposedRegionsShadowGDI (ScreenPtr pScreen)
   return TRUE;
 }
 
-
 /*
  * Do any engine-specific appliation-activation processing
  */
@@ -881,18 +820,14 @@ winActivateAppShadowGDI (ScreenPtr pScreen)
    * Are we active?
    * Are we fullscreen?
    */
-  if (pScreenPriv->fActive
-      && pScreenInfo->fFullScreen)
-    {
+    if (pScreenPriv->fActive && pScreenInfo->fFullScreen) {
       /*
        * Activating, attempt to bring our window 
        * to the top of the display
        */
       ShowWindow (pScreenPriv->hwndScreen, SW_RESTORE);
     }
-  else if (!pScreenPriv->fActive
-	   && pScreenInfo->fFullScreen)
-    {
+    else if (!pScreenPriv->fActive && pScreenInfo->fFullScreen) {
       /*
        * Deactivating, stuff our window onto the
        * task bar.
@@ -903,7 +838,6 @@ winActivateAppShadowGDI (ScreenPtr pScreen)
   return TRUE;
 }
 
-
 /*
  * Reblit the shadow framebuffer to the screen.
  */
@@ -918,9 +852,7 @@ winRedrawScreenShadowGDI (ScreenPtr pScreen)
   BitBlt (pScreenPriv->hdcScreen,
 	  0, 0,
 	  pScreenInfo->dwWidth, pScreenInfo->dwHeight,
-	  pScreenPriv->hdcShadow,
-	  0, 0,
-	  SRCCOPY);
+           pScreenPriv->hdcShadow, 0, 0, SRCCOPY);
 
 #ifdef XWIN_MULTIWINDOW
   /* Redraw all windows */
@@ -931,8 +863,6 @@ winRedrawScreenShadowGDI (ScreenPtr pScreen)
   return TRUE;
 }
 
-
-
 /*
  * Realize the currently installed colormap
  */
@@ -948,8 +878,7 @@ winRealizeInstalledPaletteShadowGDI (ScreenPtr pScreen)
 #endif
 
   /* Don't do anything if there is not a colormap */
-  if (pScreenPriv->pcmapInstalled == NULL)
-    {
+    if (pScreenPriv->pcmapInstalled == NULL) {
 #if CYGDEBUG
       winDebug ("winRealizeInstalledPaletteShadowGDI - No colormap "
 	      "installed\n");
@@ -960,8 +889,7 @@ winRealizeInstalledPaletteShadowGDI (ScreenPtr pScreen)
   pCmapPriv = winGetCmapPriv (pScreenPriv->pcmapInstalled);
   
   /* Realize our palette for the screen */
-  if (RealizePalette (pScreenPriv->hdcScreen) == GDI_ERROR)
-    {
+    if (RealizePalette(pScreenPriv->hdcScreen) == GDI_ERROR) {
       ErrorF ("winRealizeInstalledPaletteShadowGDI - RealizePalette () "
 	      "failed\n");
       return FALSE;
@@ -970,9 +898,7 @@ winRealizeInstalledPaletteShadowGDI (ScreenPtr pScreen)
   /* Set the DIB color table */
   if (SetDIBColorTable (pScreenPriv->hdcShadow,
 			0,
-			WIN_NUM_PALETTE_ENTRIES,
-			pCmapPriv->rgbColors) == 0)
-    {
+                         WIN_NUM_PALETTE_ENTRIES, pCmapPriv->rgbColors) == 0) {
       ErrorF ("winRealizeInstalledPaletteShadowGDI - SetDIBColorTable () "
 	      "failed\n");
       return FALSE;
@@ -981,7 +907,6 @@ winRealizeInstalledPaletteShadowGDI (ScreenPtr pScreen)
   return TRUE;
 }
 
-
 /*
  * Install the specified colormap
  */
@@ -990,24 +915,23 @@ static Bool
 winInstallColormapShadowGDI (ColormapPtr pColormap)
 {
   ScreenPtr		pScreen = pColormap->pScreen;
+
   winScreenPriv(pScreen);
   winScreenInfo		*pScreenInfo = pScreenPriv->pScreenInfo;
+
   winCmapPriv(pColormap);
 
   /*
    * Tell Windows to install the new colormap
    */
   if (SelectPalette (pScreenPriv->hdcScreen,
-		     pCmapPriv->hPalette,
-		     FALSE) == NULL)
-    {
+                      pCmapPriv->hPalette, FALSE) == NULL) {
       ErrorF ("winInstallColormapShadowGDI - SelectPalette () failed\n");
       return FALSE;
     }
       
   /* Realize the palette */
-  if (GDI_ERROR == RealizePalette (pScreenPriv->hdcScreen))
-    {
+    if (GDI_ERROR == RealizePalette(pScreenPriv->hdcScreen)) {
       ErrorF ("winInstallColormapShadowGDI - RealizePalette () failed\n");
       return FALSE;
     }
@@ -1015,9 +939,7 @@ winInstallColormapShadowGDI (ColormapPtr pColormap)
   /* Set the DIB color table */
   if (SetDIBColorTable (pScreenPriv->hdcShadow,
 			0,
-			WIN_NUM_PALETTE_ENTRIES,
-			pCmapPriv->rgbColors) == 0)
-    {
+                         WIN_NUM_PALETTE_ENTRIES, pCmapPriv->rgbColors) == 0) {
       ErrorF ("winInstallColormapShadowGDI - SetDIBColorTable () failed\n");
       return FALSE;
     }
@@ -1026,9 +948,7 @@ winInstallColormapShadowGDI (ColormapPtr pColormap)
   BitBlt (pScreenPriv->hdcScreen,
 	  0, 0,
 	  pScreenInfo->dwWidth, pScreenInfo->dwHeight,
-	  pScreenPriv->hdcShadow,
-	  0, 0,
-	  SRCCOPY);
+           pScreenPriv->hdcShadow, 0, 0, SRCCOPY);
 
   /* Save a pointer to the newly installed colormap */
   pScreenPriv->pcmapInstalled = pColormap;
@@ -1042,17 +962,15 @@ winInstallColormapShadowGDI (ColormapPtr pColormap)
   return TRUE;
 }
 
-
 /*
  * Store the specified colors in the specified colormap
  */
 
 static Bool
-winStoreColorsShadowGDI (ColormapPtr pColormap,
-			 int ndef,
-			 xColorItem *pdefs)
+winStoreColorsShadowGDI(ColormapPtr pColormap, int ndef, xColorItem * pdefs)
 {
   ScreenPtr		pScreen = pColormap->pScreen;
+
   winScreenPriv(pScreen);
   winCmapPriv(pColormap);
   ColormapPtr curpmap = pScreenPriv->pcmapInstalled;
@@ -1060,22 +978,18 @@ winStoreColorsShadowGDI (ColormapPtr pColormap,
   /* Put the X colormap entries into the Windows logical palette */
   if (SetPaletteEntries (pCmapPriv->hPalette,
 			 pdefs[0].pixel,
-			 ndef,
-			 pCmapPriv->peColors + pdefs[0].pixel) == 0)
-    {
+                          ndef, pCmapPriv->peColors + pdefs[0].pixel) == 0) {
       ErrorF ("winStoreColorsShadowGDI - SetPaletteEntries () failed\n");
       return FALSE;
     }
 
   /* Don't install the Windows palette if the colormap is not installed */
-  if (pColormap != curpmap)
-    {
+    if (pColormap != curpmap) {
       return TRUE;
     }
 
   /* Try to install the newly modified colormap */
-  if (!winInstallColormapShadowGDI (pColormap))
-    {
+    if (!winInstallColormapShadowGDI(pColormap)) {
       ErrorF ("winInstallColormapShadowGDI - winInstallColormapShadowGDI "
 	      "failed\n");
       return FALSE;
@@ -1088,9 +1002,7 @@ winStoreColorsShadowGDI (ColormapPtr pColormap,
   /* Set the DIB color table */
   if (SetDIBColorTable (pScreenPriv->hdcShadow,
 			pdefs[0].pixel,
-			ndef,
-			pCmapPriv->rgbColors + pdefs[0].pixel) == 0)
-    {
+                         ndef, pCmapPriv->rgbColors + pdefs[0].pixel) == 0) {
       ErrorF ("winInstallColormapShadowGDI - SetDIBColorTable () failed\n");
       return FALSE;
     }
@@ -1102,7 +1014,6 @@ winStoreColorsShadowGDI (ColormapPtr pColormap,
   return TRUE;
 }
 
-
 /*
  * Colormap initialization procedure
  */
@@ -1114,6 +1025,7 @@ winCreateColormapShadowGDI (ColormapPtr pColormap)
   DWORD			dwEntriesMax;
   VisualPtr		pVisual;
   HPALETTE		hpalNew = NULL;
+
   winCmapPriv(pColormap);
 
   /* Get a pointer to the visual that the colormap belongs to */
@@ -1125,11 +1037,9 @@ winCreateColormapShadowGDI (ColormapPtr pColormap)
   /* Allocate a Windows logical color palette with max entries */
   lpPaletteNew = malloc (sizeof (LOGPALETTE)
 			 + (dwEntriesMax - 1) * sizeof (PALETTEENTRY));
-  if (lpPaletteNew == NULL)
-    {
+    if (lpPaletteNew == NULL) {
       ErrorF ("winCreateColormapShadowGDI - Couldn't allocate palette "
-	      "with %d entries\n",
-	      (int) dwEntriesMax);
+               "with %d entries\n", (int) dwEntriesMax);
       return FALSE;
     }
 
@@ -1143,8 +1053,7 @@ winCreateColormapShadowGDI (ColormapPtr pColormap)
 
   /* Tell Windows to create the palette */
   hpalNew = CreatePalette (lpPaletteNew);
-  if (hpalNew == NULL)
-    {
+    if (hpalNew == NULL) {
       ErrorF ("winCreateColormapShadowGDI - CreatePalette () failed\n");
       free (lpPaletteNew);
       return FALSE;
@@ -1159,7 +1068,6 @@ winCreateColormapShadowGDI (ColormapPtr pColormap)
   return TRUE;
 }
 
-
 /*
  * Colormap destruction procedure
  */
@@ -1178,8 +1086,7 @@ winDestroyColormapShadowGDI (ColormapPtr pColormap)
    * will not have had winUninstallColormap called on it.  Thus,
    * we need to handle the default colormap in a special way.
    */
-  if (pColormap->flags & IsDefault)
-    {
+    if (pColormap->flags & IsDefault) {
 #if CYGDEBUG
       winDebug ("winDestroyColormapShadowGDI - Destroying default "
 	      "colormap\n");
@@ -1192,16 +1099,14 @@ winDestroyColormapShadowGDI (ColormapPtr pColormap)
       
       /* Pop the palette out of the device context */
       SelectPalette (pScreenPriv->hdcScreen,
-		     GetStockObject (DEFAULT_PALETTE),
-		     FALSE);
+                      GetStockObject(DEFAULT_PALETTE), FALSE);
 
       /* Clear our private installed colormap pointer */
       pScreenPriv->pcmapInstalled = NULL;
     }
   
   /* Try to delete the logical palette */
-  if (DeleteObject (pCmapPriv->hPalette) == 0)
-    {
+    if (DeleteObject(pCmapPriv->hPalette) == 0) {
       ErrorF ("winDestroyColormap - DeleteObject () failed\n");
       return FALSE;
     }
@@ -1212,7 +1117,6 @@ winDestroyColormapShadowGDI (ColormapPtr pColormap)
   return TRUE;
 }
 
-
 /*
  * Set engine specific funtions
  */
@@ -1232,7 +1136,8 @@ winSetEngineFunctionsShadowGDI (ScreenPtr pScreen)
   pScreenPriv->pwinInitVisuals = winInitVisualsShadowGDI;
   pScreenPriv->pwinAdjustVideoMode = winAdjustVideoModeShadowGDI;
   if (pScreenInfo->fFullScreen)
-    pScreenPriv->pwinCreateBoundingWindow = winCreateBoundingWindowFullScreen;
+        pScreenPriv->pwinCreateBoundingWindow =
+            winCreateBoundingWindowFullScreen;
   else
     pScreenPriv->pwinCreateBoundingWindow = winCreateBoundingWindowWindowed;
   pScreenPriv->pwinFinishScreenInit = winFinishScreenInitFB;
@@ -1245,11 +1150,12 @@ winSetEngineFunctionsShadowGDI (ScreenPtr pScreen)
   pScreenPriv->pwinStoreColors = winStoreColorsShadowGDI;
   pScreenPriv->pwinCreateColormap = winCreateColormapShadowGDI;
   pScreenPriv->pwinDestroyColormap = winDestroyColormapShadowGDI;
-  pScreenPriv->pwinHotKeyAltTab = (winHotKeyAltTabProcPtr) (void (*)(void))NoopDDA;
-  pScreenPriv->pwinCreatePrimarySurface
-    = (winCreatePrimarySurfaceProcPtr) (void (*)(void))NoopDDA;
-  pScreenPriv->pwinReleasePrimarySurface
-    = (winReleasePrimarySurfaceProcPtr) (void (*)(void))NoopDDA;
+    pScreenPriv->pwinHotKeyAltTab =
+        (winHotKeyAltTabProcPtr) (void (*)(void)) NoopDDA;
+    pScreenPriv->pwinCreatePrimarySurface =
+        (winCreatePrimarySurfaceProcPtr) (void (*)(void)) NoopDDA;
+    pScreenPriv->pwinReleasePrimarySurface =
+        (winReleasePrimarySurfaceProcPtr) (void (*)(void)) NoopDDA;
 #ifdef XWIN_MULTIWINDOW
   pScreenPriv->pwinFinishCreateWindowsWindow =
     (winFinishCreateWindowsWindowProcPtr) (void (*)(void))NoopDDA;
