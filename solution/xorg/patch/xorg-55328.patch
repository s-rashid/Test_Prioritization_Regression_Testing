diff --git a/hw/dmx/input/dmxevents.c b/hw/dmx/input/dmxevents.c
index 41bc4bf..f734808 100644
--- a/hw/dmx/input/dmxevents.c
+++ b/hw/dmx/input/dmxevents.c
@@ -85,7 +85,8 @@ static int  dmxGlobalInvalid;       /* Flag indicating dmxCoreMotion
 #define DMXDBG7(f,a,b,c,d,e,g,h)
 #endif
 
-static int dmxApplyFunctions(DMXInputInfo *dmxInput, DMXFunctionType f)
+static int
+dmxApplyFunctions(DMXInputInfo * dmxInput, DMXFunctionType f)
 {
     int i;
     int rc = 0;
@@ -96,14 +97,14 @@ static int dmxApplyFunctions(DMXInputInfo *dmxInput, DMXFunctionType f)
     return rc;
 }
 
-static int dmxCheckFunctionKeys(DMXLocalInputInfoPtr dmxLocal,
-                                int type,
-                                KeySym keySym)
+static int
+dmxCheckFunctionKeys(DMXLocalInputInfoPtr dmxLocal, int type, KeySym keySym)
 {
     DMXInputInfo   *dmxInput = &dmxInputs[dmxLocal->inputIdx];
 
 #if 1 /* hack to detect ctrl-alt-q, etc */
     static int ctrl = 0, alt = 0;
+
     /* keep track of ctrl/alt key status */
     if (type == KeyPress && keySym == 0xffe3) {
         ctrl = 1;
@@ -155,30 +156,32 @@ static int dmxCheckFunctionKeys(DMXLocalInputInfoPtr dmxLocal,
     return 0;
 }
 
-
-DMXScreenInfo *dmxFindFirstScreen(int x, int y)
+DMXScreenInfo *
+dmxFindFirstScreen(int x, int y)
 {
     int i;
 
     for (i = 0; i < dmxNumScreens; i++) {
         DMXScreenInfo *dmxScreen = &dmxScreens[i];
+
         if (dmxOnScreen(x, y, dmxScreen))
             return dmxScreen;
     }
     return NULL;
 }
 
-
 /**
  * Enqueue a motion event.
  */
-static void enqueueMotion(DevicePtr pDev, int x, int y)
+static void
+enqueueMotion(DevicePtr pDev, int x, int y)
 {
     GETDMXLOCALFROMPDEV;
     DeviceIntPtr p = dmxLocal->pDevice;
     int valuators[3];
     int detail = 0;  /* XXX should this be mask of pressed buttons? */
     ValuatorMask mask;
+
     valuators[0] = x;
     valuators[1] = y;
 
@@ -188,7 +191,6 @@ static void enqueueMotion(DevicePtr pDev, int x, int y)
     return;
 }
 
-
 void
 dmxCoreMotion(DevicePtr pDev, int x, int y, int delta, DMXBlockType block)
 {
@@ -230,7 +232,8 @@ dmxCoreMotion(DevicePtr pDev, int x, int y, int delta, DMXBlockType block)
                enqueueMotion(pDev, localX, localY);
             if (block)
                 dmxSigioUnblock();
-        } else {
+        }
+        else {
                                 /* Screen is new */
             DMXDBG4("   New screen: old=%d new=%d localX=%d localY=%d\n",
                     pScreen->myNum, dmxScreen->index, localX, localY);
@@ -264,6 +267,7 @@ dmxCoreMotion(DevicePtr pDev, int x, int y, int delta, DMXBlockType block)
                                  * drivers */
     for (i = 0, dmxInput = &dmxInputs[0]; i < dmxNumInputs; i++, dmxInput++) {
         int j;
+
         for (j = 0; j < dmxInput->numDevs; j += dmxInput->devs[j]->binding)
             if (!dmxInput->detached
                 && dmxInput->devs[j]->sendsCore
@@ -271,13 +275,13 @@ dmxCoreMotion(DevicePtr pDev, int x, int y, int delta, DMXBlockType block)
                 dmxInput->devs[j]->update_position(dmxInput->devs[j]->private,
                                                    dmxGlobalX, dmxGlobalY);
     }
-    if (!dmxScreen) ProcessInputEvents();
+    if (!dmxScreen)
+        ProcessInputEvents();
 }
 
-
-
 #define DMX_MAX_AXES 32         /* Max axes reported by this routine */
-static void dmxExtMotion(DMXLocalInputInfoPtr dmxLocal,
+static void
+dmxExtMotion(DMXLocalInputInfoPtr dmxLocal,
                          int *v, int firstAxis, int axesCount,
                          DMXMotionType type, DMXBlockType block)
 {
@@ -292,7 +296,8 @@ static void dmxExtMotion(DMXLocalInputInfoPtr dmxLocal,
 
     memset(xE, 0, sizeof(xE));
 
-    if (axesCount > DMX_MAX_AXES) axesCount = DMX_MAX_AXES;
+    if (axesCount > DMX_MAX_AXES)
+        axesCount = DMX_MAX_AXES;
 
     if ((valuator_get_mode(pDevice,0) == Relative) && axesCount == 2) {
                                 /* The dmx console is a relative mode
@@ -307,7 +312,8 @@ static void dmxExtMotion(DMXLocalInputInfoPtr dmxLocal,
             if (dmxLocal->update_position)
                 dmxLocal->update_position(dmxLocal->private,
                                           dmxLocal->lastX, dmxLocal->lastY);
-        } else {                    /* Convert to relative */
+        }
+        else {                  /* Convert to relative */
             if (dmxLocal->lastX || dmxLocal->lastY) {
                 thisX = v[0] - dmxLocal->lastX;
                 thisY = v[1] - dmxLocal->lastY;
@@ -332,16 +338,24 @@ static void dmxExtMotion(DMXLocalInputInfoPtr dmxLocal,
             xv->num_valuators  = axesCount;
             xv->first_valuator = firstAxis;
             switch (xv->num_valuators) {
-            case 6: xv->valuator5 = v[5];
-            case 5: xv->valuator4 = v[4];
-            case 4: xv->valuator3 = v[3];
-            case 3: xv->valuator2 = v[2];
-            case 2: xv->valuator1 = v[1];
-            case 1: xv->valuator0 = v[0];
+        case 6:
+            xv->valuator5 = v[5];
+        case 5:
+            xv->valuator4 = v[4];
+        case 4:
+            xv->valuator3 = v[3];
+        case 3:
+            xv->valuator2 = v[2];
+        case 2:
+            xv->valuator1 = v[1];
+        case 1:
+            xv->valuator0 = v[0];
             }
             count              = 2;
-    } else {
+    }
+    else {
         int i;
+
         for (i = 0, count = 0; i < axesCount; i += 6) {
             xev->time          = GetTimeInMillis();
             xev->type          = DeviceMotionNotify;
@@ -354,12 +368,18 @@ static void dmxExtMotion(DMXLocalInputInfoPtr dmxLocal,
             xv->num_valuators  = (i+6 >= axesCount ? axesCount - i : 6);
             xv->first_valuator = firstAxis + i;
             switch (xv->num_valuators) {
-            case 6: xv->valuator5 = v[i+5];
-            case 5: xv->valuator4 = v[i+4];
-            case 4: xv->valuator3 = v[i+3];
-            case 3: xv->valuator2 = v[i+2];
-            case 2: xv->valuator1 = v[i+1];
-            case 1: xv->valuator0 = v[i+0];
+            case 6:
+                xv->valuator5 = v[i + 5];
+            case 5:
+                xv->valuator4 = v[i + 4];
+            case 4:
+                xv->valuator3 = v[i + 3];
+            case 3:
+                xv->valuator2 = v[i + 2];
+            case 2:
+                xv->valuator1 = v[i + 1];
+            case 1:
+                xv->valuator0 = v[i + 0];
             }
             xv                += 2;
             count             += 2;
@@ -369,14 +389,14 @@ static void dmxExtMotion(DMXLocalInputInfoPtr dmxLocal,
     if (block)
         dmxSigioBlock();
     valuator_mask_set_range(&mask, firstAxis, axesCount, v);
-    QueuePointerEvents(pDevice, MotionNotify, 0,
-                       POINTER_ABSOLUTE, &mask);
+    QueuePointerEvents(pDevice, MotionNotify, 0, POINTER_ABSOLUTE, &mask);
 
     if (block)
         dmxSigioUnblock();
 }
 
-static int dmxTranslateAndEnqueueExtEvent(DMXLocalInputInfoPtr dmxLocal,
+static int
+dmxTranslateAndEnqueueExtEvent(DMXLocalInputInfoPtr dmxLocal,
                                           XEvent *e, DMXBlockType block)
 {
     int                    type;
@@ -397,6 +417,7 @@ static int dmxTranslateAndEnqueueExtEvent(DMXLocalInputInfoPtr dmxLocal,
                                  * that X server. */
         int i;
         DMXInputInfo *dmxInput = &dmxInputs[dmxLocal->inputIdx];
+
         for (i = 0; i < dmxInput->numDevs; i++) {
             dmxLocal = dmxInput->devs[i];
             if ((XID)dmxLocal->deviceId == ke->deviceid)
@@ -409,21 +430,51 @@ static int dmxTranslateAndEnqueueExtEvent(DMXLocalInputInfoPtr dmxLocal,
         return -1;    /* No mapping, so this event is unhandled */
 
     switch (type) {
-    case XI_DeviceValuator:          event = DeviceValuator;          break;
-    case XI_DeviceKeyPress:          event = KeyPress;                break;
-    case XI_DeviceKeyRelease:        event = KeyRelease;              break;
-    case XI_DeviceButtonPress:       event = ButtonPress;             break;
-    case XI_DeviceButtonRelease:     event = ButtonRelease;           break;
-    case XI_DeviceMotionNotify:      event = MotionNotify;            break;
-    case XI_DeviceFocusIn:           event = DeviceFocusIn;           break;
-    case XI_DeviceFocusOut:          event = DeviceFocusOut;          break;
-    case XI_ProximityIn:             event = ProximityIn;             break;
-    case XI_ProximityOut:            event = ProximityOut;            break;
-    case XI_DeviceStateNotify:       event = DeviceStateNotify;       break;
-    case XI_DeviceMappingNotify:     event = DeviceMappingNotify;     break;
-    case XI_ChangeDeviceNotify:      event = ChangeDeviceNotify;      break;
-    case XI_DeviceKeystateNotify:    event = DeviceStateNotify;       break;
-    case XI_DeviceButtonstateNotify: event = DeviceStateNotify;       break;
+    case XI_DeviceValuator:
+        event = DeviceValuator;
+        break;
+    case XI_DeviceKeyPress:
+        event = KeyPress;
+        break;
+    case XI_DeviceKeyRelease:
+        event = KeyRelease;
+        break;
+    case XI_DeviceButtonPress:
+        event = ButtonPress;
+        break;
+    case XI_DeviceButtonRelease:
+        event = ButtonRelease;
+        break;
+    case XI_DeviceMotionNotify:
+        event = MotionNotify;
+        break;
+    case XI_DeviceFocusIn:
+        event = DeviceFocusIn;
+        break;
+    case XI_DeviceFocusOut:
+        event = DeviceFocusOut;
+        break;
+    case XI_ProximityIn:
+        event = ProximityIn;
+        break;
+    case XI_ProximityOut:
+        event = ProximityOut;
+        break;
+    case XI_DeviceStateNotify:
+        event = DeviceStateNotify;
+        break;
+    case XI_DeviceMappingNotify:
+        event = DeviceMappingNotify;
+        break;
+    case XI_ChangeDeviceNotify:
+        event = ChangeDeviceNotify;
+        break;
+    case XI_DeviceKeystateNotify:
+        event = DeviceStateNotify;
+        break;
+    case XI_DeviceButtonstateNotify:
+        event = DeviceStateNotify;
+        break;
     }
 
 #define EXTRACT_VALUATORS(ke, valuators) \
@@ -438,7 +489,8 @@ static int dmxTranslateAndEnqueueExtEvent(DMXLocalInputInfoPtr dmxLocal,
     case XI_DeviceKeyPress:
     case XI_DeviceKeyRelease:
         EXTRACT_VALUATORS(ke, valuators);
-        valuator_mask_set_range(&mask, ke->first_axis, ke->axes_count, valuators);
+        valuator_mask_set_range(&mask, ke->first_axis, ke->axes_count,
+                                valuators);
         if (block)
             dmxSigioBlock();
         QueueKeyboardEvents(pDevice, event, ke->keycode, &mask);
@@ -448,7 +500,8 @@ static int dmxTranslateAndEnqueueExtEvent(DMXLocalInputInfoPtr dmxLocal,
     case XI_DeviceButtonPress:
     case XI_DeviceButtonRelease:
         EXTRACT_VALUATORS(ke, valuators);
-        valuator_mask_set_range(&mask, ke->first_axis, ke->axes_count, valuators);
+        valuator_mask_set_range(&mask, ke->first_axis, ke->axes_count,
+                                valuators);
         if (block)
             dmxSigioBlock();
         QueuePointerEvents(pDevice, event, ke->keycode,
@@ -459,7 +512,8 @@ static int dmxTranslateAndEnqueueExtEvent(DMXLocalInputInfoPtr dmxLocal,
     case XI_ProximityIn:
     case XI_ProximityOut:
         EXTRACT_VALUATORS(ke, valuators);
-        valuator_mask_set_range(&mask, ke->first_axis, ke->axes_count, valuators);
+        valuator_mask_set_range(&mask, ke->first_axis, ke->axes_count,
+                                valuators);
         if (block)
             dmxSigioBlock();
         QueueProximityEvents(pDevice, event, &mask);
@@ -498,7 +552,8 @@ static int dmxTranslateAndEnqueueExtEvent(DMXLocalInputInfoPtr dmxLocal,
     return 0;
 }
 
-static int dmxGetButtonMapping(DMXLocalInputInfoPtr dmxLocal, int button)
+static int
+dmxGetButtonMapping(DMXLocalInputInfoPtr dmxLocal, int button)
 {
     ButtonClassPtr b = dmxLocal->pDevice->button;
 
@@ -512,14 +567,16 @@ static int dmxGetButtonMapping(DMXLocalInputInfoPtr dmxLocal, int button)
 
 /** Return DMX's notion of the pointer position in the global coordinate
  * space. */
-void dmxGetGlobalPosition(int *x, int *y)
+void
+dmxGetGlobalPosition(int *x, int *y)
 {
     *x = dmxGlobalX;
     *y = dmxGlobalY;
 }
 
 /** Invalidate the global position for #dmxCoreMotion. */
-void dmxInvalidateGlobalPosition(void)
+void
+dmxInvalidateGlobalPosition(void)
 {
     dmxGlobalInvalid = 1;
 }
@@ -534,7 +591,8 @@ void dmxInvalidateGlobalPosition(void)
  *
  * If \a block is set to \a DMX_BLOCK, then the SIGIO handler will be
  * blocked around calls to \a enqueueMotion(). */
-void dmxMotion(DevicePtr pDev, int *v, int firstAxes, int axesCount,
+void
+dmxMotion(DevicePtr pDev, int *v, int firstAxes, int axesCount,
                DMXMotionType type, DMXBlockType block)
 {
     GETDMXLOCALFROMPDEV;
@@ -558,8 +616,8 @@ void dmxMotion(DevicePtr pDev, int *v, int firstAxes, int axesCount,
     }
 }
 
-static KeySym dmxKeyCodeToKeySym(DMXLocalInputInfoPtr dmxLocal,
-                                 KeyCode keyCode)
+static KeySym
+dmxKeyCodeToKeySym(DMXLocalInputInfoPtr dmxLocal, KeyCode keyCode)
 {
     KeySym keysym = NoSymbol;
     int effectiveGroup;
@@ -582,8 +640,8 @@ out:
     return keysym;
 }
 
-static KeyCode dmxKeySymToKeyCode(DMXLocalInputInfoPtr dmxLocal, KeySym keySym,
-                                  int tryFirst)
+static KeyCode
+dmxKeySymToKeyCode(DMXLocalInputInfoPtr dmxLocal, KeySym keySym, int tryFirst)
 {
     /* FIXME: this is quite ineffective, converting to a core map first and
      * then extracting the info from there. It'd be better to run the actual
@@ -610,7 +668,8 @@ static KeyCode dmxKeySymToKeyCode(DMXLocalInputInfoPtr dmxLocal, KeySym keySym,
     return 0;
 }
 
-static int dmxFixup(DevicePtr pDev, int detail, KeySym keySym)
+static int
+dmxFixup(DevicePtr pDev, int detail, KeySym keySym)
 {
     GETDMXLOCALFROMPDEV;
     int keyCode;
@@ -637,7 +696,8 @@ static int dmxFixup(DevicePtr pDev, int detail, KeySym keySym)
  * If \a block is set to \a DMX_BLOCK, then the SIGIO handler will be
  * blocked around calls to dmxeqEnqueue(). */
     
-void dmxEnqueue(DevicePtr pDev, int type, int detail, KeySym keySym,
+void
+dmxEnqueue(DevicePtr pDev, int type, int detail, KeySym keySym,
                 XEvent *e, DMXBlockType block)
 {
     GETDMXINPUTFROMPDEV;
@@ -696,7 +756,8 @@ void dmxEnqueue(DevicePtr pDev, int type, int detail, KeySym keySym,
         if (type >= LASTEvent) {
             if (dmxTranslateAndEnqueueExtEvent(dmxLocal, e, block))
                 dmxLogInput(dmxInput, "Unhandled extension event: %d\n", type);
-        } else {
+        }
+        else {
             dmxLogInput(dmxInput, "Unhandled event: %d (%s)\n",
                         type, dmxEventName(type));
         }
@@ -711,22 +772,27 @@ void dmxEnqueue(DevicePtr pDev, int type, int detail, KeySym keySym,
  * requested termination of the DMX server, -1 is returned.  If the user
  * has requested a switch to a VT, then the (1-based) number of that VT
  * is returned. */
-int dmxCheckSpecialKeys(DevicePtr pDev, KeySym keySym)
+int
+dmxCheckSpecialKeys(DevicePtr pDev, KeySym keySym)
 {
     GETDMXINPUTFROMPDEV;
     int            vt    = 0;
     unsigned short state = 0;
 
     if (dmxLocal->sendsCore)
-        state = XkbStateFieldFromRec(&dmxLocalCoreKeyboard->pDevice->key->xkbInfo->state);
+        state =
+            XkbStateFieldFromRec(&dmxLocalCoreKeyboard->pDevice->key->xkbInfo->
+                                 state);
     else if (dmxLocal->pDevice->key)
         state = XkbStateFieldFromRec(&dmxLocal->pDevice->key->xkbInfo->state);
 
-    if (!dmxLocal->sendsCore) return 0; /* Only for core devices */
+    if (!dmxLocal->sendsCore)
+        return 0;               /* Only for core devices */
 
     DMXDBG2("dmxCheckSpecialKeys: keySym=0x%04x state=0x%04x\n", keySym,state);
     
-    if ((state & (ControlMask|Mod1Mask)) != (ControlMask|Mod1Mask)) return 0;
+    if ((state & (ControlMask | Mod1Mask)) != (ControlMask | Mod1Mask))
+        return 0;
     
     switch (keySym) {
     case XK_F1:
