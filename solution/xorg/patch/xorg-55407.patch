diff --git a/hw/xfree86/common/compiler.h b/hw/xfree86/common/compiler.h
index 34e60c5..0abdfb6 100644
--- a/hw/xfree86/common/compiler.h
+++ b/hw/xfree86/common/compiler.h
@@ -94,14 +94,11 @@
 #   define __inline /**/
 #  endif
 # endif /* __inline */
-
 /* Support gcc's __FUNCTION__ for people using other compilers */
 #if !defined(__GNUC__) && !defined(__FUNCTION__)
 # define __FUNCTION__ __func__ /* C99 */
 #endif
-
 # if defined(NO_INLINE) || defined(DO_PROTOTYPES)
-
 #  if !defined(__arm__)
 #   if !defined(__sparc__) && !defined(__sparc) && !defined(__arm32__) && !defined(__nds32__) \
       && !(defined(__alpha__) && defined(linux)) \
@@ -115,7 +112,6 @@ extern _X_EXPORT unsigned int inw(unsigned short);
 extern _X_EXPORT unsigned int inl(unsigned short);
 
 #   else /* __sparc__,  __arm32__, __alpha__, __nds32__ */
-
 extern _X_EXPORT void outb(unsigned long, unsigned char);
 extern _X_EXPORT void outw(unsigned long, unsigned short);
 extern _X_EXPORT void outl(unsigned long, unsigned int);
@@ -226,95 +222,124 @@ extern unsigned short ldw_brx(volatile unsigned char *, int);
 #  define write_mem_barrier() /* NOP */
 # endif
 
-
 # ifndef NO_INLINE
 #  ifdef __GNUC__
 
 /* Define some packed structures to use with unaligned accesses */
 
-struct __una_u64 { uint64_t x __attribute__((packed)); };
-struct __una_u32 { uint32_t x __attribute__((packed)); };
-struct __una_u16 { uint16_t x __attribute__((packed)); };
+struct __una_u64 {
+    uint64_t x __attribute__ ((packed));
+};
+struct __una_u32 {
+    uint32_t x __attribute__ ((packed));
+};
+struct __una_u16 {
+    uint16_t x __attribute__ ((packed));
+};
 
 /* Elemental unaligned loads */
 
-static __inline__ uint64_t ldq_u(uint64_t *p)
+static __inline__ uint64_t
+ldq_u(uint64_t * p)
 {
 	const struct __una_u64 *ptr = (const struct __una_u64 *) p;
+
 	return ptr->x;
 }
 
-static __inline__ uint32_t ldl_u(uint32_t *p)
+static __inline__ uint32_t
+ldl_u(uint32_t * p)
 {
 	const struct __una_u32 *ptr = (const struct __una_u32 *) p;
+
 	return ptr->x;
 }
 
-static __inline__ uint16_t ldw_u(uint16_t *p)
+static __inline__ uint16_t
+ldw_u(uint16_t * p)
 {
 	const struct __una_u16 *ptr = (const struct __una_u16 *) p;
+
 	return ptr->x;
 }
 
 /* Elemental unaligned stores */
 
-static __inline__ void stq_u(uint64_t val, uint64_t *p)
+static __inline__ void
+stq_u(uint64_t val, uint64_t * p)
 {
 	struct __una_u64 *ptr = (struct __una_u64 *) p;
+
 	ptr->x = val;
 }
 
-static __inline__ void stl_u(uint32_t val, uint32_t *p)
+static __inline__ void
+stl_u(uint32_t val, uint32_t * p)
 {
 	struct __una_u32 *ptr = (struct __una_u32 *) p;
+
 	ptr->x = val;
 }
 
-static __inline__ void stw_u(uint16_t val, uint16_t *p)
+static __inline__ void
+stw_u(uint16_t val, uint16_t * p)
 {
 	struct __una_u16 *ptr = (struct __una_u16 *) p;
+
 	ptr->x = val;
 }
 #  else /* !__GNUC__ */
 
 #include <string.h> /* needed for memmove */
 
-static __inline__ uint64_t ldq_u(uint64_t *p)
+static __inline__ uint64_t
+ldq_u(uint64_t * p)
 {
 	uint64_t ret;
+
 	memmove(&ret, p, sizeof(*p));
 	return ret;
 }
 
-static __inline__ uint32_t ldl_u(uint32_t *p)
+static __inline__ uint32_t
+ldl_u(uint32_t * p)
 {
 	uint32_t ret;
+
 	memmove(&ret, p, sizeof(*p));
 	return ret;
 }
 
-static __inline__ uint16_t ldw_u(uint16_t *p)
+static __inline__ uint16_t
+ldw_u(uint16_t * p)
 {
 	uint16_t ret;
+
 	memmove(&ret, p, sizeof(*p));
 	return ret;
 }
 
-static __inline__ void stq_u(uint64_t val, uint64_t *p)
+static __inline__ void
+stq_u(uint64_t val, uint64_t * p)
 {
 	uint64_t tmp = val;
+
 	memmove(p, &tmp, sizeof(*p));
 }
 
-static __inline__ void stl_u(uint32_t val, uint32_t *p)
+static __inline__ void
+stl_u(uint32_t val, uint32_t * p)
 {
 	uint32_t tmp = val;
+
 	memmove(p, &tmp, sizeof(*p));
 }
 
-static __inline__ void stw_u(uint16_t val, uint16_t *p)
+static __inline__ void
+stw_u(uint16_t val, uint16_t * p)
 {
 	uint16_t tmp = val;
+
 	memmove(p, &tmp, sizeof(*p));
 }
 
@@ -392,7 +417,6 @@ extern _X_EXPORT unsigned int inl(unsigned int port);
 
 #    endif /* (__FreeBSD__ || __OpenBSD__ ) && !DO_PROTOTYPES */
 
-
 #if defined(__NetBSD__)
 #include <machine/pio.h>
 #endif /* __NetBSD__ */
@@ -407,7 +431,6 @@ outb(unsigned short port, unsigned char val)
    __asm__ __volatile__("outb %0,%1" : :"a" (val), "d" (port));
 }
 
-
 static __inline__ void
 outw(unsigned short port, unsigned short val)
 {
@@ -424,9 +447,8 @@ static __inline__ unsigned int
 inb(unsigned short port)
 {
    unsigned char ret;
-   __asm__ __volatile__("inb %1,%0" :
-       "=a" (ret) :
-       "d" (port));
+    __asm__ __volatile__("inb %1,%0":"=a"(ret):"d"(port));
+
    return ret;
 }
 
@@ -434,9 +456,8 @@ static __inline__ unsigned int
 inw(unsigned short port)
 {
    unsigned short ret;
-   __asm__ __volatile__("inw %1,%0" :
-       "=a" (ret) :
-       "d" (port));
+    __asm__ __volatile__("inw %1,%0":"=a"(ret):"d"(port));
+
    return ret;
 }
 
@@ -444,9 +465,8 @@ static __inline__ unsigned int
 inl(unsigned short port)
 {
    unsigned int ret;
-   __asm__ __volatile__("inl %1,%0" :
-       "=a" (ret) :
-       "d" (port));
+    __asm__ __volatile__("inl %1,%0":"=a"(ret):"d"(port));
+
    return ret;
 }
 
@@ -459,27 +479,27 @@ inl(unsigned short port)
 static __inline__ void
 outb(unsigned long port, unsigned char val)
 {
-	__asm__ __volatile__("stba %0, [%1] %2"
-			     : /* No outputs */
+    __asm__ __volatile__("stba %0, [%1] %2":    /* No outputs */
 			     : "r" (val), "r" (port), "i" (ASI_PL));
+
 	barrier();
 }
 
 static __inline__ void
 outw(unsigned long port, unsigned short val)
 {
-	__asm__ __volatile__("stha %0, [%1] %2"
-			     : /* No outputs */
+    __asm__ __volatile__("stha %0, [%1] %2":    /* No outputs */
 			     : "r" (val), "r" (port), "i" (ASI_PL));
+
 	barrier();
 }
 
 static __inline__ void
 outl(unsigned long port, unsigned int val)
 {
-	__asm__ __volatile__("sta %0, [%1] %2"
-			     : /* No outputs */
+    __asm__ __volatile__("sta %0, [%1] %2":     /* No outputs */
 			     : "r" (val), "r" (port), "i" (ASI_PL));
+
 	barrier();
 }
 
@@ -487,9 +507,9 @@ static __inline__ unsigned int
 inb(unsigned long port)
 {
 	unsigned int ret;
-	__asm__ __volatile__("lduba [%1] %2, %0"
-			     : "=r" (ret)
+    __asm__ __volatile__("lduba [%1] %2, %0":"=r"(ret)
 			     : "r" (port), "i" (ASI_PL));
+
 	return ret;
 }
 
@@ -497,9 +517,9 @@ static __inline__ unsigned int
 inw(unsigned long port)
 {
 	unsigned int ret;
-	__asm__ __volatile__("lduha [%1] %2, %0"
-			     : "=r" (ret)
+    __asm__ __volatile__("lduha [%1] %2, %0":"=r"(ret)
 			     : "r" (port), "i" (ASI_PL));
+
 	return ret;
 }
 
@@ -507,9 +527,9 @@ static __inline__ unsigned int
 inl(unsigned long port)
 {
 	unsigned int ret;
-	__asm__ __volatile__("lda [%1] %2, %0"
-			     : "=r" (ret)
+    __asm__ __volatile__("lda [%1] %2, %0":"=r"(ret)
 			     : "r" (port), "i" (ASI_PL));
+
 	return ret;
 }
 
@@ -519,9 +539,9 @@ xf86ReadMmio8(__volatile__ void *base, const unsigned long offset)
 	unsigned long addr = ((unsigned long)base) + offset;
 	unsigned char ret;
 
-	__asm__ __volatile__("lduba [%1] %2, %0"
-			     : "=r" (ret)
+    __asm__ __volatile__("lduba [%1] %2, %0":"=r"(ret)
 			     : "r" (addr), "i" (ASI_PL));
+
 	return ret;
 }
 
@@ -531,9 +551,9 @@ xf86ReadMmio16Be(__volatile__ void *base, const unsigned long offset)
 	unsigned long addr = ((unsigned long)base) + offset;
 	unsigned short ret;
 
-	__asm__ __volatile__("lduh [%1], %0"
-			     : "=r" (ret)
+    __asm__ __volatile__("lduh [%1], %0":"=r"(ret)
 			     : "r" (addr));
+
 	return ret;
 }
 
@@ -543,9 +563,9 @@ xf86ReadMmio16Le(__volatile__ void *base, const unsigned long offset)
 	unsigned long addr = ((unsigned long)base) + offset;
 	unsigned short ret;
 
-	__asm__ __volatile__("lduha [%1] %2, %0"
-			     : "=r" (ret)
+    __asm__ __volatile__("lduha [%1] %2, %0":"=r"(ret)
 			     : "r" (addr), "i" (ASI_PL));
+
 	return ret;
 }
 
@@ -555,9 +575,9 @@ xf86ReadMmio32Be(__volatile__ void *base, const unsigned long offset)
 	unsigned long addr = ((unsigned long)base) + offset;
 	unsigned int ret;
 
-	__asm__ __volatile__("ld [%1], %0"
-			     : "=r" (ret)
+    __asm__ __volatile__("ld [%1], %0":"=r"(ret)
 			     : "r" (addr));
+
 	return ret;
 }
 
@@ -567,9 +587,9 @@ xf86ReadMmio32Le(__volatile__ void *base, const unsigned long offset)
 	unsigned long addr = ((unsigned long)base) + offset;
 	unsigned int ret;
 
-	__asm__ __volatile__("lda [%1] %2, %0"
-			     : "=r" (ret)
+    __asm__ __volatile__("lda [%1] %2, %0":"=r"(ret)
 			     : "r" (addr), "i" (ASI_PL));
+
 	return ret;
 }
 
@@ -579,9 +599,9 @@ xf86WriteMmio8(__volatile__ void *base, const unsigned long offset,
 {
 	unsigned long addr = ((unsigned long)base) + offset;
 
-	__asm__ __volatile__("stba %0, [%1] %2"
-			     : /* No outputs */
+    __asm__ __volatile__("stba %0, [%1] %2":    /* No outputs */
 			     : "r" (val), "r" (addr), "i" (ASI_PL));
+
 	barrier();
 }
 
@@ -591,9 +611,9 @@ xf86WriteMmio16Be(__volatile__ void *base, const unsigned long offset,
 {
 	unsigned long addr = ((unsigned long)base) + offset;
 
-	__asm__ __volatile__("sth %0, [%1]"
-			     : /* No outputs */
+    __asm__ __volatile__("sth %0, [%1]":        /* No outputs */
 			     : "r" (val), "r" (addr));
+
 	barrier();
 }
 
@@ -603,9 +623,9 @@ xf86WriteMmio16Le(__volatile__ void *base, const unsigned long offset,
 {
 	unsigned long addr = ((unsigned long)base) + offset;
 
-	__asm__ __volatile__("stha %0, [%1] %2"
-			     : /* No outputs */
+    __asm__ __volatile__("stha %0, [%1] %2":    /* No outputs */
 			     : "r" (val), "r" (addr), "i" (ASI_PL));
+
 	barrier();
 }
 
@@ -615,9 +635,9 @@ xf86WriteMmio32Be(__volatile__ void *base, const unsigned long offset,
 {
 	unsigned long addr = ((unsigned long)base) + offset;
 
-	__asm__ __volatile__("st %0, [%1]"
-			     : /* No outputs */
+    __asm__ __volatile__("st %0, [%1]": /* No outputs */
 			     : "r" (val), "r" (addr));
+
 	barrier();
 }
 
@@ -627,9 +647,9 @@ xf86WriteMmio32Le(__volatile__ void *base, const unsigned long offset,
 {
 	unsigned long addr = ((unsigned long)base) + offset;
 
-	__asm__ __volatile__("sta %0, [%1] %2"
-			     : /* No outputs */
+    __asm__ __volatile__("sta %0, [%1] %2":     /* No outputs */
 			     : "r" (val), "r" (addr), "i" (ASI_PL));
+
 	barrier();
 }
 
@@ -639,8 +659,7 @@ xf86WriteMmio8NB(__volatile__ void *base, const unsigned long offset,
 {
 	unsigned long addr = ((unsigned long)base) + offset;
 
-	__asm__ __volatile__("stba %0, [%1] %2"
-			     : /* No outputs */
+    __asm__ __volatile__("stba %0, [%1] %2":    /* No outputs */
 			     : "r" (val), "r" (addr), "i" (ASI_PL));
 }
 
@@ -650,8 +669,7 @@ xf86WriteMmio16BeNB(__volatile__ void *base, const unsigned long offset,
 {
 	unsigned long addr = ((unsigned long)base) + offset;
 
-	__asm__ __volatile__("sth %0, [%1]"
-			     : /* No outputs */
+    __asm__ __volatile__("sth %0, [%1]":        /* No outputs */
 			     : "r" (val), "r" (addr));
 }
 
@@ -661,8 +679,7 @@ xf86WriteMmio16LeNB(__volatile__ void *base, const unsigned long offset,
 {
 	unsigned long addr = ((unsigned long)base) + offset;
 
-	__asm__ __volatile__("stha %0, [%1] %2"
-			     : /* No outputs */
+    __asm__ __volatile__("stha %0, [%1] %2":    /* No outputs */
 			     : "r" (val), "r" (addr), "i" (ASI_PL));
 }
 
@@ -672,8 +689,7 @@ xf86WriteMmio32BeNB(__volatile__ void *base, const unsigned long offset,
 {
 	unsigned long addr = ((unsigned long)base) + offset;
 
-	__asm__ __volatile__("st %0, [%1]"
-			     : /* No outputs */
+    __asm__ __volatile__("st %0, [%1]": /* No outputs */
 			     : "r" (val), "r" (addr));
 }
 
@@ -683,8 +699,7 @@ xf86WriteMmio32LeNB(__volatile__ void *base, const unsigned long offset,
 {
 	unsigned long addr = ((unsigned long)base) + offset;
 
-	__asm__ __volatile__("sta %0, [%1] %2"
-			     : /* No outputs */
+    __asm__ __volatile__("sta %0, [%1] %2":     /* No outputs */
 			     : "r" (val), "r" (addr), "i" (ASI_PL));
 }
 
@@ -700,40 +715,45 @@ _X_EXPORT unsigned int IOPortBase;  /* Memory mapped I/O port area */
 static __inline__ void
 outb(unsigned PORT_SIZE port, unsigned char val)
 {
-	*(volatile unsigned char*)(((unsigned PORT_SIZE)(port))+IOPortBase) = val;
+    *(volatile unsigned char *) (((unsigned PORT_SIZE) (port)) + IOPortBase) =
+        val;
 }
 
 static __inline__ void
 outw(unsigned PORT_SIZE port, unsigned short val)
 {
-	*(volatile unsigned short*)(((unsigned PORT_SIZE)(port))+IOPortBase) = val;
+    *(volatile unsigned short *) (((unsigned PORT_SIZE) (port)) + IOPortBase) =
+        val;
 }
 
 static __inline__ void
 outl(unsigned PORT_SIZE port, unsigned int val)
 {
-	*(volatile unsigned int*)(((unsigned PORT_SIZE)(port))+IOPortBase) = val;
+    *(volatile unsigned int *) (((unsigned PORT_SIZE) (port)) + IOPortBase) =
+        val;
 }
 
 static __inline__ unsigned int
 inb(unsigned PORT_SIZE port)
 {
-	return *(volatile unsigned char*)(((unsigned PORT_SIZE)(port))+IOPortBase);
+    return *(volatile unsigned char *) (((unsigned PORT_SIZE) (port)) +
+                                        IOPortBase);
 }
 
 static __inline__ unsigned int
 inw(unsigned PORT_SIZE port)
 {
-	return *(volatile unsigned short*)(((unsigned PORT_SIZE)(port))+IOPortBase);
+    return *(volatile unsigned short *) (((unsigned PORT_SIZE) (port)) +
+                                         IOPortBase);
 }
 
 static __inline__ unsigned int
 inl(unsigned PORT_SIZE port)
 {
-	return *(volatile unsigned int*)(((unsigned PORT_SIZE)(port))+IOPortBase);
+    return *(volatile unsigned int *) (((unsigned PORT_SIZE) (port)) +
+                                       IOPortBase);
 }
 
-
 #    if defined(__mips__)
 #     ifdef linux	/* don't mess with other OSs */
 #       if X_BYTE_ORDER == X_BIG_ENDIAN
@@ -743,9 +763,9 @@ xf86ReadMmio32Be(__volatile__ void *base, const unsigned long offset)
 	unsigned long addr = ((unsigned long)base) + offset;
 	unsigned int ret;
 
-	__asm__ __volatile__("lw %0, 0(%1)"
-			     : "=r" (ret)
+    __asm__ __volatile__("lw %0, 0(%1)":"=r"(ret)
 			     : "r" (addr));
+
 	return ret;
 }
 
@@ -755,8 +775,7 @@ xf86WriteMmio32Be(__volatile__ void *base, const unsigned long offset,
 {
 	unsigned long addr = ((unsigned long)base) + offset;
 
-	__asm__ __volatile__("sw %0, 0(%1)"
-			     : /* No outputs */
+    __asm__ __volatile__("sw %0, 0(%1)":        /* No outputs */
 			     : "r" (val), "r" (addr));
 }
 #      endif
@@ -775,10 +794,7 @@ static __inline__ unsigned char
 xf86ReadMmio8(__volatile__ void *base, const unsigned long offset)
 {
         register unsigned char val;
-        __asm__ __volatile__(
-                        "lbzx %0,%1,%2\n\t"
-                        "eieio"
-                        : "=r" (val)
+    __asm__ __volatile__("lbzx %0,%1,%2\n\t" "eieio":"=r"(val)
                         : "b" (base), "r" (offset),
                         "m" (*((volatile unsigned char *)base+offset)));
         return val;
@@ -788,10 +804,7 @@ static __inline__ unsigned short
 xf86ReadMmio16Be(__volatile__ void *base, const unsigned long offset)
 {
         register unsigned short val;
-        __asm__ __volatile__(
-                        "lhzx %0,%1,%2\n\t"
-                        "eieio"
-                        : "=r" (val)
+    __asm__ __volatile__("lhzx %0,%1,%2\n\t" "eieio":"=r"(val)
                         : "b" (base), "r" (offset),
                         "m" (*((volatile unsigned char *)base+offset)));
         return val;
@@ -801,10 +814,7 @@ static __inline__ unsigned short
 xf86ReadMmio16Le(__volatile__ void *base, const unsigned long offset)
 {
         register unsigned short val;
-        __asm__ __volatile__(
-                        "lhbrx %0,%1,%2\n\t"
-                        "eieio"
-                        : "=r" (val)
+    __asm__ __volatile__("lhbrx %0,%1,%2\n\t" "eieio":"=r"(val)
                         : "b" (base), "r" (offset),
                         "m" (*((volatile unsigned char *)base+offset)));
         return val;
@@ -814,10 +824,7 @@ static __inline__ unsigned int
 xf86ReadMmio32Be(__volatile__ void *base, const unsigned long offset)
 {
         register unsigned int val;
-        __asm__ __volatile__(
-                        "lwzx %0,%1,%2\n\t"
-                        "eieio"
-                        : "=r" (val)
+    __asm__ __volatile__("lwzx %0,%1,%2\n\t" "eieio":"=r"(val)
                         : "b" (base), "r" (offset),
                         "m" (*((volatile unsigned char *)base+offset)));
         return val;
@@ -827,10 +834,7 @@ static __inline__ unsigned int
 xf86ReadMmio32Le(__volatile__ void *base, const unsigned long offset)
 {
         register unsigned int val;
-        __asm__ __volatile__(
-                        "lwbrx %0,%1,%2\n\t"
-                        "eieio"
-                        : "=r" (val)
+    __asm__ __volatile__("lwbrx %0,%1,%2\n\t" "eieio":"=r"(val)
                         : "b" (base), "r" (offset),
                         "m" (*((volatile unsigned char *)base+offset)));
         return val;
@@ -840,9 +844,9 @@ static __inline__ void
 xf86WriteMmioNB8(__volatile__ void *base, const unsigned long offset,
 		 const unsigned char val)
 {
-        __asm__ __volatile__(
-                        "stbx %1,%2,%3\n\t"
-                        : "=m" (*((volatile unsigned char *)base+offset))
+    __asm__
+        __volatile__("stbx %1,%2,%3\n\t":"=m"
+                     (*((volatile unsigned char *) base + offset))
                         : "r" (val), "b" (base), "r" (offset));
 }
 
@@ -850,9 +854,9 @@ static __inline__ void
 xf86WriteMmioNB16Le(__volatile__ void *base, const unsigned long offset,
 		    const unsigned short val)
 {
-        __asm__ __volatile__(
-                        "sthbrx %1,%2,%3\n\t"
-                        : "=m" (*((volatile unsigned char *)base+offset))
+    __asm__
+        __volatile__("sthbrx %1,%2,%3\n\t":"=m"
+                     (*((volatile unsigned char *) base + offset))
                         : "r" (val), "b" (base), "r" (offset));
 }
 
@@ -860,9 +864,9 @@ static __inline__ void
 xf86WriteMmioNB16Be(__volatile__ void *base, const unsigned long offset,
 		    const unsigned short val)
 {
-        __asm__ __volatile__(
-                        "sthx %1,%2,%3\n\t"
-                        : "=m" (*((volatile unsigned char *)base+offset))
+    __asm__
+        __volatile__("sthx %1,%2,%3\n\t":"=m"
+                     (*((volatile unsigned char *) base + offset))
                         : "r" (val), "b" (base), "r" (offset));
 }
 
@@ -870,9 +874,9 @@ static __inline__ void
 xf86WriteMmioNB32Le(__volatile__ void *base, const unsigned long offset,
 		    const unsigned int val)
 {
-        __asm__ __volatile__(
-                        "stwbrx %1,%2,%3\n\t"
-                        : "=m" (*((volatile unsigned char *)base+offset))
+    __asm__
+        __volatile__("stwbrx %1,%2,%3\n\t":"=m"
+                     (*((volatile unsigned char *) base + offset))
                         : "r" (val), "b" (base), "r" (offset));
 }
 
@@ -880,9 +884,9 @@ static __inline__ void
 xf86WriteMmioNB32Be(__volatile__ void *base, const unsigned long offset,
 		    const unsigned int val)
 {
-        __asm__ __volatile__(
-                        "stwx %1,%2,%3\n\t"
-                        : "=m" (*((volatile unsigned char *)base+offset))
+    __asm__
+        __volatile__("stwx %1,%2,%3\n\t":"=m"
+                     (*((volatile unsigned char *) base + offset))
                         : "r" (val), "b" (base), "r" (offset));
 }
 
@@ -926,46 +930,51 @@ xf86WriteMmio32Be(__volatile__ void *base, const unsigned long offset,
         eieio();
 }
 
-
 static __inline__ void
 outb(unsigned short port, unsigned char value)
 {
-        if(ioBase == MAP_FAILED) return;
+    if (ioBase == MAP_FAILED)
+        return;
         xf86WriteMmio8((void *)ioBase, port, value);
 }
 
 static __inline__ void
 outw(unsigned short port, unsigned short value)
 {
-        if(ioBase == MAP_FAILED) return;
+    if (ioBase == MAP_FAILED)
+        return;
         xf86WriteMmio16Le((void *)ioBase, port, value);
 }
 
 static __inline__ void
 outl(unsigned short port, unsigned int value)
 {
-        if(ioBase == MAP_FAILED) return;
+    if (ioBase == MAP_FAILED)
+        return;
         xf86WriteMmio32Le((void *)ioBase, port, value);
 }
 
 static __inline__ unsigned int
 inb(unsigned short port)
 {
-        if(ioBase == MAP_FAILED) return 0;
+    if (ioBase == MAP_FAILED)
+        return 0;
         return xf86ReadMmio8((void *)ioBase, port);
 }
 
 static __inline__ unsigned int
 inw(unsigned short port)
 {
-        if(ioBase == MAP_FAILED) return 0;
+    if (ioBase == MAP_FAILED)
+        return 0;
         return xf86ReadMmio16Le((void *)ioBase, port);
 }
 
 static __inline__ unsigned int
 inl(unsigned short port)
 {
-        if(ioBase == MAP_FAILED) return 0;
+    if (ioBase == MAP_FAILED)
+        return 0;
         return xf86ReadMmio32Le((void *)ioBase, port);
 }
 
@@ -1038,11 +1047,9 @@ xf86ReadMmio16Swap(__volatile__ void *base, const unsigned long offset)
 	unsigned long addr = ((unsigned long)base) + offset;
 	unsigned short ret;
 
-	__asm__ __volatile__(
-	           "lhi %0, [%1];\n\t"
-	           "wsbh %0, %0;\n\t"
-			     : "=r" (ret)
+    __asm__ __volatile__("lhi %0, [%1];\n\t" "wsbh %0, %0;\n\t":"=r"(ret)
 			     : "r" (addr));
+
 	return ret;
 }
 
@@ -1058,11 +1065,9 @@ xf86WriteMmio16Swap(__volatile__ void *base, const unsigned long offset,
 {
 	unsigned long addr = ((unsigned long)base) + offset;
 
-	__asm__ __volatile__(
-	           "wsbh %0, %0;\n\t"
-	           "shi %0, [%1];\n\t"
-			     : /* No outputs */
+    __asm__ __volatile__("wsbh %0, %0;\n\t" "shi %0, [%1];\n\t":        /* No outputs */
 			     : "r" (val), "r" (addr));
+
 	barrier();
 }
 
@@ -1080,10 +1085,7 @@ xf86WriteMmio16SwapNB(__volatile__ void *base, const unsigned long offset,
 {
 	unsigned long addr = ((unsigned long)base) + offset;
 
-	__asm__ __volatile__(
-	           "wsbh %0, %0;\n\t"
-	           "shi %0, [%1];\n\t"
-			     : /* No outputs */
+    __asm__ __volatile__("wsbh %0, %0;\n\t" "shi %0, [%1];\n\t":        /* No outputs */
 			     : "r" (val), "r" (addr));
 }
 
@@ -1100,12 +1102,10 @@ xf86ReadMmio32Swap(__volatile__ void *base, const unsigned long offset)
 	unsigned long addr = ((unsigned long)base) + offset;
 	unsigned int ret;
 
-	__asm__ __volatile__(
-	           "lwi %0, [%1];\n\t"
-	           "wsbh %0, %0;\n\t"
-				  "rotri %0, %0, 16;\n\t"
-			     : "=r" (ret)
+    __asm__ __volatile__("lwi %0, [%1];\n\t"
+                         "wsbh %0, %0;\n\t" "rotri %0, %0, 16;\n\t":"=r"(ret)
 			     : "r" (addr));
+
 	return ret;
 }
 
@@ -1121,12 +1121,9 @@ xf86WriteMmio32Swap(__volatile__ void *base, const unsigned long offset,
 {
 	unsigned long addr = ((unsigned long)base) + offset;
 
-	__asm__ __volatile__(
-	           "wsbh %0, %0;\n\t"
-	           "rotri %0, %0, 16;\n\t"
-				  "swi %0, [%1];\n\t"
-			     : /* No outputs */
+    __asm__ __volatile__("wsbh %0, %0;\n\t" "rotri %0, %0, 16;\n\t" "swi %0, [%1];\n\t":        /* No outputs */
 			     : "r" (val), "r" (addr));
+
 	barrier();
 }
 
@@ -1144,11 +1141,7 @@ xf86WriteMmio32SwapNB(__volatile__ void *base, const unsigned long offset,
 {
 	unsigned long addr = ((unsigned long)base) + offset;
 
-	__asm__ __volatile__(
-	           "wsbh %0, %0;\n\t"
-				  "rotri %0, %0, 16;\n\t"
-				  "swi %0, [%1];\n\t"
-			     : /* No outputs */
+    __asm__ __volatile__("wsbh %0, %0;\n\t" "rotri %0, %0, 16;\n\t" "swi %0, [%1];\n\t":        /* No outputs */
 			     : "r" (val), "r" (addr));
 }
 
@@ -1196,55 +1189,47 @@ inl(unsigned PORT_SIZE port)
    return xf86ReadMmio32Swap(IOPortBase, port);
 }
 
-static __inline__ unsigned long ldq_u(unsigned long *p)
+static __inline__ unsigned long
+ldq_u(unsigned long *p)
 {
 	unsigned long addr = (unsigned long)p;
 	unsigned int ret;
 
-	__asm__ __volatile__(
-				  "lmw.bi %0, [%1], %0, 0;\n\t"
-	           "wsbh %0, %0;\n\t"
-				  "rotri %0, %0, 16;\n\t"
-			     : "=r" (ret)
+    __asm__ __volatile__("lmw.bi %0, [%1], %0, 0;\n\t"
+                         "wsbh %0, %0;\n\t" "rotri %0, %0, 16;\n\t":"=r"(ret)
 			     : "r" (addr));
+
 	return ret;
 }
 
-static __inline__ unsigned long ldl_u(unsigned int *p)
+static __inline__ unsigned long
+ldl_u(unsigned int *p)
 {
 	unsigned long addr = (unsigned long)p;
 	unsigned int ret;
 
-	__asm__ __volatile__(
-				  "lmw.bi %0, [%1], %0, 0;\n\t"
-	           "wsbh %0, %0;\n\t"
-				  "rotri %0, %0, 16;\n\t"
-			     : "=r" (ret)
+    __asm__ __volatile__("lmw.bi %0, [%1], %0, 0;\n\t"
+                         "wsbh %0, %0;\n\t" "rotri %0, %0, 16;\n\t":"=r"(ret)
 			     : "r" (addr));
+
 	return ret;
 }
 
-static __inline__ void stq_u(unsigned long val, unsigned long *p)
+static __inline__ void
+stq_u(unsigned long val, unsigned long *p)
 {
 	unsigned long addr = (unsigned long)p;
 
-	__asm__ __volatile__(
-	           "wsbh %0, %0;\n\t"
-				  "rotri %0, %0, 16;\n\t"
-				  "smw.bi %0, [%1], %0, 0;\n\t"
-			     : /* No outputs */
+    __asm__ __volatile__("wsbh %0, %0;\n\t" "rotri %0, %0, 16;\n\t" "smw.bi %0, [%1], %0, 0;\n\t":      /* No outputs */
 			     : "r" (val), "r" (addr));
 }
 
-static __inline__ void stl_u(unsigned long val, unsigned int *p)
+static __inline__ void
+stl_u(unsigned long val, unsigned int *p)
 {
 	unsigned long addr = (unsigned long)p;
 
-	__asm__ __volatile__(
-	           "wsbh %0, %0;\n\t"
-				  "rotri %0, %0, 16;\n\t"
-				  "smw.bi %0, [%1], %0, 0;\n\t"
-			     : /* No outputs */
+    __asm__ __volatile__("wsbh %0, %0;\n\t" "rotri %0, %0, 16;\n\t" "smw.bi %0, [%1], %0, 0;\n\t":      /* No outputs */
 			     : "r" (val), "r" (addr));
 }
 
@@ -1269,6 +1254,7 @@ outl(unsigned PORT_SIZE port, unsigned int val)
 	*(volatile unsigned int*)(((unsigned PORT_SIZE)(port))) = val;
 	barrier();
 }
+
 static __inline__ unsigned int
 inb(unsigned PORT_SIZE port)
 {
@@ -1287,48 +1273,45 @@ inl(unsigned PORT_SIZE port)
 	return *(volatile unsigned int*)(((unsigned PORT_SIZE)(port)));
 }
 
-static __inline__ unsigned long ldq_u(unsigned long *p)
+static __inline__ unsigned long
+ldq_u(unsigned long *p)
 {
 	unsigned long addr = (unsigned long)p;
 	unsigned int ret;
 
-	__asm__ __volatile__(
-				  "lmw.bi %0, [%1], %0, 0;\n\t"
-			     : "=r" (ret)
+    __asm__ __volatile__("lmw.bi %0, [%1], %0, 0;\n\t":"=r"(ret)
 			     : "r" (addr));
+
 	return ret;
 }
 
-static __inline__ unsigned long ldl_u(unsigned int *p)
+static __inline__ unsigned long
+ldl_u(unsigned int *p)
 {
 	unsigned long addr = (unsigned long)p;
 	unsigned int ret;
 
-	__asm__ __volatile__(
-				  "lmw.bi %0, [%1], %0, 0;\n\t"
-			     : "=r" (ret)
+    __asm__ __volatile__("lmw.bi %0, [%1], %0, 0;\n\t":"=r"(ret)
 			     : "r" (addr));
+
 	return ret;
 }
 
-
-static __inline__ void stq_u(unsigned long val, unsigned long *p)
+static __inline__ void
+stq_u(unsigned long val, unsigned long *p)
 {
 	unsigned long addr = (unsigned long)p;
 
-	__asm__ __volatile__(
-				  "smw.bi %0, [%1], %0, 0;\n\t"
-			     : /* No outputs */
+    __asm__ __volatile__("smw.bi %0, [%1], %0, 0;\n\t": /* No outputs */
 			     : "r" (val), "r" (addr));
 }
 
-static __inline__ void stl_u(unsigned long val, unsigned int *p)
+static __inline__ void
+stl_u(unsigned long val, unsigned int *p)
 {
 	unsigned long addr = (unsigned long)p;
 
-	__asm__ __volatile__(
-				  "smw.bi %0, [%1], %0, 0;\n\t"
-			     : /* No outputs */
+    __asm__ __volatile__("smw.bi %0, [%1], %0, 0;\n\t": /* No outputs */
 			     : "r" (val), "r" (addr));
 }
 #    endif /* NDS32_MMIO_SWAP */
@@ -1365,7 +1348,6 @@ outb(unsigned short port, unsigned char val)
    __asm__ __volatile__("outb %0,%1" : :"a" (val), "d" (port));
 }
 
-
 static __inline__ void
 outw(unsigned short port, unsigned short val)
 {
@@ -1382,9 +1364,8 @@ static __inline__ unsigned int
 inb(unsigned short port)
 {
    unsigned char ret;
-   __asm__ __volatile__("inb %1,%0" :
-       "=a" (ret) :
-       "d" (port));
+    __asm__ __volatile__("inb %1,%0":"=a"(ret):"d"(port));
+
    return ret;
 }
 
@@ -1392,9 +1373,8 @@ static __inline__ unsigned int
 inw(unsigned short port)
 {
    unsigned short ret;
-   __asm__ __volatile__("inw %1,%0" :
-       "=a" (ret) :
-       "d" (port));
+    __asm__ __volatile__("inw %1,%0":"=a"(ret):"d"(port));
+
    return ret;
 }
 
@@ -1402,9 +1382,8 @@ static __inline__ unsigned int
 inl(unsigned short port)
 {
    unsigned int ret;
-   __asm__ __volatile__("inl %1,%0" :
-       "=a" (ret) :
-       "d" (port));
+    __asm__ __volatile__("inl %1,%0":"=a"(ret):"d"(port));
+
    return ret;
 }
 
@@ -1432,9 +1411,8 @@ static __inline__ unsigned int
 inb(unsigned short port)
 {
   unsigned char ret;
-  __asm__ __volatile__("in%B0 (%1)" :
-		   "=a" (ret) :
-		   "d" (port));
+    __asm__ __volatile__("in%B0 (%1)":"=a"(ret):"d"(port));
+
   return ret;
 }
 
@@ -1442,9 +1420,8 @@ static __inline__ unsigned int
 inw(unsigned short port)
 {
   unsigned short ret;
-  __asm__ __volatile__("in%W0 (%1)" :
-		   "=a" (ret) :
-		   "d" (port));
+    __asm__ __volatile__("in%W0 (%1)":"=a"(ret):"d"(port));
+
   return ret;
 }
 
@@ -1452,9 +1429,8 @@ static __inline__ unsigned int
 inl(unsigned short port)
 {
   unsigned int ret;
-  __asm__ __volatile__("in%L0 (%1)" :
-                   "=a" (ret) :
-                   "d" (port));
+    __asm__ __volatile__("in%L0 (%1)":"=a"(ret):"d"(port));
+
   return ret;
 }
 
@@ -1526,6 +1502,7 @@ inl(unsigned short port)
 /* entry points for Mmio memory access routines */
 extern _X_EXPORT int (*xf86ReadMmio8)(void *, unsigned long);
 extern _X_EXPORT int (*xf86ReadMmio16)(void *, unsigned long);
+
 #  ifndef STANDALONE_MMIO
 extern _X_EXPORT int (*xf86ReadMmio32)(void *, unsigned long);
 #  else
@@ -1543,7 +1520,8 @@ extern _X_EXPORT void (*xf86WriteMmio32)(int, void *, unsigned long);
 extern _X_EXPORT void (*xf86WriteMmioNB8)(int, void *, unsigned long);
 extern _X_EXPORT void (*xf86WriteMmioNB16)(int, void *, unsigned long);
 extern _X_EXPORT void (*xf86WriteMmioNB32)(int, void *, unsigned long);
-extern _X_EXPORT void xf86SlowBCopyFromBus(unsigned char *, unsigned char *, int);
+extern _X_EXPORT void xf86SlowBCopyFromBus(unsigned char *, unsigned char *,
+                                           int);
 extern _X_EXPORT void xf86SlowBCopyToBus(unsigned char *, unsigned char *, int);
 
 /* Some macros to hide the system dependencies for MMIO accesses */
@@ -1696,23 +1674,19 @@ extern _X_EXPORT void xf86SlowBCopyToBus(unsigned char *, unsigned char *, int);
        xf86WriteMmio32(base, offset, (CARD32)(val))
 
 #ifdef N1213_HC /* for NDS32 N1213 hardcore */
-static __inline__ void nds32_flush_icache(char *addr)
+static __inline__ void
+nds32_flush_icache(char *addr)
 {
-	__asm__ volatile (
-		"isync %0;"
+    __asm__ volatile ("isync %0;"
 		"msync;"
 		"isb;"
-		"cctl %0,L1I_VA_INVAL;"
-		"isb;"
-		: : "r"(addr) : "memory");
+                      "cctl %0,L1I_VA_INVAL;" "isb;"::"r" (addr):"memory");
 }
 #else
-static __inline__ void nds32_flush_icache(char *addr)
+static __inline__ void
+nds32_flush_icache(char *addr)
 {
-	__asm__ volatile (
-		"isync %0;"
-		"isb;"
-		: : "r"(addr) : "memory");
+    __asm__ volatile ("isync %0;" "isb;"::"r" (addr):"memory");
 }
 #endif
 
