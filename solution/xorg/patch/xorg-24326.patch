diff --git a/hw/xfree86/common/xf86Xinput.c b/hw/xfree86/common/xf86Xinput.c
index 329dcba..7c27e1f 100644
--- a/hw/xfree86/common/xf86Xinput.c
+++ b/hw/xfree86/common/xf86Xinput.c
@@ -39,7 +39,6 @@
  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
- * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  * OTHER DEALINGS IN THE SOFTWARE.
  *
  * Except as contained in this notice, the name of the copyright holder(s)
@@ -65,6 +64,7 @@
 #include "xf86Xinput.h"
 #ifdef XINPUT
 #include "XIstubs.h"
+#include "xf86Optrec.h"
 #endif
 #include "mipointer.h"
 #include "xf86InPriv.h"
@@ -75,10 +75,6 @@
 #include "dpmsproc.h"
 #endif
 
-#ifdef XFreeXDGA
-#include "dgaproc.h"
-#endif
-
 #include "exevents.h"	/* AddInputDevice */
 #include "exglobals.h"
 
@@ -114,50 +110,6 @@ static int      debug_level = 0;
 #define DBG(lvl, f)
 #endif
 
-/******************************************************************************
- * macros
- *****************************************************************************/
-#define ENQUEUE(e) xf86eqEnqueue((e))
-
-/***********************************************************************
- *
- * xf86AlwaysCoreControl --
- *	
- *	Control proc for the integer feedback that controls the always
- * core feature.
- *
- ***********************************************************************
- */
-static void
-xf86AlwaysCoreControl(DeviceIntPtr	device,
-		      IntegerCtrl	*control)
-{
-}
-
-/***********************************************************************
- *
- * Core devices functions --
- *	
- *	Test if device is the core device by checking the
- * value of always core feedback and the inputInfo struct.
- *
- ***********************************************************************
- */
-_X_EXPORT int
-xf86IsCorePointer(DeviceIntPtr	device)
-{
-    return(device == inputInfo.pointer);
-}
-
-static int
-xf86ShareCorePointer(DeviceIntPtr	device)
-{
-    LocalDevicePtr	local = (LocalDevicePtr) device->public.devicePrivate;
-    
-    return((local->always_core_feedback &&
-	    local->always_core_feedback->ctrl.integer_displayed));
-}
-
 static Bool
 xf86SendDragEvents(DeviceIntPtr	device)
 {
@@ -169,27 +121,6 @@ xf86SendDragEvents(DeviceIntPtr	device)
 	return (TRUE);
 }
 
-int
-xf86IsCoreKeyboard(DeviceIntPtr	device)
-{
-    LocalDevicePtr	local = (LocalDevicePtr) device->public.devicePrivate;
-    
-    return((local->flags & XI86_ALWAYS_CORE) ||
-	   (device == inputInfo.keyboard));
-}
-
-_X_EXPORT void
-xf86XInputSetSendCoreEvents(LocalDevicePtr local, Bool always)
-{
-    if (always) {
-	local->flags |= XI86_ALWAYS_CORE;
-    } else {
-	local->flags &= ~XI86_ALWAYS_CORE;
-    }
-}
-
-static int xf86CoreButtonState;
-
 /***********************************************************************
  *
  * xf86CheckButton --
@@ -206,6 +137,8 @@ xf86CheckButton(int	button,
     int	check;
     int bit = (1 << (button - 1));
 
+    /* XXX FIXME VERDAMMT */
+#if 0
     check = xf86CoreButtonState & bit;
     
     DBG(5, ErrorF("xf86CheckButton "
@@ -218,6 +151,7 @@ xf86CheckButton(int	button,
     xf86CoreButtonState ^= bit;
 
     DBG(5, ErrorF("TRUE\n"));
+#endif
     return TRUE;
 }
 
@@ -233,22 +167,14 @@ _X_EXPORT void
 xf86ProcessCommonOptions(LocalDevicePtr local,
 			 pointer	list)
 {
-    if (xf86SetBoolOption(list, "AlwaysCore", 0) ||
-	xf86SetBoolOption(list, "SendCoreEvents", 0)) {
+    if (!xf86SetBoolOption(list, "AlwaysCore", 0) ||
+        xf86SetBoolOption(list, "SendCoreEvents", 0) ||
+        xf86SetBoolOption(list, "CorePointer", 0) ||
+        xf86SetBoolOption(list, "CoreKeyboard", 0)) {
 	local->flags |= XI86_ALWAYS_CORE;
 	xf86Msg(X_CONFIG, "%s: always reports core events\n", local->name);
     }
 
-    if (xf86SetBoolOption(list, "CorePointer", 0)) {
-	local->flags |= XI86_CORE_POINTER;
-	xf86Msg(X_CONFIG, "%s: Core Pointer\n", local->name);
-    }
-
-    if (xf86SetBoolOption(list, "CoreKeyboard", 0)) {
-	local->flags |= XI86_CORE_KEYBOARD;
-	xf86Msg(X_CONFIG, "%s: Core Keyboard\n", local->name);
-    }
-
     if (xf86SetBoolOption(list, "SendDragEvents", 1)) {
 	local->flags |= XI86_SEND_DRAG_EVENTS;
     } else {
@@ -263,6 +189,11 @@ xf86ProcessCommonOptions(LocalDevicePtr local,
     }
 }
 
+void
+xf86AlwaysCoreControl(DeviceIntPtr pDev, IntegerCtrl *control)
+{
+}
+
 /***********************************************************************
  *
  * xf86XinputFinalizeInit --
@@ -277,9 +208,6 @@ xf86XinputFinalizeInit(DeviceIntPtr	dev)
 {
     LocalDevicePtr        local = (LocalDevicePtr)dev->public.devicePrivate;
 
-    local->dxremaind = 0.0;
-    local->dyremaind = 0.0;
-    
     if (InitIntegerFeedbackClassDeviceStruct(dev, xf86AlwaysCoreControl) == FALSE) {
 	ErrorF("Unable to init integer feedback for always core feature\n");
     } else {
@@ -304,12 +232,13 @@ xf86ActivateDevice(LocalDevicePtr local)
     if (local->flags & XI86_CONFIGURED) {
 	int	open_on_init;
 	
-	open_on_init = local->flags &
-		(XI86_OPEN_ON_INIT |
-		 XI86_ALWAYS_CORE | XI86_CORE_POINTER | XI86_CORE_KEYBOARD);
+        open_on_init = local->flags & (XI86_OPEN_ON_INIT | XI86_ALWAYS_CORE);
 	
 	dev = AddInputDevice(local->device_control,
 			     open_on_init);
+#ifdef DEBUG
+        ErrorF("activated device %d: %s\n", dev->id, local->name);
+#endif
 	if (dev == NULL)
 	    FatalError("Too many input devices");
 	
@@ -322,18 +251,8 @@ xf86ActivateDevice(LocalDevicePtr local)
 	
 	xf86XinputFinalizeInit(dev);
 
-	/*
-	 * XXX Can a single device instance be both core keyboard and
-	 * core pointer?  If so, this should be changed.
-	 */
-	if (local->flags & XI86_CORE_POINTER)
-	    RegisterPointerDevice(dev);
-	else if (local->flags & XI86_CORE_KEYBOARD)
-	    RegisterKeyboardDevice(dev);
-#ifdef XINPUT
-	else
+        dev->coreEvents = local->flags & XI86_ALWAYS_CORE;
 	    RegisterOtherDevice(dev);
-#endif
 
 	if (serverGeneration == 1) 
 	    xf86Msg(X_INFO, "XINPUT: Adding extended input device \"%s\" (type: %s)\n",
@@ -375,11 +294,11 @@ OpenInputDevice(DeviceIntPtr	dev,
 	*status = BadDevice;
     } else {
 	if (!dev->public.on) {
-	    if (!EnableDevice(dev)) {
-		*status = BadDevice;
-	    } else {
+            if (EnableDevice(dev)) {
 		/* to prevent ProcXOpenDevice to call EnableDevice again */
 		dev->startup = FALSE;
+            } else {
+                *status = BadDevice;
 	    }
 	}
     }
@@ -515,7 +434,6 @@ ChangePointerDevice (
 void
 CloseInputDevice (DeviceIntPtr d, ClientPtr client)
 {
-  ErrorF("ProcXCloseDevice to close or not ?\n");
 }
 
 
@@ -699,245 +617,6 @@ NewInputDeviceRequest (InputOption *options)
 }
 
 /*
- * adapted from mieq.c to support extended events
- *
- */
-#define QUEUE_SIZE  256
-
-typedef struct _Event {
-    xEvent	event;
-#ifdef XINPUT
-  deviceValuator val;
-#endif
-    ScreenPtr	pScreen;
-} EventRec, *EventPtr;
-
-typedef struct _EventQueue {
-    HWEventQueueType head, tail;
-    CARD32	lastEventTime;	    /* to avoid time running backwards */
-    Bool	lastMotion;
-    EventRec	events[QUEUE_SIZE]; /* static allocation for signals */
-    DevicePtr	pKbd, pPtr;	    /* device pointer, to get funcs */
-    ScreenPtr	pEnqueueScreen;	    /* screen events are being delivered to */
-    ScreenPtr	pDequeueScreen;	    /* screen events are being dispatched to */
-} EventQueueRec, *EventQueuePtr;
-
-static EventQueueRec xf86EventQueue;
-
-Bool
-xf86eqInit (DevicePtr pKbd, DevicePtr pPtr)
-{
-    xf86EventQueue.head = xf86EventQueue.tail = 0;
-    xf86EventQueue.lastEventTime = GetTimeInMillis ();
-    xf86EventQueue.pKbd = pKbd;
-    xf86EventQueue.pPtr = pPtr;
-    xf86EventQueue.lastMotion = FALSE;
-    xf86EventQueue.pEnqueueScreen = screenInfo.screens[0];
-    xf86EventQueue.pDequeueScreen = xf86EventQueue.pEnqueueScreen;
-    SetInputCheck (&xf86EventQueue.head, &xf86EventQueue.tail);
-    return TRUE;
-}
-
-/*
- * Must be reentrant with ProcessInputEvents.  Assumption: xf86eqEnqueue
- * will never be interrupted.  If this is called from both signal
- * handlers and regular code, make sure the signal is suspended when
- * called from regular code.
- */
-
-_X_EXPORT void
-xf86eqEnqueue (xEvent *e)
-{
-    int		oldtail, newtail;
-    Bool	isMotion;
-#ifdef XINPUT
-    int		count;
-    
-    xf86AssertBlockedSIGIO ("xf86eqEnqueue");
-    switch (e->u.u.type) {
-    case KeyPress:
-    case KeyRelease:
-#ifdef XFreeXDGA
-	/* we do this here, because nobody seems to be calling
-	   xf86PostKeyEvent().  We can't steal MotionNotify events here
-	   because the motion-relative information has been lost already. */
-	if(DGAStealKeyEvent(xf86EventQueue.pEnqueueScreen->myNum, e))
-	    return;
-#endif
-	/* fall through */
-    case ButtonPress:
-    case ButtonRelease:
-    case MotionNotify:
-        count = 1;
-        break;
-    default:
-#ifdef XFreeXDGA
-	if (DGAIsDgaEvent (e))
-	{
-	    count = 1;
-	    break;
-	}
-#endif
-	if (!((deviceKeyButtonPointer *) e)->deviceid & MORE_EVENTS) {
-            count = 1;
-	}
-        else {
-	    count = 2;
-	}
-        break;
-    }
-#endif
-
-    oldtail = xf86EventQueue.tail;
-    isMotion = e->u.u.type == MotionNotify;
-    if (isMotion && xf86EventQueue.lastMotion && oldtail != xf86EventQueue.head) {
-	if (oldtail == 0)
-	    oldtail = QUEUE_SIZE;
-	oldtail = oldtail - 1;
-    }
-    else {
-    	newtail = oldtail + 1;
-    	if (newtail == QUEUE_SIZE)
-	    newtail = 0;
-    	/* Toss events which come in late */
-    	if (newtail == xf86EventQueue.head)
-	    return;
-	xf86EventQueue.tail = newtail;
-    }
-    
-    xf86EventQueue.lastMotion = isMotion;
-    xf86EventQueue.events[oldtail].event = *e;
-#ifdef XINPUT
-    if (count == 2) {
-	xf86EventQueue.events[oldtail].val = *((deviceValuator *) (((deviceKeyButtonPointer *) e)+1));
-    }
-#endif
-    /*
-     * Make sure that event times don't go backwards - this
-     * is "unnecessary", but very useful
-     */
-    if (e->u.keyButtonPointer.time < xf86EventQueue.lastEventTime &&
-	xf86EventQueue.lastEventTime - e->u.keyButtonPointer.time < 10000) {
-	
-	xf86EventQueue.events[oldtail].event.u.keyButtonPointer.time =
-	    xf86EventQueue.lastEventTime;
-    }
-    xf86EventQueue.events[oldtail].pScreen = xf86EventQueue.pEnqueueScreen;
-}
-
-/*
- * Call this from ProcessInputEvents()
- */
-void
-xf86eqProcessInputEvents ()
-{
-    EventRec	*e;
-    int		x, y;
-    struct {
-	xEvent	event;
-#ifdef XINPUT
-	deviceValuator	val;
-#endif
-    }		xe;
-#ifdef XINPUT
-    DeviceIntPtr                dev;
-    int                         id, count;
-    deviceKeyButtonPointer      *dev_xe;
-#endif
-
-    while (xf86EventQueue.head != xf86EventQueue.tail) {
-	if (screenIsSaved == SCREEN_SAVER_ON)
-	    SaveScreens (SCREEN_SAVER_OFF, ScreenSaverReset);
-#ifdef DPMSExtension
-	else if (DPMSPowerLevel != DPMSModeOn)
-	    SetScreenSaverTimer();
-
-        if (DPMSPowerLevel != DPMSModeOn)
-            DPMSSet(DPMSModeOn);
-#endif
-
-	e = &xf86EventQueue.events[xf86EventQueue.head];
-	/*
-	 * Assumption - screen switching can only occur on motion events
-	 */
-	if (e->pScreen != xf86EventQueue.pDequeueScreen) {
-	    xf86EventQueue.pDequeueScreen = e->pScreen;
-	    x = e->event.u.keyButtonPointer.rootX;
-	    y = e->event.u.keyButtonPointer.rootY;
-	    if (xf86EventQueue.head == QUEUE_SIZE - 1)
-	    	xf86EventQueue.head = 0;
-	    else
-	    	++xf86EventQueue.head;
-	    NewCurrentScreen (xf86EventQueue.pDequeueScreen, x, y);
-	}
-	else {
-	    xe.event = e->event;
-	    xe.val = e->val;
-	    if (xf86EventQueue.head == QUEUE_SIZE - 1)
-	    	xf86EventQueue.head = 0;
-	    else
-	    	++xf86EventQueue.head;
-	    switch (xe.event.u.u.type) {
-	    case KeyPress:
-	    case KeyRelease:
-	    	(*xf86EventQueue.pKbd->processInputProc)
-		    (&xe.event, (DeviceIntPtr)xf86EventQueue.pKbd, 1);
-	    	break;
-#ifdef XINPUT
-            case ButtonPress:
-            case ButtonRelease:
-            case MotionNotify:
-	    	(*(inputInfo.pointer->public.processInputProc))
-		    (&xe.event, (DeviceIntPtr)inputInfo.pointer, 1);
-		break;
-
-	    default:
-#ifdef XFreeXDGA
-		if (DGADeliverEvent (xf86EventQueue.pDequeueScreen, &xe.event))
-		    break;
-#endif
-		dev_xe = (deviceKeyButtonPointer *) &xe.event;
-		id = dev_xe->deviceid & DEVICE_BITS;
-		if (!(dev_xe->deviceid & MORE_EVENTS)) {
-		    count = 1;
-		}
-		else {
-		    count = 2;
-		}
-		dev = LookupDeviceIntRec(id);
-		if (dev == NULL) {
-		    ErrorF("LookupDeviceIntRec id=0x%x not found\n", id);
-/*                   FatalError("xf86eqProcessInputEvents : device not found.\n");
- */
-		    break;
-		}
-		if (!dev->public.processInputProc) {
-		    FatalError("xf86eqProcessInputEvents : device has no input proc.\n");
-		    break;
-		}
-		(*dev->public.processInputProc)(&xe.event, dev, count);
-#else
-	    default:
-	    	(*xf86EventQueue.pPtr->processInputProc)
-		    (&xe.event, (DeviceIntPtr)xf86EventQueue.pPtr, 1);
-#endif
-	    	break;
-	    }
-	}
-    }
-}
-
-void
-xf86eqSwitchScreen(ScreenPtr	pScreen,
-		   Bool		fromDIX)
-{
-    xf86EventQueue.pEnqueueScreen = pScreen;
-  
-    if (fromDIX)
-	xf86EventQueue.pDequeueScreen = pScreen;
-}
-
-/* 
  * convenient functions to post events
  */
 
@@ -949,213 +628,53 @@ xf86PostMotionEvent(DeviceIntPtr	device,
 		    ...)
 {
     va_list			var;
-    int				loop;
-    xEvent			xE[2];
-    deviceKeyButtonPointer	*xev  = (deviceKeyButtonPointer*) xE;
-    deviceValuator		*xv   = (deviceValuator*) xev+1;
-    LocalDevicePtr		local = (LocalDevicePtr) device->public.devicePrivate;
-    char			*buff = 0;
-    Time			current;
-    Bool			is_core = xf86IsCorePointer(device);
-    Bool			is_shared = xf86ShareCorePointer(device);
+    int i = 0, nevents = 0;
     Bool			drag = xf86SendDragEvents(device);
-    ValuatorClassPtr		val = device->valuator;
-    int				valuator[6];
-    int				oldaxis[6];
-    int				*axisvals;
-    int				dx = 0, dy = 0;
-    float			mult;
-    int				x, y;
-    int				loop_start;
-    int				i;
-    int				num;
-    
-    DBG(5, ErrorF("xf86PostMotionEvent BEGIN 0x%x(%s) is_core=%s is_shared=%s is_absolute=%s\n",
-		  device, device->name,
-		  is_core ? "True" : "False",
-		  is_shared ? "True" : "False",
-		  is_absolute ? "True" : "False"));
-    
-    xf86Info.lastEventTime = xev->time = current = GetTimeInMillis();
-    
-    if (!is_core) {
-      if (HAS_MOTION_HISTORY(local)) {
-	buff = ((char *)local->motion_history +
-		(sizeof(INT32) * local->dev->valuator->numAxes + sizeof(Time)) * local->last);
-      }
-    }
+    LocalDevicePtr local = (LocalDevicePtr) device->public.devicePrivate;
+    xEvent *xE = NULL;
+    int *valuators = NULL;
+    int flags = 0;
 
-    if (num_valuators && (!val || (first_valuator + num_valuators > val->numAxes))) {
-	ErrorF("Bad valuators reported for device \"%s\"\n", device->name);
-	return;
-    }
+#ifdef DEBUG
+    ErrorF("xf8PostMotionEvent enter: is_absolute %s\n",
+           is_absolute ? "yes" : "no");
+#endif
+    if (is_absolute)
+        flags = POINTER_ABSOLUTE;
+    else
+        flags = POINTER_RELATIVE | POINTER_ACCELERATE;
 
-    axisvals = val->axisVal;
+    valuators = xcalloc(sizeof(int), num_valuators);
     
     va_start(var, num_valuators);
-
-    loop_start = first_valuator;
-    for(loop=0; loop<num_valuators; loop++) {
-	
-	valuator[loop%6] = va_arg(var,int);
-	
-	if (loop % 6 == 5 || loop == num_valuators - 1)	{
-	    num = loop % 6 + 1;
-	    /*
-	     * Adjust first two relative valuators
-	     */
-	    if (!is_absolute && num_valuators >= 2 && loop_start == 0) {
-		
-		dx = valuator[0];
-		dy = valuator[1];
-
-		/*
-		 * Accelerate
-		 */
-		if (device->ptrfeed && device->ptrfeed->ctrl.num) {
-		    /* modeled from xf86Events.c */
-		    if (device->ptrfeed->ctrl.threshold) {
-			if ((abs(dx) + abs(dy)) >= device->ptrfeed->ctrl.threshold) {
-			    local->dxremaind = ((float)dx * (float)(device->ptrfeed->ctrl.num)) /
-			        (float)(device->ptrfeed->ctrl.den) + local->dxremaind;
-			    valuator[0] = (int)local->dxremaind;
-			    local->dxremaind = local->dxremaind - (float)valuator[0];
-			    
-			    local->dyremaind = ((float)dy * (float)(device->ptrfeed->ctrl.num)) /
-			        (float)(device->ptrfeed->ctrl.den) + local->dyremaind;
-			    valuator[1] = (int)local->dyremaind;
-			    local->dyremaind = local->dyremaind - (float)valuator[1];
-			}
-		    }
-		    else if (dx || dy) {
-			mult = pow((float)(dx*dx+dy*dy),
-				   ((float)(device->ptrfeed->ctrl.num) /
-				    (float)(device->ptrfeed->ctrl.den) - 1.0) / 
-				   2.0) / 2.0;
-			if (dx) {
-			    local->dxremaind = mult * (float)dx + local->dxremaind;
-			    valuator[0] = (int)local->dxremaind;
-			    local->dxremaind = local->dxremaind - (float)valuator[0];
-			}
-			if (dy) {
-			    local->dyremaind = mult * (float)dy + local->dyremaind;
-			    valuator[1] = (int)local->dyremaind;
-			    local->dyremaind = local->dyremaind - (float)valuator[1];
-			}
-		    }
-		    DBG(6, ErrorF("xf86PostMotionEvent acceleration v0=%d v1=%d\n",
-				  valuator[0], valuator[1]));
+    for (i = 0; i < num_valuators; i++) {
+        valuators[i] = va_arg(var, int);
+#ifdef DEBUG
+        ErrorF("valuator %d: %d\n", i, valuators[i]);
+#endif
 		}
 		
-		/*
-		 * Map current position back to device space in case
-		 * the cursor was warped
-		 */
-		if (is_core || is_shared)
-		{
-		    miPointerPosition (&x, &y);
-		    if (local->reverse_conversion_proc)
-			(*local->reverse_conversion_proc)(local, x, y, axisvals);
-		    else
-		    {
-			axisvals[0] = x;
-			axisvals[1] = y;
-		    }
-		}
-	    }
+    nevents = GetPointerEvents(&xE, device, MotionNotify, 0,
+                               flags, num_valuators, valuators);
 		
-	    /*
-	     * Update axes
-	     */
-	    for (i = 0; i < num; i++)
-	    {
-		oldaxis[i] = axisvals[loop_start + i];
-	        if (is_absolute)
-		    axisvals[loop_start + i] = valuator[i];
-		else
-		    axisvals[loop_start + i] += valuator[i];
+    for (i = 0; i < nevents; i++) {
+        if (xE->u.keyButtonPointer.time > xf86Info.lastEventTime)
+            xf86Info.lastEventTime = xE->u.keyButtonPointer.time;
+        mieqEnqueue(xE++);
 	    }
 		
-	    /*
-	     * Deliver extension event
-	     */
-	    if (!is_core) {
-		xev->type = DeviceMotionNotify;
-		xev->detail = 0;
-		xev->deviceid = device->id | MORE_EVENTS;
-            
-		xv->type = DeviceValuator;
-		xv->deviceid = device->id;
-	    
-		xv->device_state = 0;
-		xv->num_valuators = num;
-		xv->first_valuator = loop_start;
-		memcpy (&xv->valuator0, &axisvals[loop_start],
-			sizeof(INT32)*xv->num_valuators);
-		
+#if 0
 		if (HAS_MOTION_HISTORY(local)) {
-		    *(Time*)buff = current;
-		    memcpy(buff+sizeof(Time)+sizeof(INT32)*xv->first_valuator,
-			   &axisvals[loop_start],
-			   sizeof(INT32)*xv->num_valuators);
-		}
-		ENQUEUE(xE);
+      buff = ((char *)local->motion_history +
+              (sizeof(INT32) * local->dev->valuator->numAxes + sizeof(Time)) * local->last);
 	    }
 	    
-	    /*
-	     * Deliver core event
-	     */
-	    if (is_core ||
-		(is_shared && num_valuators >= 2 && loop_start == 0)) {
-#ifdef XFreeXDGA
-		/*
-		 * Let DGA peek at the event and steal it
-		 */
-		xev->type = MotionNotify;
-		xev->detail = 0;
-		if (is_absolute)
-		{
-		    dx = axisvals[0] - oldaxis[0];
-		    dy = axisvals[1] - oldaxis[1];
-		}
-		if (DGAStealMouseEvent(xf86EventQueue.pEnqueueScreen->myNum,
-				       xE, dx, dy))
-		    continue;
-#endif
-		if (!(*local->conversion_proc)(local, loop_start, num,
-					       axisvals[0], axisvals[1],
-					       axisvals[2], axisvals[3],
-					       axisvals[4], axisvals[5],
-					       &x, &y))
-		    continue;
-
-		if (drag)
-		    miPointerAbsoluteCursor (x, y, current);
-		/*
-		 * Retrieve the position
-		 */
-		miPointerPosition (&x, &y);
-		if (local->reverse_conversion_proc)
-		    (*local->reverse_conversion_proc)(local, x, y, axisvals);
-		else
-		{
-		    axisvals[0] = x;
-		    axisvals[1] = y;
-		}
-	    }
-	    loop_start += 6;
-	}
-    }
-    va_end(var);
     if (HAS_MOTION_HISTORY(local)) {
 	local->last = (local->last + 1) % device->valuator->numMotionEvents;
 	if (local->last == local->first)
 	    local->first = (local->first + 1) % device->valuator->numMotionEvents;
     }
-    DBG(5, ErrorF("xf86PostMotionEvent END   0x%x(%s) is_core=%s is_shared=%s\n",
-		  device, device->name,
-		  is_core ? "True" : "False",
-		  is_shared ? "True" : "False"));
+#endif
 }
 
 _X_EXPORT void
@@ -1167,13 +686,13 @@ xf86PostProximityEvent(DeviceIntPtr	device,
 {
     va_list			var;
     int				loop;
-    xEvent			xE[2];
-    deviceKeyButtonPointer	*xev = (deviceKeyButtonPointer*) xE;
-    deviceValuator		*xv = (deviceValuator*) xev+1;
-    ValuatorClassPtr		val = device->valuator;
-    Bool			is_core = xf86IsCorePointer(device);
-    Bool			is_absolute = val && ((val->mode & 1) == Relative);
+    Bool			is_core = device->coreEvents;
     
+#ifdef DEBUG
+    ErrorF("xf86PostProximityEvent enter\n");
+#endif
+    
+#if 0
     DBG(5, ErrorF("xf86PostProximityEvent BEGIN 0x%x(%s) prox=%s is_core=%s is_absolute=%s\n",
 		  device, device->name, is_in ? "true" : "false",
 		  is_core ? "True" : "False",
@@ -1231,7 +750,7 @@ xf86PostProximityEvent(DeviceIntPtr	device,
 
 		xv->num_valuators = (loop % 6) + 1;
 		xv->first_valuator = first_valuator + (loop / 6) * 6;
-		ENQUEUE(xE);
+                mieqEnqueue(xE);
 	    }
 	}
 	va_end(var);
@@ -1242,13 +761,13 @@ xf86PostProximityEvent(DeviceIntPtr	device,
 
 	xv->num_valuators = 0;
 	xv->first_valuator = 0;
-	ENQUEUE(xE);
+        mieqEnqueue(xE);
     }
     DBG(5, ErrorF("xf86PostProximityEvent END   0x%x(%s) prox=%s is_core=%s is_absolute=%s\n",
 		  device, device->name, is_in ? "true" : "false",
 		  is_core ? "True" : "False",
 		  is_absolute ? "True" : "False"));
-    
+#endif
 }
 
 _X_EXPORT void
@@ -1261,101 +780,38 @@ xf86PostButtonEvent(DeviceIntPtr	device,
 		    ...)
 {
     va_list			var;
-    int				loop;
-    xEvent			xE[2];
-    deviceKeyButtonPointer	*xev	        = (deviceKeyButtonPointer*) xE;
-    deviceValuator		*xv	        = (deviceValuator*) xev+1;
-    ValuatorClassPtr		val		= device->valuator;
-    Bool			is_core		= xf86IsCorePointer(device);
-    Bool			is_shared       = xf86ShareCorePointer(device);
-    
-    DBG(5, ErrorF("xf86PostButtonEvent BEGIN 0x%x(%s) button=%d down=%s is_core=%s is_shared=%s is_absolute=%s\n",
+    int *valuators = NULL;
+    int i = 0, nevents = 0;
+    xEvent *events = NULL;
+    
+#ifdef DEBUG
+    ErrorF("xf86PostButtonEvent BEGIN 0x%x(%s) button=%d down=%s is_absolute=%s\n",
 		  device, device->name, button,
 		  is_down ? "True" : "False",
-		  is_core ? "True" : "False",
-		  is_shared ? "True" : "False",
-		  is_absolute ? "True" : "False"));
-    
-    /* Check the core pointer button state not to send an inconsistent
-     * event. This can happen with the AlwaysCore feature.
-     */
-    if ((is_core || is_shared) && 
-	!xf86CheckButton(device->button->map[button], is_down)) 
-    {
-	return;
-    }
-    
-    if (num_valuators && (!val || (first_valuator + num_valuators > val->numAxes))) {
-	ErrorF("Bad valuators reported for device \"%s\"\n", device->name);
-	return;
-    }
-
-    if (!is_core) {
-	xev->type = is_down ? DeviceButtonPress : DeviceButtonRelease;
-	xev->detail = button;
-	xev->deviceid = device->id | MORE_EVENTS;
-	    
-	xv->type = DeviceValuator;
-	xv->deviceid = device->id;
-	xv->device_state = 0;
+                  is_absolute ? "True" : "False");
+#endif
 
-	if (num_valuators != 0) {
-	    int			*axisvals = val->axisVal;
+    valuators = xcalloc(sizeof(int), num_valuators);
 	    
 	    va_start(var, num_valuators);
-      
-	    for(loop=0; loop<num_valuators; loop++) {
-		switch (loop % 6) {
-		case 0:
-		    xv->valuator0 = is_absolute ? va_arg(var, int) : axisvals[loop];
-		    break;
-		case 1:
-		    xv->valuator1 = is_absolute ? va_arg(var, int) : axisvals[loop];
-		    break;
-		case 2:
-		    xv->valuator2 = is_absolute ? va_arg(var, int) : axisvals[loop];
-		    break;
-		case 3:
-		    xv->valuator3 = is_absolute ? va_arg(var, int) : axisvals[loop];
-		    break;
-		case 4:
-		    xv->valuator4 = is_absolute ? va_arg(var, int) : axisvals[loop];
-		    break;
-		case 5:
-		    xv->valuator5 = is_absolute ? va_arg(var, int) : axisvals[loop];
-		    break;
-		}
-		if ((loop % 6 == 5) || (loop == num_valuators - 1)) {
-		    xf86Info.lastEventTime = xev->time = GetTimeInMillis();
-		    xv->num_valuators = (loop % 6) + 1;
-		    xv->first_valuator = first_valuator + (loop / 6) * 6;
-		    ENQUEUE(xE);
-		    
-		}
-	    }
-	    va_end(var);
-	}
-	else {
-	    /* no valuator */
-	    xf86Info.lastEventTime = xev->time = GetTimeInMillis();
-	    xv->num_valuators = 0;
-	    xv->first_valuator = 0;
-	    ENQUEUE(xE);
-	}
+    for (i = 0; i < num_valuators; i++) {
+#ifdef DEBUG
+        ErrorF("valuator %d: %d\n", i, valuators[i]);
+#endif
+        valuators[i] = va_arg(var, int);
     }
 
-    /* removed rootX/rootY as DIX sets these fields */
-    if (is_core || is_shared) {
-	xE->u.u.type = is_down ? ButtonPress : ButtonRelease;
-	xE->u.u.detail =  device->button->map[button];
-	xf86Info.lastEventTime = xE->u.keyButtonPointer.time = GetTimeInMillis();
+    nevents = GetPointerEvents(&events, device,
+                               is_down ? ButtonPress : ButtonRelease, button,
+                               is_absolute ? POINTER_ABSOLUTE :
+                                             POINTER_RELATIVE,
+                               num_valuators, valuators);
 	
-#ifdef XFreeXDGA
-	if (!DGAStealMouseEvent(xf86EventQueue.pEnqueueScreen->myNum, xE, 0, 0))
-#endif
-	    ENQUEUE(xE);
+    for (i = 0; i < nevents; i++) {
+        if (events->u.keyButtonPointer.time > xf86Info.lastEventTime)
+            xf86Info.lastEventTime = events->u.keyButtonPointer.time;
+        mieqEnqueue(events++);
     }
-    DBG(5, ErrorF("xf86PostButtonEvent END\n"));
 }
 
 _X_EXPORT void
@@ -1368,54 +824,38 @@ xf86PostKeyEvent(DeviceIntPtr	device,
 		 ...)
 {
     va_list			var;
-    int				loop;
-    xEvent			xE[2];
-    deviceKeyButtonPointer	*xev = (deviceKeyButtonPointer*) xE;
-    deviceValuator		*xv = (deviceValuator*) xev+1;
-    
+    int i = 0, nevents = 0, *valuators = NULL;
+    xEvent *events = NULL;
+
+    /* instil confidence in the user */
+    ErrorF("this function has never been tested properly.  if things go quite "
+           "badly south after this message, then xf86PostKeyEvent is "
+           "broken.\n");
+
+    /* the spec says that dkp/dkr events should only get valuators in
+     * absolute mode.  the spec knows all.  BOW BEFORE etc. */
+    if (is_absolute) {
+        nevents = GetKeyboardValuatorEvents(&events, device,
+                                            is_down ? KeyPress : KeyRelease,
+                                            key_code, num_valuators,
+                                            valuators);
+        valuators = xcalloc(sizeof(int), num_valuators);
     va_start(var, num_valuators);
-
-    for(loop=0; loop<num_valuators; loop++) {
-	switch (loop % 6) {
-	case 0:
-	    xv->valuator0 = va_arg(var, int);
-	    break;
-	case 1:
-	    xv->valuator1 = va_arg(var, int);
-	    break;
-	case 2:
-	    xv->valuator2 = va_arg(var, int);
-	    break;
-	case 3:
-	    xv->valuator3 = va_arg(var, int);
-	    break;
-	case 4:
-	    xv->valuator4 = va_arg(var, int);
-	    break;
-	case 5:
-	    xv->valuator5 = va_arg(var, int);
-	    break;
+        for (i = 0; i < num_valuators; i++)
+            valuators[i] = va_arg(var, int);
+        va_end(var);
 	}
-	if (((loop % 6 == 5) || (loop == num_valuators - 1))) {
-	    xev->type = is_down ? DeviceKeyPress : DeviceKeyRelease;
-	    xev->detail = key_code;
-	    
-	    xf86Info.lastEventTime = xev->time = GetTimeInMillis();
-	    xev->deviceid = device->id | MORE_EVENTS;
-	    
-	    xv->type = DeviceValuator;
-	    xv->deviceid = device->id;
-	    xv->device_state = 0;
-	    /* if the device is in the relative mode we don't have to send valuators */
-	    xv->num_valuators = is_absolute ? (loop % 6) + 1 : 0;
-	    xv->first_valuator = first_valuator + (loop / 6) * 6;
-	    
-	    ENQUEUE(xE);
-	    /* if the device is in the relative mode only one event is needed */
-	    if (!is_absolute) break;
+    else {
+        nevents = GetKeyboardEvents(&events, device,
+                                    is_down ? KeyPress : KeyRelease,
+                                    key_code);
 	}
+
+    for (i = 0; i < nevents; i++) {
+        if (events->u.keyButtonPointer.time > xf86Info.lastEventTime)
+            xf86Info.lastEventTime = events->u.keyButtonPointer.time;
+        mieqEnqueue(events++);
     }
-    va_end(var);
 }
 
 _X_EXPORT void
@@ -1423,21 +863,22 @@ xf86PostKeyboardEvent(DeviceIntPtr      device,
                       unsigned int      key_code,
                       int               is_down)
 {
-    xEvent                      xE[2];
-    deviceKeyButtonPointer      *xev = (deviceKeyButtonPointer*) xE;
-
-    if (xf86IsCoreKeyboard(device)) {
-        xev->type = is_down ? KeyPress : KeyRelease;
-    } else {
-        xev->type = is_down ? DeviceKeyPress : DeviceKeyRelease;
-    }
-    xev->detail = key_code;
-    xf86Info.lastEventTime = xev->time = GetTimeInMillis();
+    xEvent *events = NULL;
+    int nevents = 0, i = 0;
 
-#ifdef XFreeXDGA
-    /* if(!DGAStealKeyEvent(xf86EventQueue.pEnqueueScreen->myNum, xE)) */
+#ifdef DEBUG
+    ErrorF("xf86PKE enter: keycode %d is %s, device %d\n", key_code,
+           is_down ? "down" : "up", device->id);
 #endif
-    ENQUEUE(xE);
+
+    nevents = GetKeyboardEvents(&events, device,
+                                is_down ? KeyPress : KeyRelease, key_code);
+
+    for (i = 0; i < nevents; i++) {
+        if (events->u.keyButtonPointer.time > xf86Info.lastEventTime)
+            xf86Info.lastEventTime = events->u.keyButtonPointer.time;
+        mieqEnqueue(events++);
+    }
 }
 
 /* 
@@ -1550,7 +991,7 @@ xf86XInputSetScreen(LocalDevicePtr	local,
 		    int			x,
 		    int			y)
 {
-    if ((xf86IsCorePointer(local->dev) || xf86ShareCorePointer(local->dev)) &&
+    if (local->dev->coreEvents &&
 	(miPointerCurrentScreen() != screenInfo.screens[screen_number])) {
 	miPointerSetNewScreen (screen_number, x, y);
     }
@@ -1562,6 +1003,9 @@ xf86InitValuatorAxisStruct(DeviceIntPtr dev, int axnum, int minval, int maxval,
 			   int resolution, int min_res, int max_res)
 {
 #ifdef XINPUT
+    if (!dev || !dev->valuator)
+        return;
+
     if (maxval == -1) {
 	if (axnum == 0)
 	    maxval = screenInfo.screens[0]->width - 1;
@@ -1582,10 +1026,14 @@ _X_EXPORT void
 xf86InitValuatorDefaults(DeviceIntPtr dev, int axnum)
 {
 #ifdef XINPUT
-    if (axnum == 0)
+    if (axnum == 0) {
 	dev->valuator->axisVal[0] = screenInfo.screens[0]->width / 2;
-    else if (axnum == 1)
+        dev->valuator->lastx = dev->valuator->axisVal[0];
+    }
+    else if (axnum == 1) {
 	dev->valuator->axisVal[1] = screenInfo.screens[0]->height / 2;
+        dev->valuator->lasty = dev->valuator->axisVal[1];
+    }
 #endif
 }
 
