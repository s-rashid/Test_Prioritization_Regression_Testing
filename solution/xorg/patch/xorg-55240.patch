diff --git a/hw/dmx/dmxgc.c b/hw/dmx/dmxgc.c
index f10f9a0..703aeb3 100644
--- a/hw/dmx/dmxgc.c
+++ b/hw/dmx/dmxgc.c
@@ -83,15 +83,18 @@ static GCOps dmxGCOps = {
 };
 
 /** Initialize the GC on \a pScreen */
-Bool dmxInitGC(ScreenPtr pScreen)
+Bool
+dmxInitGC(ScreenPtr pScreen)
 {
-    if (!dixRegisterPrivateKey(&dmxGCPrivateKeyRec, PRIVATE_GC, sizeof(dmxGCPrivRec)))
+    if (!dixRegisterPrivateKey
+        (&dmxGCPrivateKeyRec, PRIVATE_GC, sizeof(dmxGCPrivRec)))
             return FALSE;
     return TRUE;
 }
 
 /** Create the GC on the back-end server. */
-void dmxBECreateGC(ScreenPtr pScreen, GCPtr pGC)
+void
+dmxBECreateGC(ScreenPtr pScreen, GCPtr pGC)
 {
     DMXScreenInfo *dmxScreen = &dmxScreens[pScreen->myNum];
     dmxGCPrivPtr   pGCPriv = DMX_GET_GC_PRIV(pGC);
@@ -116,7 +119,8 @@ void dmxBECreateGC(ScreenPtr pScreen, GCPtr pGC)
 
 /** Create a graphics context on the back-end server associated /a pGC's
  *  screen. */
-Bool dmxCreateGC(GCPtr pGC)
+Bool
+dmxCreateGC(GCPtr pGC)
 {
     ScreenPtr      pScreen = pGC->pScreen;
     DMXScreenInfo *dmxScreen = &dmxScreens[pScreen->myNum];
@@ -133,7 +137,8 @@ Bool dmxCreateGC(GCPtr pGC)
 
 	if (dmxScreen->beDisplay) {
 	    dmxBECreateGC(pScreen, pGC);
-	} else {
+        }
+        else {
 	    pGCPriv->gc = NULL;
 	}
 
@@ -150,7 +155,8 @@ Bool dmxCreateGC(GCPtr pGC)
 
 /** Validate a graphics context, \a pGC, locally in the DMX server and
  *  recompute the composite clip, if necessary. */
-void dmxValidateGC(GCPtr pGC, unsigned long changes, DrawablePtr pDrawable)
+void
+dmxValidateGC(GCPtr pGC, unsigned long changes, DrawablePtr pDrawable)
 {
     dmxGCPrivPtr pGCPriv = DMX_GET_GC_PRIV(pGC);
 
@@ -165,7 +171,8 @@ void dmxValidateGC(GCPtr pGC, unsigned long changes, DrawablePtr pDrawable)
 	 * epilogue.
 	 */
 	pGCPriv->ops = pGC->ops;
-    } else {
+    }
+    else {
 	pGCPriv->ops = NULL;
     }
 
@@ -187,7 +194,8 @@ void dmxValidateGC(GCPtr pGC, unsigned long changes, DrawablePtr pDrawable)
 
 /** Set the values in the graphics context on the back-end server
  *  associated with \a pGC's screen. */
-void dmxChangeGC(GCPtr pGC, unsigned long mask)
+void
+dmxChangeGC(GCPtr pGC, unsigned long mask)
 {
     ScreenPtr      pScreen = pGC->pScreen;
     DMXScreenInfo *dmxScreen = &dmxScreens[pScreen->myNum];
@@ -222,64 +230,88 @@ void dmxChangeGC(GCPtr pGC, unsigned long mask)
 	/* Make sure that the tile.pixmap is set, just in case the user
          * set GCTile in the mask but forgot to set vals.pixmap
 	 */
-	if (pGC->tile.pixmap) mask |= GCTile;
+        if (pGC->tile.pixmap)
+            mask |= GCTile;
 
 	/* This only happens once when the GC is created */
 	pGCPriv->msc = FALSE;
     }
 
     /* Update back-end server's gc */
-    if (mask & GCFunction)          v.function = pGC->alu;
-    if (mask & GCPlaneMask)         v.plane_mask = pGC->planemask;
-    if (mask & GCForeground)        v.foreground = pGC->fgPixel;
-    if (mask & GCBackground)        v.background = pGC->bgPixel;
-    if (mask & GCLineWidth)         v.line_width = pGC->lineWidth;
-    if (mask & GCLineStyle)         v.line_style = pGC->lineStyle;
-    if (mask & GCCapStyle)          v.cap_style = pGC->capStyle;
-    if (mask & GCJoinStyle)         v.join_style = pGC->joinStyle;
-    if (mask & GCFillStyle)         v.fill_style = pGC->fillStyle;
-    if (mask & GCFillRule)          v.fill_rule = pGC->fillRule;
+    if (mask & GCFunction)
+        v.function = pGC->alu;
+    if (mask & GCPlaneMask)
+        v.plane_mask = pGC->planemask;
+    if (mask & GCForeground)
+        v.foreground = pGC->fgPixel;
+    if (mask & GCBackground)
+        v.background = pGC->bgPixel;
+    if (mask & GCLineWidth)
+        v.line_width = pGC->lineWidth;
+    if (mask & GCLineStyle)
+        v.line_style = pGC->lineStyle;
+    if (mask & GCCapStyle)
+        v.cap_style = pGC->capStyle;
+    if (mask & GCJoinStyle)
+        v.join_style = pGC->joinStyle;
+    if (mask & GCFillStyle)
+        v.fill_style = pGC->fillStyle;
+    if (mask & GCFillRule)
+        v.fill_rule = pGC->fillRule;
     if (mask & GCTile) {
 	if (pGC->tileIsPixel) {
 	    mask &= ~GCTile;
-	} else {
+        }
+        else {
 	    dmxPixPrivPtr  pPixPriv = DMX_GET_PIXMAP_PRIV(pGC->tile.pixmap);
+
 	    v.tile = (Drawable)pPixPriv->pixmap;
 	}
     }
     if (mask & GCStipple) {
 	dmxPixPrivPtr  pPixPriv = DMX_GET_PIXMAP_PRIV(pGC->stipple);
+
 	v.stipple = (Drawable)pPixPriv->pixmap;
     }
-    if (mask & GCTileStipXOrigin)   v.ts_x_origin = pGC->patOrg.x; 
-    if (mask & GCTileStipYOrigin)   v.ts_y_origin = pGC->patOrg.y;
+    if (mask & GCTileStipXOrigin)
+        v.ts_x_origin = pGC->patOrg.x;
+    if (mask & GCTileStipYOrigin)
+        v.ts_y_origin = pGC->patOrg.y;
     if (mask & GCFont) {
 	if (dmxScreen->beDisplay) {
 	    dmxFontPrivPtr  pFontPriv;
+
 	    pFontPriv = FontGetPrivate(pGC->font, dmxFontPrivateIndex);
 	    v.font = pFontPriv->font[pScreen->myNum]->fid;
-	} else {
+        }
+        else {
 	    mask &= ~GCFont;
 	}
     }
-    if (mask & GCSubwindowMode)     v.subwindow_mode = pGC->subWindowMode;
+    if (mask & GCSubwindowMode)
+        v.subwindow_mode = pGC->subWindowMode;
 
     /* Graphics exposures are not needed on the back-ends since they can
        be generated on the front-end thereby saving bandwidth. */
-    if (mask & GCGraphicsExposures) mask &= ~GCGraphicsExposures;
-
-    if (mask & GCClipXOrigin)       v.clip_x_origin = pGC->clipOrg.x;
-    if (mask & GCClipYOrigin)       v.clip_y_origin = pGC->clipOrg.y;
-    if (mask & GCClipMask)          mask &= ~GCClipMask; /* See ChangeClip */
-    if (mask & GCDashOffset)        v.dash_offset = pGC->dashOffset;
+    if (mask & GCGraphicsExposures)
+        mask &= ~GCGraphicsExposures;
+
+    if (mask & GCClipXOrigin)
+        v.clip_x_origin = pGC->clipOrg.x;
+    if (mask & GCClipYOrigin)
+        v.clip_y_origin = pGC->clipOrg.y;
+    if (mask & GCClipMask)
+        mask &= ~GCClipMask;    /* See ChangeClip */
+    if (mask & GCDashOffset)
+        v.dash_offset = pGC->dashOffset;
     if (mask & GCDashList) {
 	mask &= ~GCDashList;
 	if (dmxScreen->beDisplay)
 	    XSetDashes(dmxScreen->beDisplay, pGCPriv->gc,
-		       pGC->dashOffset, (char *)pGC->dash,
-		       pGC->numInDashList);
+                       pGC->dashOffset, (char *) pGC->dash, pGC->numInDashList);
     }
-    if (mask & GCArcMode)           v.arc_mode = pGC->arcMode;
+    if (mask & GCArcMode)
+        v.arc_mode = pGC->arcMode;
 
     if (mask && dmxScreen->beDisplay) {
 	XChangeGC(dmxScreen->beDisplay, pGCPriv->gc, mask, &v);
@@ -291,7 +323,8 @@ void dmxChangeGC(GCPtr pGC, unsigned long mask)
 
 /** Copy \a pGCSrc to \a pGCDst on the back-end server associated with
  *  \a pGCSrc's screen. */
-void dmxCopyGC(GCPtr pGCSrc, unsigned long changes, GCPtr pGCDst)
+void
+dmxCopyGC(GCPtr pGCSrc, unsigned long changes, GCPtr pGCDst)
 {
     ScreenPtr      pScreen = pGCSrc->pScreen;
     DMXScreenInfo *dmxScreen = &dmxScreens[pScreen->myNum];
@@ -309,7 +342,8 @@ void dmxCopyGC(GCPtr pGCSrc, unsigned long changes, GCPtr pGCDst)
 }
 
 /** Free the \a pGC on the back-end server. */
-Bool dmxBEFreeGC(GCPtr pGC)
+Bool
+dmxBEFreeGC(GCPtr pGC)
 {
     ScreenPtr      pScreen   = pGC->pScreen;
     DMXScreenInfo *dmxScreen = &dmxScreens[pScreen->myNum];
@@ -326,7 +360,8 @@ Bool dmxBEFreeGC(GCPtr pGC)
 
 /** Destroy the graphics context, \a pGC and free the corresponding GC
  *  on the back-end server. */
-void dmxDestroyGC(GCPtr pGC)
+void
+dmxDestroyGC(GCPtr pGC)
 {
     ScreenPtr      pScreen   = pGC->pScreen;
     DMXScreenInfo *dmxScreen = &dmxScreens[pScreen->myNum];
@@ -342,7 +377,8 @@ void dmxDestroyGC(GCPtr pGC)
 }
 
 /** Change the clip rects for a GC. */
-void dmxChangeClip(GCPtr pGC, int type, pointer pvalue, int nrects)
+void
+dmxChangeClip(GCPtr pGC, int type, pointer pvalue, int nrects)
 {
     ScreenPtr      pScreen = pGC->pScreen;
     DMXScreenInfo *dmxScreen = &dmxScreens[pScreen->myNum];
@@ -391,7 +427,8 @@ void dmxChangeClip(GCPtr pGC, int type, pointer pvalue, int nrects)
 }
 
 /** Destroy a GC's clip rects. */
-void dmxDestroyClip(GCPtr pGC)
+void
+dmxDestroyClip(GCPtr pGC)
 {
     ScreenPtr      pScreen = pGC->pScreen;
     DMXScreenInfo *dmxScreen = &dmxScreens[pScreen->myNum];
@@ -408,7 +445,8 @@ void dmxDestroyClip(GCPtr pGC)
 }
 
 /** Copy a GC's clip rects. */
-void dmxCopyClip(GCPtr pGCDst, GCPtr pGCSrc)
+void
+dmxCopyClip(GCPtr pGCDst, GCPtr pGCSrc)
 {
     DMX_GC_FUNC_PROLOGUE(pGCDst);
     pGCDst->funcs->CopyClip(pGCDst, pGCSrc);
