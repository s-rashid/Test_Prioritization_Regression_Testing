diff --git a/Xi/exevents.c b/Xi/exevents.c
index 6797f50..43657b9 100644
--- a/Xi/exevents.c
+++ b/Xi/exevents.c
@@ -100,14 +100,14 @@ static Bool MakeInputMasks(WindowPtr	/* pWin */
 extern DevPrivateKey UnusedClassesPrivateKey;
 
 
-_X_EXPORT void
+void
 RegisterOtherDevice(DeviceIntPtr device)
 {
     device->public.processInputProc = ProcessOtherEvent;
     device->public.realInputProc = ProcessOtherEvent;
 }
 
-_X_EXPORT Bool
+Bool
 IsPointerEvent(xEvent* xE)
 {
     switch(xE->u.u.type)
@@ -137,7 +137,7 @@ IsPointerEvent(xEvent* xE)
  * @return the device matching the deviceid of the device set in the event, or
  * NULL if the event is not an XInput event.
  */
-_X_EXPORT DeviceIntPtr
+DeviceIntPtr
 XIGetDevice(xEvent* xE)
 {
     DeviceIntPtr pDev = NULL;
@@ -521,7 +521,7 @@ DeepCopyFeedbackClasses(DeviceIntPtr from, DeviceIntPtr to)
  * Saves a few memory allocations.
  */
 
-_X_EXPORT void
+void
 DeepCopyDeviceClasses(DeviceIntPtr from, DeviceIntPtr to)
 {
     ClassesPtr classes;
@@ -789,7 +789,7 @@ ChangeMasterDeviceClasses(DeviceIntPtr device,
 #define DEFAULT 0
 #define DONT_PROCESS 1
 #define IS_REPEAT 2
-_X_EXPORT int
+int
 UpdateDeviceState(DeviceIntPtr device, xEvent* xE, int count)
 {
     int i;
@@ -994,7 +994,7 @@ UpdateDeviceState(DeviceIntPtr device, xEvent* xE, int count)
  * Called from when processing the events from the event queue.
  *
  */
-_X_EXPORT void
+void
 ProcessOtherEvent(xEventPtr xE, DeviceIntPtr device, int count)
 {
     int i;
@@ -1131,7 +1131,7 @@ ProcessOtherEvent(xEventPtr xE, DeviceIntPtr device, int count)
     xE->u.u.detail = key;
 }
 
-_X_EXPORT int
+int
 InitProximityClassDeviceStruct(DeviceIntPtr dev)
 {
     ProximityClassPtr proxc;
@@ -1152,7 +1152,7 @@ InitProximityClassDeviceStruct(DeviceIntPtr dev)
  *
  * @see InitValuatorClassDeviceStruct
  */
-_X_EXPORT void
+void
 InitValuatorAxisStruct(DeviceIntPtr dev, int axnum, int minval, int maxval,
 		       int resolution, int min_res, int max_res)
 {
@@ -1231,7 +1231,7 @@ FixDeviceValuator(DeviceIntPtr dev, deviceValuator * ev, ValuatorClassPtr v,
     first += ev->num_valuators;
 }
 
-_X_EXPORT void
+void
 DeviceFocusEvent(DeviceIntPtr dev, int type, int mode, int detail,
 		 WindowPtr pWin)
 {
@@ -1351,7 +1351,7 @@ DeviceFocusEvent(DeviceIntPtr dev, int type, int mode, int detail,
     }
 }
 
-_X_EXPORT int
+int
 GrabButton(ClientPtr client, DeviceIntPtr dev, BYTE this_device_mode,
 	   BYTE other_devices_mode, CARD16 modifiers,
 	   DeviceIntPtr modifier_device, CARD8 button, Window grabWindow,
@@ -1418,7 +1418,7 @@ GrabButton(ClientPtr client, DeviceIntPtr dev, BYTE this_device_mode,
     return AddPassiveGrabToList(client, grab);
 }
 
-_X_EXPORT int
+int
 GrabKey(ClientPtr client, DeviceIntPtr dev, BYTE this_device_mode,
 	BYTE other_devices_mode, CARD16 modifiers,
 	DeviceIntPtr modifier_device, CARD8 key, Window grabWindow,
@@ -1473,7 +1473,7 @@ GrabKey(ClientPtr client, DeviceIntPtr dev, BYTE this_device_mode,
     return AddPassiveGrabToList(client, grab);
 }
 
-_X_EXPORT int
+int
 SelectForWindow(DeviceIntPtr dev, WindowPtr pWin, ClientPtr client,
 		Mask mask, Mask exclusivemasks, Mask validmasks)
 {
@@ -1534,7 +1534,7 @@ SelectForWindow(DeviceIntPtr dev, WindowPtr pWin, ClientPtr client,
     return Success;
 }
 
-_X_EXPORT int
+int
 AddExtensionClient(WindowPtr pWin, ClientPtr client, Mask mask, int mskidx)
 {
     InputClientsPtr others;
@@ -1567,7 +1567,7 @@ MakeInputMasks(WindowPtr pWin)
     return TRUE;
 }
 
-_X_EXPORT void
+void
 RecalculateDeviceDeliverableEvents(WindowPtr pWin)
 {
     InputClientsPtr others;
@@ -1605,7 +1605,7 @@ RecalculateDeviceDeliverableEvents(WindowPtr pWin)
     }
 }
 
-_X_EXPORT int
+int
 InputClientGone(WindowPtr pWin, XID id)
 {
     InputClientsPtr other, prev;
@@ -1644,7 +1644,7 @@ InputClientGone(WindowPtr pWin, XID id)
     FatalError("client not on device event list");
 }
 
-_X_EXPORT int
+int
 SendEvent(ClientPtr client, DeviceIntPtr d, Window dest, Bool propagate,
 	  xEvent * ev, Mask mask, int count)
 {
@@ -1703,7 +1703,7 @@ SendEvent(ClientPtr client, DeviceIntPtr d, Window dest, Bool propagate,
     return Success;
 }
 
-_X_EXPORT int
+int
 SetButtonMapping(ClientPtr client, DeviceIntPtr dev, int nElts, BYTE * map)
 {
     int i;
@@ -1726,7 +1726,7 @@ SetButtonMapping(ClientPtr client, DeviceIntPtr dev, int nElts, BYTE * map)
     return Success;
 }
 
-_X_EXPORT int
+int
 SetModifierMapping(ClientPtr client, DeviceIntPtr dev, int len, int rlen,
 		   int numKeyPerModifier, KeyCode * inputMap, KeyClassPtr * k)
 {
@@ -1806,7 +1806,7 @@ SetModifierMapping(ClientPtr client, DeviceIntPtr dev, int len, int rlen,
     return (MappingSuccess);
 }
 
-_X_EXPORT void
+void
 SendDeviceMappingNotify(ClientPtr client, CARD8 request,
 			KeyCode firstKeyCode, CARD8 count, DeviceIntPtr dev)
 {
@@ -1830,7 +1830,7 @@ SendDeviceMappingNotify(ClientPtr client, CARD8 request,
     SendEventToAllWindows(dev, DeviceMappingNotifyMask, (xEvent *) ev, 1);
 }
 
-_X_EXPORT int
+int
 ChangeKeyMapping(ClientPtr client,
 		 DeviceIntPtr dev,
 		 unsigned len,
@@ -1931,7 +1931,7 @@ DeleteDeviceFromAnyExtEvents(WindowPtr pWin, DeviceIntPtr dev)
 	    dev->valuator->motionHintWindow = NullWindow;
 }
 
-_X_EXPORT void
+void
 DeleteWindowFromAnyExtEvents(WindowPtr pWin, Bool freeResources)
 {
     int i;
@@ -1957,7 +1957,7 @@ DeleteWindowFromAnyExtEvents(WindowPtr pWin, Bool freeResources)
 	}
 }
 
-_X_EXPORT int
+int
 MaybeSendDeviceMotionNotifyHint(deviceKeyButtonPointer * pEvents, Mask mask)
 {
     DeviceIntPtr dev;
@@ -1980,7 +1980,7 @@ MaybeSendDeviceMotionNotifyHint(deviceKeyButtonPointer * pEvents, Mask mask)
     return (0);
 }
 
-_X_EXPORT void
+void
 CheckDeviceGrabAndHintWindow(WindowPtr pWin, int type,
 			     deviceKeyButtonPointer * xE, GrabPtr grab,
 			     ClientPtr client, Mask deliveryMask)
@@ -2029,7 +2029,7 @@ DeviceEventMaskForClient(DeviceIntPtr dev, WindowPtr pWin, ClientPtr client)
     return 0;
 }
 
-_X_EXPORT void
+void
 MaybeStopDeviceHint(DeviceIntPtr dev, ClientPtr client)
 {
     WindowPtr pWin;
@@ -2048,7 +2048,7 @@ MaybeStopDeviceHint(DeviceIntPtr dev, ClientPtr client)
 	dev->valuator->motionHintWindow = NullWindow;
 }
 
-_X_EXPORT int
+int
 DeviceEventSuppressForWindow(WindowPtr pWin, ClientPtr client, Mask mask,
 			     int maskndx)
 {
@@ -2119,7 +2119,7 @@ FindInterestedChildren(DeviceIntPtr dev, WindowPtr p1, Mask mask,
  *
  */
 
-_X_EXPORT void
+void
 SendEventToAllWindows(DeviceIntPtr dev, Mask mask, xEvent * ev, int count)
 {
     int i;
