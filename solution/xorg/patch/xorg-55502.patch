diff --git a/hw/xfree86/i2c/msp3430.c b/hw/xfree86/i2c/msp3430.c
index df8adc4..312a2d1 100644
--- a/hw/xfree86/i2c/msp3430.c
+++ b/hw/xfree86/i2c/msp3430.c
@@ -16,7 +16,6 @@
 #define WR_DSP          0x12
 #define RD_DSP          0x13
 
-
 void InitMSP34xxG(MSP3430Ptr m);
 void InitMSP34x5D(MSP3430Ptr m);
 void CheckModeMSP34x5D(MSP3430Ptr m);
@@ -28,6 +27,7 @@ void mpause(int milliseconds);
 #if __MSPDEBUG__ > 3
 
 void MSPBeep(MSP3430Ptr m, CARD8 freq);
+
 #define __MSPBEEP MSPBeep(m,0x14);
 
 #else
@@ -35,7 +35,9 @@ void MSPBeep(MSP3430Ptr m, CARD8 freq);
 #define __MSPBEEP 
 #endif
 
-static void SetMSP3430Control(MSP3430Ptr m, CARD8 RegAddress, CARD8 RegValueHigh, CARD8 RegValueLow)
+static void
+SetMSP3430Control(MSP3430Ptr m, CARD8 RegAddress, CARD8 RegValueHigh,
+                  CARD8 RegValueLow)
 {
    I2CByte data[3];
    
@@ -46,14 +48,18 @@ static void SetMSP3430Control(MSP3430Ptr m, CARD8 RegAddress, CARD8 RegValueHigh
    I2C_WriteRead(&(m->d),data,3,NULL,0);
 }
 
-static void SetMSP3430Data(MSP3430Ptr m, CARD8 RegAddress, CARD8 RegSubAddressHigh, CARD8 RegSubAddressLow, 
-     CARD8 RegValueHigh, CARD8 RegValueLow)
+static void
+SetMSP3430Data(MSP3430Ptr m, CARD8 RegAddress, CARD8 RegSubAddressHigh,
+               CARD8 RegSubAddressLow, CARD8 RegValueHigh, CARD8 RegValueLow)
 {
    I2CByte data[5];
+
 #ifdef MSP_DEBUG
    if(!m->registers_present[RegSubAddressLow]){
-   	xf86DrvMsg(m->d.pI2CBus->scrnIndex,X_ERROR, "Attempt to access non-existent register in MSP34xxX: 0x%02x 0x%02x 0x%02x <- 0x%02x 0x%02x\n",
-		RegAddress, RegSubAddressHigh, RegSubAddressLow, RegValueHigh, RegValueLow);
+        xf86DrvMsg(m->d.pI2CBus->scrnIndex, X_ERROR,
+                   "Attempt to access non-existent register in MSP34xxX: 0x%02x 0x%02x 0x%02x <- 0x%02x 0x%02x\n",
+                   RegAddress, RegSubAddressHigh, RegSubAddressLow,
+                   RegValueHigh, RegValueLow);
    	}
 #endif
    
@@ -66,8 +72,9 @@ static void SetMSP3430Data(MSP3430Ptr m, CARD8 RegAddress, CARD8 RegSubAddressHi
    I2C_WriteRead(&(m->d),data,5,NULL,0);
 }
 
-static void GetMSP3430Data(MSP3430Ptr m, CARD8 RegAddress, CARD8 RegSubAddressHigh, CARD8 RegSubAddressLow,
-            CARD8 *RegValueHigh, CARD8 *RegValueLow)
+static void
+GetMSP3430Data(MSP3430Ptr m, CARD8 RegAddress, CARD8 RegSubAddressHigh,
+               CARD8 RegSubAddressLow, CARD8 *RegValueHigh, CARD8 *RegValueLow)
 {
    I2CByte  send[3];
    I2CByte  receive[2];
@@ -83,21 +90,25 @@ static void GetMSP3430Data(MSP3430Ptr m, CARD8 RegAddress, CARD8 RegSubAddressHi
 }
 
 #if __MSPDEBUG__ > 2
-static void MSP3430DumpStatus(MSP3430Ptr m)
+static void
+MSP3430DumpStatus(MSP3430Ptr m)
 {
 CARD8 status_hi, status_lo;
 CARD8 subaddr, data[2];
 
 GetMSP3430Data(m, RD_DEM, 0x02, 0x00, &status_hi, &status_lo);
-xf86DrvMsg(m->d.pI2CBus->scrnIndex, X_INFO, "MSP34xx: SAP(8)=%d mono/NICAM(7)=%d stereo=%d %s O_1=%d O_0=%d 2nd car=%d 1st car=%d\n",
+    xf86DrvMsg(m->d.pI2CBus->scrnIndex, X_INFO,
+               "MSP34xx: SAP(8)=%d mono/NICAM(7)=%d stereo=%d %s O_1=%d O_0=%d 2nd car=%d 1st car=%d\n",
 		status_hi & 1, (status_lo>>7) & 1, (status_lo>>6)&1, 
-		(status_lo>>5)? ( (status_hi>>1)&1? "bad NICAM reception" : "NICAM" ) : 
-		                ((status_hi>>1)&1 ? "bogus" : "ANALOG FM/AM") , 
-		(status_lo>>4)&1, (status_lo>>3)&1,!( (status_lo>>2)&1), !((status_lo>>1)&1));
+               (status_lo >> 5) ? ((status_hi >> 1) & 1 ? "bad NICAM reception"
+                                   : "NICAM") : ((status_hi >> 1) & 1 ? "bogus"
+                                                 : "ANALOG FM/AM"),
+               (status_lo >> 4) & 1, (status_lo >> 3) & 1,
+               !((status_lo >> 2) & 1), !((status_lo >> 1) & 1));
 
 GetMSP3430Data(m, RD_DEM, 0x00, 0x7E, &status_hi, &status_lo);
-xf86DrvMsg(m->d.pI2CBus->scrnIndex, X_INFO, "MSP34xx: standard result=0x%02x%02x\n",
-		status_hi, status_lo);
+    xf86DrvMsg(m->d.pI2CBus->scrnIndex, X_INFO,
+               "MSP34xx: standard result=0x%02x%02x\n", status_hi, status_lo);
 subaddr=0x0;
 I2C_WriteRead(&(m->d), &subaddr, 1, data, 2);
 xf86DrvMsg(m->d.pI2CBus->scrnIndex, X_INFO, "MSP34xx: control=0x%02x%02x\n",
@@ -106,10 +117,12 @@ xf86DrvMsg(m->d.pI2CBus->scrnIndex, X_INFO, "MSP34xx: control=0x%02x%02x\n",
 #endif
 
 /* wrapper */
-void InitMSP3430(MSP3430Ptr m)
+void
+InitMSP3430(MSP3430Ptr m)
 {
   #if __MSPDEBUG__ > 1
-  xf86DrvMsg(m->d.pI2CBus->scrnIndex,X_INFO,"InitMSP3430(m->connector=%d, m->standard=%d, m->chip_family=%d)\n",
+    xf86DrvMsg(m->d.pI2CBus->scrnIndex, X_INFO,
+               "InitMSP3430(m->connector=%d, m->standard=%d, m->chip_family=%d)\n",
   		m->connector, m->standard, m->chip_family);
   #endif
 	switch (m->chip_family) {
@@ -129,7 +142,8 @@ void InitMSP3430(MSP3430Ptr m)
 | common functions for all MSP34xx chips 
 |----------------------------------------------------------------*/
 
-MSP3430Ptr DetectMSP3430(I2CBusPtr b, I2CSlaveAddr addr)
+MSP3430Ptr
+DetectMSP3430(I2CBusPtr b, I2CSlaveAddr addr)
 {
    MSP3430Ptr m;
    I2CByte a;
@@ -137,7 +151,8 @@ MSP3430Ptr DetectMSP3430(I2CBusPtr b, I2CSlaveAddr addr)
    Bool supported;
    
    m = calloc(1,sizeof(MSP3430Rec));
-   if(m == NULL)return NULL;
+    if (m == NULL)
+        return NULL;
    m->d.DevName = strdup("MSP34xx");
    m->d.SlaveAddr = addr;
    m->d.pI2CBus = b;
@@ -147,14 +162,12 @@ MSP3430Ptr DetectMSP3430(I2CBusPtr b, I2CSlaveAddr addr)
    m->d.AcknTimeout = b->AcknTimeout;
    m->d.ByteTimeout = b->ByteTimeout;
    
-   if(!I2C_WriteRead(&(m->d), NULL, 0, &a, 1))
-   {
+    if (!I2C_WriteRead(&(m->d), NULL, 0, &a, 1)) {
        free(m->d.DevName);
        free(m);
 	return NULL;
     }
 
-
 	m->standard=MSP3430_NTSC;
 	m->connector=MSP3430_CONNECTOR_1;
 	m->mode=MSPMODE_STEREO_A;	/*stereo or chanel A if avail. */
@@ -231,16 +244,17 @@ MSP3430Ptr DetectMSP3430(I2CBusPtr b, I2CSlaveAddr addr)
 	  	m->chip_family=MSPFAMILY_UNKNOWN;
    }
    
-	xf86DrvMsg(m->d.pI2CBus->scrnIndex, X_INFO, "Found %s%s, rom version 0x%02x, chip_id=0x%04x\n",
-		MSP_getProductName(m->chip_id), supported?"":" (unsupported)", rom_version, m->chip_id);
+    xf86DrvMsg(m->d.pI2CBus->scrnIndex, X_INFO,
+               "Found %s%s, rom version 0x%02x, chip_id=0x%04x\n",
+               MSP_getProductName(m->chip_id),
+               supported ? "" : " (unsupported)", rom_version, m->chip_id);
 
 	if (!supported) {
             free(m->d.DevName);
             free(m);
             return NULL;
 	}
-   if(!I2CDevInit(&(m->d)))
-   {
+    if (!I2CDevInit(&(m->d))) {
        free(m->d.DevName);
        free(m);
        return NULL;
@@ -249,7 +263,8 @@ MSP3430Ptr DetectMSP3430(I2CBusPtr b, I2CSlaveAddr addr)
    return m;  
 }
 
-void ResetMSP3430(MSP3430Ptr m)
+void
+ResetMSP3430(MSP3430Ptr m)
 {
     /* Reset the MSP3430 */
     SetMSP3430Control(m, 0x00, 0x80, 0x00);
@@ -262,13 +277,17 @@ void ResetMSP3430(MSP3430Ptr m)
 	m->volume=0;
 }   
 
-void MSP3430SetVolume (MSP3430Ptr m, CARD8 value)
+void
+MSP3430SetVolume(MSP3430Ptr m, CARD8 value)
 {
     CARD8 result;
+
 #if 0
     CARD8 old_volume;
+
     GetMSP3430Data(m, RD_DSP, 0x00, 0x00, &old_volume, &result);   
-    xf86DrvMsg(m->d.pI2CBus->scrnIndex, X_INFO, "MSP3430 result 0x%02x\n", result);
+    xf86DrvMsg(m->d.pI2CBus->scrnIndex, X_INFO, "MSP3430 result 0x%02x\n",
+               result);
 #endif
     /* save an extra Get call */
     result=0;
@@ -280,23 +299,24 @@ void MSP3430SetVolume (MSP3430Ptr m, CARD8 value)
 
 #if __MSPDEBUG__ > 2
     MSP3430DumpStatus(m); 
-    __MSPBEEP
-    GetMSP3430Data(m, RD_DSP, 0x00, 0x00, &old_volume, &result);
-    xf86DrvMsg(m->d.pI2CBus->scrnIndex, X_INFO, "MSP3430 volume 0x%02x\n",value);
+    __MSPBEEP GetMSP3430Data(m, RD_DSP, 0x00, 0x00, &old_volume, &result);
+    xf86DrvMsg(m->d.pI2CBus->scrnIndex, X_INFO, "MSP3430 volume 0x%02x\n",
+               value);
 #endif
 }
 
-
-void MSP3430SetSAP (MSP3430Ptr m, int mode)
+void
+MSP3430SetSAP(MSP3430Ptr m, int mode)
 {
-	xf86DrvMsg(m->d.pI2CBus->scrnIndex, X_INFO, "Put actual code to change SAP here\n");
+    xf86DrvMsg(m->d.pI2CBus->scrnIndex, X_INFO,
+               "Put actual code to change SAP here\n");
 
       SetMSP3430Data(m, WR_DSP, 0x00, 0x08, mode & 0xff, 0x20); 
 }
 
-
 #if 0
-void MSP3430SetSource(MSP3430Ptr m, CARD8 value)
+void
+MSP3430SetSource(MSP3430Ptr m, CARD8 value)
 {
     /* Write to DSP, register 0x0008, (loudspeaker channel source/matrix) */
     /* This sets the source to the TV tuner, for stereo operation */
@@ -304,25 +324,38 @@ void MSP3430SetSource(MSP3430Ptr m, CARD8 value)
 }
 #endif
 
-
 static const char *
 MSP_getProductName (CARD16 product_id)
 {
 	switch (product_id) {
-		case 0x0400: return "MSP3400D";
-		case 0x040a: return "MSP3410D";
-		case 0x0405: return "MSP3405D";
-		case 0x040f: return "MSP3415D";
-		case 0x0700: return "MSP3400G";
-		case 0x070a: return "MSP3410G";
-		case 0x071e: return "MSP3430G";
-		case 0x0728: return "MSP3440G";
-		case 0x0732: return "MSP3450G";
-		case 0x070f: return "MSP3415G";
-		case 0x0719: return "MSP3425G";
-		case 0x072d: return "MSP3445G";
-		case 0x0737: return "MSP3455G";
-		case 0x0741: return "MSP3465G";
+    case 0x0400:
+        return "MSP3400D";
+    case 0x040a:
+        return "MSP3410D";
+    case 0x0405:
+        return "MSP3405D";
+    case 0x040f:
+        return "MSP3415D";
+    case 0x0700:
+        return "MSP3400G";
+    case 0x070a:
+        return "MSP3410G";
+    case 0x071e:
+        return "MSP3430G";
+    case 0x0728:
+        return "MSP3440G";
+    case 0x0732:
+        return "MSP3450G";
+    case 0x070f:
+        return "MSP3415G";
+    case 0x0719:
+        return "MSP3425G";
+    case 0x072d:
+        return "MSP3445G";
+    case 0x0737:
+        return "MSP3455G";
+    case 0x0741:
+        return "MSP3465G";
 	}
 	return "MSP - unknown type";
 }
@@ -331,28 +364,36 @@ MSP_getProductName (CARD16 product_id)
 /*puts beep in MSP output
     freq = 0x01 - 16Hz ... 0x40 - 1kHz ... 0xff - 4kHz  
 */
-void MSPBeep(MSP3430Ptr m, CARD8 freq) {
+void
+MSPBeep(MSP3430Ptr m, CARD8 freq)
+{
     SetMSP3430Data (m, WR_DSP, 0x00, freq, 0x7f, 0x40);
     mpause(100);
     SetMSP3430Data (m, WR_DSP, 0x00, 0x14, 0x00, 0x00);
 }
 #endif
 
-void mpause(int milliseconds) {
+void
+mpause(int milliseconds)
+{
     int i,m;
+
     m=milliseconds/20;
-    for (i=0;i<m;i++) usleep(20000);
+    for (i = 0; i < m; i++)
+        usleep(20000);
 }
 
 /*-----------------------------------------------------------------
 | specific functions for all MSP34xxG chips 
 |----------------------------------------------------------------*/
 
-void InitMSP34xxG(MSP3430Ptr m)
+void
+InitMSP34xxG(MSP3430Ptr m)
 {
 
   #if __MSPDEBUG__ > 1
-  xf86DrvMsg(m->d.pI2CBus->scrnIndex,X_INFO,"InitMSP34xxG(m->connector=%d, m->standard=%d, m->chip_family=%d)\n",
+    xf86DrvMsg(m->d.pI2CBus->scrnIndex, X_INFO,
+               "InitMSP34xxG(m->connector=%d, m->standard=%d, m->chip_family=%d)\n",
   		m->connector, m->standard, m->chip_family);
   #endif
    /* Reset MSP3430 */
@@ -365,12 +406,12 @@ void InitMSP34xxG(MSP3430Ptr m)
    /*       1 - enable STATUS change */
    /*       12 - detect 6.5 Mhz carrier as D/K1, D/K2 or D/K NICAM  (does not seem to work ) */
    /*       13 - detect 4.5 Mhz carrier as BTSC */ 
-   if ( (m->standard & 0xff) == MSP3430_PAL )
-   {
+    if ((m->standard & 0xff) == MSP3430_PAL) {
       SetMSP3430Data(m, WR_DEM, 0x00, 0x30, 0x30, 0x03|0x08);    /* make O_ pins tristate */
       /* PAL standard */
       SetMSP3430Data(m, WR_DEM, 0x00, 0x20, 0x00, 0x01); /* possibly wrong */
-   } else {
+    }
+    else {
       SetMSP3430Data(m, WR_DEM, 0x00, 0x30, 0x20, 0x03|0x08);
       /* standard selection is M-BTSC-Stereo */
       SetMSP3430Data(m, WR_DEM, 0x00, 0x20, 0x00, 0x20); 
@@ -426,22 +467,21 @@ void InitMSP34xxG(MSP3430Ptr m)
 | specific functions for all MSP34x5D chips 
 |----------------------------------------------------------------*/
 
-void InitMSP34x5D(MSP3430Ptr m)
+void
+InitMSP34x5D(MSP3430Ptr m)
 {
 int count;
 CARD8 high,low;
 CARD16 result,standard;
 CARD16 peak;
 
-
-if (m->c_format==MSPFORMAT_UNKNOWN) ResetMSP3430(m);
+    if (m->c_format == MSPFORMAT_UNKNOWN)
+        ResetMSP3430(m);
 else {
     /*mute volume*/
     SetMSP3430Data (m, WR_DSP, 0x00, 0x00, 0x00, 0x00);
 }
 
-
-
     switch(m->connector){
 	case MSP3430_CONNECTOR_2:
 	case MSP3430_CONNECTOR_3:
@@ -488,7 +528,8 @@ else {
 		    
 	    if (m->c_standard != standard) {
 
-   	        SetMSP3430Data (m, WR_DEM, 0x00, 0x20, standard>>8, standard & 0xFF);
+            SetMSP3430Data(m, WR_DEM, 0x00, 0x20, standard >> 8,
+                           standard & 0xFF);
 	        if (standard==MSPSTANDARD_AUTO) {
 			    count = 50; /* time shouldn't exceed 1s, just in case */
 			    do {
@@ -500,9 +541,11 @@ else {
 		    
 		    	if ((result > MSPSTANDARD_AUTO))
 					standard=result;
-		    	else standard=MSPSTANDARD_UNKNOWN;
+                else
+                    standard = MSPSTANDARD_UNKNOWN;
 #if __MSPDEBUG__ > 1
-				xf86DrvMsg(m->d.pI2CBus->scrnIndex,X_INFO,"Detected audio standard: %d\n",result);
+                xf86DrvMsg(m->d.pI2CBus->scrnIndex, X_INFO,
+                           "Detected audio standard: %d\n", result);
 #endif		    	
 		    	/* result = MSPSTANDARD_NICAM_L can be one of:
 		    	SECAM_L - MSPSTANDARD_NICAM_L
@@ -513,9 +556,11 @@ else {
 		        	if ((m->standard & 0x00ff)==MSP3430_PAL) {
 			    		/* force PAL D/K  */
 			    		standard=MSPSTANDARD_FM_DK1;
-		            	SetMSP3430Data (m, WR_DEM, 0x00, 0x20, standard>>8, standard & 0xFF);
+                        SetMSP3430Data(m, WR_DEM, 0x00, 0x20, standard >> 8,
+                                       standard & 0xFF);
 #if __MSPDEBUG__ > 1
-			        	xf86DrvMsg(m->d.pI2CBus->scrnIndex,X_INFO, "Detected 6.5MHz carrier - forced to D/K1 !!!\n" );
+                        xf86DrvMsg(m->d.pI2CBus->scrnIndex, X_INFO,
+                                   "Detected 6.5MHz carrier - forced to D/K1 !!!\n");
 #endif
 					}
 		    	}
@@ -540,7 +585,8 @@ else {
 			/* set FM prescale */
 			SetMSP3430Data (m, WR_DSP, 0x00, 0x0e, 0x30, 0);
 			/* set FM deemphasis*/
-			SetMSP3430Data (m, WR_DSP, 0x00, 0x0f, ((standard==MSPSTANDARD_FM_M)?0:1), 0);
+            SetMSP3430Data(m, WR_DSP, 0x00, 0x0f,
+                           ((standard == MSPSTANDARD_FM_M) ? 0 : 1), 0);
 		    	
 			/* check if FM2 carrier is present */
 			/*turn off FM DC Notch*/
@@ -552,7 +598,8 @@ else {
    		    GetMSP3430Data (m, RD_DSP, 0x00, 0x1A, &high, &low);
 			peak = (high << 8) | low;
 #if __MSPDEBUG__ > 1
-			xf86DrvMsg(m->d.pI2CBus->scrnIndex,X_INFO,"Second carrier Quasi-Peak detection: %d\n",peak);
+            xf86DrvMsg(m->d.pI2CBus->scrnIndex, X_INFO,
+                       "Second carrier Quasi-Peak detection: %d\n", peak);
 #endif	    	
 			/*turn on FM DC Notch*/
 			SetMSP3430Data (m, WR_DSP, 0x00, 0x17, 0x00, 0x00);
@@ -595,15 +642,11 @@ else {
     /*set volume*/
 	MSP3430SetVolume(m,m->volume);
     
-    __MSPBEEP
-
+__MSPBEEP}                      /* EnableMSP34x5D ()... */
 
-} /* EnableMSP34x5D ()... */
-
-
-
-
-void CheckModeMSP34x5D(MSP3430Ptr m) {
+void
+CheckModeMSP34x5D(MSP3430Ptr m)
+{
     const char stereo_on=25;
     const char stereo_off=20;
     const char dual_on=-stereo_on;
@@ -612,74 +655,83 @@ void CheckModeMSP34x5D(MSP3430Ptr m) {
     CARD8 matrix, fmmatrix, source, high, low;
 
     fmmatrix=0;		/*no matrix*/
-    source=0;		/*FM*/
-    switch (m->c_format) {
+    source = 0;
+    /*FM*/ switch (m->c_format) {
 	case MSPFORMAT_NICAM_FM:
 	case MSPFORMAT_NICAM_AM:
 	case MSPFORMAT_SCART:
 	    source=( (m->c_format == MSPFORMAT_SCART)?2:1 );
 	    switch (m->mode) {
 		case MSPMODE_MONO:
-		    matrix=0x30;	/*MONO*/
-		    break;
+            matrix = 0x30;
+            /*MONO*/ break;
 		case MSPMODE_A:
-		    matrix=0x00;	/*A*/
-		    break;
+            matrix = 0x00;
+            /*A*/ break;
 		case MSPMODE_B:
-		    matrix=0x10;	/*B*/
-		    break;
+            matrix = 0x10;
+            /*B*/ break;
 		default:
-		    matrix=0x20;	/*STEREO*/
-		    break;
+            matrix = 0x20;
+            /*STEREO*/ break;
 		}
 	    break;
 	default:
 	case MSPFORMAT_1xFM:
-	    matrix=0x00;	/*A*/
-	    break;
+        matrix = 0x00;
+        /*A*/ break;
 	case MSPFORMAT_2xFM:
 	    switch (m->mode) {
 		case MSPMODE_MONO:
-		    matrix=0x30;	/*MONO*/
-		    break;
+            matrix = 0x30;
+            /*MONO*/ break;
 		case MSPMODE_STEREO:
-		    matrix=0x20;	/*STEREO*/
-		    fmmatrix=((m->c_standard==MSPSTANDARD_FM_M)?2:1);
+            matrix = 0x20;
+            /*STEREO*/ fmmatrix = ((m->c_standard == MSPSTANDARD_FM_M) ? 2 : 1);
 		    break;
 		case MSPMODE_AB:
-		    matrix=0x20;	/*STEREO*/
-		    break;
+            matrix = 0x20;
+            /*STEREO*/ break;
 		case MSPMODE_A:
-		    matrix=0x00;	/*A*/
-		    break;
+            matrix = 0x00;
+            /*A*/ break;
 		case MSPMODE_B:
-		    matrix=0x10;	/*B*/
-		    break;
+            matrix = 0x10;
+            /*B*/ break;
 		default:
     		/*FM_IDENT_CHECK*/
     		GetMSP3430Data (m, RD_DSP, 0x00, 0x18, &high, &low);
     		detect=(char)high;
 #if __MSPDEBUG__ > 1
-    		xf86DrvMsg(m->d.pI2CBus->scrnIndex,X_INFO,"Stereo Detection Register: %d\n",detect);
+            xf86DrvMsg(m->d.pI2CBus->scrnIndex, X_INFO,
+                       "Stereo Detection Register: %d\n", detect);
 #endif
-    		if (detect>=((m->c_mode==MSPMODE_STEREO)?stereo_off:stereo_on)) {
+            if (detect >=
+                ((m->c_mode == MSPMODE_STEREO) ? stereo_off : stereo_on)) {
 				m->c_mode=MSPMODE_STEREO;
-				matrix=0x20;	/*STEREO*/
+                matrix = 0x20;
+                /*STEREO*/
 				fmmatrix=((m->c_standard==MSPSTANDARD_FM_M)?2:1);
 		    }
 			else if (detect<=((m->c_mode==MSPMODE_AB)?dual_off:dual_on)) {
 				m->c_mode=MSPMODE_AB;
     			switch (m->mode) {
-			    case MSPMODE_STEREO_AB: matrix=0x20; break;
-			    case MSPMODE_STEREO_B: matrix=0x10; break;
+                case MSPMODE_STEREO_AB:
+                    matrix = 0x20;
+                    break;
+                case MSPMODE_STEREO_B:
+                    matrix = 0x10;
+                    break;
 			    default:
-				case MSPMODE_A: matrix=0x00; break;
+                case MSPMODE_A:
+                    matrix = 0x00;
+                    break;
 				}
 			}
     		else {
 				m->c_mode=MSPMODE_MONO;
-				matrix=0x30;	/*MONO*/
-			}
+                matrix = 0x30;
+            /*MONO*/}
 		    break;
 	    } /* end - case mode*/
 	    break;
@@ -704,18 +756,19 @@ void CheckModeMSP34x5D(MSP3430Ptr m) {
 
 #if __MSPDEBUG__ > 0
 		    char *msg;
+
 		    switch (matrix) {
-			case 0x30: /*MONO*/
-			    msg="MONO";
+    case 0x30:
+        /*MONO*/ msg = "MONO";
 			    break;
-			case 0x00: /*LEFT*/
-			    msg="MONO/CHANNEL_1";
+    case 0x00:
+        /*LEFT*/ msg = "MONO/CHANNEL_1";
 			    break;
-			case 0x10: /*RIGHT*/
-			    msg="MONO/CHANNEL_2";
+    case 0x10:
+        /*RIGHT*/ msg = "MONO/CHANNEL_2";
 			    break;
-			case 0x20: /*LEFT*/
-			    msg="STEREO";
+    case 0x20:
+        /*LEFT*/ msg = "STEREO";
 			    break;
 			default:
 			    msg="unknown";
@@ -724,4 +777,3 @@ void CheckModeMSP34x5D(MSP3430Ptr m) {
     		    xf86DrvMsg(m->d.pI2CBus->scrnIndex,X_INFO,"Audio mode set to: %s\n",msg);
 #endif
 }
-
