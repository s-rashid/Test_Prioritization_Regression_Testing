diff --git a/Xi/xichangehierarchy.c b/Xi/xichangehierarchy.c
index 503404e..637526a 100644
--- a/Xi/xichangehierarchy.c
+++ b/Xi/xichangehierarchy.c
@@ -30,7 +30,6 @@
  *
  */
 
-
 #ifdef HAVE_DIX_CONFIG_H
 #include <dix-config.h>
 #endif
@@ -57,7 +56,8 @@
 /**
  * Send the current state of the device hierarchy to all clients.
  */
-void XISendDeviceHierarchyEvent(int flags[MAXDEVICES])
+void
+XISendDeviceHierarchyEvent(int flags[MAXDEVICES])
 {
     xXIHierarchyEvent *ev;
     xXIHierarchyInfo *info;
@@ -80,8 +80,7 @@ void XISendDeviceHierarchyEvent(int flags[MAXDEVICES])
     ev->num_info = inputInfo.numDevices;
 
     info = (xXIHierarchyInfo*)&ev[1];
-    for (dev = inputInfo.devices; dev; dev = dev->next)
-    {
+    for (dev = inputInfo.devices; dev; dev = dev->next) {
         info->deviceid = dev->id;
         info->enabled = dev->enabled;
         info->use = GetDeviceUse(dev, &info->attachment);
@@ -89,8 +88,7 @@ void XISendDeviceHierarchyEvent(int flags[MAXDEVICES])
         ev->flags |= info->flags;
         info++;
     }
-    for (dev = inputInfo.off_devices; dev; dev = dev->next)
-    {
+    for (dev = inputInfo.off_devices; dev; dev = dev->next) {
         info->deviceid = dev->id;
         info->enabled = dev->enabled;
         info->use = GetDeviceUse(dev, &info->attachment);
@@ -99,11 +97,8 @@ void XISendDeviceHierarchyEvent(int flags[MAXDEVICES])
         info++;
     }
 
-
-    for (i = 0; i < MAXDEVICES; i++)
-    {
-        if (flags[i] & (XIMasterRemoved | XISlaveRemoved))
-        {
+    for (i = 0; i < MAXDEVICES; i++) {
+        if (flags[i] & (XIMasterRemoved | XISlaveRemoved)) {
             info->deviceid = i;
             info->enabled = FALSE;
             info->flags = flags[i];
@@ -119,11 +114,11 @@ void XISendDeviceHierarchyEvent(int flags[MAXDEVICES])
     memset(&dummyDev, 0, sizeof(dummyDev));
     dummyDev.id = XIAllDevices;
     dummyDev.type = SLAVE;
-    SendEventToAllWindows(&dummyDev, (XI_HierarchyChangedMask >> 8), (xEvent*)ev, 1);
+    SendEventToAllWindows(&dummyDev, (XI_HierarchyChangedMask >> 8),
+                          (xEvent *) ev, 1);
     free(ev);
 }
 
-
 /***********************************************************************
  *
  * This procedure allows a client to change the device hierarchy through
@@ -131,7 +126,8 @@ void XISendDeviceHierarchyEvent(int flags[MAXDEVICES])
  *
  */
 
-int SProcXIChangeHierarchy(ClientPtr client)
+int
+SProcXIChangeHierarchy(ClientPtr client)
 {
     REQUEST(xXIChangeHierarchyReq);
     swaps(&stuff->length);
@@ -158,8 +154,7 @@ add_master(ClientPtr client, xXIAddMasterInfo *c, int flags[MAXDEVICES])
 
     /* Allocate virtual slave devices for xtest events */
     rc = AllocXTestDevice(client, name, &XTestptr, &XTestkeybd, ptr, keybd);
-    if (rc != Success)
-    {
+    if (rc != Success) {
         DeleteInputDeviceRequest(ptr);
         DeleteInputDeviceRequest(keybd);
         goto unwind;
@@ -175,8 +170,7 @@ add_master(ClientPtr client, xXIAddMasterInfo *c, int flags[MAXDEVICES])
     flags[XTestptr->id] |= XISlaveAdded;
     flags[XTestkeybd->id] |= XISlaveAdded;
 
-    if (c->enable)
-    {
+    if (c->enable) {
         EnableDevice(ptr, FALSE);
         EnableDevice(keybd, FALSE);
         flags[ptr->id] |= XIDeviceEnabled;
@@ -205,44 +199,39 @@ disable_clientpointer(DeviceIntPtr dev)
 {
     int i;
 
-    for (i = 0; i < currentMaxClients; i++)
-    {
+    for (i = 0; i < currentMaxClients; i++) {
         ClientPtr client = clients[i];
+
         if (client && client->clientPtr == dev)
             client->clientPtr = NULL;
     }
 }
 
 static int
-remove_master(ClientPtr client, xXIRemoveMasterInfo *r,
-              int flags[MAXDEVICES])
+remove_master(ClientPtr client, xXIRemoveMasterInfo * r, int flags[MAXDEVICES])
 {
     DeviceIntPtr ptr, keybd, XTestptr, XTestkeybd;
     int rc = Success;
 
-    if (r->return_mode != XIAttachToMaster &&
-        r->return_mode != XIFloating)
+    if (r->return_mode != XIAttachToMaster && r->return_mode != XIFloating)
         return BadValue;
 
     rc = dixLookupDevice(&ptr, r->deviceid, client, DixDestroyAccess);
     if (rc != Success)
         goto unwind;
 
-    if (!IsMaster(ptr))
-    {
+    if (!IsMaster(ptr)) {
         client->errorValue = r->deviceid;
         rc = BadDevice;
         goto unwind;
     }
 
     /* XXX: For now, don't allow removal of VCP, VCK */
-    if (ptr == inputInfo.pointer || ptr == inputInfo.keyboard)
-    {
+    if (ptr == inputInfo.pointer ||ptr == inputInfo.keyboard) {
         rc = BadDevice;
         goto unwind;
     }
 
-
     ptr = GetMaster(ptr, MASTER_POINTER);
     rc = dixLookupDevice(&ptr, ptr->id, client, DixDestroyAccess);
     if (rc != Success)
@@ -258,8 +247,7 @@ remove_master(ClientPtr client, xXIRemoveMasterInfo *r,
         goto unwind;
 
     XTestkeybd = GetXTestDevice(keybd);
-    rc = dixLookupDevice(&XTestkeybd, XTestkeybd->id, client,
-                         DixDestroyAccess);
+    rc = dixLookupDevice(&XTestkeybd, XTestkeybd->id, client, DixDestroyAccess);
     if (rc != Success)
         goto unwind;
 
@@ -267,18 +255,14 @@ remove_master(ClientPtr client, xXIRemoveMasterInfo *r,
 
     /* Disabling sends the devices floating, reattach them if
      * desired. */
-    if (r->return_mode == XIAttachToMaster)
-    {
-        DeviceIntPtr attached,
-                     newptr,
-                     newkeybd;
+    if (r->return_mode == XIAttachToMaster) {
+        DeviceIntPtr attached, newptr, newkeybd;
 
         rc = dixLookupDevice(&newptr, r->return_pointer, client, DixAddAccess);
         if (rc != Success)
             goto unwind;
 
-        if (!IsMaster(newptr))
-        {
+        if (!IsMaster(newptr)) {
             client->errorValue = r->return_pointer;
             rc = BadDevice;
             goto unwind;
@@ -289,23 +273,19 @@ remove_master(ClientPtr client, xXIRemoveMasterInfo *r,
         if (rc != Success)
             goto unwind;
 
-        if (!IsMaster(newkeybd))
-        {
+        if (!IsMaster(newkeybd)) {
             client->errorValue = r->return_keyboard;
             rc = BadDevice;
             goto unwind;
         }
 
-        for (attached = inputInfo.devices; attached; attached = attached->next)
-        {
+        for (attached = inputInfo.devices; attached; attached = attached->next) {
             if (!IsMaster(attached)) {
-                if (GetMaster(attached, MASTER_ATTACHED) == ptr)
-                {
+                if (GetMaster(attached, MASTER_ATTACHED) == ptr) {
                     AttachDevice(client, attached, newptr);
                     flags[attached->id] |= XISlaveAttached;
                 }
-                if (GetMaster(attached, MASTER_ATTACHED) == keybd)
-                {
+                if (GetMaster(attached, MASTER_ATTACHED) == keybd) {
                     AttachDevice(client, attached, newkeybd);
                     flags[attached->id] |= XISlaveAttached;
                 }
@@ -353,16 +333,14 @@ detach_slave(ClientPtr client, xXIDetachSlaveInfo *c, int flags[MAXDEVICES])
     if (rc != Success)
         goto unwind;
 
-    if (IsMaster(dev))
-    {
+    if (IsMaster(dev)) {
         client->errorValue = c->deviceid;
         rc = BadDevice;
         goto unwind;
     }
 
     /* Don't allow changes to XTest Devices, these are fixed */
-    if (IsXTestDevice(dev, NULL))
-    {
+    if (IsXTestDevice(dev, NULL)) {
         client->errorValue = c->deviceid;
         rc = BadDevice;
         goto unwind;
@@ -377,8 +355,7 @@ unwind:
 }
 
 static int
-attach_slave(ClientPtr client, xXIAttachSlaveInfo *c,
-             int flags[MAXDEVICES])
+attach_slave(ClientPtr client, xXIAttachSlaveInfo * c, int flags[MAXDEVICES])
 {
     DeviceIntPtr dev;
     DeviceIntPtr newmaster;
@@ -388,16 +365,14 @@ attach_slave(ClientPtr client, xXIAttachSlaveInfo *c,
     if (rc != Success)
         goto unwind;
 
-    if (IsMaster(dev))
-    {
+    if (IsMaster(dev)) {
         client->errorValue = c->deviceid;
         rc = BadDevice;
         goto unwind;
     }
 
     /* Don't allow changes to XTest Devices, these are fixed */
-    if (IsXTestDevice(dev, NULL))
-    {
+    if (IsXTestDevice(dev, NULL)) {
         client->errorValue = c->deviceid;
         rc = BadDevice;
         goto unwind;
@@ -406,16 +381,14 @@ attach_slave(ClientPtr client, xXIAttachSlaveInfo *c,
     rc = dixLookupDevice(&newmaster, c->new_master, client, DixAddAccess);
     if (rc != Success)
         goto unwind;
-    if (!IsMaster(newmaster))
-    {
+    if (!IsMaster(newmaster)) {
         client->errorValue = c->new_master;
         rc = BadDevice;
         goto unwind;
     }
 
     if (!((IsPointerDevice(newmaster) && IsPointerDevice(dev)) ||
-        (IsKeyboardDevice(newmaster) && IsKeyboardDevice(dev))))
-    {
+          (IsKeyboardDevice(newmaster) && IsKeyboardDevice(dev)))) {
         rc = BadDevice;
         goto unwind;
     }
@@ -428,8 +401,6 @@ unwind:
     return rc;
 }
 
-
-
 #define SWAPIF(cmd) if (client->swapped) { cmd; }
 
 int
@@ -447,8 +418,7 @@ ProcXIChangeHierarchy(ClientPtr client)
         return rc;
 
     any = (xXIAnyHierarchyChangeInfo*)&stuff[1];
-    while(stuff->num_changes--)
-    {
+    while (stuff->num_changes--) {
         SWAPIF(swaps(&any->type));
         SWAPIF(swaps(&any->length));
 
@@ -456,11 +426,11 @@ ProcXIChangeHierarchy(ClientPtr client)
         if ((stuff->length * 4) < required_len)
             return BadLength;
 
-        switch(any->type)
-        {
+        switch (any->type) {
             case XIAddMaster:
                 {
                     xXIAddMasterInfo* c = (xXIAddMasterInfo*)any;
+
                     SWAPIF(swaps(&c->name_len));
 
                     rc = add_master(client, c, flags);
@@ -505,4 +475,3 @@ unwind:
     XISendDeviceHierarchyEvent(flags);
     return rc;
 }
-
