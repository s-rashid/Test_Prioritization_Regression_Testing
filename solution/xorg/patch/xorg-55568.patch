diff --git a/hw/xfree86/os-support/hurd/hurd_mmap.c b/hw/xfree86/os-support/hurd/hurd_mmap.c
index 3f942aa..6ac9efd 100644
--- a/hw/xfree86/os-support/hurd/hurd_mmap.c
+++ b/hw/xfree86/os-support/hurd/hurd_mmap.c
@@ -37,30 +37,30 @@
 #define BIOS_SIZE 0x20000
 
 int 
-xf86ReadBIOS(unsigned long Base,unsigned long Offset,unsigned char *Buf,int Len)
+xf86ReadBIOS(unsigned long Base, unsigned long Offset, unsigned char *Buf,
+             int Len)
 {
     mach_port_t device,mem_dev;
     memory_object_t mem_obj;
     vm_address_t addr = (vm_address_t)0; /* serach starting address */
     kern_return_t err;
 
-
     err = get_privileged_ports (NULL, &device);
-    if( err )
-    {
+    if (err) {
 	errno = err;
-	FatalError("xf86ReadBIOS() can't get_privileged_ports. (%s)\n",strerror(errno));
+        FatalError("xf86ReadBIOS() can't get_privileged_ports. (%s)\n",
+                   strerror(errno));
     }
     err = device_open(device,D_READ|D_WRITE,"mem",&mem_dev);
     mach_port_deallocate (mach_task_self (), device);
-    if( err )
-    {
+    if (err) {
 	errno = err;
 	FatalError("xf86ReadBIOS() can't device_open. (%s)\n",strerror(errno));
     }
-    err = device_map(mem_dev,VM_PROT_READ|VM_PROT_WRITE, Base , BIOS_SIZE ,&mem_obj,0);
-    if( err )
-    {
+    err =
+        device_map(mem_dev, VM_PROT_READ | VM_PROT_WRITE, Base, BIOS_SIZE,
+                   &mem_obj, 0);
+    if (err) {
 	errno = err;
 	FatalError("xf86ReadBIOS() can't device_map. (%s)\n",strerror(errno));
     }
@@ -73,11 +73,9 @@ xf86ReadBIOS(unsigned long Base,unsigned long Offset,unsigned char *Buf,int Len)
 		 Base,
 		 FALSE,
 		 VM_PROT_READ|VM_PROT_WRITE,
-		 VM_PROT_READ|VM_PROT_WRITE,
-		 VM_INHERIT_SHARE);
+                 VM_PROT_READ | VM_PROT_WRITE, VM_INHERIT_SHARE);
     mach_port_deallocate(mach_task_self(),mem_obj);
-    if( err )
-    {
+    if (err) {
 	errno = err;
 	FatalError("xf86ReadBIOS() can't vm_map. (%s)\n",strerror(errno));
     }
@@ -85,10 +83,10 @@ xf86ReadBIOS(unsigned long Base,unsigned long Offset,unsigned char *Buf,int Len)
     memcpy(Buf,(void*)((int)addr + Offset), Len);
     
     err = vm_deallocate(mach_task_self(), addr, BIOS_SIZE);
-    if( err )
-    {
+    if (err) {
 	errno = err;
-	FatalError("xf86ReadBIOS() can't vm_deallocate. (%s)\n",strerror(errno));
+        FatalError("xf86ReadBIOS() can't vm_deallocate. (%s)\n",
+                   strerror(errno));
     }
     
     return Len;
