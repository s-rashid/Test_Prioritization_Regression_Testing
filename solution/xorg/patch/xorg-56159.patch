diff --git a/xkb/xkbout.c b/xkb/xkbout.c
index 889d5cc..cd1ae0b 100644
--- a/xkb/xkbout.c
+++ b/xkb/xkbout.c
@@ -61,12 +61,15 @@ Atom *		vmodNames;
 	return FALSE;
     if (xkb->names!=NULL)
 	 vmodNames= xkb->names->vmods;
-    else vmodNames= NULL;
+    else
+        vmodNames = NULL;
 
     for (i=nMods=0;i<XkbNumVirtualMods;i++) {
 	if ((vmodNames!=NULL)&&(vmodNames[i]!=None)) {
-	    if (nMods==0)	fprintf(file,"    virtual_modifiers ");
-	    else		fprintf(file,",");
+            if (nMods == 0)
+                fprintf(file, "    virtual_modifiers ");
+            else
+                fprintf(file, ",");
 	    fprintf(file,"%s",XkbAtomText(vmodNames[i],XkbXKBFile));
 	    if ((showValue!=VMOD_HIDE_VALUE)&&
 		(xkb->server)&&(xkb->server->vmods[i]!=XkbNoModifierMask)) {
@@ -102,9 +105,7 @@ Bool
 XkbWriteXKBKeycodes(	FILE *			file,
 			XkbDescPtr		xkb,
 			Bool			topLevel,
-			Bool			showImplicit,
-			XkbFileAddOnFunc	addOn,
-			void *			priv)
+                    Bool showImplicit, XkbFileAddOnFunc addOn, void *priv)
 {
 Atom			kcName;
 register unsigned 	i;
@@ -118,25 +119,28 @@ const char *		alternate;
     if (kcName!=None)
 	 fprintf(file,"xkb_keycodes \"%s\" {\n",
 					XkbAtomText(kcName,XkbXKBFile));
-    else fprintf(file,"xkb_keycodes {\n");
+    else
+        fprintf(file, "xkb_keycodes {\n");
     fprintf(file,"    minimum = %d;\n",xkb->min_key_code);
     fprintf(file,"    maximum = %d;\n",xkb->max_key_code);
     for (i=xkb->min_key_code;i<=xkb->max_key_code;i++) {
 	if (xkb->names->keys[i].name[0]!='\0') {
 	    if (XkbFindKeycodeByName(xkb,xkb->names->keys[i].name,TRUE)!=i)
 		 alternate= "alternate ";
-	    else alternate= "";
+            else
+                alternate = "";
 	    fprintf(file,"    %s%6s = %d;\n",alternate,
-			XkbKeyNameText(xkb->names->keys[i].name,XkbXKBFile),
-			i);
+                    XkbKeyNameText(xkb->names->keys[i].name, XkbXKBFile), i);
 	}
     }
     if (xkb->indicators!=NULL) {
 	for (i=0;i<XkbNumIndicators;i++) {
 	    const char *type;
+
 	    if (xkb->indicators->phys_indicators&(1<<i))
 			type= "    ";
-	    else	type= "    virtual ";
+            else
+                type = "    virtual ";
 	    if (xkb->names->indicators[i]!=None) {
 		fprintf(file,"%sindicator %d = \"%s\";\n",type,i+1,
 			XkbAtomText(xkb->names->indicators[i],XkbXKBFile));
@@ -145,6 +149,7 @@ const char *		alternate;
     }
     if (xkb->names->key_aliases!=NULL) {
 	XkbKeyAliasPtr	pAl;
+
 	pAl= xkb->names->key_aliases;
 	for (i=0;i<xkb->names->num_key_aliases;i++,pAl++) {
 	    fprintf(file,"    alias %6s = %6s;\n",
@@ -162,9 +167,7 @@ Bool
 XkbWriteXKBKeyTypes(	FILE *			file,
 			XkbDescPtr              xkb,
 			Bool			topLevel,
-			Bool			showImplicit,
-			XkbFileAddOnFunc	addOn,
-			void *			priv)
+                    Bool showImplicit, XkbFileAddOnFunc addOn, void *priv)
 {
 register unsigned	i,n;
 XkbKeyTypePtr		type;
@@ -180,7 +183,8 @@ XkbKTMapEntryPtr	entry;
     }
     if ((xkb->names==NULL)||(xkb->names->types==None))
 	 fprintf(file,"xkb_types {\n\n");
-    else fprintf(file,"xkb_types \"%s\" {\n\n",
+    else
+        fprintf(file, "xkb_types \"%s\" {\n\n",
 			XkbAtomText(xkb->names->types,XkbXKBFile));
     WriteXKBVModDecl(file,xkb,
 			(showImplicit?VMOD_COMMENT_VALUE:VMOD_HIDE_VALUE));
@@ -195,6 +199,7 @@ XkbKTMapEntryPtr	entry;
 	entry= type->map;
 	for (n=0;n<type->map_count;n++,entry++) {
 	    char *str;	
+
 	    str=XkbVModMaskText(xkb,entry->mods.real_mods,entry->mods.vmods,
 								XkbXKBFile);
 	    fprintf(file,"        map[%s]= Level%d;\n",str,entry->level+1);
@@ -202,13 +207,15 @@ XkbKTMapEntryPtr	entry;
 				   (type->preserve[n].vmods))) {
 		fprintf(file,"        preserve[%s]= ",str);
 		fprintf(file,"%s;\n",XkbVModMaskText(xkb,
-					type->preserve[n].real_mods,
+                                                       type->preserve[n].
+                                                       real_mods,
 					type->preserve[n].vmods,
 					XkbXKBFile));
 	    }
 	}
 	if (type->level_names!=NULL) {
 	    Atom *name= type->level_names;
+
 	    for (n=0;n<type->num_levels;n++,name++) {
 		if ((*name)==None)
 		    continue;
@@ -228,9 +235,7 @@ static Bool
 WriteXKBIndicatorMap(	FILE *			file,
 			XkbDescPtr              xkb,
 			Atom			name,
-			XkbIndicatorMapPtr	led,
-			XkbFileAddOnFunc	addOn,
-			void *			priv)
+                     XkbIndicatorMapPtr led, XkbFileAddOnFunc addOn, void *priv)
 {
 
     fprintf(file,"    indicator \"%s\" {\n",NameForAtom(name));
@@ -269,9 +274,7 @@ Bool
 XkbWriteXKBCompatMap(	FILE *			file,
 			XkbDescPtr              xkb,
 			Bool			topLevel,
-			Bool			showImplicit,
-			XkbFileAddOnFunc	addOn,
-			void *			priv)
+                     Bool showImplicit, XkbFileAddOnFunc addOn, void *priv)
 {
 register unsigned	i;
 XkbSymInterpretPtr	interp;
@@ -282,7 +285,8 @@ XkbSymInterpretPtr	interp;
     }
     if ((xkb->names==NULL)||(xkb->names->compat==None))
 	 fprintf(file,"xkb_compatibility {\n\n");
-    else fprintf(file,"xkb_compatibility \"%s\" {\n\n",
+    else
+        fprintf(file, "xkb_compatibility \"%s\" {\n\n",
 			XkbAtomText(xkb->names->compat,XkbXKBFile));
     WriteXKBVModDecl(file,xkb,
 			(showImplicit?VMOD_COMMENT_VALUE:VMOD_HIDE_VALUE));
@@ -319,14 +323,17 @@ XkbSymInterpretPtr	interp;
 	if ((gc->real_mods==0)&&(gc->vmods==0))
 	    continue;
 	fprintf(file,"    group %d = %s;\n",i+1,XkbVModMaskText(xkb,
-							gc->real_mods,gc->vmods,
+                                                                     gc->
+                                                                     real_mods,
+                                                                     gc->vmods,
 							XkbXKBFile));
     }
     if (xkb->indicators) {
 	for (i=0;i<XkbNumIndicators;i++) {
 	    XkbIndicatorMapPtr map= &xkb->indicators->maps[i];
-	    if ((map->flags!=0)||(map->which_groups!=0)||(map->groups!=0)||
-		(map->which_mods!=0)||
+
+            if ((map->flags != 0) || (map->which_groups != 0) ||
+                (map->groups != 0) || (map->which_mods != 0) ||
 		(map->mods.real_mods!=0)||(map->mods.vmods!=0)||
 		(map->ctrls!=0)) {
 		WriteXKBIndicatorMap(file,xkb,xkb->names->indicators[i],map,
@@ -344,9 +351,7 @@ Bool
 XkbWriteXKBSymbols(	FILE *			file,
 			XkbDescPtr              xkb,
 			Bool			topLevel,
-			Bool			showImplicit,
-			XkbFileAddOnFunc	addOn,
-			void *			priv)
+                   Bool showImplicit, XkbFileAddOnFunc addOn, void *priv)
 {
 register unsigned	i,tmp;
 XkbClientMapPtr		map;
@@ -369,7 +374,8 @@ Bool			showActions;
     }
     if ((xkb->names==NULL)||(xkb->names->symbols==None))
 	 fprintf(file,"xkb_symbols {\n\n");
-    else fprintf(file,"xkb_symbols \"%s\" {\n\n",
+    else
+        fprintf(file, "xkb_symbols \"%s\" {\n\n",
 			XkbAtomText(xkb->names->symbols,XkbXKBFile));
     for (tmp=i=0;i<XkbNumKbdGroups;i++) {
 	if (xkb->names->groups[i]!=None) {
@@ -383,6 +389,7 @@ Bool			showActions;
     srv= xkb->server;
     for (i=xkb->min_key_code;i<=xkb->max_key_code;i++) {
 	Bool	simple;
+
 	if ((int)XkbKeyNumSyms(xkb,i)<1)
 	    continue;
 	if (XkbFindKeycodeByName(xkb,xkb->names->keys[i].name,TRUE)!=i)
@@ -415,16 +422,15 @@ Bool			showActions;
 			    	XkbXKBFile));
 			}
 			else if (showImplicit) {
-			    fprintf(file,"\n//      type[group%d]= \"%s\",",g+1,
-				XkbAtomText(map->types[typeNdx].name,
+                            fprintf(file, "\n//      type[group%d]= \"%s\",",
+                                    g + 1, XkbAtomText(map->types[typeNdx].name,
 			    	XkbXKBFile));
 			}
 		    }
 		}
 		else {
 		    fprintf(file,"\n%s      type= \"%s\",",comment,
-				XkbAtomText(map->types[typeNdx].name,
-			    	XkbXKBFile));
+                            XkbAtomText(map->types[typeNdx].name, XkbXKBFile));
 		}
 		simple= FALSE;
 	    }
@@ -432,7 +438,8 @@ Bool			showActions;
 		    					  (xkb->ctrls!=NULL)) {
 		if (xkb->ctrls->per_key_repeat[i/8]&(1<<(i%8)))
 		     fprintf(file,"\n        repeat= Yes,");
-		else fprintf(file,"\n        repeat= No,");
+                else
+                    fprintf(file, "\n        repeat= No,");
 		simple= FALSE;
 	    }
 	    if ((xkb->server!=NULL)&&(xkb->server->vmodmap!=NULL)&&
@@ -462,6 +469,7 @@ Bool			showActions;
 	}
 	if (srv->behaviors!=NULL) {
 	    unsigned type;
+
 	    type= srv->behaviors[i].type&XkbKB_OpMask;
 
 	    if (type!=XkbKB_Default) {
@@ -473,7 +481,8 @@ Bool			showActions;
 	if ((srv->explicit==NULL) || showImplicit ||
 	    ((srv->explicit[i]&XkbExplicitInterpretMask)!=0))
 	     showActions= XkbKeyHasActions(xkb,i);
-	else showActions= FALSE;
+        else
+            showActions = FALSE;
 	
 	if (((unsigned)XkbKeyNumGroups(xkb,i)>1)||showActions)
 	    simple= FALSE;
@@ -494,6 +503,7 @@ Bool			showActions;
 	    unsigned g,s;
 	    KeySym *syms;
 	    XkbAction *acts;
+
 	    syms= XkbKeySymsPtr(xkb,i);
 	    acts= XkbKeyActionsPtr(xkb,i);
 	    for (g=0;g<XkbKeyNumGroups(xkb,i);g++) {
@@ -525,9 +535,11 @@ Bool			showActions;
 	for (i=xkb->min_key_code;i<=xkb->max_key_code;i++) {
 	    if (map->modmap[i]!=0) {
 		register int n,bit;
+
 		for (bit=1,n=0;n<XkbNumModifiers;n++,bit<<=1) {
 		    if (map->modmap[i]&bit) {
 			char buf[5];
+
 			memcpy(buf,xkb->names->keys[i].name,4);
 			buf[4]= '\0';
 			fprintf(file,"    modifier_map %s { <%s> };\n",
@@ -546,10 +558,7 @@ Bool			showActions;
 static Bool
 WriteXKBOutline(	FILE *		file,
 			XkbShapePtr	shape,
-			XkbOutlinePtr	outline,
-			int		lastRadius,
-			int		first,
-			int		indent)
+                XkbOutlinePtr outline, int lastRadius, int first, int indent)
 {
 register int	i;
 XkbPointPtr	pt;
@@ -573,9 +582,12 @@ char *		iStr;
     }
     fprintf(file,"{");
     for (pt=outline->points,i=0;i<outline->num_points;i++,pt++) {
-	if (i==0)		fprintf(file," ");
-	else if ((i%4)==0)	fprintf(file,",\n%s  ",iStr);
-	else			fprintf(file,", ");
+        if (i == 0)
+            fprintf(file, " ");
+        else if ((i % 4) == 0)
+            fprintf(file, ",\n%s  ", iStr);
+        else
+            fprintf(file, ", ");
 	fprintf(file,"[ %3s, %3s ]",XkbGeomFPText(pt->x,XkbXKBFile),
 				  XkbGeomFPText(pt->y,XkbXKBFile));
     }
@@ -585,9 +597,7 @@ char *		iStr;
 
 static Bool
 WriteXKBDoodad(	FILE *		file,
-		unsigned	indent,
-		XkbGeometryPtr	geom,
-		XkbDoodadPtr	doodad)
+               unsigned indent, XkbGeometryPtr geom, XkbDoodadPtr doodad)
 {
 register char *	i_str;
 XkbShapePtr	shape;
@@ -673,12 +683,9 @@ XkbColorPtr	color;
     return TRUE;
 }
 
-/*ARGSUSED*/
-static Bool
+ /*ARGSUSED*/ static Bool
 WriteXKBOverlay(	FILE *		file,
-			unsigned	indent,
-			XkbGeometryPtr	geom,
-			XkbOverlayPtr	ol)
+                unsigned indent, XkbGeometryPtr geom, XkbOverlayPtr ol)
 {
 register char *		i_str;
 int			r,k,nOut;
@@ -690,17 +697,20 @@ XkbOverlayKeyPtr	key;
 	 fprintf(file,"%soverlay \"%s\" {\n",i_str,
     					XkbAtomText(ol->name,XkbMessage));
     }
-    else fprintf(file,"%soverlay {\n",i_str);
+    else
+        fprintf(file, "%soverlay {\n", i_str);
     for (nOut=r=0,row=ol->rows;r<ol->num_rows;r++,row++) {
 	for (k=0,key=row->keys;k<row->num_keys;k++,key++) {
 	    char *over,*under;
+
 	    over= XkbKeyNameText(key->over.name,XkbXKBFile);
 	    under= XkbKeyNameText(key->under.name,XkbXKBFile);
 	    if (nOut==0)
 		 fprintf(file,"%s    %6s=%6s",i_str,under,over);
 	    else if ((nOut%4)==0)
 		 fprintf(file,",\n%s    %6s=%6s",i_str,under,over);
-	    else fprintf(file,", %6s=%6s",under,over);
+            else
+                fprintf(file, ", %6s=%6s", under, over);
 	    nOut++;
 	}
     }
@@ -709,25 +719,25 @@ XkbOverlayKeyPtr	key;
 }
 
 static Bool
-WriteXKBSection(	FILE *		file,
-			XkbSectionPtr 	s,
-			XkbGeometryPtr	geom)
+WriteXKBSection(FILE * file, XkbSectionPtr s, XkbGeometryPtr geom)
 {
 register int	i;
 XkbRowPtr	row;
 int		dfltKeyColor = 0;
 
-    fprintf(file,"    section \"%s\" {\n",
-				XkbAtomText(s->name,XkbXKBFile));
+    fprintf(file, "    section \"%s\" {\n", XkbAtomText(s->name, XkbXKBFile));
     if (s->rows&&(s->rows->num_keys>0)) {
 	dfltKeyColor= s->rows->keys[0].color_ndx;
 	fprintf(file,"        key.color= \"%s\";\n",
 		XkbStringText(geom->colors[dfltKeyColor].spec,XkbXKBFile));
     }
     fprintf(file,"        priority=  %d;\n",s->priority);
-    fprintf(file,"        top=       %s;\n",XkbGeomFPText(s->top,XkbXKBFile));
-    fprintf(file,"        left=      %s;\n",XkbGeomFPText(s->left,XkbXKBFile));
-    fprintf(file,"        width=     %s;\n",XkbGeomFPText(s->width,XkbXKBFile));
+    fprintf(file, "        top=       %s;\n",
+            XkbGeomFPText(s->top, XkbXKBFile));
+    fprintf(file, "        left=      %s;\n",
+            XkbGeomFPText(s->left, XkbXKBFile));
+    fprintf(file, "        width=     %s;\n",
+            XkbGeomFPText(s->width, XkbXKBFile));
     fprintf(file,"        height=    %s;\n",
 					XkbGeomFPText(s->height,XkbXKBFile));
     if (s->angle!=0) {
@@ -747,9 +757,11 @@ int		dfltKeyColor = 0;
 	    register XkbKeyPtr	key;
 	    int			forceNL=0;
 	    int			nThisLine= 0;
+
 	    fprintf(file,"            keys {\n");
 	    for (k=0,key=row->keys;k<row->num_keys;k++,key++) {
 		XkbShapePtr	shape;
+
 		if (key->color_ndx!=dfltKeyColor)
 		    forceNL= 1;
 		if (k==0) {
@@ -770,7 +782,8 @@ int		dfltKeyColor = 0;
 		      XkbAtomText(shape->name,XkbXKBFile),
 		      XkbGeomFPText(key->gap,XkbXKBFile));
 		if (key->color_ndx!=dfltKeyColor) {
-		    fprintf(file,", color=\"%s\"",XkbKeyColor(geom,key)->spec);
+                    fprintf(file, ", color=\"%s\"",
+                            XkbKeyColor(geom, key)->spec);
 		    forceNL= 1;
 		}
 		fprintf(file," }");
@@ -781,12 +794,14 @@ int		dfltKeyColor = 0;
     }
     if (s->doodads!=NULL) {
 	XkbDoodadPtr	doodad;
+
 	for (i=0,doodad=s->doodads;i<s->num_doodads;i++,doodad++) {
 	    WriteXKBDoodad(file,8,geom,doodad);
 	}
     }
     if (s->overlays!=NULL) {
 	XkbOverlayPtr	ol;
+
 	for (i=0,ol=s->overlays;i<s->num_overlays;i++,ol++) {
 	    WriteXKBOverlay(file,8,geom,ol);
 	}
@@ -800,9 +815,7 @@ Bool
 XkbWriteXKBGeometry(	FILE *			file,
 			XkbDescPtr              xkb,
 			Bool			topLevel,
-			Bool			showImplicit,
-			XkbFileAddOnFunc	addOn,
-			void *			priv)
+                    Bool showImplicit, XkbFileAddOnFunc addOn, void *priv)
 {
 register unsigned	i,n;
 XkbGeometryPtr		geom;
@@ -814,7 +827,8 @@ XkbGeometryPtr		geom;
     geom= xkb->geom;
     if (geom->name==None)
 	 fprintf(file,"xkb_geometry {\n\n");
-    else fprintf(file,"xkb_geometry \"%s\" {\n\n",
+    else
+        fprintf(file, "xkb_geometry \"%s\" {\n\n",
 				XkbAtomText(geom->name,XkbXKBFile));
     fprintf(file,"    width=       %s;\n",
 				XkbGeomFPText(geom->width_mm,XkbXKBFile));
@@ -823,6 +837,7 @@ XkbGeometryPtr		geom;
 
     if (geom->key_aliases!=NULL) {
 	XkbKeyAliasPtr	pAl;
+
 	pAl= geom->key_aliases;
 	for (i=0;i<geom->num_key_aliases;i++,pAl++) {
 	    fprintf(file,"    alias %6s = %6s;\n",
@@ -843,6 +858,7 @@ XkbGeometryPtr		geom;
 			XkbStringText(geom->label_font,XkbXKBFile));
     if ((geom->num_colors>0)&&(showImplicit)) {
 	XkbColorPtr	color;
+
 	for (color=geom->colors,i=0;i<geom->num_colors;i++,color++) {
 		fprintf(file,"//     color[%d]= \"%s\"\n",i,
 				XkbStringText(color->spec,XkbXKBFile));
@@ -851,7 +867,9 @@ XkbGeometryPtr		geom;
     }
     if (geom->num_properties>0) {
 	XkbPropertyPtr	prop;
-	for (prop=geom->properties,i=0;i<geom->num_properties;i++,prop++) {
+
+        for (prop = geom->properties, i = 0; i < geom->num_properties;
+             i++, prop++) {
 	    fprintf(file,"    %s= \"%s\";\n",prop->name,
     				XkbStringText(prop->value,XkbXKBFile));
 	}
@@ -861,6 +879,7 @@ XkbGeometryPtr		geom;
 	XkbShapePtr	shape;
 	XkbOutlinePtr	outline;
 	int		lastR;
+
 	for (shape=geom->shapes,i=0;i<geom->num_shapes;i++,shape++) {
 	    lastR=0;
 	    fprintf(file,"    shape \"%s\" {",
@@ -868,8 +887,10 @@ XkbGeometryPtr		geom;
 	    outline= shape->outlines;
 	    if (shape->num_outlines>1) {
 		for (n=0;n<shape->num_outlines;n++,outline++) {
-		    if (n==0)	fprintf(file,"\n");
-		    else	fprintf(file,",\n");
+                    if (n == 0)
+                        fprintf(file, "\n");
+                    else
+                        fprintf(file, ",\n");
 		    WriteXKBOutline(file,shape,outline,lastR,8,8);
 		    lastR= outline->corner_radius;
 		}
@@ -883,13 +904,17 @@ XkbGeometryPtr		geom;
     }
     if (geom->num_sections>0) {
 	XkbSectionPtr	section;
-	for (section=geom->sections,i=0;i<geom->num_sections;i++,section++){
+
+        for (section = geom->sections, i = 0; i < geom->num_sections;
+             i++, section++) {
 	    WriteXKBSection(file,section,geom);
 	}
     }
     if (geom->num_doodads>0) {
 	XkbDoodadPtr	doodad;
-	for (i=0,doodad=geom->doodads;i<geom->num_doodads;i++,doodad++) {
+
+        for (i = 0, doodad = geom->doodads; i < geom->num_doodads;
+             i++, doodad++) {
 	    WriteXKBDoodad(file,4,geom,doodad);
 	}
     }
