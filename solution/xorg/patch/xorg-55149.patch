diff --git a/fb/fbtile.c b/fb/fbtile.c
index 05a27a1..785c5f0 100644
--- a/fb/fbtile.c
+++ b/fb/fbtile.c
@@ -35,18 +35,11 @@ void
 fbEvenTile (FbBits	*dst,
 	    FbStride	dstStride,
 	    int		dstX,
-
 	    int		width,
 	    int		height,
-
 	    FbBits	*tile,
 	    FbStride	tileStride,
-	    int		tileHeight,
-
-	    int		alu,
-	    FbBits	pm,
-	    int		xRot,
-	    int		yRot)
+           int tileHeight, int alu, FbBits pm, int xRot, int yRot)
 {
     FbBits  *t, *tileEnd, bits;
     FbBits  startmask, endmask;
@@ -73,21 +66,20 @@ fbEvenTile (FbBits	*dst,
     modulus (- xRot, FB_UNIT, tileX);
     rot = tileX;
     
-    while (height--)
-    {
+    while (height--) {
 	
 	/*
 	 * Pick up bits for this scanline
 	 */
 	bits = READ(t);
 	t += tileStride;
-	if (t >= tileEnd) t = tile;
+        if (t >= tileEnd)
+            t = tile;
 	bits = FbRotLeft(bits,rot);
 	and = fbAnd(alu,bits,pm);
 	xor = fbXor(alu,bits,pm);
 	
-	if (startmask)
-	{
+        if (startmask) {
 	    FbDoLeftMaskByteRRop(dst, startbyte, startmask, and, xor);
 	    dst++;
 	}
@@ -96,8 +88,7 @@ fbEvenTile (FbBits	*dst,
 	    while (n--)
 		WRITE(dst++, xor);
 	else
-	    while (n--)
-	    {
+            while (n--) {
 		WRITE(dst, FbDoRRop (READ(dst), and, xor));
 		dst++;
 	    }
@@ -111,21 +102,12 @@ void
 fbOddTile(FbBits    *dst,
 	  FbStride  dstStride,
 	  int	    dstX,
-
 	  int	    width,
 	  int	    height,
-
 	  FbBits    *tile,
 	  FbStride  tileStride,
 	  int	    tileWidth,
-	  int	    tileHeight,
-
-	  int	    alu,
-	  FbBits    pm,
-	  int	    bpp,
-	  
-	  int	    xRot,
-	  int	    yRot)
+          int tileHeight, int alu, FbBits pm, int bpp, int xRot, int yRot)
 {
     int	    tileX, tileY;
     int	    widthTmp;
@@ -134,8 +116,7 @@ fbOddTile(FbBits    *dst,
 
     modulus (- yRot, tileHeight, tileY);
     y = 0;
-    while (height)
-    {
+    while (height) {
 	h = tileHeight - tileY;
 	if (h > height)
 	    h = height;
@@ -143,8 +124,7 @@ fbOddTile(FbBits    *dst,
 	widthTmp = width;
 	x = dstX;
 	modulus (dstX - xRot, tileWidth, tileX);
-	while (widthTmp)
-	{
+        while (widthTmp) {
 	    w = tileWidth - tileX;
 	    if (w > widthTmp)
 		w = widthTmp;
@@ -152,18 +132,8 @@ fbOddTile(FbBits    *dst,
 	    fbBlt (tile + tileY * tileStride,
 		   tileStride,
 		   tileX,
-
 		   dst + y * dstStride,
-		   dstStride,
-		   x,
-
-		   w, h,
-		   alu,
-		   pm,
-		   bpp,
-		   
-		   FALSE,
-		   FALSE);
+                  dstStride, x, w, h, alu, pm, bpp, FALSE, FALSE);
 	    x += w;
 	    tileX = 0;
 	}
@@ -176,26 +146,16 @@ void
 fbTile (FbBits	    *dst,
 	FbStride    dstStride,
 	int	    dstX,
-
 	int	    width,
 	int	    height,
-
 	FbBits	    *tile,
 	FbStride    tileStride,
 	int	    tileWidth,
-	int	    tileHeight,
-	
-	int	    alu,
-	FbBits	    pm,
-	int	    bpp,
-	
-	int	    xRot,
-	int	    yRot)
+       int tileHeight, int alu, FbBits pm, int bpp, int xRot, int yRot)
 {
     if (FbEvenTile (tileWidth))
 	fbEvenTile (dst, dstStride, dstX, width, height, 
-		    tile, tileStride, tileHeight,
-		    alu, pm, xRot, yRot);
+                   tile, tileStride, tileHeight, alu, pm, xRot, yRot);
     else
 	fbOddTile (dst, dstStride, dstX, width, height, 
 		   tile, tileStride, tileWidth, tileHeight,
