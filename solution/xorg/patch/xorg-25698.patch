diff --git a/hw/xfree86/common/xf86Helper.c b/hw/xfree86/common/xf86Helper.c
index 09c08d2..93c89fd 100644
--- a/hw/xfree86/common/xf86Helper.c
+++ b/hw/xfree86/common/xf86Helper.c
@@ -90,7 +90,7 @@ xf86AddDriver(DriverPtr driver, pointer module, int flags)
     else {
 	(void) memset( xf86DriverList[xf86NumDrivers - 1], 0,
 		       sizeof( DriverRec ) );
-	(void) memcpy( xf86DriverList[xf86NumDrivers - 1], driver, 
+	(void) memcpy( xf86DriverList[xf86NumDrivers - 1], driver,
 		       sizeof(DriverRec1));
 
     }
@@ -241,7 +241,7 @@ xf86AllocateScreen(DriverPtr drv, int flags)
 #endif
 
     xf86Screens[i]->DriverFunc = drv->driverFunc;
-    
+
     return xf86Screens[i];
 }
 
@@ -293,7 +293,7 @@ xf86DeleteScreen(int scrnIndex, int flags)
     xfree(pScrn);
 
     /* Move the other entries down, updating their scrnIndex fields */
-    
+
     xf86NumScreens--;
 
     for (i = scrnIndex; i < xf86NumScreens; i++) {
@@ -487,7 +487,7 @@ xf86SetDepthBpp(ScrnInfoPtr scrp, int depth, int dummy, int fbbpp,
     depth24flags &= ~(SupportConvert32to24 | SupportConvert32to24 |
 		      PreferConvert24to32 | PreferConvert32to24);
 #endif
-     
+
     if (xf86FbBpp > 0) {
 	scrp->bitsPerPixel = xf86FbBpp;
 	scrp->bitsPerPixelFrom = X_CMDLINE;
@@ -946,7 +946,7 @@ xf86SetGamma(ScrnInfoPtr scrp, Gamma gamma)
 {
     MessageType from = X_DEFAULT;
 #if 0
-    xf86MonPtr DDC = (xf86MonPtr)(scrp->monitor->DDC); 
+    xf86MonPtr DDC = (xf86MonPtr)(scrp->monitor->DDC);
 #endif
     if (TEST_GAMMA(xf86Gamma)) {
 	from = X_CMDLINE;
@@ -999,7 +999,7 @@ _X_EXPORT void
 xf86SetDpi(ScrnInfoPtr pScrn, int x, int y)
 {
     MessageType from = X_DEFAULT;
-    xf86MonPtr DDC = (xf86MonPtr)(pScrn->monitor->DDC); 
+    xf86MonPtr DDC = (xf86MonPtr)(pScrn->monitor->DDC);
     int ddcWidthmm, ddcHeightmm;
     int widthErr, heightErr;
 
@@ -1009,7 +1009,7 @@ xf86SetDpi(ScrnInfoPtr pScrn, int x, int y)
 
     if (DDC && (DDC->features.hsize > 0 && DDC->features.vsize > 0) ) {
       /* DDC gives display size in mm for individual modes,
-       * but cm for monitor 
+       * but cm for monitor
        */
       ddcWidthmm = DDC->features.hsize * 10; /* 10mm in 1cm */
       ddcHeightmm = DDC->features.vsize * 10; /* 10mm in 1cm */
@@ -1053,7 +1053,7 @@ xf86SetDpi(ScrnInfoPtr pScrn, int x, int y)
 	  if (widthErr>10 || heightErr>10) {
 	    /* Should include config file name for monitor here */
 	    xf86DrvMsg(pScrn->scrnIndex, X_WARNING,
-		       "Probed monitor is %dx%d mm, using Displaysize %dx%d mm\n", 
+		       "Probed monitor is %dx%d mm, using Displaysize %dx%d mm\n",
 		       ddcWidthmm,ddcHeightmm, pScrn->widthmm,pScrn->heightmm);
 	  }
 	}
@@ -1149,7 +1149,7 @@ xf86SetRootClip (ScreenPtr pScreen, Bool enable)
 	    pWin->valdata->before.resized = TRUE;
 	}
     }
-    
+
     /*
      * Use REGION_BREAK to avoid optimizations in ValidateTree
      * that assume the root borderClip can't change well, normally
@@ -1174,9 +1174,9 @@ xf86SetRootClip (ScreenPtr pScreen, Bool enable)
 	REGION_EMPTY(pScreen, &pWin->borderClip);
 	REGION_BREAK (pWin->drawable.pScreen, &pWin->clipList);
     }
-    
+
     ResizeChildrenWinSize (pWin, 0, 0, 0, 0);
-    
+
     if (WasViewable)
     {
 	if (pWin->backStorage)
@@ -1221,7 +1221,7 @@ xf86SetRootClip (ScreenPtr pScreen, Bool enable)
 	if (bsExposed)
 	{
 	    RegionPtr	valExposed = NullRegion;
-    
+
 	    if (pWin->valdata)
 		valExposed = &pWin->valdata->after.exposed;
 	    (*pScreen->WindowExposures) (pWin, valExposed, bsExposed);
@@ -1280,7 +1280,7 @@ xf86EnableDisableFBAccess(int scrnIndex, Bool enable)
 	 */
 	pspix->devPrivate = pScrnInfo->pixmapPrivate;
 	/*
-	 * Restore all of the clip lists on the screen 
+	 * Restore all of the clip lists on the screen
 	 */
 	if (!xf86Resetting)
 	    xf86SetRootClip (pScreen, TRUE);
@@ -1289,7 +1289,7 @@ xf86EnableDisableFBAccess(int scrnIndex, Bool enable)
     else
     {
 	/*
-	 * Empty all of the clip lists on the screen 
+	 * Empty all of the clip lists on the screen
 	 */
 	xf86SetRootClip (pScreen, FALSE);
 	/*
@@ -1410,7 +1410,7 @@ xf86LogInit()
 
 #define LOGSUFFIX ".log"
 #define LOGOLDSUFFIX ".old"
-    
+
     /* Get the log file name */
     if (xf86LogFileFrom == X_DEFAULT) {
 	/* Append the display number and ".log" */
@@ -1538,7 +1538,7 @@ xf86MatchDevice(const char *drivername, GDevPtr **sectlist)
 	*sectlist = NULL;
 
     if (xf86DoProbe) return 1;
-  
+
     if (xf86DoConfigure && xf86DoConfigurePass1) return 1;
 
     /*
@@ -1546,18 +1546,18 @@ xf86MatchDevice(const char *drivername, GDevPtr **sectlist)
      * as they show up in the config file with the drivers that the server
      * loads at run time.
      *
-     * ChipProbe can call 
-     * int xf86MatchDevice(char * drivername, GDevPtr ** sectlist) 
+     * ChipProbe can call
+     * int xf86MatchDevice(char * drivername, GDevPtr ** sectlist)
      * with its driver name. The function allocates an array of GDevPtr and
      * returns this via sectlist and returns the number of elements in
      * this list as return value. 0 means none found, -1 means fatal error.
-     * 
+     *
      * It can figure out which of the Device sections to use for which card
      * (using things like the Card statement, etc). For single headed servers
      * there will of course be just one such Device section.
      */
     i = 0;
-    
+
     /*
      * first we need to loop over all the Screens sections to get to all
      * 'active' device sections
@@ -1587,7 +1587,7 @@ xf86MatchDevice(const char *drivername, GDevPtr **sectlist)
 	}
 	j++;
     }
-    
+
     /*
      * make the array NULL terminated and return its address
      */
@@ -1613,7 +1613,7 @@ struct Inst {
 
 /**
  * Find set of unclaimed devices matching a given vendor ID.
- * 
+ *
  * Used by drivers to find as yet unclaimed devices matching the specified
  * vendor ID.
  *
@@ -1629,7 +1629,7 @@ struct Inst {
  * \param drvp           Pointer the driver's control structure.
  * \param foundEntities  Returned list of entity indicies associated with the
  *                       driver.
- * 
+ *
  * \returns
  * The number of elements in returned in \c foundEntities on success or zero
  * on failure.
@@ -1644,7 +1644,7 @@ struct Inst {
  * that parameter.
  */
 _X_EXPORT int
-xf86MatchPciInstances(const char *driverName, int vendorID, 
+xf86MatchPciInstances(const char *driverName, int vendorID,
 		      SymTabPtr chipsets, PciChipsets *PCIchipsets,
 		      GDevPtr *devList, int numDevs, DriverPtr drvp,
 		      int **foundEntities)
@@ -1723,7 +1723,7 @@ xf86MatchPciInstances(const char *driverName, int vendorID,
 		    foundVendor = TRUE;
 		}
 		if ( (device_id == pPci->chipType)
-		     || ((vendorID == PCI_VENDOR_GENERIC) 
+		     || ((vendorID == PCI_VENDOR_GENERIC)
 			 && (match_class == device_class)) ) {
 		    if ( instances != NULL ) {
 			instances[allocatedInstances - 1].foundHW = TRUE;
@@ -1734,7 +1734,7 @@ xf86MatchPciInstances(const char *driverName, int vendorID,
 		    if ( xf86DoConfigure && xf86DoConfigurePass1 ) {
 			if ( xf86CheckPciSlot(pPci->bus, pPci->device,
 					      pPci->func) ) {
-			    GDevPtr pGDev = 
+			    GDevPtr pGDev =
 			      xf86AddDeviceToConfigure( drvp->driverName,
 							pPci, -1 );
 			    if (pGDev) {
@@ -1792,7 +1792,7 @@ xf86MatchPciInstances(const char *driverName, int vendorID,
     */
 
     for (j = 0; j < numDevs; j++) {
-        if (devList[j]->screen > 0 && devList[j]->busID 
+        if (devList[j]->screen > 0 && devList[j]->busID
 	    && *devList[j]->busID) {
 	    for (i = 0; i < allocatedInstances; i++) {
 	        pPci = instances[i].pci;
@@ -1821,7 +1821,7 @@ xf86MatchPciInstances(const char *driverName, int vendorID,
 					   pPci->device,
 					   pPci->func) &&
 		    devList[j]->screen == instances[i].screen) {
-		   
+
 		    if (devBus)
                         xf86MsgVerb(X_WARNING,0,
 			    "%s: More than one matching Device section for "
@@ -1830,10 +1830,10 @@ xf86MatchPciInstances(const char *driverName, int vendorID,
 			    devList[j]->identifier);
 		    else
 			devBus = devList[j];
-		} 
+		}
 	    } else {
-		/* 
-		 * if device section without BusID is found 
+		/*
+		 * if device section without BusID is found
 		 * only assign to it to the primary device.
 		 */
 		if (xf86IsPrimaryPci(pPci)) {
@@ -1848,7 +1848,7 @@ xf86MatchPciInstances(const char *driverName, int vendorID,
 		}
 	    }
 	}
-	if (devBus) dev = devBus;  /* busID preferred */ 
+	if (devBus) dev = devBus;  /* busID preferred */
 	if (!dev) {
 	    if (xf86CheckPciSlot(pPci->bus, pPci->device, pPci->func)) {
 		xf86MsgVerb(X_WARNING, 0, "%s: No matching Device section "
@@ -2068,7 +2068,7 @@ xf86MatchIsaInstances(const char *driverName, SymTabPtr chipsets,
 				dev->identifier);
 		} else
 		    foundChip = c->token;
-	    } else { 
+	    } else {
 		if (FindIsaDevice) foundChip = (*FindIsaDevice)(dev);
                                                         /* Probe it */
 		from = X_PROBED;
@@ -2079,7 +2079,7 @@ xf86MatchIsaInstances(const char *driverName, SymTabPtr chipsets,
 
 	if (foundChip >= 0){
 	    for (Chips = ISAchipsets; Chips->numChipset >= 0; Chips++) {
-		if (Chips->numChipset == foundChip) 
+		if (Chips->numChipset == foundChip)
 		    break;
 	    }
 	    if (Chips->numChipset == -1){
@@ -2102,7 +2102,7 @@ xf86MatchIsaInstances(const char *driverName, SymTabPtr chipsets,
 	}
     }
     *foundEntities = retEntities;
-    
+
     return numFound;
 }
 
@@ -2126,7 +2126,7 @@ xf86GetClocks(ScrnInfoPtr pScrn, int num, Bool (*ClockFunc)(ScrnInfoPtr, int),
     if (num > MAXCLOCKS)
 	num = MAXCLOCKS;
 
-    for (i = 0; i < num; i++) 
+    for (i = 0; i < num; i++)
     {
 	if (ProtectRegs)
 	    (*ProtectRegs)(pScrn, TRUE);
@@ -2139,7 +2139,7 @@ xf86GetClocks(ScrnInfoPtr pScrn, int num, Bool (*ClockFunc)(ScrnInfoPtr, int),
 	    (*ProtectRegs)(pScrn, FALSE);
 	if (BlankScreen)
 	    (*BlankScreen)(pScrn, FALSE);
-	    
+
     	usleep(50000);     /* let VCO stabilise */
 
     	cnt  = 0;
@@ -2153,25 +2153,25 @@ xf86GetClocks(ScrnInfoPtr pScrn, int num, Bool (*ClockFunc)(ScrnInfoPtr, int),
 	    ErrorF("your OS does not support disabling interrupts, then you\n");
 	    FatalError("must specify a Clocks line in the XF86Config file.\n");
 	}
-	while ((inb(status) & maskval) == 0x00) 
+	while ((inb(status) & maskval) == 0x00)
 	    if (sync-- == 0) goto finish;
 	/* Something appears to be happening, so reset sync count */
 	sync = 200000;
-	while ((inb(status) & maskval) == maskval) 
+	while ((inb(status) & maskval) == maskval)
 	    if (sync-- == 0) goto finish;
 	/* Something appears to be happening, so reset sync count */
 	sync = 200000;
-	while ((inb(status) & maskval) == 0x00) 
+	while ((inb(status) & maskval) == 0x00)
 	    if (sync-- == 0) goto finish;
-    
-	for (rcnt = 0; rcnt < 5; rcnt++) 
+
+	for (rcnt = 0; rcnt < 5; rcnt++)
 	{
-	    while (!(inb(status) & maskval)) 
+	    while (!(inb(status) & maskval))
 		cnt++;
-	    while ((inb(status) & maskval)) 
+	    while ((inb(status) & maskval))
 		cnt++;
 	}
-    
+
 finish:
 	xf86EnableInterrupts();
 
@@ -2182,7 +2182,7 @@ finish:
 
     xf86SetPriority(FALSE);
 
-    for (i = 0; i < num; i++) 
+    for (i = 0; i < num; i++)
     {
 	if (i != knownclkindex)
 	{
@@ -2190,10 +2190,10 @@ finish:
 	    {
 		pScrn->clock[i] = 0;
 	    }
-	    else 
+	    else
 	    {
 		pScrn->clock[i] = (int)(0.5 +
-                    (((float)knownclkvalue) * pScrn->clock[knownclkindex]) / 
+                    (((float)knownclkvalue) * pScrn->clock[knownclkindex]) /
 	            (pScrn->clock[i]));
 		/* Round to nearest 10KHz */
 		pScrn->clock[i] += 5;
@@ -2204,7 +2204,7 @@ finish:
     }
 
     pScrn->clock[knownclkindex] = knownclkvalue;
-    pScrn->numClocks = num; 
+    pScrn->numClocks = num;
 
     /* Restore registers that were written on */
     (*ClockFunc)(pScrn, CLK_REG_RESTORE);
@@ -2425,17 +2425,17 @@ xf86LoadSubModule(ScrnInfoPtr pScrn, const char *name)
 
 /*
  * xf86LoadOneModule loads a single module.
- */             
+ */
 _X_EXPORT pointer
 xf86LoadOneModule(char *name, pointer opt)
 {
     int errmaj, errmin;
     char *Name;
     pointer mod;
-    
+
     if (!name)
 	return NULL;
-    
+
 #ifndef NORMALISE_MODULE_NAME
     Name = xstrdup(name);
 #else
@@ -2507,7 +2507,7 @@ static const OptionInfoRec BSOptions[] = {
    { -1,                   NULL,           OPTV_NONE,    {0}, FALSE }
 };
 
-_X_EXPORT void 
+_X_EXPORT void
 xf86SetBackingStore(ScreenPtr pScreen)
 {
     Bool useBS = FALSE;
@@ -2547,7 +2547,7 @@ static const OptionInfoRec SMOptions[] = {
    { -1,                   NULL,           OPTV_NONE,    {0}, FALSE }
 };
 
-_X_EXPORT void 
+_X_EXPORT void
 xf86SetSilkenMouse (ScreenPtr pScreen)
 {
     Bool useSM = TRUE;
@@ -2558,12 +2558,12 @@ xf86SetSilkenMouse (ScreenPtr pScreen)
     options = xnfalloc(sizeof(SMOptions));
     (void)memcpy(options, SMOptions, sizeof(SMOptions));
     xf86ProcessOptions(pScrn->scrnIndex, pScrn->options, options);
-    
+
     /* check for commandline option here */
     /* disable if screen shares resources */
-    if (((pScrn->racMemFlags & RAC_CURSOR) && 
+    if (((pScrn->racMemFlags & RAC_CURSOR) &&
 	 !xf86NoSharedResources(pScrn->scrnIndex,MEM)) ||
-	((pScrn->racIoFlags & RAC_CURSOR) && 
+	((pScrn->racIoFlags & RAC_CURSOR) &&
 	 !xf86NoSharedResources(pScrn->scrnIndex,IO))) {
 	useSM = FALSE;
 	from = X_PROBED;
@@ -2632,7 +2632,7 @@ xf86ConfigIsaEntity(ScrnInfoPtr pScrn, int scrnFlag, int entityIndex,
     IsaChipsets *i_id;
     EntityInfoPtr pEnt = xf86GetEntityInfo(entityIndex);
     if (!pEnt) return pScrn;
-    
+
     if (!(pEnt->location.type == BUS_ISA)) {
 	xfree(pEnt);
 	return pScrn;
@@ -2646,7 +2646,7 @@ xf86ConfigIsaEntity(ScrnInfoPtr pScrn, int scrnFlag, int entityIndex,
     }
 
     if (!pScrn)
-	pScrn = xf86AllocateScreen(pEnt->driver,scrnFlag); 
+	pScrn = xf86AllocateScreen(pEnt->driver,scrnFlag);
     xf86AddEntityToScreen(pScrn,entityIndex);
 
     if (i_chip) {
@@ -2671,7 +2671,7 @@ xf86ConfigPciEntity(ScrnInfoPtr pScrn, int scrnFlag, int entityIndex,
     EntityInfoPtr pEnt = xf86GetEntityInfo(entityIndex);
     if (!pEnt) return pScrn;
 
-    if (!(pEnt->location.type == BUS_PCI) 
+    if (!(pEnt->location.type == BUS_PCI)
 	|| !xf86GetPciInfoForEntity(entityIndex)) {
 	xfree(pEnt);
 	return pScrn;
@@ -2708,12 +2708,12 @@ xf86ConfigPciEntity(ScrnInfoPtr pScrn, int scrnFlag, int entityIndex,
 
 _X_EXPORT ScrnInfoPtr
 xf86ConfigFbEntity(ScrnInfoPtr pScrn, int scrnFlag, int entityIndex,
-		   EntityProc init, EntityProc enter, EntityProc leave, 
+		   EntityProc init, EntityProc enter, EntityProc leave,
 		   pointer private)
 {
     EntityInfoPtr pEnt = xf86GetEntityInfo(entityIndex);
     if (!pEnt) return pScrn;
-    
+
     if (!(pEnt->location.type == BUS_NONE)) {
 	xfree(pEnt);
 	return pScrn;
@@ -2726,7 +2726,7 @@ xf86ConfigFbEntity(ScrnInfoPtr pScrn, int scrnFlag, int entityIndex,
     }
 
     if (!pScrn)
-	pScrn = xf86AllocateScreen(pEnt->driver,scrnFlag); 
+	pScrn = xf86AllocateScreen(pEnt->driver,scrnFlag);
     xf86AddEntityToScreen(pScrn,entityIndex);
 
     xf86SetEntityFuncs(entityIndex,init,enter,leave,private);
@@ -2748,14 +2748,14 @@ xf86ConfigActiveIsaEntity(ScrnInfoPtr pScrn, int entityIndex,
     IsaChipsets *i_id;
     EntityInfoPtr pEnt = xf86GetEntityInfo(entityIndex);
     if (!pEnt) return FALSE;
- 
+
     if (!pEnt->active || !(pEnt->location.type == BUS_ISA)) {
         xfree(pEnt);
         return FALSE;
     }
- 
+
     xf86AddEntityToScreen(pScrn,entityIndex);
- 
+
     if (i_chip) {
         for (i_id = i_chip; i_id->numChipset != -1; i_id++) {
             if (pEnt->chipset == i_id->numChipset) break;
@@ -2766,10 +2766,10 @@ xf86ConfigActiveIsaEntity(ScrnInfoPtr pScrn, int entityIndex,
     xf86ClaimFixedResources(res,entityIndex);
     if (!xf86SetEntityFuncs(entityIndex,init,enter,leave,private))
         return FALSE;
- 
+
     return TRUE;
 }
- 
+
 _X_EXPORT Bool
 xf86ConfigActivePciEntity(ScrnInfoPtr pScrn, int entityIndex,
                           PciChipsets *p_chip, resList res, EntityProc init,
@@ -2778,13 +2778,13 @@ xf86ConfigActivePciEntity(ScrnInfoPtr pScrn, int entityIndex,
     PciChipsets *p_id;
     EntityInfoPtr pEnt = xf86GetEntityInfo(entityIndex);
     if (!pEnt) return FALSE;
- 
+
     if (!pEnt->active || !(pEnt->location.type == BUS_PCI)) {
         xfree(pEnt);
         return FALSE;
     }
     xf86AddEntityToScreen(pScrn,entityIndex);
- 
+
     if (p_chip) {
         for (p_id = p_chip; p_id->numChipset != -1; p_id++) {
             if (pEnt->chipset == p_id->numChipset) break;
@@ -2792,11 +2792,11 @@ xf86ConfigActivePciEntity(ScrnInfoPtr pScrn, int entityIndex,
         xf86ClaimFixedResources(p_id->resList,entityIndex);
     }
     xfree(pEnt);
- 
+
     xf86ClaimFixedResources(res,entityIndex);
     if (!xf86SetEntityFuncs(entityIndex,init,enter,leave,private))
         return FALSE;
- 
+
     return TRUE;
 }
 
@@ -2852,7 +2852,7 @@ xf86ConfigIsaEntityInactive(EntityInfoPtr pEnt, IsaChipsets *i_chip,
 }
 
 void
-xf86ConfigFbEntityInactive(EntityInfoPtr pEnt, EntityProc init, 
+xf86ConfigFbEntityInactive(EntityInfoPtr pEnt, EntityProc init,
 			   EntityProc enter, EntityProc leave, pointer private)
 {
     ScrnInfoPtr pScrn;
@@ -2921,7 +2921,7 @@ xf86RegisterRootWindowProperty(int ScrnIndex, Atom property, Atom type,
     pNewProp->format = format;
     pNewProp->size = len;
     pNewProp->data = value;
- 
+
 #ifdef DEBUG
     ErrorF("new property filled\n");
 #endif
@@ -2963,7 +2963,7 @@ xf86RegisterRootWindowProperty(int ScrnIndex, Atom property, Atom type,
 #ifdef DEBUG
     ErrorF("xf86RegisterRootWindowProperty succeeded\n");
 #endif
-    return(Success);    
+    return(Success);
 }
 
 _X_EXPORT Bool
