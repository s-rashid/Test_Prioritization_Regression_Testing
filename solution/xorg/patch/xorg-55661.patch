diff --git a/hw/xfree86/x86emu/decode.c b/hw/xfree86/x86emu/decode.c
index 9339f4c..12f8fb8 100644
--- a/hw/xfree86/x86emu/decode.c
+++ b/hw/xfree86/x86emu/decode.c
@@ -46,7 +46,8 @@
 REMARKS:
 Handles any pending asychronous interrupts.
 ****************************************************************************/
-static void x86emu_intr_handle(void)
+static void
+x86emu_intr_handle(void)
 {
 	u8	intno;
 
@@ -54,7 +55,8 @@ static void x86emu_intr_handle(void)
 		intno = M.x86.intno;
 		if (_X86EMU_intrTab[intno]) {
 			(*_X86EMU_intrTab[intno])(intno);
-		} else {
+        }
+        else {
 			push_word((u16)M.x86.R_FLG);
 			CLEAR_FLAG(F_IF);
 			CLEAR_FLAG(F_TF);
@@ -75,8 +77,8 @@ REMARKS:
 Raise the specified interrupt to be handled before the execution of the
 next instruction.
 ****************************************************************************/
-void x86emu_intr_raise(
-	u8 intrnum)
+void
+x86emu_intr_raise(u8 intrnum)
 {
 	M.x86.intno = intrnum;
 	M.x86.intr |= INTR_SYNCH;
@@ -88,12 +90,14 @@ Main execution loop for the emulator. We return from here when the system
 halts, which is normally caused by a stack fault when we return from the
 original real mode call.
 ****************************************************************************/
-void X86EMU_exec(void)
+void
+X86EMU_exec(void)
 {
 	u8 op1;
 
 	M.x86.intr = 0;
-	DB(x86emu_end_instr();)
+    DB(x86emu_end_instr();
+        )
 
     for (;;) {
 DB(		if (CHECK_IP_FETCH())
@@ -104,16 +108,15 @@ DB(		if (CHECK_IP_FETCH())
 		if (M.x86.intr) {
 			if (M.x86.intr & INTR_HALTED) {
 DB(             if (M.x86.R_SP != 0) {
-                    printk("halted\n");
-                    X86EMU_trace_regs();
-                    }
+                   printk("halted\n"); X86EMU_trace_regs();}
                 else {
                     if (M.x86.debug)
-                        printk("Service completed successfully\n");
-                    })
+                   printk("Service completed successfully\n");}
+                )
 				return;
             }
-			if (((M.x86.intr & INTR_SYNCH) && (M.x86.intno == 0 || M.x86.intno == 2)) ||
+            if (((M.x86.intr & INTR_SYNCH) &&
+                 (M.x86.intno == 0 || M.x86.intno == 2)) ||
 				!ACCESS_FLAG(F_IF)) {
 				x86emu_intr_handle();
 			}
@@ -131,7 +134,8 @@ DB(             if (M.x86.R_SP != 0) {
 REMARKS:
 Halts the system by setting the halted system flag.
 ****************************************************************************/
-void X86EMU_halt_sys(void)
+void
+X86EMU_halt_sys(void)
 {
 	M.x86.intr |= INTR_HALTED;
 }
@@ -148,10 +152,8 @@ next instruction.
 
 NOTE: Do not inline this function, as (*sys_rdb) is already inline!
 ****************************************************************************/
-void fetch_decode_modrm(
-	int *mod,
-	int *regh,
-	int *regl)
+void
+fetch_decode_modrm(int *mod, int *regh, int *regl)
 {
 	int fetched;
 
@@ -174,7 +176,8 @@ moves the instruction pointer to the next value.
 
 NOTE: Do not inline this function, as (*sys_rdb) is already inline!
 ****************************************************************************/
-u8 fetch_byte_imm(void)
+u8
+fetch_byte_imm(void)
 {
 	u8 fetched;
 
@@ -195,7 +198,8 @@ moves the instruction pointer to the next value.
 
 NOTE: Do not inline this function, as (*sys_rdw) is already inline!
 ****************************************************************************/
-u16 fetch_word_imm(void)
+u16
+fetch_word_imm(void)
 {
 	u16	fetched;
 
@@ -217,7 +221,8 @@ moves the instruction pointer to the next value.
 
 NOTE: Do not inline this function, as (*sys_rdw) is already inline!
 ****************************************************************************/
-u32 fetch_long_imm(void)
+u32
+fetch_long_imm(void)
 {
 	u32 fetched;
 
@@ -258,7 +263,8 @@ cpu-state-varible M.x86.mode. There are several potential states:
 
 Each of the above 7 items are handled with a bit in the mode field.
 ****************************************************************************/
-_INLINE u32 get_data_segment(void)
+_INLINE u32
+get_data_segment(void)
 {
 #define	GET_SEGMENT(segment)
 	switch (M.x86.mode & SYSMODE_SEGMASK) {
@@ -301,8 +307,8 @@ Byte value read from the absolute memory location.
 
 NOTE: Do not inline this function as (*sys_rdX) is already inline!
 ****************************************************************************/
-u8 fetch_data_byte(
-	uint offset)
+u8
+fetch_data_byte(uint offset)
 {
 #ifdef DEBUG
 	if (CHECK_DATA_ACCESS())
@@ -320,8 +326,8 @@ Word value read from the absolute memory location.
 
 NOTE: Do not inline this function as (*sys_rdX) is already inline!
 ****************************************************************************/
-u16 fetch_data_word(
-	uint offset)
+u16
+fetch_data_word(uint offset)
 {
 #ifdef DEBUG
 	if (CHECK_DATA_ACCESS())
@@ -339,8 +345,8 @@ Long value read from the absolute memory location.
 
 NOTE: Do not inline this function as (*sys_rdX) is already inline!
 ****************************************************************************/
-u32 fetch_data_long(
-	uint offset)
+u32
+fetch_data_long(uint offset)
 {
 #ifdef DEBUG
 	if (CHECK_DATA_ACCESS())
@@ -359,9 +365,8 @@ Byte value read from the absolute memory location.
 
 NOTE: Do not inline this function as (*sys_rdX) is already inline!
 ****************************************************************************/
-u8 fetch_data_byte_abs(
-	uint segment,
-	uint offset)
+u8
+fetch_data_byte_abs(uint segment, uint offset)
 {
 #ifdef DEBUG
 	if (CHECK_DATA_ACCESS())
@@ -380,9 +385,8 @@ Word value read from the absolute memory location.
 
 NOTE: Do not inline this function as (*sys_rdX) is already inline!
 ****************************************************************************/
-u16 fetch_data_word_abs(
-	uint segment,
-	uint offset)
+u16
+fetch_data_word_abs(uint segment, uint offset)
 {
 #ifdef DEBUG
 	if (CHECK_DATA_ACCESS())
@@ -401,9 +405,8 @@ Long value read from the absolute memory location.
 
 NOTE: Do not inline this function as (*sys_rdX) is already inline!
 ****************************************************************************/
-u32 fetch_data_long_abs(
-	uint segment,
-	uint offset)
+u32
+fetch_data_long_abs(uint segment, uint offset)
 {
 #ifdef DEBUG
 	if (CHECK_DATA_ACCESS())
@@ -423,9 +426,8 @@ the current 'default' segment, which may have been overridden.
 
 NOTE: Do not inline this function as (*sys_wrX) is already inline!
 ****************************************************************************/
-void store_data_byte(
-	uint offset,
-	u8 val)
+void
+store_data_byte(uint offset, u8 val)
 {
 #ifdef DEBUG
 	if (CHECK_DATA_ACCESS())
@@ -445,9 +447,8 @@ the current 'default' segment, which may have been overridden.
 
 NOTE: Do not inline this function as (*sys_wrX) is already inline!
 ****************************************************************************/
-void store_data_word(
-	uint offset,
-	u16 val)
+void
+store_data_word(uint offset, u16 val)
 {
 #ifdef DEBUG
 	if (CHECK_DATA_ACCESS())
@@ -467,9 +468,8 @@ the current 'default' segment, which may have been overridden.
 
 NOTE: Do not inline this function as (*sys_wrX) is already inline!
 ****************************************************************************/
-void store_data_long(
-	uint offset,
-	u32 val)
+void
+store_data_long(uint offset, u32 val)
 {
 #ifdef DEBUG
 	if (CHECK_DATA_ACCESS())
@@ -489,10 +489,8 @@ Writes a byte value to an absolute memory location.
 
 NOTE: Do not inline this function as (*sys_wrX) is already inline!
 ****************************************************************************/
-void store_data_byte_abs(
-	uint segment,
-	uint offset,
-	u8 val)
+void
+store_data_byte_abs(uint segment, uint offset, u8 val)
 {
 #ifdef DEBUG
 	if (CHECK_DATA_ACCESS())
@@ -512,10 +510,8 @@ Writes a word value to an absolute memory location.
 
 NOTE: Do not inline this function as (*sys_wrX) is already inline!
 ****************************************************************************/
-void store_data_word_abs(
-	uint segment,
-	uint offset,
-	u16 val)
+void
+store_data_word_abs(uint segment, uint offset, u16 val)
 {
 #ifdef DEBUG
 	if (CHECK_DATA_ACCESS())
@@ -535,10 +531,8 @@ Writes a long value to an absolute memory location.
 
 NOTE: Do not inline this function as (*sys_wrX) is already inline!
 ****************************************************************************/
-void store_data_long_abs(
-	uint segment,
-	uint offset,
-	u32 val)
+void
+store_data_long_abs(uint segment, uint offset, u32 val)
 {
 #ifdef DEBUG
 	if (CHECK_DATA_ACCESS())
@@ -558,8 +552,8 @@ REMARKS:
 Return a pointer to the register given by the R/RM field of the
 modrm byte, for byte operands. Also enables the decoding of instructions.
 ****************************************************************************/
-u8* decode_rm_byte_register(
-	int reg)
+u8 *
+decode_rm_byte_register(int reg)
 {
 	switch (reg) {
       case 0:
@@ -602,8 +596,8 @@ REMARKS:
 Return a pointer to the register given by the R/RM field of the
 modrm byte, for word operands.  Also enables the decoding of instructions.
 ****************************************************************************/
-u16* decode_rm_word_register(
-	int reg)
+u16 *
+decode_rm_word_register(int reg)
 {
 	switch (reg) {
 	  case 0:
@@ -646,8 +640,8 @@ REMARKS:
 Return a pointer to the register given by the R/RM field of the
 modrm byte, for dword operands.  Also enables the decoding of instructions.
 ****************************************************************************/
-u32* decode_rm_long_register(
-	int reg)
+u32 *
+decode_rm_long_register(int reg)
 {
     switch (reg) {
       case 0:
@@ -691,8 +685,8 @@ Return a pointer to the register given by the R/RM field of the
 modrm byte, for word operands, modified from above for the weirdo
 special case of segreg operands.  Also enables the decoding of instructions.
 ****************************************************************************/
-u16* decode_rm_seg_register(
-	int reg)
+u16 *
+decode_rm_seg_register(int reg)
 {
 	switch (reg) {
 	  case 0:
@@ -726,7 +720,8 @@ u16* decode_rm_seg_register(
  *
  * return offset from the SIB Byte
  */
-u32 decode_sib_address(int sib, int mod)
+u32
+decode_sib_address(int sib, int mod)
 {
     u32 base = 0, i = 0, scale = 1;
 
@@ -756,7 +751,8 @@ u32 decode_sib_address(int sib, int mod)
 	if (mod == 0) {
 	    base = fetch_long_imm();
 	    DECODE_PRINTF2("%08x", base);
-	} else {
+        }
+        else {
 	    DECODE_PRINTF("[EBP]");
 	    base = M.x86.R_ESP;
 	    M.x86.mode |= SYSMODE_SEG_DS_SS;
@@ -808,7 +804,8 @@ u32 decode_sib_address(int sib, int mod)
     if (((sib >> 3) & 0x07) != 4) {
 	if (scale == 1) {
 	    DECODE_PRINTF("]");
-	} else {
+        }
+        else {
 	    DECODE_PRINTF2("*%d]", scale);
 	}
     }
@@ -835,8 +832,8 @@ NOTE: 	The code which specifies the corresponding segment (ds vs ss)
 		if a SS access is needed, set this bit.  Otherwise, DS access
 		occurs (unless any of the segment override bits are set).
 ****************************************************************************/
-u32 decode_rm00_address(
-	int rm)
+u32
+decode_rm00_address(int rm)
 {
     u32 offset;
     int sib;
@@ -871,7 +868,8 @@ u32 decode_rm00_address(
 		return M.x86.R_EDI;
 	}
 	HALT_SYS();
-    } else {
+    }
+    else {
         /* 16-bit addressing */
 	switch (rm) {
 	  case 0:
@@ -918,8 +916,8 @@ REMARKS:
 Return the offset given by mod=01 addressing.  Also enables the
 decoding of instructions.
 ****************************************************************************/
-u32 decode_rm01_address(
-	int rm)
+u32
+decode_rm01_address(int rm)
 {
     int displacement = 0;
     int sib;
@@ -959,7 +957,8 @@ u32 decode_rm01_address(
 		return M.x86.R_EDI + displacement;
 	}
 	HALT_SYS();
-    } else {
+    }
+    else {
         /* 16-bit addressing */
 	switch (rm) {
 	  case 0:
@@ -1006,8 +1005,8 @@ REMARKS:
 Return the offset given by mod=10 addressing.  Also enables the
 decoding of instructions.
 ****************************************************************************/
-u32 decode_rm10_address(
-	int rm)
+u32
+decode_rm10_address(int rm)
 {
     u32 displacement = 0;
     int sib;
@@ -1054,7 +1053,8 @@ u32 decode_rm10_address(
 		return M.x86.R_EDI + displacement;
 	}
 	HALT_SYS();
-    } else {
+    }
+    else {
         /* 16-bit addressing */
       switch (rm) {
 	  case 0:
