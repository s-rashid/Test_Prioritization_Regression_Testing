diff --git a/Xext/xselinux_label.c b/Xext/xselinux_label.c
index 239536c..9b5023a 100644
--- a/Xext/xselinux_label.c
+++ b/Xext/xselinux_label.c
@@ -177,21 +177,18 @@ SELinuxSelectionToSID(Atom selection, SELinuxSubjectRec *subj,
 
     /* Check for an override context next */
     if (subj->sel_use_sid) {
-	sidget(tsid = subj->sel_use_sid);
+	tsid = subj->sel_use_sid;
 	goto out;
     }
 
-    sidget(tsid = obj->sid);
+    tsid = obj->sid;
 
     /* Polyinstantiate if necessary to obtain the final SID */
-    if (obj->poly) {
-	sidput(tsid);
-	if (avc_compute_member(subj->sid, obj->sid,
+    if (obj->poly && avc_compute_member(subj->sid, obj->sid,
 			       SECCLASS_X_SELECTION, &tsid) < 0) {
 	    ErrorF("SELinux: a compute_member call failed!\n");
 	    return BadValue;
 	}
-    }
 out:
     *sid_rtn = tsid;
     if (poly_rtn)
@@ -217,7 +214,7 @@ SELinuxPropertyToSID(Atom property, SELinuxSubjectRec *subj,
 
     /* Check for an override context next */
     if (subj->prp_use_sid) {
-	sidget(tsid = subj->prp_use_sid);
+	tsid = subj->prp_use_sid;
 	goto out;
     }
 
@@ -234,10 +231,8 @@ SELinuxPropertyToSID(Atom property, SELinuxSubjectRec *subj,
 	if (avc_compute_member(subj->sid, tsid2,
 			       SECCLASS_X_PROPERTY, &tsid) < 0) {
 	    ErrorF("SELinux: a compute_member call failed!\n");
-	    sidput(tsid2);
 	    return BadValue;
 	}
-	sidput(tsid2);
     }
 out:
     *sid_rtn = tsid;
@@ -273,11 +268,9 @@ SELinuxEventToSID(unsigned type, security_id_t sid_of_window,
 	}
 	freecon(ctx);
 	/* Cache the SID value */
-	if (!SELinuxArraySet(&arr_events, type, sid)) {
-	    sidput(sid);
+	if (!SELinuxArraySet(&arr_events, type, sid))
 	    return BadAlloc;
 	}
-    }
 
     /* Perform a transition to obtain the final SID */
     if (avc_compute_create(sid_of_window, sid, SECCLASS_X_EVENT,
