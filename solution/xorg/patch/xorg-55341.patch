diff --git a/hw/dmx/input/lnx-ms.c b/hw/dmx/input/lnx-ms.c
index ee18707..7e1acf4 100644
--- a/hw/dmx/input/lnx-ms.c
+++ b/hw/dmx/input/lnx-ms.c
@@ -116,7 +116,8 @@ typedef struct _myPrivate {
     }              buttons;
 } myPrivate;
 
-static int msLinuxReadBytes(int fd, unsigned char *buf, int len, int min)
+static int
+msLinuxReadBytes(int fd, unsigned char *buf, int len, int min)
 {
     int		    n, tot;
     fd_set	    set;
@@ -130,19 +131,21 @@ static int msLinuxReadBytes(int fd, unsigned char *buf, int len, int min)
 	    buf += n;
 	    len -= n;
 	}
-	if (tot % min == 0) break;
+        if (tot % min == 0)
+            break;
 	FD_ZERO(&set);
 	FD_SET(fd, &set);
 	tv.tv_sec = 0;
 	tv.tv_usec = 100 * 1000;
 	n = select(fd + 1, &set, 0, 0, &tv);
-	if (n <= 0) break;
+        if (n <= 0)
+            break;
     }
     return tot;
 }
 
-static void msLinuxButton(DevicePtr pDev, ENQUEUEPROC enqueue, int buttons,
-                          BLOCK block)
+static void
+msLinuxButton(DevicePtr pDev, ENQUEUEPROC enqueue, int buttons, BLOCK block)
 {
     GETPRIV;
 
@@ -156,20 +159,30 @@ static void msLinuxButton(DevicePtr pDev, ENQUEUEPROC enqueue, int buttons,
         enqueue(pDev, ButtonRelease, 0, 0, NULL, block); \
     } while (0)
           
-    if ((buttons & button1) && !(priv->buttons & button1)) PRESS(1);
-    if (!(buttons & button1) && (priv->buttons & button1)) RELEASE(1);
+    if ((buttons & button1) && !(priv->buttons & button1))
+        PRESS(1);
+    if (!(buttons & button1) && (priv->buttons & button1))
+        RELEASE(1);
 
-    if ((buttons & button2) && !(priv->buttons & button2)) PRESS(2);
-    if (!(buttons & button2) && (priv->buttons & button2)) RELEASE(2);
+    if ((buttons & button2) && !(priv->buttons & button2))
+        PRESS(2);
+    if (!(buttons & button2) && (priv->buttons & button2))
+        RELEASE(2);
 
-    if ((buttons & button3) && !(priv->buttons & button3)) PRESS(3);
-    if (!(buttons & button3) && (priv->buttons & button3)) RELEASE(3);
+    if ((buttons & button3) && !(priv->buttons & button3))
+        PRESS(3);
+    if (!(buttons & button3) && (priv->buttons & button3))
+        RELEASE(3);
 
-    if ((buttons & button4) && !(priv->buttons & button4)) PRESS(4);
-    if (!(buttons & button4) && (priv->buttons & button4)) RELEASE(4);
+    if ((buttons & button4) && !(priv->buttons & button4))
+        PRESS(4);
+    if (!(buttons & button4) && (priv->buttons & button4))
+        RELEASE(4);
     
-    if ((buttons & button5) && !(priv->buttons & button5)) PRESS(5);
-    if (!(buttons & button5) && (priv->buttons & button5)) RELEASE(5);
+    if ((buttons & button5) && !(priv->buttons & button5))
+        PRESS(5);
+    if (!(buttons & button5) && (priv->buttons & button5))
+        RELEASE(5);
 
     priv->buttons = buttons;
 }
@@ -180,11 +193,10 @@ static void msLinuxButton(DevicePtr pDev, ENQUEUEPROC enqueue, int buttons,
  * with the \a enqueue function.  The \a block type is passed to the
  * functions so that they may block SIGIO handling as appropriate to the
  * caller of this function. */
-void msLinuxRead(DevicePtr pDev,
+void
+msLinuxRead(DevicePtr pDev,
                  MOTIONPROC motion,
-                 ENQUEUEPROC enqueue,
-                 CHECKPROC checkspecial,
-                 BLOCK block)
+            ENQUEUEPROC enqueue, CHECKPROC checkspecial, BLOCK block)
 {
     GETPRIV;
     unsigned char   buf[3 * 200]; /* RATS: Use ok */
@@ -211,20 +223,22 @@ void msLinuxRead(DevicePtr pDev,
 }
 
 /** Initialize \a pDev. */
-void msLinuxInit(DevicePtr pDev)
+void
+msLinuxInit(DevicePtr pDev)
 {
     GETPRIV;
     const char *names[] = { "/dev/serialmouse", "/dev/mouse", NULL };
     int        i;
 
-    if (priv->fd >=0) return;
+    if (priv->fd >= 0)
+        return;
 
     for (i = 0; names[i]; i++) {
-        if ((priv->fd = open(names[i], O_RDWR | O_NONBLOCK, 0)) >= 0) break;
+        if ((priv->fd = open(names[i], O_RDWR | O_NONBLOCK, 0)) >= 0)
+            break;
     }
     if (priv->fd < 0)
-        FATAL1("msLinuxInit: Cannot open mouse port (%s)\n",
-               strerror(errno));
+        FATAL1("msLinuxInit: Cannot open mouse port (%s)\n", strerror(errno));
     
     if (!isatty(priv->fd))
         FATAL1("msLinuxInit: Mouse port %s is not a tty\n", names[i]);
@@ -237,12 +251,14 @@ void msLinuxInit(DevicePtr pDev)
 }
 
 /** Turn \a pDev on (i.e., take input from \a pDev). */
-int msLinuxOn(DevicePtr pDev)
+int
+msLinuxOn(DevicePtr pDev)
 {
     GETPRIV;
     struct termios nTty;
 
-    if (priv->fd < 0) msLinuxInit(pDev);
+    if (priv->fd < 0)
+        msLinuxInit(pDev);
     
     nTty             = priv->tty;
     nTty.c_iflag    &= ~(IGNBRK | BRKINT | PARMRK | ISTRIP | INLCR
@@ -262,7 +278,8 @@ int msLinuxOn(DevicePtr pDev)
 }
 
 /** Turn \a pDev off (i.e., stop taking input from \a pDev). */
-void msLinuxOff(DevicePtr pDev)
+void
+msLinuxOff(DevicePtr pDev)
 {
     GETPRIV;
 
@@ -271,42 +288,52 @@ void msLinuxOff(DevicePtr pDev)
     priv->fd = -1;
 }
 
-static void msLinuxGetMap(DevicePtr pDev, unsigned char *map, int *nButtons)
+static void
+msLinuxGetMap(DevicePtr pDev, unsigned char *map, int *nButtons)
 {
     int i;
     
-    if (nButtons) *nButtons = 3;
-    if (map) for (i = 0; i <= *nButtons; i++) map[i] = i;
+    if (nButtons)
+        *nButtons = 3;
+    if (map)
+        for (i = 0; i <= *nButtons; i++)
+            map[i] = i;
 }
 
 /** Currently unused hook called prior to an VT switch. */
-void msLinuxVTPreSwitch(pointer p)
+void
+msLinuxVTPreSwitch(pointer p)
 {
 }
 
 /** Currently unused hook called after returning from a VT switch. */
-void msLinuxVTPostSwitch(pointer p)
+void
+msLinuxVTPostSwitch(pointer p)
 {
 }
 
 /** Create a private structure for use within this file. */
-pointer msLinuxCreatePrivate(DeviceIntPtr pMouse)
+pointer
+msLinuxCreatePrivate(DeviceIntPtr pMouse)
 {
     myPrivate *priv = calloc(1, sizeof(*priv));
+
     priv->fd     = -1;
     priv->pMouse = pMouse;
     return priv;
 }
 
 /** Destroy a private structure. */
-void msLinuxDestroyPrivate(pointer priv)
+void
+msLinuxDestroyPrivate(pointer priv)
 {
     free(priv);
 }
 
 /** Fill the \a info structure with information needed to initialize \a
  * pDev. */ 
-void msLinuxGetInfo(DevicePtr pDev, DMXLocalInitInfoPtr info)
+void
+msLinuxGetInfo(DevicePtr pDev, DMXLocalInitInfoPtr info)
 {
     info->buttonClass      = 1;
     msLinuxGetMap(pDev, info->map, &info->numButtons);
