diff --git a/hw/xwin/glx/winpriv.c b/hw/xwin/glx/winpriv.c
index 4609737..4f6e4ff 100644
--- a/hw/xwin/glx/winpriv.c
+++ b/hw/xwin/glx/winpriv.c
@@ -13,25 +13,25 @@
 
 void
 winCreateWindowsWindow (WindowPtr pWin);
+
 /**
  * Return size and handles of a window.
  * If pWin is NULL, then the information for the root window is requested.
  */
-HWND winGetWindowInfo(WindowPtr pWin)
+HWND
+winGetWindowInfo(WindowPtr pWin)
 {
     winTrace("%s: pWin %p XID 0x%x\n", __FUNCTION__, pWin, pWin->drawable.id);
 
     /* a real window was requested */
-    if (pWin != NULL)
-    {
+    if (pWin != NULL) {
         /* Get the window and screen privates */
         ScreenPtr pScreen = pWin->drawable.pScreen;
         winPrivScreenPtr pWinScreen = winGetScreenPriv(pScreen);
         winScreenInfoPtr pScreenInfo = NULL;
         HWND hwnd = NULL;
 
-        if (pWinScreen == NULL)
-        {
+        if (pWinScreen == NULL) {
             ErrorF("winGetWindowInfo: screen has no privates\n");
             return NULL;
         }
@@ -41,24 +41,20 @@ HWND winGetWindowInfo(WindowPtr pWin)
         pScreenInfo = pWinScreen->pScreenInfo;
 #ifdef XWIN_MULTIWINDOW
         /* check for multiwindow mode */
-        if (pScreenInfo->fMultiWindow)
-        {
+        if (pScreenInfo->fMultiWindow) {
             winWindowPriv(pWin);
 
-            if (pWinPriv == NULL)
-            {
+            if (pWinPriv == NULL) {
                 ErrorF("winGetWindowInfo: window has no privates\n");
                 return hwnd;
             }
 
-            if (pWinPriv->hWnd == NULL)
-            {
+            if (pWinPriv->hWnd == NULL) {
               winCreateWindowsWindow(pWin);
               ErrorF("winGetWindowInfo: forcing window to exist...\n");
             }
 
-            if (pWinPriv->hWnd != NULL)
-              {
+            if (pWinPriv->hWnd != NULL) {
                 /* copy window handle */
                 hwnd = pWinPriv->hWnd;
 
@@ -71,8 +67,7 @@ HWND winGetWindowInfo(WindowPtr pWin)
 #endif
 #ifdef XWIN_MULTIWINDOWEXTWM
         /* check for multiwindow external wm mode */
-        if (pScreenInfo->fMWExtWM)
-        {
+        if (pScreenInfo->fMWExtWM) {
             win32RootlessWindowPtr pRLWinPriv
                 = (win32RootlessWindowPtr) RootlessFrameForWindow (pWin, FALSE);
 
@@ -81,8 +76,7 @@ HWND winGetWindowInfo(WindowPtr pWin)
                 return hwnd;
             }
 
-            if (pRLWinPriv->hWnd != NULL)
-            {
+            if (pRLWinPriv->hWnd != NULL) {
                 /* copy window handle */
                 hwnd = pRLWinPriv->hWnd;
             }
@@ -90,13 +84,11 @@ HWND winGetWindowInfo(WindowPtr pWin)
         }
 #endif
     }
-    else
-    {
+    else {
         ScreenPtr pScreen = g_ScreenInfo[0].pScreen;
         winPrivScreenPtr pWinScreen = winGetScreenPriv(pScreen);
 
-        if (pWinScreen == NULL)
-        {
+        if (pWinScreen == NULL) {
             ErrorF("winGetWindowInfo: screen has no privates\n");
             return NULL;
         }
