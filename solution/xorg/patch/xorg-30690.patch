diff --git a/dix/getevents.c b/dix/getevents.c
index 6988b8b..bcbc00b 100644
--- a/dix/getevents.c
+++ b/dix/getevents.c
@@ -1,23 +1,25 @@
 /*
  * Copyright © 2006 Nokia Corporation
- * Copyright © 2006 Daniel Stone
+ * Copyright © 2006-2007 Daniel Stone
  *
- * Permission to use, copy, modify, distribute, and sell this software and
- * its documentation for any purpose is hereby granted without fee,
- * provided that the above copyright notice appear in all copies and that
- * both that this copyright notice and this permission notice appear in
- * supporting electronic documentation.
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
  *
- * The above copyright notice and this permission notice shall be included
- * in all copies or substantial portions of the Software.
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
  *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
- * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR AUTHORS BE LIABLE FOR ANY
- * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
- * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
- * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
  *
  * Author: Daniel Stone <daniel@fooishbar.org>
  */
@@ -449,6 +451,14 @@ GetKeyboardValuatorEvents(EventList *events, DeviceIntPtr pDev, int type,
 
     ms = GetTimeInMillis();
 
+    if (pDev->coreEvents) {
+        xEvent* evt = events->event;
+        evt->u.keyButtonPointer.time = ms;
+        evt->u.u.type = type;
+        evt->u.u.detail = key_code;
+        events++;
+    }
+
     kbp = (deviceKeyButtonPointer *) events->event;
     kbp->time = ms;
     kbp->deviceid = pDev->id;
@@ -466,13 +476,6 @@ GetKeyboardValuatorEvents(EventList *events, DeviceIntPtr pDev, int type,
                                    num_valuators, valuators);
     }
 
-    if (pDev->coreEvents) {
-        xEvent* evt = events->event;
-        evt->u.keyButtonPointer.time = ms;
-        evt->u.u.type = type;
-        evt->u.u.detail = key_code;
-    }
-
     return numEvents;
 }
 
@@ -561,14 +564,18 @@ GetPointerEvents(EventList *events, DeviceIntPtr pDev, int type, int buttons,
     if ((type == ButtonPress || type == ButtonRelease) && !pDev->button)
         return 0;
 
-    if (!coreOnly && (pDev->coreEvents))
+    /* FIXME: I guess it should, in theory, be possible to post button events
+     *        from devices without valuators. */
+    if (!pDev->valuator)
+        return 0;
+
+    if (!coreOnly && pDev->coreEvents)
         num_events = 3;
     else
         num_events = 2;
 
-    if (type == MotionNotify && num_valuators <= 0) {
+    if (type == MotionNotify && num_valuators <= 0)
         return 0;
-    }
 
     /* Do we need to send a DeviceValuator event? */
     if (!coreOnly && sendValuators) {
@@ -670,9 +677,28 @@ GetPointerEvents(EventList *events, DeviceIntPtr pDev, int type, int buttons,
     pDev->valuator->lastx = x;
     pDev->valuator->lasty = y;
 
-    /* create Xi event */
-    if (!coreOnly)
-    {
+    /* for some reason inputInfo.pointer does not have coreEvents set */
+    if (coreOnly || pDev->coreEvents) {
+        xEvent* evt = events->event;
+        evt->u.u.type = type;
+        evt->u.keyButtonPointer.time = ms;
+        evt->u.keyButtonPointer.rootX = x;
+        evt->u.keyButtonPointer.rootY = y;
+
+        if (type == ButtonPress || type == ButtonRelease) {
+            /* We hijack SetPointerMapping to work on all core-sending
+             * devices, so we use the device-specific map here instead of
+             * the core one. */
+            evt->u.u.detail = pDev->button->map[buttons];
+        }
+        else {
+            evt->u.u.detail = 0;
+        }
+
+        events++;
+    }
+
+    if (!coreOnly) {
         kbp = (deviceKeyButtonPointer *) events->event;
         kbp->time = ms;
         kbp->deviceid = pDev->id;
@@ -700,24 +726,6 @@ GetPointerEvents(EventList *events, DeviceIntPtr pDev, int type, int buttons,
         }
     }
 
-    if (coreOnly || pDev->coreEvents) {
-        xEvent* evt = events->event;
-        evt->u.u.type = type;
-        evt->u.keyButtonPointer.time = ms;
-        evt->u.keyButtonPointer.rootX = x;
-        evt->u.keyButtonPointer.rootY = y;
-
-        if (type == ButtonPress || type == ButtonRelease) {
-            /* We hijack SetPointerMapping to work on all core-sending
-             * devices, so we use the device-specific map here instead of
-             * the core one. */
-            evt->u.u.detail = pDev->button->map[buttons];
-        }
-        else {
-            evt->u.u.detail = 0;
-        }
-    }
-
     return num_events;
 }
 
