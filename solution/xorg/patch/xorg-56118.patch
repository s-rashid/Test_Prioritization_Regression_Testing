diff --git a/test/xi2/protocol-xiquerydevice.c b/test/xi2/protocol-xiquerydevice.c
index 569aea9..5e59e80 100644
--- a/test/xi2/protocol-xiquerydevice.c
+++ b/test/xi2/protocol-xiquerydevice.c
@@ -53,17 +53,19 @@ struct test_data {
     int num_devices_in_reply;
 };
 
-static void reply_XIQueryDevice_data(ClientPtr client, int len, char *data, void *userdata);
-static void reply_XIQueryDevice(ClientPtr client, int len, char* data, void *userdata);
+static void reply_XIQueryDevice_data(ClientPtr client, int len, char *data,
+                                     void *userdata);
+static void reply_XIQueryDevice(ClientPtr client, int len, char *data,
+                                void *userdata);
 
 /* reply handling for the first bytes that constitute the reply */
-static void reply_XIQueryDevice(ClientPtr client, int len, char* data, void *userdata)
+static void
+reply_XIQueryDevice(ClientPtr client, int len, char *data, void *userdata)
 {
     xXIQueryDeviceReply *rep = (xXIQueryDeviceReply*)data;
     struct test_data *querydata = (struct test_data*)userdata;
 
-    if (client->swapped)
-    {
+    if (client->swapped) {
         swapl(&rep->length);
         swaps(&rep->sequenceNumber);
         swaps(&rep->num_devices);
@@ -83,7 +85,8 @@ static void reply_XIQueryDevice(ClientPtr client, int len, char* data, void *use
 }
 
 /* reply handling for the trailing bytes that constitute the device info */
-static void reply_XIQueryDevice_data(ClientPtr client, int len, char *data, void *userdata)
+static void
+reply_XIQueryDevice_data(ClientPtr client, int len, char *data, void *userdata)
 {
     int i, j;
     struct test_data *querydata = (struct test_data*)userdata;
@@ -92,10 +95,8 @@ static void reply_XIQueryDevice_data(ClientPtr client, int len, char *data, void
     xXIDeviceInfo *info = (xXIDeviceInfo*)data;
     xXIAnyInfo *any;
 
-    for (i = 0; i < querydata->num_devices_in_reply; i++)
-    {
-        if (client->swapped)
-        {
+    for (i = 0; i < querydata->num_devices_in_reply; i++) {
+        if (client->swapped) {
             swaps(&info->deviceid);
             swaps(&info->attachment);
             swaps(&info->use);
@@ -108,9 +109,7 @@ static void reply_XIQueryDevice_data(ClientPtr client, int len, char *data, void
 
         assert(info->deviceid >=  2); /* 0 and 1 is reserved */
 
-
-        switch(info->deviceid)
-        {
+        switch (info->deviceid) {
             case 2:  /* VCP */
                 dev = devices.vcp;
                 assert(info->use == XIMasterPointer);
@@ -145,18 +144,16 @@ static void reply_XIQueryDevice_data(ClientPtr client, int len, char *data, void
         assert(info->name_len == strlen(dev->name));
         assert(strncmp((char*)&info[1], dev->name, info->name_len) == 0);
 
-        any = (xXIAnyInfo*)((char*)&info[1] + ((info->name_len + 3)/4) * 4);
-        for (j = 0; j < info->num_classes; j++)
-        {
-            if (client->swapped)
-            {
+        any =
+            (xXIAnyInfo *) ((char *) &info[1] + ((info->name_len + 3) / 4) * 4);
+        for (j = 0; j < info->num_classes; j++) {
+            if (client->swapped) {
                 swaps(&any->type);
                 swaps(&any->length);
                 swaps(&any->sourceid);
             }
 
-            switch(info->deviceid)
-            {
+            switch (info->deviceid) {
                 case 3: /* VCK and kbd have the same properties */
                 case 5:
                     {
@@ -169,12 +166,12 @@ static void reply_XIQueryDevice_data(ClientPtr client, int len, char *data, void
                             swaps(&ki->num_keycodes);
 
                         assert(any->type == XIKeyClass);
-                        assert(ki->num_keycodes == (xkb->max_key_code - xkb->min_key_code + 1));
+                assert(ki->num_keycodes ==
+                       (xkb->max_key_code - xkb->min_key_code + 1));
                         assert(any->length == (2 + ki->num_keycodes));
 
                         kc = (uint32_t*)&ki[1];
-                        for (k = 0; k < ki->num_keycodes; k++, kc++)
-                        {
+                for (k = 0; k < ki->num_keycodes; k++, kc++) {
                             if (client->swapped)
                                 swapl(kc);
 
@@ -189,12 +186,10 @@ static void reply_XIQueryDevice_data(ClientPtr client, int len, char *data, void
                                any->type == XIValuatorClass ||
                                any->type == XIScrollClass);
 
-                        if (any->type == XIScrollClass)
-                        {
+                if (any->type == XIScrollClass) {
                             xXIScrollInfo *si = (xXIScrollInfo*)any;
 
-                            if (client->swapped)
-                            {
+                    if (client->swapped) {
                                 swaps(&si->number);
                                 swaps(&si->scroll_type);
                                 swapl(&si->increment.integral);
@@ -226,8 +221,7 @@ static void reply_XIQueryDevice_data(ClientPtr client, int len, char *data, void
                             assert(any->type == XIButtonClass ||
                                    any->type == XIValuatorClass);
 
-                        if (any->type == XIButtonClass)
-                        {
+                if (any->type == XIButtonClass) {
                             int len;
                             xXIButtonInfo *bi = (xXIButtonInfo*)any;
 
@@ -236,14 +230,15 @@ static void reply_XIQueryDevice_data(ClientPtr client, int len, char *data, void
 
                             assert(bi->num_buttons == devices.vcp->button->numButtons);
 
-                            len = 2 + bi->num_buttons + bytes_to_int32(bits_to_bytes(bi->num_buttons));
+                    len =
+                        2 + bi->num_buttons +
+                        bytes_to_int32(bits_to_bytes(bi->num_buttons));
                             assert(bi->length == len);
-                        } else if (any->type == XIValuatorClass)
-                        {
+                }
+                else if (any->type == XIValuatorClass) {
                             xXIValuatorInfo *vi = (xXIValuatorInfo*)any;
 
-                            if (client->swapped)
-                            {
+                    if (client->swapped) {
                                 swaps(&vi->number);
                                 swapl(&vi->label);
                                 swapl(&vi->min.integral);
@@ -277,8 +272,8 @@ static void reply_XIQueryDevice_data(ClientPtr client, int len, char *data, void
     }
 }
 
-static void request_XIQueryDevice(struct test_data *querydata,
-                                 int deviceid, int error)
+static void
+request_XIQueryDevice(struct test_data *querydata, int deviceid, int error)
 {
     int rc;
     ClientRec client;
@@ -309,7 +304,8 @@ static void request_XIQueryDevice(struct test_data *querydata,
         assert(client.errorValue == deviceid);
 }
 
-static void test_XIQueryDevice(void)
+static void
+test_XIQueryDevice(void)
 {
     int i;
     xXIQueryDeviceReq request;
@@ -332,12 +328,12 @@ static void test_XIQueryDevice(void)
     for (i = 6; i <= 0xFFFF; i++)
         request_XIQueryDevice(&data, i, BadDevice);
 
-
     reply_handler = NULL;
 
 }
 
-int main(int argc, char** argv)
+int
+main(int argc, char **argv)
 {
     init_simple();
 
@@ -345,4 +341,3 @@ int main(int argc, char** argv)
 
     return 0;
 }
-
