diff --git a/hw/xquartz/console_redirect.c b/hw/xquartz/console_redirect.c
index 70a819e..0f96a95 100644
--- a/hw/xquartz/console_redirect.c
+++ b/hw/xquartz/console_redirect.c
@@ -94,12 +94,15 @@ static int n_redirect_fds = 0;
  *      were processed.  If the pipe is still open, the number of read bytes
  *      is returned.
  */
-static inline int _read_redirect(int fd, int flush) {
+static inline int
+_read_redirect(int fd, int flush)
+{
     int total_read = 0;
     int nbytes;
     asl_redirect *aslr = &redirect_fds[fd];
 
-    while((nbytes = read(fd, aslr->w, BUF_SIZE - (aslr->w - aslr->buf) - 1)) > 0) {
+    while ((nbytes =
+            read(fd, aslr->w, BUF_SIZE - (aslr->w - aslr->buf) - 1)) > 0) {
         char *s, *p;
 
         /* Increment our returned number read */
@@ -115,11 +118,13 @@ static inline int _read_redirect(int fd, int flush) {
             if(*s == '\n') {
                 *s='\0';
                 asl_log(aslr->asl, aslr->msg, aslr->level, "%s", p);
-            } else if(aslr->buf != p) {
+            }
+            else if (aslr->buf != p) {
                 memmove(aslr->buf, p, BUF_SIZE - (p - aslr->buf));
                 aslr->w = aslr->buf + (s - p);
                 break;
-            } else if(nbytes == BUF_SIZE - 1) {
+            }
+            else if (nbytes == BUF_SIZE - 1) {
                 asl_log(aslr->asl, aslr->msg, aslr->level, "%s", p);
                 aslr->w = aslr->buf;
                 break;
@@ -141,15 +146,20 @@ static inline int _read_redirect(int fd, int flush) {
 }
 
 #ifdef HAVE_LIBDISPATCH
-static void read_from_source(void *_source) {
+static void
+read_from_source(void *_source)
+{
     dispatch_source_t source = (dispatch_source_t)_source;
     int fd = dispatch_source_get_handle(source);
+
     if(_read_redirect(fd, 0) == EOF) {
         dispatch_source_cancel(source);
     }
 }
 
-static void cancel_source(void *_source) {
+static void
+cancel_source(void *_source)
+{
     dispatch_source_t source = (dispatch_source_t)_source;
     int fd = dispatch_source_get_handle(source);
     asl_redirect *aslr = &redirect_fds[fd];
@@ -165,7 +175,9 @@ static void cancel_source(void *_source) {
 }
 
 #else /* !HAVE_LIBDISPATCH */
-static void *redirect_thread(void *ctx __unused) {
+static void *
+redirect_thread(void *ctx __unused)
+{
     struct kevent ev;
     int n;
 
@@ -174,7 +186,8 @@ static void *redirect_thread(void *ctx __unused) {
 
         /* Bail on errors */
         if(n < 0) {
-            asl_log(NULL, NULL, ASL_LEVEL_ERR, "kevent failure: %s", strerror(errno));
+            asl_log(NULL, NULL, ASL_LEVEL_ERR, "kevent failure: %s",
+                    strerror(errno));
             break;
         }
         
@@ -191,16 +204,20 @@ static void *redirect_thread(void *ctx __unused) {
                     asl_redirect *aslr = &redirect_fds[fd];
 
                     if(fd < 0 || fd >= n_redirect_fds || aslr->buf == NULL) {
-                        asl_log(NULL, NULL, ASL_LEVEL_ERR, "Unexpected file descriptor: %d", fd);
+                    asl_log(NULL, NULL, ASL_LEVEL_ERR,
+                            "Unexpected file descriptor: %d", fd);
                         goto next;
                     }
 
                     if(ev.flags & EV_EOF) {
                         close_fd = 1;
                         if(EOF != _read_redirect(fd, 1)) {
-                            asl_log(NULL, NULL, ASL_LEVEL_ERR, "kevent reported EOF on %d, but read doesn't concur.", fd);
+                        asl_log(NULL, NULL, ASL_LEVEL_ERR,
+                                "kevent reported EOF on %d, but read doesn't concur.",
+                                fd);
+                    }
                         }
-                    } else {
+                else {
                         close_fd = (EOF == _read_redirect(fd, 0));
                     }
                     
@@ -228,7 +245,9 @@ static void *redirect_thread(void *ctx __unused) {
 }
 #endif
 
-static void redirect_atexit(void) {
+static void
+redirect_atexit(void)
+{
     /* stdout is linebuffered, so flush the buffer */
     if(redirect_fds[STDOUT_FILENO].buf)
         fflush(stdout);
@@ -243,14 +262,17 @@ static void redirect_atexit(void) {
                 dispatch_source_cancel(redirect_fds[i].read_source);
 
         /* Wait at least three seconds for our sources to flush to ASL */
-        dispatch_group_wait(read_source_group, dispatch_time(DISPATCH_TIME_NOW, 3LL * NSEC_PER_SEC));
+        dispatch_group_wait(read_source_group,
+                            dispatch_time(DISPATCH_TIME_NOW,
+                                          3LL * NSEC_PER_SEC));
     }
 #else
     {
         struct kevent ev;
 
         /* Tell our reader thread it is time to pack up and go home */
-        EV_SET(&ev, 0, EVFILT_TIMER, EV_ADD | EV_ONESHOT, 0, 0, ASL_REDIRECT_TERMINATE);
+        EV_SET(&ev, 0, EVFILT_TIMER, EV_ADD | EV_ONESHOT, 0, 0,
+               ASL_REDIRECT_TERMINATE);
         kevent(kq, &ev, 1, NULL, 0, NULL);
     
         pthread_join(redirect_pthread, NULL);
@@ -259,9 +281,11 @@ static void redirect_atexit(void) {
 }
 
 #ifdef HAVE_LIBDISPATCH
-static void xq_asl_init(void *ctx __unused)
+static void
+xq_asl_init(void *ctx __unused)
 #else
-static void xq_asl_init(void)
+static void
+xq_asl_init(void)
 #endif
 {
     assert((redirect_fds = calloc(16, sizeof(*redirect_fds))) != NULL);
@@ -281,14 +305,18 @@ static void xq_asl_init(void)
     atexit(redirect_atexit);
 }
 
-int xq_asl_log_fd(aslclient asl, aslmsg msg, int level, int fd) {
+int
+xq_asl_log_fd(aslclient asl, aslmsg msg, int level, int fd)
+{
 #ifdef HAVE_LIBDISPATCH
     int err __block = 0;
     static dispatch_once_t once_control;
+
     dispatch_once_f(&once_control, NULL, xq_asl_init);
 #else
     int err = 0;
     static pthread_once_t once_control = PTHREAD_ONCE_INIT;
+
     assert(pthread_once(&once_control, xq_asl_init) == 0);
 #endif
     
@@ -306,7 +334,8 @@ int xq_asl_log_fd(aslclient asl, aslmsg msg, int level, int fd) {
         /* Reallocate if we need more space */
         if(fd >= n_redirect_fds) {
             size_t new_n = 1 << (ffs(fd) + 1);
-            asl_redirect *new_array = realloc(redirect_fds, new_n * sizeof(*redirect_fds));
+            asl_redirect *new_array =
+                realloc(redirect_fds, new_n * sizeof(*redirect_fds));
             if(!new_array) {
                 err = errno;
                 BLOCK_DONE;
@@ -341,7 +370,9 @@ int xq_asl_log_fd(aslclient asl, aslmsg msg, int level, int fd) {
         /* Start listening */
 #ifdef HAVE_LIBDISPATCH
         {
-            dispatch_source_t read_source = dispatch_source_create(DISPATCH_SOURCE_TYPE_READ, fd, 0, redirect_serial_q);
+            dispatch_source_t read_source =
+                dispatch_source_create(DISPATCH_SOURCE_TYPE_READ, fd, 0,
+                                       redirect_serial_q);
             redirect_fds[fd].read_source = read_source;
             dispatch_set_context(read_source, read_source);
             dispatch_source_set_event_handler_f(read_source, read_from_source);
@@ -352,6 +383,7 @@ int xq_asl_log_fd(aslclient asl, aslmsg msg, int level, int fd) {
 #else
         {
             struct kevent ev;
+
             EV_SET(&ev, fd, EVFILT_READ, EV_ADD, 0, 0, 0);
             kevent(kq, &ev, 1, NULL, 0, NULL);
         }
@@ -368,7 +400,9 @@ done:
     return err;
 }
 
-int xq_asl_capture_fd(aslclient asl, aslmsg msg, int level, int fd) {
+int
+xq_asl_capture_fd(aslclient asl, aslmsg msg, int level, int fd)
+{
     int pipepair[2];
     
     /* Create pipe */
@@ -398,7 +432,9 @@ int xq_asl_capture_fd(aslclient asl, aslmsg msg, int level, int fd) {
 }
 
 #ifdef DEBUG_CONSOLE_REDIRECT
-int main(int argc __unused, char **argv __unused) {
+int
+main(int argc __unused, char **argv __unused)
+{
     xq_asl_capture_fd(NULL, NULL, ASL_LEVEL_NOTICE, STDOUT_FILENO);
     xq_asl_capture_fd(NULL, NULL, ASL_LEVEL_ERR, STDERR_FILENO);
 
