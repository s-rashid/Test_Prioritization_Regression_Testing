diff --git a/dix/devices.c b/dix/devices.c
index 09e64eb..60825c1 100644
--- a/dix/devices.c
+++ b/dix/devices.c
@@ -80,6 +80,10 @@ SOFTWARE.
 #include "exglobals.h"
 #include "exevents.h"
 
+/** @file
+ * This file handles input device-related stuff.
+ */
+
 int CoreDevicePrivatesIndex = 0;
 static int CoreDevicePrivatesGeneration = -1;
 
@@ -87,7 +91,11 @@ static int CoreDevicePrivatesGeneration = -1;
 static ClientPtr pairingClient = NULL;
 
 /** 
- * Alloc memory for new sprite, reset to default values 
+ * Create a new input device and init it to sane values. The device is added
+ * to the server's off_devices list.
+ *
+ * @param deviceProc Callback for device control function (switch dev on/off).
+ * @return The newly created device.
  */ 
 DeviceIntPtr
 AddInputDevice(DeviceProc deviceProc, Bool autoStart)
@@ -152,6 +160,7 @@ AddInputDevice(DeviceProc deviceProc, Bool autoStart)
 #ifdef XKB
     dev->xkb_interest = NULL;
 #endif
+    dev->config_info = NULL;
     dev->nPrivates = 0;
     dev->devPrivates = NULL;
     dev->unwrapProc = NULL;
@@ -175,10 +184,15 @@ AddInputDevice(DeviceProc deviceProc, Bool autoStart)
 }
 
 /**
- * Enable the device through the driver, initialize the DIX sprite or pair the
- * device, add the device to the device list.
+ * Enable the device through the driver, add the device to the device list.
+ * Switch device ON through the driver and push it onto the global device
+ * list. Initialize the DIX sprite or pair the device. All clients are
+ * notified about the device being enabled.
  *
- * After calling EnableDevice(), a device can and will send events.
+ * A device will send events once enabled.
+ *
+ * @param The device to be enabled.
+ * @return TRUE on success or FALSE otherwise.
  */
 Bool
 EnableDevice(DeviceIntPtr dev)
@@ -226,7 +240,11 @@ EnableDevice(DeviceIntPtr dev)
 }
 
 /**
- * Shut device down through drivers, remove from device list.
+ * Switch a device off through the driver and push it onto the off_devices
+ * list. A device will not send events while disabled. All clients are
+ * notified about the device being disabled.
+ *
+ * @return TRUE on success or FALSE otherwise.
  */  
 Bool
 DisableDevice(DeviceIntPtr dev)
@@ -259,10 +277,13 @@ DisableDevice(DeviceIntPtr dev)
 }
 
 /**
- * Initialize device through driver, allocate memory for cursor sprite (if
- * applicable) and send a PresenceNotify event to all clients.
+ * Initialise a new device through the driver and tell all clients about the
+ * new device.
  *
  * Must be called before EnableDevice.
+ * The device will NOT send events until it is enabled!
+ *
+ * @return Success or an error code on failure.
  */
 int
 ActivateDevice(DeviceIntPtr dev)
@@ -293,6 +314,10 @@ ActivateDevice(DeviceIntPtr dev)
     return ret;
 }
 
+/**
+ * Ring the bell.
+ * The actual task of ringing the bell is the job of the DDX.
+ */
 static void
 CoreKeyboardBell(int volume, DeviceIntPtr pDev, pointer arg, int something)
 {
@@ -307,6 +332,9 @@ CoreKeyboardCtl(DeviceIntPtr pDev, KeybdCtrl *ctrl)
     return;
 }
 
+/**
+ * Device control function for the Virtual Core Keyboard. 
+ */
 static int
 CoreKeyboardProc(DeviceIntPtr pDev, int what)
 {
@@ -367,6 +395,9 @@ CoreKeyboardProc(DeviceIntPtr pDev, int what)
     return Success;
 }
 
+/**
+ * Device control function for the Virtual Core Pointer.
+ */
 static int
 CorePointerProc(DeviceIntPtr pDev, int what)
 {
@@ -398,12 +429,16 @@ CorePointerProc(DeviceIntPtr pDev, int what)
 }
 
 /**
- * Initialize a virtual core keyboard and a virtual core pointer. 
- *
+ * Initialise the two core devices, VCP and VCK (see events.c).
  * Both devices are not tied to physical devices, but guarantee that there is
  * always a keyboard and a pointer present and keep the protocol semantics.
  * Both core devices are NOT part of the device list and act only as a
  * fallback if no physical device is available.
+ *
+ * The devices are activated but not enabled.
+ *
+ * Note that the server MUST have two core devices at all times, even if there
+ * is no physical device connected.
  */
 void
 InitCoreDevices(void)
@@ -469,11 +504,16 @@ InitCoreDevices(void)
 }
 
 /**
- * Activate and enable all devices. 
+ * Activate all switched-off devices and then enable all those devices.
+ * 
+ * Will return an error if no core keyboard or core pointer is present.
+ * In theory this should never happen if you call InitCoreDevices() first.
  *
  * InitAndStartDevices needs to be called AFTER the windows are initialized.
  * Devices will start sending events after InitAndStartDevices() has
  * completed.
+ * 
+ * @return Success or error code on failure.
  */
 int
 InitAndStartDevices(WindowPtr root)
@@ -531,7 +571,11 @@ InitAndStartDevices(WindowPtr root)
 }
 
 /**
- * Shut down device and free memory.
+ * Close down a device and free all resources. 
+ * Once closed down, the driver will probably not expect you that you'll ever
+ * enable it again and free associated structs. If you want the device to just
+ * be disabled, DisableDevice().
+ * Don't call this function directly, use RemoveDevice() instead.
  */
 static void
 CloseDevice(DeviceIntPtr dev)
@@ -659,6 +703,10 @@ CloseDevice(DeviceIntPtr dev)
     xfree(dev);
 }
 
+/**
+ * Shut down all devices, free all resources, etc. 
+ * Only useful if you're shutting down the server!
+ */
 void
 CloseDownDevices(void)
 {
@@ -699,6 +747,12 @@ UndisplayDevices()
     }
 }
 
+/**
+ * Remove a device from the device list, closes it and thus frees all
+ * resources. 
+ * Removes both enabled and disabled devices and notifies all devices about
+ * the removal of the device.
+ */
 int
 RemoveDevice(DeviceIntPtr dev)
 {
