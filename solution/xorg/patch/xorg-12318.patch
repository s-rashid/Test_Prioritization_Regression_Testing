diff --git a/hw/xgl/xglcomp.c b/hw/xgl/xglcomp.c
index edae5d3..320221c 100644
--- a/hw/xgl/xglcomp.c
+++ b/hw/xgl/xglcomp.c
@@ -5,7 +5,7 @@
  * and its documentation for any purpose is hereby granted without
  * fee, provided that the above copyright notice appear in all copies
  * and that both that copyright notice and this permission notice
- * appear in supporting documentation, and that the names of
+ * appear in supporting documentation, and that the name of
  * David Reveman not be used in advertising or publicity pertaining to
  * distribution of the software without specific, written prior permission.
  * David Reveman makes no representations about the suitability of this
@@ -20,7 +20,7 @@
  * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
  * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  *
- * Author: David Reveman <davidr@freedesktop.org>
+ * Author: David Reveman <davidr@novell.com>
  */
 
 #include "xgl.h"
@@ -60,11 +60,13 @@ xglComp (CARD8	    op,
 	 INT16	    xDst,
 	 INT16	    yDst,
 	 CARD16	    width,
-	 CARD16	    height)
+	 CARD16		 height,
+	 xglGeometryPtr  pGeometry,
+	 glitz_surface_t *mask)
 {
     ScreenPtr	    pScreen = pDst->pDrawable->pScreen;
-    xglPixmapPtr    pSrcPriv, pMaskPriv;
-    glitz_surface_t *dst;
+    xglPixmapPtr    pSrcPriv;
+    glitz_surface_t *src, *dst;
     int		    dstXoff, dstYoff;
     RegionRec	    region;
     BoxPtr	    pBox;
@@ -82,21 +84,18 @@ xglComp (CARD8	    op,
     if (pSrc->pDrawable->type != DRAWABLE_PIXMAP)
 	return FALSE;
 
+    if (pSrc->pDrawable->bitsPerPixel == 1)
+	return FALSE;
+
     if (pMask)
     {
 	if (pMask->pDrawable->type != DRAWABLE_PIXMAP)
 	    return FALSE;
 
-	/*
-	 * Why?
-	 */
-	if (pSrc->pDrawable == pMask->pDrawable)
+	if (pSrc->pDrawable == pMask->pDrawable && pSrc != pMask)
 	    return FALSE;
     }
     
-    xDst += pDst->pDrawable->x;
-    yDst += pDst->pDrawable->y;
-
     if (!miComputeCompositeRegion (&region, pSrc, pMask, pDst,
 				   xSrc, ySrc, xMask, yMask,
 				   xDst, yDst, width, height))
@@ -105,29 +104,6 @@ xglComp (CARD8	    op,
     pBox = REGION_RECTS (&region);
     nBox = REGION_NUM_RECTS (&region);
 
-    /*
-     * Simple copy
-     */
-    if (op == PictOpSrc && !pMask &&
-	!pSrc->transform && !pSrc->repeat && pSrc->filter <= 1)
-    {
-	if (xglCopy (pSrc->pDrawable,
-		     pDst->pDrawable,
-		     xSrc - xDst,
-		     ySrc - yDst,
-		     pBox,
-		     nBox))
-	{
-	    REGION_UNINIT (pScreen, &region);
-	    xglAddBitDamage (pDst->pDrawable);
-	    
-	    return TRUE;
-	}
-
-	REGION_UNINIT (pScreen, &region);
-	return FALSE;
-    }
-
     if (!xglPrepareTarget (pDst->pDrawable))
     {
 	REGION_UNINIT (pScreen, &region);
@@ -146,8 +122,33 @@ xglComp (CARD8	    op,
     if (XGL_PICTURE_CHANGES (pSrcPriv->pictureMask))
 	xglUpdatePicture (pSrc);
 
+    src = pSrcPriv->surface;
+
     if (pMask)
     {
+	xglPixmapPtr pMaskPriv;
+
+	/* bitmap as mask */
+	if (pMask->pDrawable->bitsPerPixel == 1)
+	{
+	    if (pGeometry)
+	    {
+		REGION_UNINIT (pScreen, &region);
+		return FALSE;
+	    }
+
+	    pGeometry =
+		xglPixmapToGeometry ((PixmapPtr) pMask->pDrawable,
+				     xDst - xMask,
+				     yDst - yMask);
+	    if (!pGeometry)
+	    {
+		REGION_UNINIT (pScreen, &region);
+		return FALSE;
+	    }
+	}
+	else
+	{
 	if (!xglSyncSurface (pMask->pDrawable))
 	{
 	    REGION_UNINIT (pScreen, &region);
@@ -157,26 +158,63 @@ xglComp (CARD8	    op,
 	pMaskPriv = XGL_GET_PIXMAP_PRIV ((PixmapPtr) pMask->pDrawable);
 	if (XGL_PICTURE_CHANGES (pMaskPriv->pictureMask))
 	    xglUpdatePicture (pMask);
-    } else
-	pMaskPriv = NULL;
-
-    if (nBox > 1)
-    {
-	xglGeometryRec  geometry;
 	
-	GEOMETRY_INIT (pScreen, &geometry, REGION_NUM_RECTS (&region) << 3);
-	GEOMETRY_ADD_BOX (pScreen, &geometry, pBox, nBox);
-	GEOMETRY_TRANSLATE (&geometry, dstXoff, dstYoff);
+	    mask = pMaskPriv->surface;
+	}
+    }
 
-	if (!GEOMETRY_ENABLE_ALL_VERTICES (&geometry, dst))
+    if (!pGeometry)
+    {
+	if (!pSrc->transform && pSrc->filter != PictFilterConvolution)
 	{
-	    GEOMETRY_UNINIT (&geometry);
+	    if (pSrc->repeat)
+	    {
+		/* tile */
+		if (!pSrcPriv->acceleratedTile &&
+		    (pSrc->pDrawable->width > 1 ||
+		     pSrc->pDrawable->height > 1))
+		{
+		    pGeometry =
+			xglTiledBoxGeometry ((PixmapPtr) pSrc->pDrawable,
+					     xSrc - xDst, ySrc - yDst,
+					     pBox, nBox);
+		    if (!pGeometry)
+		    {
+			REGION_UNINIT (pScreen, &region);
 	    return FALSE;
 	}
 
 	pBox = REGION_EXTENTS (pScreen, &region);
-    } else
-	GEOMETRY_DISABLE (dst);
+		    nBox = 1;
+		}
+	    }
+	    else
+	    {
+		/* copy */
+		if (op == PictOpSrc && !mask)
+		{
+		    if (xglCopy (pSrc->pDrawable,
+				 pDst->pDrawable,
+				 xSrc - xDst,
+				 ySrc - yDst,
+				 pBox,
+				 nBox))
+		    {
+			REGION_UNINIT (pScreen, &region);
+			return TRUE;
+		    }
+		}
+	    }
+	}
+
+	if (nBox > 1)
+	{
+	    pGeometry = xglGetScratchVertexGeometry (pScreen, 4 * nBox);
+	    
+	    GEOMETRY_ADD_BOX (pScreen, pGeometry, pBox, nBox);
+	    
+	    pBox = REGION_EXTENTS (pScreen, &region);
+	}
 
     xSrc += pBox->x1 - xDst;
     ySrc += pBox->y1 - yDst;
@@ -192,59 +230,40 @@ xglComp (CARD8	    op,
 	
     width  = pBox->x2 - pBox->x1;
     height = pBox->y2 - pBox->y1;
-
-    REGION_UNINIT (pScreen, &region);
-
-    /*
-     * Do software tile instead if hardware can't do it.
-     */
-    if (pSrc->repeat && !pSrcPriv->acceleratedTile)
+    }
+    else
     {
-	BoxRec box;
+	glitz_surface_set_clip_region (dst,
+				       dstXoff, dstYoff,
+				       (glitz_box_t *) pBox, nBox);
+    }
 
-	if (pSrc->transform || pSrc->filter > 1)
-	    return FALSE;
+    if (pGeometry)
+    {
+	GEOMETRY_TRANSLATE (pGeometry, dstXoff, dstYoff);
 	
-	/*
-	 * Don't allow software tile with really small pixmaps.
-	 */
-	if (pSrc->pDrawable->width < 8 && pSrc->pDrawable->height < 8)
+	if (!GEOMETRY_ENABLE (pGeometry, dst))
+	{
+	    REGION_UNINIT (pScreen, &region);	
 	    return FALSE;
-
-	box.x1 = xDst + dstXoff;
-	box.y1 = yDst + dstYoff;
-	box.x2 = box.x1 + width;
-	box.y2 = box.y1 + height;
-
-	glitz_surface_set_fill (pSrcPriv->surface, GLITZ_FILL_TRANSPARENT);
-
-	xglSwTile (XGL_OPERATOR (op),
-		   pSrcPriv->surface,
-		   (pMaskPriv)? pMaskPriv->surface: NULL,
-		   dst,
-		   xSrc - box.x1, ySrc - box.y1,
-		   xMask - box.x1, yMask - box.y1,
-		   TILE_SOURCE,
-		   &box, 1,
-		   0, 0);
     }
-    else
-    {
+    } else
+	GEOMETRY_DISABLE (dst);
+
 	glitz_composite (XGL_OPERATOR (op),
-			 pSrcPriv->surface,
-			 (pMaskPriv)? pMaskPriv->surface: NULL,
-			 dst,
+		     src, mask, dst,
 			 xSrc, ySrc,
 			 xMask, yMask,
 			 xDst + dstXoff, yDst + dstYoff,
 			 width, height);
-    }
+
+    glitz_surface_set_clip_region (dst, 0, 0, NULL, 0);
+
+    REGION_UNINIT (pScreen, &region);
     
     if (glitz_surface_get_status (dst))
 	return FALSE;
     
-    xglAddBitDamage (pDst->pDrawable);
-    
     return TRUE;
 }
 
