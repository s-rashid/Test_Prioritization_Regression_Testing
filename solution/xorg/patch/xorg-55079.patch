diff --git a/dix/eventconvert.c b/dix/eventconvert.c
index 60dc22f..41a3174 100644
--- a/dix/eventconvert.c
+++ b/dix/eventconvert.c
@@ -51,7 +51,6 @@
 #include "xkbsrv.h"
 #include "inpututils.h"
 
-
 static int countValuators(DeviceEvent *ev, int *first);
 static int getValuatorEvents(DeviceEvent *ev, deviceValuator *xv);
 static int eventToKeyButtonPointer(DeviceEvent *ev, xEvent **xi, int *count);
@@ -107,16 +106,14 @@ EventToCore(InternalEvent *event, xEvent **core_out, int *count_out)
     int count = 0;
     int ret = BadImplementation;
 
-    switch(event->any.type)
-    {
+    switch (event->any.type) {
         case ET_Motion:
             {
                 DeviceEvent *e = &event->device_event;
+
                 /* Don't create core motion event if neither x nor y are
                  * present */
-                if (!BitIsOn(e->valuators.mask, 0) &&
-                    !BitIsOn(e->valuators.mask, 1))
-                {
+        if (!BitIsOn(e->valuators.mask, 0) && !BitIsOn(e->valuators.mask, 1)) {
                     ret = BadMatch;
                     goto out;
                 }
@@ -129,8 +126,7 @@ EventToCore(InternalEvent *event, xEvent **core_out, int *count_out)
             {
                 DeviceEvent *e = &event->device_event;
 
-                if (e->detail.key > 0xFF)
-                {
+        if (e->detail.key > 0xFF) {
                     ret = BadMatch;
                     goto out;
                 }
@@ -146,9 +142,7 @@ EventToCore(InternalEvent *event, xEvent **core_out, int *count_out)
                 core->u.keyButtonPointer.rootY = e->root_y;
                 core->u.keyButtonPointer.state = e->corestate;
                 core->u.keyButtonPointer.root = e->root;
-                EventSetKeyRepeatFlag(core,
-                                      (e->type == ET_KeyPress &&
-                                       e->key_repeat));
+        EventSetKeyRepeatFlag(core, (e->type == ET_KeyPress && e->key_repeat));
                 ret = Success;
             }
             break;
@@ -200,8 +194,7 @@ out:
 int
 EventToXI(InternalEvent *ev, xEvent **xi, int *count)
 {
-    switch (ev->any.type)
-    {
+    switch (ev->any.type) {
         case ET_Motion:
         case ET_ButtonPress:
         case ET_ButtonRelease:
@@ -251,8 +244,7 @@ EventToXI(InternalEvent *ev, xEvent **xi, int *count)
 int
 EventToXI2(InternalEvent *ev, xEvent **xi)
 {
-    switch (ev->any.type)
-    {
+    switch (ev->any.type) {
         /* Enter/FocusIn are for grabs. We don't need an actual event, since
          * the real events delivered are triggered elsewhere */
         case ET_Enter:
@@ -301,17 +293,14 @@ eventToKeyButtonPointer(DeviceEvent *ev, xEvent **xi, int *count)
     deviceKeyButtonPointer *kbp;
 
     /* Sorry, XI 1.x protocol restrictions. */
-    if (ev->detail.button > 0xFF || ev->deviceid >= 0x80)
-    {
+    if (ev->detail.button > 0xFF || ev->deviceid >= 0x80) {
         *count = 0;
         return Success;
     }
 
     num_events = (countValuators(ev, &first) + 5)/6; /* valuator ev */
-    if (num_events <= 0)
-    {
-        switch (ev->type)
-        {
+    if (num_events <= 0) {
+        switch (ev->type) {
             case ET_KeyPress:
             case ET_KeyRelease:
             case ET_ButtonPress:
@@ -332,8 +321,7 @@ eventToKeyButtonPointer(DeviceEvent *ev, xEvent **xi, int *count)
     num_events++; /* the actual event event */
 
     *xi = calloc(num_events, sizeof(xEvent));
-    if (!(*xi))
-    {
+    if (!(*xi)) {
         return BadAlloc;
     }
 
@@ -351,21 +339,33 @@ eventToKeyButtonPointer(DeviceEvent *ev, xEvent **xi, int *count)
     if (num_events > 1)
         kbp->deviceid |= MORE_EVENTS;
 
-    switch(ev->type)
-    {
-        case ET_Motion:        kbp->type = DeviceMotionNotify;  break;
-        case ET_ButtonPress:   kbp->type = DeviceButtonPress;   break;
-        case ET_ButtonRelease: kbp->type = DeviceButtonRelease; break;
-        case ET_KeyPress:      kbp->type = DeviceKeyPress;      break;
-        case ET_KeyRelease:    kbp->type = DeviceKeyRelease;    break;
-        case ET_ProximityIn:   kbp->type = ProximityIn;         break;
-        case ET_ProximityOut:  kbp->type = ProximityOut;        break;
+    switch (ev->type) {
+    case ET_Motion:
+        kbp->type = DeviceMotionNotify;
+        break;
+    case ET_ButtonPress:
+        kbp->type = DeviceButtonPress;
+        break;
+    case ET_ButtonRelease:
+        kbp->type = DeviceButtonRelease;
+        break;
+    case ET_KeyPress:
+        kbp->type = DeviceKeyPress;
+        break;
+    case ET_KeyRelease:
+        kbp->type = DeviceKeyRelease;
+        break;
+    case ET_ProximityIn:
+        kbp->type = ProximityIn;
+        break;
+    case ET_ProximityOut:
+        kbp->type = ProximityOut;
+        break;
         default:
             break;
     }
 
-    if (num_events > 1)
-    {
+    if (num_events > 1) {
         getValuatorEvents(ev, (deviceValuator*)(kbp + 1));
     }
 
@@ -373,7 +373,6 @@ eventToKeyButtonPointer(DeviceEvent *ev, xEvent **xi, int *count)
     return Success;
 }
 
-
 /**
  * Set first to the first valuator in the event ev and return the number of
  * valuators from first to the last set valuator.
@@ -384,18 +383,15 @@ countValuators(DeviceEvent *ev, int *first)
     int first_valuator = -1, last_valuator = -1, num_valuators = 0;
     int i;
 
-    for (i = 0; i < sizeof(ev->valuators.mask) * 8; i++)
-    {
-        if (BitIsOn(ev->valuators.mask, i))
-        {
+    for (i = 0; i < sizeof(ev->valuators.mask) * 8; i++) {
+        if (BitIsOn(ev->valuators.mask, i)) {
             if (first_valuator == -1)
                 first_valuator = i;
             last_valuator = i;
         }
     }
 
-    if (first_valuator != -1)
-    {
+    if (first_valuator != -1) {
         num_valuators = last_valuator - first_valuator + 1;
         *first = first_valuator;
     }
@@ -410,14 +406,15 @@ getValuatorEvents(DeviceEvent *ev, deviceValuator *xv)
     int state = 0;
     int first_valuator, num_valuators;
 
-
     num_valuators = countValuators(ev, &first_valuator);
-    if (num_valuators > 0)
-    {
+    if (num_valuators > 0) {
         DeviceIntPtr dev = NULL;
+
         dixLookupDevice(&dev, ev->deviceid, serverClient, DixUseAccess);
         /* State needs to be assembled BEFORE the device is updated. */
-        state = (dev && dev->key) ? XkbStateFieldFromRec(&dev->key->xkbInfo->state) : 0;
+        state = (dev &&
+                 dev->key) ? XkbStateFieldFromRec(&dev->key->xkbInfo->
+                                                  state) : 0;
         state |= (dev && dev->button) ? (dev->button->state) : 0;
     }
 
@@ -443,7 +440,6 @@ getValuatorEvents(DeviceEvent *ev, deviceValuator *xv)
     return (num_valuators + 5) / 6;
 }
 
-
 static int
 appendKeyInfo(DeviceChangedEvent *dce, xXIKeyInfo* info)
 {
@@ -487,7 +483,8 @@ appendButtonInfo(DeviceChangedEvent *dce, xXIButtonInfo *info)
 }
 
 static int
-appendValuatorInfo(DeviceChangedEvent *dce, xXIValuatorInfo *info, int axisnumber)
+appendValuatorInfo(DeviceChangedEvent *dce, xXIValuatorInfo * info,
+                   int axisnumber)
 {
     info->type = XIValuatorClass;
     info->length = sizeof(xXIValuatorInfo)/4;
@@ -516,8 +513,7 @@ appendScrollInfo(DeviceChangedEvent *dce, xXIScrollInfo *info, int axisnumber)
     info->type = XIScrollClass;
     info->length = sizeof(xXIScrollInfo)/4;
     info->number = axisnumber;
-    switch(dce->valuators[axisnumber].scroll.type)
-    {
+    switch (dce->valuators[axisnumber].scroll.type) {
         case SCROLL_TYPE_VERTICAL:
             info->scroll_type = XIScrollTypeVertical;
             break;
@@ -525,10 +521,12 @@ appendScrollInfo(DeviceChangedEvent *dce, xXIScrollInfo *info, int axisnumber)
             info->scroll_type = XIScrollTypeHorizontal;
             break;
         default:
-            ErrorF("[Xi] Unknown scroll type %d. This is a bug.\n", dce->valuators[axisnumber].scroll.type);
+        ErrorF("[Xi] Unknown scroll type %d. This is a bug.\n",
+               dce->valuators[axisnumber].scroll.type);
             break;
     }
-    info->increment = double_to_fp3232(dce->valuators[axisnumber].scroll.increment);
+    info->increment =
+        double_to_fp3232(dce->valuators[axisnumber].scroll.increment);
     info->sourceid = dce->sourceid;
 
     info->flags = 0;
@@ -549,14 +547,12 @@ eventToDeviceChanged(DeviceChangedEvent *dce, xEvent **xi)
     int nkeys;
     char *ptr;
 
-    if (dce->buttons.num_buttons)
-    {
+    if (dce->buttons.num_buttons) {
         len += sizeof(xXIButtonInfo);
         len += dce->buttons.num_buttons * sizeof(Atom); /* button names */
         len += pad_to_int32(bits_to_bytes(dce->buttons.num_buttons));
     }
-    if (dce->num_valuators)
-    {
+    if (dce->num_valuators) {
         int i;
 
         len += sizeof(xXIValuatorInfo) * dce->num_valuators;
@@ -568,15 +564,13 @@ eventToDeviceChanged(DeviceChangedEvent *dce, xEvent **xi)
 
     nkeys = (dce->keys.max_keycode > 0) ?
                 dce->keys.max_keycode - dce->keys.min_keycode + 1 : 0;
-    if (nkeys > 0)
-    {
+    if (nkeys > 0) {
         len += sizeof(xXIKeyInfo);
         len += sizeof(CARD32) * nkeys; /* keycodes */
     }
 
     dcce = calloc(1, len);
-    if (!dcce)
-    {
+    if (!dcce) {
         ErrorF("[Xi] BadAlloc in SendDeviceChangedEvent.\n");
         return BadAlloc;
     }
@@ -587,35 +581,31 @@ eventToDeviceChanged(DeviceChangedEvent *dce, xEvent **xi)
     dcce->time         = dce->time;
     dcce->deviceid     = dce->deviceid;
     dcce->sourceid     = dce->sourceid;
-    dcce->reason       = (dce->flags & DEVCHANGE_DEVICE_CHANGE) ? XIDeviceChange : XISlaveSwitch;
+    dcce->reason =
+        (dce->flags & DEVCHANGE_DEVICE_CHANGE) ? XIDeviceChange : XISlaveSwitch;
     dcce->num_classes  = 0;
     dcce->length = bytes_to_int32(len - sizeof(xEvent));
 
     ptr = (char*)&dcce[1];
-    if (dce->buttons.num_buttons)
-    {
+    if (dce->buttons.num_buttons) {
         dcce->num_classes++;
         ptr += appendButtonInfo(dce, (xXIButtonInfo*)ptr);
     }
 
-    if (nkeys)
-    {
+    if (nkeys) {
         dcce->num_classes++;
         ptr += appendKeyInfo(dce, (xXIKeyInfo*)ptr);
     }
 
-    if (dce->num_valuators)
-    {
+    if (dce->num_valuators) {
         int i;
 
         dcce->num_classes += dce->num_valuators;
         for (i = 0; i < dce->num_valuators; i++)
             ptr += appendValuatorInfo(dce, (xXIValuatorInfo*)ptr, i);
 
-        for (i = 0; i < dce->num_valuators; i++)
-        {
-            if (dce->valuators[i].scroll.type != SCROLL_TYPE_NONE)
-            {
+        for (i = 0; i < dce->num_valuators; i++) {
+            if (dce->valuators[i].scroll.type != SCROLL_TYPE_NONE) {
                 dcce->num_classes++;
                 ptr += appendScrollInfo(dce, (xXIScrollInfo*)ptr, i);
             }
@@ -627,17 +617,16 @@ eventToDeviceChanged(DeviceChangedEvent *dce, xEvent **xi)
     return Success;
 }
 
-static int count_bits(unsigned char* ptr, int len)
+static int
+count_bits(unsigned char *ptr, int len)
 {
     int bits = 0;
     unsigned int i;
     unsigned char x;
 
-    for (i = 0; i < len; i++)
-    {
+    for (i = 0; i < len; i++) {
         x = ptr[i];
-        while(x > 0)
-        {
+        while (x > 0) {
             bits += (x & 0x1);
             x >>= 1;
         }
@@ -660,8 +649,9 @@ eventToDeviceEvent(DeviceEvent *ev, xEvent **xi)
     btlen = bytes_to_int32(bits_to_bytes(MAX_BUTTONS));
     len += btlen * 4; /* buttonmask len */
 
-
-    vallen = count_bits(ev->valuators.mask, sizeof(ev->valuators.mask)/sizeof(ev->valuators.mask[0]));
+    vallen =
+        count_bits(ev->valuators.mask,
+                   sizeof(ev->valuators.mask) / sizeof(ev->valuators.mask[0]));
     len += vallen * 2 * sizeof(uint32_t); /* axisvalues */
     vallen = bytes_to_int32(bits_to_bytes(MAX_VALUATORS));
     len += vallen * 4; /* valuators mask */
@@ -709,18 +699,15 @@ eventToDeviceEvent(DeviceEvent *ev, xEvent **xi)
     xde->group.effective_group  = ev->group.effective;
 
     ptr = (char*)&xde[1];
-    for (i = 0; i < sizeof(ev->buttons) * 8; i++)
-    {
+    for (i = 0; i < sizeof(ev->buttons) * 8; i++) {
         if (BitIsOn(ev->buttons, i))
             SetBit(ptr, i);
     }
 
     ptr += xde->buttons_len * 4;
     axisval = (FP3232*)(ptr + xde->valuators_len * 4);
-    for (i = 0; i < sizeof(ev->valuators.mask) * 8; i++)
-    {
-        if (BitIsOn(ev->valuators.mask, i))
-        {
+    for (i = 0; i < sizeof(ev->valuators.mask) * 8; i++) {
+        if (BitIsOn(ev->valuators.mask, i)) {
             SetBit(ptr, i);
             *axisval = double_to_fp3232(ev->valuators.data[i]);
             axisval++;
@@ -782,10 +769,8 @@ eventToRawEvent(RawDeviceEvent *ev, xEvent **xi)
     ptr = (char*)&raw[1];
     axisval = (FP3232*)(ptr + raw->valuators_len * 4);
     axisval_raw = axisval + nvals;
-    for (i = 0; i < sizeof(ev->valuators.mask) * 8; i++)
-    {
-        if (BitIsOn(ev->valuators.mask, i))
-        {
+    for (i = 0; i < sizeof(ev->valuators.mask) * 8; i++) {
+        if (BitIsOn(ev->valuators.mask, i)) {
             SetBit(ptr, i);
             *axisval =  double_to_fp3232(ev->valuators.data[i]);
             *axisval_raw = double_to_fp3232(ev->valuators.data_raw[i]);
@@ -805,13 +790,23 @@ int
 GetCoreType(enum EventType type)
 {
     int coretype = 0;
-    switch(type)
-    {
-        case ET_Motion:         coretype = MotionNotify;  break;
-        case ET_ButtonPress:    coretype = ButtonPress;   break;
-        case ET_ButtonRelease:  coretype = ButtonRelease; break;
-        case ET_KeyPress:       coretype = KeyPress;      break;
-        case ET_KeyRelease:     coretype = KeyRelease;    break;
+
+    switch (type) {
+    case ET_Motion:
+        coretype = MotionNotify;
+        break;
+    case ET_ButtonPress:
+        coretype = ButtonPress;
+        break;
+    case ET_ButtonRelease:
+        coretype = ButtonRelease;
+        break;
+    case ET_KeyPress:
+        coretype = KeyPress;
+        break;
+    case ET_KeyRelease:
+        coretype = KeyRelease;
+        break;
         default:
             break;
     }
@@ -826,15 +821,29 @@ int
 GetXIType(enum EventType type)
 {
     int xitype = 0;
-    switch(type)
-    {
-        case ET_Motion:         xitype = DeviceMotionNotify;  break;
-        case ET_ButtonPress:    xitype = DeviceButtonPress;   break;
-        case ET_ButtonRelease:  xitype = DeviceButtonRelease; break;
-        case ET_KeyPress:       xitype = DeviceKeyPress;      break;
-        case ET_KeyRelease:     xitype = DeviceKeyRelease;    break;
-        case ET_ProximityIn:    xitype = ProximityIn;         break;
-        case ET_ProximityOut:   xitype = ProximityOut;        break;
+
+    switch (type) {
+    case ET_Motion:
+        xitype = DeviceMotionNotify;
+        break;
+    case ET_ButtonPress:
+        xitype = DeviceButtonPress;
+        break;
+    case ET_ButtonRelease:
+        xitype = DeviceButtonRelease;
+        break;
+    case ET_KeyPress:
+        xitype = DeviceKeyPress;
+        break;
+    case ET_KeyRelease:
+        xitype = DeviceKeyRelease;
+        break;
+    case ET_ProximityIn:
+        xitype = ProximityIn;
+        break;
+    case ET_ProximityOut:
+        xitype = ProximityOut;
+        break;
         default:
             break;
     }
@@ -850,31 +859,76 @@ GetXI2Type(enum EventType type)
 {
     int xi2type = 0;
 
-    switch(type)
-    {
-        case ET_Motion:         xi2type = XI_Motion;           break;
-        case ET_ButtonPress:    xi2type = XI_ButtonPress;      break;
-        case ET_ButtonRelease:  xi2type = XI_ButtonRelease;    break;
-        case ET_KeyPress:       xi2type = XI_KeyPress;         break;
-        case ET_KeyRelease:     xi2type = XI_KeyRelease;       break;
-        case ET_Enter:          xi2type = XI_Enter;            break;
-        case ET_Leave:          xi2type = XI_Leave;            break;
-        case ET_Hierarchy:      xi2type = XI_HierarchyChanged; break;
-        case ET_DeviceChanged:  xi2type = XI_DeviceChanged;    break;
-        case ET_RawKeyPress:    xi2type = XI_RawKeyPress;      break;
-        case ET_RawKeyRelease:  xi2type = XI_RawKeyRelease;    break;
-        case ET_RawButtonPress: xi2type = XI_RawButtonPress;   break;
-        case ET_RawButtonRelease: xi2type = XI_RawButtonRelease; break;
-        case ET_RawMotion:      xi2type = XI_RawMotion;        break;
-        case ET_RawTouchBegin:  xi2type = XI_RawTouchBegin;    break;
-        case ET_RawTouchUpdate: xi2type = XI_RawTouchUpdate;  break;
-        case ET_RawTouchEnd:    xi2type = XI_RawTouchEnd;      break;
-        case ET_FocusIn:        xi2type = XI_FocusIn;          break;
-        case ET_FocusOut:       xi2type = XI_FocusOut;         break;
-        case ET_TouchBegin:     xi2type = XI_TouchBegin;       break;
-        case ET_TouchEnd:       xi2type = XI_TouchEnd;         break;
-        case ET_TouchUpdate:    xi2type = XI_TouchUpdate;      break;
-        case ET_TouchOwnership: xi2type = XI_TouchOwnership;   break;
+    switch (type) {
+    case ET_Motion:
+        xi2type = XI_Motion;
+        break;
+    case ET_ButtonPress:
+        xi2type = XI_ButtonPress;
+        break;
+    case ET_ButtonRelease:
+        xi2type = XI_ButtonRelease;
+        break;
+    case ET_KeyPress:
+        xi2type = XI_KeyPress;
+        break;
+    case ET_KeyRelease:
+        xi2type = XI_KeyRelease;
+        break;
+    case ET_Enter:
+        xi2type = XI_Enter;
+        break;
+    case ET_Leave:
+        xi2type = XI_Leave;
+        break;
+    case ET_Hierarchy:
+        xi2type = XI_HierarchyChanged;
+        break;
+    case ET_DeviceChanged:
+        xi2type = XI_DeviceChanged;
+        break;
+    case ET_RawKeyPress:
+        xi2type = XI_RawKeyPress;
+        break;
+    case ET_RawKeyRelease:
+        xi2type = XI_RawKeyRelease;
+        break;
+    case ET_RawButtonPress:
+        xi2type = XI_RawButtonPress;
+        break;
+    case ET_RawButtonRelease:
+        xi2type = XI_RawButtonRelease;
+        break;
+    case ET_RawMotion:
+        xi2type = XI_RawMotion;
+        break;
+    case ET_RawTouchBegin:
+        xi2type = XI_RawTouchBegin;
+        break;
+    case ET_RawTouchUpdate:
+        xi2type = XI_RawTouchUpdate;
+        break;
+    case ET_RawTouchEnd:
+        xi2type = XI_RawTouchEnd;
+        break;
+    case ET_FocusIn:
+        xi2type = XI_FocusIn;
+        break;
+    case ET_FocusOut:
+        xi2type = XI_FocusOut;
+        break;
+    case ET_TouchBegin:
+        xi2type = XI_TouchBegin;
+        break;
+    case ET_TouchEnd:
+        xi2type = XI_TouchEnd;
+        break;
+    case ET_TouchUpdate:
+        xi2type = XI_TouchUpdate;
+        break;
+    case ET_TouchOwnership:
+        xi2type = XI_TouchOwnership;
+        break;
         default:
             break;
     }
