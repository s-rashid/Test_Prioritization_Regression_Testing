diff --git a/dix/window.c b/dix/window.c
index f0d4cf8..4e55319 100644
--- a/dix/window.c
+++ b/dix/window.c
@@ -307,10 +307,6 @@ SetWindowToDefaults(WindowPtr pWin)
     pWin->deliverableEvents = 0;
     pWin->dontPropagate = 0;
     pWin->forcedBS = FALSE;
-#ifdef NEED_DBE_BUF_BITS
-    pWin->srcBuffer = DBE_FRONT_BUFFER;
-    pWin->dstBuffer = DBE_FRONT_BUFFER;
-#endif
 #ifdef COMPOSITE
     pWin->redirectDraw = 0;
 #endif
@@ -557,7 +553,7 @@ InitRootWindow(WindowPtr pWin)
  * window from which the region came.
  */
 
-void
+static void
 ClippedRegionFromBox(WindowPtr pWin, RegionPtr Rgn,
                      int x, int y,
                      int w, int h)
@@ -854,6 +850,46 @@ CreateWindow(Window wid, WindowPtr pParent, int x, int y, unsigned w,
 }
 
 static void
+DisposeWindowOptional (WindowPtr pWin)
+{
+    if (!pWin->optional)
+	return;
+    /*
+     * everything is peachy.  Delete the optional record
+     * and clean up
+     */
+    if (pWin->optional->cursor)
+    {
+	FreeCursor (pWin->optional->cursor, (Cursor)0);
+	pWin->cursorIsNone = FALSE;
+    }
+    else
+	pWin->cursorIsNone = TRUE;
+
+    if (pWin->optional->deviceCursors)
+    {
+        DevCursorList pList;
+        DevCursorList pPrev;
+        pList = pWin->optional->deviceCursors;
+        while(pList)
+        {
+            if (pList->cursor)
+                FreeCursor(pList->cursor, (XID)0);
+            pPrev = pList;
+            pList = pList->next;
+            xfree(pPrev);
+        }
+        pWin->optional->deviceCursors = NULL;
+    }
+
+    xfree(pWin->optional->access.perm);
+    xfree(pWin->optional->access.deny);
+
+    xfree (pWin->optional);
+    pWin->optional = NULL;
+}
+
+static void
 FreeWindowResources(WindowPtr pWin)
 {
     ScreenPtr pScreen = pWin->drawable.pScreen;
@@ -2721,6 +2757,30 @@ RealizeTree(WindowPtr pWin)
     }
 }
 
+static WindowPtr windowDisableMapUnmapEvents;
+
+void
+DisableMapUnmapEvents(WindowPtr pWin)
+{
+    assert (windowDisableMapUnmapEvents == NULL);
+    
+    windowDisableMapUnmapEvents = pWin;
+}
+
+void
+EnableMapUnmapEvents(WindowPtr pWin)
+{
+    assert (windowDisableMapUnmapEvents != NULL);
+
+    windowDisableMapUnmapEvents = NULL;
+}
+
+static Bool
+MapUnmapEventsEnabled(WindowPtr pWin)
+{
+    return pWin != windowDisableMapUnmapEvents;
+}
+
 /*****
  * MapWindow
  *    If some other client has selected SubStructureReDirect on the parent
@@ -3222,21 +3282,6 @@ HandleSaveSet(ClientPtr client)
 /**
  *
  *  \param x,y  in root
- *  \param box  "return" value
- */
-Bool
-VisibleBoundingBoxFromPoint(WindowPtr pWin, int x, int y, BoxPtr box)
-{
-    if (!pWin->realized)
-	return (FALSE);
-    if (POINT_IN_REGION(pWin->drawable.pScreen, &pWin->clipList, x, y, box))
-	return(TRUE);
-    return(FALSE);
-}
-
-/**
- *
- * \param x,y  in root
  */
 Bool
 PointInWindowIsVisible(WindowPtr pWin, int x, int y)
@@ -3342,30 +3387,6 @@ SendVisibilityNotify(WindowPtr pWin)
     DeliverEvents(pWin, &event, 1, NullWindow);
 }
 
-static WindowPtr windowDisableMapUnmapEvents;
-
-void
-DisableMapUnmapEvents(WindowPtr pWin)
-{
-    assert (windowDisableMapUnmapEvents == NULL);
-    
-    windowDisableMapUnmapEvents = pWin;
-}
-
-void
-EnableMapUnmapEvents(WindowPtr pWin)
-{
-    assert (windowDisableMapUnmapEvents != NULL);
-
-    windowDisableMapUnmapEvents = NULL;
-}
-
-Bool
-MapUnmapEventsEnabled(WindowPtr pWin)
-{
-    return pWin != windowDisableMapUnmapEvents;
-}
-
 #define RANDOM_WIDTH 32
 
 #ifndef NOLOGOHACK
@@ -3738,61 +3759,6 @@ MakeWindowOptional (WindowPtr pWin)
     return TRUE;
 }
 
-void
-DisposeWindowOptional (WindowPtr pWin)
-{
-    if (!pWin->optional)
-	return;
-    /*
-     * everything is peachy.  Delete the optional record
-     * and clean up
-     */
-    /*
-     * TOG changed this code to:
-     *
-     *	    if (pWin->cursorIsNone == FALSE)
-     *		FreeCursor (pWin->optional->cursor, (Cursor)0);
-     *	    pWin->cursorIsNone = TRUE;
-     *
-     * This is blatently wrong; windows without optionals can have
-     * two different cursor values, either None or sharing their
-     * parents cursor.  This difference is controlled by the
-     * cursorIsNone value; when TRUE, the window has no cursor,
-     * when false, it shares its cursor with its parent; TOG
-     * made it impossible for a window to have a cursor without
-     * an optional record.
-     */
-    if (pWin->optional->cursor)
-    {
-	FreeCursor (pWin->optional->cursor, (Cursor)0);
-	pWin->cursorIsNone = FALSE;
-    }
-    else
-	pWin->cursorIsNone = TRUE;
-
-    if (pWin->optional->deviceCursors)
-    {
-        DevCursorList pList;
-        DevCursorList pPrev;
-        pList = pWin->optional->deviceCursors;
-        while(pList)
-        {
-            if (pList->cursor)
-                FreeCursor(pList->cursor, (XID)0);
-            pPrev = pList;
-            pList = pList->next;
-            xfree(pPrev);
-        }
-        pWin->optional->deviceCursors = NULL;
-    }
-
-    xfree(pWin->optional->access.perm);
-    xfree(pWin->optional->access.deny);
-
-    xfree (pWin->optional);
-    pWin->optional = NULL;
-}
-
 /*
  * Changes the cursor struct for the given device and the given window.
  * A cursor that does not have a device cursor set will use whatever the
@@ -3807,7 +3773,8 @@ DisposeWindowOptional (WindowPtr pWin)
  * Assumption: If there is a node for a device in the list, the device has a
  * cursor. If the cursor is set to None, it is inherited by the parent.
  */
-int ChangeWindowDeviceCursor(register WindowPtr pWin, 
+_X_EXPORT int
+ChangeWindowDeviceCursor(WindowPtr pWin, 
                               DeviceIntPtr pDev, 
                               CursorPtr pCursor) 
 {
@@ -3905,7 +3872,8 @@ int ChangeWindowDeviceCursor(register WindowPtr pWin,
 }
 
 /* Get device cursor for given device or None if none is set */
-CursorPtr WindowGetDeviceCursor(WindowPtr pWin, DeviceIntPtr pDev)
+_X_EXPORT CursorPtr 
+WindowGetDeviceCursor(WindowPtr pWin, DeviceIntPtr pDev)
 {
     DevCursorList pList;
 
@@ -4001,7 +3969,6 @@ WindowParentHasDeviceCursor(WindowPtr pWin,
     return FALSE;
 }
 
-
 #ifndef NOLOGOHACK
 static void
 DrawLogo(WindowPtr pWin)
