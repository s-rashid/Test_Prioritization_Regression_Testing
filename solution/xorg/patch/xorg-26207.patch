diff --git a/randr/rroutput.c b/randr/rroutput.c
index c7e7995..6b67f19 100644
--- a/randr/rroutput.c
+++ b/randr/rroutput.c
@@ -22,7 +22,124 @@
 
 #include "randrstr.h"
 
-static RESTYPE	OutputType;
+RESTYPE	RROutputType;
+
+/*
+ * Create an output
+ */
+
+RROutputPtr
+RROutputCreate (ScreenPtr   pScreen,
+		char	    *name,
+		int	    nameLength,
+		void	    *devPrivate)
+{
+    rrScrPriv (pScreen);
+    RROutputPtr	output;
+    RROutputPtr	*outputs;
+
+    output = xalloc (sizeof (RROutputRec) + nameLength + 1);
+    if (!output)
+	return NULL;
+    if (pScrPriv->numOutputs)
+	outputs = xrealloc (pScrPriv->outputs, 
+			    (pScrPriv->numOutputs + 1) * sizeof (RROutputPtr));
+    else
+	outputs = xalloc (sizeof (RROutputPtr));
+    if (!outputs)
+    {
+	xfree (output);
+	return NULL;
+    }
+    output->id = FakeClientID (0);
+    output->pScreen = pScreen;
+    output->name = (char *) (output + 1);
+    output->nameLength = nameLength;
+    memcpy (output->name, name, nameLength);
+    output->connection = RR_UnknownConnection;
+    output->subpixelOrder = SubPixelUnknown;
+    output->crtc = NULL;
+    output->numCrtcs = 0;
+    output->crtcs = NULL;
+    output->numClones = 0;
+    output->clones = NULL;
+    output->numModes = 0;
+    output->modes = NULL;
+    output->changed = TRUE;
+    output->devPrivate = devPrivate;
+    pScrPriv->outputs[pScrPriv->numOutputs++] = output;
+    return output;
+}
+
+/*
+ * Notify extension that output parameters have been changed
+ */
+Bool
+RROutputSetClones (RROutputPtr  output,
+		   RROutputPtr  *clones,
+		   int		numClones)
+{
+    RROutputPtr	*newClones;
+
+    newClones = xalloc (numClones * sizeof (RROutputPtr));
+    if (!newClones)
+	return FALSE;
+    if (output->clones)
+	xfree (output->clones);
+    memcpy (newClones, clones, numClones * sizeof (RROutputPtr));
+    output->clones = newClones;
+    output->numClones = numClones;
+    return TRUE;
+}
+
+Bool
+RROutputSetModes (RROutputPtr	output,
+		  RRModePtr	*modes,
+		  int		numModes)
+{
+    RRModePtr	*newModes;
+
+    newModes = xalloc (numModes * sizeof (RRModePtr));
+    if (!newModes)
+	return FALSE;
+    if (output->modes)
+	xfree (output->modes);
+    memcpy (newModes, modes, numModes * sizeof (RRModePtr));
+    output->modes = newModes;
+    output->numModes = numModes;
+    return TRUE;
+}
+
+Bool
+RROutputSetCrtcs (RROutputPtr	output,
+		  RRCrtcPtr	*crtcs,
+		  int		numCrtcs)
+{
+    RRCrtcPtr	*newCrtcs;
+
+    newCrtcs = xalloc (numCrtcs * sizeof (RRCrtcPtr));
+    if (!newCrtcs)
+	return FALSE;
+    if (output->crtcs)
+	xfree (output->crtcs);
+    memcpy (newCrtcs, crtcs, numCrtcs * sizeof (RRCrtcPtr));
+    output->crtcs = newCrtcs;
+    output->numCrtcs = numCrtcs;
+    return TRUE;
+}
+
+Bool
+RROutputSetConnection (RROutputPtr  output,
+		       CARD8	    connection)
+{
+    output->connection = connection;
+    return TRUE;
+}
+
+void
+RRDeliverOutputEvent(ClientPtr client, WindowPtr pWin, RROutputPtr output)
+{
+}
 
 /*
  * Destroy a Output at shutdown
@@ -36,7 +153,28 @@ RROutputDestroy (RROutputPtr crtc)
 static int
 RROutputDestroyResource (pointer value, XID pid)
 {
-    free (value);
+    RROutputPtr	output = (RROutputPtr) value;
+    ScreenPtr	pScreen = output->pScreen;
+    rrScrPriv(pScreen);
+    int		i;
+
+    for (i = 0; i < pScrPriv->numOutputs; i++)
+    {
+	if (pScrPriv->outputs[i] == output)
+	{
+	    memmove (pScrPriv->outputs, pScrPriv->outputs + 1,
+		     (pScrPriv->numOutputs - (i - 1)) * sizeof (RROutputPtr));
+	    --pScrPriv->numOutputs;
+	    break;
+	}
+    }
+    if (output->modes)
+	xfree (output->modes);
+    if (output->crtcs)
+	xfree (output->crtcs);
+    if (output->clones)
+	xfree (output->clones);
+    xfree (output);
     return 1;
 }
 
@@ -46,11 +184,11 @@ RROutputDestroyResource (pointer value, XID pid)
 Bool
 RROutputInit (void)
 {
-    OutputType = CreateNewResourceType (RROutputDestroyResource);
-    if (!OutputType)
+    RROutputType = CreateNewResourceType (RROutputDestroyResource);
+    if (!RROutputType)
 	return FALSE;
 #ifdef XResExtension
-	RegisterResourceName (OutputType, "OUTPUT");
+	RegisterResourceName (RROutputType, "OUTPUT");
 #endif
     return TRUE;
 }
