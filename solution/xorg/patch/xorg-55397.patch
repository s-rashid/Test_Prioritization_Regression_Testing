diff --git a/hw/kdrive/src/kdrive.c b/hw/kdrive/src/kdrive.c
index f6cc351..f65ab96 100644
--- a/hw/kdrive/src/kdrive.c
+++ b/hw/kdrive/src/kdrive.c
@@ -103,7 +103,8 @@ KdDisableScreen (ScreenPtr pScreen)
     KdDisableColormap (pScreen);
     if (!pScreenPriv->screen->dumb && pScreenPriv->card->cfuncs->disableAccel)
 	(*pScreenPriv->card->cfuncs->disableAccel) (pScreen);
-    if (!pScreenPriv->screen->softCursor && pScreenPriv->card->cfuncs->disableCursor)
+    if (!pScreenPriv->screen->softCursor &&
+        pScreenPriv->card->cfuncs->disableCursor)
 	(*pScreenPriv->card->cfuncs->disableCursor) (pScreen);
     if (pScreenPriv->card->cfuncs->dpms)
 	(*pScreenPriv->card->cfuncs->dpms) (pScreen, KD_DPMS_NORMAL);
@@ -115,8 +116,7 @@ KdDisableScreen (ScreenPtr pScreen)
 static void
 KdDoSwitchCmd (const char *reason)
 {
-    if (kdSwitchCmd)
-    {
+    if (kdSwitchCmd) {
 	char    *command;
 
 	if (asprintf(&command, "%s %s", kdSwitchCmd, reason) == -1)
@@ -132,10 +132,8 @@ KdSuspend (void)
     KdCardInfo	    *card;
     KdScreenInfo    *screen;
 
-    if (kdEnabled)
-    {
-	for (card = kdCardInfo; card; card = card->next)
-	{
+    if (kdEnabled) {
+        for (card = kdCardInfo; card; card = card->next) {
 	    for (screen = card->screenList; screen; screen = screen->next)
 		if (screen->mynum == card->selected && screen->pScreen)
 		    KdDisableScreen (screen->pScreen);
@@ -151,8 +149,7 @@ void
 KdDisableScreens (void)
 {
     KdSuspend ();
-    if (kdEnabled)
-    {
+    if (kdEnabled) {
         if (kdOsFuncs->Disable)
             (*kdOsFuncs->Disable) ();
 	kdEnabled = FALSE;
@@ -172,7 +169,8 @@ KdEnableScreen (ScreenPtr pScreen)
     pScreenPriv->enabled = TRUE;
     pScreenPriv->dpmsState = KD_DPMS_NORMAL;
     pScreenPriv->card->selected = pScreenPriv->screen->mynum;
-    if (!pScreenPriv->screen->softCursor && pScreenPriv->card->cfuncs->enableCursor)
+    if (!pScreenPriv->screen->softCursor &&
+        pScreenPriv->card->cfuncs->enableCursor)
 	(*pScreenPriv->card->cfuncs->enableCursor) (pScreen);
     if (!pScreenPriv->screen->dumb && pScreenPriv->card->cfuncs->enableAccel)
 	(*pScreenPriv->card->cfuncs->enableAccel) (pScreen);
@@ -189,11 +187,9 @@ KdResume (void)
     KdCardInfo	    *card;
     KdScreenInfo    *screen;
 
-    if (kdEnabled)
-    {
+    if (kdEnabled) {
 	KdDoSwitchCmd ("resume");
-	for (card = kdCardInfo; card; card = card->next)
-	{
+        for (card = kdCardInfo; card; card = card->next) {
 	    if(card->cfuncs->preserve)
 		(*card->cfuncs->preserve) (card);
 	    for (screen = card->screenList; screen; screen = screen->next)
@@ -208,8 +204,7 @@ KdResume (void)
 void
 KdEnableScreens (void)
 {
-    if (!kdEnabled)
-    {
+    if (!kdEnabled) {
 	kdEnabled = TRUE;
         if (kdOsFuncs->Enable)
             (*kdOsFuncs->Enable) ();
@@ -230,8 +225,7 @@ void
 AbortDDX(enum ExitCode error)
 {
     KdDisableScreens ();
-    if (kdOsFuncs)
-    {
+    if (kdOsFuncs) {
 	if (kdEnabled && kdOsFuncs->Disable)
 	    (*kdOsFuncs->Disable) ();
         if (kdOsFuncs->Fini)
@@ -255,8 +249,7 @@ Bool	kdSoftCursor;
 char *
 KdParseFindNext (char *cur, const char *delim, char *save, char *last)
 {
-    while (*cur && !strchr (delim, *cur))
-    {
+    while (*cur && !strchr(delim, *cur)) {
 	*save++ = *cur++;
     }
     *save = 0;
@@ -289,8 +282,7 @@ KdSubRotation (Rotation a, Rotation b)
 }
 
 void
-KdParseScreen (KdScreenInfo *screen,
-	       char	    *arg)
+KdParseScreen(KdScreenInfo * screen, char *arg)
 {
     char    delim;
     char    save[1024];
@@ -313,8 +305,7 @@ KdParseScreen (KdScreenInfo *screen,
     if (strlen (arg) >= sizeof (save))
 	return;
 
-    for (i = 0; i < 2; i++)
-    {
+    for (i = 0; i < 2; i++) {
 	arg = KdParseFindNext (arg, "x/@XY", save, &delim);
 	if (!save[0])
 	    return;
@@ -322,21 +313,18 @@ KdParseScreen (KdScreenInfo *screen,
 	pixels = atoi(save);
 	mm = 0;
 
-	if (delim == '/')
-	{
+        if (delim == '/') {
 	    arg = KdParseFindNext (arg, "x@XY", save, &delim);
 	    if (!save[0])
 		return;
 	    mm = atoi(save);
 	}
 
-	if (i == 0)
-	{
+        if (i == 0) {
 	    screen->width = pixels;
 	    screen->width_mm = mm;
 	}
-	else
-	{
+        else {
 	    screen->height = pixels;
 	    screen->height_mm = mm;
 	}
@@ -350,12 +338,11 @@ KdParseScreen (KdScreenInfo *screen,
     kdSoftCursor = FALSE;
     kdSubpixelOrder = SubPixelUnknown;
 
-    if (delim == '@')
-    {
+    if (delim == '@') {
 	arg = KdParseFindNext (arg, "xXY", save, &delim);
-	if (save[0])
-	{
+        if (save[0]) {
 	    int	    rotate = atoi (save);
+
 	    if (rotate < 45)
 		screen->randr = RR_Rotate_0;
 	    else if (rotate < 135)
@@ -368,24 +355,20 @@ KdParseScreen (KdScreenInfo *screen,
 		screen->randr = RR_Rotate_0;
 	}
     }
-    if (delim == 'X')
-    {
+    if (delim == 'X') {
 	arg = KdParseFindNext (arg, "xY", save, &delim);
 	screen->randr |= RR_Reflect_X;
     }
 
-    if (delim == 'Y')
-    {
+    if (delim == 'Y') {
 	arg = KdParseFindNext (arg, "xY", save, &delim);
 	screen->randr |= RR_Reflect_Y;
     }
 
     arg = KdParseFindNext (arg, "x/,", save, &delim);
-    if (save[0])
-    {
+    if (save[0]) {
 	screen->fb.depth = atoi(save);
-	if (delim == '/')
-	{
+        if (delim == '/') {
 	    arg = KdParseFindNext (arg, "x,", save, &delim);
 	    if (save[0])
 		screen->fb.bitsPerPixel = atoi (save);
@@ -394,8 +377,7 @@ KdParseScreen (KdScreenInfo *screen,
 	    screen->fb.bitsPerPixel = 0;
     }
 
-    if (delim == 'x')
-    {
+    if (delim == 'x') {
 	arg = KdParseFindNext (arg, "x", save, &delim);
 	if (save[0])
 	    screen->rate = atoi(save);
@@ -434,21 +416,28 @@ void
 KdUseMsg (void)
 {
     ErrorF("\nTinyX Device Dependent Usage:\n");
-    ErrorF("-screen WIDTH[/WIDTHMM]xHEIGHT[/HEIGHTMM][@ROTATION][X][Y][xDEPTH/BPP[xFREQ]]  Specify screen characteristics\n");
-    ErrorF("-rgba rgb/bgr/vrgb/vbgr/none   Specify subpixel ordering for LCD panels\n");
-    ErrorF("-mouse driver [,n,,options]    Specify the pointer driver and its options (n is the number of buttons)\n");
-    ErrorF("-keybd driver [,,options]      Specify the keyboard driver and its options\n");
+    ErrorF
+        ("-screen WIDTH[/WIDTHMM]xHEIGHT[/HEIGHTMM][@ROTATION][X][Y][xDEPTH/BPP[xFREQ]]  Specify screen characteristics\n");
+    ErrorF
+        ("-rgba rgb/bgr/vrgb/vbgr/none   Specify subpixel ordering for LCD panels\n");
+    ErrorF
+        ("-mouse driver [,n,,options]    Specify the pointer driver and its options (n is the number of buttons)\n");
+    ErrorF
+        ("-keybd driver [,,options]      Specify the keyboard driver and its options\n");
     ErrorF("-zaphod          Disable cursor screen switching\n");
     ErrorF("-2button         Emulate 3 button mouse\n");
     ErrorF("-3button         Disable 3 button mouse emulation\n");
-    ErrorF("-rawcoord        Don't transform pointer coordinates on rotation\n");
+    ErrorF
+        ("-rawcoord        Don't transform pointer coordinates on rotation\n");
     ErrorF("-dumb            Disable hardware acceleration\n");
     ErrorF("-softCursor      Force software cursor\n");
     ErrorF("-videoTest       Start the server, pause momentarily and exit\n");
-    ErrorF("-origin X,Y      Locates the next screen in the the virtual screen (Xinerama)\n");
+    ErrorF
+        ("-origin X,Y      Locates the next screen in the the virtual screen (Xinerama)\n");
     ErrorF("-switchCmd       Command to execute on vt switch\n");
     ErrorF("-zap             Terminate server on Ctrl+Alt+Backspace\n");
-    ErrorF("vtxx             Use virtual terminal xx instead of the next available\n");
+    ErrorF
+        ("vtxx             Use virtual terminal xx instead of the next available\n");
 }
 
 int
@@ -457,72 +446,61 @@ KdProcessArgument (int argc, char **argv, int i)
     KdCardInfo	    *card;
     KdScreenInfo    *screen;
 
-    if (!strcmp (argv[i], "-screen"))
-    {
-	if ((i+1) < argc)
-	{
+    if (!strcmp(argv[i], "-screen")) {
+        if ((i + 1) < argc) {
 	    card = KdCardInfoLast ();
-	    if (!card)
-	    {
+            if (!card) {
 		InitCard (0);
 		card = KdCardInfoLast ();
 	    }
 	    if (card) {
 		screen = KdScreenInfoAdd (card);
 		KdParseScreen (screen, argv[i+1]);
-	    } else
+            }
+            else
 		ErrorF("No matching card found!\n");
 	}
 	else
 	    UseMsg ();
 	return 2;
     }
-    if (!strcmp (argv[i], "-zaphod"))
-    {
+    if (!strcmp(argv[i], "-zaphod")) {
 	kdDisableZaphod = TRUE;
 	return 1;
     }
-    if (!strcmp (argv[i], "-zap"))
-    {
+    if (!strcmp(argv[i], "-zap")) {
 	kdAllowZap = TRUE;
 	return 1;
     }
-    if (!strcmp (argv[i], "-3button"))
-    {
+    if (!strcmp(argv[i], "-3button")) {
 	kdEmulateMiddleButton = FALSE;
 	return 1;
     }
-    if (!strcmp (argv[i], "-2button"))
-    {
+    if (!strcmp(argv[i], "-2button")) {
 	kdEmulateMiddleButton = TRUE;
 	return 1;
     }
-    if (!strcmp (argv[i], "-rawcoord"))
-    {
+    if (!strcmp(argv[i], "-rawcoord")) {
 	kdRawPointerCoordinates = 1;
 	return 1;
     }
-    if (!strcmp (argv[i], "-dumb"))
-    {
+    if (!strcmp(argv[i], "-dumb")) {
 	kdDumbDriver = TRUE;
 	return 1;
     }
-    if (!strcmp (argv[i], "-softCursor"))
-    {
+    if (!strcmp(argv[i], "-softCursor")) {
 	kdSoftCursor = TRUE;
 	return 1;
     }
-    if (!strcmp (argv[i], "-videoTest"))
-    {
+    if (!strcmp(argv[i], "-videoTest")) {
 	kdVideoTest = TRUE;
 	return 1;
     }
-    if (!strcmp (argv[i], "-origin"))
-    {
-	if ((i+1) < argc)
-	{
+    if (!strcmp(argv[i], "-origin")) {
+        if ((i + 1) < argc) {
 	    char    *x = argv[i+1];
 	    char    *y = strchr (x, ',');
+
 	    if (x)
 		kdOrigin.x = atoi (x);
 	    else
@@ -536,16 +514,14 @@ KdProcessArgument (int argc, char **argv, int i)
 	    UseMsg ();
 	return 2;
     }
-    if (!strcmp (argv[i], "-rgba"))
-    {
+    if (!strcmp(argv[i], "-rgba")) {
 	if ((i+1) < argc)
 	    KdParseRgba (argv[i+1]);
 	else
 	    UseMsg ();
 	return 2;
     }
-    if (!strcmp (argv[i], "-switchCmd"))
-    {
+    if (!strcmp(argv[i], "-switchCmd")) {
 	if ((i+1) < argc)
 	    kdSwitchCmd = argv[i+1];
 	else
@@ -553,12 +529,10 @@ KdProcessArgument (int argc, char **argv, int i)
 	return 2;
     }
     if (!strncmp (argv[i], "vt", 2) &&
-	sscanf (argv[i], "vt%2d", &kdVirtualTerminal) == 1)
-    {
+        sscanf(argv[i], "vt%2d", &kdVirtualTerminal) == 1) {
 	return 1;
     }
-    if (!strcmp (argv[i], "-mouse") ||
-        !strcmp (argv[i], "-pointer")) {
+    if (!strcmp(argv[i], "-mouse") || !strcmp(argv[i], "-pointer")) {
         if (i + 1 >= argc)
             UseMsg();
         KdAddConfigPointer(argv[i + 1]);
@@ -585,10 +559,8 @@ void
 KdOsInit (KdOsFuncs *pOsFuncs)
 {
     kdOsFuncs = pOsFuncs;
-    if (pOsFuncs)
-    {
-	if (serverGeneration == 1)
-	{
+    if (pOsFuncs) {
+        if (serverGeneration == 1) {
 	    KdDoSwitchCmd ("start");
             if (pOsFuncs->Init)
                 (*pOsFuncs->Init) ();
@@ -657,8 +629,7 @@ KdCloseScreen (int index, ScreenPtr pScreen)
     /*
      * Restore video hardware when last screen is closed
      */
-    if (screen == card->screenList)
-    {
+    if (screen == card->screenList) {
 	if (kdEnabled && card->cfuncs->restore)
 	    (*card->cfuncs->restore) (card);
     }
@@ -676,17 +647,14 @@ KdCloseScreen (int index, ScreenPtr pScreen)
      * Clean up card when last screen is closed, DIX closes them in
      * reverse order, thus we check for when the first in the list is closed
      */
-    if (screen == card->screenList)
-    {
+    if (screen == card->screenList) {
 	if(card->cfuncs->cardfini)
 	    (*card->cfuncs->cardfini) (card);
 	/*
 	 * Clean up OS when last card is closed
 	 */
-	if (card == kdCardInfo)
-	{
-	    if (kdEnabled)
-	    {
+        if (card == kdCardInfo) {
+            if (kdEnabled) {
 		kdEnabled = FALSE;
 		if(kdOsFuncs->Disable)
 		    (*kdOsFuncs->Disable) ();
@@ -725,8 +693,7 @@ KdSaveScreen (ScreenPtr pScreen, int on)
     case SCREEN_SAVER_FORCER:
 	break;
     }
-    if (dpmsState != pScreenPriv->dpmsState)
-    {
+    if (dpmsState != pScreenPriv->dpmsState) {
 	if (pScreenPriv->enabled)
 	    (*pScreenPriv->card->cfuncs->dpms) (pScreen, dpmsState);
 	pScreenPriv->dpmsState = dpmsState;
@@ -738,12 +705,10 @@ static Bool
 KdCreateWindow (WindowPtr pWin)
 {
 #ifndef PHOENIX
-    if (!pWin->parent)
-    {
+    if (!pWin->parent) {
 	KdScreenPriv(pWin->drawable.pScreen);
 
-	if (!pScreenPriv->enabled)
-	{
+        if (!pScreenPriv->enabled) {
 	    RegionEmpty(&pWin->borderClip);
 	    RegionBreak(&pWin->clipList);
 	}
@@ -765,43 +730,41 @@ KdSetSubpixelOrder (ScreenPtr pScreen, Rotation randr)
 	int	    subpixel_order;
 	Rotation    direction;
     } orders[] = {
-	{ SubPixelHorizontalRGB, 	RR_Rotate_0 },
-	{ SubPixelHorizontalBGR,	RR_Rotate_180 },
-	{ SubPixelVerticalRGB,		RR_Rotate_270 },
-	{ SubPixelVerticalBGR,		RR_Rotate_90 },
-    };
+        {
+        SubPixelHorizontalRGB, RR_Rotate_0}, {
+        SubPixelHorizontalBGR, RR_Rotate_180}, {
+        SubPixelVerticalRGB, RR_Rotate_270}, {
+    SubPixelVerticalBGR, RR_Rotate_90},};
 
     static struct {
 	int	bit;
 	int	normal;
 	int	reflect;
     } reflects[] = {
-	{ RR_Reflect_X, SubPixelHorizontalRGB,	SubPixelHorizontalBGR },
-	{ RR_Reflect_X, SubPixelHorizontalBGR,	SubPixelHorizontalRGB },
-	{ RR_Reflect_Y, SubPixelVerticalRGB,	SubPixelVerticalBGR },
-	{ RR_Reflect_Y, SubPixelVerticalRGB,	SubPixelVerticalRGB },
-    };
+        {
+        RR_Reflect_X, SubPixelHorizontalRGB, SubPixelHorizontalBGR}, {
+        RR_Reflect_X, SubPixelHorizontalBGR, SubPixelHorizontalRGB}, {
+        RR_Reflect_Y, SubPixelVerticalRGB, SubPixelVerticalBGR}, {
+    RR_Reflect_Y, SubPixelVerticalRGB, SubPixelVerticalRGB},};
 
     /* map subpixel to direction */
     for (i = 0; i < 4; i++)
 	if (orders[i].subpixel_order == subpixel_order)
 	    break;
-    if (i < 4)
-    {
-	subpixel_dir = KdAddRotation (randr & RR_Rotate_All, orders[i].direction);
+    if (i < 4) {
+        subpixel_dir =
+            KdAddRotation(randr & RR_Rotate_All, orders[i].direction);
 
 	/* map back to subpixel order */
 	for (i = 0; i < 4; i++)
-	    if (orders[i].direction & subpixel_dir)
-	    {
+            if (orders[i].direction & subpixel_dir) {
 		subpixel_order = orders[i].subpixel_order;
 		break;
 	    }
 	/* reflect */
 	for (i = 0; i < 4; i++)
 	    if ((randr & reflects[i].bit) &&
-		reflects[i].normal == subpixel_order)
-	    {
+                reflects[i].normal == subpixel_order) {
 		subpixel_order = reflects[i].reflect;
 		break;
 	    }
@@ -818,6 +781,7 @@ KdScreenInit(int index, ScreenPtr pScreen, int argc, char **argv)
     KdScreenInfo	*screen = kdCurrentScreen;
     KdCardInfo		*card = screen->card;
     KdPrivScreenPtr	pScreenPriv;
+
     /*
      * note that screen->fb is set up for the nominal orientation
      * of the screen; that means if randr is rotated, the values
@@ -830,15 +794,13 @@ KdScreenInit(int index, ScreenPtr pScreen, int argc, char **argv)
 
     pScreenPriv = KdGetScreenPriv(pScreen);
 
-    if (!rotated)
-    {
+    if (!rotated) {
 	width = screen->width;
 	height = screen->height;
 	width_mmp = &screen->width_mm;
 	height_mmp = &screen->height_mm;
     }
-    else
-    {
+    else {
 	width = screen->height;
 	height = screen->width;
 	width_mmp = &screen->height_mm;
@@ -863,9 +825,7 @@ KdScreenInit(int index, ScreenPtr pScreen, int argc, char **argv)
 			screen->fb.frameBuffer,
 			width, height,
 			monitorResolution, monitorResolution,
-			screen->fb.pixelStride,
-			screen->fb.bitsPerPixel))
-    {
+                       screen->fb.pixelStride, screen->fb.bitsPerPixel)) {
 	return FALSE;
     }
 
@@ -884,9 +844,7 @@ KdScreenInit(int index, ScreenPtr pScreen, int argc, char **argv)
 			     screen->fb.frameBuffer,
 			     width, height,
 			     monitorResolution, monitorResolution,
-			     screen->fb.pixelStride,
-			     screen->fb.bitsPerPixel))
-    {
+                            screen->fb.pixelStride, screen->fb.bitsPerPixel)) {
 	return FALSE;
     }
 
@@ -941,17 +899,13 @@ KdScreenInit(int index, ScreenPtr pScreen, int argc, char **argv)
     pScreen->CreateScreenResources = KdCreateScreenResources;
 
     if (screen->softCursor ||
-	!card->cfuncs->initCursor ||
-	!(*card->cfuncs->initCursor) (pScreen))
-    {
+        !card->cfuncs->initCursor || !(*card->cfuncs->initCursor) (pScreen)) {
 	/* Use MI for cursor display and event queueing. */
 	screen->softCursor = TRUE;
 	miDCInitialize(pScreen, &kdPointerScreenFuncs);
     }
 
-
-    if (!fbCreateDefColormap (pScreen))
-    {
+    if (!fbCreateDefColormap(pScreen)) {
 	return FALSE;
     }
 
@@ -960,15 +914,13 @@ KdScreenInit(int index, ScreenPtr pScreen, int argc, char **argv)
     /*
      * Enable the hardware
      */
-    if (!kdEnabled)
-    {
+    if (!kdEnabled) {
 	kdEnabled = TRUE;
 	if(kdOsFuncs->Enable)
 	    (*kdOsFuncs->Enable) ();
     }
 
-    if (screen->mynum == card->selected)
-    {
+    if (screen->mynum == card->selected) {
 	if(card->cfuncs->preserve)
 	    (*card->cfuncs->preserve) (card);
 	if(card->cfuncs->enable)
@@ -987,9 +939,7 @@ KdScreenInit(int index, ScreenPtr pScreen, int argc, char **argv)
 
 void
 KdInitScreen (ScreenInfo    *pScreenInfo,
-	      KdScreenInfo  *screen,
-	      int	    argc,
-	      char	    **argv)
+             KdScreenInfo * screen, int argc, char **argv)
 {
     KdCardInfo	*card = screen->card;
 
@@ -1020,10 +970,8 @@ KdSetPixmapFormats (ScreenInfo	*pScreenInfo)
      * restrictions on equivalent formats for the same
      * depth on different screens
      */
-    for (card = kdCardInfo; card; card = card->next)
-    {
-	for (screen = card->screenList; screen; screen = screen->next)
-	{
+    for (card = kdCardInfo; card; card = card->next) {
+        for (screen = card->screenList; screen; screen = screen->next) {
 	    bpp = screen->fb.bitsPerPixel;
 	    if (bpp == 24)
 		bpp = 32;
@@ -1048,10 +996,8 @@ KdSetPixmapFormats (ScreenInfo	*pScreenInfo)
 
     pScreenInfo->numPixmapFormats = 0;
 
-    for (i = 1; i <= 32; i++)
-    {
-	if (depthToBpp[i])
-	{
+    for (i = 1; i <= 32; i++) {
+        if (depthToBpp[i]) {
 	    format = &pScreenInfo->formats[pScreenInfo->numPixmapFormats++];
 	    format->depth = i;
 	    format->bitsPerPixel = depthToBpp[i];
@@ -1064,32 +1010,27 @@ KdSetPixmapFormats (ScreenInfo	*pScreenInfo)
 
 static void
 KdAddScreen (ScreenInfo	    *pScreenInfo,
-	     KdScreenInfo   *screen,
-	     int	    argc,
-	     char	    **argv)
+            KdScreenInfo * screen, int argc, char **argv)
 {
     int	    i;
+
     /*
      * Fill in fb visual type masks for this screen
      */
-    for (i = 0; i < pScreenInfo->numPixmapFormats; i++)
-    {
+    for (i = 0; i < pScreenInfo->numPixmapFormats; i++) {
 	unsigned long	visuals;
 	Pixel		rm, gm, bm;
 
 	visuals = 0;
 	rm = gm = bm = 0;
-	if (pScreenInfo->formats[i].depth == screen->fb.depth)
-	{
+        if (pScreenInfo->formats[i].depth == screen->fb.depth) {
 	    visuals = screen->fb.visuals;
 	    rm = screen->fb.redMask;
 	    gm = screen->fb.greenMask;
 	    bm = screen->fb.blueMask;
 	}
 	fbSetVisualTypesAndMasks (pScreenInfo->formats[i].depth,
-				  visuals,
-				  8,
-				  rm, gm, bm);
+                                 visuals, 8, rm, gm, bm);
     }
 
     kdCurrentScreen = screen;
@@ -1119,15 +1060,12 @@ KdSignalWrapper (int signum)
 }
 
 void
-KdInitOutput (ScreenInfo    *pScreenInfo,
-	      int	    argc,
-	      char	    **argv)
+KdInitOutput(ScreenInfo * pScreenInfo, int argc, char **argv)
 {
     KdCardInfo	    *card;
     KdScreenInfo    *screen;
 
-    if (!kdCardInfo)
-    {
+    if (!kdCardInfo) {
 	InitCard (0);
 	if (!(card = KdCardInfoLast ()))
 	    FatalError("No matching cards found!\n");
@@ -1137,13 +1075,12 @@ KdInitOutput (ScreenInfo    *pScreenInfo,
     /*
      * Initialize all of the screens for all of the cards
      */
-    for (card = kdCardInfo; card; card = card->next)
-    {
+    for (card = kdCardInfo; card; card = card->next) {
 	int ret=1;
+
 	if(card->cfuncs->cardinit)
 		ret=(*card->cfuncs->cardinit) (card);
-	if (ret)
-	{
+        if (ret) {
 	    for (screen = card->screenList; screen; screen = screen->next)
 		KdInitScreen (pScreenInfo, screen, argc, argv);
 	}
