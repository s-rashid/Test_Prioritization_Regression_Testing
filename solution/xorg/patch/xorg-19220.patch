diff --git a/Xi/chgdctl.c b/Xi/chgdctl.c
index 0040003..d507513 100644
--- a/Xi/chgdctl.c
+++ b/Xi/chgdctl.c
@@ -1,5 +1,3 @@
-/* $Xorg: chgdctl.c,v 1.4 2001/02/09 02:04:33 xorgcvs Exp $ */
-
 /************************************************************
 
 Copyright 1989, 1998  The Open Group
@@ -45,7 +43,6 @@ ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
 SOFTWARE.
 
 ********************************************************/
-/* $XFree86: xc/programs/Xserver/Xi/chgdctl.c,v 3.3 2001/01/17 22:13:23 dawes Exp $ */
 
 /********************************************************************
  *
@@ -113,8 +110,7 @@ ProcXChangeDeviceControl(ClientPtr client)
 
     len = stuff->length - (sizeof(xChangeDeviceControlReq) >>2);
     dev = LookupDeviceIntRec (stuff->deviceid);
-    if (dev == NULL)
-	{
+    if (dev == NULL) {
 	SendErrorToClient (client, IReqCode, X_ChangeDeviceControl, 0, 
 		BadDevice);
 	return Success;
@@ -125,70 +121,55 @@ ProcXChangeDeviceControl(ClientPtr client)
     rep.length = 0;
     rep.sequenceNumber = client->sequence;
 
-    switch (stuff->control) 
-	{
+    switch (stuff->control) {
 	case DEVICE_RESOLUTION:
     	    r = (xDeviceResolutionCtl *) &stuff[1];
 	    if ((len < (sizeof(xDeviceResolutionCtl)>>2)) ||
-	        (len != (sizeof(xDeviceResolutionCtl)>>2) +
-		 r->num_valuators))
-		{
+	    (len != (sizeof(xDeviceResolutionCtl) >> 2) + r->num_valuators)) {
 		SendErrorToClient (client, IReqCode, X_ChangeDeviceControl, 
 			0, BadLength);
 		return Success;
 		}
-	    if (!dev->valuator)
-		{
+	if (!dev->valuator) {
 		SendErrorToClient (client, IReqCode, X_ChangeDeviceControl, 0, 
 		    BadMatch);
 		return Success;
 		}
-	    if ((dev->grab) && !SameClient(dev->grab, client))
-		{
+	if ((dev->grab) && !SameClient(dev->grab, client)) {
 		rep.status = AlreadyGrabbed;
-		WriteReplyToClient(client, sizeof(xChangeDeviceControlReply), 
-		    &rep);
+	    WriteReplyToClient(client, sizeof(xChangeDeviceControlReply), &rep);
 		return Success;
 		}
 	    resolution = (CARD32 *) (r + 1);
-	    if (r->first_valuator + r->num_valuators > dev->valuator->numAxes)
-		{
+	if (r->first_valuator + r->num_valuators > dev->valuator->numAxes) {
 		SendErrorToClient (client, IReqCode, X_ChangeDeviceControl, 0, 
 		    BadValue);
 		return Success;
 		}
 	    status = ChangeDeviceControl(client, dev, (xDeviceCtl*) r);
-	    if (status == Success)
-		{
+	if (status == Success) {
 	        a = &dev->valuator->axes[r->first_valuator];
 		for (i=0; i<r->num_valuators; i++)
 		    if (*(resolution+i) < (a+i)->min_resolution ||
-		        *(resolution+i) > (a+i)->max_resolution)
-			{
+		    *(resolution + i) > (a + i)->max_resolution) {
 			SendErrorToClient (client, IReqCode, 
 			    X_ChangeDeviceControl, 0, BadValue);
 			return Success;
 			}
 		for (i=0; i<r->num_valuators; i++)
 		    (a++)->resolution = *resolution++; 
-		}
-	    else if (status == DeviceBusy)
-		{
+	} else if (status == DeviceBusy) {
 		rep.status = DeviceBusy;
-		WriteReplyToClient(client, sizeof(xChangeDeviceControlReply), 
-		    &rep);
+	    WriteReplyToClient(client, sizeof(xChangeDeviceControlReply), &rep);
 		return Success;
-		}
-	    else 
-		{
+	} else {
 		SendErrorToClient (client, IReqCode, X_ChangeDeviceControl, 0, 
 		    BadMatch);
 		return Success;
 		}
 	    break;
 	default:
-	    SendErrorToClient (client, IReqCode, X_ChangeDeviceControl, 0, 
-		BadValue);
+	SendErrorToClient(client, IReqCode, X_ChangeDeviceControl, 0, BadValue);
 	    return Success;
 	}
     WriteReplyToClient(client, sizeof(xChangeDeviceControlReply), &rep);
@@ -203,7 +184,8 @@ ProcXChangeDeviceControl(ClientPtr client)
  */
 
 void
-SRepXChangeDeviceControl (ClientPtr client, int size, xChangeDeviceControlReply *rep)
+SRepXChangeDeviceControl(ClientPtr client, int size,
+			 xChangeDeviceControlReply * rep)
 {
     register char n;
 
@@ -211,4 +193,3 @@ SRepXChangeDeviceControl (ClientPtr client, int size, xChangeDeviceControlReply
     swapl(&rep->length, n);
     WriteToClient(client, size, (char *)rep);
     }
-
