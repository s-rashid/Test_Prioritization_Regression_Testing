diff --git a/hw/xfree86/os-support/shared/sigio.c b/hw/xfree86/os-support/shared/sigio.c
index 274a8ab..12ae8a4 100644
--- a/hw/xfree86/os-support/shared/sigio.c
+++ b/hw/xfree86/os-support/shared/sigio.c
@@ -104,8 +104,7 @@ xf86SIGIO (int sig)
     to.tv_usec = 0;
     SYSCALL (r = select (xf86SigIOMaxFd, &ready, 0, 0, &to));
     for (i = 0; r > 0 && i < xf86SigIOMax; i++)
-	if (xf86SigIOFuncs[i].f && FD_ISSET (xf86SigIOFuncs[i].fd, &ready))
-	{
+        if (xf86SigIOFuncs[i].f && FD_ISSET(xf86SigIOFuncs[i].fd, &ready)) {
 	    (*xf86SigIOFuncs[i].f)(xf86SigIOFuncs[i].fd,
 				   xf86SigIOFuncs[i].closure);
 	    r--;
@@ -139,10 +138,8 @@ xf86InstallSIGIOHandler(int fd, void (*f)(int, void *), void *closure)
     if (!xf86Info.useSIGIO)
 	return 0;
 
-    for (i = 0; i < MAX_FUNCS; i++)
-    {
-	if (!xf86SigIOFuncs[i].f)
-	{
+    for (i = 0; i < MAX_FUNCS; i++) {
+        if (!xf86SigIOFuncs[i].f) {
 	    if (xf86IsPipe (fd))
 		return 0;
 	    blocked = xf86BlockSIGIO();
@@ -150,11 +147,13 @@ xf86InstallSIGIOHandler(int fd, void (*f)(int, void *), void *closure)
 	    if (fcntl(fd, F_SETFL, fcntl(fd, F_GETFL) | O_ASYNC) == -1) {
 		xf86Msg(X_WARNING, "fcntl(%d, O_ASYNC): %s\n",
 			fd, strerror(errno));
-	    } else {
+            }
+            else {
 		if (fcntl(fd, F_SETOWN, getpid()) == -1) {
 		    xf86Msg(X_WARNING, "fcntl(%d, F_SETOWN): %s\n",
 			    fd, strerror(errno));
-		} else {
+                }
+                else {
 		    installed = TRUE;
 		}
 	    }
@@ -164,7 +163,8 @@ xf86InstallSIGIOHandler(int fd, void (*f)(int, void *), void *closure)
 		if (ioctl(fd, I_SETSIG, S_INPUT | S_ERROR | S_HANGUP) == -1) {
 		    xf86Msg(X_WARNING, "fcntl(%d, I_SETSIG): %s\n",
 			    fd, strerror(errno));
-		} else {
+                }
+                else {
 		    installed = TRUE;
 		}
 	    }
@@ -190,8 +190,7 @@ xf86InstallSIGIOHandler(int fd, void (*f)(int, void *), void *closure)
 	    return 1;
 	}
  	/* Allow overwriting of the closure and callback */
- 	else if (xf86SigIOFuncs[i].fd == fd)
- 	{
+        else if (xf86SigIOFuncs[i].fd == fd) {
  	    xf86SigIOFuncs[i].closure = closure;
  	    xf86SigIOFuncs[i].f = f;
  	    return 1;
@@ -216,28 +215,23 @@ xf86RemoveSIGIOHandler(int fd)
     max = 0;
     maxfd = -1;
     ret = 0;
-    for (i = 0; i < MAX_FUNCS; i++)
-    {
-	if (xf86SigIOFuncs[i].f)
-	{
-	    if (xf86SigIOFuncs[i].fd == fd)
-	    {
+    for (i = 0; i < MAX_FUNCS; i++) {
+        if (xf86SigIOFuncs[i].f) {
+            if (xf86SigIOFuncs[i].fd == fd) {
 		xf86SigIOFuncs[i].f = 0;
 		xf86SigIOFuncs[i].fd = 0;
 		xf86SigIOFuncs[i].closure = 0;
 		FD_CLR (fd, &xf86SigIOMask);
 		ret = 1;
 	    }
-	    else
-	    {
+            else {
 		max = i + 1;
 		if (xf86SigIOFuncs[i].fd >= maxfd)
 		    maxfd = xf86SigIOFuncs[i].fd + 1;
 	    }
 	}
     }
-    if (ret)
-    {
+    if (ret) {
 #ifdef O_ASYNC
 	fcntl(fd, F_SETFL, fcntl(fd, F_GETFL) & ~O_ASYNC);
 #endif
@@ -251,8 +245,7 @@ xf86RemoveSIGIOHandler(int fd)
 #endif
 	xf86SigIOMax = max;
 	xf86SigIOMaxFd = maxfd;
-	if (!max)
-	{
+        if (!max) {
 	    sigemptyset(&sa.sa_mask);
 	    sigaddset(&sa.sa_mask, SIGIO);
 	    sa.sa_flags   = 0;
@@ -281,8 +274,7 @@ xf86UnblockSIGIO (int wasset)
 {
     sigset_t	set;
 
-    if (!wasset)
-    {
+    if (!wasset) {
 	sigemptyset (&set);
 	sigaddset (&set, SIGIO);
 	sigprocmask (SIG_UNBLOCK, &set, NULL);
