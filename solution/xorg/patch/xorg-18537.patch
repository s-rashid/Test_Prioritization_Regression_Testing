diff --git a/hw/xgl/glx/xglx.c b/hw/xgl/glx/xglx.c
index 842ab19..cff3821 100644
--- a/hw/xgl/glx/xglx.c
+++ b/hw/xgl/glx/xglx.c
@@ -23,12 +23,13 @@
  * Author: David Reveman <davidr@novell.com>
  */
 
-#include <X11/Xlib.h>
-#include <X11/Xutil.h>
-#include <glitz-glx.h>
-
 #include "xglx.h"
 
+#include <X11/extensions/Xrandr.h>
+#include <X11/cursorfont.h>
+
+#include <glitz-glx.h>
+
 #ifdef GLXEXT
 #include "xglglxext.h"
 #endif
@@ -37,18 +38,70 @@
 #include "cursorstr.h"
 #include "mipointer.h"
 
+#ifdef RANDR
+#include "randrstr.h"
+#endif
+
 #include <stdio.h>
 #include <stdlib.h>
 #include <unistd.h>
 #include <signal.h>
 #include <math.h>
 
+#ifdef XKB
+#include <X11/extensions/XKB.h>
+#include <X11/extensions/XKBsrv.h>
+#include <X11/extensions/XKBconfig.h>
+
+extern Bool
+XkbQueryExtension (Display *dpy,
+		   int     *opcodeReturn,
+		   int     *eventBaseReturn,
+		   int     *errorBaseReturn,
+		   int     *majorRtrn,
+		   int     *minorRtrn);
+
+extern XkbDescPtr
+XkbGetKeyboard (Display      *dpy,
+		unsigned int which,
+		unsigned int deviceSpec);
+
+extern Status
+XkbGetControls (Display	    *dpy,
+		unsigned long which,
+		XkbDescPtr    desc);
+
+#ifndef XKB_BASE_DIRECTORY
+#define	XKB_BASE_DIRECTORY	"/usr/lib/X11/xkb/"
+#endif
+#ifndef XKB_CONFIG_FILE
+#define	XKB_CONFIG_FILE		"X0-config.keyboard"
+#endif
+#ifndef XKB_DFLT_RULES_FILE
+#define	XKB_DFLT_RULES_FILE	"xorg"
+#endif
+#ifndef XKB_DFLT_KB_LAYOUT
+#define	XKB_DFLT_KB_LAYOUT	"us"
+#endif
+#ifndef XKB_DFLT_KB_MODEL
+#define	XKB_DFLT_KB_MODEL	"pc101"
+#endif
+#ifndef XKB_DFLT_KB_VARIANT
+#define	XKB_DFLT_KB_VARIANT	NULL
+#endif
+#ifndef XKB_DFLT_KB_OPTIONS
+#define	XKB_DFLT_KB_OPTIONS	NULL
+#endif
+
+#endif
+
 #define XGLX_DEFAULT_SCREEN_WIDTH  800
 #define XGLX_DEFAULT_SCREEN_HEIGHT 600
 
 typedef struct _xglxScreen {
-    Window	       win;
+    Window	       win, root;
     Colormap	       colormap;
+    Bool	       fullscreen;
     CloseScreenProcPtr CloseScreen;
 } xglxScreenRec, *xglxScreenPtr;
 
@@ -83,7 +136,12 @@ static int	 xscreen;
 static CARD32	 lastEventTime = 0;
 static ScreenPtr currentScreen = 0;
 static Bool	 softCursor    = FALSE;
-static Bool	 fullscreen    = FALSE;
+static Bool	 fullscreen    = TRUE;
+
+static Bool randrExtension = FALSE;
+static int  randrEvent, randrError;
+
+static glitz_drawable_format_t *xglxScreenFormat = 0;
 
 static Bool
 xglxAllocatePrivates (ScreenPtr pScreen)
@@ -108,6 +166,219 @@ xglxAllocatePrivates (ScreenPtr pScreen)
     return TRUE;
 }
 
+#ifdef RANDR
+
+#define DEFAULT_REFRESH_RATE 50
+
+static Bool
+xglxRandRGetInfo (ScreenPtr pScreen,
+		  Rotation  *rotations)
+{
+    RRScreenSizePtr pSize;
+
+    *rotations = RR_Rotate_0;
+
+    if (randrExtension)
+    {
+	XRRScreenConfiguration *xconfig;
+	XRRScreenSize	       *sizes;
+	int		       nSizes, currentSize = 0;
+	short		       *rates, currentRate;
+	int		       nRates, i, j;
+
+	XGLX_SCREEN_PRIV (pScreen);
+
+	xconfig	    = XRRGetScreenInfo (xdisplay, pScreenPriv->root);
+	sizes	    = XRRConfigSizes (xconfig, &nSizes);
+	currentRate = XRRConfigCurrentRate (xconfig);
+
+	if (pScreenPriv->fullscreen)
+	{
+	    Rotation rotation;
+
+	    currentSize = XRRConfigCurrentConfiguration (xconfig, &rotation);
+
+	    for (i = 0; i < nSizes; i++)
+	    {
+		pSize = RRRegisterSize (pScreen,
+					sizes[i].width,
+					sizes[i].height,
+					sizes[i].mwidth,
+					sizes[i].mheight);
+
+		rates = XRRConfigRates (xconfig, i, &nRates);
+
+		for (j = 0; j < nRates; j++)
+		{
+		    RRRegisterRate (pScreen, pSize, rates[j]);
+
+		    if (i == currentSize && rates[j] == currentRate)
+			RRSetCurrentConfig (pScreen, RR_Rotate_0, currentRate,
+					    pSize);
+		}
+	    }
+	}
+	else
+	{
+	    pSize = RRRegisterSize (pScreen,
+				    pScreen->width,
+				    pScreen->height,
+				    pScreen->mmWidth,
+				    pScreen->mmHeight);
+
+	    for (i = 0; i < nSizes; i++)
+	    {
+		rates = XRRConfigRates (xconfig, i, &nRates);
+
+		for (j = 0; j < nRates; j++)
+		{
+		    RRRegisterRate (pScreen, pSize, rates[j]);
+
+		    if (rates[j] == currentRate)
+			RRSetCurrentConfig (pScreen, RR_Rotate_0, currentRate,
+					    pSize);
+		}
+	    }
+	}
+
+	XRRFreeScreenConfigInfo (xconfig);
+    }
+    else
+    {
+	pSize = RRRegisterSize (pScreen,
+				pScreen->width,
+				pScreen->height,
+				pScreen->mmWidth,
+				pScreen->mmHeight);
+
+	RRRegisterRate (pScreen, pSize, DEFAULT_REFRESH_RATE);
+	RRSetCurrentConfig (pScreen, RR_Rotate_0, DEFAULT_REFRESH_RATE, pSize);
+    }
+
+    return TRUE;
+}
+
+static Bool
+xglxRandRSetConfig (ScreenPtr	    pScreen,
+		    Rotation	    rotations,
+		    int		    rate,
+		    RRScreenSizePtr pSize)
+{
+    if (randrExtension)
+    {
+	XRRScreenConfiguration *xconfig;
+	XRRScreenSize	       *sizes;
+	int		       nSizes, currentSize;
+	int		       i, size = -1;
+	int		       status = RRSetConfigFailed;
+	Rotation	       rotation;
+
+	XGLX_SCREEN_PRIV (pScreen);
+
+	xconfig	    = XRRGetScreenInfo (xdisplay, pScreenPriv->root);
+	sizes	    = XRRConfigSizes (xconfig, &nSizes);
+	currentSize = XRRConfigCurrentConfiguration (xconfig, &rotation);
+
+	for (i = 0; i < nSizes; i++)
+	{
+	    if (pScreenPriv->fullscreen)
+	    {
+		if (sizes[i].width   == pSize->width   &&
+		    sizes[i].height  == pSize->height  &&
+		    sizes[i].mwidth  == pSize->mmWidth &&
+		    sizes[i].mheight == pSize->mmHeight)
+		{
+		    size = i;
+		    break;
+		}
+	    }
+	    else
+	    {
+		short *rates;
+		int   nRates, j;
+
+		rates = XRRConfigRates (xconfig, i, &nRates);
+
+		for (j = 0; j < nRates; j++)
+		{
+		    if (rates[j] == rate)
+		    {
+			size = i;
+			if (i >= currentSize)
+			    break;
+		    }
+		}
+	    }
+	}
+
+	if (size >= 0)
+	    status = XRRSetScreenConfigAndRate (xdisplay,
+						xconfig,
+						pScreenPriv->root,
+						size,
+						RR_Rotate_0,
+						rate,
+						CurrentTime);
+
+	XRRFreeScreenConfigInfo (xconfig);
+
+	if (status == RRSetConfigSuccess)
+	{
+	    PixmapPtr pPixmap;
+
+	    pPixmap = (*pScreen->GetScreenPixmap) (pScreen);
+
+	    if (pScreenPriv->fullscreen)
+	    {
+		XGL_PIXMAP_PRIV (pPixmap);
+
+		xglSetRootClip (pScreen, FALSE);
+
+		XResizeWindow (xdisplay, pScreenPriv->win,
+			       pSize->width, pSize->height);
+
+		glitz_drawable_update_size (pPixmapPriv->drawable,
+					    pSize->width, pSize->height);
+
+		pScreen->width    = pSize->width;
+		pScreen->height   = pSize->height;
+		pScreen->mmWidth  = pSize->mmWidth;
+		pScreen->mmHeight = pSize->mmHeight;
+
+		(*pScreen->ModifyPixmapHeader) (pPixmap,
+						pScreen->width,
+						pScreen->height,
+						pPixmap->drawable.depth,
+						pPixmap->drawable.bitsPerPixel,
+						0, 0);
+
+		xglSetRootClip (pScreen, TRUE);
+	    }
+
+	    return TRUE;
+	}
+    }
+
+    return FALSE;
+}
+
+static Bool
+xglxRandRInit (ScreenPtr pScreen)
+{
+    rrScrPrivPtr pScrPriv;
+
+    if (!RRScreenInit (pScreen))
+	return FALSE;
+
+    pScrPriv = rrGetScrPriv (pScreen);
+    pScrPriv->rrGetInfo   = xglxRandRGetInfo;
+    pScrPriv->rrSetConfig = xglxRandRSetConfig;
+
+    return TRUE;
+}
+
+#endif
+
 static void
 xglxConstrainCursor (ScreenPtr pScreen,
 		     BoxPtr    pBox)
@@ -154,7 +425,7 @@ xglxRealizeCursor (ScreenPtr pScreen,
     XImage	  *ximage;
     Pixmap	  source, mask;
     XColor	  fgColor, bgColor;
-    GC		  xgc;
+    XlibGC	  xgc;
     unsigned long valuemask;
     XGCValues	  values;
 
@@ -345,13 +616,12 @@ xglxScreenInit (int	  index,
     XSizeHints		    *normalHints;
     XClassHint		    *classHint;
     xglxScreenPtr	    pScreenPriv;
-    Window		    root;
     XVisualInfo		    *vinfo;
     XEvent		    xevent;
     glitz_drawable_format_t *format;
     glitz_drawable_t	    *drawable;
     
-    format = xglVisuals[0].format;
+    format = xglxScreenFormat;
 	
     if (!xglxAllocatePrivates (pScreen))
 	return FALSE;
@@ -360,7 +630,8 @@ xglxScreenInit (int	  index,
 
     pScreenPriv = XGLX_GET_SCREEN_PRIV (pScreen);
 
-    root = RootWindow (xdisplay, xscreen);
+    pScreenPriv->root	    = RootWindow (xdisplay, xscreen);
+    pScreenPriv->fullscreen = fullscreen;
 
     vinfo = glitz_glx_get_visual_info_from_format (xdisplay, xscreen, format);
     if (!vinfo)
@@ -370,7 +641,11 @@ xglxScreenInit (int	  index,
     }
 
     pScreenPriv->colormap =
-	XCreateColormap (xdisplay, root, vinfo->visual, AllocNone);
+	XCreateColormap (xdisplay, pScreenPriv->root, vinfo->visual,
+			 AllocNone);
+
+    if (XRRQueryExtension (xdisplay, &randrEvent, &randrError))
+	randrExtension = TRUE;
 
     if (fullscreen)
     {
@@ -378,6 +653,25 @@ xglxScreenInit (int	  index,
 	xglScreenInfo.height   = DisplayHeight (xdisplay, xscreen);
 	xglScreenInfo.widthMm  = DisplayWidthMM (xdisplay, xscreen);
 	xglScreenInfo.heightMm = DisplayHeightMM (xdisplay, xscreen);
+
+	if (randrExtension)
+	{
+	    XRRScreenConfiguration *xconfig;
+	    Rotation		   rotation;
+	    XRRScreenSize	   *sizes;
+	    int			   nSizes, currentSize;
+
+	    xconfig	= XRRGetScreenInfo (xdisplay, pScreenPriv->root);
+	    currentSize = XRRConfigCurrentConfiguration (xconfig, &rotation);
+	    sizes	= XRRConfigSizes (xconfig, &nSizes);
+
+	    xglScreenInfo.width    = sizes[currentSize].width;
+	    xglScreenInfo.height   = sizes[currentSize].height;
+	    xglScreenInfo.widthMm  = sizes[currentSize].mwidth;
+	    xglScreenInfo.heightMm = sizes[currentSize].mheight;
+
+	    XRRFreeScreenConfigInfo (xconfig);
+	}
     }
     else if (xglScreenInfo.width == 0 || xglScreenInfo.height == 0)
     {
@@ -388,7 +682,7 @@ xglxScreenInit (int	  index,
     xswa.colormap = pScreenPriv->colormap;
     
     pScreenPriv->win =
-	XCreateWindow (xdisplay, root, 0, 0,
+	XCreateWindow (xdisplay, pScreenPriv->root, 0, 0,
 		       xglScreenInfo.width, xglScreenInfo.height, 0,
 		       vinfo->depth, InputOutput, vinfo->visual,
 		       CWColormap, &xswa);
@@ -456,8 +750,8 @@ xglxScreenInit (int	  index,
 	xev.data.l[1] =
 	    XInternAtom (xdisplay, "_NET_WM_STATE_FULLSCREEN", FALSE);
 	
-	XSendEvent (xdisplay, root, FALSE, SubstructureRedirectMask,
-		    (XEvent *) &xev);
+	XSendEvent (xdisplay, pScreenPriv->root, FALSE,
+		    SubstructureRedirectMask, (XEvent *) &xev);
     }
 
     xglScreenInfo.drawable = drawable;
@@ -520,6 +814,11 @@ xglxScreenInit (int	  index,
     if (!xglFinishScreenInit (pScreen))
 	return FALSE;
   
+#ifdef RANDR
+    if (!xglxRandRInit (pScreen))
+	return FALSE;
+#endif
+
     while (XNextEvent (xdisplay, &xevent))
 	if (xevent.type == Expose)
 	    break;
@@ -535,33 +834,66 @@ xglxInitOutput (ScreenInfo *pScreenInfo,
     glitz_drawable_format_t *format, templ;
     int			    i;
     unsigned long	    mask;
+    unsigned long	    extraMask[] = {
+	GLITZ_FORMAT_DOUBLEBUFFER_MASK | GLITZ_FORMAT_ALPHA_SIZE_MASK,
+	GLITZ_FORMAT_DOUBLEBUFFER_MASK,
+	GLITZ_FORMAT_ALPHA_SIZE_MASK,
+	0
+    };
+
+    xglClearVisualTypes ();
 
     xglSetPixmapFormats (pScreenInfo);
     
     if (!xdisplay)
     {
-	xdisplay = XOpenDisplay (xDisplayName);
+	char *name = xDisplayName;
+
+	if (!name)
+	    name = xglxInitXorg ();
+
+	xdisplay = XOpenDisplay (name);
 	if (!xdisplay)
-	    FatalError ("can't open display");
+	    FatalError ("can't open display: %s\n", name ? name : "NULL");
 
 	xscreen = DefaultScreen (xdisplay);
+
+	if (!xDisplayName)
+	    XDefineCursor (xdisplay, RootWindow (xdisplay, xscreen),
+			   XCreateFontCursor (xdisplay, XC_watch));
     }
 
     templ.samples          = 1;
     templ.doublebuffer     = 1;
+    templ.color.fourcc     = GLITZ_FOURCC_RGB;
     templ.color.alpha_size = 8;
     
-    mask = GLITZ_FORMAT_SAMPLES_MASK;
+    mask = GLITZ_FORMAT_SAMPLES_MASK | GLITZ_FORMAT_FOURCC_MASK;
 
+    for (i = 0; i < sizeof (extraMask) / sizeof (extraMask[0]); i++)
+    {
     format = glitz_glx_find_window_format (xdisplay, xscreen,
-					   mask, &templ, 0);
+					       mask | extraMask[i],
+					       &templ, 0);
+	if (format)
+	    break;
+    }
     
     if (!format)
 	FatalError ("no visual format found");
 
-    xglSetVisualTypesAndMasks (pScreenInfo, format, (1 << TrueColor));
+    xglScreenInfo.depth =
+	format->color.red_size   +
+	format->color.green_size +
+	format->color.blue_size;
+
+    xglSetVisualTypes (xglScreenInfo.depth,
+		       (1 << TrueColor),
+		       format->color.red_size,
+		       format->color.green_size,
+		       format->color.blue_size);
     
-    xglInitVisuals (pScreenInfo);
+    xglxScreenFormat = format;
     
     AddScreen (xglxScreenInit, argc, argv);
 }
@@ -591,7 +923,7 @@ xglxWindowExposures (WindowPtr pWin,
 
     if (HasBorder (pWin))
     {
-	REGION_NULL (pScreen, &ClipList);
+	REGION_INIT (pScreen, &ClipList, NullBox, 0);
 	REGION_SUBTRACT (pScreen, &ClipList, &pWin->borderClip,
 			 &pWin->winSize);
 	REGION_INTERSECT (pScreen, &ClipList, &ClipList, (RegionPtr) pReg);
@@ -599,7 +931,7 @@ xglxWindowExposures (WindowPtr pWin,
 	REGION_UNINIT (pScreen, &ClipList);
     }
     
-    REGION_NULL (pScreen, &ClipList);
+    REGION_INIT (pScreen, &ClipList, NullBox, 0);
     REGION_INTERSECT (pScreen, &ClipList, &pWin->clipList, (RegionPtr) pReg);
     (*pScreen->WindowExposures) (pWin, &ClipList, NullRegion);
     REGION_UNINIT (pScreen, &ClipList);
@@ -681,6 +1013,7 @@ xglxWakeupHandler (pointer blockData,
 	    break;
 	case MotionNotify:
 	    x.u.u.type = MotionNotify;
+	    x.u.u.detail = 0;
 	    x.u.keyButtonPointer.rootX = X.xmotion.x;
 	    x.u.keyButtonPointer.rootY = X.xmotion.y;
 	    x.u.keyButtonPointer.time = lastEventTime = GetTimeInMillis ();
@@ -692,6 +1025,7 @@ xglxWakeupHandler (pointer blockData,
 		if (pScreen) {
 		    NewCurrentScreen (pScreen, X.xcrossing.x, X.xcrossing.y);
 		    x.u.u.type = MotionNotify;
+		    x.u.u.detail = 0;
 		    x.u.keyButtonPointer.rootX = X.xcrossing.x;
 		    x.u.keyButtonPointer.rootY = X.xcrossing.y;
 		    x.u.keyButtonPointer.time = lastEventTime =
@@ -715,11 +1049,43 @@ xglxBell (int	       volume,
   XBell (xdisplay, volume);
 }
 
+static void
+xglxKbdCtrl (DeviceIntPtr pDev,
+	     KeybdCtrl    *ctrl)
+{
+    unsigned long    valueMask;
+    XKeyboardControl values;
+    int		     i;
+
+    valueMask = KBKeyClickPercent | KBBellPercent | KBBellPitch |
+	KBBellDuration | KBAutoRepeatMode;
+
+    values.key_click_percent = ctrl->click;
+    values.bell_percent	     = ctrl->bell;
+    values.bell_pitch	     = ctrl->bell_pitch;
+    values.bell_duration     = ctrl->bell_duration;
+    values.auto_repeat_mode  = (ctrl->autoRepeat) ? AutoRepeatModeOn :
+	AutoRepeatModeOff;
+
+    XChangeKeyboardControl (xdisplay, valueMask, &values);
+
+    valueMask = KBLed | KBLedMode;
+
+    for (i = 1; i <= 32; i++)
+    {
+	values.led = i;
+	values.led_mode = (ctrl->leds & (1 << (i - 1))) ? LedModeOn :
+	    LedModeOff;
+
+	XChangeKeyboardControl (xdisplay, valueMask, &values);
+    }
+}
+
 static int
 xglxKeybdProc (DeviceIntPtr pDevice,
 	       int	    onoff)
 {
-    Bool      ret;
+    Bool      ret = FALSE;
     DevicePtr pDev = (DevicePtr) pDevice;
 
     if (!pDev)
@@ -734,15 +1100,41 @@ xglxKeybdProc (DeviceIntPtr pDevice,
       CARD8	      xglxModMap[256];
       XKeyboardState  values;
 
+#ifdef _XSERVER64
+      KeySym64	      *xkeyMap64;
+      int	      len;
+#endif
+
+#ifdef XKB
+      Bool	      xkbExtension = FALSE;
+      int	      xkbOp, xkbEvent, xkbError, xkbMajor, xkbMinor;
+#endif
+
       if (pDev != LookupKeyboardDevice ())
 	    return !Success;
       
       xmodMap = XGetModifierMapping (xdisplay);
+
       XDisplayKeycodes (xdisplay, &minKeyCode, &maxKeyCode);
+
+#ifdef _XSERVER64
+      xkeyMap64 = XGetKeyboardMapping (xdisplay,
+				       minKeyCode,
+				       maxKeyCode - minKeyCode + 1,
+				       &mapWidth);
+
+      len = (maxKeyCode - minKeyCode + 1) * mapWidth;
+      xkeyMap = (KeySym *) xalloc (len * sizeof (KeySym));
+      for (i = 0; i < len; ++i)
+	  xkeyMap[i] = xkeyMap64[i];
+
+      XFree (xkeyMap64);
+#else
       xkeyMap = XGetKeyboardMapping (xdisplay, 
 				     minKeyCode,
 				     maxKeyCode - minKeyCode + 1,
 				     &mapWidth);
+#endif
       
       memset (xglxModMap, 0, 256);
       
@@ -765,6 +1157,85 @@ xglxKeybdProc (DeviceIntPtr pDevice,
       xglxKeySyms.mapWidth   = mapWidth;
       xglxKeySyms.map	     = xkeyMap;
 
+#ifdef XKB
+      if (!noXkbExtension)
+	  xkbExtension = XkbQueryExtension (xdisplay,
+					    &xkbOp, &xkbEvent, &xkbError,
+					    &xkbMajor, &xkbMinor);
+
+      if (xkbExtension)
+      {
+	  XkbDescPtr desc;
+	  char	     *rules, *model, *layout, *variants, *options;
+
+	  desc = XkbGetKeyboard (xdisplay,
+				 XkbGBN_AllComponentsMask,
+				 XkbUseCoreKbd);
+
+	  if (desc && desc->geom)
+	  {
+	      XkbComponentNamesRec names;
+	      FILE		   *file;
+
+	      rules    = XKB_DFLT_RULES_FILE;
+	      model    = XKB_DFLT_KB_MODEL;
+	      layout   = XKB_DFLT_KB_LAYOUT;
+	      variants = XKB_DFLT_KB_VARIANT;
+	      options  = XKB_DFLT_KB_OPTIONS;
+
+	      XkbGetControls (xdisplay, XkbAllControlsMask, desc);
+
+	      memset (&names, 0, sizeof (XkbComponentNamesRec));
+
+	      if (XkbInitialMap)
+	      {
+		  if ((names.keymap = strchr (XkbInitialMap, '/')) != NULL)
+		      names.keymap++;
+		  else
+		      names.keymap = XkbInitialMap;
+	      }
+
+	      file = fopen (XKB_BASE_DIRECTORY XKB_CONFIG_FILE, "r");
+	      if (file)
+	      {
+		  XkbConfigRtrnRec config;
+
+		  if (XkbCFParse (file, XkbCFDflts, desc, &config))
+		  {
+		      if (config.rules_file)
+			  rules = config.rules_file;
+		      if (config.model)
+			  model = config.model;
+		      if (config.layout)
+			  layout = config.layout;
+		      if (config.variant)
+			  variants = config.variant;
+		      if (config.options)
+			  options = config.options;
+		  }
+		  fclose (file);
+	      }
+
+	      XkbSetRulesDflts (rules, model, layout, variants, options);
+
+	      ret = XkbInitKeyboardDeviceStruct ((pointer) pDev,
+						 &names,
+						 &xglxKeySyms,
+						 xglxModMap,
+						 xglxBell,
+						 xglxKbdCtrl);
+
+	      if (ret)
+		  XkbDDXChangeControls ((pointer) pDev, desc->ctrls,
+					desc->ctrls);
+
+	      XkbFreeKeyboard (desc, 0, False);
+	  }
+      }
+#endif
+
+      if (!ret)
+      {
       XGetKeyboardControl (xdisplay, &values);
 
       memmove (defaultKeyboardControl.autoRepeats,
@@ -774,12 +1245,18 @@ xglxKeybdProc (DeviceIntPtr pDevice,
 				      &xglxKeySyms,
 				      xglxModMap,
 				      xglxBell,
-				      xglKbdCtrl);
+					  xglxKbdCtrl);
+      }
 
+#ifdef _XSERVER64
+      xfree (xkeyMap);
+#else
       XFree (xkeyMap);
+#endif
 
       if (!ret)
 	  return BadImplementation;
+
     } break;
     case DEVICE_ON: 
 	pDev->on = TRUE;
@@ -837,6 +1314,9 @@ xglxUseMsg (void)
     ErrorF ("-fullscreen            run fullscreen\n");
     ErrorF ("-display string        display name of the real server\n");
     ErrorF ("-softcursor            force software cursor\n");
+
+    if (!xDisplayName)
+	xglxUseXorgMsg ();
 }
 
 int
@@ -844,6 +1324,46 @@ xglxProcessArgument (int  argc,
 		     char **argv,
 		     int  i)
 {
+    static Bool checkDisplayName = FALSE;
+
+    if (!checkDisplayName)
+    {
+	char *display = ":0";
+	int  j;
+
+	for (j = i; j < argc; j++)
+	{
+	    if (!strcmp (argv[j], "-display"))
+	    {
+		if (++j < argc)
+		    xDisplayName = argv[j];
+
+		break;
+	    }
+	    else if (argv[j][0] == ':')
+	    {
+		display = argv[j];
+	    }
+	}
+
+	if (!xDisplayName)
+	    xDisplayName = getenv ("DISPLAY");
+
+	if (xDisplayName)
+	{
+	    int n;
+
+	    n = strspn (xDisplayName, ":0123456789");
+	    if (strncmp (xDisplayName, display, n) == 0)
+		xDisplayName = 0;
+	}
+
+	if (xDisplayName)
+	    fullscreen = FALSE;
+
+	checkDisplayName = TRUE;
+    }
+
     if (!strcmp (argv[i], "-screen"))
     {
 	if ((i + 1) < argc)
@@ -860,12 +1380,11 @@ xglxProcessArgument (int  argc,
 	fullscreen = TRUE;
 	return 1;
     }
-    if (!strcmp (argv[i], "-display"))
+    else if (!strcmp (argv[i], "-display"))
     {
-	if (++i < argc) {
-	    xDisplayName = argv[i];
+	if (++i < argc)
 	    return 2;
-	}
+
 	return 0;
     }
     else if (!strcmp (argv[i], "-softcursor"))
@@ -873,6 +1392,10 @@ xglxProcessArgument (int  argc,
 	softCursor = TRUE;
 	return 1;
     }
+    else if (!xDisplayName)
+    {
+	return xglxProcessXorgArgument (argc, argv, i);
+    }
 
     return 0;
 }
@@ -880,10 +1403,11 @@ xglxProcessArgument (int  argc,
 void
 xglxAbort (void)
 {
+    xglxAbortXorg ();
 }
 
 void
-xglxGiveUp ()
+xglxGiveUp (void)
 {
     AbortDDX ();
 }
@@ -913,7 +1437,7 @@ xglxCreateARGBCursor (ScreenPtr pScreen,
 		      CursorPtr pCursor)
 {
     Pixmap	      xpixmap;
-    GC		      xgc;
+    XlibGC	      xgc;
     XImage	      *ximage;
     XRenderPictFormat *xformat;
     Picture	      xpicture;
