diff --git a/hw/dmx/glxProxy/glxsingle.c b/hw/dmx/glxProxy/glxsingle.c
index 33cc612..63786cf 100644
--- a/hw/dmx/glxProxy/glxsingle.c
+++ b/hw/dmx/glxProxy/glxsingle.c
@@ -82,14 +82,14 @@
 #define X_GLXSingle 0   /* needed by GetReqExtra */
 
 extern Display *GetBackEndDisplay( __GLXclientState *cl, int s );
-extern int GetCurrentBackEndTag(__GLXclientState *cl, GLXContextTag tag, int s);
+extern int GetCurrentBackEndTag(__GLXclientState * cl, GLXContextTag tag,
+                                int s);
 
 static int swap_vec_element_size = 0;
 
-static void SendSwappedReply( ClientPtr client,
-                              xGLXSingleReply *reply, 
-			      char *buf,
-			      int   buf_size )
+static void
+SendSwappedReply(ClientPtr client,
+                 xGLXSingleReply * reply, char *buf, int buf_size)
 {
    __GLX_DECLARE_SWAP_VARIABLES;
    __GLX_SWAP_SHORT(&reply->sequenceNumber);
@@ -153,7 +153,8 @@ static void SendSwappedReply( ClientPtr client,
 
 }
 
-int __glXForwardSingleReq( __GLXclientState *cl, GLbyte *pc )
+int
+__glXForwardSingleReq(__GLXclientState * cl, GLbyte * pc)
 {
    xGLXSingleReq *req = (xGLXSingleReq *)pc;
    xGLXSingleReq *be_req;
@@ -206,7 +207,8 @@ int __glXForwardSingleReq( __GLXclientState *cl, GLbyte *pc )
     return Success;
 }
 
-int __glXForwardPipe0WithReply( __GLXclientState *cl, GLbyte *pc )
+int
+__glXForwardPipe0WithReply(__GLXclientState * cl, GLbyte * pc)
 {
    ClientPtr client = cl->client;
    xGLXSingleReq *req = (xGLXSingleReq *)pc;
@@ -239,7 +241,8 @@ int __glXForwardPipe0WithReply( __GLXclientState *cl, GLbyte *pc )
     be_req->reqType = dmxScreen->glxMajorOpcode;
     be_req->glxCode = req->glxCode;
     be_req->length = req->length;
-    be_req->contextTag = GetCurrentBackEndTag(cl,req->contextTag,glxc->pScreen->myNum);
+    be_req->contextTag =
+        GetCurrentBackEndTag(cl, req->contextTag, glxc->pScreen->myNum);
     if (buf_size > 0) 
        _XSend(dpy, (const char *)pc, buf_size);
 
@@ -283,12 +286,14 @@ int __glXForwardPipe0WithReply( __GLXclientState *cl, GLbyte *pc )
 	  WriteToClient(client, be_buf_size, (char *)be_buf);
     }
 
-    if (be_buf_size > 0) free(be_buf);
+    if (be_buf_size > 0)
+        free(be_buf);
 
     return Success;
 }
 
-int __glXForwardAllWithReply( __GLXclientState *cl, GLbyte *pc )
+int
+__glXForwardAllWithReply(__GLXclientState * cl, GLbyte * pc)
 {
    ClientPtr client = cl->client;
    xGLXSingleReq *req = (xGLXSingleReq *)pc;
@@ -383,14 +388,17 @@ int __glXForwardAllWithReply( __GLXclientState *cl, GLbyte *pc )
 	  WriteToClient(client, be_buf_size, (char *)be_buf);
     }
 
-    if (be_buf_size > 0) free(be_buf);
+    if (be_buf_size > 0)
+        free(be_buf);
 
     return Success;
 }
 
-int __glXForwardSingleReqSwap( __GLXclientState *cl, GLbyte *pc )
+int
+__glXForwardSingleReqSwap(__GLXclientState * cl, GLbyte * pc)
 {
    xGLXSingleReq *req = (xGLXSingleReq *)pc;
+
    __GLX_DECLARE_SWAP_VARIABLES;
    __GLX_DECLARE_SWAP_ARRAY_VARIABLES;
 
@@ -406,15 +414,18 @@ int __glXForwardSingleReqSwap( __GLXclientState *cl, GLbyte *pc )
    if (req->length > sz_xGLXSingleReq/4) {
       int *data = (int *)(req+1);
       int count = req->length - sz_xGLXSingleReq/4;
+
       __GLX_SWAP_INT_ARRAY(data, count );
    }
 
    return( __glXForwardSingleReq( cl, pc ) );
 }
 
-int __glXForwardPipe0WithReplySwap( __GLXclientState *cl, GLbyte *pc )
+int
+__glXForwardPipe0WithReplySwap(__GLXclientState * cl, GLbyte * pc)
 {
    xGLXSingleReq *req = (xGLXSingleReq *)pc;
+
    __GLX_DECLARE_SWAP_VARIABLES;
    __GLX_DECLARE_SWAP_ARRAY_VARIABLES;
 
@@ -430,15 +441,18 @@ int __glXForwardPipe0WithReplySwap( __GLXclientState *cl, GLbyte *pc )
    if (req->length > sz_xGLXSingleReq/4) {
       int *data = (int *)(req+1);
       int count = req->length - sz_xGLXSingleReq/4;
+
       __GLX_SWAP_INT_ARRAY(data, count );
    }
 
    return( __glXForwardPipe0WithReply( cl, pc ) );
 }
 
-int __glXForwardPipe0WithReplySwapsv( __GLXclientState *cl, GLbyte *pc )
+int
+__glXForwardPipe0WithReplySwapsv(__GLXclientState * cl, GLbyte * pc)
 {
    xGLXSingleReq *req = (xGLXSingleReq *)pc;
+
    __GLX_DECLARE_SWAP_VARIABLES;
    __GLX_DECLARE_SWAP_ARRAY_VARIABLES;
 
@@ -454,16 +468,18 @@ int __glXForwardPipe0WithReplySwapsv( __GLXclientState *cl, GLbyte *pc )
    if (req->length > sz_xGLXSingleReq/4) {
       int *data = (int *)(req+1);
       int count = req->length - sz_xGLXSingleReq/4;
+
       __GLX_SWAP_INT_ARRAY(data, count );
    }
 
-
    return( __glXForwardPipe0WithReply( cl, pc ) );
 }
 
-int __glXForwardPipe0WithReplySwapiv( __GLXclientState *cl, GLbyte *pc )
+int
+__glXForwardPipe0WithReplySwapiv(__GLXclientState * cl, GLbyte * pc)
 {
    xGLXSingleReq *req = (xGLXSingleReq *)pc;
+
    __GLX_DECLARE_SWAP_VARIABLES;
    __GLX_DECLARE_SWAP_ARRAY_VARIABLES;
 
@@ -479,16 +495,18 @@ int __glXForwardPipe0WithReplySwapiv( __GLXclientState *cl, GLbyte *pc )
    if (req->length > sz_xGLXSingleReq/4) {
       int *data = (int *)(req+1);
       int count = req->length - sz_xGLXSingleReq/4;
+
       __GLX_SWAP_INT_ARRAY(data, count );
    }
 
-
    return( __glXForwardPipe0WithReply( cl, pc ) );
 }
 
-int __glXForwardPipe0WithReplySwapdv( __GLXclientState *cl, GLbyte *pc )
+int
+__glXForwardPipe0WithReplySwapdv(__GLXclientState * cl, GLbyte * pc)
 {
    xGLXSingleReq *req = (xGLXSingleReq *)pc;
+
    __GLX_DECLARE_SWAP_VARIABLES;
    __GLX_DECLARE_SWAP_ARRAY_VARIABLES;
 
@@ -504,16 +522,18 @@ int __glXForwardPipe0WithReplySwapdv( __GLXclientState *cl, GLbyte *pc )
    if (req->length > sz_xGLXSingleReq/4) {
       int *data = (int *)(req+1);
       int count = req->length - sz_xGLXSingleReq/4;
+
       __GLX_SWAP_INT_ARRAY(data, count );
    }
 
-
    return( __glXForwardPipe0WithReply( cl, pc ) );
 }
 
-int __glXForwardAllWithReplySwap( __GLXclientState *cl, GLbyte *pc )
+int
+__glXForwardAllWithReplySwap(__GLXclientState * cl, GLbyte * pc)
 {
    xGLXSingleReq *req = (xGLXSingleReq *)pc;
+
    __GLX_DECLARE_SWAP_VARIABLES;
    __GLX_DECLARE_SWAP_ARRAY_VARIABLES;
 
@@ -529,16 +549,18 @@ int __glXForwardAllWithReplySwap( __GLXclientState *cl, GLbyte *pc )
    if (req->length > sz_xGLXSingleReq/4) {
       int *data = (int *)(req+1);
       int count = req->length - sz_xGLXSingleReq/4;
+
       __GLX_SWAP_INT_ARRAY(data, count );
    }
 
-
    return( __glXForwardAllWithReply( cl, pc ) );
 }
 
-int __glXForwardAllWithReplySwapsv( __GLXclientState *cl, GLbyte *pc )
+int
+__glXForwardAllWithReplySwapsv(__GLXclientState * cl, GLbyte * pc)
 {
    xGLXSingleReq *req = (xGLXSingleReq *)pc;
+
    __GLX_DECLARE_SWAP_VARIABLES;
    __GLX_DECLARE_SWAP_ARRAY_VARIABLES;
 
@@ -554,16 +576,18 @@ int __glXForwardAllWithReplySwapsv( __GLXclientState *cl, GLbyte *pc )
    if (req->length > sz_xGLXSingleReq/4) {
       int *data = (int *)(req+1);
       int count = req->length - sz_xGLXSingleReq/4;
+
       __GLX_SWAP_INT_ARRAY(data, count );
    }
 
-
    return( __glXForwardAllWithReply( cl, pc ) );
 }
 
-int __glXForwardAllWithReplySwapiv( __GLXclientState *cl, GLbyte *pc )
+int
+__glXForwardAllWithReplySwapiv(__GLXclientState * cl, GLbyte * pc)
 {
    xGLXSingleReq *req = (xGLXSingleReq *)pc;
+
    __GLX_DECLARE_SWAP_VARIABLES;
    __GLX_DECLARE_SWAP_ARRAY_VARIABLES;
 
@@ -579,16 +603,18 @@ int __glXForwardAllWithReplySwapiv( __GLXclientState *cl, GLbyte *pc )
    if (req->length > sz_xGLXSingleReq/4) {
       int *data = (int *)(req+1);
       int count = req->length - sz_xGLXSingleReq/4;
+
       __GLX_SWAP_INT_ARRAY(data, count );
    }
 
-
    return( __glXForwardAllWithReply( cl, pc ) );
 }
 
-int __glXForwardAllWithReplySwapdv( __GLXclientState *cl, GLbyte *pc )
+int
+__glXForwardAllWithReplySwapdv(__GLXclientState * cl, GLbyte * pc)
 {
    xGLXSingleReq *req = (xGLXSingleReq *)pc;
+
    __GLX_DECLARE_SWAP_VARIABLES;
    __GLX_DECLARE_SWAP_ARRAY_VARIABLES;
 
@@ -604,14 +630,15 @@ int __glXForwardAllWithReplySwapdv( __GLXclientState *cl, GLbyte *pc )
    if (req->length > sz_xGLXSingleReq/4) {
       int *data = (int *)(req+1);
       int count = req->length - sz_xGLXSingleReq/4;
+
       __GLX_SWAP_INT_ARRAY(data, count );
    }
 
-
    return( __glXForwardAllWithReply( cl, pc ) );
 }
 
-static GLint __glReadPixels_size(GLenum format, GLenum type, GLint w, GLint h, 
+static GLint
+__glReadPixels_size(GLenum format, GLenum type, GLint w, GLint h,
                           int *elementbits_return, int *rowbytes_return )
 {
     GLint elements, esize;
@@ -661,10 +688,13 @@ static GLint __glReadPixels_size(GLenum format, GLenum type, GLint w, GLint h,
 	   if (padding) {
 	      rowsize += 4 - padding;
 	   }
-	   if (elementbits_return) *elementbits_return = elements;
-	   if (rowbytes_return) *rowbytes_return = rowsize;
+            if (elementbits_return)
+                *elementbits_return = elements;
+            if (rowbytes_return)
+                *rowbytes_return = rowsize;
 	   return rowsize * h;
-	} else {
+        }
+        else {
 	   return -1;
 	}
       case GL_BYTE:
@@ -710,13 +740,16 @@ static GLint __glReadPixels_size(GLenum format, GLenum type, GLint w, GLint h,
 	rowsize += 4 - padding;
     }
 
-    if (elementbits_return) *elementbits_return = esize*elements*8;
-    if (rowbytes_return) *rowbytes_return = rowsize;
+    if (elementbits_return)
+        *elementbits_return = esize * elements * 8;
+    if (rowbytes_return)
+        *rowbytes_return = rowsize;
 
     return rowsize * h;
 }
 
-static int intersectRect( int x1, int x2, int y1, int y2,
+static int
+intersectRect(int x1, int x2, int y1, int y2,
                     int X1, int X2, int Y1, int Y2,
 		    int *ix1, int *ix2, int *iy1, int *iy2 )
 {
@@ -741,7 +774,8 @@ static int intersectRect( int x1, int x2, int y1, int y2,
 
 }
 
-int __glXDisp_ReadPixels(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_ReadPixels(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq *req = (xGLXSingleReq *)pc;
     xGLXSingleReq *be_req;
@@ -763,6 +797,7 @@ int __glXDisp_ReadPixels(__GLXclientState *cl, GLbyte *pc)
     int win_x1, win_x2;
     int win_y1, win_y2;
     int ebits, rowsize;
+
     __GLX_DECLARE_SWAP_VARIABLES;
 
     if (client->swapped) {
@@ -802,7 +837,8 @@ int __glXDisp_ReadPixels(__GLXclientState *cl, GLbyte *pc)
        swapBytes = !swapBytes;
     }
 
-    buf_size = __glReadPixels_size(format,type,width,height, &ebits, &rowsize);
+    buf_size =
+        __glReadPixels_size(format, type, width, height, &ebits, &rowsize);
     if (buf_size > 0) {
        buf = (char *) malloc( buf_size );
        if ( !buf ) {
@@ -861,7 +897,8 @@ int __glXDisp_ReadPixels(__GLXclientState *cl, GLbyte *pc)
    	     GetReqExtra(GLXSingle,__GLX_PAD(26),be_req);
    	     be_req->reqType = dmxScreen->glxMajorOpcode;
    	     be_req->glxCode = X_GLsop_ReadPixels;
-   	     be_req->contextTag = GetCurrentBackEndTag(cl,req->contextTag,s);
+                be_req->contextTag =
+                    GetCurrentBackEndTag(cl, req->contextTag, s);
    	     be_pc = ((GLbyte *)(be_req) + sz_xGLXSingleReq);
 
    	     sx = wx1 - pDraw->x;
@@ -892,7 +929,8 @@ int __glXDisp_ReadPixels(__GLXclientState *cl, GLbyte *pc)
 		   /* reply buffer */
 		   if ( type != GL_BITMAP ) {
 		      int pbytes = ebits / 8;
-		      char *dst = buf + (sy-y)*rowsize + (sx-x)*pbytes;
+                            char *dst =
+                                buf + (sy - y) * rowsize + (sx - x) * pbytes;
 		      char *src = be_buf;
 		      int pad = (pbytes * sw) % 4;
 		      int r;
@@ -908,6 +946,7 @@ int __glXDisp_ReadPixels(__GLXclientState *cl, GLbyte *pc)
 		      int r;
 		      int src_rowsize = bits_to_bytes(sw * ebits);
 		      int src_pad = src_rowsize % 4;
+
                       if ( src_pad ) {
 			 src_rowsize += (4 - src_pad);
 		      }
@@ -915,7 +954,8 @@ int __glXDisp_ReadPixels(__GLXclientState *cl, GLbyte *pc)
 		      for (r=0; r<sh; r++) {
 			 unsigned char dst_mask = 0x80 >> (sx % 8);
 			 unsigned char src_mask = 0x80;
-			 char *dst = buf + (sy-y+r)*rowsize + (sx-x)/8;
+                                char *dst =
+                                    buf + (sy - y + r) * rowsize + (sx - x) / 8;
 			 char *src = be_buf + r*src_rowsize;
 			 int b;
 
@@ -927,13 +967,15 @@ int __glXDisp_ReadPixels(__GLXclientState *cl, GLbyte *pc)
 			       *dst &= ~dst_mask;
 			    }
 
-			    if (dst_mask > 1) dst_mask >>= 1;
+                                    if (dst_mask > 1)
+                                        dst_mask >>= 1;
 			    else { 
 			       dst_mask = 0x80;
 			       dst++;
 			    }
 
-			    if (src_mask > 1) src_mask >>= 1;
+                                    if (src_mask > 1)
+                                        src_mask >>= 1;
 			    else {
 			       src_mask = 0x80;
 			       src++;
@@ -980,7 +1022,8 @@ int __glXDisp_ReadPixels(__GLXclientState *cl, GLbyte *pc)
     return Success;
 }
 
-int __glXDispSwap_GetTexImage(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetTexImage(__GLXclientState * cl, GLbyte * pc)
 {
     __GLX_DECLARE_SWAP_VARIABLES;
     GLbyte *lpc = pc;
@@ -997,7 +1040,8 @@ int __glXDispSwap_GetTexImage(__GLXclientState *cl, GLbyte *pc)
     return( __glXForwardPipe0WithReplySwap( cl, pc ) );
 }
 
-int __glXDispSwap_GetColorTable(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetColorTable(__GLXclientState * cl, GLbyte * pc)
 {
     __GLX_DECLARE_SWAP_VARIABLES;
     GLbyte *lpc = pc;
@@ -1012,5 +1056,3 @@ int __glXDispSwap_GetColorTable(__GLXclientState *cl, GLbyte *pc)
 
     return( __glXForwardPipe0WithReplySwap( cl, pc ) );
 }
-
-
