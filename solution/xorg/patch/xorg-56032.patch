diff --git a/miext/rootless/rootlessScreen.c b/miext/rootless/rootlessScreen.c
index c855706..ecc72ea 100644
--- a/miext/rootless/rootlessScreen.c
+++ b/miext/rootless/rootlessScreen.c
@@ -29,7 +29,6 @@
  * use or other dealings in this Software without prior written authorization.
  */
 
-
 #ifdef HAVE_DIX_CONFIG_H
 #include <dix-config.h>
 #endif
@@ -111,7 +110,6 @@ RootlessUpdateScreenPixmap(ScreenPtr pScreen)
     }
 }
 
-
 /*
  * RootlessCreateScreenResources
  *  Rootless implementations typically set a null framebuffer pointer, which
@@ -139,7 +137,6 @@ RootlessCreateScreenResources(ScreenPtr pScreen)
     return ret;
 }
 
-
 static Bool
 RootlessCloseScreen(int i, ScreenPtr pScreen)
 {
@@ -160,12 +157,12 @@ RootlessCloseScreen(int i, ScreenPtr pScreen)
     return pScreen->CloseScreen(i, pScreen);
 }
 
-
 static void
 RootlessGetImage(DrawablePtr pDrawable, int sx, int sy, int w, int h,
                  unsigned int format, unsigned long planeMask, char *pdstLine)
 {
     ScreenPtr pScreen = pDrawable->pScreen;
+
     SCREEN_UNWRAP(pScreen, GetImage);
 
     if (pDrawable->type == DRAWABLE_WINDOW) {
@@ -214,7 +211,6 @@ out:
     SCREEN_WRAP(pScreen, GetImage);
 }
 
-
 /*
  * RootlessSourceValidate
  *  CopyArea and CopyPlane use a GC tied to the destination drawable.
@@ -229,10 +225,12 @@ RootlessSourceValidate(DrawablePtr pDrawable, int x, int y, int w, int h,
     SCREEN_UNWRAP(pDrawable->pScreen, SourceValidate);
     if (pDrawable->type == DRAWABLE_WINDOW) {
         WindowPtr pWin = (WindowPtr)pDrawable;
+
         RootlessStartDrawing(pWin);
     }
     if (pDrawable->pScreen->SourceValidate) {
-        pDrawable->pScreen->SourceValidate(pDrawable, x, y, w, h, subWindowMode);
+        pDrawable->pScreen->SourceValidate(pDrawable, x, y, w, h,
+                                           subWindowMode);
     }
     SCREEN_WRAP(pDrawable->pScreen, SourceValidate);
 }
@@ -247,8 +245,9 @@ RootlessComposite(CARD8 op, PicturePtr pSrc, PicturePtr pMask, PicturePtr pDst,
     WindowPtr srcWin, dstWin, maskWin = NULL;
 
     if (pMask) {                        // pMask can be NULL
-        maskWin = (pMask->pDrawable && pMask->pDrawable->type == DRAWABLE_WINDOW) ?
-                  (WindowPtr)pMask->pDrawable : NULL;
+        maskWin = (pMask->pDrawable &&
+                   pMask->pDrawable->type ==
+                   DRAWABLE_WINDOW) ? (WindowPtr) pMask->pDrawable : NULL;
     }
     srcWin  = (pSrc->pDrawable && pSrc->pDrawable->type  == DRAWABLE_WINDOW) ?
               (WindowPtr)pSrc->pDrawable  :  NULL;
@@ -266,8 +265,7 @@ RootlessComposite(CARD8 op, PicturePtr pSrc, PicturePtr pMask, PicturePtr pDst,
         RootlessStartDrawing(dstWin);
 
     ps->Composite(op, pSrc, pMask, pDst,
-                  xSrc, ySrc, xMask, yMask,
-                  xDst, yDst, width, height);
+                  xSrc, ySrc, xMask, yMask, xDst, yDst, width, height);
 
     if (dstWin  && IsFramedWindow(dstWin)) {
         RootlessDamageRect(dstWin, xDst, yDst, width, height);
@@ -277,7 +275,6 @@ RootlessComposite(CARD8 op, PicturePtr pSrc, PicturePtr pMask, PicturePtr pDst,
     // SCREEN_WRAP(ps, Composite);
 }
 
-
 static void
 RootlessGlyphs(CARD8 op, PicturePtr pSrc, PicturePtr pDst,
                PictFormatPtr maskFormat, INT16 xSrc, INT16 ySrc,
@@ -295,8 +292,10 @@ RootlessGlyphs(CARD8 op, PicturePtr pSrc, PicturePtr pDst,
     dstWin = (pDst->pDrawable->type == DRAWABLE_WINDOW) ?
              (WindowPtr)pDst->pDrawable  :  NULL;
 
-    if (srcWin && IsFramedWindow(srcWin)) RootlessStartDrawing(srcWin);
-    if (dstWin && IsFramedWindow(dstWin)) RootlessStartDrawing(dstWin);
+    if (srcWin && IsFramedWindow(srcWin))
+        RootlessStartDrawing(srcWin);
+    if (dstWin && IsFramedWindow(dstWin))
+        RootlessStartDrawing(dstWin);
 
     //SCREEN_UNWRAP(ps, Glyphs);
     ps->Glyphs = SCREENREC(pScreen)->Glyphs;
@@ -356,7 +355,6 @@ RootlessGlyphs(CARD8 op, PicturePtr pSrc, PicturePtr pDst,
     }
 }
 
-
 /*
  * RootlessValidateTree
  *  ValidateTree is modified in two ways:
@@ -378,7 +376,8 @@ RootlessValidateTree(WindowPtr pParent, WindowPtr pChild, VTKind kind)
     if (IsRoot(pParent)) {
         RL_DEBUG_MSG("custom ");
         result = RootlessMiValidateTree(pParent, pChild, kind);
-    } else {
+    }
+    else {
         HUGE_ROOT(pParent);
         result = pScreen->ValidateTree(pParent, pChild, kind);
         NORMAL_ROOT(pParent);
@@ -390,7 +389,6 @@ RootlessValidateTree(WindowPtr pParent, WindowPtr pChild, VTKind kind)
     return result;
 }
 
-
 /*
  * RootlessMarkOverlappedWindows
  *  MarkOverlappedWindows is modified to ignore overlapping
@@ -403,6 +401,7 @@ RootlessMarkOverlappedWindows(WindowPtr pWin, WindowPtr pFirst,
     RegionRec saveRoot;
     Bool result;
     ScreenPtr pScreen = pWin->drawable.pScreen;
+
     SCREEN_UNWRAP(pScreen, MarkOverlappedWindows);
     RL_DEBUG_MSG("MARKOVERLAPPEDWINDOWS start ");
 
@@ -426,7 +425,8 @@ RootlessMarkOverlappedWindows(WindowPtr pWin, WindowPtr pFirst,
 
         RL_DEBUG_MSG("is top level! ");
         /* single layered systems are easy */
-        if (ppLayerWin) *ppLayerWin = pWin;
+        if (ppLayerWin)
+            *ppLayerWin = pWin;
 
         if (pWin == pFirst) {
             /* Blindly mark pWin and all of its inferiors.   This is a slight
@@ -465,7 +465,9 @@ RootlessMarkOverlappedWindows(WindowPtr pWin, WindowPtr pFirst,
     return result;
 }
 
-static void expose_1 (WindowPtr pWin) {
+static void
+expose_1(WindowPtr pWin)
+{
     WindowPtr pChild;
     
     if (!pWin->realized)
@@ -490,7 +492,6 @@ RootlessScreenExpose (ScreenPtr pScreen)
     expose_1 (pScreen->root);
 }
 
-
 ColormapPtr
 RootlessGetColormap (ScreenPtr pScreen)
 {
@@ -552,7 +553,6 @@ RootlessStoreColors (ColormapPtr pMap, int ndef, xColorItem *pdef)
   SCREEN_WRAP(pScreen, StoreColors);
 }
 
-
 static CARD32
 RootlessRedisplayCallback(OsTimerPtr timer, CARD32 time, void *arg)
 {
@@ -576,7 +576,6 @@ RootlessRedisplayCallback(OsTimerPtr timer, CARD32 time, void *arg)
     return ROOTLESS_REDISPLAY_DELAY;
 }
 
-
 /*
  * RootlessQueueRedisplay
  *  Queue a redisplay after a timer delay to ensure we do not redisplay
@@ -594,12 +593,10 @@ RootlessQueueRedisplay(ScreenPtr pScreen)
 
     screenRec->redisplay_timer = TimerSet(screenRec->redisplay_timer,
                                           0, ROOTLESS_REDISPLAY_DELAY,
-                                          RootlessRedisplayCallback,
-                                          screenRec);
+                                          RootlessRedisplayCallback, screenRec);
     screenRec->redisplay_timer_set = TRUE;
 }
 
-
 /*
  * RootlessBlockHandler
  *  If the redisplay timer has expired, flush drawing before blocking
@@ -618,30 +615,31 @@ RootlessBlockHandler(pointer pbdata, OSTimePtr pTimeout, pointer pReadmask)
     }
 }
 
-
 static void
 RootlessWakeupHandler(pointer data, int i, pointer LastSelectMask)
 {
     // nothing here
 }
 
-
 static Bool
 RootlessAllocatePrivates(ScreenPtr pScreen)
 {
     RootlessScreenRec *s;
 
-    if (!dixRegisterPrivateKey(&rootlessGCPrivateKeyRec, PRIVATE_GC, sizeof(RootlessGCRec)))
+    if (!dixRegisterPrivateKey
+        (&rootlessGCPrivateKeyRec, PRIVATE_GC, sizeof(RootlessGCRec)))
         return FALSE;
     if (!dixRegisterPrivateKey(&rootlessScreenPrivateKeyRec, PRIVATE_SCREEN, 0))
         return FALSE;
     if (!dixRegisterPrivateKey(&rootlessWindowPrivateKeyRec, PRIVATE_WINDOW, 0))
         return FALSE;
-    if (!dixRegisterPrivateKey(&rootlessWindowOldPixmapPrivateKeyRec, PRIVATE_WINDOW, 0))
+    if (!dixRegisterPrivateKey
+        (&rootlessWindowOldPixmapPrivateKeyRec, PRIVATE_WINDOW, 0))
         return FALSE;
 
     s = malloc(sizeof(RootlessScreenRec));
-    if (! s) return FALSE;
+    if (!s)
+        return FALSE;
     SETSCREENREC(pScreen, s);
 
     s->pixmap_data = NULL;
@@ -653,7 +651,6 @@ RootlessAllocatePrivates(ScreenPtr pScreen)
     return TRUE;
 }
 
-
 static void
 RootlessWrap(ScreenPtr pScreen)
 {
@@ -696,6 +693,7 @@ RootlessWrap(ScreenPtr pScreen)
     {
         // Composite and Glyphs don't use normal screen wrapping
         PictureScreenPtr ps = GetPictureScreen(pScreen);
+
         s->Composite = ps->Composite;
         ps->Composite = RootlessComposite;
         s->Glyphs = ps->Glyphs;
@@ -707,13 +705,13 @@ RootlessWrap(ScreenPtr pScreen)
 #undef WRAP
 }
 
-
 /*
  * RootlessInit
  *  Called by the rootless implementation to initialize the rootless layer.
  *  Rootless wraps lots of stuff and needs a bunch of devPrivates.
  */
-Bool RootlessInit(ScreenPtr pScreen, RootlessFrameProcsPtr procs)
+Bool
+RootlessInit(ScreenPtr pScreen, RootlessFrameProcsPtr procs)
 {
     RootlessScreenRec *s;
 
@@ -730,24 +728,23 @@ Bool RootlessInit(ScreenPtr pScreen, RootlessFrameProcsPtr procs)
 
     if (!RegisterBlockAndWakeupHandlers(RootlessBlockHandler,
                                         RootlessWakeupHandler,
-                                        (pointer) pScreen))
-    {
+                                        (pointer) pScreen)) {
         return FALSE;
     }
 
     return TRUE;
 }
 
-void RootlessUpdateRooted (Bool state) {
+void
+RootlessUpdateRooted(Bool state)
+{
     int i;
     
-    if (!state)
-    {
+    if (!state) {
         for (i = 0; i < screenInfo.numScreens; i++)
             RootlessDisableRoot (screenInfo.screens[i]);
     }
-    else
-    {
+    else {
         for (i = 0; i < screenInfo.numScreens; i++)
             RootlessEnableRoot (screenInfo.screens[i]);
     }
