diff --git a/hw/xquartz/quartz.c b/hw/xquartz/quartz.c
index c395b42..e4578cc 100644
--- a/hw/xquartz/quartz.c
+++ b/hw/xquartz/quartz.c
@@ -96,9 +96,8 @@ int32_t XQuartzShieldingWindowLevel = 0;
  * QuartzAddScreen
  *  Do mode dependent initialization of each screen for Quartz.
  */
-Bool QuartzAddScreen(
-    int index,
-    ScreenPtr pScreen)
+Bool
+QuartzAddScreen(int index, ScreenPtr pScreen)
 {
     // allocate space for private per screen Quartz specific storage
     QuartzScreenPtr displayInfo = calloc(sizeof(QuartzScreenRec), 1);
@@ -110,14 +109,12 @@ Bool QuartzAddScreen(
     return quartzProcs->AddScreen(index, pScreen);
 }
 
-
 /*
  * QuartzSetupScreen
  *  Finalize mode specific setup of each screen.
  */
-Bool QuartzSetupScreen(
-    int index,
-    ScreenPtr pScreen)
+Bool
+QuartzSetupScreen(int index, ScreenPtr pScreen)
 {
     // do Quartz mode specific setup
     if (! quartzProcs->SetupScreen(index, pScreen))
@@ -137,14 +134,12 @@ Bool QuartzSetupScreen(
     return TRUE;
 }
 
-
 /*
  * QuartzInitOutput
  *  Quartz display initialization.
  */
-void QuartzInitOutput(
-    int argc,
-    char **argv )
+void
+QuartzInitOutput(int argc, char **argv)
 {
     /* For XQuartz, we want to just use the default signal handler to work better with CrashTracer */
     signal(SIGSEGV, SIG_DFL);
@@ -167,9 +162,7 @@ void QuartzInitOutput(
 #endif
 
     if (!RegisterBlockAndWakeupHandlers(QuartzBlockHandler,
-                                        QuartzWakeupHandler,
-                                        NULL))
-    {
+                                        QuartzWakeupHandler, NULL)) {
         FatalError("Could not register block and wakeup handlers.");
     }
 
@@ -180,14 +173,12 @@ void QuartzInitOutput(
     quartzProcs->DisplayInit();
 }
 
-
 /*
  * QuartzInitInput
  *  Inform the main thread the X server is ready to handle events.
  */
-void QuartzInitInput(
-    int argc,
-    char **argv )
+void
+QuartzInitInput(int argc, char **argv)
 {
     X11ApplicationSetCanQuit(0);
     X11ApplicationServerReady();
@@ -196,16 +187,16 @@ void QuartzInitInput(
         quartzProcs->InitInput(argc, argv);
 }
 
-
-void QuartzUpdateScreens(void) {
+void
+QuartzUpdateScreens(void)
+{
     ScreenPtr pScreen;
     WindowPtr pRoot;
     int x, y, width, height, sx, sy;
     xEvent e;
     BoxRec bounds;
     
-    if (noPseudoramiXExtension || screenInfo.numScreens != 1)
-    {
+    if (noPseudoramiXExtension || screenInfo.numScreens != 1) {
         /* FIXME: if not using Xinerama, we have multiple screens, and
          to do this properly may need to add or remove screens. Which
          isn't possible. So don't do anything. Another reason why
@@ -250,7 +241,10 @@ void QuartzUpdateScreens(void) {
     inputInfo.pointer->spriteInfo->sprite->physLimits = bounds;
     inputInfo.pointer->spriteInfo->sprite->hotLimits = bounds;
 
-    DEBUG_LOG("Root Window: %dx%d @ (%d, %d) darwinMainScreen (%d, %d) xy (%d, %d) dixScreenOrigins (%d, %d)\n", width, height, x - sx, y - sy, darwinMainScreenX, darwinMainScreenY, x, y, pScreen->x, pScreen->y);
+    DEBUG_LOG
+        ("Root Window: %dx%d @ (%d, %d) darwinMainScreen (%d, %d) xy (%d, %d) dixScreenOrigins (%d, %d)\n",
+         width, height, x - sx, y - sy, darwinMainScreenX, darwinMainScreenY, x,
+         y, pScreen->x, pScreen->y);
 
     /* Send an event for the root reconfigure */
     e.u.u.type = ConfigureNotify;
@@ -273,13 +267,18 @@ void QuartzUpdateScreens(void) {
     RRScreenSizeNotify(pScreen);
 }
 
-static void pokeActivityCallback(CFRunLoopTimerRef timer, void *info) {
+static void
+pokeActivityCallback(CFRunLoopTimerRef timer, void *info)
+{
     UpdateSystemActivity(OverallAct);
 }
 
-static void QuartzScreenSaver(int state) {
+static void
+QuartzScreenSaver(int state)
+{
     static CFRunLoopTimerRef pokeActivityTimer = NULL;
-    static CFRunLoopTimerContext pokeActivityContext = { 0, NULL, NULL, NULL, NULL };
+    static CFRunLoopTimerContext pokeActivityContext =
+        { 0, NULL, NULL, NULL, NULL };
     static OSSpinLock pokeActivitySpinLock = OS_SPINLOCK_INIT;
 
     OSSpinLockLock(&pokeActivitySpinLock);
@@ -291,23 +290,29 @@ static void QuartzScreenSaver(int state) {
         CFRunLoopTimerInvalidate(pokeActivityTimer);
         CFRelease(pokeActivityTimer);
         pokeActivityTimer = NULL;
-    } else {
+    }
+    else {
         if(pokeActivityTimer != NULL)
             goto QuartzScreenSaverEnd;
         
-        pokeActivityTimer = CFRunLoopTimerCreate(NULL, CFAbsoluteTimeGetCurrent(), 30, 0, 0, pokeActivityCallback, &pokeActivityContext);
+        pokeActivityTimer =
+            CFRunLoopTimerCreate(NULL, CFAbsoluteTimeGetCurrent(), 30, 0, 0,
+                                 pokeActivityCallback, &pokeActivityContext);
         if(pokeActivityTimer == NULL) {
             ErrorF("Unable to create pokeActivityTimer.\n");
             goto QuartzScreenSaverEnd;
         }
 
-        CFRunLoopAddTimer(CFRunLoopGetMain(), pokeActivityTimer, kCFRunLoopCommonModes);
+        CFRunLoopAddTimer(CFRunLoopGetMain(), pokeActivityTimer,
+                          kCFRunLoopCommonModes);
     }
 QuartzScreenSaverEnd:
     OSSpinLockUnlock(&pokeActivitySpinLock);
 }
 
-void QuartzShowFullscreen(int state) {
+void
+QuartzShowFullscreen(int state)
+{
     int i;
     
     DEBUG_LOG("QuartzShowFullscreen: state=%d\n", state);
@@ -335,6 +340,7 @@ void QuartzShowFullscreen(int state) {
         RootlessShowAllWindows ();
         for (i=0; i < screenInfo.numScreens; i++) {
             ScreenPtr pScreen = screenInfo.screens[i];        
+
             RootlessRepositionWindows(pScreen);
             // JH: I don't think this is necessary, but keeping it here as a reminder
             //RootlessUpdateScreenPixmap(pScreen);
@@ -352,7 +358,9 @@ void QuartzShowFullscreen(int state) {
         xp_disable_hot_keys(XQuartzFullscreenVisible);
 }
 
-void QuartzSetRootless(Bool state) {    
+void
+QuartzSetRootless(Bool state)
+{
     DEBUG_LOG("QuartzSetRootless state=%d\n", state);
     
     if(XQuartzIsRootless == state)
@@ -370,7 +378,8 @@ void QuartzSetRootless(Bool state) {
 
     if(XQuartzIsRootless) {
         RootlessShowAllWindows();
-    } else {
+    }
+    else {
         RootlessHideAllWindows();
     }
 
@@ -387,7 +396,9 @@ void QuartzSetRootless(Bool state) {
  *  Calls mode specific screen resume to restore the X clip regions
  *  (if needed) and the X server cursor state.
  */
-void QuartzShow(void) {
+void
+QuartzShow(void)
+{
     int i;
 
     if (XQuartzServerVisible)
@@ -404,14 +415,14 @@ void QuartzShow(void) {
         QuartzShowFullscreen(TRUE);
 }
 
-
 /*
  * QuartzHide
  *  Remove the X server display from the screen. Does nothing if already
  *  hidden. Calls mode specific screen suspend to set X clip regions to
  *  prevent drawing (if needed) and restore the Aqua cursor.
  */
-void QuartzHide(void)
+void
+QuartzHide(void)
 {
     int i;
 
@@ -428,13 +439,12 @@ void QuartzHide(void)
     XQuartzServerVisible = FALSE;
 }
 
-
 /*
  * QuartzSetRootClip
  *  Enable or disable rendering to the X screen.
  */
-void QuartzSetRootClip(
-    BOOL enable)
+void
+QuartzSetRootClip(BOOL enable)
 {
     int i;
 
@@ -452,7 +462,9 @@ void QuartzSetRootClip(
  * QuartzSpaceChanged
  *  Unmap offscreen windows, map onscreen windows
  */
-void QuartzSpaceChanged(uint32_t space_id) {
+void
+QuartzSpaceChanged(uint32_t space_id)
+{
     /* Do something special here, so we don't depend on quartz-wm for spaces to work... */
     DEBUG_LOG("Space Changed (%u) ... do something interesting...\n", space_id);
 }
@@ -462,24 +474,28 @@ void QuartzSpaceChanged(uint32_t space_id) {
  *  Associate an X11 screen with one or more CoreGraphics display IDs by copying
  *  the list into a private array. Free the previously copied array, if present.
  */
-void QuartzCopyDisplayIDs(ScreenPtr pScreen,
-                          int displayCount, CGDirectDisplayID *displayIDs) {
+void
+QuartzCopyDisplayIDs(ScreenPtr pScreen,
+                     int displayCount, CGDirectDisplayID * displayIDs)
+{
     QuartzScreenPtr pQuartzScreen = QUARTZ_PRIV(pScreen);
 
     free(pQuartzScreen->displayIDs);
     if(displayCount) {
         size_t size = displayCount * sizeof(CGDirectDisplayID);
+
         pQuartzScreen->displayIDs = malloc(size);
         memcpy(pQuartzScreen->displayIDs, displayIDs, size);
-    } else {
+    }
+    else {
        pQuartzScreen->displayIDs = NULL;
     }
     pQuartzScreen->displayCount = displayCount;
 }
 
 void NSBeep(void);
-void DDXRingBell(
-    int volume,         // volume is % of max
+void
+DDXRingBell(int volume,         // volume is % of max
     int pitch,          // pitch is Hz
     int duration)       // duration is milliseconds
 {
