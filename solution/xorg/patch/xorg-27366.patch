diff --git a/mi/mispritest.h b/mi/mispritest.h
index 39875e0..8c8cd53 100644
--- a/mi/mispritest.h
+++ b/mi/mispritest.h
@@ -95,31 +95,25 @@ typedef struct {
 #define MASK_COLOR	1
 
 static int damageRegister = 0;
-/*
- * FIXME: MPX uses a bug at the moment. The semaphore system in place will
- * call miSpriteIsUpTRUE multiple times and thus DamageUnregister() will never
- * be called in miSpriteIsUpFALSE. 
- * This gets rid of cursor rendering artefacts but I don't know how this
- * affects applications.
- * Without any semaphore system in place DamageRegister will be called twice
- * and segfault.
- */
-#define miSpriteIsUpTRUE(pDevCursor, pScreen, pScreenPriv) if (!pDevCursor->isUp) { \
-    pDevCursor->isUp = TRUE; \
-    if (!damageRegister ) { \
-        DamageRegister (&(*pScreen->GetScreenPixmap) (pScreen)->drawable, pScreenPriv->pDamage); \
-    } \
-    damageRegister++; \
+
+#define miSpriteDisableDamage(pScreen, pScreenPriv) \
+    if (damageRegister) { \
+    DamageUnregister (&(*pScreen->GetScreenPixmap) (pScreen)->drawable, pScreenPriv->pDamage);  \
+    damageRegister = 0; \
 }
 
-#define miSpriteIsUpFALSE(pDevCursor, pScreen, pScreenPriv) if (pDevCursor->isUp) { \
-    damageRegister--; \
+#define miSpriteEnableDamage(pScreen, pScreenPriv) \
     if (!damageRegister) { \
-        DamageUnregister (&(*pScreen->GetScreenPixmap) (pScreen)->drawable, pScreenPriv->pDamage); \
-    } \
-    pDevCursor->isUp = FALSE; \
+    damageRegister = 1; \
+    DamageRegister (&(*pScreen->GetScreenPixmap) (pScreen)->drawable, pScreenPriv->pDamage); \
 }
 
+#define miSpriteIsUpTRUE(pDevCursor, pScreen, pScreenPriv) if (!pDevCursor->isUp)  \
+    pDevCursor->isUp = TRUE; 
+
+#define miSpriteIsUpFALSE(pDevCursor, pScreen, pScreenPriv) if (pDevCursor->isUp)  \
+    pDevCursor->isUp = FALSE; 
+
 /*
  * Overlap BoxPtr and Box elements
  */
