diff --git a/exa/exa_accel.c b/exa/exa_accel.c
index f865e23..5128986 100644
--- a/exa/exa_accel.c
+++ b/exa/exa_accel.c
@@ -25,7 +25,7 @@
 #ifdef HAVE_CONFIG_H
 #include <xorg-config.h>
 #endif
-#include "exaPriv.h"
+#include "exa_priv.h"
 #include <X11/fonts/fontstruct.h>
 #include "dixfontstr.h"
 #include "xf86str.h"
@@ -33,543 +33,7 @@
 #include "exa.h"
 #include "cw.h"
 
-#if DEBUG_MIGRATE
-#define DBG_MIGRATE(a) ErrorF a
-#else
-#define DBG_MIGRATE(a)
-#endif
-#if DEBUG_PIXMAP
-#define DBG_PIXMAP(a) ErrorF a
-#else
-#define DBG_PIXMAP(a)
-#endif
 #define STRACE
-#define TRACE
-
-static int exaGeneration;
-int exaScreenPrivateIndex;
-int exaPixmapPrivateIndex;
-
-#define EXA_PIXMAP_SCORE_MOVE_IN    10
-#define EXA_PIXMAP_SCORE_MAX	    20
-#define EXA_PIXMAP_SCORE_MOVE_OUT   -10
-#define EXA_PIXMAP_SCORE_MIN	    -20
-#define EXA_PIXMAP_SCORE_PINNED	    1000
-#define EXA_PIXMAP_SCORE_INIT	    1001
-
-/* Returns the offset (in bytes) within the framebuffer of the beginning of the
- * given pixmap.  May need to be extended in the future if we grow support for
- * having multiple card-accessible areas at different offsets.
- */
-unsigned long
-exaGetPixmapOffset(PixmapPtr pPix)
-{
-    ExaScreenPriv (pPix->drawable.pScreen);
-
-    return ((unsigned long)pPix->devPrivate.ptr -
-	(unsigned long)pExaScr->info->card.memoryBase);
-}
-
-/* Returns the pitch in bytes of the given pixmap. */
-unsigned long
-exaGetPixmapPitch(PixmapPtr pPix)
-{
-    return pPix->devKind;
-}
-
-/* Returns the size in bytes of the given pixmap in
- * video memory. Only valid when the vram storage has been
- * allocated
- */
-unsigned long
-exaGetPixmapSize(PixmapPtr pPix)
-{
-    ExaPixmapPrivPtr pExaPixmap;
-
-    pExaPixmap = ExaGetPixmapPriv(pPix);
-    if (pExaPixmap != NULL)
-	return pExaPixmap->size;
-    return 0;
-}
-
-void
-exaDrawableDirty (DrawablePtr pDrawable)
-{
-    PixmapPtr pPixmap;
-    ExaPixmapPrivPtr pExaPixmap;
-
-    if (pDrawable->type == DRAWABLE_WINDOW)
-	pPixmap = (*pDrawable->pScreen->GetWindowPixmap)((WindowPtr) pDrawable);
-    else
-	pPixmap = (PixmapPtr)pDrawable;
-
-    pExaPixmap = ExaGetPixmapPriv(pPixmap);
-    if (pExaPixmap != NULL)
-	pExaPixmap->dirty = TRUE;
-}
-
-static void
-exaPixmapSave (ScreenPtr pScreen, ExaOffscreenArea *area)
-{
-    PixmapPtr pPixmap = area->privData;
-    ExaScreenPriv (pScreen);
-    ExaPixmapPriv(pPixmap);
-    int dst_pitch, src_pitch, bytes;
-    char *dst, *src;
-    int i;
-
-    DBG_MIGRATE (("Save %p (%p) (%dx%d)\n",
-		  (void*)pPixmap->drawable.id,
-		  (void*)(ExaGetPixmapPriv(pPixmap)->area ?
-                          ExaGetPixmapPriv(pPixmap)->area->offset : 0),
-		  pPixmap->drawable.width,
-		  pPixmap->drawable.height));
-
-    src_pitch = pPixmap->devKind;
-    dst_pitch = pExaPixmap->devKind;
-
-    src = pPixmap->devPrivate.ptr;
-    dst = pExaPixmap->devPrivate.ptr;
-
-    if (pExaPixmap->dirty) {
-        if (pExaScr->info->accel.DownloadFromScreen &&
-	    (*pExaScr->info->accel.DownloadFromScreen) (pPixmap,
-							pPixmap->drawable.x,
-							pPixmap->drawable.y,
-							pPixmap->drawable.width,
-							pPixmap->drawable.height,
-							dst,
-							dst_pitch)) {
-
-        } else {
-	    exaWaitSync (pPixmap->drawable.pScreen);
-
-	    bytes = src_pitch < dst_pitch ? src_pitch : dst_pitch;
-
-	    i = pPixmap->drawable.height;
-	    while (i--) {
-		memcpy (dst, src, bytes);
-		dst += dst_pitch;
-		src += src_pitch;
-	    }
-	}
-    }
-
-    pPixmap->devKind = dst_pitch;
-    pPixmap->devPrivate.ptr = pExaPixmap->devPrivate.ptr;
-    pPixmap->drawable.serialNumber = NEXT_SERIAL_NUMBER;
-    pExaPixmap->area = NULL;
-    /* Mark it dirty now, to say that there is important data in the
-     * system-memory copy.
-     */
-    pExaPixmap->dirty = TRUE;
-}
-
-static int
-exaLog2(int val)
-{
-    int bits;
-
-    if (!val)
-	return 0;
-    for (bits = 0; val != 0; bits++)
-	val >>= 1;
-    return bits - 1;
-}
-
-static Bool
-exaPixmapAllocArea (PixmapPtr pPixmap)
-{
-    ScreenPtr	pScreen = pPixmap->drawable.pScreen;
-    ExaScreenPriv (pScreen);
-    ExaPixmapPriv (pPixmap);
-    int		bpp = pPixmap->drawable.bitsPerPixel;
-    CARD16	h = pPixmap->drawable.height;
-    CARD16	w = pPixmap->drawable.width;
-    int		pitch;
-
-    if (pExaScr->info->card.flags & EXA_OFFSCREEN_ALIGN_POT && w != 1)
-	w = 1 << (exaLog2(w - 1) + 1);
-    pitch = (w * bpp / 8) + (pExaScr->info->card.pixmapPitchAlign - 1);
-    pitch -= pitch % pExaScr->info->card.pixmapPitchAlign;
-
-    pExaPixmap->size = pitch * h;
-    pExaPixmap->devKind = pPixmap->devKind;
-    pExaPixmap->devPrivate = pPixmap->devPrivate;
-    pExaPixmap->area = exaOffscreenAlloc (pScreen, pitch * h,
-                                          pExaScr->info->card.pixmapOffsetAlign,
-                                          FALSE,
-                                          exaPixmapSave, (pointer) pPixmap);
-    if (!pExaPixmap->area)
-	return FALSE;
-
-    DBG_PIXMAP(("++ 0x%lx (0x%x) (%dx%d)\n", pPixmap->drawable.id,
-                (ExaGetPixmapPriv(pPixmap)->area ?
-		 ExaGetPixmapPriv(pPixmap)->area->offset : 0),
-		pPixmap->drawable.width,
-		pPixmap->drawable.height));
-    pPixmap->devKind = pitch;
-
-    pPixmap->devPrivate.ptr = (pointer) ((CARD8 *) pExaScr->info->card.memoryBase + pExaPixmap->area->offset);
-    pPixmap->drawable.serialNumber = NEXT_SERIAL_NUMBER;
-    return TRUE;
-}
-
-void
-exaMoveInPixmap (PixmapPtr pPixmap)
-{
-    ScreenPtr	pScreen = pPixmap->drawable.pScreen;
-    ExaScreenPriv (pScreen);
-    ExaPixmapPriv (pPixmap);
-    int dst_pitch, src_pitch, bytes;
-    char *dst, *src;
-    int i;
-
-    DBG_MIGRATE (("-> 0x%lx (0x%x) (%dx%d)\n", pPixmap->drawable.id,
-		  (ExaGetPixmapPriv(pPixmap)->area ?
-                   ExaGetPixmapPriv(pPixmap)->area->offset : 0),
-		  pPixmap->drawable.width,
-		  pPixmap->drawable.height));
-
-    src = pPixmap->devPrivate.ptr;
-    src_pitch = pPixmap->devKind;
-
-    if (!exaPixmapAllocArea (pPixmap)) {
-	DBG_MIGRATE (("failed to allocate fb for pixmap %p (%dx%dx%d)\n",
-		      (pointer)pPixmap,
-		      pPixmap->drawable.width, pPixmap->drawable.height,
-		      pPixmap->drawable.bitsPerPixel));
-	return;
-    }
-
-    /* If the "dirty" flag has never been set on the in-memory pixmap, then
-     * nothing has been written to it, so the contents are undefined and we can
-     * avoid the upload.
-     */
-    if (!pExaPixmap->dirty) {
-	DBG_MIGRATE(("saved upload of %dx%d\n", pPixmap->drawable.width,
-		     pPixmap->drawable.height));
-	return;
-    }
-
-    pExaPixmap->dirty = FALSE;
-
-    if (pExaScr->info->accel.UploadToScreen)
-    {
-	if (pExaScr->info->accel.UploadToScreen(pPixmap, 0, 0,
-						pPixmap->drawable.width,
-						pPixmap->drawable.height,
-						src, src_pitch))
-	    return;
-    }
-
-    dst = pPixmap->devPrivate.ptr;
-    dst_pitch = pPixmap->devKind;
-
-    bytes = src_pitch < dst_pitch ? src_pitch : dst_pitch;
-
-    exaWaitSync (pPixmap->drawable.pScreen);
-
-    i = pPixmap->drawable.height;
-    DBG_PIXMAP(("dst = %p, src = %p,(%d, %d) height = %d, mem_base = %p, offset = %d\n",
-                dst, src, dst_pitch, src_pitch,
-                i, pExaScr->info->card.memoryBase, ExaGetPixmapPriv(pPixmap)->area->offset));
-
-    while (i--) {
-	memcpy (dst, src, bytes);
-	dst += dst_pitch;
-	src += src_pitch;
-    }
-}
-
-static void
-exaMoveOutPixmap (PixmapPtr pPixmap)
-{
-    ExaPixmapPriv (pPixmap);
-    ExaOffscreenArea *area = pExaPixmap->area;
-
-    DBG_MIGRATE (("<- 0x%p (0x%p) (%dx%d)\n",
-		  (void*)pPixmap->drawable.id,
-		  (void*)(ExaGetPixmapPriv(pPixmap)->area ?
-                          ExaGetPixmapPriv(pPixmap)->area->offset : 0),
-		  pPixmap->drawable.width,
-		  pPixmap->drawable.height));
-    STRACE;
-    if (area)
-    {
-	exaPixmapSave (pPixmap->drawable.pScreen, area);
-	exaOffscreenFree (pPixmap->drawable.pScreen, area);
-    }
-}
-
-void
-exaDrawableUseScreen(DrawablePtr pDrawable)
-{
-    PixmapPtr pPixmap;
-
-    if (pDrawable->type == DRAWABLE_WINDOW)
-	pPixmap = (*pDrawable->pScreen->GetWindowPixmap) ((WindowPtr) pDrawable);
-    else
-	pPixmap = (PixmapPtr) pDrawable;
-
-    exaPixmapUseScreen (pPixmap);
-}
-
-void
-exaDrawableUseMemory(DrawablePtr pDrawable)
-{
-    PixmapPtr pPixmap;
-
-    if (pDrawable->type == DRAWABLE_WINDOW)
-	pPixmap = (*pDrawable->pScreen->GetWindowPixmap) ((WindowPtr) pDrawable);
-    else
-	pPixmap = (PixmapPtr) pDrawable;
-
-    exaPixmapUseMemory (pPixmap);
-}
-
-void
-exaPixmapUseScreen (PixmapPtr pPixmap)
-{
-    ExaPixmapPriv (pPixmap);
-
-    STRACE;
-
-    if (pExaPixmap == NULL) {
-	DBG_MIGRATE(("UseScreen: ignoring exa-uncontrolled pixmap %p (%s)\n",
-		     (pointer)pPixmap,
-		     exaPixmapIsOffscreen(pPixmap) ? "s" : "m"));
-	return;
-    }
-
-    if (pExaPixmap->score == EXA_PIXMAP_SCORE_PINNED) {
-	DBG_MIGRATE(("UseScreen: not migrating pinned pixmap %p\n",
-		     (pointer)pPixmap));
-	return;
-    }
-
-    DBG_MIGRATE(("UseScreen %p score %d\n",
-		 (pointer)pPixmap, pExaPixmap->score));
-
-    if (pExaPixmap->score == EXA_PIXMAP_SCORE_INIT) {
-	exaMoveInPixmap(pPixmap);
-	pExaPixmap->score = 0;
-    }
-
-    if (pExaPixmap->score < EXA_PIXMAP_SCORE_MAX)
-	pExaPixmap->score++;
-
-    if (pExaPixmap->score >= EXA_PIXMAP_SCORE_MOVE_IN &&
-	!exaPixmapIsOffscreen(pPixmap))
-    {
-	exaMoveInPixmap (pPixmap);
-    }
-
-    ExaOffscreenMarkUsed (pPixmap);
-}
-
-void
-exaPixmapUseMemory (PixmapPtr pPixmap)
-{
-    ExaPixmapPriv (pPixmap);
-
-    if (pExaPixmap == NULL) {
-	DBG_MIGRATE(("UseMem: ignoring exa-uncontrolled pixmap %p (%s)\n",
-		     (pointer)pPixmap,
-		     exaPixmapIsOffscreen(pPixmap) ? "s" : "m"));
-	return;
-    }
-
-    DBG_MIGRATE(("UseMem: %p score %d\n", (pointer)pPixmap, pExaPixmap->score));
-
-    if (pExaPixmap->score == EXA_PIXMAP_SCORE_PINNED)
-	return;
-
-    if (pExaPixmap->score == EXA_PIXMAP_SCORE_INIT)
-	pExaPixmap->score = 0;
-
-    if (pExaPixmap->score > EXA_PIXMAP_SCORE_MIN)
-	pExaPixmap->score--;
-
-    if (pExaPixmap->score <= EXA_PIXMAP_SCORE_MOVE_OUT && pExaPixmap->area)
-	exaMoveOutPixmap (pPixmap);
-}
-
-static Bool
-exaDestroyPixmap (PixmapPtr pPixmap)
-{
-    if (pPixmap->refcnt == 1)
-    {
-	ExaPixmapPriv (pPixmap);
-	if (pExaPixmap->area)
-	{
-	    DBG_PIXMAP(("-- 0x%p (0x%x) (%dx%d)\n",
-                        (void*)pPixmap->drawable.id,
-			 ExaGetPixmapPriv(pPixmap)->area->offset,
-			 pPixmap->drawable.width,
-			 pPixmap->drawable.height));
-	    /* Free the offscreen area */
-	    exaOffscreenFree (pPixmap->drawable.pScreen, pExaPixmap->area);
-	    pPixmap->devPrivate = pExaPixmap->devPrivate;
-	    pPixmap->devKind = pExaPixmap->devKind;
-	}
-    }
-    return fbDestroyPixmap (pPixmap);
-}
-
-static PixmapPtr
-exaCreatePixmap(ScreenPtr pScreen, int w, int h, int depth)
-{
-    PixmapPtr		pPixmap;
-    ExaPixmapPrivPtr	pExaPixmap;
-    int			bpp;
-    ScrnInfoPtr pScrn = XF86SCRNINFO(pScreen);
-    ExaScreenPriv(pScreen);
-
-    if (w > 32767 || h > 32767)
-	return NullPixmap;
-
-    if (!pScrn->vtSema || pExaScr->swappedOut) {
-        pPixmap = pExaScr->SavedCreatePixmap(pScreen, w, h, depth);
-    } else {
-        bpp = BitsPerPixel (depth);
-        if (bpp == 32 && depth == 24)
-        {
-            int format;
-            for (format = 0; format < MAXFORMATS && pScrn->formats[format].depth; ++format)
-                if (pScrn->formats[format].depth == 24)
-                {
-                    bpp = pScrn->formats[format].bitsPerPixel;
-                    break;
-                }
-        }
-
-        pPixmap = fbCreatePixmapBpp (pScreen, w, h, depth, bpp);
-    }
-    if (!pPixmap)
-	return NULL;
-    pExaPixmap = ExaGetPixmapPriv(pPixmap);
-
-    /* Glyphs have w/h equal to zero, and may not be migrated. See exaGlyphs. */
-    if (!w || !h)
-	pExaPixmap->score = EXA_PIXMAP_SCORE_PINNED;
-    else
-	pExaPixmap->score = EXA_PIXMAP_SCORE_INIT;
-
-    pExaPixmap->area = NULL;
-    pExaPixmap->dirty = FALSE;
-
-    return pPixmap;
-}
-
-Bool
-exaPixmapIsOffscreen(PixmapPtr p)
-{
-    ScreenPtr	pScreen = p->drawable.pScreen;
-    ExaScreenPriv(pScreen);
-
-    STRACE;
-    return ((unsigned long) ((CARD8 *) p->devPrivate.ptr -
-			     (CARD8 *) pExaScr->info->card.memoryBase) <
-	    pExaScr->info->card.memorySize);
-}
-
-PixmapPtr
-exaGetOffscreenPixmap (DrawablePtr pDrawable, int *xp, int *yp)
-{
-    PixmapPtr	pPixmap;
-    int		x, y;
-
-    STRACE;
-    if (pDrawable->type == DRAWABLE_WINDOW) {
-	pPixmap = (*pDrawable->pScreen->GetWindowPixmap) ((WindowPtr) pDrawable);
-#ifdef COMPOSITE
-	x = -pPixmap->screen_x;
-	y = -pPixmap->screen_y;
-#else
-	x = 0;
-	y = 0;
-#endif
-    }
-    else
-    {
-	pPixmap = (PixmapPtr) pDrawable;
-	x = 0;
-	y = 0;
-    }
-    *xp = x;
-    *yp = y;
-    if (exaPixmapIsOffscreen (pPixmap))
-	return pPixmap;
-    else
-	return NULL;
-}
-
-Bool
-exaDrawableIsOffscreen (DrawablePtr pDrawable)
-{
-    PixmapPtr	pPixmap;
-    STRACE;
-
-    if (pDrawable->type == DRAWABLE_WINDOW)
-	pPixmap = (*pDrawable->pScreen->GetWindowPixmap) ((WindowPtr) pDrawable);
-    else
-	pPixmap = (PixmapPtr) pDrawable;
-    return exaPixmapIsOffscreen (pPixmap);
-}
-
-void
-exaPrepareAccess(DrawablePtr pDrawable, int index)
-{
-    ScreenPtr	    pScreen = pDrawable->pScreen;
-    ExaScreenPriv  (pScreen);
-    PixmapPtr	    pPixmap;
-    STRACE;
-
-    if (pDrawable->type == DRAWABLE_WINDOW)
-	pPixmap = (*pDrawable->pScreen->GetWindowPixmap) ((WindowPtr) pDrawable);
-    else
-	pPixmap = (PixmapPtr) pDrawable;
-
-    if (index == EXA_PREPARE_DEST)
-	exaDrawableDirty (pDrawable);
-    if (exaPixmapIsOffscreen (pPixmap))
-	exaWaitSync (pDrawable->pScreen);
-    else
-	return;
-
-    if (pExaScr->info->accel.PrepareAccess == NULL)
-	return;
-
-    if (!(*pExaScr->info->accel.PrepareAccess) (pPixmap, index)) {
-	ExaPixmapPriv (pPixmap);
-	if (pExaPixmap->score != EXA_PIXMAP_SCORE_PINNED)
-	    FatalError("Driver failed PrepareAccess on a pinned pixmap\n");
-	exaMoveOutPixmap (pPixmap);
-    }
-}
-
-void
-exaFinishAccess(DrawablePtr pDrawable, int index)
-{
-    ScreenPtr	    pScreen = pDrawable->pScreen;
-    ExaScreenPriv  (pScreen);
-    PixmapPtr	    pPixmap;
-    STRACE;
-
-    if (pExaScr->info->accel.FinishAccess == NULL)
-	return;
-
-    if (pDrawable->type == DRAWABLE_WINDOW)
-	pPixmap = (*pDrawable->pScreen->GetWindowPixmap) ((WindowPtr) pDrawable);
-    else
-	pPixmap = (PixmapPtr) pDrawable;
-    if (!exaPixmapIsOffscreen (pPixmap))
-	return;
-
-    (*pExaScr->info->accel.FinishAccess) (pPixmap, index);
-}
-
 
 static void
 exaFillSpans(DrawablePtr pDrawable, GCPtr pGC, int n,
@@ -1074,7 +538,7 @@ exaImageGlyphBlt (DrawablePtr	pDrawable,
     exaFinishAccess (pDrawable, EXA_PREPARE_DEST);
 }
 
-static const GCOps	exaOps = {
+const GCOps exaOps = {
     exaFillSpans,
     ExaCheckSetSpans,
     ExaCheckPutImage,
@@ -1100,41 +564,7 @@ static const GCOps	exaOps = {
 #endif
 };
 
-static void
-exaValidateGC (GCPtr pGC, Mask changes, DrawablePtr pDrawable)
-{
-    fbValidateGC (pGC, changes, pDrawable);
-
-    if (exaDrawableIsOffscreen (pDrawable))
-	pGC->ops = (GCOps *) &exaOps;
-    else
-	pGC->ops = (GCOps *) &exaAsyncPixmapGCOps;
-}
-
-static GCFuncs	exaGCFuncs = {
-    exaValidateGC,
-    miChangeGC,
-    miCopyGC,
-    miDestroyGC,
-    miChangeClip,
-    miDestroyClip,
-    miCopyClip
-};
-
-static int
-exaCreateGC (GCPtr pGC)
-{
-    STRACE;
-    if (!fbCreateGC (pGC))
-	return FALSE;
-
-    pGC->funcs = &exaGCFuncs;
-
-    return TRUE;
-}
-
-
-static void
+void
 exaCopyWindow(WindowPtr pWin, DDXPointRec ptOldOrg, RegionPtr prgnSrc)
 {
     RegionRec	rgnDst;
@@ -1326,7 +756,7 @@ fallback:
     exaFinishAccess (pDrawable, EXA_PREPARE_DEST);
 }
 
-static void
+void
 exaPaintWindow(WindowPtr pWin, RegionPtr pRegion, int what)
 {
     ScrnInfoPtr pScrn = XF86SCRNINFO(pWin->drawable.pScreen);
@@ -1369,239 +799,3 @@ exaPaintWindow(WindowPtr pWin, RegionPtr pRegion, int what)
     }
     ExaCheckPaintWindow (pWin, pRegion, what);
 }
-
-
-static Bool
-exaCloseScreen(int i, ScreenPtr pScreen)
-{
-    ExaScreenPriv(pScreen);
-#ifdef RENDER
-    PictureScreenPtr	ps = GetPictureScreenIfSet(pScreen);
-#endif
-    ScrnInfoPtr pScrn = XF86SCRNINFO(pScreen);
-
-    pScreen->CreateGC = pExaScr->SavedCreateGC;
-    pScreen->CloseScreen = pExaScr->SavedCloseScreen;
-    pScreen->GetImage = pExaScr->SavedGetImage;
-    pScreen->GetSpans = pExaScr->SavedGetSpans;
-    pScreen->PaintWindowBackground = pExaScr->SavedPaintWindowBackground;
-    pScreen->PaintWindowBorder = pExaScr->SavedPaintWindowBorder;
-    pScreen->CreatePixmap = pExaScr->SavedCreatePixmap;
-    pScreen->DestroyPixmap = pExaScr->SavedDestroyPixmap;
-    pScreen->CopyWindow = pExaScr->SavedCopyWindow;
-#ifdef RENDER
-    if (ps) {
-	ps->Composite = pExaScr->SavedComposite;
-	ps->Glyphs = pExaScr->SavedGlyphs;
-    }
-#endif
-    if (pExaScr->wrappedEnableDisableFB)
-	pScrn->EnableDisableFBAccess = pExaScr->SavedEnableDisableFBAccess;
-
-    xfree (pExaScr);
-
-    return (*pScreen->CloseScreen) (i, pScreen);
-}
-
-Bool
-exaDriverInit (ScreenPtr		pScreen,
-               ExaDriverPtr	pScreenInfo)
-{
-    /* Do NOT use XF86SCRNINFO macro here!! */
-    ScrnInfoPtr pScrn = xf86Screens[pScreen->myNum];
-    ExaScreenPrivPtr pExaScr;
-
-#ifdef RENDER
-    PictureScreenPtr	ps = GetPictureScreenIfSet(pScreen);
-#endif
-    STRACE;
-    if (exaGeneration != serverGeneration)
-    {
-	exaScreenPrivateIndex = AllocateScreenPrivateIndex();
-	exaPixmapPrivateIndex = AllocatePixmapPrivateIndex();
-	exaGeneration = serverGeneration;
-    }
-
-    pExaScr = xcalloc (sizeof (ExaScreenPrivRec), 1);
-
-    if (!pExaScr) {
-        xf86DrvMsg(pScreen->myNum, X_WARNING,
-                   "EXA: Failed to allocate screen private\n");
-	return FALSE;
-    }
-
-    pExaScr->info = pScreenInfo;
-
-    pScreen->devPrivates[exaScreenPrivateIndex].ptr = (pointer) pExaScr;
-
-    /*
-     * Replace various fb screen functions
-     */
-    pExaScr->SavedCloseScreen = pScreen->CloseScreen;
-    pScreen->CloseScreen = exaCloseScreen;
-
-    pExaScr->SavedCreateGC = pScreen->CreateGC;
-    pScreen->CreateGC = exaCreateGC;
-
-    pExaScr->SavedGetImage = pScreen->GetImage;
-    pScreen->GetImage = ExaCheckGetImage;
-
-    pExaScr->SavedGetSpans = pScreen->GetSpans;
-    pScreen->GetSpans = ExaCheckGetSpans;
-
-    pExaScr->SavedCopyWindow = pScreen->CopyWindow;
-    pScreen->CopyWindow = exaCopyWindow;
-
-    pExaScr->SavedPaintWindowBackground = pScreen->PaintWindowBackground;
-    pScreen->PaintWindowBackground = exaPaintWindow;
-
-    pExaScr->SavedPaintWindowBorder = pScreen->PaintWindowBorder;
-    pScreen->PaintWindowBorder = exaPaintWindow;
-
-    pScreen->BackingStoreFuncs.SaveAreas = ExaCheckSaveAreas;
-    pScreen->BackingStoreFuncs.RestoreAreas = ExaCheckRestoreAreas;
-#ifdef RENDER
-    if (ps) {
-        pExaScr->SavedComposite = ps->Composite;
-	ps->Composite = exaComposite;
-
-	pExaScr->SavedGlyphs = ps->Glyphs;
-	ps->Glyphs = exaGlyphs;
-    }
-#endif
-
-    miDisableCompositeWrapper(pScreen);
-
-    /*
-     * Hookup offscreen pixmaps
-     */
-    if ((pExaScr->info->card.flags & EXA_OFFSCREEN_PIXMAPS) &&
-	pExaScr->info->card.offScreenBase < pExaScr->info->card.memorySize)
-    {
-	if (!AllocatePixmapPrivate(pScreen, exaPixmapPrivateIndex,
-				   sizeof (ExaPixmapPrivRec))) {
-            xf86DrvMsg(pScreen->myNum, X_WARNING,
-                       "EXA: Failed to allocate pixmap private\n");
-	    return FALSE;
-        }
-        pExaScr->SavedCreatePixmap = pScreen->CreatePixmap;
-	pScreen->CreatePixmap = exaCreatePixmap;
-
-        pExaScr->SavedDestroyPixmap = pScreen->DestroyPixmap;
-	pScreen->DestroyPixmap = exaDestroyPixmap;
-    }
-    else
-    {
-        xf86DrvMsg(pScreen->myNum, X_INFO, "EXA: No offscreen pixmaps\n");
-	if (!AllocatePixmapPrivate(pScreen, exaPixmapPrivateIndex, 0))
-	    return FALSE;
-    }
-
-    DBG_PIXMAP(("============== %ld < %ld\n", pExaScr->info->card.offScreenBase,
-                pExaScr->info->card.memorySize));
-    if (pExaScr->info->card.offScreenBase < pExaScr->info->card.memorySize) {
-	if (!exaOffscreenInit (pScreen)) {
-            xf86DrvMsg(pScreen->myNum, X_WARNING,
-                       "EXA: Offscreen pixmap setup failed\n");
-            return FALSE;
-        }
-
-	pExaScr->SavedEnableDisableFBAccess = pScrn->EnableDisableFBAccess;
-	pScrn->EnableDisableFBAccess = exaEnableDisableFBAccess;
-	pExaScr->wrappedEnableDisableFB = TRUE;
-    }
-
-    return TRUE;
-}
-
-void
-exaDriverFini (ScreenPtr pScreen)
-{
-    /*right now does nothing*/
-}
-
-void exaMarkSync(ScreenPtr pScreen)
-{
-    ExaScreenPriv(pScreen);
-    ExaCardInfoPtr card = &(pExaScr->info->card);
-
-    card->needsSync = TRUE;
-    if (pExaScr->info->accel.MarkSync != NULL) {
-        card->lastMarker = (*pExaScr->info->accel.MarkSync)(pScreen);
-    }
-}
-
-void exaWaitSync(ScreenPtr pScreen)
-{
-    ExaScreenPriv(pScreen);
-    ExaCardInfoPtr card = &(pExaScr->info->card);
-    ScrnInfoPtr pScrn = XF86SCRNINFO(pScreen);
-
-    if (card->needsSync && pScrn->vtSema) {
-        (*pExaScr->info->accel.WaitMarker)(pScreen, card->lastMarker);
-        card->needsSync = FALSE;
-    }
-}
-
-unsigned int exaGetVersion(void)
-{
-    return EXA_VERSION;
-}
-
-#ifdef XFree86LOADER
-static MODULESETUPPROTO(exaSetup);
-
-
-static const OptionInfoRec EXAOptions[] = {
-    { -1,				NULL,
-      OPTV_NONE,	{0}, FALSE }
-};
-
-/*ARGSUSED*/
-static const OptionInfoRec *
-EXAAvailableOptions(void *unused)
-{
-    return (EXAOptions);
-}
-
-static XF86ModuleVersionInfo exaVersRec =
-{
-	"exa",
-	MODULEVENDORSTRING,
-	MODINFOSTRING1,
-	MODINFOSTRING2,
-	XORG_VERSION_CURRENT,
-	1, 2, 0,
-	ABI_CLASS_VIDEODRV,		/* requires the video driver ABI */
-	ABI_VIDEODRV_VERSION,
-	MOD_CLASS_NONE,
-	{0,0,0,0}
-};
-
-XF86ModuleData exaModuleData = { &exaVersRec, exaSetup, NULL };
-
-ModuleInfoRec EXA = {
-    1,
-    "EXA",
-    NULL,
-    0,
-    EXAAvailableOptions,
-};
-
-/*ARGSUSED*/
-static pointer
-exaSetup(pointer Module, pointer Options, int *ErrorMajor, int *ErrorMinor)
-{
-    static Bool Initialised = FALSE;
-
-    if (!Initialised) {
-	Initialised = TRUE;
-#ifndef REMOVE_LOADER_CHECK_MODULE_INFO
-	if (xf86LoaderCheckSymbol("xf86AddModuleInfo"))
-#endif
-	xf86AddModuleInfo(&EXA, Module);
-    }
-
-    return (pointer)TRUE;
-}
-#endif
