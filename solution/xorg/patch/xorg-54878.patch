diff --git a/hw/xquartz/quartzRandR.c b/hw/xquartz/quartzRandR.c
index b7c424f..cb470fa 100644
--- a/hw/xquartz/quartzRandR.c
+++ b/hw/xquartz/quartzRandR.c
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2001-2004 Greg Parker and Torrey T. Lyons,
  *               2010      Jan Hauffa.
- *               2010-2011 Apple Inc.
+ *               2010-2012 Apple Inc.
  *                 All Rights Reserved.
  *
  * Permission is hereby granted, free of charge, to any person obtaining a
@@ -74,7 +74,6 @@ getDictLong(CFDictionaryRef dictRef, CFStringRef key)
     long value;
 
     CFNumberRef numRef = (CFNumberRef) CFDictionaryGetValue(dictRef, key);
-
     if (!numRef)
         return 0;
 
@@ -89,7 +88,6 @@ getDictDouble(CFDictionaryRef dictRef, CFStringRef key)
     double value;
 
     CFNumberRef numRef = (CFNumberRef) CFDictionaryGetValue(dictRef, key);
-
     if (!numRef)
         return 0.0;
 
@@ -99,7 +97,8 @@ getDictDouble(CFDictionaryRef dictRef, CFStringRef key)
 }
 
 static void
-QuartzRandRGetModeInfo(CFDictionaryRef modeRef, QuartzModeInfoPtr pMode)
+QuartzRandRGetModeInfo(CFDictionaryRef modeRef,
+                       QuartzModeInfoPtr pMode)
 {
     pMode->width = (size_t) getDictLong(modeRef, kCGDisplayWidth);
     pMode->height = (size_t) getDictLong(modeRef, kCGDisplayHeight);
@@ -116,7 +115,6 @@ QuartzRandRCopyCurrentModeInfo(CGDirectDisplayID screenId,
                                QuartzModeInfoPtr pMode)
 {
     CFDictionaryRef curModeRef = CGDisplayCurrentMode(screenId);
-
     if (!curModeRef)
         return FALSE;
 
@@ -127,16 +125,17 @@ QuartzRandRCopyCurrentModeInfo(CGDirectDisplayID screenId,
 }
 
 static Bool
-QuartzRandRSetCGMode(CGDirectDisplayID screenId, QuartzModeInfoPtr pMode)
+QuartzRandRSetCGMode(CGDirectDisplayID screenId,
+                     QuartzModeInfoPtr pMode)
 {
     CFDictionaryRef modeRef = (CFDictionaryRef) pMode->ref;
-
     return (CGDisplaySwitchToMode(screenId, modeRef) == kCGErrorSuccess);
 }
 
 static Bool
 QuartzRandREnumerateModes(ScreenPtr pScreen,
-                          QuartzModeCallback callback, void *data)
+                          QuartzModeCallback callback,
+                          void *data)
 {
     Bool retval = FALSE;
     QuartzScreenPtr pQuartzScreen = QUARTZ_PRIV(pScreen);
@@ -160,7 +159,6 @@ QuartzRandREnumerateModes(ScreenPtr pScreen,
             return FALSE;
         for (i = 0; i < CFArrayGetCount(modes); i++) {
             int cb;
-
             modeRef = (CFDictionaryRef) CFArrayGetValueAtIndex(modes, i);
 
             /* Skip modes that are not usable on the current display or have a
@@ -186,10 +184,13 @@ QuartzRandREnumerateModes(ScreenPtr pScreen,
     switch (callback(pScreen, &pQuartzScreen->rootlessMode, data)) {
     case CALLBACK_SUCCESS:
         return TRUE;
+
     case CALLBACK_ERROR:
         return FALSE;
+
     case CALLBACK_CONTINUE:
         retval = TRUE;
+
     default:
         break;
     }
@@ -197,10 +198,13 @@ QuartzRandREnumerateModes(ScreenPtr pScreen,
     switch (callback(pScreen, &pQuartzScreen->fullscreenMode, data)) {
     case CALLBACK_SUCCESS:
         return TRUE;
+
     case CALLBACK_ERROR:
         return FALSE;
+
     case CALLBACK_CONTINUE:
         retval = TRUE;
+
     default:
         break;
     }
@@ -211,7 +215,8 @@ QuartzRandREnumerateModes(ScreenPtr pScreen,
 #else                           /* we have the new CG APIs from Snow Leopard */
 
 static void
-QuartzRandRGetModeInfo(CGDisplayModeRef modeRef, QuartzModeInfoPtr pMode)
+QuartzRandRGetModeInfo(CGDisplayModeRef modeRef,
+                       QuartzModeInfoPtr pMode)
 {
     pMode->width = CGDisplayModeGetWidth(modeRef);
     pMode->height = CGDisplayModeGetHeight(modeRef);
@@ -227,7 +232,6 @@ QuartzRandRCopyCurrentModeInfo(CGDirectDisplayID screenId,
                                QuartzModeInfoPtr pMode)
 {
     CGDisplayModeRef curModeRef = CGDisplayCopyDisplayMode(screenId);
-
     if (!curModeRef)
         return FALSE;
 
@@ -237,20 +241,21 @@ QuartzRandRCopyCurrentModeInfo(CGDirectDisplayID screenId,
 }
 
 static Bool
-QuartzRandRSetCGMode(CGDirectDisplayID screenId, QuartzModeInfoPtr pMode)
+QuartzRandRSetCGMode(CGDirectDisplayID screenId,
+                     QuartzModeInfoPtr pMode)
 {
     CGDisplayModeRef modeRef = (CGDisplayModeRef) pMode->ref;
-
     if (!modeRef)
         return FALSE;
 
-    return (CGDisplaySetDisplayMode(screenId, modeRef, NULL) ==
-            kCGErrorSuccess);
+    return (CGDisplaySetDisplayMode(screenId, modeRef,
+                                    NULL) == kCGErrorSuccess);
 }
 
 static Bool
 QuartzRandREnumerateModes(ScreenPtr pScreen,
-                          QuartzModeCallback callback, void *data)
+                          QuartzModeCallback callback,
+                          void *data)
 {
     Bool retval = FALSE;
     QuartzScreenPtr pQuartzScreen = QUARTZ_PRIV(pScreen);
@@ -278,12 +283,12 @@ QuartzRandREnumerateModes(ScreenPtr pScreen,
         }
         for (i = 0; i < CFArrayGetCount(modes); i++) {
             int cb;
-
             modeRef = (CGDisplayModeRef) CFArrayGetValueAtIndex(modes, i);
 
             /* Skip modes that are not usable on the current display or have a
                different pixel encoding than the current mode. */
-            if ((CGDisplayModeGetIOFlags(modeRef) & kDisplayModeUsableFlags) !=
+            if ((CGDisplayModeGetIOFlags(modeRef) &
+                 kDisplayModeUsableFlags) !=
                 kDisplayModeUsableFlags)
                 continue;
             pixelEnc = CGDisplayModeCopyPixelEncoding(modeRef);
@@ -317,10 +322,13 @@ QuartzRandREnumerateModes(ScreenPtr pScreen,
     switch (callback(pScreen, &pQuartzScreen->rootlessMode, data)) {
     case CALLBACK_SUCCESS:
         return TRUE;
+
     case CALLBACK_ERROR:
         return FALSE;
+
     case CALLBACK_CONTINUE:
         retval = TRUE;
+
     default:
         break;
     }
@@ -328,10 +336,13 @@ QuartzRandREnumerateModes(ScreenPtr pScreen,
     switch (callback(pScreen, &pQuartzScreen->fullscreenMode, data)) {
     case CALLBACK_SUCCESS:
         return TRUE;
+
     case CALLBACK_ERROR:
         return FALSE;
+
     case CALLBACK_CONTINUE:
         retval = TRUE;
+
     default:
         break;
     }
@@ -342,7 +353,8 @@ QuartzRandREnumerateModes(ScreenPtr pScreen,
 #endif                          /* Snow Leopard CoreGraphics APIs */
 
 static Bool
-QuartzRandRModesEqual(QuartzModeInfoPtr pMode1, QuartzModeInfoPtr pMode2)
+QuartzRandRModesEqual(QuartzModeInfoPtr pMode1,
+                      QuartzModeInfoPtr pMode2)
 {
     return (pMode1->width == pMode2->width) &&
         (pMode1->height == pMode2->height) &&
@@ -350,11 +362,12 @@ QuartzRandRModesEqual(QuartzModeInfoPtr pMode1, QuartzModeInfoPtr pMode2)
 }
 
 static Bool
-QuartzRandRRegisterMode(ScreenPtr pScreen, QuartzModeInfoPtr pMode)
+QuartzRandRRegisterMode(ScreenPtr pScreen,
+                        QuartzModeInfoPtr pMode)
 {
     QuartzScreenPtr pQuartzScreen = QUARTZ_PRIV(pScreen);
-    Bool isCurrentMode =
-        QuartzRandRModesEqual(&pQuartzScreen->currentMode, pMode);
+    Bool isCurrentMode = QuartzRandRModesEqual(&pQuartzScreen->currentMode,
+                                               pMode);
 
     /* TODO: DPI */
     pMode->pSize =
@@ -375,7 +388,8 @@ QuartzRandRRegisterMode(ScreenPtr pScreen, QuartzModeInfoPtr pMode)
 
 static int
 QuartzRandRRegisterModeCallback(ScreenPtr pScreen,
-                                QuartzModeInfoPtr pMode, void *data __unused)
+                                QuartzModeInfoPtr pMode,
+                                void *data __unused)
 {
     if (QuartzRandRRegisterMode(pScreen, pMode)) {
         return CALLBACK_CONTINUE;
@@ -386,11 +400,13 @@ QuartzRandRRegisterModeCallback(ScreenPtr pScreen,
 }
 
 static Bool
-QuartzRandRSetMode(ScreenPtr pScreen, QuartzModeInfoPtr pMode, BOOL doRegister)
+QuartzRandRSetMode(ScreenPtr pScreen, QuartzModeInfoPtr pMode,
+                   BOOL doRegister)
 {
     QuartzScreenPtr pQuartzScreen = QUARTZ_PRIV(pScreen);
-    Bool captureDisplay = (pMode->refresh != FAKE_REFRESH_FULLSCREEN &&
-                           pMode->refresh != FAKE_REFRESH_ROOTLESS);
+    Bool captureDisplay =
+        (pMode->refresh != FAKE_REFRESH_FULLSCREEN && pMode->refresh !=
+    FAKE_REFRESH_ROOTLESS);
     CGDirectDisplayID screenId;
 
     if (pQuartzScreen->displayIDs == NULL)
@@ -442,7 +458,8 @@ QuartzRandRSetMode(ScreenPtr pScreen, QuartzModeInfoPtr pMode, BOOL doRegister)
 
 static int
 QuartzRandRSetModeCallback(ScreenPtr pScreen,
-                           QuartzModeInfoPtr pMode, void *data)
+                           QuartzModeInfoPtr pMode,
+                           void *data)
 {
     QuartzModeInfoPtr pReqMode = (QuartzModeInfoPtr) data;
 
@@ -469,7 +486,9 @@ QuartzRandRGetInfo(ScreenPtr pScreen, Rotation * rotations)
 
 static Bool
 QuartzRandRSetConfig(ScreenPtr pScreen,
-                     Rotation randr, int rate, RRScreenSizePtr pSize)
+                     Rotation randr,
+                     int rate,
+                     RRScreenSizePtr pSize)
 {
     QuartzScreenPtr pQuartzScreen = QUARTZ_PRIV(pScreen);
     QuartzModeInfo reqMode;
@@ -482,13 +501,14 @@ QuartzRandRSetConfig(ScreenPtr pScreen,
     if (QuartzRandRModesEqual(&reqMode, &pQuartzScreen->currentMode))
         return TRUE;
 
-    if (QuartzRandREnumerateModes
-        (pScreen, QuartzRandRSetModeCallback, &reqMode)) {
+    if (QuartzRandREnumerateModes(pScreen, QuartzRandRSetModeCallback,
+                                  &reqMode)) {
         return TRUE;
     }
 
     DEBUG_LOG("Unable to find a matching config: %d x %d @ %d\n",
-              (int) reqMode.width, (int) reqMode.height, (int) reqMode.refresh);
+              (int)reqMode.width, (int)reqMode.height,
+              (int)reqMode.refresh);
     return FALSE;
 }
 
@@ -499,8 +519,8 @@ _QuartzRandRUpdateFakeModes(ScreenPtr pScreen)
     QuartzModeInfo activeMode;
 
     if (pQuartzScreen->displayCount > 0) {
-        if (!QuartzRandRCopyCurrentModeInfo
-            (pQuartzScreen->displayIDs[0], &activeMode)) {
+        if (!QuartzRandRCopyCurrentModeInfo(pQuartzScreen->displayIDs[0],
+                                            &activeMode)) {
             ErrorF("Unable to determine current display mode.\n");
             return FALSE;
         }
@@ -562,8 +582,8 @@ QuartzRandRUpdateFakeModes(BOOL force_update)
     ScreenPtr pScreen = screenInfo.screens[0];
 
     if (ignore_next_fake_mode_update) {
-        DEBUG_LOG
-            ("Ignoring update request caused by RandR resolution change.\n");
+        DEBUG_LOG(
+            "Ignoring update request caused by RandR resolution change.\n");
         ignore_next_fake_mode_update = FALSE;
         return TRUE;
     }
@@ -582,10 +602,8 @@ QuartzRandRInit(ScreenPtr pScreen)
 {
     rrScrPrivPtr pScrPriv;
 
-    if (!RRScreenInit(pScreen))
-        return FALSE;
-    if (!_QuartzRandRUpdateFakeModes(pScreen))
-        return FALSE;
+    if (!RRScreenInit(pScreen)) return FALSE;
+    if (!_QuartzRandRUpdateFakeModes(pScreen)) return FALSE;
 
     pScrPriv = rrGetScrPriv(pScreen);
     pScrPriv->rrGetInfo = QuartzRandRGetInfo;
@@ -637,12 +655,12 @@ QuartzRandRToggleFullscreen(void)
     QuartzScreenPtr pQuartzScreen = QUARTZ_PRIV(pScreen);
 
     if (pQuartzScreen->currentMode.ref == NULL) {
-        ErrorF
-            ("Ignoring QuartzRandRToggleFullscreen because don't have a current mode set.\n");
+        ErrorF(
+            "Ignoring QuartzRandRToggleFullscreen because don't have a current mode set.\n");
     }
     else if (pQuartzScreen->currentMode.refresh == FAKE_REFRESH_ROOTLESS) {
-        ErrorF
-            ("Ignoring QuartzRandRToggleFullscreen because we are in rootless mode.\n");
+        ErrorF(
+            "Ignoring QuartzRandRToggleFullscreen because we are in rootless mode.\n");
     }
     else if (pQuartzScreen->currentMode.refresh == FAKE_REFRESH_FULLSCREEN) {
         /* Legacy fullscreen mode.  Hide/Show */
