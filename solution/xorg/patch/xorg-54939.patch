diff --git a/Xext/xtest.c b/Xext/xtest.c
index bd8e1d3..2414457 100644
--- a/Xext/xtest.c
+++ b/Xext/xtest.c
@@ -81,12 +81,10 @@ DeviceIntPtr xtestpointer, xtestkeyboard;
 #include "panoramiXsrv.h"
 #endif
 
-static int XTestSwapFakeInput(
-        ClientPtr /* client */,
+static int XTestSwapFakeInput(ClientPtr /* client */ ,
         xReq * /* req */
         );
 
-
 static int
 ProcXTestGetVersion(ClientPtr client)
 {
@@ -125,10 +123,9 @@ ProcXTestCompareCursor(ClientPtr client)
     else if (stuff->cursor == XTestCurrentCursor)
         pCursor = GetSpriteCursor(ptr);
     else {
-        rc = dixLookupResourceByType((pointer *)&pCursor, stuff->cursor, RT_CURSOR,
-				     client, DixReadAccess);
-        if (rc != Success)
-        {
+        rc = dixLookupResourceByType((pointer *) &pCursor, stuff->cursor,
+                                     RT_CURSOR, client, DixReadAccess);
+        if (rc != Success) {
             client->errorValue = stuff->cursor;
             return rc;
         }
@@ -172,15 +169,13 @@ ProcXTestFakeInput(ClientPtr client)
     ev = (xEvent *)&((xReq *)stuff)[1];
     type = ev->u.u.type & 0177;
 
-    if (type >= EXTENSION_EVENT_BASE)
-    {
+    if (type >= EXTENSION_EVENT_BASE) {
         extension = TRUE;
 
         /* check device */
         rc = dixLookupDevice(&dev, stuff->deviceid & 0177, client,
                 DixWriteAccess);
-        if (rc != Success)
-        {
+        if (rc != Success) {
             client->errorValue = stuff->deviceid & 0177;
             return rc;
         }
@@ -190,31 +185,27 @@ ProcXTestFakeInput(ClientPtr client)
         switch (type) {
             case XI_DeviceKeyPress:
             case XI_DeviceKeyRelease:
-                if (!dev->key)
-                {
+            if (!dev->key) {
                     client->errorValue = ev->u.u.type;
                     return BadValue;
                 }
                 break;
             case XI_DeviceButtonPress:
             case XI_DeviceButtonRelease:
-                if (!dev->button)
-                {
+            if (!dev->button) {
                     client->errorValue = ev->u.u.type;
                     return BadValue;
                 }
                 break;
             case XI_DeviceMotionNotify:
-                if (!dev->valuator)
-                {
+            if (!dev->valuator) {
                     client->errorValue = ev->u.u.type;
                     return BadValue;
                 }
                 break;
             case XI_ProximityIn:
             case XI_ProximityOut:
-                if (!dev->proximity)
-                {
+            if (!dev->proximity) {
                     client->errorValue = ev->u.u.type;
                     return BadValue;
                 }
@@ -228,53 +219,51 @@ ProcXTestFakeInput(ClientPtr client)
         if (nev == 1 && type == XI_DeviceMotionNotify)
             return BadLength; /* DevMotion must be followed by DevValuator */
 
-        if (type == XI_DeviceMotionNotify)
-        {
+        if (type == XI_DeviceMotionNotify) {
             firstValuator = ((deviceValuator *)(ev+1))->first_valuator;
-            if (firstValuator > dev->valuator->numAxes)
-            {
+            if (firstValuator > dev->valuator->numAxes) {
                 client->errorValue = ev->u.u.type;
                 return BadValue;
             }
 
             if (ev->u.u.detail == xFalse)
                 flags |= POINTER_ABSOLUTE;
-        } else
-        {
+        }
+        else {
             firstValuator = 0;
             flags |= POINTER_ABSOLUTE;
         }
 
-        if (nev > 1 && !dev->valuator)
-        {
+        if (nev > 1 && !dev->valuator) {
             client->errorValue = dv->first_valuator;
             return BadValue;
         }
 
-
         /* check validity of valuator events */
         base = firstValuator;
-        for (n = 1; n < nev; n++)
-        {
+        for (n = 1; n < nev; n++) {
             dv = (deviceValuator *)(ev + n);
-            if (dv->type != DeviceValuator)
-            {
+            if (dv->type != DeviceValuator) {
                 client->errorValue = dv->type;
                 return BadValue;
             }
-            if (dv->first_valuator != base)
-            {
+            if (dv->first_valuator != base) {
                 client->errorValue = dv->first_valuator;
                 return BadValue;
             }
-            switch(dv->num_valuators)
-            {
-                case 6: valuators[base + 5] = dv->valuator5;
-                case 5: valuators[base + 4] = dv->valuator4;
-                case 4: valuators[base + 3] = dv->valuator3;
-                case 3: valuators[base + 2] = dv->valuator2;
-                case 2: valuators[base + 1] = dv->valuator1;
-                case 1: valuators[base] = dv->valuator0;
+            switch (dv->num_valuators) {
+            case 6:
+                valuators[base + 5] = dv->valuator5;
+            case 5:
+                valuators[base + 4] = dv->valuator4;
+            case 4:
+                valuators[base + 3] = dv->valuator3;
+            case 3:
+                valuators[base + 2] = dv->valuator2;
+            case 2:
+                valuators[base + 1] = dv->valuator1;
+            case 1:
+                valuators[base] = dv->valuator0;
                         break;
                 default:
                         client->errorValue = dv->num_valuators;
@@ -284,20 +273,18 @@ ProcXTestFakeInput(ClientPtr client)
             base += dv->num_valuators;
             numValuators += dv->num_valuators;
 
-            if (firstValuator + numValuators > dev->valuator->numAxes)
-            {
+            if (firstValuator + numValuators > dev->valuator->numAxes) {
                 client->errorValue = dv->num_valuators;
                 return BadValue;
             }
         }
         type = type - XI_DeviceKeyPress + KeyPress;
 
-    } else
-    {
+    }
+    else {
         if (nev != 1)
             return BadLength;
-        switch (type)
-        {
+        switch (type) {
             case KeyPress:
             case KeyRelease:
                 dev = PickKeyboard(client);
@@ -324,8 +311,7 @@ ProcXTestFakeInput(ClientPtr client)
     }
 
     /* If the event has a time set, wait for it to pass */
-    if (ev->u.keyButtonPointer.time)
-    {
+    if (ev->u.keyButtonPointer.time) {
         TimeStamp activateTime;
         CARD32 ms;
 
@@ -339,13 +325,11 @@ ProcXTestFakeInput(ClientPtr client)
         /* see mbuf.c:QueueDisplayRequest (from the deprecated Multibuffer
          * extension) for code similar to this */
 
-        if (!ClientSleepUntil(client, &activateTime, NULL, NULL))
-        {
+        if (!ClientSleepUntil(client, &activateTime, NULL, NULL)) {
             return BadAlloc;
         }
         /* swap the request back so we can simply re-execute it */
-        if (client->swapped)
-        {
+        if (client->swapped) {
             (void) XTestSwapFakeInput(client, (xReq *)stuff);
             swaps(&stuff->length);
         }
@@ -354,16 +338,14 @@ ProcXTestFakeInput(ClientPtr client)
         return Success;
     }
 
-    switch (type)
-    {
+    switch (type) {
         case KeyPress:
         case KeyRelease:
             if (!dev->key)
                 return BadDevice;
 
             if (ev->u.u.detail < dev->key->xkbInfo->desc->min_key_code ||
-                ev->u.u.detail > dev->key->xkbInfo->desc->max_key_code)
-            {
+            ev->u.u.detail > dev->key->xkbInfo->desc->max_key_code) {
                 client->errorValue = ev->u.u.detail;
                 return BadValue;
             }
@@ -374,20 +356,17 @@ ProcXTestFakeInput(ClientPtr client)
             if (!dev->valuator)
                 return BadDevice;
 
-            if (!(extension || ev->u.keyButtonPointer.root == None))
-            {
+        if (!(extension || ev->u.keyButtonPointer.root == None)) {
                 rc = dixLookupWindow(&root, ev->u.keyButtonPointer.root,
                                      client, DixGetAttrAccess);
                 if (rc != Success)
                     return rc;
-                if (root->parent)
-                {
+            if (root->parent) {
                     client->errorValue = ev->u.keyButtonPointer.root;
                     return BadValue;
                 }
             }
-            if (ev->u.u.detail != xTrue && ev->u.u.detail != xFalse)
-            {
+        if (ev->u.u.detail != xTrue && ev->u.u.detail != xFalse) {
                 client->errorValue = ev->u.u.detail;
                 return BadValue;
             }
@@ -400,8 +379,7 @@ ProcXTestFakeInput(ClientPtr client)
             if (!dev->button)
                 return BadDevice;
 
-            if (!ev->u.u.detail || ev->u.u.detail > dev->button->numButtons)
-            {
+        if (!ev->u.u.detail || ev->u.u.detail > dev->button->numButtons) {
                 client->errorValue = ev->u.u.detail;
                 return BadValue;
             }
@@ -423,7 +401,8 @@ ProcXTestFakeInput(ClientPtr client)
             break;
         case KeyPress:
         case KeyRelease:
-            nevents = GetKeyboardEvents(xtest_evlist, dev, type, ev->u.u.detail, NULL);
+        nevents =
+            GetKeyboardEvents(xtest_evlist, dev, type, ev->u.u.detail, NULL);
             break;
     }
 
@@ -441,8 +420,7 @@ ProcXTestGrabControl(ClientPtr client)
     REQUEST(xXTestGrabControlReq);
 
     REQUEST_SIZE_MATCH(xXTestGrabControlReq);
-    if ((stuff->impervious != xTrue) && (stuff->impervious != xFalse))
-    {
+    if ((stuff->impervious != xTrue) && (stuff->impervious != xFalse)) {
         client->errorValue = stuff->impervious;
         return BadValue;
     }
@@ -457,8 +435,7 @@ static int
 ProcXTestDispatch (ClientPtr client)
 {
     REQUEST(xReq);
-    switch (stuff->data)
-    {
+    switch (stuff->data) {
         case X_XTestGetVersion:
             return ProcXTestGetVersion(client);
         case X_XTestCompareCursor:
@@ -504,8 +481,7 @@ XTestSwapFakeInput(ClientPtr client, xReq *req)
     EventSwapPtr proc;
 
     nev = ((req->length << 2) - sizeof(xReq)) / sizeof(xEvent);
-    for (ev = (xEvent *)&req[1]; --nev >= 0; ev++)
-    {
+    for (ev = (xEvent *) &req[1]; --nev >= 0; ev++) {
         /* Swap event */
         proc = EventSwapVector[ev->u.u.type & 0177];
         /* no swapping proc; invalid event type? */
@@ -523,6 +499,7 @@ static int
 SProcXTestFakeInput(ClientPtr client)
 {
 	int n;
+
     REQUEST(xReq);
 
     swaps(&stuff->length);
@@ -546,8 +523,7 @@ static int
 SProcXTestDispatch (ClientPtr client)
 {
     REQUEST(xReq);
-    switch (stuff->data)
-    {
+    switch (stuff->data) {
         case X_XTestGetVersion:
             return SProcXTestGetVersion(client);
         case X_XTestCompareCursor:
@@ -565,7 +541,8 @@ SProcXTestDispatch (ClientPtr client)
  * Allocate an virtual slave device for xtest events, this
  * is a slave device to inputInfo master devices
  */
-void InitXTestDevices(void)
+void
+InitXTestDevices(void)
 {
     if(AllocXTestDevice(serverClient, "Virtual core",
                        &xtestpointer, &xtestkeyboard,
@@ -575,11 +552,11 @@ void InitXTestDevices(void)
     if (ActivateDevice(xtestpointer, TRUE) != Success ||
         ActivateDevice(xtestkeyboard, TRUE) != Success)
         FatalError("Failed to activate XTest core devices.");
-    if (!EnableDevice(xtestpointer, TRUE) ||
-        !EnableDevice(xtestkeyboard, TRUE))
+    if (!EnableDevice(xtestpointer, TRUE) || !EnableDevice(xtestkeyboard, TRUE))
         FatalError("Failed to enable XTest core devices.");
 
     AttachDevice(NULL, xtestpointer, inputInfo.pointer);
+
     AttachDevice(NULL, xtestkeyboard, inputInfo.keyboard);
 }
 
@@ -603,7 +580,8 @@ DeviceSetXTestProperty(DeviceIntPtr dev, Atom property,
  * This only creates the pair, Activate/Enable Device
  * still need to be called.
  */
-int AllocXTestDevice (ClientPtr client, const char* name,
+int
+AllocXTestDevice(ClientPtr client, const char *name,
                      DeviceIntPtr* ptr, DeviceIntPtr* keybd,
                      DeviceIntPtr master_ptr, DeviceIntPtr master_keybd)
 {
@@ -614,7 +592,9 @@ int AllocXTestDevice (ClientPtr client, const char* name,
     if (asprintf(&xtestname, "%s XTEST", name) == -1)
 	return BadAlloc;
 
-    retval = AllocDevicePair( client, xtestname, ptr, keybd, CorePointerProc, CoreKeyboardProc, FALSE);
+    retval =
+        AllocDevicePair(client, xtestname, ptr, keybd, CorePointerProc,
+                        CoreKeyboardProc, FALSE);
     if ( retval == Success ){
 	(*ptr)->xtest_master_id = master_ptr->id;
 	(*keybd)->xtest_master_id = master_keybd->id;
@@ -622,12 +602,16 @@ int AllocXTestDevice (ClientPtr client, const char* name,
         XIChangeDeviceProperty(*ptr, XIGetKnownProperty(XI_PROP_XTEST_DEVICE),
                 XA_INTEGER, 8, PropModeReplace, 1, &dummy,
                 FALSE);
-        XISetDevicePropertyDeletable(*ptr, XIGetKnownProperty(XI_PROP_XTEST_DEVICE), FALSE);
+        XISetDevicePropertyDeletable(*ptr,
+                                     XIGetKnownProperty(XI_PROP_XTEST_DEVICE),
+                                     FALSE);
         XIRegisterPropertyHandler(*ptr, DeviceSetXTestProperty, NULL, NULL);
         XIChangeDeviceProperty(*keybd, XIGetKnownProperty(XI_PROP_XTEST_DEVICE),
                 XA_INTEGER, 8, PropModeReplace, 1, &dummy,
                 FALSE);
-        XISetDevicePropertyDeletable(*keybd, XIGetKnownProperty(XI_PROP_XTEST_DEVICE), FALSE);
+        XISetDevicePropertyDeletable(*keybd,
+                                     XIGetKnownProperty(XI_PROP_XTEST_DEVICE),
+                                     FALSE);
         XIRegisterPropertyHandler(*keybd, DeviceSetXTestProperty, NULL, NULL);
     }
 
@@ -664,8 +648,7 @@ GetXTestDevice(DeviceIntPtr master)
 {
     DeviceIntPtr it;
 
-    for (it = inputInfo.devices; it; it = it->next)
-    {
+    for (it = inputInfo.devices; it; it = it->next) {
         if (IsXTestDevice(it, master))
             return it;
     }
