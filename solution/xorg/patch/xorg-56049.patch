diff --git a/os/access.c b/os/access.c
index b609442..550f2ed 100644
--- a/os/access.c
+++ b/os/access.c
@@ -165,7 +165,6 @@ SOFTWARE.
 
 #endif /* WIN32 */
 
-
 #define X_INCLUDE_NETDB_H
 #include <X11/Xos_r.h>
 
@@ -236,8 +235,7 @@ static void siTypesInitialize(void);
 void
 EnableLocalHost (void)
 {
-    if (!UsingXdmcp)
-    {
+    if (!UsingXdmcp) {
 	LocalHostEnabled = TRUE;
 	AddLocalHosts ();
     }
@@ -255,7 +253,8 @@ DisableLocalHost (void)
 	LocalHostEnabled = FALSE;
     for (self = selfhosts; self; self = self->next) {
       if (!self->requested)		/* Fix for XFree86 bug #156 */
-	(void) RemoveHost ((ClientPtr)NULL, self->family, self->len, (pointer)self->addr);
+            (void) RemoveHost((ClientPtr) NULL, self->family, self->len,
+                              (pointer) self->addr);
     }
 }
 
@@ -271,7 +270,6 @@ AccessUsingXdmcp (void)
     LocalHostEnabled = FALSE;
 }
 
-
 #if  defined(SVR4) && !defined(sun)  && defined(SIOCGIFCONF) && !defined(USE_SIOCGLIFCONF)
 
 /* Deal with different SIOCGIFCONF ioctl semantics on these OSs */
@@ -285,13 +283,11 @@ ifioctl (int fd, int cmd, char *arg)
     memset((char *) &ioc, 0, sizeof(ioc));
     ioc.ic_cmd = cmd;
     ioc.ic_timout = 0;
-    if (cmd == SIOCGIFCONF)
-    {
+    if (cmd == SIOCGIFCONF) {
 	ioc.ic_len = ((struct ifconf *) arg)->ifc_len;
 	ioc.ic_dp = ((struct ifconf *) arg)->ifc_buf;
     }
-    else
-    {
+    else {
 	ioc.ic_len = sizeof(struct ifreq);
 	ioc.ic_dp = arg;
     }
@@ -347,6 +343,7 @@ DefineSelf (int fd)
     struct	sockaddr_in	*inetaddr;
     struct	sockaddr_in6	*inet6addr;
     struct sockaddr_in broad_addr;
+
 #ifdef XTHREADS_NEEDS_BYNAMEPARAMS
     _Xgethostbynameparams hparams;
 #endif
@@ -363,8 +360,7 @@ DefineSelf (int fd)
 #endif
 
     hp = _XGethostbyname(name.nodename, hparams);
-    if (hp != NULL)
-    {
+    if (hp != NULL) {
 	saddr.sa.sa_family = hp->h_addrtype;
 	switch (hp->h_addrtype) {
 	case AF_INET:
@@ -383,17 +379,14 @@ DefineSelf (int fd)
 	    goto DefineLocalHost;
 	}
 	family = ConvertAddr ( &(saddr.sa), &len, (pointer *)&addr);
-	if ( family != -1 && family != FamilyLocal )
-	{
+        if (family != -1 && family != FamilyLocal) {
 	    for (host = selfhosts;
 		 host && !addrEqual (family, addr, len, host);
 		 host = host->next) ;
-	    if (!host)
-	    {
+            if (!host) {
 		/* add this host to the host list.	*/
 		MakeHost(host,len)
-		if (host)
-		{
+                    if (host) {
 		    host->family = family;
 		    host->len = len;
 		    memcpy ( host->addr, addr, len);
@@ -411,8 +404,7 @@ DefineSelf (int fd)
 		      ((addr[0] == 127) ||
 		       (addr[0] == 0 && addr[1] == 0 &&
 			addr[2] == 0 && addr[3] == 0)))
-		      )
-		{
+                    ) {
 		    XdmcpRegisterConnection (family, (char *)addr, len);
 		    broad_addr = *inetaddr;
 		    ((struct sockaddr_in *) &broad_addr)->sin_addr.s_addr =
@@ -422,8 +414,7 @@ DefineSelf (int fd)
 		}
 #if defined(IPv6) && defined(AF_INET6)
 		else if (family == FamilyInternet6 &&
-		  !(IN6_IS_ADDR_LOOPBACK((struct in6_addr *)addr)))
-		{
+                         !(IN6_IS_ADDR_LOOPBACK((struct in6_addr *) addr))) {
 		    XdmcpRegisterConnection (family, (char *)addr, len);
 		}
 #endif
@@ -437,13 +428,10 @@ DefineSelf (int fd)
      */
 DefineLocalHost:
     for (host = selfhosts;
-	 host && !addrEqual(FamilyLocalHost, "", 0, host);
-	 host = host->next);
-    if (!host)
-    {
+         host && !addrEqual(FamilyLocalHost, "", 0, host); host = host->next);
+    if (!host) {
 	MakeHost(host, 0);
-	if (host)
-	{
+        if (host) {
 	    host->family = FamilyLocalHost;
 	    host->len = 0;
 	    /* Nothing to store in host->addr */
@@ -495,10 +483,12 @@ DefineSelf (int fd)
 {
 #ifndef HAVE_GETIFADDRS
     char 		*cp, *cplim;
+
 # ifdef USE_SIOCGLIFCONF
     struct sockaddr_storage buf[16];
     struct lifconf	ifc;
     register struct lifreq *ifr;
+
 #  ifdef SIOCGLIFNUM
     struct lifnum	ifn;
 #  endif
@@ -560,8 +550,7 @@ DefineSelf (int fd)
 
     cplim = (char *) IFC_IFC_REQ + IFC_IFC_LEN;
     
-    for (cp = (char *) IFC_IFC_REQ; cp < cplim; cp += ifr_size (ifr))
-    {
+    for (cp = (char *) IFC_IFC_REQ; cp < cplim; cp += ifr_size(ifr)) {
 	ifr = (ifr_type *) cp;
 	len = ifraddr_size (IFR_IFR_ADDR);
 	family = ConvertAddr ((struct sockaddr *) &IFR_IFR_ADDR, 
@@ -573,14 +562,11 @@ DefineSelf (int fd)
 	    in6_fillscopeid((struct sockaddr_in6 *)&IFR_IFR_ADDR);
 #endif
         for (host = selfhosts;
- 	     host && !addrEqual (family, addr, len, host);
-	     host = host->next)
-	    ;
+             host && !addrEqual(family, addr, len, host); host = host->next);
         if (host)
 	    continue;
 	MakeHost(host,len)
-	if (host)
-	{
+            if (host) {
 	    host->family = family;
 	    host->len = len;
 	    memcpy(host->addr, addr, len);
@@ -610,8 +596,7 @@ DefineSelf (int fd)
 	     * on the other end of the wire
 	     */
 	    if (family == FamilyInternet &&
-		addr[0] == 127 && addr[1] == 0 &&
-		addr[2] == 0 && addr[3] == 1)
+                addr[0] == 127 && addr[1] == 0 && addr[2] == 0 && addr[3] == 1)
 		continue;
 #if defined(IPv6) && defined(AF_INET6)
 	    else if (family == FamilyInternet6 && 
@@ -625,8 +610,7 @@ DefineSelf (int fd)
 	     * not useful on the other end of the wire.
 	     */
 	    if (len == 4 &&
-		addr[0] == 0 && addr[1] == 0 &&
-		addr[2] == 0 && addr[3] == 0)
+                addr[0] == 0 && addr[1] == 0 && addr[2] == 0 && addr[3] == 0)
 		continue;
 
 	    XdmcpRegisterConnection (family, (char *)addr, len);
@@ -649,8 +633,7 @@ DefineSelf (int fd)
 		if (ioctl (fd, SIOCGLIFFLAGS, (char *) &broad_req) != -1 &&
 		    (broad_req.lifr_flags & IFF_BROADCAST) &&
 		    (broad_req.lifr_flags & IFF_UP)
-		    )
-		{
+                    ) {
 		    broad_req = *ifr;
 		    if (ioctl (fd, SIOCGLIFBRDADDR, &broad_req) != -1)
 			broad_addr = broad_req.lifr_broadaddr;
@@ -669,8 +652,7 @@ DefineSelf (int fd)
 		if (ifioctl (fd, SIOCGIFFLAGS, (pointer) &broad_req) != -1 &&
 		    (broad_req.ifr_flags & IFF_BROADCAST) &&
 		    (broad_req.ifr_flags & IFF_UP)
-		    )
-		{
+                    ) {
 		    broad_req = *ifr;
 		    if (ifioctl (fd, SIOCGIFBRDADDR, (pointer) &broad_req) != -1)
 			broad_addr = broad_req.ifr_addr;
@@ -707,8 +689,7 @@ DefineSelf (int fd)
 
 	for (host = selfhosts; 
 	     host != NULL && !addrEqual(family, addr, len, host);
-	     host = host->next) 
-	    ;
+             host = host->next);
 	if (host != NULL) 
 	    continue;
 	MakeHost(host, len);
@@ -739,8 +720,7 @@ DefineSelf (int fd)
 		    continue;
 
 	    if (family == FamilyInternet && 
-		addr[0] == 127 && addr[1] == 0 &&
-		addr[2] == 0 && addr[3] == 1) 
+                addr[0] == 127 && addr[1] == 0 && addr[2] == 0 && addr[3] == 1)
 		continue;
 
 	    /*
@@ -749,8 +729,7 @@ DefineSelf (int fd)
 	     * not useful on the other end of the wire.
 	     */
 	    if (len == 4 &&
-		addr[0] == 0 && addr[1] == 0 &&
-		addr[2] == 0 && addr[3] == 0)
+                addr[0] == 0 && addr[1] == 0 && addr[2] == 0 && addr[3] == 0)
 		continue;
 #if defined(IPv6) && defined(AF_INET6)
 	    else if (family == FamilyInternet6 && 
@@ -764,10 +743,9 @@ DefineSelf (int fd)
 		continue;
 #endif
 	    if ((ifr->ifa_flags & IFF_BROADCAST) &&
-		(ifr->ifa_flags & IFF_UP) &&
-                ifr->ifa_broadaddr)
-		XdmcpRegisterBroadcastAddress(
-		    (struct sockaddr_in *) ifr->ifa_broadaddr);
+                (ifr->ifa_flags & IFF_UP) && ifr->ifa_broadaddr)
+                XdmcpRegisterBroadcastAddress((struct sockaddr_in *) ifr->
+                                              ifa_broadaddr);
 	    else
 		continue;
 	}
@@ -781,13 +759,10 @@ DefineSelf (int fd)
      * add something of FamilyLocalHost
      */
     for (host = selfhosts;
-	 host && !addrEqual(FamilyLocalHost, "", 0, host);
-	 host = host->next);
-    if (!host)
-    {
+         host && !addrEqual(FamilyLocalHost, "", 0, host); host = host->next);
+    if (!host) {
 	MakeHost(host, 0);
-	if (host)
-	{
+        if (host) {
 	    host->family = FamilyLocalHost;
 	    host->len = 0;
 	    /* Nothing to store in host->addr */
@@ -809,8 +784,7 @@ AugmentSelf(pointer from, int len)
     family = ConvertAddr(from, &len, (pointer *)&addr);
     if (family == -1 || family == FamilyLocal)
 	return;
-    for (host = selfhosts; host; host = host->next)
-    {
+    for (host = selfhosts; host; host = host->next) {
 	if (addrEqual(family, addr, len, host))
 	    return;
     }
@@ -850,6 +824,7 @@ ResetHosts (char *display)
     FILE		*fd;
     char		*ptr;
     int                 i, hostlen;
+
 #if (defined(TCPCONN) || defined(STREAMSCONN) ) && \
      (!defined(IPv6) || !defined(AF_INET6))
     union {
@@ -866,8 +841,7 @@ ResetHosts (char *display)
     siTypesInitialize();
     AccessEnabled = defeatAccessControl ? FALSE : DEFAULT_ACCESS_CONTROL;
     LocalHostEnabled = FALSE;
-    while ((host = validhosts) != 0)
-    {
+    while ((host = validhosts) != 0) {
         validhosts = host->next;
         FreeHost (host);
     }
@@ -885,10 +859,8 @@ ResetHosts (char *display)
     snprintf(fname, sizeof(fname), ETC_HOST_PREFIX "%s" ETC_HOST_SUFFIX, 
 	     display);
 
-    if ((fd = fopen (fname, "r")) != 0)
-    {
-        while (fgets (ohostname, sizeof (ohostname), fd))
-	{
+    if ((fd = fopen(fname, "r")) != 0) {
+        while (fgets(ohostname, sizeof(ohostname), fd)) {
 	family = FamilyWild;
 	if (*ohostname == '#')
 	    continue;
@@ -898,43 +870,36 @@ ResetHosts (char *display)
         for (i = 0; i < hostlen; i++)
 	    lhostname[i] = tolower(ohostname[i]);
 	hostname = ohostname;
-	if (!strncmp("local:", lhostname, 6))
-	{
+            if (!strncmp("local:", lhostname, 6)) {
 	    family = FamilyLocalHost;
 	    NewHost(family, "", 0, FALSE);
 	    LocalHostRequested = TRUE;	/* Fix for XFree86 bug #156 */
 	}
 #if defined(TCPCONN) || defined(STREAMSCONN)
-	else if (!strncmp("inet:", lhostname, 5))
-	{
+            else if (!strncmp("inet:", lhostname, 5)) {
 	    family = FamilyInternet;
 	    hostname = ohostname + 5;
 	}
 #if defined(IPv6) && defined(AF_INET6)
-	else if (!strncmp("inet6:", lhostname, 6))
-	{
+            else if (!strncmp("inet6:", lhostname, 6)) {
 	    family = FamilyInternet6;
 	    hostname = ohostname + 6;
 	}
 #endif
 #endif
 #ifdef SECURE_RPC
-	else if (!strncmp("nis:", lhostname, 4))
-	{
+            else if (!strncmp("nis:", lhostname, 4)) {
 	    family = FamilyNetname;
 	    hostname = ohostname + 4;
 	}
 #endif
-	else if (!strncmp("si:", lhostname, 3))
-	{
+            else if (!strncmp("si:", lhostname, 3)) {
 	    family = FamilyServerInterpreted;
 	    hostname = ohostname + 3;
 	    hostlen -= 3;
 	}
 
-
-	if (family == FamilyServerInterpreted) 
-	{
+            if (family == FamilyServerInterpreted) {
 	    len = siCheckAddr(hostname, hostlen);
 	    if (len >= 0) {
 		NewHost(family, hostname, len, FALSE);
@@ -942,10 +907,10 @@ ResetHosts (char *display)
 	}
 	else
 #ifdef SECURE_RPC
-	if ((family == FamilyNetname) || (strchr(hostname, '@')))
-	{
+            if ((family == FamilyNetname) || (strchr(hostname, '@'))) {
 	    SecureRPCInit ();
-	    (void) NewHost (FamilyNetname, hostname, strlen (hostname), FALSE);
+                (void) NewHost(FamilyNetname, hostname, strlen(hostname),
+                               FALSE);
 	}
 	else
 #endif /* SECURE_RPC */
@@ -953,8 +918,7 @@ ResetHosts (char *display)
 	{
 #if defined(IPv6) && defined(AF_INET6)
 	    if ( (family == FamilyInternet) || (family == FamilyInternet6) ||
-		 (family == FamilyWild) ) 
-            {
+                    (family == FamilyWild)) {
 		struct addrinfo *addresses;
 		struct addrinfo *a;
 		int f;
@@ -962,7 +926,8 @@ ResetHosts (char *display)
 		if (getaddrinfo(hostname, NULL, NULL, &addresses) == 0) {
 		    for (a = addresses ; a != NULL ; a = a->ai_next) {
 			len = a->ai_addrlen;
-			f = ConvertAddr(a->ai_addr,&len,(pointer *)&addr);
+                            f = ConvertAddr(a->ai_addr, &len,
+                                            (pointer *) &addr);
 			if ( (family == f) || 
 			     ((family == FamilyWild) && (f != -1)) ) {
 			    NewHost(f, addr, len, FALSE);
@@ -980,12 +945,12 @@ ResetHosts (char *display)
     	    /* host name */
     	    if ((family == FamilyInternet &&
 		 ((hp = _XGethostbyname(hostname, hparams)) != 0)) ||
-		((hp = _XGethostbyname(hostname, hparams)) != 0))
-	    {
+                    ((hp = _XGethostbyname(hostname, hparams)) != 0)) {
     		saddr.sa.sa_family = hp->h_addrtype;
 		len = sizeof(saddr.sa);
-    		if ((family = ConvertAddr (&saddr.sa, &len, (pointer *)&addr)) != -1)
-		{
+                    if ((family =
+                         ConvertAddr(&saddr.sa, &len,
+                                     (pointer *) &addr)) != -1) {
 #ifdef h_addr				/* new 4.3bsd version of gethostent */
 		    char **list;
 
@@ -993,7 +958,8 @@ ResetHosts (char *display)
 		    for (list = hp->h_addr_list; *list; list++)
 			(void) NewHost (family, (pointer)*list, len, FALSE);
 #else
-    		    (void) NewHost (family, (pointer)hp->h_addr, len, FALSE);
+                        (void) NewHost(family, (pointer) hp->h_addr, len,
+                                       FALSE);
 #endif
 		}
     	    }
@@ -1019,22 +985,18 @@ ComputeLocalClient(ClientPtr client)
     if (!oc->trans_conn)
         return FALSE;
 
-    if (!_XSERVTransGetPeerAddr (oc->trans_conn, &notused, &alen, &from))
-    {
+    if (!_XSERVTransGetPeerAddr(oc->trans_conn, &notused, &alen, &from)) {
 	family = ConvertAddr ((struct sockaddr *) from,
 	    &alen, (pointer *)&addr);
-	if (family == -1)
-	{
+        if (family == -1) {
 	    free(from);
 	    return FALSE;
 	}
-	if (family == FamilyLocal)
-	{
+        if (family == FamilyLocal) {
 	    free(from);
 	    return TRUE;
 	}
-	for (host = selfhosts; host; host = host->next)
-	{
+        for (host = selfhosts; host; host = host->next) {
 	    if (addrEqual (family, addr, alen, host)) {
 		free(from);
 		return TRUE;
@@ -1045,7 +1007,8 @@ ComputeLocalClient(ClientPtr client)
     return FALSE;
 }
 
-Bool LocalClient(ClientPtr client)
+Bool
+LocalClient(ClientPtr client)
 {
     if (!client->osPrivate)
         return FALSE;
@@ -1093,6 +1056,7 @@ GetLocalClientCreds(ClientPtr client, LocalClientCredRec **lccp)
     int fd;
     XtransConnInfo ci;
     LocalClientCredRec *lcc;
+
 #ifdef HAVE_GETPEEREID
     uid_t uid;
     gid_t gid;
@@ -1156,13 +1120,16 @@ GetLocalClientCreds(ClientPtr client, LocalClientCredRec **lccp)
 	lcc->pSuppGids = calloc(lcc->nSuppGids, sizeof(int));
 	if (lcc->pSuppGids == NULL) {
 	    lcc->nSuppGids = 0;
-	} else {
+        }
+        else {
 	    int i;
+
 	    for (i = 0 ; i < lcc->nSuppGids; i++) {
 		(lcc->pSuppGids)[i] = (int) gids[i];
 	    }
 	}
-    } else {
+    }
+    else {
 	lcc->nSuppGids = 0;
     }
     ucred_free(peercred);
@@ -1216,9 +1183,7 @@ AuthorizedClient(ClientPtr client)
  * called from the dispatcher */
 
 int
-AddHost (ClientPtr	client,
-	 int            family,
-	 unsigned       length,        /* of bytes in pAddr */
+AddHost(ClientPtr client, int family, unsigned length,  /* of bytes in pAddr */
 	 const void *   pAddr)
 {
     int rc, len;
@@ -1244,8 +1209,7 @@ AddHost (ClientPtr	client,
     case FamilyDECnet:
     case FamilyChaos:
     case FamilyServerInterpreted:
-	if ((len = CheckAddr (family, pAddr, length)) < 0)
-	{
+        if ((len = CheckAddr(family, pAddr, length)) < 0) {
 	    client->errorValue = length;
 	    return BadValue;
 	}
@@ -1261,9 +1225,7 @@ AddHost (ClientPtr	client,
 }
 
 Bool
-ForEachHostInFamily (int	    family,
-		     Bool    (*func)(
-			 unsigned char * /* addr */,
+ForEachHostInFamily(int family, Bool (*func) (unsigned char * /* addr */ ,
 			 short           /* len */,
 			 pointer         /* closure */),
 		     pointer closure)
@@ -1279,15 +1241,11 @@ ForEachHostInFamily (int	    family,
 /* Add a host to the access control list. This is the internal interface 
  * called when starting or resetting the server */
 static Bool
-NewHost (int		family,
-	 const void *	addr,
-	 int		len,
-	 int		addingLocalHosts)
+NewHost(int family, const void *addr, int len, int addingLocalHosts)
 {
     register HOST *host;
 
-    for (host = validhosts; host; host = host->next)
-    {
+    for (host = validhosts; host; host = host->next) {
         if (addrEqual (family, addr, len, host))
 	    return TRUE;
     }
@@ -1313,10 +1271,7 @@ NewHost (int		family,
 /* Remove a host from the access control list */
 
 int
-RemoveHost (
-    ClientPtr		client,
-    int                 family,
-    unsigned            length,        /* of bytes in pAddr */
+RemoveHost(ClientPtr client, int family, unsigned length,       /* of bytes in pAddr */
     pointer             pAddr)
 {
     int rc, len;
@@ -1342,8 +1297,7 @@ RemoveHost (
     case FamilyDECnet:
     case FamilyChaos:
     case FamilyServerInterpreted:
-    	if ((len = CheckAddr (family, pAddr, length)) < 0)
-    	{
+        if ((len = CheckAddr(family, pAddr, length)) < 0) {
 	    client->errorValue = length;
             return BadValue;
     	}
@@ -1355,10 +1309,8 @@ RemoveHost (
     }
     for (prev = &validhosts;
          (host = *prev) && (!addrEqual (family, pAddr, len, host));
-         prev = &host->next)
-        ;
-    if (host)
-    {
+         prev = &host->next);
+    if (host) {
         *prev = host->next;
         FreeHost (host);
     }
@@ -1367,11 +1319,7 @@ RemoveHost (
 
 /* Get all hosts in the access control list */
 int
-GetHosts (
-    pointer		*data,
-    int			*pnHosts,
-    int			*pLen,
-    BOOL		*pEnabled)
+GetHosts(pointer *data, int *pnHosts, int *pLen, BOOL * pEnabled)
 {
     int			len;
     register int 	n = 0;
@@ -1380,20 +1328,16 @@ GetHosts (
     int			nHosts = 0;
 
     *pEnabled = AccessEnabled ? EnableAccess : DisableAccess;
-    for (host = validhosts; host; host = host->next)
-    {
+    for (host = validhosts; host; host = host->next) {
 	nHosts++;
 	n += pad_to_int32(host->len) + sizeof(xHostEntry);
     }
-    if (n)
-    {
+    if (n) {
         *data = ptr = malloc(n);
-	if (!ptr)
-	{
+        if (!ptr) {
 	    return BadAlloc;
 	}
-        for (host = validhosts; host; host = host->next)
-	{
+        for (host = validhosts; host; host = host->next) {
 	    len = host->len;
 	    ((xHostEntry *)ptr)->family = host->family;
 	    ((xHostEntry *)ptr)->length = len;
@@ -1401,7 +1345,8 @@ GetHosts (
 	    memcpy (ptr, host->addr, len);
 	    ptr += pad_to_int32(len);
         }
-    } else {
+    }
+    else {
 	*data = NULL;
     }
     *pnHosts = nHosts;
@@ -1411,17 +1356,12 @@ GetHosts (
 
 /* Check for valid address family and length, and return address length. */
 
-/*ARGSUSED*/
-static int
-CheckAddr (
-    int			family,
-    const void *	pAddr,
-    unsigned		length)
+ /*ARGSUSED*/ static int
+CheckAddr(int family, const void *pAddr, unsigned length)
 {
     int	len;
 
-    switch (family)
-    {
+    switch (family) {
 #if defined(TCPCONN) || defined(STREAMSCONN)
       case FamilyInternet:
 	if (length == sizeof (struct in_addr))
@@ -1451,10 +1391,7 @@ CheckAddr (
  * Returns 1 if host is invalid, 0 if we've found it. */
 
 int
-InvalidHost (
-    register struct sockaddr	*saddr,
-    int				len,
-    ClientPtr			client)
+InvalidHost(register struct sockaddr *saddr, int len, ClientPtr client)
 {
     int 			family;
     pointer			addr;
@@ -1465,33 +1402,30 @@ InvalidHost (
     family = ConvertAddr (saddr, &len, (pointer *)&addr);
     if (family == -1)
         return 1;
-    if (family == FamilyLocal)
-    {
-	if (!LocalHostEnabled)
- 	{
+    if (family == FamilyLocal) {
+        if (!LocalHostEnabled) {
 	    /*
 	     * check to see if any local address is enabled.  This 
 	     * implicitly enables local connections.
 	     */
-	    for (selfhost = selfhosts; selfhost; selfhost=selfhost->next)
- 	    {
-		for (host = validhosts; host; host=host->next)
-		{
+            for (selfhost = selfhosts; selfhost; selfhost = selfhost->next) {
+                for (host = validhosts; host; host = host->next) {
 		    if (addrEqual (selfhost->family, selfhost->addr,
 				   selfhost->len, host))
 			return 0;
 		}
 	    }
-	} else
+        }
+        else
 	    return 0;
     }
-    for (host = validhosts; host; host = host->next)
-    {
+    for (host = validhosts; host; host = host->next) {
 	if (host->family == FamilyServerInterpreted) {
 	    if (siAddrMatch (family, addr, len, host, client)) {
 		return 0;
 	    }
-	} else {
+        }
+        else {
 	    if (addrEqual (family, addr, len, host))
 		return 0;
 	}
@@ -1501,15 +1435,11 @@ InvalidHost (
 }
 
 static int
-ConvertAddr (
-    register struct sockaddr	*saddr,
-    int				*len,
-    pointer			*addr)
+ConvertAddr(register struct sockaddr *saddr, int *len, pointer *addr)
 {
     if (*len == 0)
         return FamilyLocal;
-    switch (saddr->sa_family)
-    {
+    switch (saddr->sa_family) {
     case AF_UNSPEC:
 #if defined(UNIXCONN) || defined(LOCALCONN)
     case AF_UNIX:
@@ -1528,11 +1458,13 @@ ConvertAddr (
     case AF_INET6: 
     {
 	struct sockaddr_in6 *saddr6 = (struct sockaddr_in6 *) saddr;
+
 	if (IN6_IS_ADDR_V4MAPPED(&(saddr6->sin6_addr))) {
 	    *len = sizeof (struct in_addr);
 	    *addr = (pointer) &(saddr6->sin6_addr.s6_addr[12]);
 	    return FamilyInternet;
-	} else {
+        }
+        else {
 	    *len = sizeof (struct in6_addr);
 	    *addr = (pointer) &(saddr6->sin6_addr);
 	    return FamilyInternet6;
@@ -1546,11 +1478,10 @@ ConvertAddr (
 }
 
 int
-ChangeAccessControl(
-    ClientPtr client,
-    int fEnabled)
+ChangeAccessControl(ClientPtr client, int fEnabled)
 {
     int rc = AuthorizedClient(client);
+
     if (rc != Success)
 	return rc;
     AccessEnabled = fEnabled;
@@ -1583,7 +1514,8 @@ GetAccessControl(void)
  * the initial implementation.
  */
 typedef Bool (*siAddrMatchFunc)(int family, pointer addr, int len, 
-  const char *siAddr, int siAddrlen, ClientPtr client, void *siTypePriv);
+                                 const char *siAddr, int siAddrlen,
+                                 ClientPtr client, void *siTypePriv);
 typedef int  (*siCheckAddrFunc)(const char *addrString, int length, 
   void *siTypePriv);
 
@@ -1647,13 +1579,13 @@ siAddrMatch(int family, pointer addr, int len, HOST *host, ClientPtr client)
 	    if (strcmp((char *) host->addr, s->typeName) == 0) {
 		addrlen = host->len - (strlen((char *)host->addr) + 1);
 		matches = s->addrMatch(family, addr, len, 
-		  valueString + 1, addrlen, client, s->typePriv);
+                                       valueString + 1, addrlen, client,
+                                       s->typePriv);
 		break;
 	    }
 	}
 #ifdef FAMILY_SI_DEBUG
-	ErrorF(
-	    "Xserver: siAddrMatch(): type = %s, value = %*.*s -- %s\n",
+        ErrorF("Xserver: siAddrMatch(): type = %s, value = %*.*s -- %s\n",
 	      host->addr, addrlen, addrlen, valueString + 1,
 	      (matches) ? "accepted" : "rejected");
 #endif
@@ -1694,14 +1626,16 @@ siCheckAddr(const char *addrString, int length)
 
 	    if (s == NULL) {
 		resultMsg = "type not registered";
-	    } else {
+            }
+            else {
 		if (len == -1) 
 		    resultMsg = "rejected";
 		else
 		    resultMsg = "accepted";
 	    }
 
-	    ErrorF("Xserver: siCheckAddr(): type = %s, value = %*.*s, len = %d -- %s\n",
+            ErrorF
+                ("Xserver: siCheckAddr(): type = %s, value = %*.*s, len = %d -- %s\n",
 	      addrString, addrlen, addrlen, valueString + 1, len, resultMsg);
 	}
 #endif
@@ -1709,7 +1643,6 @@ siCheckAddr(const char *addrString, int length)
     return len;
 }
 
-
 /***
  * Hostname server-interpreted host type
  *
@@ -1735,7 +1668,8 @@ siCheckAddr(const char *addrString, int length)
 
 static Bool 
 siHostnameAddrMatch(int family, pointer addr, int len,
-  const char *siAddr, int siAddrLen, ClientPtr client, void *typePriv)
+                    const char *siAddr, int siAddrLen, ClientPtr client,
+                    void *typePriv)
 {
     Bool res = FALSE;
 
@@ -1772,6 +1706,7 @@ siHostnameAddrMatch(int family, pointer addr, int len,
 #else /* IPv6 not supported, use gethostbyname instead for IPv4 */
     if (family == FamilyInternet) {
 	register struct hostent *hp;
+
 #ifdef XTHREADS_NEEDS_BYNAMEPARAMS
 	_Xgethostbynameparams hparams;
 #endif
@@ -1812,7 +1747,6 @@ siHostnameAddrMatch(int family, pointer addr, int len,
     return res;
 }
 
-
 static int
 siHostnameCheckAddr(const char *valueString, int length, void *typePriv)
 {
@@ -1827,7 +1761,8 @@ siHostnameCheckAddr(const char *valueString, int length, void *typePriv)
 		    
     if ((length <= 0) || (length >= SI_HOSTNAME_MAXLEN)) {
 	len = -1;
-    } else {
+    }
+    else {
 	for (i = 0; i < length; i++) {
 	    char c = valueString[i];
 
@@ -1835,23 +1770,28 @@ siHostnameCheckAddr(const char *valueString, int length, void *typePriv)
 		if (dotAllowed == FALSE) {
 		    len = -1;
 		    break;
-		} else {
+                }
+                else {
 		    dotAllowed = FALSE;
 		    dashAllowed = FALSE;
 		}
-	    } else if (c == 0x2D) { /* '-' */
+            }
+            else if (c == 0x2D) {       /* '-' */
 		if (dashAllowed == FALSE) {
 		    len = -1;
 		    break;
-		} else {
+                }
+                else {
 		    dotAllowed = FALSE;
 		}
-	    } else if (((c >= 0x30) && (c <= 0x3A)) /* 0-9 */ ||
+            }
+            else if (((c >= 0x30) && (c <= 0x3A)) /* 0-9 */ ||
 		       ((c >= 0x61) && (c <= 0x7A)) /* a-z */ ||
 		       ((c >= 0x41) && (c <= 0x5A)) /* A-Z */) {
 		dotAllowed = TRUE;
 		dashAllowed = TRUE;
-	    } else { /* Invalid character */
+            }
+            else {              /* Invalid character */
 		len = -1;
 		break;
 	    }
@@ -1877,7 +1817,8 @@ siHostnameCheckAddr(const char *valueString, int length, void *typePriv)
 
 static Bool 
 siIPv6AddrMatch(int family, pointer addr, int len,
-  const char *siAddr, int siAddrlen, ClientPtr client, void *typePriv)
+                const char *siAddr, int siAddrlen, ClientPtr client,
+                void *typePriv)
 {
     struct in6_addr addr6;
     char addrbuf[SI_IPv6_MAXLEN];
@@ -1895,7 +1836,8 @@ siIPv6AddrMatch(int family, pointer addr, int len,
 
     if (memcmp(addr, &addr6, len) == 0) {
 	return TRUE;
-    } else {
+    }
+    else {
 	return FALSE;
     }
 }
@@ -1909,10 +1851,12 @@ siIPv6CheckAddr(const char *addrString, int length, void *typePriv)
     if (length < 3) {
 	/* Address is too short! */
 	len = -1;
-    } else if (length >= SI_IPv6_MAXLEN) {
+    }
+    else if (length >= SI_IPv6_MAXLEN) {
 	/* Address is too long! */
 	len = -1;
-    } else {
+    }
+    else {
 	/* Assume inet_pton is sufficient validation */
 	struct in6_addr addr6;
 	char addrbuf[SI_IPv6_MAXLEN];
@@ -1923,7 +1867,8 @@ siIPv6CheckAddr(const char *addrString, int length, void *typePriv)
 	if (inet_pton(AF_INET6, addrbuf, &addr6) != 1) {
 	    perror("inet_pton");
 	    len = -1;
-	} else {
+        }
+        else {
 	    len = length;
 	}
     }
@@ -1966,12 +1911,14 @@ siLocalCredGetId(const char *addr, int len, siLocalCredPrivPtr lcPriv, int *id)
 
     if (addr[0] == '#') { /* numeric id */
 	char *cp;
+
 	errno = 0;
 	*id = strtol(addrbuf + 1, &cp, 0);
 	if ((errno == 0) && (cp != (addrbuf+1))) {
 	    parsedOK = TRUE;
 	}
-    } else { /* non-numeric name */
+    }
+    else {                      /* non-numeric name */
 	if (lcPriv->credType == LOCAL_USER) {
 	    struct passwd *pw = getpwnam(addrbuf);
 
@@ -1979,7 +1926,8 @@ siLocalCredGetId(const char *addr, int len, siLocalCredPrivPtr lcPriv, int *id)
 		*id = (int) pw->pw_uid;
 		parsedOK = TRUE;
 	    }
-	} else { /* group */
+        }
+        else {                  /* group */
 	    struct group *gr = getgrnam(addrbuf);
 
 	    if (gr != NULL) {
@@ -1995,7 +1943,8 @@ siLocalCredGetId(const char *addr, int len, siLocalCredPrivPtr lcPriv, int *id)
 
 static Bool 
 siLocalCredAddrMatch(int family, pointer addr, int len,
-  const char *siAddr, int siAddrlen, ClientPtr client, void *typePriv)
+                     const char *siAddr, int siAddrlen, ClientPtr client,
+                     void *typePriv)
 {
     int siAddrId;
     LocalClientCredRec *lcc;
@@ -2022,7 +1971,8 @@ siLocalCredAddrMatch(int family, pointer addr, int len,
 	    FreeLocalClientCreds(lcc);
 	    return TRUE;
 	}
-    } else {
+    }
+    else {
 	if ((lcc->fieldsSet & LCC_GID_SET) && (lcc->egid == siAddrId)) {
 	    FreeLocalClientCreds(lcc);
 	    return TRUE;
