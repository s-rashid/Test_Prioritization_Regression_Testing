diff --git a/hw/vfb/InitOutput.c b/hw/vfb/InitOutput.c
index e1af5a4..2d679a5 100644
--- a/hw/vfb/InitOutput.c
+++ b/hw/vfb/InitOutput.c
@@ -75,8 +75,7 @@ from The Open Group.
 #define VFB_DEFAULT_LINEBIAS      0
 #define XWD_WINDOW_NAME_LEN      60
 
-typedef struct
-{
+typedef struct {
     int width;
     int paddedBytesWidth;
     int paddedWidth;
@@ -105,6 +104,7 @@ typedef struct
 
 static int vfbNumScreens;
 static vfbScreenInfo *vfbScreens;
+
 static vfbScreenInfo defaultScreenInfo = {
     .width  = VFB_DEFAULT_WIDTH,
     .height = VFB_DEFAULT_HEIGHT,
@@ -113,7 +113,9 @@ static vfbScreenInfo defaultScreenInfo = {
     .whitePixel = VFB_DEFAULT_WHITEPIXEL,
     .lineBias = VFB_DEFAULT_LINEBIAS,
 };
+
 static Bool vfbPixmapDepths[33];
+
 #ifdef HAVE_MMAP
 static char *pfbdir = NULL;
 #endif
@@ -130,11 +132,11 @@ static Bool Render = TRUE;
     if (needswap) { CARD32 _s = _src; cpswapl(_s, _dst); } \
     else _dst = _src;
 
-
 static void
 vfbInitializePixmapDepths(void)
 {
     int i;
+
     vfbPixmapDepths[1] = TRUE; /* always need bitmaps */
     for (i = 2; i <= 32; i++)
 	vfbPixmapDepths[i] = FALSE;
@@ -143,10 +145,14 @@ vfbInitializePixmapDepths(void)
 static int
 vfbBitsPerPixel(int depth)
 {
-    if (depth == 1) return 1;
-    else if (depth <= 8) return 8;
-    else if (depth <= 16) return 16;
-    else return 32;
+    if (depth == 1)
+        return 1;
+    else if (depth <= 8)
+        return 8;
+    else if (depth <= 16)
+        return 16;
+    else
+        return 32;
 }
 
 void
@@ -156,14 +162,11 @@ ddxGiveUp(enum ExitCode error)
 
     /* clean up the framebuffers */
 
-    switch (fbmemtype)
-    {
+    switch (fbmemtype) {
 #ifdef HAVE_MMAP
     case MMAPPED_FILE_FB: 
-	for (i = 0; i < vfbNumScreens; i++)
-	{
-	    if (-1 == unlink(vfbScreens[i].mmap_file))
-	    {
+        for (i = 0; i < vfbNumScreens; i++) {
+            if (-1 == unlink(vfbScreens[i].mmap_file)) {
 		perror("unlink");
 		ErrorF("unlink %s failed, %s",
 		       vfbScreens[i].mmap_file, strerror(errno));
@@ -177,10 +180,8 @@ ddxGiveUp(enum ExitCode error)
 	
 #ifdef HAS_SHM
     case SHARED_MEMORY_FB:
-	for (i = 0; i < vfbNumScreens; i++)
-	{
-	    if (-1 == shmdt((char *)vfbScreens[i].pXWDHeader))
-	    {
+        for (i = 0; i < vfbNumScreens; i++) {
+            if (-1 == shmdt((char *) vfbScreens[i].pXWDHeader)) {
 		perror("shmdt");
 		ErrorF("shmdt failed, %s", strerror(errno));
 	    }
@@ -192,8 +193,7 @@ ddxGiveUp(enum ExitCode error)
 #endif /* HAS_SHM */
 	
     case NORMAL_MEMORY_FB:
-	for (i = 0; i < vfbNumScreens; i++)
-	{
+        for (i = 0; i < vfbNumScreens; i++) {
 	    free(vfbScreens[i].pXWDHeader);
 	}
 	break;
@@ -224,7 +224,8 @@ OsVendorFatalError(void)
 }
 
 #if defined(DDXBEFORERESET)
-void ddxBeforeReset(void)
+void
+ddxBeforeReset(void)
 {
     return;
 }
@@ -242,7 +243,8 @@ ddxUseMsg(void)
     ErrorF("-whitepixel n          pixel value for white\n");
 
 #ifdef HAVE_MMAP
-    ErrorF("-fbdir directory       put framebuffers in mmap'ed files in directory\n");
+    ErrorF
+        ("-fbdir directory       put framebuffers in mmap'ed files in directory\n");
 #endif
 
 #ifdef HAS_SHM
@@ -257,8 +259,7 @@ ddxProcessArgument(int argc, char *argv[], int i)
     static int lastScreen = -1;
     vfbScreenInfo *currentScreen;
 
-    if (firstTime)
-    {
+    if (firstTime) {
 	vfbInitializePixmapDepths();
         firstTime = FALSE;
     }
@@ -275,24 +276,23 @@ ddxProcessArgument(int argc, char *argv[], int i)
       FatalError("Required argument to %s not specified\n", argv[i]);   \
     }
     
-    if (strcmp (argv[i], "-screen") == 0)	/* -screen n WxHxD */
-    {
+    if (strcmp(argv[i], "-screen") == 0) {      /* -screen n WxHxD */
 	int screenNum;
+
 	CHECK_FOR_REQUIRED_ARGUMENTS(2);
 	screenNum = atoi(argv[i+1]);
 	/* The protocol only has a CARD8 for number of screens in the
 	   connection setup block, so don't allow more than that. */
-	if ((screenNum < 0) || (screenNum >= 255))
-	{
+        if ((screenNum < 0) || (screenNum >= 255)) {
 	    ErrorF("Invalid screen number %d\n", screenNum);
 	    UseMsg();
 	    FatalError("Invalid screen number %d passed to -screen\n",
 		       screenNum);
 	}
 
-	if (vfbNumScreens <= screenNum)
-	{
-	    vfbScreens = realloc(vfbScreens, sizeof(*vfbScreens) * (screenNum + 1));
+        if (vfbNumScreens <= screenNum) {
+            vfbScreens =
+                realloc(vfbScreens, sizeof(*vfbScreens) * (screenNum + 1));
 	    if (!vfbScreens)
 		FatalError("Not enough memory for screen %d\n", screenNum);
 	    for (; vfbNumScreens <= screenNum; ++vfbNumScreens)
@@ -302,8 +302,7 @@ ddxProcessArgument(int argc, char *argv[], int i)
 	if (3 != sscanf(argv[i+2], "%dx%dx%d",
 			&vfbScreens[screenNum].width,
 			&vfbScreens[screenNum].height,
-			&vfbScreens[screenNum].depth))
-	{
+                        &vfbScreens[screenNum].depth)) {
 	    ErrorF("Invalid screen configuration %s\n", argv[i+2]);
 	    UseMsg();
 	    FatalError("Invalid screen configuration %s for -screen %d\n",
@@ -314,15 +313,12 @@ ddxProcessArgument(int argc, char *argv[], int i)
 	return 3;
     }
 
-    if (strcmp (argv[i], "-pixdepths") == 0)	/* -pixdepths list-of-depth */
-    {
+    if (strcmp(argv[i], "-pixdepths") == 0) {   /* -pixdepths list-of-depth */
 	int depth, ret = 1;
 
 	CHECK_FOR_REQUIRED_ARGUMENTS(1);
-	while ((++i < argc) && (depth = atoi(argv[i])) != 0)
-	{
-	    if (depth < 0 || depth > 32)
-	    {
+        while ((++i < argc) && (depth = atoi(argv[i])) != 0) {
+            if (depth < 0 || depth > 32) {
 		ErrorF("Invalid pixmap depth %d\n", depth);
 		UseMsg();
 		FatalError("Invalid pixmap depth %d passed to -pixdepths\n",
@@ -334,14 +330,12 @@ ddxProcessArgument(int argc, char *argv[], int i)
 	return ret;
     }
 
-    if (strcmp (argv[i], "+render") == 0)	/* +render */
-    {
+    if (strcmp(argv[i], "+render") == 0) {      /* +render */
 	Render = TRUE;
 	return 1;
     }
 
-    if (strcmp (argv[i], "-render") == 0)	/* -render */
-    {
+    if (strcmp(argv[i], "-render") == 0) {      /* -render */
 	Render = FALSE;
 #ifdef COMPOSITE
 	noCompositeExtension = TRUE;
@@ -349,30 +343,26 @@ ddxProcessArgument(int argc, char *argv[], int i)
 	return 1;
     }
 
-    if (strcmp (argv[i], "-blackpixel") == 0)	/* -blackpixel n */
-    {
+    if (strcmp(argv[i], "-blackpixel") == 0) {  /* -blackpixel n */
 	CHECK_FOR_REQUIRED_ARGUMENTS(1);
 	currentScreen->blackPixel = atoi(argv[++i]);
 	return 2;
     }
 
-    if (strcmp (argv[i], "-whitepixel") == 0)	/* -whitepixel n */
-    {
+    if (strcmp(argv[i], "-whitepixel") == 0) {  /* -whitepixel n */
 	CHECK_FOR_REQUIRED_ARGUMENTS(1);
 	currentScreen->whitePixel = atoi(argv[++i]);
 	return 2;
     }
 
-    if (strcmp (argv[i], "-linebias") == 0)	/* -linebias n */
-    {
+    if (strcmp(argv[i], "-linebias") == 0) {    /* -linebias n */
 	CHECK_FOR_REQUIRED_ARGUMENTS(1);
 	currentScreen->lineBias = atoi(argv[++i]);
 	return 2;
     }
 
 #ifdef HAVE_MMAP
-    if (strcmp (argv[i], "-fbdir") == 0)	/* -fbdir directory */
-    {
+    if (strcmp(argv[i], "-fbdir") == 0) {       /* -fbdir directory */
 	CHECK_FOR_REQUIRED_ARGUMENTS(1);
 	pfbdir = argv[++i];
 	fbmemtype = MMAPPED_FILE_FB;
@@ -381,8 +371,7 @@ ddxProcessArgument(int argc, char *argv[], int i)
 #endif /* HAVE_MMAP */
 
 #ifdef HAS_SHM
-    if (strcmp (argv[i], "-shmem") == 0)	/* -shmem */
-    {
+    if (strcmp(argv[i], "-shmem") == 0) {       /* -shmem */
 	fbmemtype = SHARED_MEMORY_FB;
 	return 1;
     }
@@ -392,6 +381,7 @@ ddxProcessArgument(int argc, char *argv[], int i)
 }
 
 static DevPrivateKeyRec cmapScrPrivateKeyRec;
+
 #define cmapScrPrivateKey (&cmapScrPrivateKeyRec)
 
 #define GetInstalledColormap(s) ((ColormapPtr) dixLookupPrivate(&(s)->devPrivates, cmapScrPrivateKey))
@@ -406,14 +396,12 @@ vfbListInstalledColormaps(ScreenPtr pScreen, Colormap *pmaps)
     return 1;
 }
 
-
 static void
 vfbInstallColormap(ColormapPtr pmap)
 {
     ColormapPtr oldpmap = GetInstalledColormap(pmap->pScreen);
 
-    if (pmap != oldpmap)
-    {
+    if (pmap != oldpmap) {
 	int entries;
 	XWDFileHeader *pXWDHeader;
 	XWDColor *pXWDCmap;
@@ -445,7 +433,8 @@ vfbInstallColormap(ColormapPtr pmap)
 	prgb = (xrgb *)malloc(entries * sizeof(xrgb));
 	defs = (xColorItem *)malloc(entries * sizeof(xColorItem));
 
-	for (i = 0; i < entries; i++)  ppix[i] = i;
+        for (i = 0; i < entries; i++)
+            ppix[i] = i;
 	/* XXX truecolor */
 	QueryColors(pmap, entries, ppix, prgb, serverClient);
 
@@ -469,10 +458,8 @@ vfbUninstallColormap(ColormapPtr pmap)
 {
     ColormapPtr curpmap = GetInstalledColormap(pmap->pScreen);
 
-    if(pmap == curpmap)
-    {
-	if (pmap->mid != pmap->pScreen->defColormap)
-	{
+    if (pmap == curpmap) {
+        if (pmap->mid != pmap->pScreen->defColormap) {
 	    dixLookupResourceByType((pointer *)&curpmap,
 				    pmap->pScreen->defColormap,
 				    RT_COLORMAP, serverClient,
@@ -488,30 +475,24 @@ vfbStoreColors(ColormapPtr pmap, int ndef, xColorItem *pdefs)
     XWDColor *pXWDCmap;
     int i;
 
-    if (pmap != GetInstalledColormap(pmap->pScreen))
-    {
+    if (pmap != GetInstalledColormap(pmap->pScreen)) {
 	return;
     }
 
     pXWDCmap = vfbScreens[pmap->pScreen->myNum].pXWDCmap;
 
-    if ((pmap->pVisual->class | DynamicClass) == DirectColor)
-    {
+    if ((pmap->pVisual->class | DynamicClass) == DirectColor) {
 	return;
     }
 
-    for (i = 0; i < ndef; i++)
-    {
-	if (pdefs[i].flags & DoRed)
-	{
+    for (i = 0; i < ndef; i++) {
+        if (pdefs[i].flags & DoRed) {
 	    swapcopy16(pXWDCmap[pdefs[i].pixel].red, pdefs[i].red);
 	}
-	if (pdefs[i].flags & DoGreen)
-	{
+        if (pdefs[i].flags & DoGreen) {
 	    swapcopy16(pXWDCmap[pdefs[i].pixel].green, pdefs[i].green);
 	}
-	if (pdefs[i].flags & DoBlue)
-	{
+        if (pdefs[i].flags & DoBlue) {
 	    swapcopy16(pXWDCmap[pdefs[i].pixel].blue, pdefs[i].blue);
 	}
     }
@@ -531,8 +512,7 @@ vfbBlockHandler(pointer blockData, OSTimePtr pTimeout, pointer pReadmask)
 {
     int i;
 
-    for (i = 0; i < vfbNumScreens; i++)
-    {
+    for (i = 0; i < vfbNumScreens; i++) {
 #ifdef MS_ASYNC
 	if (-1 == msync((caddr_t)vfbScreens[i].pXWDHeader,
 			(size_t)vfbScreens[i].sizeInBytes, MS_ASYNC))
@@ -548,13 +528,11 @@ vfbBlockHandler(pointer blockData, OSTimePtr pTimeout, pointer pReadmask)
     }
 }
 
-
 static void
 vfbWakeupHandler(pointer blockData, int result, pointer pReadmask)
 {
 }
 
-
 static void
 vfbAllocateMmappedFramebuffer(vfbScreenInfoPtr pvfb)
 {
@@ -564,8 +542,7 @@ vfbAllocateMmappedFramebuffer(vfbScreenInfoPtr pvfb)
 
     snprintf(pvfb->mmap_file, sizeof(pvfb->mmap_file), "%s/Xvfb_screen%d",
 	     pfbdir, (int) (pvfb - vfbScreens));
-    if (-1 == (pvfb->mmap_fd = open(pvfb->mmap_file, O_CREAT|O_RDWR, 0666)))
-    {
+    if (-1 == (pvfb->mmap_fd = open(pvfb->mmap_file, O_CREAT | O_RDWR, 0666))) {
 	perror("open");
 	ErrorF("open %s failed, %s", pvfb->mmap_file, strerror(errno));
 	return;
@@ -576,12 +553,10 @@ vfbAllocateMmappedFramebuffer(vfbScreenInfoPtr pvfb)
     memset(dummyBuffer, 0, DUMMY_BUFFER_SIZE);
     for (currentFileSize = 0;
 	 currentFileSize < pvfb->sizeInBytes;
-	 currentFileSize += writeThisTime)
-    {
+         currentFileSize += writeThisTime) {
 	writeThisTime = min(DUMMY_BUFFER_SIZE,
 			    pvfb->sizeInBytes - currentFileSize);
-	if (-1 == write(pvfb->mmap_fd, dummyBuffer, writeThisTime))
-	{
+        if (-1 == write(pvfb->mmap_fd, dummyBuffer, writeThisTime)) {
 	    perror("write");
 	    ErrorF("write %s failed, %s", pvfb->mmap_file, strerror(errno));
 	    return;
@@ -594,8 +569,7 @@ vfbAllocateMmappedFramebuffer(vfbScreenInfoPtr pvfb)
 				    PROT_READ|PROT_WRITE,
 				    MAP_FILE|MAP_SHARED,
 				    pvfb->mmap_fd, 0);
-    if (-1 == (long)pvfb->pXWDHeader)
-    {
+    if (-1 == (long) pvfb->pXWDHeader) {
 	perror("mmap");
 	ErrorF("mmap %s failed, %s", pvfb->mmap_file, strerror(errno));
 	pvfb->pXWDHeader = NULL;
@@ -603,14 +577,12 @@ vfbAllocateMmappedFramebuffer(vfbScreenInfoPtr pvfb)
     }
 
     if (!RegisterBlockAndWakeupHandlers(vfbBlockHandler, vfbWakeupHandler,
-					NULL))
-    {
+                                        NULL)) {
 	pvfb->pXWDHeader = NULL;
     }
 }
 #endif /* HAVE_MMAP */
 
-
 #ifdef HAS_SHM
 static void
 vfbAllocateSharedMemoryFramebuffer(vfbScreenInfoPtr pvfb)
@@ -618,18 +590,17 @@ vfbAllocateSharedMemoryFramebuffer(vfbScreenInfoPtr pvfb)
     /* create the shared memory segment */
 
     pvfb->shmid = shmget(IPC_PRIVATE, pvfb->sizeInBytes, IPC_CREAT|0777);
-    if (pvfb->shmid < 0)
-    {
+    if (pvfb->shmid < 0) {
 	perror("shmget");
-	ErrorF("shmget %d bytes failed, %s", pvfb->sizeInBytes, strerror(errno));
+        ErrorF("shmget %d bytes failed, %s", pvfb->sizeInBytes,
+               strerror(errno));
 	return;
     }
 
     /* try to attach it */
 
     pvfb->pXWDHeader = (XWDFileHeader *)shmat(pvfb->shmid, 0, 0);
-    if (-1 == (long)pvfb->pXWDHeader)
-    {
+    if (-1 == (long) pvfb->pXWDHeader) {
 	perror("shmat");
 	ErrorF("shmat failed, %s", strerror(errno));
 	pvfb->pXWDHeader = NULL; 
@@ -643,7 +614,8 @@ vfbAllocateSharedMemoryFramebuffer(vfbScreenInfoPtr pvfb)
 static char *
 vfbAllocateFramebufferMemory(vfbScreenInfoPtr pvfb)
 {
-    if (pvfb->pfbMemory) return pvfb->pfbMemory; /* already done */
+    if (pvfb->pfbMemory)
+        return pvfb->pfbMemory; /* already done */
 
     pvfb->sizeInBytes = pvfb->paddedBytesWidth * pvfb->height;
 
@@ -653,14 +625,14 @@ vfbAllocateFramebufferMemory(vfbScreenInfoPtr pvfb)
      * below comes from the MAX_PSEUDO_DEPTH define in cfbcmap.c.
      */
 
-    if (pvfb->depth <= 10)
-    { /* single index colormaps */
+    if (pvfb->depth <= 10) {    /* single index colormaps */
 	pvfb->ncolors = 1 << pvfb->depth;
     }
-    else
-    { /* decomposed colormaps */
+    else {                      /* decomposed colormaps */
 	int nplanes_per_color_component = pvfb->depth / 3;
-	if (pvfb->depth % 3) nplanes_per_color_component++;
+
+        if (pvfb->depth % 3)
+            nplanes_per_color_component++;
 	pvfb->ncolors = 1 << nplanes_per_color_component;
     }
 
@@ -670,18 +642,23 @@ vfbAllocateFramebufferMemory(vfbScreenInfoPtr pvfb)
 		    pvfb->ncolors * SIZEOF(XWDColor);
 
     pvfb->pXWDHeader = NULL; 
-    switch (fbmemtype)
-    {
+    switch (fbmemtype) {
 #ifdef HAVE_MMAP
-    case MMAPPED_FILE_FB:  vfbAllocateMmappedFramebuffer(pvfb); break;
+    case MMAPPED_FILE_FB:
+        vfbAllocateMmappedFramebuffer(pvfb);
+        break;
 #else
-    case MMAPPED_FILE_FB: break;
+    case MMAPPED_FILE_FB:
+        break;
 #endif
 
 #ifdef HAS_SHM
-    case SHARED_MEMORY_FB: vfbAllocateSharedMemoryFramebuffer(pvfb); break;
+    case SHARED_MEMORY_FB:
+        vfbAllocateSharedMemoryFramebuffer(pvfb);
+        break;
 #else
-    case SHARED_MEMORY_FB: break;
+    case SHARED_MEMORY_FB:
+        break;
 #endif
 
     case NORMAL_MEMORY_FB:
@@ -689,10 +666,10 @@ vfbAllocateFramebufferMemory(vfbScreenInfoPtr pvfb)
 	break;
     }
 
-    if (pvfb->pXWDHeader)
-    {
+    if (pvfb->pXWDHeader) {
 	pvfb->pXWDCmap = (XWDColor *)((char *)pvfb->pXWDHeader
-				+ SIZEOF(XWDheader) + XWD_WINDOW_NAME_LEN);
+                                       + SIZEOF(XWDheader) +
+                                       XWD_WINDOW_NAME_LEN);
 	pvfb->pfbMemory = (char *)(pvfb->pXWDCmap + pvfb->ncolors);
 
 	return pvfb->pfbMemory;
@@ -701,7 +678,6 @@ vfbAllocateFramebufferMemory(vfbScreenInfoPtr pvfb)
 	return NULL;
 }
 
-
 static void
 vfbWriteXWDFileHeader(ScreenPtr pScreen)
 {
@@ -713,7 +689,8 @@ vfbWriteXWDFileHeader(ScreenPtr pScreen)
 
     needswap = *(char *) &swaptest;
 
-    pXWDHeader->header_size = (char *)pvfb->pXWDCmap - (char *)pvfb->pXWDHeader;
+    pXWDHeader->header_size =
+        (char *) pvfb->pXWDCmap - (char *) pvfb->pXWDHeader;
     pXWDHeader->file_version = XWD_FILE_VERSION;
 
     pXWDHeader->pixmap_format = ZPixmap;
@@ -751,24 +728,20 @@ vfbWriteXWDFileHeader(ScreenPtr pScreen)
 
     /* write colormap pixel slot values */
 
-    for (i = 0; i < pvfb->ncolors; i++)
-    {
+    for (i = 0; i < pvfb->ncolors; i++) {
 	pvfb->pXWDCmap[i].pixel = i;
     }
 
     /* byte swap to most significant byte first */
 
-    if (needswap)
-    {
+    if (needswap) {
 	SwapLongs((CARD32 *)pXWDHeader, SIZEOF(XWDheader)/4);
-	for (i = 0; i < pvfb->ncolors; i++)
-	{
+        for (i = 0; i < pvfb->ncolors; i++) {
 	    swapl(&pvfb->pXWDCmap[i].pixel);
 	}
     }
 }
 
-
 static Bool
 vfbCursorOffScreen (ScreenPtr *ppScreen, int *x, int *y)
 {
@@ -780,8 +753,7 @@ vfbCrossScreen (ScreenPtr pScreen, Bool entering)
 {
 }
 
-static miPointerScreenFuncRec vfbPointerCursorFuncs =
-{
+static miPointerScreenFuncRec vfbPointerCursorFuncs = {
     vfbCursorOffScreen,
     vfbCrossScreen,
     miPointerWarpCursor
@@ -829,7 +801,8 @@ vfbScreenInit(int index, ScreenPtr pScreen, int argc, char **argv)
     else
 	pvfb->paddedWidth = pvfb->paddedBytesWidth * 8;
     pbits = vfbAllocateFramebufferMemory(pvfb);
-    if (!pbits) return FALSE;
+    if (!pbits)
+        return FALSE;
 
     switch (pvfb->depth) {
     case 8:
@@ -839,8 +812,7 @@ vfbScreenInit(int index, ScreenPtr pScreen, int argc, char **argv)
 				   (1 << StaticColor) |
 				   (1 << PseudoColor) |
 				   (1 << TrueColor) |
-				   (1 << DirectColor)),
-				  8, PseudoColor, 0, 0, 0);
+                                  (1 << DirectColor)), 8, PseudoColor, 0, 0, 0);
 	break;
     case 15:
 	miSetVisualTypesAndMasks (15,
@@ -864,7 +836,8 @@ vfbScreenInit(int index, ScreenPtr pScreen, int argc, char **argv)
 	miSetVisualTypesAndMasks (30,
 				  ((1 << TrueColor) |
 				   (1 << DirectColor)),
-				  10, TrueColor, 0x3ff00000, 0x000ffc00, 0x000003ff);
+                                 10, TrueColor, 0x3ff00000, 0x000ffc00,
+                                 0x000003ff);
 	break;
     default:
 	return FALSE;
@@ -877,7 +850,8 @@ vfbScreenInit(int index, ScreenPtr pScreen, int argc, char **argv)
     if (ret && Render) 
 	fbPictureInit (pScreen, 0, 0);
 
-    if (!ret) return FALSE;
+    if (!ret)
+        return FALSE;
 
     pScreen->InstallColormap = vfbInstallColormap;
     pScreen->UninstallColormap = vfbUninstallColormap;
@@ -904,7 +878,6 @@ vfbScreenInit(int index, ScreenPtr pScreen, int argc, char **argv)
 
 } /* end vfbScreenInit */
 
-
 void
 InitOutput(ScreenInfo *screenInfo, int argc, char **argv)
 {
@@ -914,8 +887,7 @@ InitOutput(ScreenInfo *screenInfo, int argc, char **argv)
     /* initialize pixmap formats */
 
     /* must have a pixmap depth to match every screen depth */
-    for (i = 0; i < vfbNumScreens; i++)
-    {
+    for (i = 0; i < vfbNumScreens; i++) {
 	vfbPixmapDepths[vfbScreens[i].depth] = TRUE;
     }
 
@@ -936,10 +908,8 @@ InitOutput(ScreenInfo *screenInfo, int argc, char **argv)
 	vfbPixmapDepths[32] = TRUE;
     }
 
-    for (i = 1; i <= 32; i++)
-    {
-	if (vfbPixmapDepths[i])
-	{
+    for (i = 1; i <= 32; i++) {
+        if (vfbPixmapDepths[i]) {
 	    if (NumFormats >= MAXFORMATS)
 		FatalError ("MAXFORMATS is too small for this server\n");
 	    screenInfo->formats[NumFormats].depth = i;
@@ -957,15 +927,12 @@ InitOutput(ScreenInfo *screenInfo, int argc, char **argv)
 
     /* initialize screens */
 
-    if (vfbNumScreens < 1)
-    {
+    if (vfbNumScreens < 1) {
 	vfbScreens = &defaultScreenInfo;
 	vfbNumScreens = 1;
     }
-    for (i = 0; i < vfbNumScreens; i++)
-    {
-	if (-1 == AddScreen(vfbScreenInit, argc, argv))
-	{
+    for (i = 0; i < vfbNumScreens; i++) {
+        if (-1 == AddScreen(vfbScreenInit, argc, argv)) {
 	    FatalError("Couldn't add screen %d", i);
 	}
     }
