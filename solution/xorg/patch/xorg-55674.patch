diff --git a/hw/xfree86/x86emu/x86emu/prim_asm.h b/hw/xfree86/x86emu/x86emu/prim_asm.h
index e023cf8..aca132b 100644
--- a/hw/xfree86/x86emu/x86emu/prim_asm.h
+++ b/hw/xfree86/x86emu/x86emu/prim_asm.h
@@ -50,6 +50,7 @@
 #endif
 
 u32		get_flags_asm(void);
+
 #pragma aux get_flags_asm =			\
 	"pushf"                         \
 	"pop	eax"                  	\
@@ -57,6 +58,7 @@ u32		get_flags_asm(void);
 	modify exact [eax];
 
 u16     aaa_word_asm(u32 *flags,u16 d);
+
 #pragma aux aaa_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -68,6 +70,7 @@ u16     aaa_word_asm(u32 *flags,u16 d);
 	modify exact [ax];
 
 u16     aas_word_asm(u32 *flags,u16 d);
+
 #pragma aux aas_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -79,6 +82,7 @@ u16     aas_word_asm(u32 *flags,u16 d);
 	modify exact [ax];
 
 u16     aad_word_asm(u32 *flags,u16 d);
+
 #pragma aux aad_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -90,6 +94,7 @@ u16     aad_word_asm(u32 *flags,u16 d);
 	modify exact [ax];
 
 u16     aam_word_asm(u32 *flags,u8 d);
+
 #pragma aux aam_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -101,6 +106,7 @@ u16     aam_word_asm(u32 *flags,u8 d);
 	modify exact [ax];
 
 u8      adc_byte_asm(u32 *flags,u8 d, u8 s);
+
 #pragma aux adc_byte_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -112,6 +118,7 @@ u8      adc_byte_asm(u32 *flags,u8 d, u8 s);
 	modify exact [al bl];
 
 u16     adc_word_asm(u32 *flags,u16 d, u16 s);
+
 #pragma aux adc_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -123,6 +130,7 @@ u16     adc_word_asm(u32 *flags,u16 d, u16 s);
 	modify exact [ax bx];
 
 u32     adc_long_asm(u32 *flags,u32 d, u32 s);
+
 #pragma aux adc_long_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -134,6 +142,7 @@ u32     adc_long_asm(u32 *flags,u32 d, u32 s);
 	modify exact [eax ebx];
 
 u8      add_byte_asm(u32 *flags,u8 d, u8 s);
+
 #pragma aux add_byte_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -145,6 +154,7 @@ u8      add_byte_asm(u32 *flags,u8 d, u8 s);
 	modify exact [al bl];
 
 u16     add_word_asm(u32 *flags,u16 d, u16 s);
+
 #pragma aux add_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -156,6 +166,7 @@ u16     add_word_asm(u32 *flags,u16 d, u16 s);
 	modify exact [ax bx];
 
 u32     add_long_asm(u32 *flags,u32 d, u32 s);
+
 #pragma aux add_long_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -167,6 +178,7 @@ u32     add_long_asm(u32 *flags,u32 d, u32 s);
 	modify exact [eax ebx];
 
 u8      and_byte_asm(u32 *flags,u8 d, u8 s);
+
 #pragma aux and_byte_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -178,6 +190,7 @@ u8      and_byte_asm(u32 *flags,u8 d, u8 s);
 	modify exact [al bl];
 
 u16     and_word_asm(u32 *flags,u16 d, u16 s);
+
 #pragma aux and_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -189,6 +202,7 @@ u16     and_word_asm(u32 *flags,u16 d, u16 s);
 	modify exact [ax bx];
 
 u32     and_long_asm(u32 *flags,u32 d, u32 s);
+
 #pragma aux and_long_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -200,6 +214,7 @@ u32     and_long_asm(u32 *flags,u32 d, u32 s);
 	modify exact [eax ebx];
 
 u8      cmp_byte_asm(u32 *flags,u8 d, u8 s);
+
 #pragma aux cmp_byte_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -211,6 +226,7 @@ u8      cmp_byte_asm(u32 *flags,u8 d, u8 s);
 	modify exact [al bl];
 
 u16     cmp_word_asm(u32 *flags,u16 d, u16 s);
+
 #pragma aux cmp_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -222,6 +238,7 @@ u16     cmp_word_asm(u32 *flags,u16 d, u16 s);
 	modify exact [ax bx];
 
 u32     cmp_long_asm(u32 *flags,u32 d, u32 s);
+
 #pragma aux cmp_long_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -233,6 +250,7 @@ u32     cmp_long_asm(u32 *flags,u32 d, u32 s);
 	modify exact [eax ebx];
 
 u8      daa_byte_asm(u32 *flags,u8 d);
+
 #pragma aux daa_byte_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -244,6 +262,7 @@ u8      daa_byte_asm(u32 *flags,u8 d);
 	modify exact [al];
 
 u8      das_byte_asm(u32 *flags,u8 d);
+
 #pragma aux das_byte_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -255,6 +274,7 @@ u8      das_byte_asm(u32 *flags,u8 d);
 	modify exact [al];
 
 u8      dec_byte_asm(u32 *flags,u8 d);
+
 #pragma aux dec_byte_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -266,6 +286,7 @@ u8      dec_byte_asm(u32 *flags,u8 d);
 	modify exact [al];
 
 u16     dec_word_asm(u32 *flags,u16 d);
+
 #pragma aux dec_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -277,6 +298,7 @@ u16     dec_word_asm(u32 *flags,u16 d);
 	modify exact [ax];
 
 u32     dec_long_asm(u32 *flags,u32 d);
+
 #pragma aux dec_long_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -288,6 +310,7 @@ u32     dec_long_asm(u32 *flags,u32 d);
 	modify exact [eax];
 
 u8      inc_byte_asm(u32 *flags,u8 d);
+
 #pragma aux inc_byte_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -299,6 +322,7 @@ u8      inc_byte_asm(u32 *flags,u8 d);
 	modify exact [al];
 
 u16     inc_word_asm(u32 *flags,u16 d);
+
 #pragma aux inc_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -310,6 +334,7 @@ u16     inc_word_asm(u32 *flags,u16 d);
 	modify exact [ax];
 
 u32     inc_long_asm(u32 *flags,u32 d);
+
 #pragma aux inc_long_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -321,6 +346,7 @@ u32     inc_long_asm(u32 *flags,u32 d);
 	modify exact [eax];
 
 u8      or_byte_asm(u32 *flags,u8 d, u8 s);
+
 #pragma aux or_byte_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -332,6 +358,7 @@ u8      or_byte_asm(u32 *flags,u8 d, u8 s);
 	modify exact [al bl];
 
 u16     or_word_asm(u32 *flags,u16 d, u16 s);
+
 #pragma aux or_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -343,6 +370,7 @@ u16     or_word_asm(u32 *flags,u16 d, u16 s);
 	modify exact [ax bx];
 
 u32     or_long_asm(u32 *flags,u32 d, u32 s);
+
 #pragma aux or_long_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -354,6 +382,7 @@ u32     or_long_asm(u32 *flags,u32 d, u32 s);
 	modify exact [eax ebx];
 
 u8      neg_byte_asm(u32 *flags,u8 d);
+
 #pragma aux neg_byte_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -365,6 +394,7 @@ u8      neg_byte_asm(u32 *flags,u8 d);
 	modify exact [al];
 
 u16     neg_word_asm(u32 *flags,u16 d);
+
 #pragma aux neg_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -376,6 +406,7 @@ u16     neg_word_asm(u32 *flags,u16 d);
 	modify exact [ax];
 
 u32     neg_long_asm(u32 *flags,u32 d);
+
 #pragma aux neg_long_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -387,6 +418,7 @@ u32     neg_long_asm(u32 *flags,u32 d);
 	modify exact [eax];
 
 u8      not_byte_asm(u32 *flags,u8 d);
+
 #pragma aux not_byte_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -398,6 +430,7 @@ u8      not_byte_asm(u32 *flags,u8 d);
 	modify exact [al];
 
 u16     not_word_asm(u32 *flags,u16 d);
+
 #pragma aux not_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -409,6 +442,7 @@ u16     not_word_asm(u32 *flags,u16 d);
 	modify exact [ax];
 
 u32     not_long_asm(u32 *flags,u32 d);
+
 #pragma aux not_long_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -420,6 +454,7 @@ u32     not_long_asm(u32 *flags,u32 d);
 	modify exact [eax];
 
 u8      rcl_byte_asm(u32 *flags,u8 d, u8 s);
+
 #pragma aux rcl_byte_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -431,6 +466,7 @@ u8      rcl_byte_asm(u32 *flags,u8 d, u8 s);
 	modify exact [al cl];
 
 u16     rcl_word_asm(u32 *flags,u16 d, u8 s);
+
 #pragma aux rcl_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -442,6 +478,7 @@ u16     rcl_word_asm(u32 *flags,u16 d, u8 s);
 	modify exact [ax cl];
 
 u32     rcl_long_asm(u32 *flags,u32 d, u8 s);
+
 #pragma aux rcl_long_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -453,6 +490,7 @@ u32     rcl_long_asm(u32 *flags,u32 d, u8 s);
 	modify exact [eax cl];
 
 u8      rcr_byte_asm(u32 *flags,u8 d, u8 s);
+
 #pragma aux rcr_byte_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -464,6 +502,7 @@ u8      rcr_byte_asm(u32 *flags,u8 d, u8 s);
 	modify exact [al cl];
 
 u16     rcr_word_asm(u32 *flags,u16 d, u8 s);
+
 #pragma aux rcr_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -475,6 +514,7 @@ u16     rcr_word_asm(u32 *flags,u16 d, u8 s);
 	modify exact [ax cl];
 
 u32     rcr_long_asm(u32 *flags,u32 d, u8 s);
+
 #pragma aux rcr_long_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -486,6 +526,7 @@ u32     rcr_long_asm(u32 *flags,u32 d, u8 s);
 	modify exact [eax cl];
 
 u8      rol_byte_asm(u32 *flags,u8 d, u8 s);
+
 #pragma aux rol_byte_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -497,6 +538,7 @@ u8      rol_byte_asm(u32 *flags,u8 d, u8 s);
 	modify exact [al cl];
 
 u16     rol_word_asm(u32 *flags,u16 d, u8 s);
+
 #pragma aux rol_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -508,6 +550,7 @@ u16     rol_word_asm(u32 *flags,u16 d, u8 s);
 	modify exact [ax cl];
 
 u32     rol_long_asm(u32 *flags,u32 d, u8 s);
+
 #pragma aux rol_long_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -519,6 +562,7 @@ u32     rol_long_asm(u32 *flags,u32 d, u8 s);
 	modify exact [eax cl];
 
 u8      ror_byte_asm(u32 *flags,u8 d, u8 s);
+
 #pragma aux ror_byte_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -530,6 +574,7 @@ u8      ror_byte_asm(u32 *flags,u8 d, u8 s);
 	modify exact [al cl];
 
 u16     ror_word_asm(u32 *flags,u16 d, u8 s);
+
 #pragma aux ror_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -541,6 +586,7 @@ u16     ror_word_asm(u32 *flags,u16 d, u8 s);
 	modify exact [ax cl];
 
 u32     ror_long_asm(u32 *flags,u32 d, u8 s);
+
 #pragma aux ror_long_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -552,6 +598,7 @@ u32     ror_long_asm(u32 *flags,u32 d, u8 s);
 	modify exact [eax cl];
 
 u8      shl_byte_asm(u32 *flags,u8 d, u8 s);
+
 #pragma aux shl_byte_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -563,6 +610,7 @@ u8      shl_byte_asm(u32 *flags,u8 d, u8 s);
 	modify exact [al cl];
 
 u16     shl_word_asm(u32 *flags,u16 d, u8 s);
+
 #pragma aux shl_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -574,6 +622,7 @@ u16     shl_word_asm(u32 *flags,u16 d, u8 s);
 	modify exact [ax cl];
 
 u32     shl_long_asm(u32 *flags,u32 d, u8 s);
+
 #pragma aux shl_long_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -585,6 +634,7 @@ u32     shl_long_asm(u32 *flags,u32 d, u8 s);
 	modify exact [eax cl];
 
 u8      shr_byte_asm(u32 *flags,u8 d, u8 s);
+
 #pragma aux shr_byte_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -596,6 +646,7 @@ u8      shr_byte_asm(u32 *flags,u8 d, u8 s);
 	modify exact [al cl];
 
 u16     shr_word_asm(u32 *flags,u16 d, u8 s);
+
 #pragma aux shr_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -607,6 +658,7 @@ u16     shr_word_asm(u32 *flags,u16 d, u8 s);
 	modify exact [ax cl];
 
 u32     shr_long_asm(u32 *flags,u32 d, u8 s);
+
 #pragma aux shr_long_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -618,6 +670,7 @@ u32     shr_long_asm(u32 *flags,u32 d, u8 s);
 	modify exact [eax cl];
 
 u8      sar_byte_asm(u32 *flags,u8 d, u8 s);
+
 #pragma aux sar_byte_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -629,6 +682,7 @@ u8      sar_byte_asm(u32 *flags,u8 d, u8 s);
 	modify exact [al cl];
 
 u16     sar_word_asm(u32 *flags,u16 d, u8 s);
+
 #pragma aux sar_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -640,6 +694,7 @@ u16     sar_word_asm(u32 *flags,u16 d, u8 s);
 	modify exact [ax cl];
 
 u32     sar_long_asm(u32 *flags,u32 d, u8 s);
+
 #pragma aux sar_long_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -651,6 +706,7 @@ u32     sar_long_asm(u32 *flags,u32 d, u8 s);
 	modify exact [eax cl];
 
 u16		shld_word_asm(u32 *flags,u16 d, u16 fill, u8 s);
+
 #pragma aux shld_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -662,6 +718,7 @@ u16		shld_word_asm(u32 *flags,u16 d, u16 fill, u8 s);
 	modify exact [ax dx cl];
 
 u32     shld_long_asm(u32 *flags,u32 d, u32 fill, u8 s);
+
 #pragma aux shld_long_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -673,6 +730,7 @@ u32     shld_long_asm(u32 *flags,u32 d, u32 fill, u8 s);
 	modify exact [eax edx cl];
 
 u16		shrd_word_asm(u32 *flags,u16 d, u16 fill, u8 s);
+
 #pragma aux shrd_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -684,6 +742,7 @@ u16		shrd_word_asm(u32 *flags,u16 d, u16 fill, u8 s);
 	modify exact [ax dx cl];
 
 u32     shrd_long_asm(u32 *flags,u32 d, u32 fill, u8 s);
+
 #pragma aux shrd_long_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -695,6 +754,7 @@ u32     shrd_long_asm(u32 *flags,u32 d, u32 fill, u8 s);
 	modify exact [eax edx cl];
 
 u8      sbb_byte_asm(u32 *flags,u8 d, u8 s);
+
 #pragma aux sbb_byte_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -706,6 +766,7 @@ u8      sbb_byte_asm(u32 *flags,u8 d, u8 s);
 	modify exact [al bl];
 
 u16     sbb_word_asm(u32 *flags,u16 d, u16 s);
+
 #pragma aux sbb_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -717,6 +778,7 @@ u16     sbb_word_asm(u32 *flags,u16 d, u16 s);
 	modify exact [ax bx];
 
 u32     sbb_long_asm(u32 *flags,u32 d, u32 s);
+
 #pragma aux sbb_long_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -728,6 +790,7 @@ u32     sbb_long_asm(u32 *flags,u32 d, u32 s);
 	modify exact [eax ebx];
 
 u8      sub_byte_asm(u32 *flags,u8 d, u8 s);
+
 #pragma aux sub_byte_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -739,6 +802,7 @@ u8      sub_byte_asm(u32 *flags,u8 d, u8 s);
 	modify exact [al bl];
 
 u16     sub_word_asm(u32 *flags,u16 d, u16 s);
+
 #pragma aux sub_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -750,6 +814,7 @@ u16     sub_word_asm(u32 *flags,u16 d, u16 s);
 	modify exact [ax bx];
 
 u32     sub_long_asm(u32 *flags,u32 d, u32 s);
+
 #pragma aux sub_long_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -761,6 +826,7 @@ u32     sub_long_asm(u32 *flags,u32 d, u32 s);
 	modify exact [eax ebx];
 
 void	test_byte_asm(u32 *flags,u8 d, u8 s);
+
 #pragma aux test_byte_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -771,6 +837,7 @@ void	test_byte_asm(u32 *flags,u8 d, u8 s);
 	modify exact [al bl];
 
 void	test_word_asm(u32 *flags,u16 d, u16 s);
+
 #pragma aux test_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -781,6 +848,7 @@ void	test_word_asm(u32 *flags,u16 d, u16 s);
 	modify exact [ax bx];
 
 void	test_long_asm(u32 *flags,u32 d, u32 s);
+
 #pragma aux test_long_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -791,6 +859,7 @@ void	test_long_asm(u32 *flags,u32 d, u32 s);
 	modify exact [eax ebx];
 
 u8      xor_byte_asm(u32 *flags,u8 d, u8 s);
+
 #pragma aux xor_byte_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -802,6 +871,7 @@ u8      xor_byte_asm(u32 *flags,u8 d, u8 s);
 	modify exact [al bl];
 
 u16     xor_word_asm(u32 *flags,u16 d, u16 s);
+
 #pragma aux xor_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -813,6 +883,7 @@ u16     xor_word_asm(u32 *flags,u16 d, u16 s);
 	modify exact [ax bx];
 
 u32     xor_long_asm(u32 *flags,u32 d, u32 s);
+
 #pragma aux xor_long_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -824,6 +895,7 @@ u32     xor_long_asm(u32 *flags,u32 d, u32 s);
 	modify exact [eax ebx];
 
 void    imul_byte_asm(u32 *flags,u16 *ax,u8 d,u8 s);
+
 #pragma aux imul_byte_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -835,6 +907,7 @@ void    imul_byte_asm(u32 *flags,u16 *ax,u8 d,u8 s);
 	modify exact [esi ax bl];
 
 void    imul_word_asm(u32 *flags,u16 *ax,u16 *dx,u16 d,u16 s);
+
 #pragma aux imul_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -847,6 +920,7 @@ void    imul_word_asm(u32 *flags,u16 *ax,u16 *dx,u16 d,u16 s);
 	modify exact [esi edi ax bx dx];
 
 void    imul_long_asm(u32 *flags,u32 *eax,u32 *edx,u32 d,u32 s);
+
 #pragma aux imul_long_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -859,6 +933,7 @@ void    imul_long_asm(u32 *flags,u32 *eax,u32 *edx,u32 d,u32 s);
 	modify exact [esi edi eax ebx edx];
 
 void    mul_byte_asm(u32 *flags,u16 *ax,u8 d,u8 s);
+
 #pragma aux mul_byte_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -870,6 +945,7 @@ void    mul_byte_asm(u32 *flags,u16 *ax,u8 d,u8 s);
 	modify exact [esi ax bl];
 
 void    mul_word_asm(u32 *flags,u16 *ax,u16 *dx,u16 d,u16 s);
+
 #pragma aux mul_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -882,6 +958,7 @@ void    mul_word_asm(u32 *flags,u16 *ax,u16 *dx,u16 d,u16 s);
 	modify exact [esi edi ax bx dx];
 
 void    mul_long_asm(u32 *flags,u32 *eax,u32 *edx,u32 d,u32 s);
+
 #pragma aux mul_long_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -894,6 +971,7 @@ void    mul_long_asm(u32 *flags,u32 *eax,u32 *edx,u32 d,u32 s);
 	modify exact [esi edi eax ebx edx];
 
 void	idiv_byte_asm(u32 *flags,u8 *al,u8 *ah,u16 d,u8 s);
+
 #pragma aux idiv_byte_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -906,6 +984,7 @@ void	idiv_byte_asm(u32 *flags,u8 *al,u8 *ah,u16 d,u8 s);
 	modify exact [esi edi ax bl];
 
 void	idiv_word_asm(u32 *flags,u16 *ax,u16 *dx,u16 dlo,u16 dhi,u16 s);
+
 #pragma aux idiv_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -918,6 +997,7 @@ void	idiv_word_asm(u32 *flags,u16 *ax,u16 *dx,u16 dlo,u16 dhi,u16 s);
 	modify exact [esi edi ax dx bx];
 
 void	idiv_long_asm(u32 *flags,u32 *eax,u32 *edx,u32 dlo,u32 dhi,u32 s);
+
 #pragma aux idiv_long_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -930,6 +1010,7 @@ void	idiv_long_asm(u32 *flags,u32 *eax,u32 *edx,u32 dlo,u32 dhi,u32 s);
 	modify exact [esi edi eax edx ebx];
 
 void	div_byte_asm(u32 *flags,u8 *al,u8 *ah,u16 d,u8 s);
+
 #pragma aux div_byte_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -942,6 +1023,7 @@ void	div_byte_asm(u32 *flags,u8 *al,u8 *ah,u16 d,u8 s);
 	modify exact [esi edi ax bl];
 
 void	div_word_asm(u32 *flags,u16 *ax,u16 *dx,u16 dlo,u16 dhi,u16 s);
+
 #pragma aux div_word_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
@@ -954,6 +1036,7 @@ void	div_word_asm(u32 *flags,u16 *ax,u16 *dx,u16 dlo,u16 dhi,u16 s);
 	modify exact [esi edi ax dx bx];
 
 void	div_long_asm(u32 *flags,u32 *eax,u32 *edx,u32 dlo,u32 dhi,u32 s);
+
 #pragma aux div_long_asm =			\
 	"push	[edi]"            		\
 	"popf"                         	\
