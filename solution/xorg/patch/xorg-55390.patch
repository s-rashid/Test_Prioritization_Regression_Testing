diff --git a/hw/kdrive/linux/linux.c b/hw/kdrive/linux/linux.c
index 194e7cd..498c239 100644
--- a/hw/kdrive/linux/linux.c
+++ b/hw/kdrive/linux/linux.c
@@ -86,24 +86,18 @@ LinuxInit (void)
 
     LinuxConsoleFd = -1;
     /* check if we're run with euid==0 */
-    if (geteuid() != 0)
-    {
+    if (geteuid() != 0) {
 	FatalError("LinuxInit: Server must be suid root\n");
     }
 
     if (kdVirtualTerminal >= 0)
 	vtno = kdVirtualTerminal;
-    else
-    {
-	if ((fd = open("/dev/tty0",O_WRONLY,0)) < 0)
-	{
-	    FatalError(
-		       "LinuxInit: Cannot open /dev/tty0 (%s)\n",
+    else {
+        if ((fd = open("/dev/tty0", O_WRONLY, 0)) < 0) {
+            FatalError("LinuxInit: Cannot open /dev/tty0 (%s)\n",
 		       strerror(errno));
 	}
-	if ((ioctl(fd, VT_OPENQRY, &vtno) < 0) ||
-	    (vtno == -1))
-	{
+        if ((ioctl(fd, VT_OPENQRY, &vtno) < 0) || (vtno == -1)) {
 	    FatalError("xf86OpenConsole: Cannot find a free VT\n");
 	}
 	close(fd);
@@ -111,10 +105,8 @@ LinuxInit (void)
 
     snprintf(vtname,sizeof(vtname),"/dev/tty%d",vtno); /* /dev/tty1-64 */
 
-    if ((LinuxConsoleFd = open(vtname, O_RDWR|O_NDELAY, 0)) < 0)
-    {
-	FatalError("LinuxInit: Cannot open %s (%s)\n",
-		   vtname, strerror(errno));
+    if ((LinuxConsoleFd = open(vtname, O_RDWR | O_NDELAY, 0)) < 0) {
+        FatalError("LinuxInit: Cannot open %s (%s)\n", vtname, strerror(errno));
     }
 
     /* change ownership of the vt */
@@ -132,8 +124,7 @@ LinuxInit (void)
      * so we do this ourselves by remembering which is active now.
      */
     memset (&vts, '\0', sizeof (vts));	/* valgrind */
-    if (ioctl(LinuxConsoleFd, VT_GETSTATE, &vts) == 0)
-    {
+    if (ioctl(LinuxConsoleFd, VT_GETSTATE, &vts) == 0) {
 	activeVT = vts.v_active;
     }
 
@@ -146,13 +137,11 @@ LinuxSetSwitchMode (int mode)
     struct sigaction	act;
     struct vt_mode	VT;
 
-    if (ioctl(LinuxConsoleFd, VT_GETMODE, &VT) < 0)
-    {
+    if (ioctl(LinuxConsoleFd, VT_GETMODE, &VT) < 0) {
 	FatalError ("LinuxInit: VT_GETMODE failed\n");
     }
 
-    if (mode == VT_PROCESS)
-    {
+    if (mode == VT_PROCESS) {
 	act.sa_handler = LinuxVTRequest;
 	sigemptyset (&act.sa_mask);
 	act.sa_flags = 0;
@@ -162,8 +151,7 @@ LinuxSetSwitchMode (int mode)
 	VT.relsig = SIGUSR1;
 	VT.acqsig = SIGUSR1;
     }
-    else
-    {
+    else {
 	act.sa_handler = SIG_IGN;
 	sigemptyset (&act.sa_mask);
 	act.sa_flags = 0;
@@ -173,8 +161,7 @@ LinuxSetSwitchMode (int mode)
 	VT.relsig = 0;
 	VT.acqsig = 0;
     }
-    if (ioctl(LinuxConsoleFd, VT_SETMODE, &VT) < 0)
-    {
+    if (ioctl(LinuxConsoleFd, VT_SETMODE, &VT) < 0) {
 	FatalError("LinuxInit: VT_SETMODE failed\n");
     }
 }
@@ -191,14 +178,12 @@ LinuxApmWakeup (pointer blockData, int result, pointer pReadmask)
 {
     fd_set  *readmask = (fd_set *) pReadmask;
 
-    if (result > 0 && LinuxApmFd >= 0 && FD_ISSET (LinuxApmFd, readmask))
-    {
+    if (result > 0 && LinuxApmFd >= 0 && FD_ISSET(LinuxApmFd, readmask)) {
 	apm_event_t event;
 	Bool	    running = LinuxApmRunning;
 	int	    cmd = APM_IOC_SUSPEND;
 
-	while (read (LinuxApmFd, &event, sizeof (event)) == sizeof (event))
-	{
+        while (read(LinuxApmFd, &event, sizeof(event)) == sizeof(event)) {
 	    switch (event) {
 	    case APM_SYS_STANDBY:
 	    case APM_USER_STANDBY:
@@ -218,13 +203,11 @@ LinuxApmWakeup (pointer blockData, int result, pointer pReadmask)
 		break;
 	    }
 	}
-	if (running && !LinuxApmRunning)
-	{
+        if (running && !LinuxApmRunning) {
 	    KdResume ();
 	    LinuxApmRunning = TRUE;
 	}
-	else if (!running && LinuxApmRunning)
-	{
+        else if (!running && LinuxApmRunning) {
 	    KdSuspend ();
 	    LinuxApmRunning = FALSE;
 	    ioctl (LinuxApmFd, cmd, 0);
@@ -243,8 +226,7 @@ LinuxEnable (void)
 {
     if (enabled)
 	return;
-    if (kdSwitchPending)
-    {
+    if (kdSwitchPending) {
 	kdSwitchPending = FALSE;
 	ioctl (LinuxConsoleFd, VT_RELDISP, VT_ACKACQ);
     }
@@ -254,8 +236,7 @@ LinuxEnable (void)
     LinuxApmFd = open ("/dev/apm_bios", 2);
     if (LinuxApmFd < 0 && errno == ENOENT)
 	LinuxApmFd = open ("/dev/misc/apm_bios", 2);
-    if (LinuxApmFd >= 0)
-    {
+    if (LinuxApmFd >= 0) {
 	LinuxApmRunning = TRUE;
 	fcntl (LinuxApmFd, F_SETFL, fcntl (LinuxApmFd, F_GETFL) | NOBLOCK);
 	RegisterBlockAndWakeupHandlers (LinuxApmBlock, LinuxApmWakeup, 0);
@@ -266,17 +247,14 @@ LinuxEnable (void)
      * now get the VT
      */
     LinuxSetSwitchMode (VT_AUTO);
-    if (ioctl(LinuxConsoleFd, VT_ACTIVATE, vtno) != 0)
-    {
+    if (ioctl(LinuxConsoleFd, VT_ACTIVATE, vtno) != 0) {
 	FatalError("LinuxInit: VT_ACTIVATE failed\n");
     }
-    if (ioctl(LinuxConsoleFd, VT_WAITACTIVE, vtno) != 0)
-    {
+    if (ioctl(LinuxConsoleFd, VT_WAITACTIVE, vtno) != 0) {
 	FatalError("LinuxInit: VT_WAITACTIVE failed\n");
     }
     LinuxSetSwitchMode (VT_PROCESS);
-    if (ioctl(LinuxConsoleFd, KDSETMODE, KD_GRAPHICS) < 0)
-    {
+    if (ioctl(LinuxConsoleFd, KDSETMODE, KD_GRAPHICS) < 0) {
 	FatalError("LinuxInit: KDSETMODE KD_GRAPHICS failed\n");
     }
     enabled = TRUE;
@@ -286,14 +264,12 @@ static void
 LinuxDisable (void)
 {
     ioctl(LinuxConsoleFd, KDSETMODE, KD_TEXT);  /* Back to text mode ... */
-    if (kdSwitchPending)
-    {
+    if (kdSwitchPending) {
 	kdSwitchPending = FALSE;
 	ioctl (LinuxConsoleFd, VT_RELDISP, 1);
     }
     enabled = FALSE;
-    if (LinuxApmFd >= 0)
-    {
+    if (LinuxApmFd >= 0) {
 	RemoveBlockAndWakeupHandlers (LinuxApmBlock, LinuxApmWakeup, 0);
 	RemoveEnabledDevice (LinuxApmFd);
 	close (LinuxApmFd);
@@ -311,23 +287,19 @@ LinuxFini (void)
     if (LinuxConsoleFd < 0)
 	return;
 
-    if (ioctl(LinuxConsoleFd, VT_GETMODE, &VT) != -1)
-    {
+    if (ioctl(LinuxConsoleFd, VT_GETMODE, &VT) != -1) {
 	VT.mode = VT_AUTO;
 	ioctl(LinuxConsoleFd, VT_SETMODE, &VT); /* set dflt vt handling */
     }
     memset (&vts, '\0', sizeof (vts));	/* valgrind */
     ioctl (LinuxConsoleFd, VT_GETSTATE, &vts);
-    if (vtno == vts.v_active)
-    {
+    if (vtno == vts.v_active) {
 	/*
 	 * Find a legal VT to switch to, either the one we started from
 	 * or the lowest active one that isn't ours
 	 */
 	if (activeVT < 0 ||
-	    activeVT == vts.v_active ||
-	    !(vts.v_state & (1 << activeVT)))
-	{
+            activeVT == vts.v_active || !(vts.v_state & (1 << activeVT))) {
 	    for (activeVT = 1; activeVT < 16; activeVT++)
 		if (activeVT != vtno && (vts.v_state & (1 << activeVT)))
 		    break;
@@ -337,8 +309,7 @@ LinuxFini (void)
 	/*
 	 * Perform a switch back to the active VT when we were started
 	 */
-	if (activeVT >= -1)
-	{
+        if (activeVT >= -1) {
 	    ioctl (LinuxConsoleFd, VT_ACTIVATE, activeVT);
 	    ioctl (LinuxConsoleFd, VT_WAITACTIVE, activeVT);
 	    activeVT = -1;
@@ -347,12 +318,12 @@ LinuxFini (void)
     close(LinuxConsoleFd);                /* make the vt-manager happy */
     LinuxConsoleFd = -1;
     fd = open ("/dev/tty0", O_RDWR|O_NDELAY, 0);
-    if (fd >= 0)
-    {
+    if (fd >= 0) {
 	memset (&vts, '\0', sizeof (vts));	/* valgrind */
 	ioctl (fd, VT_GETSTATE, &vts);
 	if (ioctl (fd, VT_DISALLOCATE, vtno) < 0)
-	    fprintf (stderr, "Can't deallocate console %d %s\n", vtno, strerror(errno));
+            fprintf(stderr, "Can't deallocate console %d %s\n", vtno,
+                    strerror(errno));
 	close (fd);
     }
     return;
