diff --git a/hw/xfree86/dixmods/extmod/xf86vmode.c b/hw/xfree86/dixmods/extmod/xf86vmode.c
index a304a42..5bdd88c 100644
--- a/hw/xfree86/dixmods/extmod/xf86vmode.c
+++ b/hw/xfree86/dixmods/extmod/xf86vmode.c
@@ -150,7 +150,7 @@ static DevPrivateKey ScreenPrivateKey = &ScreenPrivateKeyIndex;
     dixSetPrivate(&(s)->devPrivates, ScreenPrivateKey, v)
 #define SetupScreen(s)  ScreenSaverScreenPrivatePtr pPriv = GetScreenPrivate(s)
 
-#define New(t)  (xalloc (sizeof (t)))
+#define New(t)  (malloc(sizeof (t)))
 #endif
 
 #ifdef DEBUG
@@ -229,7 +229,7 @@ CheckScreenPrivate (pScreen)
     if (!pPriv)
 	return;
     if (!pPriv->events && !pPriv->hasWindow) {
-	xfree (pPriv);
+	free(pPriv);
 	SetScreenPrivate (pScreen, NULL);
     }
 }
@@ -283,7 +283,7 @@ setEventMask (ScreenPtr pScreen, ClientPtr client, unsigned long mask)
 	    break;
     if (mask == 0) {
 	*pPrev = pEv->next;
-	xfree (pEv);
+	free(pEv);
 	CheckScreenPrivate (pScreen);
     } else {
 	if (!pEv) {
@@ -319,7 +319,7 @@ XF86VidModeFreeEvents(pointer value, XID id)
     if (!pEv)
 	return TRUE;
     *pPrev = pEv->next;
-    xfree (pEv);
+    free(pEv);
     CheckScreenPrivate (pScreen);
     return TRUE;
 }
@@ -738,20 +738,20 @@ ProcXF86VidModeAddModeLine(ClientPtr client)
 	    break;
 	case MODE_HSYNC:
 	case MODE_H_ILLEGAL:
-	    xfree(mode);
+	    free(mode);
 	    return VidModeErrorBase + XF86VidModeBadHTimings;
 	case MODE_VSYNC:
 	case MODE_V_ILLEGAL:
-	    xfree(mode);
+	    free(mode);
 	    return VidModeErrorBase + XF86VidModeBadVTimings;
 	default:
-	    xfree(mode);
+	    free(mode);
 	    return VidModeErrorBase + XF86VidModeModeUnsuitable;
     }
 
     /* Check that the driver is happy with the mode */
     if (VidModeCheckModeForDriver(stuff->screen, mode) != MODE_OK) {
-	xfree(mode);
+	free(mode);
 	return VidModeErrorBase + XF86VidModeModeUnsuitable;
     }
 
@@ -968,23 +968,23 @@ ProcXF86VidModeModModeLine(ClientPtr client)
 	    break;
 	case MODE_HSYNC:
 	case MODE_H_ILLEGAL:
-	    xfree(modetmp);
+	    free(modetmp);
 	    return VidModeErrorBase + XF86VidModeBadHTimings;
 	case MODE_VSYNC:
 	case MODE_V_ILLEGAL:
-	    xfree(modetmp);
+	    free(modetmp);
 	    return VidModeErrorBase + XF86VidModeBadVTimings;
 	default:
-	    xfree(modetmp);
+	    free(modetmp);
 	    return VidModeErrorBase + XF86VidModeModeUnsuitable;
     }
 
     /* Check that the driver is happy with the mode */
     if (VidModeCheckModeForDriver(stuff->screen, modetmp) != MODE_OK) {
-	xfree(modetmp);
+	free(modetmp);
 	return VidModeErrorBase + XF86VidModeModeUnsuitable;
     }
-    xfree(modetmp);
+    free(modetmp);
 
     VidModeSetModeValue(mode, VIDMODE_H_DISPLAY, stuff->hdisplay);
     VidModeSetModeValue(mode, VIDMODE_H_SYNCSTART, stuff->hsyncstart); 
@@ -1104,7 +1104,7 @@ ProcXF86VidModeValidateModeLine(ClientPtr client)
 
 status_reply:
     if(modetmp)
-      xfree(modetmp);
+      free(modetmp);
 
     rep.type = X_Reply;
     rep.length = bytes_to_int32(SIZEOF(xXF86VidModeValidateModeLineReply)
@@ -1296,14 +1296,14 @@ ProcXF86VidModeGetMonitor(ClientPtr client)
     rep.sequenceNumber = client->sequence;
     rep.nhsync = nHsync;
     rep.nvsync = nVrefresh;
-    hsyncdata = xalloc(nHsync * sizeof(CARD32));
+    hsyncdata = malloc(nHsync * sizeof(CARD32));
     if (!hsyncdata) {
 	return BadAlloc;
     }
 
-    vsyncdata = xalloc(nVrefresh * sizeof(CARD32));
+    vsyncdata = malloc(nVrefresh * sizeof(CARD32));
     if (!vsyncdata) {
-	xfree(hsyncdata);
+	free(hsyncdata);
 	return BadAlloc;
     }
 
@@ -1336,8 +1336,8 @@ ProcXF86VidModeGetMonitor(ClientPtr client)
     if (rep.modelLength)
 	WriteToClient(client, rep.modelLength, (char *)(VidModeGetMonitorValue(monitor, VIDMODE_MON_MODEL, 0)).ptr);
 
-    xfree(hsyncdata);
-    xfree(vsyncdata);
+    free(hsyncdata);
+    free(vsyncdata);
 
     return (client->noClientException);
 }
@@ -1421,11 +1421,11 @@ ProcXF86VidModeGetDotClocks(ClientPtr client)
     rep.flags = 0;
 
     if (!ClockProg) {
-	Clocks = xalloc(numClocks * sizeof(int));
+	Clocks = malloc(numClocks * sizeof(int));
 	if (!Clocks)
 	    return BadValue;
 	if (!VidModeGetClocks(stuff->screen, Clocks)) {
-	    xfree(Clocks);
+	    free(Clocks);
 	    return BadValue;
 	}
     }
@@ -1452,7 +1452,7 @@ ProcXF86VidModeGetDotClocks(ClientPtr client)
 	}
     }
 
-    xfree(Clocks);
+    free(Clocks);
     return (client->noClientException);
 }
 
@@ -1557,12 +1557,12 @@ ProcXF86VidModeGetGammaRamp(ClientPtr client)
 
     if(stuff->size) {
 	ramplen = length * 3 * sizeof(CARD16);
-	if (!(ramp = xalloc(ramplen)))
+	if (!(ramp = malloc(ramplen)))
 	    return BadAlloc;
    
         if (!VidModeGetGammaRamp(stuff->screen, stuff->size, 
 		ramp, ramp + length, ramp + (length * 2))) {
-	    xfree(ramp);
+	    free(ramp);
             return BadValue;
 	}
     }
@@ -1581,7 +1581,7 @@ ProcXF86VidModeGetGammaRamp(ClientPtr client)
 
     if(stuff->size) {
 	WriteToClient(client, ramplen, (char*)ramp);
-        xfree(ramp);
+        free(ramp);
     }
 
     return (client->noClientException);
@@ -1657,7 +1657,7 @@ ProcXF86VidModeSetClientVersion(ClientPtr client)
     REQUEST_SIZE_MATCH(xXF86VidModeSetClientVersionReq);
 
     if ((pPriv = VM_GETPRIV(client)) == NULL) {
-	pPriv = xalloc(sizeof(VidModePrivRec));
+	pPriv = malloc(sizeof(VidModePrivRec));
 	if (!pPriv)
 	    return BadAlloc;
 	VM_SETPRIV(client, pPriv);
