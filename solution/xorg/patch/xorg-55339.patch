diff --git a/hw/dmx/input/lnx-keyboard.c b/hw/dmx/input/lnx-keyboard.c
index 06e9ec7..ecf4f59 100644
--- a/hw/dmx/input/lnx-keyboard.c
+++ b/hw/dmx/input/lnx-keyboard.c
@@ -172,7 +172,6 @@
 #define NUM_AT2LNX (sizeof(at2lnx) / sizeof(at2lnx[0]))
 #define NUM_STATE_ENTRIES (256/32)
 
-
 /* Private area for Linux-style keyboards. */
 typedef struct _myPrivate {
     int            fd;
@@ -199,23 +198,29 @@ static myPrivate *PRIV = NULL;
 #undef SYSCALL
 #define SYSCALL(call) while(((call) == -1) && (errno == EINTR))
 
-static int kbdLinuxKeyDown(myPrivate *priv, int keyCode)
+static int
+kbdLinuxKeyDown(myPrivate * priv, int keyCode)
 {
     CARD8  byte = keyCode >> 5;
     CARD32 bit  = 1 << (keyCode & 0x1f);
 
-    if (byte > NUM_STATE_ENTRIES) return 0;
+    if (byte > NUM_STATE_ENTRIES)
+        return 0;
     return priv->kbdState[byte] & bit;
 }
 
-static void kbdLinuxKeyState(myPrivate *priv, int type, int keyCode)
+static void
+kbdLinuxKeyState(myPrivate * priv, int type, int keyCode)
 {
     CARD8  byte = keyCode >> 5;
     CARD32 bit  = 1 << (keyCode & 0x1f);
 
-    if (byte > NUM_STATE_ENTRIES) return;
-    if (type == KeyPress) priv->kbdState[byte] |= bit;
-    else                  priv->kbdState[byte] &= ~bit;
+    if (byte > NUM_STATE_ENTRIES)
+        return;
+    if (type == KeyPress)
+        priv->kbdState[byte] |= bit;
+    else
+        priv->kbdState[byte] &= ~bit;
 }
 
 static KeySym linux_to_x[256] = {
@@ -288,8 +293,7 @@ static KeySym linux_to_x[256] = {
 /*
  * Maps the AT keycodes to Linux keycodes
  */
-static unsigned char at2lnx[NUM_KEYCODES] =
-{
+static unsigned char at2lnx[NUM_KEYCODES] = {
 	0x01,	/* KEY_Escape */	0x02,	/* KEY_1 */
 	0x03,	/* KEY_2 */		0x04,	/* KEY_3 */
 	0x05,	/* KEY_4 */		0x06,	/* KEY_5 */
@@ -357,16 +361,19 @@ static unsigned char at2lnx[NUM_KEYCODES] =
 };
 
 /** Create a private structure for use within this file. */
-pointer kbdLinuxCreatePrivate(DeviceIntPtr pKeyboard)
+pointer
+kbdLinuxCreatePrivate(DeviceIntPtr pKeyboard)
 {
     myPrivate *priv = calloc(1, sizeof(*priv));
+
     priv->fd        = -1;
     priv->pKeyboard = pKeyboard;
     return priv;
 }
 
 /** Destroy a private structure. */
-void kbdLinuxDestroyPrivate(pointer priv)
+void
+kbdLinuxDestroyPrivate(pointer priv)
 {
     free(priv);
 }
@@ -387,28 +394,28 @@ void kbdLinuxDestroyPrivate(pointer priv)
  * if we ignore the volume and set the duration correctly, then we'll
  * get one parameter "wrong" -- but if we use the volume to scale the
  * duration, then we'll get both parameters "wrong"). */
-void kbdLinuxBell(DevicePtr pDev, int percent,
-                  int volume, int pitch, int duration)
+void
+kbdLinuxBell(DevicePtr pDev, int percent, int volume, int pitch, int duration)
 {
     GETPRIV;
 
     if (duration && pitch) {
-        ioctl(priv->fd,
-              KDMKTONE,
-              ((1193190 / pitch) & 0xffff) /* Low bits specify cycle time */
+        ioctl(priv->fd, KDMKTONE, ((1193190 / pitch) & 0xffff)  /* Low bits specify cycle time */
               | (duration << 16)); /* High bits are duration in msec */
     }
 }
 
 /** Set the LEDs. */
-void kbdLinuxCtrl(DevicePtr pDev, KeybdCtrl *ctrl)
+void
+kbdLinuxCtrl(DevicePtr pDev, KeybdCtrl * ctrl)
 {
     GETPRIV;
 
     ioctl(priv->fd, KDSETLED, ctrl->leds & 0x07);
 }
 
-static int kbdLinuxGetFreeVTNumber(void)
+static int
+kbdLinuxGetFreeVTNumber(void)
 {
     int        fd = -1;
     int        vtno;
@@ -416,7 +423,8 @@ static int kbdLinuxGetFreeVTNumber(void)
     const char *tty0[] = { "/dev/tty0", "/dev/vc/0", NULL };
     
     for (i = 0; tty0[i]; i++)
-        if ((fd = open(tty0[i], O_WRONLY, 0)) >= 0) break;
+        if ((fd = open(tty0[i], O_WRONLY, 0)) >= 0)
+            break;
     if (fd < 0)
         FATAL1("kbdLinuxGetFreeVTNumber: Cannot open tty0 (%s)\n",
                strerror(errno));
@@ -425,7 +433,8 @@ static int kbdLinuxGetFreeVTNumber(void)
     return vtno;
 }
 
-static int kbdLinuxOpenVT(int vtno)
+static int
+kbdLinuxOpenVT(int vtno)
 {
     int        fd = -1;
     int        i;
@@ -434,7 +443,8 @@ static int kbdLinuxOpenVT(int vtno)
 
     for (i = 0; vcs[i]; i++) {
         snprintf(name, sizeof(name), "%s%d", vcs[i], vtno);
-        if ((fd = open(name, O_RDWR | O_NONBLOCK, 0)) >= 0) break;
+        if ((fd = open(name, O_RDWR | O_NONBLOCK, 0)) >= 0)
+            break;
     }
     if (fd < 0)
         FATAL2("kbdLinuxOpenVT: Cannot open VT %d (%s)\n",
@@ -442,23 +452,27 @@ static int kbdLinuxOpenVT(int vtno)
     return fd;
 }
 
-static int kbdLinuxGetCurrentVTNumber(int fd)
+static int
+kbdLinuxGetCurrentVTNumber(int fd)
 {
     struct vt_stat vts;
     
-    if (!ioctl(fd, VT_GETSTATE, &vts)) return vts.v_active;
+    if (!ioctl(fd, VT_GETSTATE, &vts))
+        return vts.v_active;
     return -1;
 }
 
 static int kbdLinuxActivate(int fd, int vtno, int setSig);
 
 /** Currently unused hook called prior to an VT switch. */
-void kbdLinuxVTPreSwitch(pointer p)
+void
+kbdLinuxVTPreSwitch(pointer p)
 {
 }
 
 /** Currently unused hook called after returning from a VT switch. */
-void kbdLinuxVTPostSwitch(pointer p)
+void
+kbdLinuxVTPostSwitch(pointer p)
 {
 }
 
@@ -466,14 +480,16 @@ void kbdLinuxVTPostSwitch(pointer p)
  * function is called with the \a switch_return_data when the VT is
  * switched back to the pre-switch VT (i.e., the user returns to the DMX
  * session). */
-int kbdLinuxVTSwitch(pointer p, int vt,
-                     void (*switch_return)(pointer),
-                     pointer switch_return_data)
+int
+kbdLinuxVTSwitch(pointer p, int vt,
+                 void (*switch_return) (pointer), pointer switch_return_data)
 {
     myPrivate *priv = p;
 
-    if (priv->switched) FATAL0("kbdLinuxVTSwitch: already switched...\n");
-    if (priv->vtno == vt) return 0;
+    if (priv->switched)
+        FATAL0("kbdLinuxVTSwitch: already switched...\n");
+    if (priv->vtno == vt)
+        return 0;
 
     PRIV                     = priv;
     priv->switched           = 0; /* Will switch to 1 in handler */
@@ -484,7 +500,8 @@ int kbdLinuxVTSwitch(pointer p, int vt,
 }
 
 /* RATS: This function is only ever used to handle SIGUSR1. */
-static void kbdLinuxVTSignalHandler(int sig)
+static void
+kbdLinuxVTSignalHandler(int sig)
 {
     myPrivate *priv = PRIV;
     
@@ -499,18 +516,22 @@ static void kbdLinuxVTSignalHandler(int sig)
     }
 }
 
-static int kbdLinuxActivate(int fd, int vtno, int setSig)
+static int
+kbdLinuxActivate(int fd, int vtno, int setSig)
 {
     int            result;
     struct vt_mode VT;
 
     SYSCALL(result = ioctl(fd, VT_ACTIVATE, vtno));
-    if (result) FATAL0("kbdLinuxActivate: VT_ACTIVATE failed\n");
+    if (result)
+        FATAL0("kbdLinuxActivate: VT_ACTIVATE failed\n");
     SYSCALL(result = ioctl(fd, VT_WAITACTIVE, vtno));
-    if (result) FATAL0("kbdLinuxActivate: VT_WAITACTIVE failed\n");
+    if (result)
+        FATAL0("kbdLinuxActivate: VT_WAITACTIVE failed\n");
     if (setSig) {
         SYSCALL(result = ioctl(fd, VT_GETMODE, &VT));
-        if (result < 0) FATAL0("kbdLinuxActivate: VT_GETMODE failed\n");
+        if (result < 0)
+            FATAL0("kbdLinuxActivate: VT_GETMODE failed\n");
         VT.mode   = VT_PROCESS;
         VT.relsig = SIGUSR1;
         VT.acqsig = SIGUSR1;
@@ -521,12 +542,14 @@ static int kbdLinuxActivate(int fd, int vtno, int setSig)
     return Success;
 }
 
-static void kbdLinuxOpenConsole(DevicePtr pDev)
+static void
+kbdLinuxOpenConsole(DevicePtr pDev)
 {
     GETPRIV;
     const char *msg = MESSAGE;
 
-    if (priv->fd >= 0) return;
+    if (priv->fd >= 0)
+        return;
     priv->vtno      = kbdLinuxGetFreeVTNumber();
     priv->fd        = kbdLinuxOpenVT(priv->vtno);
     priv->vtcurrent = kbdLinuxGetCurrentVTNumber(priv->fd);
@@ -534,73 +557,133 @@ static void kbdLinuxOpenConsole(DevicePtr pDev)
          priv->vtcurrent, priv->vtno);
     kbdLinuxActivate(priv->fd, priv->vtno, 1);
     ioctl(priv->fd, KDSETMODE, KD_GRAPHICS); /* To turn off gpm */
-    if (msg) write(priv->fd, msg, strlen(msg));
+    if (msg)
+        write(priv->fd, msg, strlen(msg));
 }
 
-static void kbdLinuxCloseConsole(DevicePtr pDev)
+static void
+kbdLinuxCloseConsole(DevicePtr pDev)
 {
     GETPRIV;
     struct vt_mode VT;
     const char     *msg = FINALMESSAGE;
 
-    if (priv->fd < 0) return;
+    if (priv->fd < 0)
+        return;
 
     ioctl(priv->fd, KDSETMODE, KD_TEXT);
-    if (msg) write(priv->fd, msg, strlen(msg));
+    if (msg)
+        write(priv->fd, msg, strlen(msg));
     if (ioctl(priv->fd, VT_GETMODE, &VT) != -1) {
         VT.mode = VT_AUTO;
         ioctl(priv->fd, VT_SETMODE, &VT);
     }
 
     LOG1("kbdLinuxCloseConsole: switching to VT %d\n", priv->vtcurrent);
-    if (priv->vtcurrent >= 0) kbdLinuxActivate(priv->fd, priv->vtcurrent, 0);
+    if (priv->vtcurrent >= 0)
+        kbdLinuxActivate(priv->fd, priv->vtcurrent, 0);
     
     close(priv->fd);
     priv->fd = -1;
 }
 
 /** Initialize the \a pDev as a Linux keyboard. */
-void kbdLinuxInit(DevicePtr pDev)
+void
+kbdLinuxInit(DevicePtr pDev)
 {
     GETPRIV;
 
-    if (priv->fd <= 0) kbdLinuxOpenConsole(pDev);
+    if (priv->fd <= 0)
+        kbdLinuxOpenConsole(pDev);
     
     ioctl(priv->fd, KDGKBMODE, &priv->kbdtrans);
     if (tcgetattr(priv->fd, &priv->kbdtty) < 0)
         FATAL1("kbdLinuxInit: tcgetattr failed (%s)\n", strerror(errno));
 }
 
-static int kbdLinuxPrefix0Mapping(unsigned char *scanCode)
+static int
+kbdLinuxPrefix0Mapping(unsigned char *scanCode)
 {
                                 /* Table from xfree86/common/xf86Events.c */
     switch (*scanCode) {
-    case KEY_KP_7:        *scanCode = KEY_Home;      break; /* curs home */
-    case KEY_KP_8:        *scanCode = KEY_Up;        break; /* curs up */
-    case KEY_KP_9:        *scanCode = KEY_PgUp;      break; /* curs pgup */
-    case KEY_KP_4:        *scanCode = KEY_Left;      break; /* curs left */
-    case KEY_KP_5:        *scanCode = KEY_Begin;     break; /* curs begin */
-    case KEY_KP_6:        *scanCode = KEY_Right;     break; /* curs right */
-    case KEY_KP_1:        *scanCode = KEY_End;       break; /* curs end */
-    case KEY_KP_2:        *scanCode = KEY_Down;      break; /* curs down */
-    case KEY_KP_3:        *scanCode = KEY_PgDown;    break; /* curs pgdown */
-    case KEY_KP_0:        *scanCode = KEY_Insert;    break; /* curs insert */
-    case KEY_KP_Decimal:  *scanCode = KEY_Delete;    break; /* curs delete */
-    case KEY_Enter:       *scanCode = KEY_KP_Enter;  break; /* keypad enter */
-    case KEY_LCtrl:       *scanCode = KEY_RCtrl;     break; /* right ctrl */
-    case KEY_KP_Multiply: *scanCode = KEY_Print;     break; /* print */
-    case KEY_Slash:       *scanCode = KEY_KP_Divide; break; /* keyp divide */
-    case KEY_Alt:         *scanCode = KEY_AltLang;   break; /* right alt */
-    case KEY_ScrollLock:  *scanCode = KEY_Break;     break; /* curs break */
-    case 0x5b:            *scanCode = KEY_LMeta;     break;
-    case 0x5c:            *scanCode = KEY_RMeta;     break;
-    case 0x5d:            *scanCode = KEY_Menu;      break;
-    case KEY_F3:          *scanCode = KEY_F13;       break;
-    case KEY_F4:          *scanCode = KEY_F14;       break;
-    case KEY_F5:          *scanCode = KEY_F15;       break;
-    case KEY_F6:          *scanCode = KEY_F16;       break;
-    case KEY_F7:          *scanCode = KEY_F17;       break;
-    case KEY_KP_Plus:     *scanCode = KEY_KP_DEC;    break;
+    case KEY_KP_7:
+        *scanCode = KEY_Home;
+        break;                  /* curs home */
+    case KEY_KP_8:
+        *scanCode = KEY_Up;
+        break;                  /* curs up */
+    case KEY_KP_9:
+        *scanCode = KEY_PgUp;
+        break;                  /* curs pgup */
+    case KEY_KP_4:
+        *scanCode = KEY_Left;
+        break;                  /* curs left */
+    case KEY_KP_5:
+        *scanCode = KEY_Begin;
+        break;                  /* curs begin */
+    case KEY_KP_6:
+        *scanCode = KEY_Right;
+        break;                  /* curs right */
+    case KEY_KP_1:
+        *scanCode = KEY_End;
+        break;                  /* curs end */
+    case KEY_KP_2:
+        *scanCode = KEY_Down;
+        break;                  /* curs down */
+    case KEY_KP_3:
+        *scanCode = KEY_PgDown;
+        break;                  /* curs pgdown */
+    case KEY_KP_0:
+        *scanCode = KEY_Insert;
+        break;                  /* curs insert */
+    case KEY_KP_Decimal:
+        *scanCode = KEY_Delete;
+        break;                  /* curs delete */
+    case KEY_Enter:
+        *scanCode = KEY_KP_Enter;
+        break;                  /* keypad enter */
+    case KEY_LCtrl:
+        *scanCode = KEY_RCtrl;
+        break;                  /* right ctrl */
+    case KEY_KP_Multiply:
+        *scanCode = KEY_Print;
+        break;                  /* print */
+    case KEY_Slash:
+        *scanCode = KEY_KP_Divide;
+        break;                  /* keyp divide */
+    case KEY_Alt:
+        *scanCode = KEY_AltLang;
+        break;                  /* right alt */
+    case KEY_ScrollLock:
+        *scanCode = KEY_Break;
+        break;                  /* curs break */
+    case 0x5b:
+        *scanCode = KEY_LMeta;
+        break;
+    case 0x5c:
+        *scanCode = KEY_RMeta;
+        break;
+    case 0x5d:
+        *scanCode = KEY_Menu;
+        break;
+    case KEY_F3:
+        *scanCode = KEY_F13;
+        break;
+    case KEY_F4:
+        *scanCode = KEY_F14;
+        break;
+    case KEY_F5:
+        *scanCode = KEY_F15;
+        break;
+    case KEY_F6:
+        *scanCode = KEY_F16;
+        break;
+    case KEY_F7:
+        *scanCode = KEY_F17;
+        break;
+    case KEY_KP_Plus:
+        *scanCode = KEY_KP_DEC;
+        break;
         /*
          * Ignore virtual shifts (E0 2A, E0 AA, E0 36, E0 B6)
          */
@@ -618,7 +701,8 @@ static int kbdLinuxPrefix0Mapping(unsigned char *scanCode)
     return 0;
 }
 
-static int kbdLinuxPrefixMapping(myPrivate *priv, unsigned char *scanCode)
+static int
+kbdLinuxPrefixMapping(myPrivate * priv, unsigned char *scanCode)
 {
     int           pressed = *scanCode & 0x80;
     unsigned char code    = *scanCode & 0x7f;
@@ -638,14 +722,16 @@ static int kbdLinuxPrefixMapping(myPrivate *priv, unsigned char *scanCode)
     switch (priv->prefix) {
     case KEY_Prefix0:
         priv->prefix = 0;
-        if (kbdLinuxPrefix0Mapping(&code)) return 1; /* Skip sequence */
+        if (kbdLinuxPrefix0Mapping(&code))
+            return 1;           /* Skip sequence */
         break;
     case KEY_Prefix1:
         priv->prefix = (code = KEY_LCtrl) ? KEY_LCtrl : 0;
         return 1;                                       /* Use new prefix */
     case KEY_LCtrl:
         priv->prefix = 0;
-        if (code != KEY_NumLock) return 1;              /* Skip sequence*/
+        if (code != KEY_NumLock)
+            return 1;           /* Skip sequence */
         code = KEY_Pause;
         break;
     }
@@ -654,11 +740,10 @@ static int kbdLinuxPrefixMapping(myPrivate *priv, unsigned char *scanCode)
     return 0;                                           /* Use old scanCode */
 }
 
-static void kbdLinuxConvert(DevicePtr pDev,
+static void
+kbdLinuxConvert(DevicePtr pDev,
                             unsigned char scanCode,
-                            ENQUEUEPROC enqueue,
-                            CHECKPROC checkspecial,
-                            BLOCK block)
+                ENQUEUEPROC enqueue, CHECKPROC checkspecial, BLOCK block)
 {
     GETPRIV;
     XkbSrvInfoPtr  xkbi = priv->pKeyboard->key->xkbInfo;
@@ -668,7 +753,8 @@ static void kbdLinuxConvert(DevicePtr pDev,
     int            switching;
 
     /* Do special PC/AT prefix mapping -- may change scanCode! */
-    if (kbdLinuxPrefixMapping(priv, &scanCode)) return;
+    if (kbdLinuxPrefixMapping(priv, &scanCode))
+        return;
 
     type    = (scanCode & 0x80) ? KeyRelease : KeyPress;
     keyCode = (scanCode & 0x7f) + MIN_KEYCODE;
@@ -681,6 +767,7 @@ static void kbdLinuxConvert(DevicePtr pDev,
         int effectiveGroup = XkbGetEffectiveGroup(xkbi,
                                                   &xkbi->state,
                                                   scanCode);
+
         keySym = XkbKeySym(xkbi->desc, scanCode, effectiveGroup);
 #if 0
         switch (keySym) {
@@ -689,9 +776,12 @@ static void kbdLinuxConvert(DevicePtr pDev,
         case XK_Shift_Lock:
         case XK_Caps_Lock:
             /* Ignore releases and all but first press */
-            if (kbdLinuxModIgnore(priv, &xE, keySym)) return;
-            if (kbdLinuxKeyDown(priv, &xE)) xE.u.u.type = KeyRelease;
-            else                            xE.u.u.type = KeyPress;
+            if (kbdLinuxModIgnore(priv, &xE, keySym))
+                return;
+            if (kbdLinuxKeyDown(priv, &xE))
+                xE.u.u.type = KeyRelease;
+            else
+                xE.u.u.type = KeyPress;
             break;
         }
 #endif
@@ -703,9 +793,9 @@ static void kbdLinuxConvert(DevicePtr pDev,
             /* No auto-repeat? */
             if ((feed && !feed->ctrl.autoRepeat)
                 || priv->pKeyboard->key->xkbInfo->desc->map->modmap[keyCode]
-                || (feed
-                    && !(feed->ctrl.autoRepeats[keyCode >> 3]
-                         & (1 << (keyCode & 7))))) return; /* Ignore */
+                || (feed && !(feed->ctrl.autoRepeats[keyCode >> 3]
+                              & (1 << (keyCode & 7)))))
+                return;         /* Ignore */
             
             /* Do auto-repeat */
             enqueue(pDev, KeyRelease, keyCode, keySym, NULL, block);
@@ -713,7 +803,8 @@ static void kbdLinuxConvert(DevicePtr pDev,
         }
         
         /* If key is already up, ignore */
-        if (type == KeyRelease && !kbdLinuxKeyDown(priv, keyCode)) return;
+        if (type == KeyRelease && !kbdLinuxKeyDown(priv, keyCode))
+            return;
     }
 
     switching = 0;
@@ -732,11 +823,10 @@ static void kbdLinuxConvert(DevicePtr pDev,
  * with the \a enqueue function.  The \a block type is passed to the
  * functions so that they may block SIGIO handling as appropriate to the
  * caller of this function. */
-void kbdLinuxRead(DevicePtr pDev,
+void
+kbdLinuxRead(DevicePtr pDev,
                   MOTIONPROC motion,
-                  ENQUEUEPROC enqueue,
-                  CHECKPROC checkspecial,
-                  BLOCK block)
+             ENQUEUEPROC enqueue, CHECKPROC checkspecial, BLOCK block)
 {
     GETPRIV;
     unsigned char buf[256];     /* RATS: Only used in length-limited call */
@@ -749,7 +839,8 @@ void kbdLinuxRead(DevicePtr pDev,
 }
 
 /** Turn \a pDev on (i.e., take input from \a pDev). */
-int kbdLinuxOn(DevicePtr pDev)
+int
+kbdLinuxOn(DevicePtr pDev)
 {
     GETPRIV;
     struct termios nTty;
@@ -771,7 +862,8 @@ int kbdLinuxOn(DevicePtr pDev)
 }
 
 /** Turn \a pDev off (i.e., stop taking input from \a pDev). */
-void kbdLinuxOff(DevicePtr pDev)
+void
+kbdLinuxOff(DevicePtr pDev)
 {
     GETPRIV;
 
@@ -780,12 +872,13 @@ void kbdLinuxOff(DevicePtr pDev)
     kbdLinuxCloseConsole(pDev);
 }
 
-
-static void kbdLinuxReadKernelMapping(int fd, KeySymsPtr pKeySyms)
+static void
+kbdLinuxReadKernelMapping(int fd, KeySymsPtr pKeySyms)
 {
     KeySym        *k;
     int           i;
     int           maxkey;
+
     static unsigned char tbl[GLYPHS_PER_KEY] = { /* RATS: Use ok */
         0,	/* unshifted */
         1,	/* shifted */
@@ -825,87 +918,174 @@ static void kbdLinuxReadKernelMapping(int fd, KeySymsPtr pKeySyms)
           *k = NoSymbol;
 
           kbe.kb_table = tbl[j];
-          if (kbe.kb_index == 0 || ioctl(fd, KDGKBENT, &kbe)) continue;
+            if (kbe.kb_index == 0 || ioctl(fd, KDGKBENT, &kbe))
+                continue;
 
           kval = KVAL(kbe.kb_value);
           switch (KTYP(kbe.kb_value)) {
           case KT_LATIN:
-          case KT_LETTER: *k = linux_to_x[kval]; break;
+            case KT_LETTER:
+                *k = linux_to_x[kval];
+                break;
           case KT_FN:
-              if (kval <= 19) *k = XK_F1 + kval;
-              else switch (kbe.kb_value) {
-              case K_FIND:       *k = XK_Home; /* or XK_Find */      break;
-              case K_INSERT:     *k = XK_Insert;                     break;
-              case K_REMOVE:     *k = XK_Delete;                     break;
-              case K_SELECT:     *k = XK_End; /* or XK_Select */     break;
-              case K_PGUP:       *k = XK_Prior;                      break;
-              case K_PGDN:       *k = XK_Next;                       break;
-              case K_HELP:       *k = XK_Help;                       break;
-              case K_DO:         *k = XK_Execute;                    break;
-              case K_PAUSE:      *k = XK_Pause;                      break;
-              case K_MACRO:      *k = XK_Menu;                       break;
-              default:                                               break;
+                if (kval <= 19)
+                    *k = XK_F1 + kval;
+                else
+                    switch (kbe.kb_value) {
+                    case K_FIND:
+                        *k = XK_Home;   /* or XK_Find */
+                        break;
+                    case K_INSERT:
+                        *k = XK_Insert;
+                        break;
+                    case K_REMOVE:
+                        *k = XK_Delete;
+                        break;
+                    case K_SELECT:
+                        *k = XK_End;    /* or XK_Select */
+                        break;
+                    case K_PGUP:
+                        *k = XK_Prior;
+                        break;
+                    case K_PGDN:
+                        *k = XK_Next;
+                        break;
+                    case K_HELP:
+                        *k = XK_Help;
+                        break;
+                    case K_DO:
+                        *k = XK_Execute;
+                        break;
+                    case K_PAUSE:
+                        *k = XK_Pause;
+                        break;
+                    case K_MACRO:
+                        *k = XK_Menu;
+                        break;
+                    default:
+                        break;
               }
               break;
           case KT_SPEC:
               switch (kbe.kb_value) {
-              case K_ENTER:      *k = XK_Return;                     break;
-              case K_BREAK:      *k = XK_Break;                      break;
-              case K_CAPS:       *k = XK_Caps_Lock;                  break;
-              case K_NUM:        *k = XK_Num_Lock;                   break;
-              case K_HOLD:       *k = XK_Scroll_Lock;                break;
-              case K_COMPOSE:    *k = XK_Multi_key;                  break;
-              default:                                               break;
+                case K_ENTER:
+                    *k = XK_Return;
+                    break;
+                case K_BREAK:
+                    *k = XK_Break;
+                    break;
+                case K_CAPS:
+                    *k = XK_Caps_Lock;
+                    break;
+                case K_NUM:
+                    *k = XK_Num_Lock;
+                    break;
+                case K_HOLD:
+                    *k = XK_Scroll_Lock;
+                    break;
+                case K_COMPOSE:
+                    *k = XK_Multi_key;
+                    break;
+                default:
+                    break;
               }
               break;
           case KT_PAD:
               switch (kbe.kb_value) {
-              case K_PPLUS:      *k = XK_KP_Add;                     break;
-              case K_PMINUS:     *k = XK_KP_Subtract;                break;
-              case K_PSTAR:      *k = XK_KP_Multiply;                break;
-              case K_PSLASH:     *k = XK_KP_Divide;                  break;
-              case K_PENTER:     *k = XK_KP_Enter;                   break;
-              case K_PCOMMA:     *k = XK_KP_Separator;               break;
-              case K_PDOT:       *k = XK_KP_Decimal;                 break;
-              case K_PPLUSMINUS: *k = XK_KP_Subtract;                break;
-              default:           if (kval <= 9) *k = XK_KP_0 + kval; break;
+                case K_PPLUS:
+                    *k = XK_KP_Add;
+                    break;
+                case K_PMINUS:
+                    *k = XK_KP_Subtract;
+                    break;
+                case K_PSTAR:
+                    *k = XK_KP_Multiply;
+                    break;
+                case K_PSLASH:
+                    *k = XK_KP_Divide;
+                    break;
+                case K_PENTER:
+                    *k = XK_KP_Enter;
+                    break;
+                case K_PCOMMA:
+                    *k = XK_KP_Separator;
+                    break;
+                case K_PDOT:
+                    *k = XK_KP_Decimal;
+                    break;
+                case K_PPLUSMINUS:
+                    *k = XK_KP_Subtract;
+                    break;
+                default:
+                    if (kval <= 9)
+                        *k = XK_KP_0 + kval;
+                    break;
               }
               break;
           case KT_DEAD:
               /* KT_DEAD keys are for accelerated diacritical creation. */
               switch (kbe.kb_value) {
-              case K_DGRAVE:     *k = XK_dead_grave;                 break;
-              case K_DACUTE:     *k = XK_dead_acute;                 break;
-              case K_DCIRCM:     *k = XK_dead_circumflex;            break;
-              case K_DTILDE:     *k = XK_dead_tilde;                 break;
-              case K_DDIERE:     *k = XK_dead_diaeresis;             break;
+                case K_DGRAVE:
+                    *k = XK_dead_grave;
+                    break;
+                case K_DACUTE:
+                    *k = XK_dead_acute;
+                    break;
+                case K_DCIRCM:
+                    *k = XK_dead_circumflex;
+                    break;
+                case K_DTILDE:
+                    *k = XK_dead_tilde;
+                    break;
+                case K_DDIERE:
+                    *k = XK_dead_diaeresis;
+                    break;
               }
               break;
           case KT_CUR:
               switch (kbe.kb_value) {
-              case K_DOWN:       *k = XK_Down;                       break;
-              case K_LEFT:       *k = XK_Left;                       break;
-              case K_RIGHT:      *k = XK_Right;                      break;
-              case K_UP:         *k = XK_Up;                         break;
+                case K_DOWN:
+                    *k = XK_Down;
+                    break;
+                case K_LEFT:
+                    *k = XK_Left;
+                    break;
+                case K_RIGHT:
+                    *k = XK_Right;
+                    break;
+                case K_UP:
+                    *k = XK_Up;
+                    break;
               }
               break;
           case KT_SHIFT:
               switch (kbe.kb_value) {
-              case K_ALTGR:      *k = XK_Alt_R;                       break;
+                case K_ALTGR:
+                    *k = XK_Alt_R;
+                    break;
               case K_ALT:
                   *k = (kbe.kb_index == 0x64 ? XK_Alt_R : XK_Alt_L);
                   break;
               case K_CTRL:
                   *k = (kbe.kb_index == 0x61 ? XK_Control_R : XK_Control_L);
                   break;
-              case K_CTRLL:      *k = XK_Control_L;                   break;
-              case K_CTRLR:      *k = XK_Control_R;                   break;
+                case K_CTRLL:
+                    *k = XK_Control_L;
+                    break;
+                case K_CTRLR:
+                    *k = XK_Control_R;
+                    break;
               case K_SHIFT:
                   *k = (kbe.kb_index == 0x36 ? XK_Shift_R : XK_Shift_L);
                   break;
-              case K_SHIFTL:     *k = XK_Shift_L;                     break;
-              case K_SHIFTR:     *k = XK_Shift_R;                     break;
-              default:                                                break;
+                case K_SHIFTL:
+                    *k = XK_Shift_L;
+                    break;
+                case K_SHIFTR:
+                    *k = XK_Shift_R;
+                    break;
+                default:
+                    break;
               }
               break;
           case KT_ASCII:
@@ -915,22 +1095,30 @@ static void kbdLinuxReadKernelMapping(int fd, KeySymsPtr pKeySyms)
                */
               break;
           case KT_LOCK:
-              if (kbe.kb_value == K_SHIFTLOCK) *k = XK_Shift_Lock;
+                if (kbe.kb_value == K_SHIFTLOCK)
+                    *k = XK_Shift_Lock;
+                break;
+            default:
               break;
-          default:                                                    break;
           }
       }
       
-      if (k[-1] == k[-2])                   k[-1] = NoSymbol;
-      if (k[-2] == k[-3])                   k[-2] = NoSymbol;
-      if (k[-3] == k[-4])                   k[-3] = NoSymbol;
-      if (k[-4] == k[-2] && k[-3] == k[-1]) k[-2] = k[-1] = NoSymbol;
+        if (k[-1] == k[-2])
+            k[-1] = NoSymbol;
+        if (k[-2] == k[-3])
+            k[-2] = NoSymbol;
+        if (k[-3] == k[-4])
+            k[-3] = NoSymbol;
+        if (k[-4] == k[-2] && k[-3] == k[-1])
+            k[-2] = k[-1] = NoSymbol;
       if (k[-1] == k[-4] && k[-2] == k[-3]
-          && k[-2] == NoSymbol)             k[-1] = NoSymbol;
+            && k[-2] == NoSymbol)
+            k[-1] = NoSymbol;
   }
 }
 
-static void kbdLinuxGetMap(DevicePtr pDev, KeySymsPtr pKeySyms, CARD8 *pModMap)
+static void
+kbdLinuxGetMap(DevicePtr pDev, KeySymsPtr pKeySyms, CARD8 *pModMap)
 {
     GETPRIV;
     KeySym        *k, *mapCopy;
@@ -952,21 +1140,36 @@ static void kbdLinuxGetMap(DevicePtr pDev, KeySymsPtr pKeySyms, CARD8 *pModMap)
         pModMap[i] = NoSymbol;  /* make sure it is restored */
   
     for (k = mapCopy, i = MIN_KEYCODE;
-         i < NUM_KEYCODES + MIN_KEYCODE;
-         i++, k += 4) {
+         i < NUM_KEYCODES + MIN_KEYCODE; i++, k += 4) {
         switch(*k) {
         case XK_Shift_L:
-        case XK_Shift_R:     pModMap[i] = ShiftMask;      break;
+        case XK_Shift_R:
+            pModMap[i] = ShiftMask;
+            break;
         case XK_Control_L:
-        case XK_Control_R:   pModMap[i] = ControlMask;    break;
-        case XK_Caps_Lock:   pModMap[i] = LockMask;       break;
+        case XK_Control_R:
+            pModMap[i] = ControlMask;
+            break;
+        case XK_Caps_Lock:
+            pModMap[i] = LockMask;
+            break;
         case XK_Alt_L:
-        case XK_Alt_R:       pModMap[i] = AltMask;        break;
-        case XK_Num_Lock:    pModMap[i] = NumLockMask;    break;
-        case XK_Scroll_Lock: pModMap[i] = ScrollLockMask; break;
+        case XK_Alt_R:
+            pModMap[i] = AltMask;
+            break;
+        case XK_Num_Lock:
+            pModMap[i] = NumLockMask;
+            break;
+        case XK_Scroll_Lock:
+            pModMap[i] = ScrollLockMask;
+            break;
         case XK_Kana_Lock:
-        case XK_Kana_Shift:  pModMap[i] = KanaMask;       break;
-        case XK_Mode_switch: pModMap[i] = AltLangMask;    break;
+        case XK_Kana_Shift:
+            pModMap[i] = KanaMask;
+            break;
+        case XK_Mode_switch:
+            pModMap[i] = AltLangMask;
+            break;
         }
     }
 
@@ -980,7 +1183,8 @@ static void kbdLinuxGetMap(DevicePtr pDev, KeySymsPtr pKeySyms, CARD8 *pModMap)
 
 /** Fill the \a info structure with information needed to initialize \a
  * pDev. */ 
-void kbdLinuxGetInfo(DevicePtr pDev, DMXLocalInitInfoPtr info)
+void
+kbdLinuxGetInfo(DevicePtr pDev, DMXLocalInitInfoPtr info)
 {
     info->keyboard         = 1;
     info->keyClass         = 1;
