diff --git a/hw/xfree86/i2c/xf86i2c.c b/hw/xfree86/i2c/xf86i2c.c
index e0223f6..1273f4b 100644
--- a/hw/xfree86/i2c/xf86i2c.c
+++ b/hw/xfree86/i2c/xf86i2c.c
@@ -6,7 +6,6 @@
  *      (c) 1998 Gerd Knorr <kraxel@cs.tu-berlin.de>
  */
 
-
 #ifdef HAVE_XORG_CONFIG_H
 #include <xorg-config.h>
 #endif
@@ -93,12 +92,15 @@ I2CRaiseSCL(I2CBusPtr b, int sda, int timeout)
 
     for (i = timeout; i > 0; i -= b->RiseFallTime) {
 	b->I2CGetBits(b, &scl, &sda);
-	if (scl) break;
+        if (scl)
+            break;
 	b->I2CUDelay(b, b->RiseFallTime);
     }
 
     if (i <= 0) {
-	I2C_TIMEOUT(ErrorF("[I2CRaiseSCL(<%s>, %d, %d) timeout]", b->BusName, sda, timeout));    
+        I2C_TIMEOUT(ErrorF
+                    ("[I2CRaiseSCL(<%s>, %d, %d) timeout]", b->BusName, sda,
+                     timeout));
 	return FALSE;
     }
 
@@ -240,7 +242,8 @@ I2CPutByte(I2CDevPtr d, I2CByte data)
     	for (i = d->AcknTimeout; i > 0; i -= b->HoldTime) {
 	    b->I2CUDelay(b, b->HoldTime);
 	    b->I2CGetBits(b, &scl, &sda);
-	    if (sda == 0) break;
+            if (sda == 0)
+                break;
 	}
 
 	if (i <= 0) {
@@ -334,8 +337,7 @@ I2CAddress(I2CDevPtr d, I2CSlaveAddr addr)
 {
     if (I2CStart(d->pI2CBus, d->StartTimeout)) {
 	if (I2CPutByte(d, addr & 0xFF)) {
-	    if ((addr & 0xF8) != 0xF0 &&
-		(addr & 0xFE) != 0x00)
+            if ((addr & 0xF8) != 0xF0 && (addr & 0xFE) != 0x00)
 		return TRUE;
 
 	    if (I2CPutByte(d, (addr >> 8) & 0xFF))
@@ -375,7 +377,8 @@ xf86I2CProbeAddress(I2CBusPtr b, I2CSlaveAddr addr)
 
     r = b->I2CAddress(&d, addr);
 
-    if (r) b->I2CStop(&d);
+    if (r)
+        b->I2CStop(&d);
 
     return r;
 }
@@ -405,8 +408,7 @@ xf86I2CProbeAddress(I2CBusPtr b, I2CSlaveAddr addr)
 
 static Bool
 I2CWriteRead(I2CDevPtr d,
-		 I2CByte *WriteBuffer, int nWrite,
-		 I2CByte *ReadBuffer,  int nRead) 
+             I2CByte * WriteBuffer, int nWrite, I2CByte * ReadBuffer, int nRead)
 {
     Bool r = TRUE;
     I2CBusPtr b = d->pI2CBus;
@@ -432,7 +434,8 @@ I2CWriteRead(I2CDevPtr d,
 	}
     }
 
-    if (s) b->I2CStop(d);
+    if (s)
+        b->I2CStop(d);
 
     return r;
 }
@@ -445,6 +448,7 @@ xf86I2CWriteRead(I2CDevPtr d,
 		 I2CByte *ReadBuffer,  int nRead) 
 {
     I2CBusPtr b = d->pI2CBus;
+
     return b->I2CWriteRead(d,WriteBuffer,nWrite,ReadBuffer,nRead);
 }
 
@@ -485,7 +489,8 @@ xf86I2CReadWord(I2CDevPtr d, I2CByte subaddr, unsigned short *pword)
 {
     I2CByte rb[2];
 
-    if (!xf86I2CWriteRead(d, &subaddr, 1, rb, 2)) return FALSE;
+    if (!xf86I2CWriteRead(d, &subaddr, 1, rb, 2))
+        return FALSE;
 
     *pword = (rb[0] << 8) | rb[1];
 
@@ -576,7 +581,8 @@ xf86I2CWriteVec(I2CDevPtr d, I2CByte *vec, int nValues)
 		break;
 	}
 
-	if (s > 0) b->I2CStop(d);	
+        if (s > 0)
+            b->I2CStop(d);
     }
 
     return r;
@@ -623,7 +629,8 @@ xf86DestroyI2CDevRec(I2CDevPtr d, Bool unalloc)
 		   "I2C device \"%s:%s\" removed.\n",
 		   d->pI2CBus->BusName, d->DevName);
 
-	if (unalloc) free(d);
+        if (unalloc)
+            free(d);
     }
 }
 
@@ -647,14 +654,17 @@ xf86I2CDevInit(I2CDevPtr d)
 
     if (d == NULL ||
 	(b = d->pI2CBus) == NULL ||
-        (d->SlaveAddr & 1) ||
-        xf86I2CFindDev(b, d->SlaveAddr) != NULL)
+        (d->SlaveAddr & 1) || xf86I2CFindDev(b, d->SlaveAddr) != NULL)
 	return FALSE;
 
-    if (d->BitTimeout <= 0) d->BitTimeout = b->BitTimeout;
-    if (d->ByteTimeout <= 0) d->ByteTimeout = b->ByteTimeout;
-    if (d->AcknTimeout <= 0) d->AcknTimeout = b->AcknTimeout;
-    if (d->StartTimeout <= 0) d->StartTimeout = b->StartTimeout;
+    if (d->BitTimeout <= 0)
+        d->BitTimeout = b->BitTimeout;
+    if (d->ByteTimeout <= 0)
+        d->ByteTimeout = b->ByteTimeout;
+    if (d->AcknTimeout <= 0)
+        d->AcknTimeout = b->AcknTimeout;
+    if (d->StartTimeout <= 0)
+        d->StartTimeout = b->StartTimeout;
 
     d->NextDev = b->FirstDev;
     b->FirstDev = d;
@@ -738,11 +748,12 @@ xf86DestroyI2CBusRec(I2CBusPtr b, Bool unalloc, Bool devs_too)
 		    b->FirstDev = d->NextDev;
 		    xf86DestroyI2CDevRec(d, unalloc);
 		}
-	    } else {
+            }
+            else {
 		if (unalloc) {
-		    xf86Msg(X_ERROR, "i2c bug: Attempt to remove I2C bus \"%s\", "
-			    "but device list is not empty.\n",
-			    b->BusName);
+                    xf86Msg(X_ERROR,
+                            "i2c bug: Attempt to remove I2C bus \"%s\", "
+                            "but device list is not empty.\n", b->BusName);
 		    return;
 		}
 	    }
@@ -751,7 +762,8 @@ xf86DestroyI2CBusRec(I2CBusPtr b, Bool unalloc, Bool devs_too)
 	xf86DrvMsg(b->scrnIndex, X_INFO, "I2C bus \"%s\" removed.\n",
 		   b->BusName);
 
-	if (unalloc) free(b);
+        if (unalloc)
+            free(b);
     }
 }
 
@@ -771,8 +783,7 @@ xf86I2CBusInit(I2CBusPtr b)
      * then the name must be unique throughout the server. 
      */
 
-    if (b->BusName == NULL ||
-	xf86I2CFindBus(b->scrnIndex, b->BusName) != NULL)
+    if (b->BusName == NULL || xf86I2CFindBus(b->scrnIndex, b->BusName) != NULL)
 	return FALSE;
 
     /* If the high level functions are not
@@ -780,20 +791,17 @@ xf86I2CBusInit(I2CBusPtr b)
      * In this case we need the low-level
      * function.
      */
-    if (b->I2CWriteRead == NULL) 
-    {
+    if (b->I2CWriteRead == NULL) {
         b->I2CWriteRead=I2CWriteRead;
 
-        if (b->I2CPutBits == NULL ||
-	    b->I2CGetBits == NULL) 
-        {
+        if (b->I2CPutBits == NULL || b->I2CGetBits == NULL) {
 	    if (b->I2CPutByte == NULL ||
 	        b->I2CGetByte == NULL ||
 	        b->I2CAddress == NULL ||
-	        b->I2CStart   == NULL ||
-	        b->I2CStop    == NULL)
+                b->I2CStart == NULL || b->I2CStop == NULL)
 	        return FALSE;
-        } else { 
+        }
+        else {
 	    b->I2CPutByte = I2CPutByte;
 	    b->I2CGetByte = I2CGetByte;
 	    b->I2CAddress = I2CAddress;
@@ -805,11 +813,16 @@ xf86I2CBusInit(I2CBusPtr b)
     if (b->I2CUDelay == NULL)
 	b->I2CUDelay = I2CUDelay;
 
-    if (b->HoldTime < 2) b->HoldTime = 5;
-    if (b->BitTimeout <= 0) b->BitTimeout = b->HoldTime;
-    if (b->ByteTimeout <= 0) b->ByteTimeout = b->HoldTime;
-    if (b->AcknTimeout <= 0) b->AcknTimeout = b->HoldTime;
-    if (b->StartTimeout <= 0) b->StartTimeout = b->HoldTime;
+    if (b->HoldTime < 2)
+        b->HoldTime = 5;
+    if (b->BitTimeout <= 0)
+        b->BitTimeout = b->HoldTime;
+    if (b->ByteTimeout <= 0)
+        b->ByteTimeout = b->HoldTime;
+    if (b->AcknTimeout <= 0)
+        b->AcknTimeout = b->HoldTime;
+    if (b->StartTimeout <= 0)
+        b->StartTimeout = b->HoldTime;
 
     /* Put new bus on list. */
 
