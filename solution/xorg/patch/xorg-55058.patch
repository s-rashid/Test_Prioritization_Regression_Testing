diff --git a/config/hal.c b/config/hal.c
index 088c993..2ead556 100644
--- a/config/hal.c
+++ b/config/hal.c
@@ -39,11 +39,9 @@
 #include "config-backends.h"
 #include "os.h"
 
-
 #define LIBHAL_PROP_KEY "input.x11_options."
 #define LIBHAL_XKB_PROP_KEY "input.xkb."
 
-
 struct config_hal_info {
     DBusConnection *system_bus;
     LibHalContext *hal_ctx;
@@ -77,7 +75,8 @@ get_prop_string(LibHalContext *hal_ctx, const char *udi, const char *name)
     char *prop, *ret;
 
     prop = libhal_device_get_property_string(hal_ctx, udi, name, NULL);
-    LogMessageVerb(X_INFO, 10, "config/hal: getting %s on %s returned %s\n", name, udi, prop ? prop : "(null)");
+    LogMessageVerb(X_INFO, 10, "config/hal: getting %s on %s returned %s\n",
+                   name, udi, prop ? prop : "(null)");
     if (prop) {
         ret = strdup(prop);
         libhal_free_string(prop);
@@ -90,7 +89,8 @@ get_prop_string(LibHalContext *hal_ctx, const char *udi, const char *name)
 }
 
 static char *
-get_prop_string_array(LibHalContext *hal_ctx, const char *udi, const char *prop)
+get_prop_string_array(LibHalContext * hal_ctx, const char *udi,
+                      const char *prop)
 {
     char **props, *ret, *str;
     int i, len = 0;
@@ -139,19 +139,20 @@ device_added(LibHalContext *hal_ctx, const char *udi)
 	LibHalPropertySetIterator set_iter;
     char *psi_key = NULL, *tmp_val;
 
-
     dbus_error_init(&error);
 
     driver = get_prop_string(hal_ctx, udi, "input.x11_driver");
     if (!driver){
         /* verbose, don't tell the user unless they _want_ to see it */
-        LogMessageVerb(X_INFO,7,"config/hal: no driver specified for device %s\n", udi);
+        LogMessageVerb(X_INFO, 7,
+                       "config/hal: no driver specified for device %s\n", udi);
         goto unwind;
     }
 
     path = get_prop_string(hal_ctx, udi, "input.device");
     if (!path) {
-        LogMessage(X_WARNING,"config/hal: no driver or path specified for %s\n", udi);
+        LogMessage(X_WARNING,
+                   "config/hal: no driver or path specified for %s\n", udi);
         goto unwind;
     }
     attrs.device = strdup(path);
@@ -207,7 +208,8 @@ device_added(LibHalContext *hal_ctx, const char *udi)
 
     input_options = input_option_new(NULL, "_source", "server/hal");
     if (!input_options) {
-        LogMessage(X_ERROR, "config/hal: couldn't allocate first key/value pair\n");
+        LogMessage(X_ERROR,
+                   "config/hal: couldn't allocate first key/value pair\n");
         goto unwind;
     }
 
@@ -226,9 +228,9 @@ device_added(LibHalContext *hal_ctx, const char *udi)
     }
 
     /* Check for duplicate devices */
-    if (device_is_duplicate(config_info))
-    {
-        LogMessage(X_WARNING, "config/hal: device %s already added. Ignoring.\n", name);
+    if (device_is_duplicate(config_info)) {
+        LogMessage(X_WARNING,
+                   "config/hal: device %s already added. Ignoring.\n", name);
         goto unwind;
     }
 
@@ -237,7 +239,8 @@ device_added(LibHalContext *hal_ctx, const char *udi)
     set = libhal_device_get_all_properties(hal_ctx, udi, &error);
 
     if (!set) {
-        LogMessage(X_ERROR, "config/hal: couldn't get property list for %s: %s (%s)\n",
+        LogMessage(X_ERROR,
+                   "config/hal: couldn't get property list for %s: %s (%s)\n",
                udi, error.name, error.message);
         goto unwind;
     }
@@ -250,7 +253,8 @@ device_added(LibHalContext *hal_ctx, const char *udi)
         if (psi_key){
 
             /* normal options first (input.x11_options.<propname>) */
-            if (!strncasecmp(psi_key, LIBHAL_PROP_KEY, sizeof(LIBHAL_PROP_KEY)-1)){
+            if (!strncasecmp
+                (psi_key, LIBHAL_PROP_KEY, sizeof(LIBHAL_PROP_KEY) - 1)) {
                 char* tmp;
 
                 /* only support strings for all values */
@@ -265,48 +269,52 @@ device_added(LibHalContext *hal_ctx, const char *udi)
                      * Since we can't predict the order in which the keys
                      * arrive, we need to store them.
                      */
-                    if ((tmp = strcasestr(psi_key, "xkb")) && strlen(tmp) >= 4)
-                    {
-                        if (!strcasecmp(&tmp[3], "layout"))
-                        {
+                    if ((tmp = strcasestr(psi_key, "xkb")) && strlen(tmp) >= 4) {
+                        if (!strcasecmp(&tmp[3], "layout")) {
                             free(xkb_opts.layout);
                             xkb_opts.layout = strdup(tmp_val);
-                        } else if (!strcasecmp(&tmp[3], "model"))
-                        {
+                        }
+                        else if (!strcasecmp(&tmp[3], "model")) {
                             free(xkb_opts.model);
                             xkb_opts.model = strdup(tmp_val);
-                        } else if (!strcasecmp(&tmp[3], "rules"))
-                        {
+                        }
+                        else if (!strcasecmp(&tmp[3], "rules")) {
                             free(xkb_opts.rules);
                             xkb_opts.rules = strdup(tmp_val);
-                        } else if (!strcasecmp(&tmp[3], "variant"))
-                        {
+                        }
+                        else if (!strcasecmp(&tmp[3], "variant")) {
                             free(xkb_opts.variant);
                             xkb_opts.variant = strdup(tmp_val);
-                        } else if (!strcasecmp(&tmp[3], "options"))
-                        {
+                        }
+                        else if (!strcasecmp(&tmp[3], "options")) {
                             free(xkb_opts.options);
                             xkb_opts.options = strdup(tmp_val);
                         }
-                    } else
-                    {
+                    }
+                    else {
                         /* all others */
-                        input_options = input_option_new(input_options, psi_key + sizeof(LIBHAL_PROP_KEY)-1, tmp_val);
+                        input_options =
+                            input_option_new(input_options,
+                                             psi_key + sizeof(LIBHAL_PROP_KEY) -
+                                             1, tmp_val);
                         free(tmp_val);
                     }
-                } else
-                {
+                }
+                else {
                     /* server 1.4 had xkb_options as strlist. */
                     if ((tmp = strcasestr(psi_key, "xkb")) &&
                         (strlen(tmp) >= 4) &&
                         (!strcasecmp(&tmp[3], "options")) &&
-                        (tmp_val = get_prop_string_array(hal_ctx, udi, psi_key)))
-                    {
+                        (tmp_val =
+                         get_prop_string_array(hal_ctx, udi, psi_key))) {
                         free(xkb_opts.options);
                         xkb_opts.options = strdup(tmp_val);
                     }
                 }
-            } else if (!strncasecmp(psi_key, LIBHAL_XKB_PROP_KEY, sizeof(LIBHAL_XKB_PROP_KEY)-1)){
+            }
+            else if (!strncasecmp
+                     (psi_key, LIBHAL_XKB_PROP_KEY,
+                      sizeof(LIBHAL_XKB_PROP_KEY) - 1)) {
                 char* tmp;
 
                 /* only support strings for all values */
@@ -316,34 +324,33 @@ device_added(LibHalContext *hal_ctx, const char *udi)
 
                     tmp = &psi_key[sizeof(LIBHAL_XKB_PROP_KEY) - 1];
 
-                    if (!strcasecmp(tmp, "layout"))
-                    {
+                    if (!strcasecmp(tmp, "layout")) {
                         if (!xkb_opts.layout)
                             xkb_opts.layout = strdup(tmp_val);
-                    } else if (!strcasecmp(tmp, "rules"))
-                    {
+                    }
+                    else if (!strcasecmp(tmp, "rules")) {
                         if (!xkb_opts.rules)
                             xkb_opts.rules = strdup(tmp_val);
-                    } else if (!strcasecmp(tmp, "variant"))
-                    {
+                    }
+                    else if (!strcasecmp(tmp, "variant")) {
                         if (!xkb_opts.variant)
                             xkb_opts.variant = strdup(tmp_val);
-                    } else if (!strcasecmp(tmp, "model"))
-                    {
+                    }
+                    else if (!strcasecmp(tmp, "model")) {
                         if (!xkb_opts.model)
                             xkb_opts.model = strdup(tmp_val);
-                    } else if (!strcasecmp(tmp, "options"))
-                    {
+                    }
+                    else if (!strcasecmp(tmp, "options")) {
                         if (!xkb_opts.options)
                             xkb_opts.options = strdup(tmp_val);
                     }
                     free(tmp_val);
-                } else
-                {
+                }
+                else {
                     /* server 1.4 had xkb options as strlist */
                     tmp_val = get_prop_string_array(hal_ctx, udi, psi_key);
-                    if (tmp_val && strlen(psi_key) >= sizeof(LIBHAL_XKB_PROP_KEY))
-                    {
+                    if (tmp_val &&
+                        strlen(psi_key) >= sizeof(LIBHAL_XKB_PROP_KEY)) {
                         tmp = &psi_key[sizeof(LIBHAL_XKB_PROP_KEY) - 1];
                         if (!strcasecmp(tmp, ".options") && (!xkb_opts.options))
                             xkb_opts.options = strdup(tmp_val);
@@ -357,24 +364,29 @@ device_added(LibHalContext *hal_ctx, const char *udi)
         libhal_psi_next(&set_iter);
     }
 
-
     /* Now add xkb options */
     if (xkb_opts.layout)
-        input_options = input_option_new(input_options, "xkb_layout", xkb_opts.layout);
+        input_options =
+            input_option_new(input_options, "xkb_layout", xkb_opts.layout);
     if (xkb_opts.rules)
-        input_options = input_option_new(input_options, "xkb_rules", xkb_opts.rules);
+        input_options =
+            input_option_new(input_options, "xkb_rules", xkb_opts.rules);
     if (xkb_opts.variant)
-        input_options = input_option_new(input_options, "xkb_variant", xkb_opts.variant);
+        input_options =
+            input_option_new(input_options, "xkb_variant", xkb_opts.variant);
     if (xkb_opts.model)
-        input_options = input_option_new(input_options, "xkb_model", xkb_opts.model);
+        input_options =
+            input_option_new(input_options, "xkb_model", xkb_opts.model);
     if (xkb_opts.options)
-        input_options = input_option_new(input_options, "xkb_options", xkb_opts.options);
+        input_options =
+            input_option_new(input_options, "xkb_options", xkb_opts.options);
     input_options = input_option_new(input_options, "config_info", config_info);
 
     /* this isn't an error, but how else do you output something that the user can see? */
     LogMessage(X_INFO, "config/hal: Adding input device %s\n", name);
     if ((rc = NewInputDeviceRequest(input_options, &attrs, &dev)) != Success) {
-        LogMessage(X_ERROR, "config/hal: NewInputDeviceRequest failed (%d)\n", rc);
+        LogMessage(X_ERROR, "config/hal: NewInputDeviceRequest failed (%d)\n",
+                   rc);
         dev = NULL;
         goto unwind;
     }
@@ -395,6 +407,7 @@ unwind:
     free(attrs.usb_id);
     if (attrs.tags) {
         char **tag = attrs.tags;
+
         while (*tag) {
             free(*tag);
             tag++;
@@ -423,7 +436,8 @@ disconnect_hook(void *data)
         if (dbus_connection_get_is_connected(info->system_bus)) {
             dbus_error_init(&error);
             if (!libhal_ctx_shutdown(info->hal_ctx, &error))
-                LogMessage(X_WARNING, "config/hal: disconnect_hook couldn't shut down context: %s (%s)\n",
+                LogMessage(X_WARNING,
+                           "config/hal: disconnect_hook couldn't shut down context: %s (%s)\n",
                         error.name, error.message);
             dbus_error_free(&error);
         }
@@ -455,17 +469,20 @@ connect_and_register(DBusConnection *connection, struct config_hal_info *info)
     }
 
     if (!libhal_ctx_set_dbus_connection(info->hal_ctx, info->system_bus)) {
-        LogMessage(X_ERROR, "config/hal: couldn't associate HAL context with bus\n");
+        LogMessage(X_ERROR,
+                   "config/hal: couldn't associate HAL context with bus\n");
         goto out_err;
     }
     if (!libhal_ctx_init(info->hal_ctx, &error)) {
-        LogMessage(X_ERROR, "config/hal: couldn't initialise context: %s (%s)\n",
+        LogMessage(X_ERROR,
+                   "config/hal: couldn't initialise context: %s (%s)\n",
 		   error.name ? error.name : "unknown error",
 		   error.message ? error.message : "null");
         goto out_err;
     }
     if (!libhal_device_property_watch_all(info->hal_ctx, &error)) {
-        LogMessage(X_ERROR, "config/hal: couldn't watch all properties: %s (%s)\n",
+        LogMessage(X_ERROR,
+                   "config/hal: couldn't watch all properties: %s (%s)\n",
 		   error.name ? error.name : "unknown error",
 		   error.message ? error.message : "null");
         goto out_ctx;
@@ -494,7 +511,8 @@ out_ctx:
     dbus_error_free(&error);
 
     if (!libhal_ctx_shutdown(info->hal_ctx, &error)) {
-        LogMessage(X_WARNING, "config/hal: couldn't shut down context: %s (%s)\n",
+        LogMessage(X_WARNING,
+                   "config/hal: couldn't shut down context: %s (%s)\n",
                 error.name ? error.name : "unknown error",
                 error.message ? error.message : "null");
         dbus_error_free(&error);
@@ -513,7 +531,6 @@ out_err:
     return FALSE;
 }
 
-
 /**
  * Handle NewOwnerChanged signals to deal with HAL startup at X server runtime.
  *
@@ -523,13 +540,13 @@ out_err:
  * owner.
  */
 static DBusHandlerResult
-ownerchanged_handler(DBusConnection *connection, DBusMessage *message, void *data)
+ownerchanged_handler(DBusConnection * connection, DBusMessage * message,
+                     void *data)
 {
     int ret = DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
 
     if (dbus_message_is_signal(message,
-                               "org.freedesktop.DBus",
-                               "NameOwnerChanged")) {
+                               "org.freedesktop.DBus", "NameOwnerChanged")) {
         DBusError error;
         char *name, *old_owner, *new_owner;
 
@@ -537,17 +554,19 @@ ownerchanged_handler(DBusConnection *connection, DBusMessage *message, void *dat
         dbus_message_get_args(message, &error,
                               DBUS_TYPE_STRING, &name,
                               DBUS_TYPE_STRING, &old_owner,
-                              DBUS_TYPE_STRING, &new_owner,
-                              DBUS_TYPE_INVALID);
+                              DBUS_TYPE_STRING, &new_owner, DBUS_TYPE_INVALID);
 
         if (dbus_error_is_set(&error)) {
-            ErrorF("[config/hal] failed to get NameOwnerChanged args: %s (%s)\n",
+            ErrorF
+                ("[config/hal] failed to get NameOwnerChanged args: %s (%s)\n",
                    error.name, error.message);
-        } else if (name && strcmp(name, "org.freedesktop.Hal") == 0) {
+        }
+        else if (name && strcmp(name, "org.freedesktop.Hal") == 0) {
 
             if (!old_owner || !strlen(old_owner)) {
                 DebugF("[config/hal] HAL startup detected.\n");
-                if (connect_and_register(connection, (struct config_hal_info*)data))
+                if (connect_and_register
+                    (connection, (struct config_hal_info *) data))
                     dbus_connection_unregister_object_path(connection,
                                                      "/org/freedesktop/DBus");
                 else
@@ -573,8 +592,7 @@ listen_for_startup(DBusConnection *connection, void *data)
     const char MATCH_RULE[] = "sender='org.freedesktop.DBus',"
                               "interface='org.freedesktop.DBus',"
                               "type='signal',"
-                              "path='/org/freedesktop/DBus',"
-                              "member='NameOwnerChanged'";
+        "path='/org/freedesktop/DBus'," "member='NameOwnerChanged'";
     int rc = FALSE;
 
     dbus_error_init(&error);
@@ -582,12 +600,12 @@ listen_for_startup(DBusConnection *connection, void *data)
     if (!dbus_error_is_set(&error)) {
         if (dbus_connection_register_object_path(connection,
                                                   "/org/freedesktop/DBus",
-                                                  &vtable,
-                                                  data))
+                                                 &vtable, data))
             rc = TRUE;
         else
             ErrorF("[config/hal] cannot register object path.\n");
-    } else {
+    }
+    else {
         ErrorF("[config/hal] couldn't add match rule: %s (%s)\n", error.name,
                 error.message);
         ErrorF("[config/hal] cannot detect a HAL startup.\n");
@@ -612,6 +630,7 @@ connect_hook(DBusConnection *connection, void *data)
 }
 
 static struct config_hal_info hal_info;
+
 static struct config_dbus_core_hook hook = {
     .connect = connect_hook,
     .disconnect = disconnect_hook,
