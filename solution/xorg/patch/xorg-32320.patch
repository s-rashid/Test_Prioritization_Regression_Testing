diff --git a/mfb/mfbwindow.c b/mfb/mfbwindow.c
index b138d58..4cbf59f 100644
--- a/mfb/mfbwindow.c
+++ b/mfb/mfbwindow.c
@@ -64,31 +64,14 @@ Bool
 mfbCreateWindow(pWin)
     register WindowPtr pWin;
 {
-    register mfbPrivWin *pPrivWin;
-
-    pPrivWin = (mfbPrivWin *)(pWin->devPrivates[mfbWindowPrivateIndex].ptr);
-    pPrivWin->pRotatedBorder = NullPixmap;
-    pPrivWin->pRotatedBackground = NullPixmap;
-    pPrivWin->fastBackground = FALSE;
-    pPrivWin->fastBorder = FALSE;
-
     return (TRUE);
 }
 
 /* This always returns true, because Xfree can't fail.  It might be possible
  * on some devices for Destroy to fail */
 Bool 
-mfbDestroyWindow(pWin)
-    WindowPtr pWin;
+mfbDestroyWindow(WindowPtr pWin)
 {
-    register mfbPrivWin *pPrivWin;
-
-    pPrivWin = (mfbPrivWin *)(pWin->devPrivates[mfbWindowPrivateIndex].ptr);
-
-    if (pPrivWin->pRotatedBorder)
-	(*pWin->drawable.pScreen->DestroyPixmap)(pPrivWin->pRotatedBorder);
-    if (pPrivWin->pRotatedBackground)
-	(*pWin->drawable.pScreen->DestroyPixmap)(pPrivWin->pRotatedBackground);
     return (TRUE);
 }
 
@@ -113,35 +96,6 @@ mfbPositionWindow(pWin, x, y)
     register WindowPtr pWin;
     int x, y;
 {
-    register mfbPrivWin *pPrivWin;
-    int	reset = 0;
-
-    pPrivWin = (mfbPrivWin *)(pWin->devPrivates[mfbWindowPrivateIndex].ptr);
-    if (pWin->backgroundState == BackgroundPixmap && pPrivWin->fastBackground)
-    {
-	mfbXRotatePixmap(pPrivWin->pRotatedBackground,
-			 pWin->drawable.x - pPrivWin->oldRotate.x);
-	mfbYRotatePixmap(pPrivWin->pRotatedBackground,
-			 pWin->drawable.y - pPrivWin->oldRotate.y);
-	reset = 1;
-    }
-
-    if (!pWin->borderIsPixel && pPrivWin->fastBorder)
-    {
-	while (pWin->backgroundState == ParentRelative)
-	    pWin = pWin->parent;
-	mfbXRotatePixmap(pPrivWin->pRotatedBorder,
-			 pWin->drawable.x - pPrivWin->oldRotate.x);
-	mfbYRotatePixmap(pPrivWin->pRotatedBorder,
-			 pWin->drawable.y - pPrivWin->oldRotate.y);
-	reset = 1;
-    }
-    if (reset)
-    {
-	pPrivWin->oldRotate.x = pWin->drawable.x;
-	pPrivWin->oldRotate.y = pWin->drawable.y;
-    }
-
     /* This is the "wrong" fix to the right problem, but it doesn't really
      * cost very much.  When the window is moved, we need to invalidate any
      * RotatedPixmap that exists in any GC currently validated against this
@@ -211,131 +165,3 @@ mfbCopyWindow(pWin, ptOldOrg, prgnSrc)
     DEALLOCATE_LOCAL(pptSrc);
     REGION_DESTROY(pWin->drawable.pScreen, prgnDst);
 }
-
-
-
-/* swap in correct PaintWindow* routine.  If we can use a fast output
-routine (i.e. the pixmap is paddable to 32 bits), also pre-rotate a copy
-of it in devPrivate.
-*/
-Bool
-mfbChangeWindowAttributes(pWin, mask)
-    register WindowPtr pWin;
-    register unsigned long mask;
-{
-    register unsigned long index;
-    register mfbPrivWin *pPrivWin;
-    WindowPtr	pBgWin;
-
-    pPrivWin = (mfbPrivWin *)(pWin->devPrivates[mfbWindowPrivateIndex].ptr);
-    /*
-     * When background state changes from ParentRelative and
-     * we had previously rotated the fast border pixmap to match
-     * the parent relative origin, rerotate to match window
-     */
-    if (mask & (CWBackPixmap | CWBackPixel) &&
-	pWin->backgroundState != ParentRelative &&
-	pPrivWin->fastBorder &&
-	(pPrivWin->oldRotate.x != pWin->drawable.x ||
-	 pPrivWin->oldRotate.y != pWin->drawable.y))
-    {
-	mfbXRotatePixmap(pPrivWin->pRotatedBorder,
-		      pWin->drawable.x - pPrivWin->oldRotate.x);
-	mfbYRotatePixmap(pPrivWin->pRotatedBorder,
-		      pWin->drawable.y - pPrivWin->oldRotate.y);
-	pPrivWin->oldRotate.x = pWin->drawable.x;
-	pPrivWin->oldRotate.y = pWin->drawable.y;
-    }
-    while(mask)
-    {
-	index = lowbit (mask);
-	mask &= ~index;
-	switch(index)
-	{
-	  case CWBackPixmap:
-	      if (pWin->backgroundState == None)
-	      {
-		  pPrivWin->fastBackground = FALSE;
-	      }
-	      else if (pWin->backgroundState == ParentRelative)
-	      {
-		  pPrivWin->fastBackground = FALSE;
-		  /* Rotate border to match parent origin */
-		  if (pPrivWin->pRotatedBorder) {
-		      for (pBgWin = pWin->parent;
-			   pBgWin->backgroundState == ParentRelative;
-			   pBgWin = pBgWin->parent);
-		      mfbXRotatePixmap(pPrivWin->pRotatedBorder,
-				    pBgWin->drawable.x - pPrivWin->oldRotate.x);
-		      mfbYRotatePixmap(pPrivWin->pRotatedBorder,
-				    pBgWin->drawable.y - pPrivWin->oldRotate.y);
-		      pPrivWin->oldRotate.x = pBgWin->drawable.x;
-		      pPrivWin->oldRotate.y = pBgWin->drawable.y;
-		  }
-	      }
-	      else if ((pWin->background.pixmap->drawable.width <= PPW) &&
-		       !(pWin->background.pixmap->drawable.width &
-			 (pWin->background.pixmap->drawable.width - 1)))
-	      {
-		  mfbCopyRotatePixmap(pWin->background.pixmap,
-				      &pPrivWin->pRotatedBackground,
-				      pWin->drawable.x,
-				      pWin->drawable.y);
-		  if (pPrivWin->pRotatedBackground)
-		  {
-		      pPrivWin->fastBackground = TRUE;
-		      pPrivWin->oldRotate.x = pWin->drawable.x;
-		      pPrivWin->oldRotate.y = pWin->drawable.y;
-		  }
-		  else
-		  {
-		      pPrivWin->fastBackground = FALSE;
-		  }
-	      }
-	      else
-	      {
-		  pPrivWin->fastBackground = FALSE;
-	      }
-	      break;
-
-	  case CWBackPixel:
-	      pPrivWin->fastBackground = FALSE;
-	      break;
-
-	  case CWBorderPixmap:
-	      if ((pWin->border.pixmap->drawable.width <= PPW) &&
-		  !(pWin->border.pixmap->drawable.width &
-		    (pWin->border.pixmap->drawable.width - 1)))
-	      {
-		  for (pBgWin = pWin;
-		       pBgWin->backgroundState == ParentRelative;
-		       pBgWin = pBgWin->parent);
-		  mfbCopyRotatePixmap(pWin->border.pixmap,
-				      &pPrivWin->pRotatedBorder,
-				      pBgWin->drawable.x,
-				      pBgWin->drawable.y);
-		  if (pPrivWin->pRotatedBorder)
-		  {
-		      pPrivWin->fastBorder = TRUE;
-		      pPrivWin->oldRotate.x = pBgWin->drawable.x;
-		      pPrivWin->oldRotate.y = pBgWin->drawable.y;
-		  }
-		  else
-		  {
-		      pPrivWin->fastBorder = FALSE;
-		  }
-	      }
-	      else
-	      {
-		  pPrivWin->fastBorder = FALSE;
-	      }
-	      break;
-	    case CWBorderPixel:
-	      pPrivWin->fastBorder = FALSE;
-	      break;
-	}
-    }
-    /* Again, we have no failure modes indicated by any of the routines
-     * we've called, so we have to assume it worked */
-    return (TRUE);
-}
