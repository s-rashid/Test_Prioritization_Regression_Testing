diff --git a/test/list.c b/test/list.c
index 14bc74a..82d2327 100644
--- a/test/list.c
+++ b/test/list.c
@@ -76,15 +76,18 @@ test_xorg_list_add(void)
     assert(!xorg_list_is_empty(&parent.children));
 
     c = xorg_list_first_entry(&parent.children, struct child, node);
+
     assert(memcmp(c, &child[0], sizeof(struct child)) == 0);
 
     /* note: xorg_list_add prepends */
     xorg_list_add(&child[1].node, &parent.children);
     c = xorg_list_first_entry(&parent.children, struct child, node);
+
     assert(memcmp(c, &child[1], sizeof(struct child)) == 0);
 
     xorg_list_add(&child[2].node, &parent.children);
     c = xorg_list_first_entry(&parent.children, struct child, node);
+
     assert(memcmp(c, &child[2], sizeof(struct child)) == 0);
 };
 
@@ -102,20 +105,26 @@ test_xorg_list_append(void)
     assert(!xorg_list_is_empty(&parent.children));
 
     c = xorg_list_first_entry(&parent.children, struct child, node);
+
     assert(memcmp(c, &child[0], sizeof(struct child)) == 0);
     c = xorg_list_last_entry(&parent.children, struct child, node);
+
     assert(memcmp(c, &child[0], sizeof(struct child)) == 0);
 
     xorg_list_append(&child[1].node, &parent.children);
     c = xorg_list_first_entry(&parent.children, struct child, node);
+
     assert(memcmp(c, &child[0], sizeof(struct child)) == 0);
     c = xorg_list_last_entry(&parent.children, struct child, node);
+
     assert(memcmp(c, &child[1], sizeof(struct child)) == 0);
 
     xorg_list_append(&child[2].node, &parent.children);
     c = xorg_list_first_entry(&parent.children, struct child, node);
+
     assert(memcmp(c, &child[0], sizeof(struct child)) == 0);
     c = xorg_list_last_entry(&parent.children, struct child, node);
+
     assert(memcmp(c, &child[2], sizeof(struct child)) == 0);
 
     i = 0;
@@ -147,6 +156,7 @@ test_xorg_list_del(void)
     xorg_list_add(&child[1].node, &parent.children);
 
     c = xorg_list_first_entry(&parent.children, struct child, node);
+
     assert(memcmp(c, &child[1], sizeof(struct child)) == 0);
 
     /* delete first node */
@@ -154,12 +164,14 @@ test_xorg_list_del(void)
     assert(!xorg_list_is_empty(&parent.children));
     assert(xorg_list_is_empty(&child[1].node));
     c = xorg_list_first_entry(&parent.children, struct child, node);
+
     assert(memcmp(c, &child[0], sizeof(struct child)) == 0);
 
     /* delete last node */
     xorg_list_add(&child[1].node, &parent.children);
     xorg_list_del(&child[0].node);
     c = xorg_list_first_entry(&parent.children, struct child, node);
+
     assert(memcmp(c, &child[1], sizeof(struct child)) == 0);
 
     /* delete list head */
@@ -226,8 +238,7 @@ test_nt_list_append(void)
     struct foo *foo = calloc(10, sizeof(struct foo));
     struct foo *item;
 
-    for (item = foo, i = 1; i <= 10; i++, item++)
-    {
+    for (item = foo, i = 1; i <= 10; i++, item++) {
 	item->a = i;
 	item->b = i * 2;
 	nt_list_init(item, next);
@@ -237,8 +248,7 @@ test_nt_list_append(void)
     }
 
     /* Test using nt_list_next */
-    for (item = foo, i = 1; i <= 10; i++, item = nt_list_next(item, next))
-    {
+    for (item = foo, i = 1; i <= 10; i++, item = nt_list_next(item, next)) {
 	assert(item->a = i);
 	assert(item->b = i * 2);
     }
@@ -264,8 +274,7 @@ test_nt_list_insert(void)
     foo->b = 20;
     nt_list_init(foo, next);
 
-    for (item = &foo[1], i = 9; i > 0; i--, item++)
-    {
+    for (item = &foo[1], i = 9; i > 0; i--, item++) {
 	item->a = i;
 	item->b = i * 2;
 	nt_list_init(item, next);
@@ -273,8 +282,7 @@ test_nt_list_insert(void)
     }
 
     /* Test using nt_list_next */
-    for (item = foo, i = 10; i > 0; i--, item = nt_list_next(item, next))
-    {
+    for (item = foo, i = 10; i > 0; i--, item = nt_list_next(item, next)) {
 	assert(item->a = i);
 	assert(item->b = i * 2);
     }
@@ -300,10 +308,10 @@ test_nt_list_delete(void)
 
     nt_list_init(empty_list, next);
     nt_list_del(empty_list, empty_list, struct foo, next);
+
     assert(!empty_list);
 
-    for (item = foo, i = 1; i <= 10; i++, item++)
-    {
+    for (item = foo, i = 1; i <= 10; i++, item++) {
 	item->a = i;
 	item->b = i * 2;
 	nt_list_init(item, next);
@@ -320,6 +328,7 @@ test_nt_list_delete(void)
 
     /* delete last item */
     nt_list_del(&foo[9], foo, struct foo, next);
+
     i = 0;
     nt_list_for_each_entry(item, foo, next) {
 	assert(item->a != 10); /* element 10 is gone now */
@@ -329,6 +338,7 @@ test_nt_list_delete(void)
 
     /* delete second item */
     nt_list_del(foo->next, foo, struct foo, next);
+
     assert(foo->next->a == 3);
 
     i = 0;
@@ -342,6 +352,7 @@ test_nt_list_delete(void)
     item = foo;
     /* delete first item */
     nt_list_del(foo, foo, struct foo, next);
+
     assert(item != foo);
     assert(item->next == NULL);
     assert(foo->a == 3);
@@ -357,7 +368,8 @@ test_nt_list_delete(void)
     free(list);
 }
 
-int main(int argc, char** argv)
+int
+main(int argc, char **argv)
 {
     test_xorg_list_init();
     test_xorg_list_add();
