diff --git a/dix/window.c b/dix/window.c
index 84985e6..43b7ef4 100644
--- a/dix/window.c
+++ b/dix/window.c
@@ -1,4 +1,4 @@
-/* $XdotOrg: xc/programs/Xserver/dix/window.c,v 1.9 2005/06/10 04:01:14 ajax Exp $ */
+/* $XdotOrg: xserver/xorg/dix/window.c,v 1.13 2006/01/12 22:14:56 sandmann Exp $ */
 /* $Xorg: window.c,v 1.4 2001/02/09 02:04:41 xorgcvs Exp $ */
 /*
 
@@ -125,9 +125,9 @@ Equipment Corporation.
 static unsigned char _back_lsb[4] = {0x88, 0x22, 0x44, 0x11};
 static unsigned char _back_msb[4] = {0x11, 0x44, 0x22, 0x88};
 
-int screenIsSaved = SCREEN_SAVER_OFF;
+_X_EXPORT int screenIsSaved = SCREEN_SAVER_OFF;
 
-ScreenSaverStuffRec savedScreenInfo[MAXSCREENS];
+_X_EXPORT ScreenSaverStuffRec savedScreenInfo[MAXSCREENS];
 
 #if 0
 extern void DeleteWindowFromAnyEvents();
@@ -160,8 +160,8 @@ static Bool TileScreenSaver(int i, int kind);
 #define SubStrSend(pWin,pParent) (StrSend(pWin) || SubSend(pParent))
 
 
-int numSaveUndersViewable = 0;
-int deltaSaveUndersViewable = 0;
+_X_EXPORT int numSaveUndersViewable = 0;
+_X_EXPORT int deltaSaveUndersViewable = 0;
 
 #ifdef DEBUG
 /******
@@ -202,7 +202,7 @@ PrintWindowTree()
 }
 #endif
 
-int
+_X_EXPORT int
 TraverseTree(register WindowPtr pWin, VisitWindowProcPtr func, pointer data)
 {
     register int result;
@@ -237,7 +237,7 @@ TraverseTree(register WindowPtr pWin, VisitWindowProcPtr func, pointer data)
  *   exit WalkTree.  Does depth-first traverse.
  *****/
 
-int
+_X_EXPORT int
 WalkTree(ScreenPtr pScreen, VisitWindowProcPtr func, pointer data)
 {
     return(TraverseTree(WindowTable[pScreen->myNum], func, data));
@@ -551,7 +551,7 @@ RealChildHead(register WindowPtr pWin)
  *    Makes a window in response to client request 
  *****/
 
-WindowPtr
+_X_EXPORT WindowPtr
 CreateWindow(Window wid, register WindowPtr pParent, int x, int y, unsigned w,
              unsigned h, unsigned bw, unsigned class, register Mask vmask, XID *vlist,
              int depth, ClientPtr client, VisualID visual, int *error)
@@ -938,7 +938,7 @@ DestroySubwindows(register WindowPtr pWin, ClientPtr client)
  *  to most significant bit in the mask.  
  *****/
  
-int
+_X_EXPORT int
 ChangeWindowAttributes(register WindowPtr pWin, Mask vmask, XID *vlist, ClientPtr client)
 {
     register Mask index2;
@@ -1514,7 +1514,7 @@ GetWindowAttributes(register WindowPtr pWin, ClientPtr client, xGetWindowAttribu
 }
 
 
-WindowPtr
+_X_EXPORT WindowPtr
 MoveWindowInStack(register WindowPtr pWin, register WindowPtr pNextSib)
 {
     register WindowPtr pParent = pWin->parent;
@@ -1598,7 +1598,7 @@ MoveWindowInStack(register WindowPtr pWin, register WindowPtr pNextSib)
     return( pFirstChange );
 }
 
-RegionPtr
+_X_EXPORT RegionPtr
 CreateUnclippedWinSize (register WindowPtr pWin)
 {
     RegionPtr	pRgn;
@@ -1625,7 +1625,7 @@ CreateUnclippedWinSize (register WindowPtr pWin)
     return pRgn;
 }
 
-void
+_X_EXPORT void
 SetWinSize (register WindowPtr pWin)
 {
 #ifdef COMPOSITE
@@ -1663,7 +1663,7 @@ SetWinSize (register WindowPtr pWin)
 #endif
 }
 
-void
+_X_EXPORT void
 SetBorderSize (register WindowPtr pWin)
 {
     int	bw;
@@ -1714,7 +1714,7 @@ SetBorderSize (register WindowPtr pWin)
  *  \param destx,desty  position relative to gravity
  */
 
-void
+_X_EXPORT void
 GravityTranslate (register int x, register int y, int oldx, int oldy,
                   int dw, int dh, unsigned gravity,
                   register int *destx, register int *desty)
@@ -1764,7 +1764,7 @@ GravityTranslate (register int x, register int y, int oldx, int oldy,
 }
 
 /* XXX need to retile border on each window with ParentRelative origin */
-void
+_X_EXPORT void
 ResizeChildrenWinSize(register WindowPtr pWin, int dx, int dy, int dw, int dh)
 {
     register ScreenPtr pScreen;
@@ -2666,7 +2666,7 @@ RealizeTree(WindowPtr pWin)
  *    MapNotify event is generated.
  *****/
 
-int
+_X_EXPORT int
 MapWindow(register WindowPtr pWin, ClientPtr client)
 {
     register ScreenPtr pScreen;
@@ -2971,7 +2971,7 @@ UnrealizeTree(
  *    generated.  Cannot unmap a root window.
  *****/
 
-int
+_X_EXPORT int
 UnmapWindow(register WindowPtr pWin, Bool fromConfigure)
 {
     register WindowPtr pParent;
@@ -3200,7 +3200,7 @@ PointInWindowIsVisible(register WindowPtr pWin, int x, int y)
 }
 
 
-RegionPtr
+_X_EXPORT RegionPtr
 NotClippedByChildren(register WindowPtr pWin)
 {
     register ScreenPtr pScreen;
@@ -3217,7 +3217,7 @@ NotClippedByChildren(register WindowPtr pWin)
     return(pReg);
 }
 
-void
+_X_EXPORT void
 SendVisibilityNotify(WindowPtr pWin)
 {
     xEvent event;
@@ -3317,7 +3317,7 @@ static void DrawLogo(
 );
 #endif
 
-void
+_X_EXPORT void
 SaveScreens(int on, int mode)
 {
     int i;
@@ -3548,7 +3548,7 @@ TileScreenSaver(int i, int kind)
  * contain the structure.
  */
 
-WindowPtr
+_X_EXPORT WindowPtr
 FindWindowWithOptional (register WindowPtr w)
 {
     do
@@ -3565,7 +3565,7 @@ FindWindowWithOptional (register WindowPtr w)
  * release the optional record
  */
 
-void
+_X_EXPORT void
 CheckWindowOptionalNeed (register WindowPtr w)
 {
     register WindowOptPtr optional;
@@ -3619,7 +3619,7 @@ CheckWindowOptionalNeed (register WindowPtr w)
  * values.
  */
 
-Bool
+_X_EXPORT Bool
 MakeWindowOptional (register WindowPtr pWin)
 {
     register WindowOptPtr optional;
