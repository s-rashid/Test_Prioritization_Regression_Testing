diff --git a/hw/xfree86/os-support/bus/Sbus.c b/hw/xfree86/os-support/bus/Sbus.c
index c02d2cd..b75308a 100644
--- a/hw/xfree86/os-support/bus/Sbus.c
+++ b/hw/xfree86/os-support/bus/Sbus.c
@@ -47,6 +47,7 @@ static int promFd = -1;
 static int promCurrentNode;
 static int promOpenCount = 0;
 static int promP1275 = -1;
+
 #define MAX_PROP	128
 #define MAX_VAL		(4096-128-4)
 static struct openpromio *promOpio;
@@ -54,9 +55,11 @@ static struct openpromio *promOpio;
 sbusDevicePtr *xf86SbusInfo = NULL;
 
 struct sbus_devtable sbusDeviceTable[] = {
-    { SBUS_DEVICE_BW2, FBTYPE_SUN2BW, "bwtwo", "sunbw2", "Sun Monochrome (bwtwo)" },
+    {SBUS_DEVICE_BW2, FBTYPE_SUN2BW, "bwtwo", "sunbw2",
+     "Sun Monochrome (bwtwo)"},
     { SBUS_DEVICE_CG2, FBTYPE_SUN2COLOR, "cgtwo", NULL, "Sun Color2 (cgtwo)" },
-    { SBUS_DEVICE_CG3, FBTYPE_SUN3COLOR, "cgthree", "suncg3", "Sun Color3 (cgthree)" },
+    {SBUS_DEVICE_CG3, FBTYPE_SUN3COLOR, "cgthree", "suncg3",
+     "Sun Color3 (cgthree)"},
     { SBUS_DEVICE_CG4, FBTYPE_SUN4COLOR, "cgfour", NULL, "Sun Color4 (cgfour)" },
     { SBUS_DEVICE_CG6, FBTYPE_SUNFAST_COLOR, "cgsix", "suncg6", "Sun GX" },
     { SBUS_DEVICE_CG8, FBTYPE_MEMCOLOR, "cgeight", NULL, "Sun CG8/RasterOps" },
@@ -76,7 +79,8 @@ promGetSibling(int node)
 {
     promOpio->oprom_size = sizeof(int);
 
-    if (node == -1) return 0;
+    if (node == -1)
+        return 0;
     *(int *)promOpio->oprom_array = node;
     if (ioctl(promFd, OPROMNEXT, promOpio) < 0)
 	return 0;
@@ -89,7 +93,8 @@ promGetChild(int node)
 {
     promOpio->oprom_size = sizeof(int);
 
-    if (!node || node == -1) return 0;
+    if (!node || node == -1)
+        return 0;
     *(int *)promOpio->oprom_array = node;
     if (ioctl(promFd, OPROMCHILD, promOpio) < 0)
 	return 0;
@@ -105,7 +110,8 @@ promGetProperty(const char *prop, int *lenp)
     strcpy(promOpio->oprom_array, prop);
     if (ioctl(promFd, OPROMGETPROP, promOpio) < 0)
 	return 0;
-    if (lenp) *lenp = promOpio->oprom_size;
+    if (lenp)
+        *lenp = promOpio->oprom_size;
     return promOpio->oprom_array;
 }
 
@@ -159,7 +165,8 @@ promIsP1275(void)
 	return;
     promP1275 = 0;
     f = fopen("/proc/cpuinfo","r");
-    if (!f) return;
+    if (!f)
+        return;
     while (fgets(buffer, 1024, f) != NULL)
 	if (!strncmp (buffer, "type", 4) && strstr (buffer, "sun4u")) {
 	    promP1275 = 1;
@@ -247,7 +254,8 @@ promWalkGetDriverName(int node, int oldnode)
     int devId, i;
 
     prop = promGetProperty("device_type", &len);
-    if (prop && (len > 0)) do {
+    if (prop && (len > 0))
+        do {
 	if (!strcmp(prop, "display")) {
 	    prop = promGetProperty("name", &len);
 	    if (!prop || len <= 0)
@@ -268,6 +276,7 @@ promWalkGetDriverName(int node, int oldnode)
     nextnode = promGetChild(node);
     if (nextnode) {
 	char *name;
+
 	name = promWalkGetDriverName(nextnode, node);
 	if (name)
 	    return name;
@@ -293,7 +302,8 @@ sparcDriverName(void)
 }
 
 static void
-promWalkAssignNodes(int node, int oldnode, int flags, sbusDevicePtr *devicePtrs)
+promWalkAssignNodes(int node, int oldnode, int flags,
+                    sbusDevicePtr * devicePtrs)
 {
     int nextnode;
     int len, sbus = flags & PROM_NODE_SBUS;
@@ -302,7 +312,8 @@ promWalkAssignNodes(int node, int oldnode, int flags, sbusDevicePtr *devicePtrs)
     sbusPromNode pNode, pNode2;
 
     prop = promGetProperty("device_type", &len);
-    if (prop && (len > 0)) do {
+    if (prop && (len > 0))
+        do {
 	if (!strcmp(prop, "display")) {
 	    prop = promGetProperty("name", &len);
 	    if (!prop || len <= 0)
@@ -323,17 +334,20 @@ promWalkAssignNodes(int node, int oldnode, int flags, sbusDevicePtr *devicePtrs)
 		     */
 		    if (!strcmp(prop, "afb"))
 			flags |= PROM_NODE_PREF;
-		} else if (devId != SBUS_DEVICE_CG14)
+                    }
+                    else if (devId != SBUS_DEVICE_CG14)
 		    break;
 	    }
 	    for (i = 0; i < 32; i++) {
 		if (!devicePtrs[i] || devicePtrs[i]->devId != devId)
 		    continue;
 		if (devicePtrs[i]->node.node) {
-		    if ((devicePtrs[i]->node.cookie[0] & ~PROM_NODE_SIBLING) <=
+                        if ((devicePtrs[i]->node.
+                             cookie[0] & ~PROM_NODE_SIBLING) <=
 			(flags & ~PROM_NODE_SIBLING))
 			continue;
-		    for (j = i + 1, pNode = devicePtrs[i]->node; j < 32; j++) {
+                        for (j = i + 1, pNode = devicePtrs[i]->node; j < 32;
+                             j++) {
 			if (!devicePtrs[j] || devicePtrs[j]->devId != devId)
 			    continue;
 			pNode2 = devicePtrs[j]->node;
@@ -362,7 +376,8 @@ promWalkAssignNodes(int node, int oldnode, int flags, sbusDevicePtr *devicePtrs)
 
     nextnode = promGetSibling(node);
     if (nextnode)
-	promWalkAssignNodes(nextnode, node, PROM_NODE_SIBLING | sbus, devicePtrs);
+        promWalkAssignNodes(nextnode, node, PROM_NODE_SIBLING | sbus,
+                            devicePtrs);
 }
 
 void
@@ -388,16 +403,16 @@ sparcPromAssignNodes(void)
 	    int devId;
 	    char *prefix;
 	} procFbPrefixes[] = {
-	    { SBUS_DEVICE_BW2, "BWtwo" },
-	    { SBUS_DEVICE_CG14, "CGfourteen" },
-	    { SBUS_DEVICE_CG6, "CGsix" },
-	    { SBUS_DEVICE_CG3, "CGthree" },
-	    { SBUS_DEVICE_FFB, "Creator" },
-	    { SBUS_DEVICE_FFB, "Elite 3D" },
-	    { SBUS_DEVICE_LEO, "Leo" },
-	    { SBUS_DEVICE_TCX, "TCX" },
-	    { 0, NULL },
-	};
+            {
+            SBUS_DEVICE_BW2, "BWtwo"}, {
+            SBUS_DEVICE_CG14, "CGfourteen"}, {
+            SBUS_DEVICE_CG6, "CGsix"}, {
+            SBUS_DEVICE_CG3, "CGthree"}, {
+            SBUS_DEVICE_FFB, "Creator"}, {
+            SBUS_DEVICE_FFB, "Elite 3D"}, {
+            SBUS_DEVICE_LEO, "Leo"}, {
+            SBUS_DEVICE_TCX, "TCX"}, {
+        0, NULL},};
 
 	while (fscanf(f, "%d %63s\n", &fbNum, buffer) == 2) {
 	    for (i = 0; procFbPrefixes[i].devId; i++)
@@ -405,11 +420,13 @@ sparcPromAssignNodes(void)
 		      strlen(procFbPrefixes[i].prefix)))
 		    break;
 	    devId = procFbPrefixes[i].devId;
-	    if (! devId) continue;
+            if (!devId)
+                continue;
 	    if (devicePtrs[fbNum]) {
 		if (devicePtrs[fbNum]->devId != devId)
 		    xf86ErrorF("Inconsistent /proc/fb with FBIOGATTR\n");
-	    } else if (!devicePtrs[fbNum]) {
+            }
+            else if (!devicePtrs[fbNum]) {
 		devicePtrs[fbNum] = psdp = xnfcalloc(sizeof (sbusDevice), 1);
 		psdp->devId = devId;
 		psdp->fbNum = fbNum;
@@ -429,7 +446,8 @@ sparcPromAssignNodes(void)
 	    if (devicePtrs[i]->fbNum == -1) {
 		memmove(psdpp + 1, psdpp, sizeof(psdpp) * (n + 1));
 		*psdpp = devicePtrs[i];
-	    } else
+            }
+            else
 		n--;
 	}
 }
@@ -445,14 +463,17 @@ promGetReg(int type)
     prop = promGetProperty("reg", &len);
     if (prop && len >= 4) {
 	unsigned int *reg = (unsigned int *)prop;
+
 	if (!promP1275 || (type == PROM_NODE_SBUS) || (type == PROM_NODE_EBUS))
 	    snprintf (regstr, sizeof(regstr), "@%x,%x", reg[0], reg[1]);
 	else if (type == PROM_NODE_PCI) {
 	    if ((reg[0] >> 8) & 7)
-		snprintf (regstr, sizeof(regstr), "@%x,%x", (reg[0] >> 11) & 0x1f, (reg[0] >> 8) & 7);
+                snprintf(regstr, sizeof(regstr), "@%x,%x",
+                         (reg[0] >> 11) & 0x1f, (reg[0] >> 8) & 7);
 	    else
 		snprintf (regstr, sizeof(regstr), "@%x", (reg[0] >> 11) & 0x1f);
-	} else if (len == 4)
+        }
+        else if (len == 4)
 	    snprintf (regstr, sizeof(regstr), "@%x", reg[0]);
 	else {
 	    unsigned int regs[2];
@@ -466,15 +487,18 @@ promGetReg(int type)
 	    if (prop && len == 4) {
 		reg = (unsigned int *)prop;
 		snprintf (regstr, sizeof(regstr), "@%x,%x", reg[0], regs[1]);
-	    } else
-		snprintf (regstr, sizeof(regstr), "@%x,%x", regs[0] >> 4, regs[1]);
+            }
+            else
+                snprintf(regstr, sizeof(regstr), "@%x,%x", regs[0] >> 4,
+                         regs[1]);
 	}
     }
     return regstr;
 }
 
 static int
-promWalkNode2Pathname(char *path, int parent, int node, int searchNode, int type)
+promWalkNode2Pathname(char *path, int parent, int node, int searchNode,
+                      int type)
 {
     int nextnode;
     int len, ntype = type;
@@ -498,7 +522,8 @@ promWalkNode2Pathname(char *path, int parent, int node, int searchNode, int type
 	return 1;
     nextnode = promGetChild(node);
     if (nextnode &&
-	promWalkNode2Pathname(strchr(path, 0), node, nextnode, searchNode, ntype))
+        promWalkNode2Pathname(strchr(path, 0), node, nextnode, searchNode,
+                              ntype))
 	return 1;
     nextnode = promGetSibling(node);
     if (nextnode &&
@@ -512,10 +537,13 @@ sparcPromNode2Pathname(sbusPromNodePtr pnode)
 {
     char *ret;
 
-    if (!pnode->node) return NULL;
+    if (!pnode->node)
+        return NULL;
     ret = malloc(4096);
-    if (!ret) return NULL;
-    if (promWalkNode2Pathname(ret, promRootNode, promGetChild(promRootNode), pnode->node, 0))
+    if (!ret)
+        return NULL;
+    if (promWalkNode2Pathname
+        (ret, promRootNode, promGetChild(promRootNode), pnode->node, 0))
 	return ret;
     free(ret);
     return NULL;
@@ -553,7 +581,8 @@ promWalkPathname2Node(char *name, char *regstr, int parent, int type)
 	if (!node) {
 	    for (node = promGetChild(parent); node; node = promGetSibling(node)) {
 		ret = promWalkPathname2Node(name, regstr, node, type);
-		if (ret) return ret;
+                if (ret)
+                    return ret;
 	    }
 	    return 0;
 	}
@@ -584,7 +613,8 @@ sparcPromPathname2Node(const char *pathName)
 
     i = strlen(pathName);
     name = malloc(i + 2);
-    if (! name) return 0;
+    if (!name)
+        return 0;
     strcpy (name, pathName);
     name [i + 1] = 0;
     if (name[0] != '/')
@@ -619,7 +649,8 @@ xf86MapSbusMem(sbusDevicePtr psdp, unsigned long offset, unsigned long size)
 	psdp->fd = open(psdp->device, O_RDWR);
 	if (psdp->fd == -1)
 	    return NULL;
-    } else if (psdp->fd < 0)
+    }
+    else if (psdp->fd < 0)
 	return NULL;
 
     ret = (pointer) mmap (NULL, len, PROT_READ | PROT_WRITE, MAP_PRIVATE,
