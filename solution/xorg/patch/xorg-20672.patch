diff --git a/hw/xfree86/common/xf86pciBus.c b/hw/xfree86/common/xf86pciBus.c
index af19b37..4d587a1 100644
--- a/hw/xfree86/common/xf86pciBus.c
+++ b/hw/xfree86/common/xf86pciBus.c
@@ -1498,39 +1498,11 @@ xf86ReallocatePciResources(int entityIndex, resPtr pRes)
 /*
  * BIOS releated
  */
-memType
-getValidBIOSBase(PCITAG tag, int num)
+static resPtr
+getOwnResources(pciVideoPtr pvp, resPtr mem)
 {
-    pciVideoPtr pvp = NULL;
-    PciBusPtr pbp;
-    resPtr m = NULL;
-    resPtr tmp, avoid, mem = NULL;
     resRange range;
-    memType ret;
-    int n = 0;
     int i;
-    CARD32 biosSize, alignment;
-
-    if (!xf86PciVideoInfo) return 0;
-    
-    while ((pvp = xf86PciVideoInfo[n++])) {
-	if (pciTag(pvp->bus,pvp->device,pvp->func) == tag)
-	    break;
-    }
-    if (!pvp) return 0;
-
-    biosSize = pvp->biosSize;
-    alignment = (1 << biosSize) - 1;
-    if (biosSize > 24)
-	biosSize = 24;
-
-    switch ((romBaseSource)num) {
-    case ROM_BASE_PRESET:
-	return 0; /* This should not happen */
-    case ROM_BASE_BIOS:
-	/* In some cases the BIOS base register contains the size mask */
-	if ((memType)(-1 << biosSize) == PCIGETROM(pvp->biosBase))
-	    return 0;
 	/* Make sure we don't conflict with our own mem resources */
 	for (i = 0; i < 6; i++) {
 	    if (!pvp->memBase[i])
@@ -1539,30 +1511,17 @@ getValidBIOSBase(PCITAG tag, int num)
 		      ResExcMemBlock);
 	    mem = xf86AddResToList(mem,&range,-1);
 	}
-	P_M_RANGE(range, TAG(pvp),pvp->biosBase,biosSize,ResExcMemBlock);
-	ret = pvp->biosBase;
-	break;
-    case ROM_BASE_MEM0:
-    case ROM_BASE_MEM1:
-    case ROM_BASE_MEM2:
-    case ROM_BASE_MEM3:
-    case ROM_BASE_MEM4:
-    case ROM_BASE_MEM5:
-	if (!pvp->memBase[num] || (pvp->size[num] < biosSize))
-	    return 0;
-	P_M_RANGE(range, TAG(pvp),pvp->memBase[num],biosSize,
-		  ResExcMemBlock);
-	ret = pvp->memBase[num];
-	break;
-    case ROM_BASE_FIND:
-	ret = 0;
-	break;
-    default:
-	return 0; /* This should not happen */
+    return mem;
     }
 
-    /* Now find the ranges for validation */
-    avoid = xf86DupResList(pciAvoidRes);
+static void
+getPciRangesForMapping(pciVideoPtr pvp,  resPtr *map, resPtr *avoid)
+{
+    PciBusPtr pbp;
+    resPtr tmp;
+    
+    *avoid = xf86DupResList(pciAvoidRes);
+
     pbp = xf86PciBus;
     while (pbp) {
 	if (pbp->secondary == pvp->bus) {
@@ -1570,13 +1529,13 @@ getValidBIOSBase(PCITAG tag, int num)
 		tmp = xf86DupResList(pbp->preferred_pmem);
 	    else
 		tmp = xf86DupResList(pbp->pmem);
-	    m = xf86JoinResLists(m,tmp);
+	    *map = xf86JoinResLists(*map,tmp);
 	    if (pbp->preferred_mem)
 		tmp = xf86DupResList(pbp->preferred_mem);
 	    else
 		tmp = xf86DupResList(pbp->mem);
-	    m = xf86JoinResLists(m,tmp);
-	    tmp = m;
+	    *map = xf86JoinResLists(*map,tmp);
+	    tmp = *map;
 	    while (tmp) {
 		tmp->block_end = min(tmp->block_end,PCI_MEM32_LENGTH_MAX);
 		tmp = tmp->next;
@@ -1585,36 +1544,114 @@ getValidBIOSBase(PCITAG tag, int num)
 		   (pbp->secondary >= 0) &&
 		   (pbp->primary != pbp->secondary)) {
 	    tmp = xf86DupResList(pbp->preferred_pmem);
-	    avoid = xf86JoinResLists(avoid, tmp);
+	    *avoid = xf86JoinResLists(*avoid, tmp);
 	    tmp = xf86DupResList(pbp->pmem);
-	    avoid = xf86JoinResLists(avoid, tmp);
+	    *avoid = xf86JoinResLists(*avoid, tmp);
 	    tmp = xf86DupResList(pbp->preferred_mem);
-	    avoid = xf86JoinResLists(avoid, tmp);
+	    *avoid = xf86JoinResLists(*avoid, tmp);
 	    tmp = xf86DupResList(pbp->mem);
-	    avoid = xf86JoinResLists(avoid, tmp);
+	    *avoid = xf86JoinResLists(*avoid, tmp);
 	}
 	pbp = pbp->next;
     }	
-    pciConvertListToHost(pvp->bus,pvp->device,pvp->func, avoid);
-    if (mem)
-	pciConvertListToHost(pvp->bus,pvp->device,pvp->func, mem);
+    pciConvertListToHost(pvp->bus,pvp->device,pvp->func, *avoid);
+    pciConvertListToHost(pvp->bus,pvp->device,pvp->func, *map);
+}
+
+static memType
+findPciRange(PCITAG tag, resPtr m, resPtr avoid, CARD32 size)
+{
+    resRange range;
+    CARD32 alignment = (1 << size) - 1;
 
-    if (!ret) {
-	/* Return a possible window */
 	while (m) {
 	    range = xf86GetBlock(RANGE_TYPE(ResExcMemBlock, xf86GetPciDomain(tag)),
-				 PCI_SIZE(ResMem, TAG(pvp), 1 << biosSize),
+			     PCI_SIZE(ResMem, tag, 1 << size),
 				 m->block_begin, m->block_end,
-				 PCI_SIZE(ResMem, TAG(pvp), alignment), 
+			     PCI_SIZE(ResMem, tag, alignment), 
 				 avoid);
 	    if (range.type != ResEnd) {
-		ret =  M2B(TAG(pvp), range.rBase);
-		break;
+	    return  M2B(tag, range.rBase);
 	    }
 	    m = m->next;
 	}
+    return 0;
+}
+
+pciVideoPtr
+getPciVideoPtr(tag)
+{
+    int n = 0;
+
+    pciVideoPtr pvp = NULL;
+    if (!xf86PciVideoInfo) return 0;
+    
+    while ((pvp = xf86PciVideoInfo[n++])) {
+	if (pciTag(pvp->bus,pvp->device,pvp->func) == tag)
+	    return pvp;
+    }
+    return NULL;
+}
+
+memType
+getValidBIOSBase(PCITAG tag, int num)
+{
+    pciVideoPtr pvp = NULL;
+    memType ret;
+    CARD32 biosSize;
+    resPtr mem = NULL;
+    resPtr avoid = NULL, m = NULL;
+    resRange range;
+    
+    pvp = getPciVideoPtr(tag);
+    
+    if (!pvp) return 0;
+
+    biosSize = pvp->biosSize;
+
+    if (biosSize > 24)
+	biosSize = 24;
+
+    switch ((romBaseSource)num) {
+    case ROM_BASE_PRESET:
+	return 0; /* This should not happen */
+    case ROM_BASE_BIOS:
+	/* In some cases the BIOS base register contains the size mask */
+	if ((memType)(-1 << biosSize) == PCIGETROM(pvp->biosBase))
+	    return 0;
+	mem = getOwnResources(pvp,mem);
+	P_M_RANGE(range, tag, pvp->biosBase,biosSize,ResExcMemBlock);
+	ret = pvp->biosBase;
+	break;
+    case ROM_BASE_MEM0:
+    case ROM_BASE_MEM1:
+    case ROM_BASE_MEM2:
+    case ROM_BASE_MEM3:
+    case ROM_BASE_MEM4:
+    case ROM_BASE_MEM5:
+	if (!pvp->memBase[num] || (pvp->size[num] < biosSize))
+	    return 0;
+	P_M_RANGE(range, tag ,pvp->memBase[num],biosSize,
+		  ResExcMemBlock);
+	ret = pvp->memBase[num];
+	break;
+    case ROM_BASE_FIND:
+	ret = 0;
+	break;
+    default:
+	return 0; /* This should not happen */
+    }
+
+    /* Now find the ranges for validation */
+    getPciRangesForMapping(pvp,&m,&avoid);
+    
+    if (!ret) {
+	/* Return a possible window */
+	ret = findPciRange(tag,m,avoid,biosSize);
     } else {
 #if !defined(__ia64__) /* on ia64, trust the kernel, don't look for overlaps */
+	if (mem)
+	    pciConvertListToHost(pvp->bus,pvp->device,pvp->func, mem);
 	if (!xf86IsSubsetOf(range, m) || 
 	    ChkConflict(&range, avoid, SETUP) 
 	    || (mem && ChkConflict(&range, mem, SETUP))) 
@@ -1627,6 +1664,22 @@ getValidBIOSBase(PCITAG tag, int num)
     return ret;
 }
 
+memType
+getEmptyPciRange(PCITAG tag, int base_reg)
+{
+    resPtr avoid = NULL, m = NULL;
+    memType ret;
+
+    pciVideoPtr pvp = getPciVideoPtr(tag);
+    if (!pvp) return 0;
+    getPciRangesForMapping(pvp,&m,&avoid);
+    ret = findPciRange(tag,m,avoid,pvp->size[base_reg]);
+    xf86FreeResList(avoid);
+    xf86FreeResList(m);
+
+    return ret;
+}
+
 /*
  * xf86Bus.c interface
  */
