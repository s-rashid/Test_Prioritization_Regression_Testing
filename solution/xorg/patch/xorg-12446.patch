diff --git a/hw/xgl/xgltile.c b/hw/xgl/xgltile.c
index 60840ae..d2a440f 100644
--- a/hw/xgl/xgltile.c
+++ b/hw/xgl/xgltile.c
@@ -5,7 +5,7 @@
  * and its documentation for any purpose is hereby granted without
  * fee, provided that the above copyright notice appear in all copies
  * and that both that copyright notice and this permission notice
- * appear in supporting documentation, and that the names of
+ * appear in supporting documentation, and that the name of
  * David Reveman not be used in advertising or publicity pertaining to
  * distribution of the software without specific, written prior permission.
  * David Reveman makes no representations about the suitability of this
@@ -20,181 +20,249 @@
  * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
  * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  *
- * Author: David Reveman <davidr@freedesktop.org>
+ * Author: David Reveman <davidr@novell.com>
  */
 
 #include "xgl.h"
 
+static glitz_geometry_format_t tileGeometryFormat = {
+    {
+	GLITZ_PRIMITIVE_QUADS,
+	GLITZ_DATA_TYPE_FLOAT,
+	sizeof (glitz_float_t) * 4,
+	GLITZ_VERTEX_ATTRIBUTE_SRC_COORD_MASK, {
+	    GLITZ_DATA_TYPE_FLOAT,
+	    GLITZ_COORDINATE_SIZE_XY,
+	    sizeof (glitz_float_t) * 2,
+	}, {
+	    0, 0, 0
+	}
+    }
+};
 
-Bool
-xglTile (DrawablePtr	  pDrawable,
-	 glitz_operator_t op,
-	 PixmapPtr	  pTile,
+xglGeometryPtr
+xglTiledBoxGeometry (PixmapPtr pTile,
 	 int		  tileX,
 	 int		  tileY,
-	 xglGeometryPtr	  pGeometry,
 	 BoxPtr		  pBox,
 	 int		  nBox)
 {
-    xglPixmapPtr    pTilePriv;
-    glitz_surface_t *surface;
-    int		    xOff, yOff;
+    ScreenPtr		pScreen = pTile->drawable.pScreen;
+    glitz_point_fixed_t p1, p2;
+    xglGeometryPtr	pGeometry;
+    glitz_float_t	x1, x2, y1, y2;
+    int			x, y, width, height, i;
+    int			xTile, yTile;
+    int			widthTile, heightTile;
+    int			widthTmp, xTmp, yTmp, xTileTmp;
+    int			tileWidth, tileHeight;
+    int			size = 0;
+    glitz_float_t	*data;
 
-    if (!xglSyncSurface (&pTile->drawable))
-	return FALSE;
+    XGL_PIXMAP_PRIV (pTile);
 
-    if (!xglPrepareTarget (pDrawable))
-	return FALSE;
+    tileWidth  = pTile->drawable.width;
+    tileHeight = pTile->drawable.height;
     
-    XGL_GET_DRAWABLE (pDrawable, surface, xOff, yOff);
+    for (i = 0; i < nBox; i++)
+	size +=
+	    (((pBox[i].x2 - pBox[i].x1) / tileWidth) + 2) *
+	    (((pBox[i].y2 - pBox[i].y1) / tileHeight) + 2);
 
-    GEOMETRY_TRANSLATE (pGeometry, xOff, yOff);
+    pGeometry = xglGetScratchVertexGeometryWithType (pScreen,
+						     GEOMETRY_DATA_TYPE_FLOAT,
+						     8 * size);
     
-    if (!GEOMETRY_ENABLE_ALL_VERTICES (pGeometry, surface))
-	return FALSE;
+    data = glitz_buffer_map (pGeometry->buffer,
+			     GLITZ_BUFFER_ACCESS_WRITE_ONLY);
 
-    pTilePriv = XGL_GET_PIXMAP_PRIV (pTile);
+    while (nBox--)
+    {
+	x = pBox->x1;
+	y = pBox->y1;
+	width = pBox->x2 - pBox->x1;
+	height = pBox->y2 - pBox->y1;
 
-    pTilePriv->pictureMask |=
-	xglPCFillMask | xglPCFilterMask | xglPCTransformMask;
+	xTile = MOD (tileX + x, tileWidth);
+	yTile = MOD (tileY + y, tileHeight);
 	
-    glitz_surface_set_filter (pTilePriv->surface, GLITZ_FILTER_NEAREST,
-			      NULL, 0);
-    glitz_surface_set_transform (pTilePriv->surface, NULL);
+	yTmp = y;
     
-    if (pTilePriv->acceleratedTile)
+	while (height)
     {
-	glitz_surface_set_fill (pTilePriv->surface, GLITZ_FILL_REPEAT);
+	    heightTile = MIN (tileHeight - yTile, height);
 	
-	while (nBox--)
+	    xTileTmp = xTile;
+	    widthTmp = width;
+	    xTmp     = x;
+	    
+	    while (widthTmp)
 	{
-	    glitz_composite (op,
-			     pTilePriv->surface, NULL, surface,
-			     pBox->x1 + tileX,
-			     pBox->y1 + tileY,
-			     0, 0,
-			     pBox->x1 + xOff,
-			     pBox->y1 + yOff,
-			     pBox->x2 - pBox->x1, pBox->y2 - pBox->y1);
+		widthTile = MIN (tileWidth - xTileTmp, widthTmp);
 	    
-	    pBox++;
+		p1.x = xTileTmp << 16;
+		p1.y = yTile << 16;
+		p2.x = (xTileTmp + widthTile) << 16;
+		p2.y = (yTile + heightTile) << 16;
+
+		glitz_surface_translate_point (pPixmapPriv->surface, &p1, &p1);
+		glitz_surface_translate_point (pPixmapPriv->surface, &p2, &p2);
+		
+		x1 = FIXED_TO_FLOAT (p1.x);
+		y1 = FIXED_TO_FLOAT (p1.y);
+		x2 = FIXED_TO_FLOAT (p2.x);
+		y2 = FIXED_TO_FLOAT (p2.y);
+
+		*data++ = (glitz_float_t) xTmp;
+		*data++ = (glitz_float_t) yTmp;
+		*data++ = x1;
+		*data++ = y1;
+
+		*data++ = (glitz_float_t) (xTmp + widthTile);
+		*data++ = (glitz_float_t) yTmp;
+		*data++ = x2;
+		*data++ = y1;
+		
+		*data++ = (glitz_float_t) (xTmp + widthTile);
+		*data++ = (glitz_float_t) (yTmp + heightTile);
+		*data++ = x2;
+		*data++ = y2;
+		    
+		*data++ = (glitz_float_t) xTmp;
+		*data++ = (glitz_float_t) (yTmp + heightTile);
+		*data++ = x1;
+		*data++ = y2;
+
+		pGeometry->endOffset += sizeof (glitz_float_t) * 16;
+		
+		xTileTmp  = 0;
+		xTmp     += widthTile;
+		widthTmp -= widthTile;
 	}
 	
-	if (!glitz_surface_get_status (surface))
-	    return TRUE;
+	    yTile   = 0;
+	    yTmp   += heightTile;
+	    height -= heightTile;
     }
     
-    glitz_surface_set_fill (pTilePriv->surface, GLITZ_FILL_TRANSPARENT);
+	pBox++;
+    }
 
-    /*
-     * Don't allow software tile with really small pixmaps.
-     */
-    if (pTile->drawable.width < 8 && pTile->drawable.height < 8)
-	return FALSE;
+    if (glitz_buffer_unmap (pGeometry->buffer))
+	return NULL;
 
-    xglSwTile (op,
-	       pTilePriv->surface, NULL, surface,
-	       tileX - xOff, tileY - yOff,
-	       0, 0,
-	       TILE_SOURCE,
-	       pBox, nBox,
-	       xOff, yOff);
+    pGeometry->f     = tileGeometryFormat;
+    pGeometry->count =
+	pGeometry->endOffset / tileGeometryFormat.vertex.bytes_per_vertex;
 
-    if (glitz_surface_get_status (surface))
-	return FALSE;
+    pPixmapPriv->pictureMask |= xglPCFillMask;
+    glitz_surface_set_fill (pPixmapPriv->surface, GLITZ_FILL_TRANSPARENT);
 
-    return TRUE;
+    return pGeometry;
 }
 
-void
-xglSwTile (glitz_operator_t op,
-	   glitz_surface_t  *srcSurface,
-	   glitz_surface_t  *maskSurface,
-	   glitz_surface_t  *dstSurface,
-	   int		    xSrc,
-	   int		    ySrc,
-	   int		    xMask,
-	   int		    yMask,
-	   int		    what,
+Bool
+xglTile (DrawablePtr	  pDrawable,
+	 glitz_operator_t op,
+	 PixmapPtr	  pTile,
+	 int		  tileX,
+	 int		  tileY,
+	 xglGeometryPtr	  pGeometry,
+	 int		  x,
+	 int		  y,
+	 int		  width,
+	 int		  height,
 	   BoxPtr	    pBox,
-	   int		    nBox,
-	   int		    xOff,
-	   int		    yOff)
+	 int		  nBox)
 {
-    int tileX, tileY;
-    int tileWidth, tileHeight;
+    xglPixmapPtr    pTilePriv;
+    glitz_surface_t *surface;
+    int		    xOff, yOff;
 
-    if (what == TILE_MASK) {
-	tileX      = xMask;
-	tileY      = yMask;
-	tileWidth  = glitz_surface_get_width (maskSurface);
-	tileHeight = glitz_surface_get_height (maskSurface);
-    } else {
-	tileX      = xSrc;
-	tileY      = ySrc;
-	tileWidth  = glitz_surface_get_width (srcSurface);
-	tileHeight = glitz_surface_get_height (srcSurface);
-    }
+    if (nBox < 1)
+	return TRUE;
 
-    while (nBox--)
-    {
-	int x, y, width, height;
-	int xTile, yTile;
-	int widthTile, heightTile;
-	int widthTmp, xTmp, yTmp, xTileTmp;
+    if (!xglPrepareTarget (pDrawable))
+	return FALSE;
 
-	x = pBox->x1 + xOff;
-	y = pBox->y1 + yOff;
-	width = pBox->x2 - pBox->x1;
-	height = pBox->y2 - pBox->y1;
+    if (!xglSyncSurface (&pTile->drawable))
+	return FALSE;
 	
-	xTile = MOD (tileX + x, tileWidth);
-	yTile = MOD (tileY + y, tileHeight);
+    XGL_GET_DRAWABLE (pDrawable, surface, xOff, yOff);
 	
-	yTmp = y;
+    pTilePriv = XGL_GET_PIXMAP_PRIV (pTile);
 	
-	while (height)
+    pTilePriv->pictureMask |= xglPCFilterMask | xglPCTransformMask;
+    glitz_surface_set_filter (pTilePriv->surface,
+			      GLITZ_FILTER_NEAREST,
+			      NULL, 0);
+    glitz_surface_set_transform (pTilePriv->surface, NULL);
+    
+    if (pTilePriv->acceleratedTile)
 	{
-	    heightTile = MIN (tileHeight - yTile, height);
+	if (pGeometry)
+	{
+	    glitz_surface_set_clip_region (surface, xOff, yOff,
+					   (glitz_box_t *) pBox, nBox);
+	    nBox = 0;
+	}
+	else
+	{
+	    pGeometry = xglGetScratchVertexGeometry (pDrawable->pScreen,
+						     4 * nBox);
+	    GEOMETRY_ADD_BOX (pDrawable->pScreen, pGeometry, pBox, nBox);
+	}
 
-	    xTileTmp = xTile;
-	    widthTmp = width;
-	    xTmp     = x;
+	GEOMETRY_TRANSLATE (pGeometry, xOff, yOff);
 	    
-	    while (widthTmp)
-	    {
-		widthTile = MIN (tileWidth - xTileTmp, widthTmp);
+	if (!GEOMETRY_ENABLE (pGeometry, surface))
+	    return FALSE;
+
+	pTilePriv->pictureMask |= xglPCFillMask;
+	glitz_surface_set_fill (pTilePriv->surface, GLITZ_FILL_REPEAT);
 
-		if (what == TILE_MASK)
-		{
 		    glitz_composite (op,
-				     srcSurface, maskSurface, dstSurface,
-				     xSrc + xTmp, ySrc + yTmp,
-				     xTileTmp, yTile,
-				     xTmp, yTmp,
-				     widthTile, heightTile);
+			 pTilePriv->surface, NULL, surface,
+			 x + tileX,
+			 y + tileY,
+			 0, 0,
+			 x + xOff,
+			 y + yOff,
+			 width, height);
+
+	glitz_surface_set_clip_region (surface, 0, 0, NULL, 0);
+	
+	if (!glitz_surface_get_status (surface))
+	    return TRUE;
+
+	if (!nBox)
+	    return FALSE;
 		}
 		else
 		{
-		    glitz_composite (op,
-				     srcSurface, maskSurface, dstSurface,
-				     xTileTmp, yTile,
-				     xMask + xTmp, yMask + yTmp,
-				     xTmp, yTmp,
-				     widthTile, heightTile);
+	if (pGeometry)
+	    return FALSE;
 		}
 		
-		xTileTmp  = 0;
-		xTmp     += widthTile;
-		widthTmp -= widthTile;
+    pGeometry = xglTiledBoxGeometry (pTile, tileX, tileY, pBox, nBox);
+    if (!pGeometry)
+	return FALSE;
 		
-	    }
+    GEOMETRY_TRANSLATE (pGeometry, xOff, yOff);
 
-	    yTile   = 0;
-	    yTmp   += heightTile;
-	    height -= heightTile;
-	}
+    if (!GEOMETRY_ENABLE (pGeometry, surface))
+	return FALSE;
 	
-	pBox++;
-    }
+    glitz_composite (op,
+		     pTilePriv->surface, NULL, surface,
+		     0, 0,
+		     0, 0,
+		     x + xOff,
+		     y + yOff,
+		     width, height);
+    
+    if (glitz_surface_get_status (surface))
+	return FALSE;
+    
+    return TRUE;
 }
