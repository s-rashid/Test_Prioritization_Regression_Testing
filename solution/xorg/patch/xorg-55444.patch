diff --git a/hw/xfree86/common/xf86fbman.c b/hw/xfree86/common/xf86fbman.c
index e60e5c4..3c29bf5 100644
--- a/hw/xfree86/common/xf86fbman.c
+++ b/hw/xfree86/common/xf86fbman.c
@@ -45,10 +45,9 @@
 static DevPrivateKeyRec xf86FBManagerKeyRec;
 static DevPrivateKey xf86FBManagerKey;
 
-Bool xf86RegisterOffscreenManager(
-    ScreenPtr pScreen, 
-    FBManagerFuncsPtr funcs
-){
+Bool
+xf86RegisterOffscreenManager(ScreenPtr pScreen, FBManagerFuncsPtr funcs)
+{
 
    xf86FBManagerKey = &xf86FBManagerKeyRec;
 
@@ -60,7 +59,6 @@ Bool xf86RegisterOffscreenManager(
    return TRUE;
 }
 
-
 Bool
 xf86FBManagerRunning(ScreenPtr pScreen)
 {
@@ -74,11 +72,10 @@ xf86FBManagerRunning(ScreenPtr pScreen)
 }
 
 Bool
-xf86RegisterFreeBoxCallback(
-    ScreenPtr pScreen,  
+xf86RegisterFreeBoxCallback(ScreenPtr pScreen,
     FreeBoxCallbackProcPtr FreeBoxCallback,
-    pointer devPriv
-){
+                            pointer devPriv)
+{
    FBManagerFuncsPtr funcs;
 
    if(xf86FBManagerKey == NULL) 
@@ -87,19 +84,17 @@ xf86RegisterFreeBoxCallback(
 						    xf86FBManagerKey)))
 	return FALSE;
 
-   return (*funcs->RegisterFreeBoxCallback)(pScreen, FreeBoxCallback, devPriv);
+    return (*funcs->RegisterFreeBoxCallback) (pScreen, FreeBoxCallback,
+                                              devPriv);
 }
 
-
 FBAreaPtr
-xf86AllocateOffscreenArea(
-   ScreenPtr pScreen, 
+xf86AllocateOffscreenArea(ScreenPtr pScreen,
    int w, int h,
    int gran,
    MoveAreaCallbackProcPtr moveCB,
-   RemoveAreaCallbackProcPtr removeCB,
-   pointer privData
-){
+                          RemoveAreaCallbackProcPtr removeCB, pointer privData)
+{
    FBManagerFuncsPtr funcs;
 
    if(xf86FBManagerKey == NULL) 
@@ -108,20 +103,18 @@ xf86AllocateOffscreenArea(
 						    xf86FBManagerKey)))
 	return NULL;
 
-   return (*funcs->AllocateOffscreenArea)(
-		pScreen, w, h, gran, moveCB, removeCB, privData);
+    return (*funcs->AllocateOffscreenArea) (pScreen, w, h, gran, moveCB,
+                                            removeCB, privData);
 }
 
-
 FBLinearPtr
-xf86AllocateOffscreenLinear(
-    ScreenPtr pScreen, 
+xf86AllocateOffscreenLinear(ScreenPtr pScreen,
     int length,
     int gran,
     MoveLinearCallbackProcPtr moveCB,
     RemoveLinearCallbackProcPtr removeCB,
-    pointer privData
-){
+                            pointer privData)
+{
    FBManagerFuncsPtr funcs;
 
    if(xf86FBManagerKey == NULL) 
@@ -130,22 +123,24 @@ xf86AllocateOffscreenLinear(
 						    xf86FBManagerKey)))
 	return NULL;
 
-   return (*funcs->AllocateOffscreenLinear)(
-		pScreen, length, gran, moveCB, removeCB, privData);
+    return (*funcs->AllocateOffscreenLinear) (pScreen, length, gran, moveCB,
+                                              removeCB, privData);
 }
 
-
 void
 xf86FreeOffscreenArea(FBAreaPtr area)
 {
    FBManagerFuncsPtr funcs;
 
-   if(!area) return;
+    if (!area)
+        return;
 
    if(xf86FBManagerKey == NULL) 
 	return;
-   if(!(funcs = (FBManagerFuncsPtr)dixLookupPrivate(
-	    &area->pScreen->devPrivates, xf86FBManagerKey)))
+    if (!
+        (funcs =
+         (FBManagerFuncsPtr) dixLookupPrivate(&area->pScreen->devPrivates,
+                                              xf86FBManagerKey)))
 	return;
 
    (*funcs->FreeOffscreenArea)(area);
@@ -153,18 +148,20 @@ xf86FreeOffscreenArea(FBAreaPtr area)
    return;
 }
 
-
 void
 xf86FreeOffscreenLinear(FBLinearPtr linear)
 {
    FBManagerFuncsPtr funcs;
 
-   if(!linear) return;
+    if (!linear)
+        return;
 
    if(xf86FBManagerKey == NULL) 
 	return;
-   if(!(funcs = (FBManagerFuncsPtr)dixLookupPrivate(
-	    &linear->pScreen->devPrivates, xf86FBManagerKey)))
+    if (!
+        (funcs =
+         (FBManagerFuncsPtr) dixLookupPrivate(&linear->pScreen->devPrivates,
+                                              xf86FBManagerKey)))
 	return;
 
    (*funcs->FreeOffscreenLinear)(linear);
@@ -172,52 +169,49 @@ xf86FreeOffscreenLinear(FBLinearPtr linear)
    return;
 }
 
-
 Bool
-xf86ResizeOffscreenArea(
-   FBAreaPtr resize,
-   int w, int h
-){
+xf86ResizeOffscreenArea(FBAreaPtr resize, int w, int h)
+{
    FBManagerFuncsPtr funcs;
 
-   if(!resize) return FALSE;
+    if (!resize)
+        return FALSE;
 
    if(xf86FBManagerKey == NULL) 
 	return FALSE;
-   if(!(funcs = (FBManagerFuncsPtr)dixLookupPrivate(
-	    &resize->pScreen->devPrivates, xf86FBManagerKey)))
+    if (!
+        (funcs =
+         (FBManagerFuncsPtr) dixLookupPrivate(&resize->pScreen->devPrivates,
+                                              xf86FBManagerKey)))
 	return FALSE;
 
    return (*funcs->ResizeOffscreenArea)(resize, w, h);
 }
 
 Bool
-xf86ResizeOffscreenLinear(
-   FBLinearPtr resize,
-   int size
-){
+xf86ResizeOffscreenLinear(FBLinearPtr resize, int size)
+{
    FBManagerFuncsPtr funcs;
 
-   if(!resize) return FALSE;
+    if (!resize)
+        return FALSE;
 
    if(xf86FBManagerKey == NULL) 
 	return FALSE;
-   if(!(funcs = (FBManagerFuncsPtr)dixLookupPrivate(
-	    &resize->pScreen->devPrivates, xf86FBManagerKey)))
+    if (!
+        (funcs =
+         (FBManagerFuncsPtr) dixLookupPrivate(&resize->pScreen->devPrivates,
+                                              xf86FBManagerKey)))
 	return FALSE;
 
    return (*funcs->ResizeOffscreenLinear)(resize, size);
 }
 
-
 Bool
-xf86QueryLargestOffscreenArea(
-    ScreenPtr pScreen,
+xf86QueryLargestOffscreenArea(ScreenPtr pScreen,
     int *w, int *h,
-    int gran,
-    int preferences,
-    int severity
-){
+                              int gran, int preferences, int severity)
+{
    FBManagerFuncsPtr funcs;
 
    *w = 0;
@@ -229,17 +223,14 @@ xf86QueryLargestOffscreenArea(
 						    xf86FBManagerKey)))
 	return FALSE;
 
-   return (*funcs->QueryLargestOffscreenArea)(
-		pScreen, w, h, gran, preferences, severity);
+    return (*funcs->QueryLargestOffscreenArea) (pScreen, w, h, gran,
+                                                preferences, severity);
 }
 
 Bool
-xf86QueryLargestOffscreenLinear(
-    ScreenPtr pScreen,
-    int *size,
-    int gran,
-    int severity
-){
+xf86QueryLargestOffscreenLinear(ScreenPtr pScreen,
+                                int *size, int gran, int severity)
+{
    FBManagerFuncsPtr funcs;
 
    *size = 0;
@@ -250,11 +241,10 @@ xf86QueryLargestOffscreenLinear(
 						    xf86FBManagerKey)))
 	return FALSE;
 
-   return (*funcs->QueryLargestOffscreenLinear)(
-		pScreen, size, gran, severity);
+    return (*funcs->QueryLargestOffscreenLinear) (pScreen, size, gran,
+                                                  severity);
 }
 
-
 Bool
 xf86PurgeUnlockedOffscreenAreas(ScreenPtr pScreen)
 {
@@ -276,6 +266,7 @@ xf86PurgeUnlockedOffscreenAreas(ScreenPtr pScreen)
 \************************************************************/ 
 
 static DevPrivateKeyRec xf86FBScreenKeyRec;
+
 #define xf86FBScreenKey (&xf86FBScreenKeyRec)
 
 typedef struct _FBLink {
@@ -290,7 +281,6 @@ typedef struct _FBLinearLink {
   struct _FBLinearLink *next;  
 } FBLinearLink, *FBLinearLinkPtr;
 
-
 typedef struct {
    ScreenPtr    		pScreen;
    RegionPtr    		InitialBoxes;
@@ -304,24 +294,23 @@ typedef struct {
    DevUnion                     *devPrivates;
 } FBManager, *FBManagerPtr;
 
-
 static void
 SendCallFreeBoxCallbacks(FBManagerPtr offman)
 {
    int i = offman->NumCallbacks;
 
    while(i--) {
-	(*offman->FreeBoxesUpdateCallback[i])(
-	   offman->pScreen, offman->FreeBoxes, offman->devPrivates[i].ptr);
+        (*offman->FreeBoxesUpdateCallback[i]) (offman->pScreen,
+                                               offman->FreeBoxes,
+                                               offman->devPrivates[i].ptr);
    }
 }
 
 static Bool
-localRegisterFreeBoxCallback(
-    ScreenPtr pScreen,  
+localRegisterFreeBoxCallback(ScreenPtr pScreen,
     FreeBoxCallbackProcPtr FreeBoxCallback,
-    pointer devPriv
-){
+                             pointer devPriv)
+{
    FBManagerPtr offman;
    FreeBoxCallbackProcPtr *newCallbacks;
    DevUnion *newPrivates; 
@@ -329,7 +318,8 @@ localRegisterFreeBoxCallback(
    offman = (FBManagerPtr)dixLookupPrivate(&pScreen->devPrivates,
 					   xf86FBScreenKey);
    newCallbacks = realloc( offman->FreeBoxesUpdateCallback,
-		sizeof(FreeBoxCallbackProcPtr) * (offman->NumCallbacks + 1));
+                           sizeof(FreeBoxCallbackProcPtr) *
+                           (offman->NumCallbacks + 1));
 
    newPrivates = realloc(offman->devPrivates,
 			  sizeof(DevUnion) * (offman->NumCallbacks + 1));
@@ -349,16 +339,13 @@ localRegisterFreeBoxCallback(
    return TRUE;
 }
 
-
 static FBAreaPtr
-AllocateArea(
-   FBManagerPtr offman,
+AllocateArea(FBManagerPtr offman,
    int w, int h,
    int granularity,
    MoveAreaCallbackProcPtr moveCB,
-   RemoveAreaCallbackProcPtr removeCB,
-   pointer privData
-){
+             RemoveAreaCallbackProcPtr removeCB, pointer privData)
+{
    ScreenPtr pScreen = offman->pScreen;
    FBLinkPtr link = NULL;
    FBAreaPtr area = NULL;
@@ -366,7 +353,8 @@ AllocateArea(
    int i, x = 0, num;
    BoxPtr boxp;
 
-   if(granularity <= 1) granularity = 0;
+    if (granularity <= 1)
+        granularity = 0;
 
    boxp = RegionRects(offman->FreeBoxes);
    num = RegionNumRects(offman->FreeBoxes);
@@ -381,7 +369,8 @@ AllocateArea(
 	   continue;
 
 	link = malloc(sizeof(FBLink));
-	if(!link) return NULL;
+        if (!link)
+            return NULL;
 
         area = &(link->area);
         link->next = offman->UsedAreas;
@@ -441,14 +430,12 @@ AllocateArea(
 }
 
 static FBAreaPtr
-localAllocateOffscreenArea(
-   ScreenPtr pScreen, 
+localAllocateOffscreenArea(ScreenPtr pScreen,
    int w, int h,
    int gran,
    MoveAreaCallbackProcPtr moveCB,
-   RemoveAreaCallbackProcPtr removeCB,
-   pointer privData
-){
+                           RemoveAreaCallbackProcPtr removeCB, pointer privData)
+{
    FBManagerPtr offman;
    FBAreaPtr area = NULL;
 
@@ -460,7 +447,6 @@ localAllocateOffscreenArea(
    return area;
 }
 
-
 static void
 localFreeOffscreenArea(FBAreaPtr area)
 {
@@ -473,12 +459,14 @@ localFreeOffscreenArea(FBAreaPtr area)
    offman = (FBManagerPtr)dixLookupPrivate(&pScreen->devPrivates,
 					   xf86FBScreenKey);
    pLink = offman->UsedAreas;
-   if(!pLink) return;  
+    if (!pLink)
+        return;
  
    while(&(pLink->area) != area) {
 	pLinkPrev = pLink;
 	pLink = pLink->next;
-	if(!pLink) return;
+        if (!pLink)
+            return;
    }
 
    /* put the area back into the pool */
@@ -488,7 +476,8 @@ localFreeOffscreenArea(FBAreaPtr area)
 
    if(pLinkPrev)
 	pLinkPrev->next = pLink->next;
-   else offman->UsedAreas = pLink->next;
+    else
+        offman->UsedAreas = pLink->next;
 
    free(pLink);
    offman->NumUsedAreas--;
@@ -496,13 +485,9 @@ localFreeOffscreenArea(FBAreaPtr area)
    SendCallFreeBoxCallbacks(offman);
 }
    
-
-
 static Bool
-localResizeOffscreenArea(
-   FBAreaPtr resize,
-   int w, int h
-){
+localResizeOffscreenArea(FBAreaPtr resize, int w, int h)
+{
    FBManagerPtr offman;
    ScreenPtr pScreen;
    BoxRec OrigArea;
@@ -520,7 +505,8 @@ localResizeOffscreenArea(
    while(&(pLink->area) != resize) {
 	pLinkPrev = pLink;
 	pLink = pLink->next;
-	if(!pLink) return FALSE;
+        if (!pLink)
+            return FALSE;
    }
 
    OrigArea.x1 = resize->box.x1;
@@ -537,8 +523,7 @@ localResizeOffscreenArea(
 	resize->box.x2 = resize->box.x1 + w;
 	resize->box.y2 = resize->box.y1 + h;
 
-        if((resize->box.y2 == OrigArea.y2) &&
-	   (resize->box.x2 == OrigArea.x2))
+        if ((resize->box.y2 == OrigArea.y2) && (resize->box.x2 == OrigArea.x2))
 		return TRUE;
 
 	RegionInit(&FreedReg, &OrigArea, 1);
@@ -553,7 +538,6 @@ localResizeOffscreenArea(
 	return TRUE;
    }
 
-
    /* otherwise we remove the old region */
 
    RegionInit(&FreedReg, &OrigArea, 1);
@@ -562,12 +546,14 @@ localResizeOffscreenArea(
    /* remove the old link */
    if(pLinkPrev)
 	pLinkPrev->next = pLink->next;
-   else offman->UsedAreas = pLink->next;
+    else
+        offman->UsedAreas = pLink->next;
 
    /* and try to add a new one */
 
    if((area = AllocateArea(offman, w, h, resize->granularity,
-		resize->MoveAreaCallback, resize->RemoveAreaCallback,
+                             resize->MoveAreaCallback,
+                             resize->RemoveAreaCallback,
 		resize->devPrivate.ptr))) {
 
         /* copy data over to our link and replace the new with old */
@@ -583,7 +569,8 @@ localResizeOffscreenArea(
 
 	if(pLinkPrev)
 	    pLinkPrev->next = newLink->next;
-	else offman->UsedAreas = newLink->next;
+        else
+            offman->UsedAreas = newLink->next;
 
         pLink->next = offman->UsedAreas;
         offman->UsedAreas = pLink;
@@ -592,7 +579,8 @@ localResizeOffscreenArea(
 
 	/* AllocateArea added one but we really only exchanged one */
 	offman->NumUsedAreas--;  
-   } else {
+    }
+    else {
       /* reinstate the old region */
       RegionSubtract(offman->FreeBoxes, offman->FreeBoxes, &FreedReg);
       RegionUninit(&FreedReg);
@@ -602,7 +590,6 @@ localResizeOffscreenArea(
       return FALSE;
    }
 
-
    RegionUninit(&FreedReg);
 
    SendCallFreeBoxCallbacks(offman);
@@ -611,13 +598,10 @@ localResizeOffscreenArea(
 }
 
 static Bool
-localQueryLargestOffscreenArea(
-    ScreenPtr pScreen,
+localQueryLargestOffscreenArea(ScreenPtr pScreen,
     int *width, int *height,
-    int granularity,
-    int preferences,
-    int severity
-){
+                               int granularity, int preferences, int severity)
+{
     FBManagerPtr offman;
     RegionPtr newRegion = NULL;
     BoxPtr pbox;
@@ -626,21 +610,25 @@ localQueryLargestOffscreenArea(
 
     *width = *height = oldArea = 0;
 
-    if(granularity <= 1) granularity = 0;
+    if (granularity <= 1)
+        granularity = 0;
 
     if((preferences < 0) || (preferences > 3))
 	return FALSE;	
 
     offman = (FBManagerPtr)dixLookupPrivate(&pScreen->devPrivates,
 					    xf86FBScreenKey);
-    if(severity < 0) severity = 0;
-    if(severity > 2) severity = 2;
+    if (severity < 0)
+        severity = 0;
+    if (severity > 2)
+        severity = 2;
 
     switch(severity) {
     case 2:
 	if(offman->NumUsedAreas) {
 	    FBLinkPtr pLink;
 	    RegionRec tmpRegion;
+
 	    newRegion = RegionCreate(NULL, 1);
 	    RegionCopy(newRegion, offman->InitialBoxes);
 	    pLink = offman->UsedAreas;
@@ -662,6 +650,7 @@ localQueryLargestOffscreenArea(
 	if(offman->NumUsedAreas) {
 	    FBLinkPtr pLink;
 	    RegionRec tmpRegion;
+
 	    newRegion = RegionCreate(NULL, 1);
 	    RegionCopy(newRegion, offman->FreeBoxes);
 	    pLink = offman->UsedAreas;
@@ -696,6 +685,7 @@ localQueryLargestOffscreenArea(
 
 	if(w > 0) {
 	    Bool gotIt = FALSE;
+
 	    switch(preferences) {
 	    case FAVOR_AREA_THEN_WIDTH:
 		if((area > oldArea) || ((area == oldArea) && (w > *width))) 
@@ -740,7 +730,8 @@ localPurgeUnlockedOffscreenAreas(ScreenPtr pScreen)
    offman = (FBManagerPtr)dixLookupPrivate(&pScreen->devPrivates,
 					   xf86FBScreenKey);
    pLink = offman->UsedAreas;
-   if(!pLink) return TRUE;  
+    if (!pLink)
+        return TRUE;
  
    while(pLink) {
 	if(pLink->area.RemoveAreaCallback) {
@@ -752,14 +743,16 @@ localPurgeUnlockedOffscreenAreas(ScreenPtr pScreen)
 
 	    if(pPrev)
 	      pPrev->next = pLink->next;
-	    else offman->UsedAreas = pLink->next;
+            else
+                offman->UsedAreas = pLink->next;
 
 	    tmp = pLink;
 	    pLink = pLink->next;
             free(tmp);
 	    offman->NumUsedAreas--;
 	    anyUsed = TRUE;
-	} else {
+        }
+        else {
 	    pPrev = pLink;
 	    pLink = pLink->next;
 	}
@@ -789,12 +782,14 @@ LinearRemoveCBWrapper(FBAreaPtr area)
    offman = (FBManagerPtr)dixLookupPrivate(&pScreen->devPrivates,
 					   xf86FBScreenKey);
    pLink = offman->LinearAreas;
-   if(!pLink) return;  
+    if (!pLink)
+        return;
  
    while(pLink->area != area) {
         pLinkPrev = pLink;
         pLink = pLink->next;
-        if(!pLink) return;
+        if (!pLink)
+            return;
    }
 
    /* give the user the callback it is expecting */
@@ -802,7 +797,8 @@ LinearRemoveCBWrapper(FBAreaPtr area)
 
    if(pLinkPrev)
         pLinkPrev->next = pLink->next;
-   else offman->LinearAreas = pLink->next;
+    else
+        offman->LinearAreas = pLink->next;
 
    free(pLink);
 }
@@ -811,14 +807,14 @@ static void
 DumpDebug(FBLinearLinkPtr pLink)
 {
 #ifdef DEBUG
-   if (!pLink) ErrorF("MMmm, PLINK IS NULL!\n");
+    if (!pLink)
+        ErrorF("MMmm, PLINK IS NULL!\n");
 
    while (pLink) {
 	 ErrorF("  Offset:%08x, Size:%08x, %s,%s\n",
 		pLink->linear.offset,
 		pLink->linear.size,
-		pLink->free ? "Free" : "Used",
-		pLink->area ? "Area" : "Linear");
+               pLink->free ? "Free" : "Used", pLink->area ? "Area" : "Linear");
 
 	 pLink = pLink->next;
    }
@@ -826,20 +822,18 @@ DumpDebug(FBLinearLinkPtr pLink)
 }
 
 static FBLinearPtr
-AllocateLinear(
-   FBManagerPtr offman,
-   int size,
-   int granularity,
-   pointer privData
-){
+AllocateLinear(FBManagerPtr offman, int size, int granularity, pointer privData)
+{
    ScreenPtr pScreen = offman->pScreen;
    FBLinearLinkPtr linear = NULL;
    FBLinearLinkPtr newlink = NULL;
    int offset, end;
 
-   if(size <= 0) return NULL;
+    if (size <= 0)
+        return NULL;
 
-   if (!offman->LinearAreas) return NULL;
+    if (!offman->LinearAreas)
+        return NULL;
 
    linear = offman->LinearAreas;
    while (linear) {
@@ -847,7 +841,8 @@ AllocateLinear(
       if (!linear->area && linear->free) {
 	 offset = linear->linear.offset;
 	 if (granularity > 1)
-	    offset = ((offset + granularity - 1) / granularity) * granularity;
+                offset =
+                    ((offset + granularity - 1) / granularity) * granularity;
 	 end = offset+size;
 	 if (end <= (linear->linear.offset + linear->linear.size))
 	    break;
@@ -864,7 +859,8 @@ AllocateLinear(
 	 return NULL;
       newlink->area = NULL;
       newlink->linear.offset = offset;
-      newlink->linear.size = linear->linear.size - (offset - linear->linear.offset);
+        newlink->linear.size =
+            linear->linear.size - (offset - linear->linear.offset);
       newlink->free = 1;
       newlink->next = linear->next;
       linear->linear.size -= newlink->linear.size;
@@ -900,14 +896,13 @@ AllocateLinear(
 }
 
 static FBLinearPtr
-localAllocateOffscreenLinear(
-    ScreenPtr pScreen, 
+localAllocateOffscreenLinear(ScreenPtr pScreen,
     int length,
     int gran,
     MoveLinearCallbackProcPtr moveCB,
     RemoveLinearCallbackProcPtr removeCB,
-    pointer privData
-){
+                             pointer privData)
+{
    FBManagerPtr offman;
    FBLinearLinkPtr link;
    FBAreaPtr area;
@@ -950,16 +945,16 @@ localAllocateOffscreenLinear(
    if(length < pitch) { /* special case */
 	w = length;
 	h = 1;
-   } else {
+    }
+    else {
 	w = pitch;
 	h = (length + pitch - 1) / pitch;
    }
 
    if((area = localAllocateOffscreenArea(pScreen, w, h, gran, 
 			moveCB   ? LinearMoveCBWrapper   : NULL, 
-			removeCB ? LinearRemoveCBWrapper : NULL, 
-			privData))) 
-   {
+                                           removeCB ? LinearRemoveCBWrapper :
+                                           NULL, privData))) {
 	link->area = area;
 	link->free = 0;
 	link->next = offman->LinearAreas;
@@ -974,7 +969,8 @@ localAllocateOffscreenLinear(
 	linear->MoveLinearCallback = moveCB;
 	linear->RemoveLinearCallback = removeCB;
 	linear->devPrivate.ptr = privData;
-   } else 
+    }
+    else
 	free(link);
 
    DumpDebug(offman->LinearAreas);
@@ -982,7 +978,6 @@ localAllocateOffscreenLinear(
    return linear;
 }
 
-
 static void 
 localFreeOffscreenLinear(FBLinearPtr linear)
 {
@@ -993,12 +988,14 @@ localFreeOffscreenLinear(FBLinearPtr linear)
    offman = (FBManagerPtr)dixLookupPrivate(&pScreen->devPrivates,
 					   xf86FBScreenKey);
    pLink = offman->LinearAreas;
-   if(!pLink) return;  
+    if (!pLink)
+        return;
  
    while(&(pLink->linear) != linear) {
         pLinkPrev = pLink;
         pLink = pLink->next;
-        if(!pLink) return;
+        if (!pLink)
+            return;
    }
 
    if(pLink->area) {  /* really an XY area */
@@ -1006,7 +1003,8 @@ localFreeOffscreenLinear(FBLinearPtr linear)
 	localFreeOffscreenArea(pLink->area);
    	if(pLinkPrev)
 	    pLinkPrev->next = pLink->next;
-   	else offman->LinearAreas = pLink->next;
+        else
+            offman->LinearAreas = pLink->next;
         free(pLink);
 	DumpDebug(offman->LinearAreas);
 	return;
@@ -1016,6 +1014,7 @@ localFreeOffscreenLinear(FBLinearPtr linear)
 
    if (pLink->next && pLink->next->free) {
       FBLinearLinkPtr p = pLink->next;
+
       pLink->linear.size += p->linear.size;
       pLink->next = p->next;
       free(p);
@@ -1024,6 +1023,7 @@ localFreeOffscreenLinear(FBLinearPtr linear)
    if(pLinkPrev) {
    	if (pLinkPrev->next && pLinkPrev->next->free && !pLinkPrev->area) {
       	    FBLinearLinkPtr p = pLinkPrev->next;
+
       	    pLinkPrev->linear.size += p->linear.size;
       	    pLinkPrev->next = p->next;
       	    free(p);
@@ -1034,7 +1034,6 @@ localFreeOffscreenLinear(FBLinearPtr linear)
    DumpDebug(offman->LinearAreas);
 }
 
-
 static Bool 
 localResizeOffscreenLinear(FBLinearPtr resize, int length)
 {
@@ -1045,11 +1044,13 @@ localResizeOffscreenLinear(FBLinearPtr resize, int length)
    offman = (FBManagerPtr)dixLookupPrivate(&pScreen->devPrivates,
 					   xf86FBScreenKey);
    pLink = offman->LinearAreas;
-   if(!pLink) return FALSE;  
+    if (!pLink)
+        return FALSE;
  
    while(&(pLink->linear) != resize) {
         pLink = pLink->next;
-        if(!pLink) return FALSE;
+        if (!pLink)
+            return FALSE;
    }
 
    /* This could actually be alot smarter and try to move allocations
@@ -1066,31 +1067,29 @@ localResizeOffscreenLinear(FBLinearPtr resize, int length)
 	if(length < pitch) { /* special case */
 	    w = length;
 	    h = 1;
-	} else {
+        }
+        else {
 	    w = pitch;
 	    h = (length + pitch - 1) / pitch;
 	}
 
 	if(localResizeOffscreenArea(pLink->area, w, h)) {
 	    resize->size = h * w;
-	    resize->offset = (pitch * pLink->area->box.y1) + pLink->area->box.x1;
+            resize->offset =
+                (pitch * pLink->area->box.y1) + pLink->area->box.x1;
 	    return TRUE;	
 	}
-   } else {
+    }
+    else {
 	/* TODO!!!! resize the linear area */
    }
 
    return FALSE;
 }
 
-
 static Bool
-localQueryLargestOffscreenLinear(
-    ScreenPtr pScreen,
-    int *size,
-    int gran,
-    int priority
-)
+localQueryLargestOffscreenLinear(ScreenPtr pScreen,
+                                 int *size, int gran, int priority)
 {
     FBManagerPtr offman = (FBManagerPtr)dixLookupPrivate(&pScreen->devPrivates,
 							 xf86FBScreenKey);
@@ -1115,12 +1114,12 @@ localQueryLargestOffscreenLinear(
 	    *size = pLinkRet->linear.size;
 	    return TRUE;
     	}
-    } else {
+    }
+    else {
 	int w, h;
 
     	if(localQueryLargestOffscreenArea(pScreen, &w, &h, gran, 
-				FAVOR_WIDTH_THEN_AREA, priority))
-    	{
+                                           FAVOR_WIDTH_THEN_AREA, priority)) {
 	    FBManagerPtr offman;
 	    BoxPtr extents;
 
@@ -1136,8 +1135,6 @@ localQueryLargestOffscreenLinear(
     return FALSE;
 }
 
-
-
 static FBManagerFuncs xf86FBManFuncs = {
    localAllocateOffscreenArea,
    localFreeOffscreenArea,
@@ -1151,7 +1148,6 @@ static FBManagerFuncs xf86FBManFuncs = {
    localPurgeUnlockedOffscreenAreas
  };
 
-
 static Bool
 xf86FBCloseScreen (int i, ScreenPtr pScreen)
 {
@@ -1188,10 +1184,8 @@ xf86FBCloseScreen (int i, ScreenPtr pScreen)
 }
 
 Bool
-xf86InitFBManager(
-    ScreenPtr pScreen,  
-    BoxPtr FullBox
-){
+xf86InitFBManager(ScreenPtr pScreen, BoxPtr FullBox)
+{
    ScrnInfoPtr pScrn = xf86Screens[pScreen->myNum];
    RegionRec ScreenRegion;
    RegionRec FullRegion;
@@ -1208,8 +1202,10 @@ xf86InitFBManager(
 	return FALSE;   
    }
 
-   if (FullBox->y2 < FullBox->y1) return FALSE;
-   if (FullBox->x2 < FullBox->x1) return FALSE;
+    if (FullBox->y2 < FullBox->y1)
+        return FALSE;
+    if (FullBox->x2 < FullBox->x1)
+        return FALSE;
 
    RegionInit(&ScreenRegion, &ScreenBox, 1);
    RegionInit(&FullRegion, FullBox, 1);
@@ -1225,11 +1221,7 @@ xf86InitFBManager(
 }
 
 Bool
-xf86InitFBManagerArea(
-    ScreenPtr pScreen,
-    int PixelArea,
-    int Verbosity
-)
+xf86InitFBManagerArea(ScreenPtr pScreen, int PixelArea, int Verbosity)
 {
     ScrnInfoPtr pScrn = xf86Screens[pScreen->myNum];
     xRectangle Rect[3];
@@ -1278,8 +1270,7 @@ xf86InitFBManagerArea(
 			    xf86DrvMsgVerb(scrnIndex, X_INFO, Verbosity,
 				"\t%d x %d rectangle at %d,0\n",
 				Rect[0].width - Rect[2].width,
-				Rect[0].height,
-				Rect[2].width);
+                                           Rect[0].height, Rect[2].width);
 			}
 			if (Rect[2].width < Rect[1].width) {
 			    xf86DrvMsgVerb(scrnIndex, X_INFO, Verbosity,
@@ -1300,8 +1291,7 @@ xf86InitFBManagerArea(
 				"\t%d x %d rectangle at 0,%d\n",
 				Rect[1].width,
 				Rect[0].height - Rect[2].height +
-				    Rect[1].height,
-				Rect[2].height);
+                                           Rect[1].height, Rect[2].height);
 			}
 		    }
 		}
@@ -1317,10 +1307,8 @@ xf86InitFBManagerArea(
 }
 
 Bool
-xf86InitFBManagerRegion(
-    ScreenPtr pScreen,  
-    RegionPtr FullRegion
-){
+xf86InitFBManagerRegion(ScreenPtr pScreen, RegionPtr FullRegion)
+{
    FBManagerPtr offman;
 
    if(RegionNil(FullRegion))
@@ -1333,7 +1321,8 @@ xf86InitFBManagerRegion(
 	return FALSE;
 
    offman = malloc(sizeof(FBManager));
-   if(!offman) return FALSE;
+    if (!offman)
+        return FALSE;
 
    dixSetPrivate(&pScreen->devPrivates, xf86FBScreenKey, offman);
 
@@ -1358,11 +1347,8 @@ xf86InitFBManagerRegion(
 } 
 
 Bool
-xf86InitFBManagerLinear(
-    ScreenPtr pScreen,  
-    int offset,
-    int size
-){
+xf86InitFBManagerLinear(ScreenPtr pScreen, int offset, int size)
+{
    FBManagerPtr offman;
    FBLinearLinkPtr link;
    FBLinearPtr linear;
@@ -1396,20 +1382,18 @@ xf86InitFBManagerLinear(
    return TRUE;
 }
 
-
 /* This is an implementation specific function and should 
    disappear after the next release.  People should use the
    real linear functions instead */
 
 FBAreaPtr
-xf86AllocateLinearOffscreenArea (
-   ScreenPtr pScreen, 
+xf86AllocateLinearOffscreenArea(ScreenPtr pScreen,
    int length,
    int gran,
    MoveAreaCallbackProcPtr moveCB,
    RemoveAreaCallbackProcPtr removeCB,
-   pointer privData
-){
+                                pointer privData)
+{
    FBManagerFuncsPtr funcs;
    FBManagerPtr offman;
    BoxPtr extents;
@@ -1437,10 +1421,11 @@ xf86AllocateLinearOffscreenArea (
    if(length <= w) { /* special case */
 	h = 1;
 	w = length;
-   } else {
+    }
+    else {
 	h = (length + w - 1) / w;
    }
 
-   return (*funcs->AllocateOffscreenArea)(
-                pScreen, w, h, gran, moveCB, removeCB, privData);
+    return (*funcs->AllocateOffscreenArea) (pScreen, w, h, gran, moveCB,
+                                            removeCB, privData);
 }
