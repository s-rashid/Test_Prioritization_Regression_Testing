diff --git a/hw/dmx/dmxprop.c b/hw/dmx/dmxprop.c
index b4695dd..4be2dbd 100644
--- a/hw/dmx/dmxprop.c
+++ b/hw/dmx/dmxprop.c
@@ -72,12 +72,14 @@
 
 extern char *display;
 
-static int dmxPropertyErrorHandler(Display *dpy, XErrorEvent *ev)
+static int
+dmxPropertyErrorHandler(Display * dpy, XErrorEvent * ev)
 {
     return 0;
 }
 
-static const unsigned char *dmxPropertyIdentifier(void)
+static const unsigned char *
+dmxPropertyIdentifier(void)
 {
                                 /* RATS: These buffers are only used in
                                  * length-limited calls. */
@@ -85,7 +87,8 @@ static const unsigned char *dmxPropertyIdentifier(void)
     static char   buf[128];
     static int    initialized = 0;
 
-    if (initialized++) return (unsigned char *)buf;
+    if (initialized++)
+        return (unsigned char *) buf;
     
     XmuGetHostname(hostname, sizeof(hostname));
     snprintf(buf, sizeof(buf), "%s:%s:%s", DMX_IDENT, hostname, display);
@@ -96,31 +99,37 @@ static const unsigned char *dmxPropertyIdentifier(void)
  * on the same physical X server as \a start, calling \a f with the
  * screen and the \a closure.  (The common case is that \a start is the
  * only DMX window on the backend X server.) */
-void *dmxPropertyIterate(DMXScreenInfo *start,
+void *
+dmxPropertyIterate(DMXScreenInfo * start,
                          void *(*f)(DMXScreenInfo *dmxScreen, void *),
                          void *closure)
 {
     DMXScreenInfo *pt;
 
     if (!start->next) {
-        if (!start->beDisplay) return NULL;
+        if (!start->beDisplay)
+            return NULL;
         return f(start, closure);
     }
 
     for (pt = start->next; /* condition at end of loop */; pt = pt->next) {
         void *retval;
+
         /* beDisplay ban be NULL if a screen was detached */
         dmxLog(dmxDebug, "pt = %p\n", pt);
         dmxLog(dmxDebug, "pt->beDisplay = %p\n", pt->beDisplay);
-        if (pt->beDisplay && (retval = f(pt, closure))) return retval;
-        if (pt == start) break;
+        if (pt->beDisplay && (retval = f(pt, closure)))
+            return retval;
+        if (pt == start)
+            break;
     }
     return NULL;
 }
 
 /** Returns 0 if this is the only Xdmx session on the display; 1
  * otherwise. */
-static int dmxPropertyCheckOtherServers(DMXScreenInfo *dmxScreen, Atom atom)
+static int
+dmxPropertyCheckOtherServers(DMXScreenInfo * dmxScreen, Atom atom)
 {
     Display       *dpy    = dmxScreen->beDisplay;
     XTextProperty tp;
@@ -136,7 +145,8 @@ static int dmxPropertyCheckOtherServers(DMXScreenInfo *dmxScreen, Atom atom)
 	return 0;
 
     if (!XGetTextProperty(dpy, RootWindow(dpy,0), &tproot, atom)
-        || !tproot.nitems) return 0;
+        || !tproot.nitems)
+        return 0;
     
                                 /* Ignore BadWindow errors for this
                                  * routine because the window id stored
@@ -145,15 +155,18 @@ static int dmxPropertyCheckOtherServers(DMXScreenInfo *dmxScreen, Atom atom)
     for (pt = (const char *)tproot.value; pt && *pt; pt = pt ? pt + 1 : NULL) {
         if ((pt = strchr(pt, ','))) {
             Window win = strtol(pt+1, NULL, 10);
+
             if (XGetTextProperty(dpy, win, &tp, atom) && tp.nitems) {
                 if (!strncmp((char *)tp.value, DMX_IDENT, strlen(DMX_IDENT))) {
                     int flag = 0;
+
                     for (i = 0; i < count; i++)
                         if (!strcmp(list[i], (char *)tp.value)) {
                             ++flag;
                             break;
                         }
-                    if (flag) continue;
+                    if (flag)
+                        continue;
                     ++retcode;
                     dmxLogOutputWarning(dmxScreen,
                                         "%s also running on %s\n",
@@ -168,7 +181,8 @@ static int dmxPropertyCheckOtherServers(DMXScreenInfo *dmxScreen, Atom atom)
     }
     XSetErrorHandler(dmxOldHandler);
 
-    for (i = 0; i < count; i++) free(list[i]);
+    for (i = 0; i < count; i++)
+        free(list[i]);
     free(list);
     XFree(tproot.value);
     if (!retcode)
@@ -179,8 +193,8 @@ static int dmxPropertyCheckOtherServers(DMXScreenInfo *dmxScreen, Atom atom)
 /** Returns NULL if this is the only Xdmx window on the display.
  * Otherwise, returns a pointer to the dmxScreen of the other windows on
  * the display. */
-static DMXScreenInfo *dmxPropertyCheckOtherWindows(DMXScreenInfo *dmxScreen,
-                                                   Atom atom)
+static DMXScreenInfo *
+dmxPropertyCheckOtherWindows(DMXScreenInfo * dmxScreen, Atom atom)
 {
     Display             *dpy = dmxScreen->beDisplay;
     const unsigned char *id  = dmxPropertyIdentifier();
@@ -193,7 +207,8 @@ static DMXScreenInfo *dmxPropertyCheckOtherWindows(DMXScreenInfo *dmxScreen,
 	return NULL;
 
     if (!XGetTextProperty(dpy, RootWindow(dpy,0), &tproot, atom)
-        || !tproot.nitems) return 0;
+        || !tproot.nitems)
+        return 0;
 
                                 /* Ignore BadWindow errors for this
                                  * routine because the window id stored
@@ -202,6 +217,7 @@ static DMXScreenInfo *dmxPropertyCheckOtherWindows(DMXScreenInfo *dmxScreen,
     for (pt = (const char *)tproot.value; pt && *pt; pt = pt ? pt + 1 : NULL) {
         if ((pt = strchr(pt, ','))) {
             Window win = strtol(pt+1, NULL, 10);
+
             if (XGetTextProperty(dpy, win, &tp, atom) && tp.nitems) {
                 dmxLog(dmxDebug,"On %s/%lu: %s\n",
                        dmxScreen->name, win, tp.value);
@@ -209,10 +225,13 @@ static DMXScreenInfo *dmxPropertyCheckOtherWindows(DMXScreenInfo *dmxScreen,
                              strlen((char *)id))) {
                     int idx;
                     
-                    if (!(pt = strchr((char *)tp.value, ','))) continue;
+                    if (!(pt = strchr((char *) tp.value, ',')))
+                        continue;
                     idx = strtol(pt+1, NULL, 10);
-                    if (idx < 0 || idx >= dmxNumScreens) continue;
-                    if (dmxScreens[idx].scrnWin != win) continue;
+                    if (idx < 0 || idx >= dmxNumScreens)
+                        continue;
+                    if (dmxScreens[idx].scrnWin != win)
+                        continue;
                     XSetErrorHandler(dmxOldHandler);
                     return &dmxScreens[idx];
                 }
@@ -227,7 +246,8 @@ static DMXScreenInfo *dmxPropertyCheckOtherWindows(DMXScreenInfo *dmxScreen,
 
 /** Returns 0 if this is the only Xdmx session on the display; 1
  * otherwise. */
-int dmxPropertyDisplay(DMXScreenInfo *dmxScreen)
+int
+dmxPropertyDisplay(DMXScreenInfo * dmxScreen)
 {
     Atom                atom;
     const unsigned char *id  = dmxPropertyIdentifier();
@@ -251,7 +271,8 @@ int dmxPropertyDisplay(DMXScreenInfo *dmxScreen)
  * names because there can be multiple synonyms for the same display,
  * some of which cannot be determined without accessing the display
  * itself (e.g., domain aliases or machines with multiple NICs). */
-int dmxPropertySameDisplay(DMXScreenInfo *dmxScreen, const char *name)
+int
+dmxPropertySameDisplay(DMXScreenInfo * dmxScreen, const char *name)
 {
     Display             *dpy0  = dmxScreen->beDisplay;
     Atom                atom0;
@@ -291,12 +312,16 @@ int dmxPropertySameDisplay(DMXScreenInfo *dmxScreen, const char *name)
         dmxLog(dmxDebug, "No text property on %s\n", name);
         goto cleanup;
     }
-    if (!strcmp((char *)tp0.value, (char *)tp1.value)) retval = 1;
+    if (!strcmp((char *) tp0.value, (char *) tp1.value))
+        retval = 1;
 
   cleanup:
-    if (tp0.nitems) XFree(tp0.value);
-    if (tp1.nitems) XFree(tp1.value);
-    if (dpy1)       XCloseDisplay(dpy1);
+    if (tp0.nitems)
+        XFree(tp0.value);
+    if (tp1.nitems)
+        XFree(tp1.value);
+    if (dpy1)
+        XCloseDisplay(dpy1);
     return retval;
 }
 
@@ -313,7 +338,8 @@ int dmxPropertySameDisplay(DMXScreenInfo *dmxScreen, const char *name)
  *
  * "#DMX_IDENT:<hostname running DMX>:<display name of DMX>,<screen number>"
  */
-void dmxPropertyWindow(DMXScreenInfo *dmxScreen)
+void
+dmxPropertyWindow(DMXScreenInfo * dmxScreen)
 {
     Atom                atom;
     const unsigned char *id  = dmxPropertyIdentifier();
@@ -330,6 +356,7 @@ void dmxPropertyWindow(DMXScreenInfo *dmxScreen)
     atom = XInternAtom(dpy, DMX_ATOMNAME, False);
     if ((other = dmxPropertyCheckOtherWindows(dmxScreen, atom))) {
         DMXScreenInfo *tmp = dmxScreen->next;
+
         dmxScreen->next    = (other->next ? other->next : other);
         other->next        = (tmp         ? tmp         : dmxScreen);
         dmxLog(dmxDebug, "%d/%s/%lu and %d/%s/%lu are on the same backend\n",
