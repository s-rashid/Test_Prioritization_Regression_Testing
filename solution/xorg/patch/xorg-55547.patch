diff --git a/hw/xfree86/os-support/bsd/alpha_video.c b/hw/xfree86/os-support/bsd/alpha_video.c
index 882fb3b..91f9fc8 100644
--- a/hw/xfree86/os-support/bsd/alpha_video.c
+++ b/hw/xfree86/os-support/bsd/alpha_video.c
@@ -67,6 +67,7 @@ memory_base(void)
     if (base == 0) {
 	size_t len = sizeof(base);
 	int error;
+
 #ifdef __OpenBSD__
        int mib[3];
 
@@ -76,8 +77,7 @@ memory_base(void)
 
        if ((error = sysctl(mib, 3, &base, &len, NULL, 0)) < 0)
 #else
-	if ((error = sysctlbyname("hw.chipset.memory", &base, &len,
-				  0, 0)) < 0)
+        if ((error = sysctlbyname("hw.chipset.memory", &base, &len, 0, 0)) < 0)
 #endif
 	    FatalError("xf86MapVidMem: can't find memory\n");
     }
@@ -91,6 +91,7 @@ has_bwx(void)
     static int bwx = 0;
     size_t len = sizeof(bwx);
     int error;
+
 #ifdef __OpenBSD__
     int mib[3];
 
@@ -131,8 +132,7 @@ has_bwx(void)
 	if (abw_count < 0)
 		init_abw();
 
-	xf86Msg(X_INFO, "has_bwx = %d\n", 
-		abw[0].abw_abst.abst_flags & ABST_BWX ? 1 : 0);	/* XXXX */
+    xf86Msg(X_INFO, "has_bwx = %d\n", abw[0].abw_abst.abst_flags & ABST_BWX ? 1 : 0);   /* XXXX */
 	return abw[0].abw_abst.abst_flags & ABST_BWX;
 }
 
@@ -143,8 +143,7 @@ dense_base(void)
 		init_abw();
 
 	/* XXX check abst_flags for ABST_DENSE just to be safe? */
-	xf86Msg(X_INFO, "dense base = %#lx\n", 
-		abw[0].abw_abst.abst_sys_start); /* XXXX */
+    xf86Msg(X_INFO, "dense base = %#lx\n", abw[0].abw_abst.abst_sys_start);     /* XXXX */
 	return abw[0].abw_abst.abst_sys_start;
 }
 
@@ -155,15 +154,15 @@ memory_base(void)
 		init_abw();
 	
 	if (abw_count > 1) {
-		xf86Msg(X_INFO, "memory base = %#lx\n", 
-			abw[1].abw_abst.abst_sys_start); /* XXXX */
+        xf86Msg(X_INFO, "memory base = %#lx\n", abw[1].abw_abst.abst_sys_start);        /* XXXX */
 		return abw[1].abw_abst.abst_sys_start;
-	} else if (abw_count == 1) {
+    }
+    else if (abw_count == 1) {
 		/* assume memory_base == dense_base */
-		xf86Msg(X_INFO, "memory base = %#lx\n",
-			abw[0].abw_abst.abst_sys_start); /* XXXX */
+        xf86Msg(X_INFO, "memory base = %#lx\n", abw[0].abw_abst.abst_sys_start);        /* XXXX */
 		return abw[0].abw_abst.abst_sys_start;
-	} else {
+    }
+    else {
 		xf86Msg(X_INFO, "no memory base\n"); /* XXXX */
 		return 0;
 	}
@@ -224,7 +223,8 @@ checkDevMem(Bool warn)
                xf86Msg(X_INFO, "checkDevMem: using aperture driver %s\n",
                        DEV_APERTURE);
                return;
-           } else {
+        }
+        else {
                if (warn) {
                    xf86Msg(X_WARNING, "checkDevMem: failed to mmap %s (%s)\n",
                            DEV_APERTURE, strerror(errno));
@@ -242,7 +242,8 @@ checkDevMem(Bool warn)
 		devMemFd = fd;
 		useDevMem = TRUE;
 		return;
-	    } else {
+        }
+        else {
 		if (warn) {
 		    xf86Msg(X_WARNING, "checkDevMem: failed to mmap %s (%s)\n",
 			    DEV_MEM, strerror(errno));
@@ -279,7 +280,8 @@ xf86OSInitVidMem(VidMemInfoPtr pVidMem)
 	    xf86Msg(X_PROBED,"Machine type has 8/16 bit access\n");
 	    pVidMem->mapMem = mapVidMem;
 	    pVidMem->unmapMem = unmapVidMem;
-	} else {
+    }
+    else {
 	    xf86Msg(X_PROBED,"Machine needs sparse mapping\n");
 	    pVidMem->mapMem = mapVidMemSparse;
 	    pVidMem->unmapMem = unmapVidMemSparse;
@@ -301,10 +303,8 @@ mapVidMem(int ScreenNum, unsigned long Base, unsigned long Size, int flags)
 	checkDevMem(FALSE);
 	Base = Base & ((1L<<32) - 1);
 
-	if (useDevMem)
-	{
-	    if (devMemFd < 0) 
-	    {
+    if (useDevMem) {
+        if (devMemFd < 0) {
 		FatalError("xf86MapVidMem: failed to open %s (%s)\n",
 			   DEV_MEM, strerror(errno));
 	    }
@@ -312,28 +312,23 @@ mapVidMem(int ScreenNum, unsigned long Base, unsigned long Size, int flags)
 			(flags & VIDMEM_READONLY) ?
 			 PROT_READ : (PROT_READ | PROT_WRITE),
 			 MAP_FLAGS, devMemFd, (off_t)Base + BUS_BASE_BWX);
-	    if (base == MAP_FAILED)
-	    {
+        if (base == MAP_FAILED) {
 		FatalError("%s: could not mmap %s [s=%lx,a=%lx] (%s)\n",
-			   "xf86MapVidMem", DEV_MEM, Size, Base, 
-			   strerror(errno));
+                       "xf86MapVidMem", DEV_MEM, Size, Base, strerror(errno));
 	    }
 	    return base;
 	}
 		
 	/* else, mmap /dev/vga */
-	if ((unsigned long)Base < 0xA0000 || (unsigned long)Base >= 0xC0000)
-	{
+    if ((unsigned long) Base < 0xA0000 || (unsigned long) Base >= 0xC0000) {
 		FatalError("%s: Address 0x%lx outside allowable range\n",
 			   "xf86MapVidMem", Base);
 	}
 	base = mmap(0, Size,
 		    (flags & VIDMEM_READONLY) ?
 		     PROT_READ : (PROT_READ | PROT_WRITE),
-		    MAP_FLAGS, xf86Info.consoleFd,
-		    (unsigned long)Base + BUS_BASE);
-	if (base == MAP_FAILED)
-	{
+                MAP_FLAGS, xf86Info.consoleFd, (unsigned long) Base + BUS_BASE);
+    if (base == MAP_FAILED) {
 	    FatalError("xf86MapVidMem: Could not mmap /dev/vga (%s)\n",
 		       strerror(errno));
 	}
@@ -369,16 +364,16 @@ xf86ReadBIOS(unsigned long Base, unsigned long Offset, unsigned char *Buf,
 	mlen = (Offset + Len + psize - 1) & ~(psize - 1);
 	ptr = (unsigned char *)mmap((caddr_t)0, mlen, PROT_READ,
 					MAP_SHARED, devMemFd, (off_t)Base+BUS_BASE);
-	if ((long)ptr == -1)
-	{
+    if ((long) ptr == -1) {
 		xf86Msg(X_WARNING, 
 			"xf86ReadBIOS: %s mmap[s=%x,a=%lx,o=%lx] failed (%s)\n",
 			DEV_MEM, Len, Base, Offset, strerror(errno));
 		return -1;
 	}
 #ifdef DEBUG
-	xf86MsgVerb(X_INFO, 3, "xf86ReadBIOS: BIOS at 0x%08x has signature 0x%04x\n",
-		Base, ptr[0] | (ptr[1] << 8));
+    xf86MsgVerb(X_INFO, 3,
+                "xf86ReadBIOS: BIOS at 0x%08x has signature 0x%04x\n", Base,
+                ptr[0] | (ptr[1] << 8));
 #endif
 	(void)memcpy(Buf, (void *)(ptr + Offset), Len);
 	(void)munmap((caddr_t)ptr, mlen);
@@ -390,7 +385,6 @@ xf86ReadBIOS(unsigned long Base, unsigned long Offset, unsigned char *Buf,
 	return Len;
 }
 
-
 #if defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__OpenBSD__)
 
 extern int ioperm(unsigned long from, unsigned long num, int on);
@@ -488,7 +482,8 @@ sethae(u_int64_t hae)
 #endif
 
 static pointer
-mapVidMemSparse(int ScreenNum, unsigned long Base, unsigned long Size, int flags)
+mapVidMemSparse(int ScreenNum, unsigned long Base, unsigned long Size,
+                int flags)
 {
     static Bool was_here = FALSE;
 
@@ -509,12 +504,10 @@ mapVidMemSparse(int ScreenNum, unsigned long Base, unsigned long Size, int flags
 	
       memBase = mmap((caddr_t)0, 0x100000000,
 		     PROT_READ | PROT_WRITE,
-		     MAP_SHARED, devMemFd,
-		     (off_t) BUS_BASE);
+                       MAP_SHARED, devMemFd, (off_t) BUS_BASE);
       memSBase = mmap((caddr_t)0, 0x100000000,
 		      PROT_READ | PROT_WRITE,
-		      MAP_SHARED, devMemFd,
-		      (off_t) BUS_BASE_BWX);
+                        MAP_SHARED, devMemFd, (off_t) BUS_BASE_BWX);
       
       if (memSBase == MAP_FAILED || memBase == MAP_FAILED)	{
 	FatalError("xf86MapVidMem: Could not mmap framebuffer (%s)\n",
@@ -534,6 +527,7 @@ readSparse8(pointer Base, register unsigned long Offset)
 {
     register unsigned long result, shift;
     register unsigned long msb;
+
     mem_barrier();
     Offset += (unsigned long)Base - (unsigned long)memBase;
     shift = (Offset & 0x3) << 3;
@@ -565,7 +559,8 @@ readSparse16(pointer Base, register unsigned long Offset)
 	sethae(msb);
 #endif
     }
-    result = *(vuip)((unsigned long)memSBase+(Offset<<5)+(1<<(5-2)));
+    result =
+        *(vuip) ((unsigned long) memSBase + (Offset << 5) + (1 << (5 - 2)));
     result >>= shift;
     return 0xffffUL & result;
 }
@@ -683,4 +678,3 @@ int  (*xf86ReadMmio16)(pointer Base, unsigned long Offset)
      = readDense16;
 int  (*xf86ReadMmio32)(pointer Base, unsigned long Offset)
      = readDense32;
-
