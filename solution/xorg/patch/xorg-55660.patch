diff --git a/hw/xfree86/x86emu/debug.c b/hw/xfree86/x86emu/debug.c
index 6dea9c7..1a8d1d6 100644
--- a/hw/xfree86/x86emu/debug.c
+++ b/hw/xfree86/x86emu/debug.c
@@ -54,7 +54,8 @@ static void     print_decoded_instruction (void);
 static int      parse_line (char *s, int *ps, int *n);
   
 /* should look something like debug's output. */
-void X86EMU_trace_regs (void)
+void
+X86EMU_trace_regs(void)
 {
 	if (DEBUG_TRACE()) {
 		x86emu_dump_regs();
@@ -66,14 +67,16 @@ void X86EMU_trace_regs (void)
     }
 }
 
-void X86EMU_trace_xregs (void)
+void
+X86EMU_trace_xregs(void)
 {
 	if (DEBUG_TRACE()) {
 		x86emu_dump_xregs();
     }
 }
 
-void x86emu_just_disassemble (void)
+void
+x86emu_just_disassemble(void)
 {
     /*
      * This routine called if the flag DEBUG_DISASSEMBLE is set kind
@@ -84,11 +87,13 @@ void x86emu_just_disassemble (void)
 	print_decoded_instruction();
 }
 
-static void disassemble_forward (u16 seg, u16 off, int n)
+static void
+disassemble_forward(u16 seg, u16 off, int n)
 {
 	X86EMU_sysEnv tregs;
 	int i;
 	u8 op1;
+
     /*
      * hack, hack, hack.  What we do is use the exact machinery set up
      * for execution, except that now there is an additional state
@@ -139,76 +144,91 @@ static void disassemble_forward (u16 seg, u16 off, int n)
     /* end major hack mode. */
 }
 
-void x86emu_check_ip_access (void)
+void
+x86emu_check_ip_access(void)
 {
     /* NULL as of now */
 }
 
-void x86emu_check_sp_access (void)
+void
+x86emu_check_sp_access(void)
 {
 }
 
-void x86emu_check_mem_access (u32 dummy)
+void
+x86emu_check_mem_access(u32 dummy)
 {
 	/*  check bounds, etc */
 }
 
-void x86emu_check_data_access (uint dummy1, uint dummy2)
+void
+x86emu_check_data_access(uint dummy1, uint dummy2)
 {
 	/*  check bounds, etc */
 }
 
-void x86emu_inc_decoded_inst_len (int x)
+void
+x86emu_inc_decoded_inst_len(int x)
 {
 	M.x86.enc_pos += x;
 }
 
-void x86emu_decode_printf (const char *x)
+void
+x86emu_decode_printf(const char *x)
 {
 	sprintf(M.x86.decoded_buf+M.x86.enc_str_pos,"%s",x);
 	M.x86.enc_str_pos += strlen(x);
 }
 
-void x86emu_decode_printf2 (const char *x, int y)
+void
+x86emu_decode_printf2(const char *x, int y)
 {
 	char temp[100];
+
 	snprintf(temp,sizeof(temp),x,y);
 	sprintf(M.x86.decoded_buf+M.x86.enc_str_pos,"%s",temp);
 	M.x86.enc_str_pos += strlen(temp);
 }
 
-void x86emu_end_instr (void)
+void
+x86emu_end_instr(void)
 {
 	M.x86.enc_str_pos = 0;
 	M.x86.enc_pos = 0;
 }
 
-static void print_encoded_bytes (u16 s, u16 o)
+static void
+print_encoded_bytes(u16 s, u16 o)
 {
     int i;
     char buf1[64];
+
 	for (i=0; i< M.x86.enc_pos; i++) {
 		sprintf(buf1+2*i,"%02x", fetch_data_byte_abs(s,o+i));
     }
 	printk("%-20s",buf1);
 }
 
-static void print_decoded_instruction (void)
+static void
+print_decoded_instruction(void)
 {
 	printk("%s", M.x86.decoded_buf);
 }
 
-void x86emu_print_int_vect (u16 iv)
+void
+x86emu_print_int_vect(u16 iv)
 {
 	u16 seg,off;
 
-	if (iv > 256) return;
+    if (iv > 256)
+        return;
 	seg   = fetch_data_word_abs(0,iv*4);
 	off   = fetch_data_word_abs(0,iv*4+2);
 	printk("%04x:%04x ", seg, off);
 }
 
-void X86EMU_dump_memory (u16 seg, u16 off, u32 amt)
+void
+X86EMU_dump_memory(u16 seg, u16 off, u32 amt)
 {
 	u32 start = off & 0xfffffff0;
 	u32 end  = (off+16) & 0xfffffff0;
@@ -228,7 +248,8 @@ void X86EMU_dump_memory (u16 seg, u16 off, u32 amt)
 	}
 }
 
-void x86emu_single_step (void)
+void
+x86emu_single_step(void)
 {
     char s[1024];
     int ps[10];
@@ -245,7 +266,8 @@ void x86emu_single_step (void)
 		if (DEBUG_BREAK()) {
 				if (M.x86.saved_ip != breakpoint) {
 						return;
-				} else {
+        }
+        else {
  	          M.x86.debug &= ~DEBUG_DECODE_NOPRINT_F;
 						M.x86.debug |= DEBUG_TRACE_F;
 						M.x86.debug &= ~DEBUG_BREAK_F;
@@ -269,12 +291,14 @@ void x86emu_single_step (void)
 									offset = ps[1];
 									X86EMU_dump_memory(segment,(u16)offset,16);
 									offset += 16;
-							} else if (ntok == 3) {
+            }
+            else if (ntok == 3) {
 									segment = ps[1];
 									offset = ps[2];
 									X86EMU_dump_memory(segment,(u16)offset,16);
 									offset += 16;
-							} else {
+            }
+            else {
 									segment = M.x86.saved_cs;
 									X86EMU_dump_memory(segment,(u16)offset,16);
 									offset += 16;
@@ -297,7 +321,8 @@ void x86emu_single_step (void)
                 breakpoint = ps[1];
 		if (noDecode) {
 		                M.x86.debug |= DEBUG_DECODE_NOPRINT_F;
-		} else {
+                }
+                else {
 		                M.x86.debug &= ~DEBUG_DECODE_NOPRINT_F;
 		}
 		M.x86.debug &= ~DEBUG_TRACE_F;
@@ -320,22 +345,26 @@ void x86emu_single_step (void)
     }
 }
 
-int X86EMU_trace_on(void)
+int
+X86EMU_trace_on(void)
 {
 	return M.x86.debug |= DEBUG_STEP_F | DEBUG_DECODE_F | DEBUG_TRACE_F;
 }
 
-int X86EMU_trace_off(void)
+int
+X86EMU_trace_off(void)
 {
 	return M.x86.debug &= ~(DEBUG_STEP_F | DEBUG_DECODE_F | DEBUG_TRACE_F);
 }
 
-static int parse_line (char *s, int *ps, int *n)
+static int
+parse_line(char *s, int *ps, int *n)
 {
     int cmd;
 
     *n = 0;
-    while(*s == ' ' || *s == '\t') s++;
+    while (*s == ' ' || *s == '\t')
+        s++;
     ps[*n] = *s;
     switch (*s) {
       case '\n':
@@ -347,12 +376,14 @@ static int parse_line (char *s, int *ps, int *n)
     }
 
 	while (1) {
-		while (*s != ' ' && *s != '\t' && *s != '\n')  s++;
+        while (*s != ' ' && *s != '\t' && *s != '\n')
+            s++;
 		
 		if (*s == '\n')
 			return cmd;
 		
-		while(*s == ' ' || *s == '\t') s++;
+        while (*s == ' ' || *s == '\t')
+            s++;
 		
 		sscanf(s,"%x",&ps[*n]);
 		*n += 1;
@@ -361,7 +392,8 @@ static int parse_line (char *s, int *ps, int *n)
 
 #endif /* DEBUG */
 
-void x86emu_dump_regs (void)
+void
+x86emu_dump_regs(void)
 {
 	printk("\tAX=%04x  ", M.x86.R_AX );
 	printk("BX=%04x  ", M.x86.R_BX );
@@ -376,26 +408,43 @@ void x86emu_dump_regs (void)
 	printk("SS=%04x  ", M.x86.R_SS );
 	printk("CS=%04x  ", M.x86.R_CS );
 	printk("IP=%04x   ", M.x86.R_IP );
-	if (ACCESS_FLAG(F_OF))    printk("OV ");     /* CHECKED... */
-	else                        printk("NV ");
-	if (ACCESS_FLAG(F_DF))    printk("DN ");
-	else                        printk("UP ");
-	if (ACCESS_FLAG(F_IF))    printk("EI ");
-	else                        printk("DI ");
-	if (ACCESS_FLAG(F_SF))    printk("NG ");
-	else                        printk("PL ");
-	if (ACCESS_FLAG(F_ZF))    printk("ZR ");
-	else                        printk("NZ ");
-	if (ACCESS_FLAG(F_AF))    printk("AC ");
-	else                        printk("NA ");
-	if (ACCESS_FLAG(F_PF))    printk("PE ");
-	else                        printk("PO ");
-	if (ACCESS_FLAG(F_CF))    printk("CY ");
-	else                        printk("NC ");
+    if (ACCESS_FLAG(F_OF))
+        printk("OV ");          /* CHECKED... */
+    else
+        printk("NV ");
+    if (ACCESS_FLAG(F_DF))
+        printk("DN ");
+    else
+        printk("UP ");
+    if (ACCESS_FLAG(F_IF))
+        printk("EI ");
+    else
+        printk("DI ");
+    if (ACCESS_FLAG(F_SF))
+        printk("NG ");
+    else
+        printk("PL ");
+    if (ACCESS_FLAG(F_ZF))
+        printk("ZR ");
+    else
+        printk("NZ ");
+    if (ACCESS_FLAG(F_AF))
+        printk("AC ");
+    else
+        printk("NA ");
+    if (ACCESS_FLAG(F_PF))
+        printk("PE ");
+    else
+        printk("PO ");
+    if (ACCESS_FLAG(F_CF))
+        printk("CY ");
+    else
+        printk("NC ");
 	printk("\n");
 }
 
-void x86emu_dump_xregs (void)
+void
+x86emu_dump_xregs(void)
 {
 	printk("\tEAX=%08x  ", M.x86.R_EAX );
 	printk("EBX=%08x  ", M.x86.R_EBX );
@@ -410,21 +459,37 @@ void x86emu_dump_xregs (void)
 	printk("SS=%04x  ", M.x86.R_SS );
 	printk("CS=%04x  ", M.x86.R_CS );
 	printk("EIP=%08x\n\t", M.x86.R_EIP );
-	if (ACCESS_FLAG(F_OF))    printk("OV ");     /* CHECKED... */
-	else                        printk("NV ");
-	if (ACCESS_FLAG(F_DF))    printk("DN ");
-	else                        printk("UP ");
-	if (ACCESS_FLAG(F_IF))    printk("EI ");
-	else                        printk("DI ");
-	if (ACCESS_FLAG(F_SF))    printk("NG ");
-	else                        printk("PL ");
-	if (ACCESS_FLAG(F_ZF))    printk("ZR ");
-	else                        printk("NZ ");
-	if (ACCESS_FLAG(F_AF))    printk("AC ");
-	else                        printk("NA ");
-	if (ACCESS_FLAG(F_PF))    printk("PE ");
-	else                        printk("PO ");
-	if (ACCESS_FLAG(F_CF))    printk("CY ");
-	else                        printk("NC ");
+    if (ACCESS_FLAG(F_OF))
+        printk("OV ");          /* CHECKED... */
+    else
+        printk("NV ");
+    if (ACCESS_FLAG(F_DF))
+        printk("DN ");
+    else
+        printk("UP ");
+    if (ACCESS_FLAG(F_IF))
+        printk("EI ");
+    else
+        printk("DI ");
+    if (ACCESS_FLAG(F_SF))
+        printk("NG ");
+    else
+        printk("PL ");
+    if (ACCESS_FLAG(F_ZF))
+        printk("ZR ");
+    else
+        printk("NZ ");
+    if (ACCESS_FLAG(F_AF))
+        printk("AC ");
+    else
+        printk("NA ");
+    if (ACCESS_FLAG(F_PF))
+        printk("PE ");
+    else
+        printk("PO ");
+    if (ACCESS_FLAG(F_CF))
+        printk("CY ");
+    else
+        printk("NC ");
 	printk("\n");
 }
