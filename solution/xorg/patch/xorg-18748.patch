diff --git a/hw/xgl/xgloutput.c b/hw/xgl/xgloutput.c
index 788dafb..7b7ffad 100644
--- a/hw/xgl/xgloutput.c
+++ b/hw/xgl/xgloutput.c
@@ -25,6 +25,9 @@
 
 #include "xgl.h"
 
+#include <mivalidate.h>
+#include <dixstruct.h>
+
 typedef struct _xglDepth {
     CARD8 depth;
     CARD8 bpp;
@@ -53,7 +56,8 @@ xglSetPixmapFormats (ScreenInfo *pScreenInfo)
     pScreenInfo->bitmapBitOrder	    = BITMAP_BIT_ORDER;
     pScreenInfo->numPixmapFormats   = 0;
 
-    for (i = 0; i < NUM_XGL_DEPTHS; i++) {
+    for (i = 0; i < NUM_XGL_DEPTHS; i++)
+    {
 	PixmapFormatRec *format;
 
 	format = &pScreenInfo->formats[pScreenInfo->numPixmapFormats++];
@@ -63,3 +67,149 @@ xglSetPixmapFormats (ScreenInfo *pScreenInfo)
 	format->scanlinePad  = BITMAP_SCANLINE_PAD;
     }
 }
+
+void
+xglSetRootClip (ScreenPtr pScreen,
+		Bool	  enable)
+{
+    WindowPtr	pWin = WindowTable[pScreen->myNum];
+    WindowPtr	pChild;
+    Bool	wasViewable;
+    Bool	anyMarked = FALSE;
+    RegionPtr	pOldClip = 0, bsExposed;
+
+#ifdef DO_SAVE_UNDERS
+    Bool	dosave = FALSE;
+#endif
+
+    WindowPtr   pLayerWin;
+    BoxRec	box;
+
+    if (!pWin)
+	return;
+
+    wasViewable = (Bool) (pWin->viewable);
+    if (wasViewable)
+    {
+	for (pChild = pWin->firstChild; pChild; pChild = pChild->nextSib)
+	{
+	    (void) (*pScreen->MarkOverlappedWindows) (pChild,
+						      pChild,
+						      &pLayerWin);
+	}
+
+	(*pScreen->MarkWindow) (pWin);
+	anyMarked = TRUE;
+
+	if (pWin->valdata)
+	{
+	    if (HasBorder (pWin))
+	    {
+		RegionPtr borderVisible;
+
+		borderVisible = REGION_CREATE (pScreen, NullBox, 1);
+		REGION_SUBTRACT (pScreen, borderVisible,
+				 &pWin->borderClip, &pWin->winSize);
+		pWin->valdata->before.borderVisible = borderVisible;
+	    }
+	    pWin->valdata->before.resized = TRUE;
+	}
+    }
+
+    if (enable)
+    {
+	box.x1 = 0;
+	box.y1 = 0;
+	box.x2 = pScreen->width;
+	box.y2 = pScreen->height;
+
+	pWin->drawable.width  = pScreen->width;
+	pWin->drawable.height = pScreen->height;
+
+	REGION_INIT (pScreen, &pWin->winSize, &box, 1);
+	REGION_INIT (pScreen, &pWin->borderSize, &box, 1);
+	REGION_RESET (pScreen, &pWin->borderClip, &box);
+	REGION_BREAK (pWin->drawable.pScreen, &pWin->clipList);
+    }
+    else
+    {
+	REGION_EMPTY (pScreen, &pWin->borderClip);
+	REGION_BREAK (pWin->drawable.pScreen, &pWin->clipList);
+    }
+
+    ResizeChildrenWinSize (pWin, 0, 0, 0, 0);
+
+    if (wasViewable)
+    {
+	if (pWin->backStorage)
+	{
+	    pOldClip = REGION_CREATE (pScreen, NullBox, 1);
+	    REGION_COPY (pScreen, pOldClip, &pWin->clipList);
+	}
+
+	if (pWin->firstChild)
+	{
+	    anyMarked |= (*pScreen->MarkOverlappedWindows) (pWin->firstChild,
+							    pWin->firstChild,
+							    (WindowPtr *) 0);
+	}
+	else
+	{
+	    (*pScreen->MarkWindow) (pWin);
+	    anyMarked = TRUE;
+	}
+
+#ifdef DO_SAVE_UNDERS
+	if (DO_SAVE_UNDERS (pWin))
+	    dosave = (*pScreen->ChangeSaveUnder) (pLayerWin, pLayerWin);
+#endif
+
+	if (anyMarked)
+	    (*pScreen->ValidateTree)(pWin, NullWindow, VTOther);
+    }
+
+    if (pWin->backStorage && ((pWin->backingStore == Always) || wasViewable))
+    {
+	if (!wasViewable)
+	    pOldClip = &pWin->clipList; /* a convenient empty region */
+
+	bsExposed = (*pScreen->TranslateBackingStore) (pWin, 0, 0, pOldClip,
+						       pWin->drawable.x,
+						       pWin->drawable.y);
+
+	if (wasViewable)
+	    REGION_DESTROY(pScreen, pOldClip);
+
+	if (bsExposed)
+	{
+	    RegionPtr valExposed = NullRegion;
+
+	    if (pWin->valdata)
+		valExposed = &pWin->valdata->after.exposed;
+
+	    (*pScreen->WindowExposures) (pWin, valExposed, bsExposed);
+
+	    if (valExposed)
+		REGION_EMPTY (pScreen, valExposed);
+
+	    REGION_DESTROY (pScreen, bsExposed);
+	}
+    }
+
+    if (wasViewable)
+    {
+	if (anyMarked)
+	    (*pScreen->HandleExposures) (pWin);
+
+#ifdef DO_SAVE_UNDERS
+	if (dosave)
+	    (*pScreen->PostChangeSaveUnder) (pLayerWin, pLayerWin);
+#endif
+
+	if (anyMarked && pScreen->PostValidateTree)
+	    (*pScreen->PostValidateTree) (pWin, NullWindow, VTOther);
+    }
+
+    if (pWin->realized)
+	WindowsRestructured ();
+}
