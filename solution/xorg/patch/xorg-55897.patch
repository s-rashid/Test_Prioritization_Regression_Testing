diff --git a/hw/xwin/winwin32rootlesswndproc.c b/hw/xwin/winwin32rootlesswndproc.c
index c60a76c..436f9ed 100644
--- a/hw/xwin/winwin32rootlesswndproc.c
+++ b/hw/xwin/winwin32rootlesswndproc.c
@@ -43,7 +43,6 @@
 #include "winmsg.h"
 #include "inputstr.h"
 
-
 /*
  * Constant defines
  */
@@ -51,14 +50,12 @@
 #define MOUSE_ACTIVATE_DEFAULT		TRUE
 #define RAISE_ON_CLICK_DEFAULT		FALSE
 
-
 /*
  * Local globals
  */
 
 static UINT_PTR		g_uipMousePollingTimerID = 0;
 
-
 /*
  * Local function
  */
@@ -66,7 +63,6 @@ static UINT_PTR		g_uipMousePollingTimerID = 0;
 DEFINE_ATOM_HELPER(AtmWindowsWmRaiseOnClick, WINDOWSWM_RAISE_ON_CLICK)
 DEFINE_ATOM_HELPER(AtmWindowsWMMouseActivate, WINDOWSWM_MOUSE_ACTIVATE)
 /* DEFINE_ATOM_HELPER(AtmWindowsWMClientWindow, WINDOWSWM_CLIENT_WINDOW) */
-
 /*
  * ConstrainSize - Taken from TWM sources - Respects hints for sizing
  */
@@ -78,45 +74,38 @@ ConstrainSize (WinXSizeHints hints, int *widthp, int *heightp)
   int baseWidth, baseHeight;
   int dwidth = *widthp, dheight = *heightp;
   
-  if (hints.flags & PMinSize)
-    {
+    if (hints.flags & PMinSize) {
       minWidth = hints.min_width;
       minHeight = hints.min_height;
     }
-  else if (hints.flags & PBaseSize)
-    {
+    else if (hints.flags & PBaseSize) {
       minWidth = hints.base_width;
       minHeight = hints.base_height;
     }
   else
     minWidth = minHeight = 1;
   
-  if (hints.flags & PBaseSize)
-    {
+    if (hints.flags & PBaseSize) {
       baseWidth = hints.base_width;
       baseHeight = hints.base_height;
     } 
-  else if (hints.flags & PMinSize)
-    {
+    else if (hints.flags & PMinSize) {
       baseWidth = hints.min_width;
       baseHeight = hints.min_height;
     }
   else
     baseWidth = baseHeight = 0;
 
-  if (hints.flags & PMaxSize)
-    {
+    if (hints.flags & PMaxSize) {
       maxWidth = hints.max_width;
       maxHeight = hints.max_height;
     }
-  else
-    {
+    else {
       maxWidth = MAXINT;
       maxHeight = MAXINT;
     }
 
-  if (hints.flags & PResizeInc)
-    {
+    if (hints.flags & PResizeInc) {
       xinc = hints.width_inc;
       yinc = hints.height_inc;
     }
@@ -161,29 +150,34 @@ ConstrainSize (WinXSizeHints hints, int *widthp, int *heightp)
    * 
    */
   
-  if (hints.flags & PAspect)
-    {
-      if (hints.min_aspect.x * dheight > hints.min_aspect.y * dwidth)
-        {
-	  delta = makemult(hints.min_aspect.x * dheight / hints.min_aspect.y - dwidth, xinc);
+    if (hints.flags & PAspect) {
+        if (hints.min_aspect.x * dheight > hints.min_aspect.y * dwidth) {
+            delta =
+                makemult(hints.min_aspect.x * dheight / hints.min_aspect.y -
+                         dwidth, xinc);
 	  if (dwidth + delta <= maxWidth)
 	    dwidth += delta;
-	  else
-            {
-	      delta = makemult(dheight - dwidth*hints.min_aspect.y/hints.min_aspect.x, yinc);
+            else {
+                delta =
+                    makemult(dheight -
+                             dwidth * hints.min_aspect.y / hints.min_aspect.x,
+                             yinc);
 	      if (dheight - delta >= minHeight)
 		dheight -= delta;
             }
         }
       
-      if (hints.max_aspect.x * dheight < hints.max_aspect.y * dwidth)
-        {
-	  delta = makemult(dwidth * hints.max_aspect.y / hints.max_aspect.x - dheight, yinc);
+        if (hints.max_aspect.x * dheight < hints.max_aspect.y * dwidth) {
+            delta =
+                makemult(dwidth * hints.max_aspect.y / hints.max_aspect.x -
+                         dheight, yinc);
 	  if (dheight + delta <= maxHeight)
 	    dheight += delta;
-	  else
-            {
-	      delta = makemult(dwidth - hints.max_aspect.x*dheight/hints.max_aspect.y, xinc);
+            else {
+                delta =
+                    makemult(dwidth -
+                             hints.max_aspect.x * dheight / hints.max_aspect.y,
+                             xinc);
 	      if (dwidth - delta >= minWidth)
 		dwidth -= delta;
             }
@@ -194,16 +188,14 @@ ConstrainSize (WinXSizeHints hints, int *widthp, int *heightp)
   *widthp = dwidth;
   *heightp = dheight;
 }
-#undef makemult
-
 
+#undef makemult
 
 /*
  * ValidateSizing - Ensures size request respects hints
  */
 static int
-ValidateSizing (HWND hwnd, WindowPtr pWin,
-		WPARAM wParam, LPARAM lParam)
+ValidateSizing(HWND hwnd, WindowPtr pWin, WPARAM wParam, LPARAM lParam)
 {
   WinXSizeHints sizeHints;
   RECT *rect;
@@ -211,24 +203,23 @@ ValidateSizing (HWND hwnd, WindowPtr pWin,
   POINT pt;
 
   /* Invalid input checking */
-  if (pWin==NULL || lParam==0)
-    {
+    if (pWin == NULL || lParam == 0) {
       ErrorF ("Invalid input checking\n");
       return FALSE;
     }
 
   /* No size hints, no checking */
-  if (!winMultiWindowGetWMNormalHints (pWin, &sizeHints))
-    {
+    if (!winMultiWindowGetWMNormalHints(pWin, &sizeHints)) {
       ErrorF ("No size hints, no checking\n");
       return FALSE;
     }
   
   /* Avoid divide-by-zero */
-  if (sizeHints.flags & PResizeInc)
-    {
-      if (sizeHints.width_inc == 0) sizeHints.width_inc = 1;
-      if (sizeHints.height_inc == 0) sizeHints.height_inc = 1;
+    if (sizeHints.flags & PResizeInc) {
+        if (sizeHints.width_inc == 0)
+            sizeHints.width_inc = 1;
+        if (sizeHints.height_inc == 0)
+            sizeHints.height_inc = 1;
     }
   
   rect = (RECT*)lParam;
@@ -280,7 +271,6 @@ ValidateSizing (HWND hwnd, WindowPtr pWin,
   return TRUE;
 }
 
-
 /*
  * IsRaiseOnClick
  */
@@ -291,12 +281,12 @@ IsRaiseOnClick (WindowPtr pWin)
 
   struct _Window	*pwin;
   struct _Property	*prop;  
+
   /* XXX We're getting inputInfo.poniter here, but this might be really wrong.
    * Which pointer's current window do we want? */
   WindowPtr		pRoot = GetCurrentRootWindow (inputInfo.pointer);
 
-  if (!pWin)
-    {
+    if (!pWin) {
       ErrorF ("IsRaiseOnClick - no prop use default value:%d\n",
 	      RAISE_ON_CLICK_DEFAULT);
       return RAISE_ON_CLICK_DEFAULT;
@@ -309,24 +299,19 @@ IsRaiseOnClick (WindowPtr pWin)
   else
     prop = NULL;
 
-  while (prop)
-    {
+    while (prop) {
       if (prop->propertyName == AtmWindowsWmRaiseOnClick ()
-	  && prop->type == XA_INTEGER
-	  && prop->format == 32)
-	{
+            && prop->type == XA_INTEGER && prop->format == 32) {
 	  return *(int*)prop->data;
 	}
       else
 	prop = prop->next;
     }
 
-  if (pWin != pRoot)
-    {
+    if (pWin != pRoot) {
       return IsRaiseOnClick (pRoot);
     }
-  else
-    {
+    else {
 #if CYGMULTIWINDOW_DEBUG
       winDebug ("IsRaiseOnClick - no prop use default value:%d\n",
 		RAISE_ON_CLICK_DEFAULT);
@@ -335,7 +320,6 @@ IsRaiseOnClick (WindowPtr pWin)
     }
 }
 
-
 /*
  * IsMouseActive
  */
@@ -346,12 +330,12 @@ IsMouseActive (WindowPtr pWin)
 
   struct _Window	*pwin;
   struct _Property	*prop;
+
   /* XXX We're getting inputInfo.poniter here, but this might be really wrong.
    * Which pointer's current window do we want? */
   WindowPtr		pRoot = GetCurrentRootWindow (inputInfo.pointer);
 
-  if (!pWin)
-    {
+    if (!pWin) {
       ErrorF ("IsMouseActive - pWin was NULL use default value:%d\n",
 	      MOUSE_ACTIVATE_DEFAULT);
       return MOUSE_ACTIVATE_DEFAULT;
@@ -364,24 +348,19 @@ IsMouseActive (WindowPtr pWin)
   else
     prop = NULL;
 
-  while (prop)
-    {
+    while (prop) {
       if (prop->propertyName == AtmWindowsWMMouseActivate ()
-	  && prop->type == XA_INTEGER
-	  && prop->format == 32)
-	{
+            && prop->type == XA_INTEGER && prop->format == 32) {
 	  return *(int*)prop->data;
 	}
       else
 	prop = prop->next;
     }
 
-  if (pWin != pRoot)
-    {
+    if (pWin != pRoot) {
       return IsMouseActive (pRoot);
     }
-  else
-    {
+    else {
 #if CYGMULTIWINDOW_DEBUG
       winDebug ("IsMouseActive - no prop use default value:%d\n",
 		MOUSE_ACTIVATE_DEFAULT);
@@ -390,14 +369,12 @@ IsMouseActive (WindowPtr pWin)
     }
 }
 
-
 /*
  * winMWExtWMWindowProc - Window procedure
  */
 
 LRESULT CALLBACK
-winMWExtWMWindowProc (HWND hwnd, UINT message, 
-			    WPARAM wParam, LPARAM lParam)
+winMWExtWMWindowProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
 {
   WindowPtr		pWin = NULL;
   win32RootlessWindowPtr pRLWinPriv = NULL;
@@ -415,13 +392,16 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
   Bool			fWMMsgInitialized = FALSE;
 
   /* Check if the Windows window property for our X window pointer is valid */
-  if ((pRLWinPriv = (win32RootlessWindowPtr)GetProp (hwnd, WIN_WINDOW_PROP)) != NULL)
-    {
+    if ((pRLWinPriv =
+         (win32RootlessWindowPtr) GetProp(hwnd, WIN_WINDOW_PROP)) != NULL) {
       pWin = pRLWinPriv->pFrame->win;
       pScreen				= pWin->drawable.pScreen;
-      if (pScreen) pScreenPriv		= winGetScreenPriv(pScreen);
-      if (pScreenPriv) pScreenInfo	= pScreenPriv->pScreenInfo;
-      if (pScreenPriv) hwndScreen	= pScreenPriv->hwndScreen;
+        if (pScreen)
+            pScreenPriv = winGetScreenPriv(pScreen);
+        if (pScreenPriv)
+            pScreenInfo = pScreenPriv->pScreenInfo;
+        if (pScreenPriv)
+            hwndScreen = pScreenPriv->hwndScreen;
 
       wmMsg.msg		= 0;
       wmMsg.hwndWindow	= hwnd;
@@ -434,7 +414,8 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
 
       fWMMsgInitialized = TRUE;
 #if CYGDEBUG
-      winDebugWin32Message("winMWExtWMWindowProc", hwnd, message, wParam, lParam);
+        winDebugWin32Message("winMWExtWMWindowProc", hwnd, message, wParam,
+                             lParam);
 
       winDebug ("\thWnd %08X\n", hwnd);
       winDebug ("\tpScreenPriv %08X\n", pScreenPriv);
@@ -445,8 +426,7 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
 #endif
     }
   /* Branch on message type */
-  switch (message)
-    {
+    switch (message) {
     case WM_CREATE:
 #if CYGMULTIWINDOW_DEBUG
       winDebug ("winMWExtWMWindowProc - WM_CREATE\n");
@@ -462,14 +442,11 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
       winDebug ("winMWExtWMWindowProc - WM_CLOSE %d\n", pRLWinPriv->fClose);
 #endif
       /* Tell window-manager to close window */
-      if (pRLWinPriv->fClose)
-	{
+        if (pRLWinPriv->fClose) {
 	  DestroyWindow (hwnd);
 	}
-      else
-	{
-	  if (winIsInternalWMRunning(pScreenInfo))
-	    {
+        else {
+            if (winIsInternalWMRunning(pScreenInfo)) {
 	      /* Tell our Window Manager thread to kill the window */
 	      wmMsg.msg = WM_WM_KILL;
 	      if (fWMMsgInitialized)
@@ -479,8 +456,7 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
 				WindowsWMControllerNotifyMask,
 				1,
 				WindowsWMCloseWindow,
-				pWin->drawable.id,
-				0, 0, 0, 0);
+                                  pWin->drawable.id, 0, 0, 0, 0);
 	}
       return 0;
 
@@ -536,8 +512,7 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
 			       ptMouse.y - pScreenInfo->dwYOffset);
 
       /* Are we tracking yet? */
-      if (!s_fTracking)
-	{
+        if (!s_fTracking) {
 	  TRACKMOUSEEVENT		tme;
 	  
 	  /* Setup data structure */
@@ -555,8 +530,7 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
 	}
       
       /* Kill the timer used to poll mouse events */
-      if (g_uipMousePollingTimerID != 0)
-	{
+        if (g_uipMousePollingTimerID != 0) {
 	  KillTimer (pScreenPriv->hwndScreen, WIN_POLLING_MOUSE_TIMER_ID);
 	  g_uipMousePollingTimerID = 0;
 	}
@@ -591,8 +565,7 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
       if (g_uipMousePollingTimerID == 0)
 	g_uipMousePollingTimerID = SetTimer (pScreenPriv->hwndScreen,
 					     WIN_POLLING_MOUSE_TIMER_ID,
-					     MOUSE_POLLING_INTERVAL,
-					     NULL);
+                                                MOUSE_POLLING_INTERVAL, NULL);
       break;
 
     case WM_MOUSELEAVE:
@@ -611,8 +584,7 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
       if (g_uipMousePollingTimerID == 0)
 	g_uipMousePollingTimerID = SetTimer (pScreenPriv->hwndScreen,
 					     WIN_POLLING_MOUSE_TIMER_ID,
-					     MOUSE_POLLING_INTERVAL,
-					     NULL);
+                                                MOUSE_POLLING_INTERVAL, NULL);
       return 0;
 
     case WM_LBUTTONDBLCLK:
@@ -677,12 +649,14 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
       if (pScreenPriv == NULL || pScreenInfo->fIgnoreInput)
 	break;
       SetCapture (hwnd);
-      return winMouseButtonsHandle (pScreen, ButtonPress, HIWORD(wParam) + 5, wParam);
+        return winMouseButtonsHandle(pScreen, ButtonPress, HIWORD(wParam) + 5,
+                                     wParam);
     case WM_XBUTTONUP:
       if (pScreenPriv == NULL || pScreenInfo->fIgnoreInput)
 	break;
       ReleaseCapture ();
-      return winMouseButtonsHandle (pScreen, ButtonRelease, HIWORD(wParam) + 5, wParam);
+        return winMouseButtonsHandle(pScreen, ButtonRelease, HIWORD(wParam) + 5,
+                                     wParam);
 
     case WM_MOUSEWHEEL:
 #if CYGMULTIWINDOW_DEBUG
@@ -699,8 +673,7 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
 #endif
 #if 1
       /* Check if this window needs to be made active when clicked */
-      if (winIsInternalWMRunning(pScreenInfo) && pWin->overrideRedirect)
-	{
+        if (winIsInternalWMRunning(pScreenInfo) && pWin->overrideRedirect) {
 #if CYGMULTIWINDOW_DEBUG
 	  winDebug ("winMWExtWMWindowProc - WM_MOUSEACTIVATE - "
 		    "MA_NOACTIVATE\n");
@@ -797,9 +770,7 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
 		   ps.rcPaint.right - ps.rcPaint.left,
 		   ps.rcPaint.bottom - ps.rcPaint.top,
 		   pRLWinPriv->hdcShadow,
-		   ps.rcPaint.left, ps.rcPaint.top,
-		   SRCCOPY))
-	{
+                    ps.rcPaint.left, ps.rcPaint.top, SRCCOPY)) {
 	  LPVOID lpMsgBuf;
 	  
 	  /* Display a fancy error message */
@@ -809,8 +780,7 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
 			 NULL,
 			 GetLastError (),
 			 MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
-			 (LPTSTR) &lpMsgBuf,
-			 0, NULL);
+                          (LPTSTR) & lpMsgBuf, 0, NULL);
 
 	  ErrorF ("winMWExtWMWindowProc - BitBlt failed: %s\n",
 		  (LPSTR)lpMsgBuf);
@@ -825,10 +795,8 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
 #if CYGMULTIWINDOW_DEBUG
       winDebug ("winMWExtWMWindowProc - WM_ACTIVATE\n");
 #endif
-      if (LOWORD(wParam) != WA_INACTIVE)
-	{
-	  if (winIsInternalWMRunning(pScreenInfo))
-	    {
+        if (LOWORD(wParam) != WA_INACTIVE) {
+            if (winIsInternalWMRunning(pScreenInfo)) {
 #if 0
 	      /* Raise the window to the top in Z order */
 	      wmMsg.msg = WM_WM_RAISE;
@@ -845,36 +813,34 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
 				WindowsWMControllerNotifyMask,
 				1,
 				WindowsWMActivateWindow,
-				pWin->drawable.id,
-				0, 0,
-				0, 0);
+                                  pWin->drawable.id, 0, 0, 0, 0);
 	}
       return 0;
 
 #if 1
     case WM_WINDOWPOSCHANGING:
       pWinPos = (LPWINDOWPOS)lParam;
-      if (!(pWinPos->flags & SWP_NOZORDER))
-	{
-	  if (pRLWinPriv->fRestackingNow || pScreenPriv->fRestacking)
-	    {
+        if (!(pWinPos->flags & SWP_NOZORDER)) {
+            if (pRLWinPriv->fRestackingNow || pScreenPriv->fRestacking) {
 #if CYGMULTIWINDOW_DEBUG
-	      winDebug ("Win %08x is now restacking.\n", (unsigned int)pRLWinPriv);
+                winDebug("Win %08x is now restacking.\n",
+                         (unsigned int) pRLWinPriv);
 #endif
 	      break;
 	    }
 
-	  if (winIsInternalWMRunning(pScreenInfo) || IsRaiseOnClick (pWin))
-	    {
+            if (winIsInternalWMRunning(pScreenInfo) || IsRaiseOnClick(pWin)) {
 #if CYGMULTIWINDOW_DEBUG
-	      winDebug ("Win %08x has WINDOWSWM_RAISE_ON_CLICK.\n", (unsigned int)pRLWinPriv);
+                winDebug("Win %08x has WINDOWSWM_RAISE_ON_CLICK.\n",
+                         (unsigned int) pRLWinPriv);
 #endif
 	      break;
 	    }
 
 #if CYGMULTIWINDOW_DEBUG
 	  winDebug ("Win %08x forbid to change z order (%08x).\n",
-		    (unsigned int)pRLWinPriv, (unsigned int)pWinPos->hwndInsertAfter);
+                     (unsigned int) pRLWinPriv,
+                     (unsigned int) pWinPos->hwndInsertAfter);
 #endif
 	  pWinPos->flags |= SWP_NOZORDER;
 	}
@@ -886,7 +852,8 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
       winDebug ("winMWExtWMWindowProc - WM_MOVE - %d ms\n",
 		(unsigned int)GetTickCount ());
 #endif
-      if (g_fNoConfigureWindow) break;
+        if (g_fNoConfigureWindow)
+            break;
 #if 0
       /* Bail if Windows window is not actually moving */
       if (pRLWinPriv->dwX == (short) LOWORD(lParam)
@@ -896,6 +863,7 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
       /* Also bail if we're maximizing, we'll do the whole thing in WM_SIZE */
       {
 	WINDOWPLACEMENT windPlace;
+
 	windPlace.length = sizeof (WINDOWPLACEMENT);
 
 	/* Get current window placement */
@@ -909,15 +877,14 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
 #endif
 
 #if CYGMULTIWINDOW_DEBUG
-      winDebug ("\t(%d, %d)\n", (short) LOWORD(lParam), (short) HIWORD(lParam));
+        winDebug("\t(%d, %d)\n", (short) LOWORD(lParam),
+                 (short) HIWORD(lParam));
 #endif
-      if (!pRLWinPriv->fMovingOrSizing)
-	{
+        if (!pRLWinPriv->fMovingOrSizing) {
 	  if (winIsInternalWMRunning(pScreenInfo))
 	    winAdjustXWindow (pWin, hwnd);
 
-	  winMWExtWMMoveXWindow (pWin,
-				 (LOWORD(lParam) - wBorderWidth (pWin)
+            winMWExtWMMoveXWindow(pWin, (LOWORD(lParam) - wBorderWidth(pWin)
 				  - GetSystemMetrics (SM_XVIRTUALSCREEN)),
 				 (HIWORD(lParam) - wBorderWidth (pWin)
 				  - GetSystemMetrics (SM_YVIRTUALSCREEN)));
@@ -938,8 +905,7 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
 
       winMWExtWMUpdateWindowDecoration (pRLWinPriv, pScreenInfo);
 
-      if (winIsInternalWMRunning(pScreenInfo))
-	{
+        if (winIsInternalWMRunning(pScreenInfo)) {
 #if CYGMULTIWINDOW_DEBUG || TRUE
 	  winDebug ("\tMapWindow\n");
 #endif
@@ -978,10 +944,12 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
 	(pWinPos->flags & SWP_NOACTIVATE)?"SWP_NOACTIVATE ":"",
 	(pWinPos->flags & SWP_NOCOPYBITS)?"SWP_NOCOPYBITS ":"",
 	(pWinPos->flags & SWP_NOMOVE)?"SWP_NOMOVE ":"",
-	(pWinPos->flags & SWP_NOOWNERZORDER)?"SWP_NOOWNERZORDER ":"",
+                 (pWinPos->
+                  flags & SWP_NOOWNERZORDER) ? "SWP_NOOWNERZORDER " : "",
 	(pWinPos->flags & SWP_NOSIZE)?"SWP_NOSIZE ":"",
 	(pWinPos->flags & SWP_NOREDRAW)?"SWP_NOREDRAW ":"",
-	(pWinPos->flags & SWP_NOSENDCHANGING)?"SWP_NOSENDCHANGING ":"",
+                 (pWinPos->
+                  flags & SWP_NOSENDCHANGING) ? "SWP_NOSENDCHANGING " : "",
 	(pWinPos->flags & SWP_NOZORDER)?"SWP_NOZORDER ":"",
 	(pWinPos->flags & SWP_SHOWWINDOW)?"SWP_SHOWWINDOW ":"");
 	winDebug("\tno_configure: %s\n", (g_fNoConfigureWindow?"Yes":"No"));
@@ -989,21 +957,20 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
             pWinPos->x, pWinPos->y, pWinPos->cx, pWinPos->cy);
 
 #endif
-	if (pWinPos->flags & SWP_HIDEWINDOW) break;
+        if (pWinPos->flags & SWP_HIDEWINDOW)
+            break;
 
 	/* Reorder if window z order was changed */
 	if ((pScreenPriv != NULL)
 	    && !(pWinPos->flags & SWP_NOZORDER)
 	    && !(pWinPos->flags & SWP_SHOWWINDOW)
-	    && winIsInternalWMRunning(pScreenInfo))
-	  {
+            && winIsInternalWMRunning(pScreenInfo)) {
 #if CYGMULTIWINDOW_DEBUG
 	    winDebug ("\twindow z order was changed\n");
 #endif
 	    if (pWinPos->hwndInsertAfter == HWND_TOP
 		||pWinPos->hwndInsertAfter == HWND_TOPMOST
-		||pWinPos->hwndInsertAfter == HWND_NOTOPMOST)
-	      {
+                || pWinPos->hwndInsertAfter == HWND_NOTOPMOST) {
 #if CYGMULTIWINDOW_DEBUG
 		winDebug ("\traise to top\n");
 #endif
@@ -1013,11 +980,9 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
 		  winSendMessageToWM (pScreenPriv->pWMInfo, &wmMsg);
 	      }
 #if 1
-	    else if (pWinPos->hwndInsertAfter == HWND_BOTTOM)
-	      {
+            else if (pWinPos->hwndInsertAfter == HWND_BOTTOM) {
 	      }
-	    else
-	      {
+            else {
 		/* Check if this window is top of X windows. */
 		HWND hWndAbove = NULL;
 		DWORD dwCurrentProcessID = GetCurrentProcessId ();
@@ -1025,8 +990,7 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
 
 		for (hWndAbove = pWinPos->hwndInsertAfter;
 		     hWndAbove != NULL;
-		     hWndAbove = GetNextWindow (hWndAbove, GW_HWNDPREV))
-		  {
+                     hWndAbove = GetNextWindow(hWndAbove, GW_HWNDPREV)) {
 		    /* Ignore other XWin process's window */
 		    GetWindowThreadProcessId (hWndAbove, &dwWindowProcessID);
 
@@ -1038,8 +1002,7 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
 		  }
 		/* If this is top of X windows in Windows stack,
 		   raise it in X stack. */
-		if (hWndAbove == NULL)
-		  {
+                if (hWndAbove == NULL) {
 #if CYGMULTIWINDOW_DEBUG
 		    winDebug ("\traise to top\n");
 #endif
@@ -1057,8 +1020,7 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
 #if CYGMULTIWINDOW_DEBUG
 	    winDebug ("\tIconic -> MINIMIZED\n");
 #endif
-	    if (winIsInternalWMRunning(pScreenInfo))
-	      {
+                if (winIsInternalWMRunning(pScreenInfo)) {
 	      /* Raise the window to the top in Z order */
 		wmMsg.msg = WM_WM_LOWER;
 		if (fWMMsgInitialized)
@@ -1068,9 +1030,9 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
 				  WindowsWMControllerNotifyMask,
 				  1,
 				  WindowsWMMinimizeWindow,
-				  pWin->drawable.id,
-				  0, 0, 0, 0);
-	  } else if (IsZoomed(hwnd)){
+                                      pWin->drawable.id, 0, 0, 0, 0);
+            }
+            else if (IsZoomed(hwnd)) {
 #if CYGMULTIWINDOW_DEBUG
 	    winDebug ("\tZoomed -> MAXIMIZED\n");
 #endif
@@ -1078,9 +1040,9 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
 				  WindowsWMControllerNotifyMask,
 				  1,
 				  WindowsWMMaximizeWindow,
-				  pWin->drawable.id,
-				  0, 0, 0, 0);
-	  } else {
+                                      pWin->drawable.id, 0, 0, 0, 0);
+            }
+            else {
 #if CYGMULTIWINDOW_DEBUG
 	    winDebug ("\tnone -> RESTORED\n");
 #endif
@@ -1088,8 +1050,7 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
 				  WindowsWMControllerNotifyMask,
 				  1,
 				  WindowsWMRestoreWindow,
-				  pWin->drawable.id,
-				  0, 0, 0, 0);
+                                      pWin->drawable.id, 0, 0, 0, 0);
 	  }
 	}
 	if (!g_fNoConfigureWindow ) {
@@ -1108,15 +1069,22 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
                 winAdjustXWindow (pWin, hwnd);
 
 	      winMWExtWMMoveResizeXWindow (pWin,
-					   rcClient.left - wBorderWidth (pWin)
-					   - GetSystemMetrics (SM_XVIRTUALSCREEN),
-					   rcClient.top - wBorderWidth (pWin)
-					   - GetSystemMetrics (SM_YVIRTUALSCREEN),
-					   rcClient.right - rcClient.left
-					   - wBorderWidth (pWin)*2,
-					   rcClient.bottom - rcClient.top
-					   - wBorderWidth (pWin)*2);
-	    } else if (!(pWinPos->flags & SWP_NOMOVE)) {
+                                                rcClient.left -
+                                                wBorderWidth(pWin)
+                                                -
+                                                GetSystemMetrics
+                                                (SM_XVIRTUALSCREEN),
+                                                rcClient.top -
+                                                wBorderWidth(pWin)
+                                                -
+                                                GetSystemMetrics
+                                                (SM_YVIRTUALSCREEN),
+                                                rcClient.right - rcClient.left -
+                                                wBorderWidth(pWin) * 2,
+                                                rcClient.bottom - rcClient.top -
+                                                wBorderWidth(pWin) * 2);
+                }
+                else if (!(pWinPos->flags & SWP_NOMOVE)) {
 #if CYGMULTIWINDOW_DEBUG
 	      winDebug ("\tmove\n");
 #endif
@@ -1124,15 +1092,22 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
                 winAdjustXWindow (pWin, hwnd);
 
 	      winMWExtWMMoveResizeXWindow (pWin,
-					   rcClient.left - wBorderWidth (pWin)
-					   - GetSystemMetrics (SM_XVIRTUALSCREEN),
-					   rcClient.top - wBorderWidth (pWin)
-					   - GetSystemMetrics (SM_YVIRTUALSCREEN),
-					   rcClient.right - rcClient.left
-					   - wBorderWidth (pWin)*2,
-					   rcClient.bottom - rcClient.top
-					   - wBorderWidth (pWin)*2);
-	    } else if (!(pWinPos->flags & SWP_NOMOVE)) {
+                                                rcClient.left -
+                                                wBorderWidth(pWin)
+                                                -
+                                                GetSystemMetrics
+                                                (SM_XVIRTUALSCREEN),
+                                                rcClient.top -
+                                                wBorderWidth(pWin)
+                                                -
+                                                GetSystemMetrics
+                                                (SM_YVIRTUALSCREEN),
+                                                rcClient.right - rcClient.left -
+                                                wBorderWidth(pWin) * 2,
+                                                rcClient.bottom - rcClient.top -
+                                                wBorderWidth(pWin) * 2);
+                }
+                else if (!(pWinPos->flags & SWP_NOMOVE)) {
 #if CYGMULTIWINDOW_DEBUG
 	      winDebug ("\tmove\n");
 #endif
@@ -1143,8 +1118,10 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
 				     rcClient.left - wBorderWidth (pWin)
 				     - GetSystemMetrics (SM_XVIRTUALSCREEN),
 				     rcClient.top - wBorderWidth (pWin)
-				     - GetSystemMetrics (SM_YVIRTUALSCREEN));
-	    } else if (!(pWinPos->flags & SWP_NOSIZE)) {
+                                          -
+                                          GetSystemMetrics(SM_YVIRTUALSCREEN));
+                }
+                else if (!(pWinPos->flags & SWP_NOSIZE)) {
 #if CYGMULTIWINDOW_DEBUG
 	      winDebug ("\tresize\n");
 #endif
@@ -1173,19 +1150,19 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
 		(unsigned int)GetTickCount ());
 #endif
 #if CYGMULTIWINDOW_DEBUG
-      winDebug ("\t(%d, %d) %d\n", (short) LOWORD(lParam), (short) HIWORD(lParam), g_fNoConfigureWindow);
+        winDebug("\t(%d, %d) %d\n", (short) LOWORD(lParam),
+                 (short) HIWORD(lParam), g_fNoConfigureWindow);
 #endif
-      if (g_fNoConfigureWindow) break;
+        if (g_fNoConfigureWindow)
+            break;
 
       /* Branch on type of resizing occurring */
-      switch (wParam)
-	{
+        switch (wParam) {
 	case SIZE_MINIMIZED:
 #if CYGMULTIWINDOW_DEBUG
 	  winDebug ("\tSIZE_MINIMIZED\n");
 #endif
-	  if (winIsInternalWMRunning(pScreenInfo))
-	    {
+            if (winIsInternalWMRunning(pScreenInfo)) {
 	      /* Raise the window to the top in Z order */
 	      wmMsg.msg = WM_WM_LOWER;
 	      if (fWMMsgInitialized)
@@ -1196,8 +1173,7 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
 				1,
 				WindowsWMMinimizeWindow,
 				pWin->drawable.id,
-				0, 0,
-				LOWORD(lParam), HIWORD(lParam));
+                                  0, 0, LOWORD(lParam), HIWORD(lParam));
 	  break;
 
 	case SIZE_RESTORED:
@@ -1209,8 +1185,7 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
 				1,
 				WindowsWMRestoreWindow,
 				pWin->drawable.id,
-				0, 0,
-				LOWORD(lParam), HIWORD(lParam));
+                                  0, 0, LOWORD(lParam), HIWORD(lParam));
 	  break;
 
 	case SIZE_MAXIMIZED:
@@ -1222,19 +1197,16 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
 				1,
 				WindowsWMMaximizeWindow,
 				pWin->drawable.id,
-				0, 0,
-				LOWORD(lParam), HIWORD(lParam));
+                                  0, 0, LOWORD(lParam), HIWORD(lParam));
 	  break;
 	}
 
       /* Perform the resize and notify the X client */
-      if (!pRLWinPriv->fMovingOrSizing)
-	{
+        if (!pRLWinPriv->fMovingOrSizing) {
 	  if (winIsInternalWMRunning(pScreenInfo))
             winAdjustXWindow (pWin, hwnd);
 
-	  winMWExtWMResizeXWindow (pWin,
-				   (short) LOWORD(lParam)
+            winMWExtWMResizeXWindow(pWin, (short) LOWORD(lParam)
 				   - wBorderWidth (pWin)*2,
 				   (short) HIWORD(lParam)
 				   - wBorderWidth (pWin)*2);
@@ -1246,38 +1218,30 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
       winDebug ("winMWExtWMWindowProc - WM_ACTIVATEAPP - %d ms\n",
 		(unsigned int)GetTickCount ());
 #endif
-      if (wParam)
-	{
-	  if (winIsInternalWMRunning(pScreenInfo))
-	    {
+        if (wParam) {
+            if (winIsInternalWMRunning(pScreenInfo)) {
 	    }
-	  else
-	    {
+            else {
 	    }
 	  winWindowsWMSendEvent(WindowsWMActivationNotify,
 				WindowsWMActivationNotifyMask,
 				1,
 				WindowsWMIsActive,
-				pWin->drawable.id,
-				0, 0,
-				0, 0);
+                                  pWin->drawable.id, 0, 0, 0, 0);
 	}
-      else
-	{
+        else {
 	  winWindowsWMSendEvent(WindowsWMActivationNotify,
 				WindowsWMActivationNotifyMask,
 				1,
 				WindowsWMIsInactive,
-				pWin->drawable.id,
-				0, 0,
-				0, 0);
+                                  pWin->drawable.id, 0, 0, 0, 0);
 	}
       break;
 
     case WM_SETCURSOR:
-      if (LOWORD(lParam) == HTCLIENT)
-	{
-	  if (!g_fSoftwareCursor) SetCursor (pScreenPriv->cursor.handle);
+        if (LOWORD(lParam) == HTCLIENT) {
+            if (!g_fSoftwareCursor)
+                SetCursor(pScreenPriv->cursor.handle);
 	  return TRUE;
 	}
       break;
@@ -1304,8 +1268,7 @@ winMWExtWMWindowProc (HWND hwnd, UINT message,
       if (winIsInternalWMRunning(pScreenInfo))
         winAdjustXWindow (pWin, hwnd); 
 
-      winMWExtWMMoveResizeXWindow (pWin,
-				   rcClient.left - wBorderWidth (pWin)
+        winMWExtWMMoveResizeXWindow(pWin, rcClient.left - wBorderWidth(pWin)
 				   - GetSystemMetrics (SM_XVIRTUALSCREEN),
 				   rcClient.top - wBorderWidth (pWin)
 				   - GetSystemMetrics (SM_YVIRTUALSCREEN),
