diff --git a/xkb/xkbActions.c b/xkb/xkbActions.c
index da0bdea..c473df1 100644
--- a/xkb/xkbActions.c
+++ b/xkb/xkbActions.c
@@ -48,33 +48,35 @@ THE USE OR PERFORMANCE OF THIS SOFTWARE.
 DevPrivateKeyRec xkbDevicePrivateKeyRec;
 
 void XkbFakeDeviceButton(DeviceIntPtr dev,Bool press,int button);
-static void XkbFakePointerMotion(DeviceIntPtr dev, unsigned flags,int x,int y);
+static void XkbFakePointerMotion(DeviceIntPtr dev, unsigned flags, int x,
+                                 int y);
 
 void
-xkbUnwrapProc(DeviceIntPtr device, DeviceHandleProc proc,
-                   pointer data)
+xkbUnwrapProc(DeviceIntPtr device, DeviceHandleProc proc, pointer data)
 {
     xkbDeviceInfoPtr xkbPrivPtr = XKBDEVICEINFO(device);
     ProcessInputProc backupproc;
+
     if(xkbPrivPtr->unwrapProc)
 	xkbPrivPtr->unwrapProc = NULL;
 
     UNWRAP_PROCESS_INPUT_PROC(device,xkbPrivPtr, backupproc);
     proc(device,data);
-    COND_WRAP_PROCESS_INPUT_PROC(device,xkbPrivPtr,
-				 backupproc,xkbUnwrapProc);
+    COND_WRAP_PROCESS_INPUT_PROC(device, xkbPrivPtr, backupproc, xkbUnwrapProc);
 }
 
 Bool
 XkbInitPrivates(void)
 {
-    return dixRegisterPrivateKey(&xkbDevicePrivateKeyRec, PRIVATE_DEVICE, sizeof(xkbDeviceInfoRec));
+    return dixRegisterPrivateKey(&xkbDevicePrivateKeyRec, PRIVATE_DEVICE,
+                                 sizeof(xkbDeviceInfoRec));
 }
 
 void
 XkbSetExtension(DeviceIntPtr device, ProcessInputProc proc)
 {
     xkbDeviceInfoPtr xkbPrivPtr = XKBDEVICEINFO(device);
+
     WRAP_PROCESS_INPUT_PROC(device, xkbPrivPtr, proc, xkbUnwrapProc);
 }
 
@@ -85,7 +87,8 @@ _FixUpAction(XkbDescPtr xkb,XkbAction *act)
 {
 static XkbAction	fake;
 
-    if (XkbIsPtrAction(act)&&(!(xkb->ctrls->enabled_ctrls&XkbMouseKeysMask))) {
+    if (XkbIsPtrAction(act) &&
+        (!(xkb->ctrls->enabled_ctrls & XkbMouseKeysMask))) {
 	fake.type = XkbSA_NoAction;
 	return fake;
     }
@@ -95,14 +98,16 @@ static XkbAction	fake;
 	    fake.mods.mask = act->mods.mask;
 	    if (XkbAX_NeedOption(xkb->ctrls,XkbAX_LatchToLockMask))
 		 fake.mods.flags= XkbSA_ClearLocks|XkbSA_LatchToLock;
-	    else fake.mods.flags= XkbSA_ClearLocks;
+            else
+                fake.mods.flags = XkbSA_ClearLocks;
 	    return fake;
 	}
 	if (act->any.type==XkbSA_SetGroup) {
 	    fake.group.type = XkbSA_LatchGroup;
 	    if (XkbAX_NeedOption(xkb->ctrls,XkbAX_LatchToLockMask))
 		 fake.group.flags= XkbSA_ClearLocks|XkbSA_LatchToLock;
-	    else fake.group.flags= XkbSA_ClearLocks;
+            else
+                fake.group.flags = XkbSA_ClearLocks;
 	    XkbSASetGroup(&fake.group,XkbSAGroup(&act->group));
 	    return fake;
 	}
@@ -136,6 +141,7 @@ static XkbAction 	fake;
     if (type->map!=NULL) {
 	register unsigned		i,mods;
 	register XkbKTMapEntryPtr	entry;
+
 	mods= xkbState->mods&type->mods.mask;
 	for (entry= type->map,i=0;i<type->map_count;i++,entry++) {
 	    if ((entry->active)&&(entry->mods.mask==mods)) {
@@ -154,6 +160,7 @@ static XkbAction
 XkbGetButtonAction(DeviceIntPtr kbd,DeviceIntPtr dev,int button)
 {
 XkbAction fake;
+
    if ((dev->button)&&(dev->button->xkb_acts)) {
 	if (dev->button->xkb_acts[button-1].any.type!=XkbSA_NoAction) {
 	    fake= _FixUpAction(kbd->key->xkbInfo->desc,
@@ -172,9 +179,7 @@ XkbAction fake;
 
 static int
 _XkbFilterSetState(	XkbSrvInfoPtr	xkbi,
-			XkbFilterPtr	filter,
-			unsigned	keycode,
-			XkbAction *pAction)
+                   XkbFilterPtr filter, unsigned keycode, XkbAction *pAction)
 {
     if (filter->keycode==0) {		/* initial press */
 	filter->keycode = keycode;
@@ -222,9 +227,7 @@ _XkbFilterSetState(	XkbSrvInfoPtr	xkbi,
 
 static int
 _XkbFilterLatchState(	XkbSrvInfoPtr	xkbi,
-			XkbFilterPtr	filter,
-			unsigned	keycode,
-			XkbAction *	pAction)
+                     XkbFilterPtr filter, unsigned keycode, XkbAction *pAction)
 {
 
     if (filter->keycode==0) {			/* initial press */
@@ -250,16 +253,20 @@ _XkbFilterLatchState(	XkbSrvInfoPtr	xkbi,
 	    filter->active = 0;
 	    if (filter->upAction.type==XkbSA_LatchMods)
 		 xkbi->state.latched_mods&= ~filter->upAction.mods.mask;
-	    else xkbi->state.latched_group-=XkbSAGroup(&filter->upAction.group);
+            else
+                xkbi->state.latched_group -=
+                    XkbSAGroup(&filter->upAction.group);
 	}
 	else if ((pAction->type==filter->upAction.type)&&
 		 (pAction->mods.flags==filter->upAction.mods.flags)&&
 		 (pAction->mods.mask==filter->upAction.mods.mask)) {
 	    if (filter->upAction.mods.flags&XkbSA_LatchToLock) {
 		XkbControlsPtr ctrls= xkbi->desc->ctrls;
+
 		if (filter->upAction.type==XkbSA_LatchMods)
 		     pAction->mods.type= XkbSA_LockMods;
-		else pAction->group.type= XkbSA_LockGroup;
+                else
+                    pAction->group.type = XkbSA_LockGroup;
 		if (XkbAX_NeedFeedback(ctrls,XkbAX_StickyKeysFBMask)&&
 		    		(ctrls->enabled_ctrls&XkbStickyKeysMask)) {
 		    XkbDDXAccessXBeep(xkbi->device,_BEEP_STICKY_LOCK,
@@ -269,11 +276,14 @@ _XkbFilterLatchState(	XkbSrvInfoPtr	xkbi,
 	    else {
 		if (filter->upAction.type==XkbSA_LatchMods)
 		     pAction->mods.type= XkbSA_SetMods;
-		else pAction->group.type= XkbSA_SetGroup;
+                else
+                    pAction->group.type = XkbSA_SetGroup;
 	    }
 	    if (filter->upAction.type==XkbSA_LatchMods)
 		 xkbi->state.latched_mods&= ~filter->upAction.mods.mask;
-	    else xkbi->state.latched_group-=XkbSAGroup(&filter->upAction.group);
+            else
+                xkbi->state.latched_group -=
+                    XkbSAGroup(&filter->upAction.group);
 	    filter->active = 0;
 	}
     }
@@ -287,7 +297,8 @@ _XkbFilterLatchState(	XkbSrvInfoPtr	xkbi,
 	if (filter->upAction.type==XkbSA_LatchMods) {
 	    xkbi->clearMods = filter->upAction.mods.mask;
 	    if ((filter->upAction.mods.flags&XkbSA_ClearLocks)&&
-		 (xkbi->clearMods&xkbi->state.locked_mods)==xkbi->clearMods) {
+                (xkbi->clearMods & xkbi->state.locked_mods) ==
+                xkbi->clearMods) {
 		xkbi->state.locked_mods&= ~xkbi->clearMods;
 		filter->priv= NO_LATCH;
 		beepType= _BEEP_STICKY_UNLOCK;
@@ -313,7 +324,8 @@ _XkbFilterLatchState(	XkbSrvInfoPtr	xkbi,
 		xkbi->state.latched_mods |= filter->upAction.mods.mask;
 	    }
 	    else {
-		xkbi->state.latched_group+= XkbSAGroup(&filter->upAction.group);
+                xkbi->state.latched_group +=
+                    XkbSAGroup(&filter->upAction.group);
 	    }
 	    if (needBeep && (beepType==_BEEP_NONE))
 		beepType= _BEEP_STICKY_LATCH;
@@ -330,14 +342,13 @@ _XkbFilterLatchState(	XkbSrvInfoPtr	xkbi,
 
 static int
 _XkbFilterLockState(	XkbSrvInfoPtr	xkbi,
-			XkbFilterPtr	filter,
-			unsigned	keycode,
-			XkbAction *	pAction)
+                    XkbFilterPtr filter, unsigned keycode, XkbAction *pAction)
 {
     if (pAction&&(pAction->type==XkbSA_LockGroup)) {
 	if (pAction->group.flags&XkbSA_GroupAbsolute)
 	     xkbi->state.locked_group= XkbSAGroup(&pAction->group);
-	else xkbi->state.locked_group+= XkbSAGroup(&pAction->group);
+        else
+            xkbi->state.locked_group += XkbSAGroup(&pAction->group);
 	return 1;
     }
     if (filter->keycode==0) {		/* initial press */
@@ -365,9 +376,7 @@ _XkbFilterLockState(	XkbSrvInfoPtr	xkbi,
 
 static int
 _XkbFilterISOLock(	XkbSrvInfoPtr	xkbi,
-			XkbFilterPtr	filter,
-			unsigned	keycode,
-			XkbAction *	pAction)
+                  XkbFilterPtr filter, unsigned keycode, XkbAction *pAction)
 {
 
     if (filter->keycode==0) {		/* initial press */
@@ -419,13 +428,15 @@ _XkbFilterISOLock(	XkbSrvInfoPtr	xkbi,
 	CARD8	flags= filter->upAction.iso.flags;
 
 	switch (pAction->type) {
-	    case XkbSA_SetMods: case XkbSA_LatchMods:
+        case XkbSA_SetMods:
+        case XkbSA_LatchMods:
 		if (!(flags&XkbSA_ISONoAffectMods)) {
 		    pAction->type= XkbSA_LockMods;
 		    filter->priv= NO_ISO_LOCK;
 		}
 		break;
-	    case XkbSA_SetGroup: case XkbSA_LatchGroup:
+        case XkbSA_SetGroup:
+        case XkbSA_LatchGroup:
 		if (!(flags&XkbSA_ISONoAffectGroup)) {
 		    pAction->type= XkbSA_LockGroup;
 		    filter->priv= NO_ISO_LOCK;
@@ -448,7 +459,6 @@ _XkbFilterISOLock(	XkbSrvInfoPtr	xkbi,
     return 1;
 }
 
-
 static CARD32
 _XkbPtrAccelExpire(OsTimerPtr timer,CARD32 now,pointer arg)
 {
@@ -462,15 +472,18 @@ int		dx,dy;
     if (xkbi->mouseKeysAccel) {
 	if ((xkbi->mouseKeysCounter)<ctrls->mk_time_to_max) {
 	    double step;
+
 	    xkbi->mouseKeysCounter++;
 	    step= xkbi->mouseKeysCurveFactor*
 		 pow((double)xkbi->mouseKeysCounter,xkbi->mouseKeysCurve);
 	    if (xkbi->mouseKeysDX<0)
 		 dx= floor( ((double)xkbi->mouseKeysDX)*step );
-	    else dx=  ceil( ((double)xkbi->mouseKeysDX)*step );
+            else
+                dx = ceil(((double) xkbi->mouseKeysDX) * step);
 	    if (xkbi->mouseKeysDY<0)
 		 dy= floor( ((double)xkbi->mouseKeysDY)*step );
-	    else dy=  ceil( ((double)xkbi->mouseKeysDY)*step );
+            else
+                dy = ceil(((double) xkbi->mouseKeysDY) * step);
 	}
 	else {
 	    dx= xkbi->mouseKeysDX*ctrls->mk_max_speed;
@@ -491,9 +504,7 @@ int		dx,dy;
 
 static int
 _XkbFilterPointerMove(	XkbSrvInfoPtr	xkbi,
-			XkbFilterPtr	filter,
-			unsigned	keycode,
-			XkbAction *	pAction)
+                      XkbFilterPtr filter, unsigned keycode, XkbAction *pAction)
 {
 int	x,y;
 Bool	accel;
@@ -534,9 +545,7 @@ Bool	accel;
 
 static int
 _XkbFilterPointerBtn(	XkbSrvInfoPtr	xkbi,
-			XkbFilterPtr	filter,
-			unsigned	keycode,
-			XkbAction *	pAction)
+                     XkbFilterPtr filter, unsigned keycode, XkbAction *pAction)
 {
     if (filter->keycode==0) {		/* initial press */
 	int	button= pAction->btn.button;
@@ -564,6 +573,7 @@ _XkbFilterPointerBtn(	XkbSrvInfoPtr	xkbi,
 	    case XkbSA_PtrBtn:
 		{
 		    register int i,nClicks;
+
 		    AccessXCancelRepeatKey(xkbi,keycode);
 		    if (pAction->btn.count>0) {
 			nClicks= pAction->btn.count;
@@ -573,7 +583,8 @@ _XkbFilterPointerBtn(	XkbSrvInfoPtr	xkbi,
 			}
 			filter->upAction.type= XkbSA_NoAction;
 		    }
-		    else XkbFakeDeviceButton(xkbi->device, 1, button);
+            else
+                XkbFakeDeviceButton(xkbi->device, 1, button);
 		}
 		break;
 	    case XkbSA_SetPtrDflt:
@@ -587,11 +598,9 @@ _XkbFilterPointerBtn(	XkbSrvInfoPtr	xkbi,
 		    switch (pAction->dflt.affect) {
 			case XkbSA_AffectDfltBtn:
 			    if (pAction->dflt.flags&XkbSA_DfltBtnAbsolute)
-				ctrls->mk_dflt_btn= 
-					XkbSAPtrDfltValue(&pAction->dflt);
+                    ctrls->mk_dflt_btn = XkbSAPtrDfltValue(&pAction->dflt);
 			    else {
-				ctrls->mk_dflt_btn+=
-					XkbSAPtrDfltValue(&pAction->dflt);
+                    ctrls->mk_dflt_btn += XkbSAPtrDfltValue(&pAction->dflt);
 				if (ctrls->mk_dflt_btn>5)
 				    ctrls->mk_dflt_btn= 5;
 				else if (ctrls->mk_dflt_btn<1)
@@ -599,14 +608,13 @@ _XkbFilterPointerBtn(	XkbSrvInfoPtr	xkbi,
 			    }
 			    break;
 			default:
-			    ErrorF(
-		"Attempt to change unknown pointer default (%d) ignored\n",
+                ErrorF
+                    ("Attempt to change unknown pointer default (%d) ignored\n",
 							pAction->dflt.affect);
 			    break;
 		    }
 		    if (XkbComputeControlsNotify(xkbi->device,
-						&old,xkbi->desc->ctrls,
-						&cn,FALSE)) {
+                                         &old, xkbi->desc->ctrls, &cn, FALSE)) {
 			cn.keycode = keycode;
                         /* XXX: what about DeviceKeyPress? */
 			cn.eventType = KeyPress;
@@ -629,8 +637,7 @@ _XkbFilterPointerBtn(	XkbSrvInfoPtr	xkbi,
 		}
 		xkbi->lockedPtrButtons&= ~(1<<button);
 
-		if (IsMaster(xkbi->device))
-		{
+            if (IsMaster(xkbi->device)) {
 		    XkbMergeLockedPtrBtns(xkbi->device);
                     /* One SD still has lock set, don't post event */
 		    if ((xkbi->lockedPtrButtons & (1 << button)) != 0)
@@ -649,9 +656,7 @@ _XkbFilterPointerBtn(	XkbSrvInfoPtr	xkbi,
 
 static int
 _XkbFilterControls(	XkbSrvInfoPtr	xkbi,
-			XkbFilterPtr	filter,
-			unsigned	keycode,
-			XkbAction *	pAction)
+                   XkbFilterPtr filter, unsigned keycode, XkbAction *pAction)
 {
 XkbControlsRec		old;
 XkbControlsPtr		ctrls;
@@ -738,8 +743,7 @@ XkbEventCauseRec	cause;
 static int
 _XkbFilterActionMessage(XkbSrvInfoPtr	xkbi,
 			XkbFilterPtr	filter,
-			unsigned	keycode,
-			XkbAction *	pAction)
+                        unsigned keycode, XkbAction *pAction)
 {
 XkbMessageAction *	pMsg;
 DeviceIntPtr		kbd;
@@ -761,9 +765,10 @@ DeviceIntPtr		kbd;
 
 	    msg.keycode= keycode;
 	    msg.press= 1;
-	    msg.keyEventFollows=((pMsg->flags&XkbSA_MessageGenKeyEvent)!=0);
-	    memcpy((char *)msg.message,
-				(char *)pMsg->message,XkbActionMessageLength);
+            msg.keyEventFollows =
+                ((pMsg->flags & XkbSA_MessageGenKeyEvent) != 0);
+            memcpy((char *) msg.message, (char *) pMsg->message,
+                   XkbActionMessageLength);
 	    XkbSendActionMessage(kbd,&msg);
 	}
 	return ((pAction->msg.flags&XkbSA_MessageGenKeyEvent)!=0);
@@ -775,7 +780,8 @@ DeviceIntPtr		kbd;
 
 	    msg.keycode= keycode;
 	    msg.press= 0;
-	    msg.keyEventFollows=((pMsg->flags&XkbSA_MessageGenKeyEvent)!=0);
+            msg.keyEventFollows =
+                ((pMsg->flags & XkbSA_MessageGenKeyEvent) != 0);
 	    memcpy((char *)msg.message,(char *)pMsg->message,
 						XkbActionMessageLength);
 	    XkbSendActionMessage(kbd,&msg);
@@ -789,9 +795,7 @@ DeviceIntPtr		kbd;
 
 static int
 _XkbFilterRedirectKey(	XkbSrvInfoPtr	xkbi,
-			XkbFilterPtr	filter,
-			unsigned	keycode,
-			XkbAction *	pAction)
+                      XkbFilterPtr filter, unsigned keycode, XkbAction *pAction)
 {
 DeviceEvent	ev;
 int		x,y;
@@ -832,8 +836,10 @@ ProcessInputProc backupproc;
 
         mask= XkbSARedirectVModsMask(&pAction->redirect);
         mods= XkbSARedirectVMods(&pAction->redirect);
-        if (mask) XkbVirtualModsToReal(xkbi->desc,mask,&mask);
-        if (mods) XkbVirtualModsToReal(xkbi->desc,mods,&mods);
+        if (mask)
+            XkbVirtualModsToReal(xkbi->desc, mask, &mask);
+        if (mods)
+            XkbVirtualModsToReal(xkbi->desc, mods, &mods);
         mask|= pAction->redirect.mods_mask;
         mods|= pAction->redirect.mods;
 
@@ -849,9 +855,10 @@ ProcessInputProc backupproc;
 	}
 
 	UNWRAP_PROCESS_INPUT_PROC(xkbi->device,xkbPrivPtr, backupproc);
-	xkbi->device->public.processInputProc((InternalEvent*)&ev, xkbi->device);
-	COND_WRAP_PROCESS_INPUT_PROC(xkbi->device, xkbPrivPtr,
-				     backupproc,xkbUnwrapProc);
+        xkbi->device->public.processInputProc((InternalEvent *) &ev,
+                                              xkbi->device);
+        COND_WRAP_PROCESS_INPUT_PROC(xkbi->device, xkbPrivPtr, backupproc,
+                                     xkbUnwrapProc);
 	
 	if ( mask || mods )
 	    xkbi->state= old;
@@ -863,8 +870,10 @@ ProcessInputProc backupproc;
 
         mask= XkbSARedirectVModsMask(&filter->upAction.redirect);
         mods= XkbSARedirectVMods(&filter->upAction.redirect);
-        if (mask) XkbVirtualModsToReal(xkbi->desc,mask,&mask);
-        if (mods) XkbVirtualModsToReal(xkbi->desc,mods,&mods);
+        if (mask)
+            XkbVirtualModsToReal(xkbi->desc, mask, &mask);
+        if (mods)
+            XkbVirtualModsToReal(xkbi->desc, mods, &mods);
         mask|= filter->upAction.redirect.mods_mask;
         mods|= filter->upAction.redirect.mods;
 
@@ -880,9 +889,10 @@ ProcessInputProc backupproc;
 	}
 
 	UNWRAP_PROCESS_INPUT_PROC(xkbi->device,xkbPrivPtr, backupproc);
-	xkbi->device->public.processInputProc((InternalEvent*)&ev, xkbi->device);
-	COND_WRAP_PROCESS_INPUT_PROC(xkbi->device, xkbPrivPtr,
-				     backupproc,xkbUnwrapProc);
+        xkbi->device->public.processInputProc((InternalEvent *) &ev,
+                                              xkbi->device);
+        COND_WRAP_PROCESS_INPUT_PROC(xkbi->device, xkbPrivPtr, backupproc,
+                                     xkbUnwrapProc);
 
 	if ( mask || mods )
 	    xkbi->state= old;
@@ -896,10 +906,10 @@ ProcessInputProc backupproc;
 static int
 _XkbFilterSwitchScreen(	XkbSrvInfoPtr	xkbi,
 			XkbFilterPtr	filter,
-			unsigned	keycode,
-			XkbAction *	pAction)
+                       unsigned keycode, XkbAction *pAction)
 {
     DeviceIntPtr dev = xkbi->device;
+
     if (dev == inputInfo.keyboard)
         return 0;
 
@@ -921,11 +931,10 @@ _XkbFilterSwitchScreen(	XkbSrvInfoPtr	xkbi,
 
 static int
 _XkbFilterXF86Private(	XkbSrvInfoPtr	xkbi,
-			XkbFilterPtr	filter,
-			unsigned	keycode,
-			XkbAction *	pAction)
+                      XkbFilterPtr filter, unsigned keycode, XkbAction *pAction)
 {
     DeviceIntPtr dev = xkbi->device;
+
     if (dev == inputInfo.keyboard)
         return 0;
 
@@ -944,12 +953,9 @@ _XkbFilterXF86Private(	XkbSrvInfoPtr	xkbi,
     return 1;
 }
 
-
 static int
 _XkbFilterDeviceBtn(	XkbSrvInfoPtr	xkbi,
-			XkbFilterPtr	filter,
-			unsigned	keycode,
-			XkbAction *	pAction)
+                    XkbFilterPtr filter, unsigned keycode, XkbAction *pAction)
 {
     if (xkbi->device == inputInfo.keyboard)
         return 0;
@@ -984,6 +990,7 @@ _XkbFilterDeviceBtn(	XkbSrvInfoPtr	xkbi,
 	    case XkbSA_DeviceBtn:
 		if (pAction->devbtn.count>0) {
 		    int nClicks,i;
+
 		    nClicks= pAction->btn.count;
 		    for (i=0;i<nClicks;i++) {
 			XkbFakeDeviceButton(dev,TRUE,button);
@@ -991,7 +998,8 @@ _XkbFilterDeviceBtn(	XkbSrvInfoPtr	xkbi,
 		    }
 		    filter->upAction.type= XkbSA_NoAction;
 		}
-		else XkbFakeDeviceButton(dev,TRUE,button);
+            else
+                XkbFakeDeviceButton(dev, TRUE, button);
 		break;
 	}
     }
@@ -1023,9 +1031,7 @@ _XkbFilterDeviceBtn(	XkbSrvInfoPtr	xkbi,
 }
 
 static XkbFilterPtr
-_XkbNextFreeFilter(
-	XkbSrvInfoPtr xkbi
-)
+_XkbNextFreeFilter(XkbSrvInfoPtr xkbi)
 {
 register int	i;
 
@@ -1057,7 +1063,9 @@ register int	i,send;
     send= 1;
     for (i=0;i<xkbi->szFilters;i++) {
 	if ((xkbi->filters[i].active)&&(xkbi->filters[i].filter))
-	    send= ((*xkbi->filters[i].filter)(xkbi,&xkbi->filters[i],kc,pAction) 
+            send =
+                ((*xkbi->filters[i].filter) (xkbi, &xkbi->filters[i], kc,
+                                             pAction)
                     && send);
     }
     return send;
@@ -1089,14 +1097,16 @@ xkbDeviceInfoPtr xkbPrivPtr = XKBDEVICEINFO(dev);
 	xkbi->flags|= _XkbStateNotifyInProgress;
 	genStateNotify= TRUE;
     }
-    else genStateNotify= FALSE;
+    else
+        genStateNotify = FALSE;
 
     xkbi->clearMods = xkbi->setMods = 0;
     xkbi->groupChange = 0;
 
     sendEvent = 1;
     keyEvent= ((event->type == ET_KeyPress) || (event->type == ET_KeyRelease));
-    pressEvent= ((event->type == ET_KeyPress)|| (event->type == ET_ButtonPress));
+    pressEvent = ((event->type == ET_KeyPress) ||
+                  (event->type == ET_ButtonPress));
 
     if (pressEvent) {
 	if (keyEvent)	
@@ -1201,6 +1211,7 @@ xkbDeviceInfoPtr xkbPrivPtr = XKBDEVICEINFO(dev);
 
     if (sendEvent) {
         DeviceIntPtr tmpdev;
+
 	if (keyEvent)
             tmpdev = dev;
         else
@@ -1220,6 +1231,7 @@ xkbDeviceInfoPtr xkbPrivPtr = XKBDEVICEINFO(dev);
     if (genStateNotify) {
 	if (changed) {
 	    xkbStateNotify	sn;
+
 	    sn.keycode= key;
 	    sn.eventType= event->type;
 	    sn.requestMajor = sn.requestMinor = 0;
@@ -1231,6 +1243,7 @@ xkbDeviceInfoPtr xkbPrivPtr = XKBDEVICEINFO(dev);
     changed= XkbIndicatorsToUpdate(dev,changed,FALSE);
     if (changed) {
 	XkbEventCauseRec	cause;
+
 	XkbSetCauseKey(&cause, key, event->type);
 	XkbUpdateIndicators(dev,changed,FALSE,NULL,&cause);
     }
@@ -1258,7 +1271,8 @@ unsigned	clear;
 	act.mods.mask  = mask&latches;
 	filter = _XkbNextFreeFilter(xkbi);
 	_XkbFilterLatchState(xkbi,filter,SYNTHETIC_KEYCODE,&act);
-	_XkbFilterLatchState(xkbi,filter,SYNTHETIC_KEYCODE,(XkbAction *)NULL);
+        _XkbFilterLatchState(xkbi, filter, SYNTHETIC_KEYCODE,
+                             (XkbAction *) NULL);
 	return Success;
     }
     return BadValue;
@@ -1278,7 +1292,8 @@ XkbAction	act;
 	XkbSASetGroup(&act.group,group);
 	filter = _XkbNextFreeFilter(xkbi);
 	_XkbFilterLatchState(xkbi,filter,SYNTHETIC_KEYCODE,&act);
-	_XkbFilterLatchState(xkbi,filter,SYNTHETIC_KEYCODE,(XkbAction *)NULL);
+        _XkbFilterLatchState(xkbi, filter, SYNTHETIC_KEYCODE,
+                             (XkbAction *) NULL);
 	return Success;
     }
     return BadValue;
@@ -1289,8 +1304,7 @@ XkbAction	act;
 void
 XkbClearAllLatchesAndLocks(	DeviceIntPtr		dev,
 				XkbSrvInfoPtr		xkbi,
-				Bool			genEv,
-				XkbEventCausePtr	cause)
+                           Bool genEv, XkbEventCausePtr cause)
 {
 XkbStateRec	os;
 xkbStateNotify	sn;
@@ -1352,7 +1366,8 @@ xkbStateNotify	sn;
  * First one on drinking island wins!
  */
 static void
-InjectPointerKeyEvents(DeviceIntPtr dev, int type, int button, int flags, ValuatorMask *mask)
+InjectPointerKeyEvents(DeviceIntPtr dev, int type, int button, int flags,
+                       ValuatorMask *mask)
 {
     ScreenPtr           pScreen;
     InternalEvent*      events;
@@ -1364,19 +1379,20 @@ InjectPointerKeyEvents(DeviceIntPtr dev, int type, int button, int flags, Valuat
         mpointer = GetMaster(dev, MASTER_POINTER);
         lastSlave = mpointer->lastSlave;
         ptr = GetXTestDevice(mpointer);
-    } else if (IsFloating(dev))
+    }
+    else if (IsFloating(dev))
         ptr = dev;
     else
         return;
 
-
     events = InitEventList(GetMaximumEventsNum() + 1);
     OsBlockSignals();
     pScreen = miPointerGetScreen(ptr);
     saveWait = miPointerSetWaitForUpdate(pScreen, FALSE);
     nevents = GetPointerEvents(events, ptr, type, button, flags, mask);
     if (IsMaster(dev) && (lastSlave && lastSlave != ptr))
-        UpdateFromMaster(&events[nevents], lastSlave, DEVCHANGE_POINTER_EVENT, &nevents);
+        UpdateFromMaster(&events[nevents], lastSlave, DEVCHANGE_POINTER_EVENT,
+                         &nevents);
     miPointerSetWaitForUpdate(pScreen, saveWait);
     OsReleaseSignals();
 
@@ -1402,7 +1418,8 @@ XkbFakePointerMotion(DeviceIntPtr dev, unsigned flags,int x,int y)
     else
         gpe_flags = POINTER_RELATIVE;
 
-    valuator_mask_set_range(&mask, 0, 2, (int[]){x, y});
+    valuator_mask_set_range(&mask, 0, 2, (int[]) {
+                            x, y});
 
     InjectPointerKeyEvents(dev, MotionNotify, 0, gpe_flags, &mask);
 }
@@ -1423,8 +1440,10 @@ XkbFakeDeviceButton(DeviceIntPtr dev,Bool press,int button)
 
     if (IsMaster(dev)) {
         DeviceIntPtr mpointer = GetMaster(dev, MASTER_POINTER);
+
         ptr = GetXTestDevice(mpointer);
-    } else if (IsFloating(dev))
+    }
+    else if (IsFloating(dev))
         ptr = dev;
     else
         return;
