diff --git a/hw/xwin/wincmap.c b/hw/xwin/wincmap.c
index d526a92..610437a 100644
--- a/hw/xwin/wincmap.c
+++ b/hw/xwin/wincmap.c
@@ -36,7 +36,6 @@
 #endif
 #include "win.h"
 
-
 /*
  * Local prototypes
  */
@@ -54,10 +53,10 @@ static void
 winUninstallColormap (ColormapPtr pmap);
 
 static void
+
 winResolveColor (unsigned short *pred,
 		 unsigned short *pgreen,
-		 unsigned short *pblue,
-		 VisualPtr	pVisual);
+                unsigned short *pblue, VisualPtr pVisual);
 
 static Bool
 winCreateColormap (ColormapPtr pmap);
@@ -71,7 +70,6 @@ winGetPaletteDIB (ScreenPtr pScreen, ColormapPtr pcmap);
 static Bool
 winGetPaletteDD (ScreenPtr pScreen, ColormapPtr pcmap);
 
-
 /*
  * Set screen functions for colormaps
  */
@@ -88,7 +86,6 @@ winSetColormapFunctions (ScreenPtr pScreen)
   pScreen->ResolveColor = winResolveColor;
 }
 
-
 /* See Porting Layer Definition - p. 30 */
 /*
  * Walk the list of installed colormaps, filling the pmaps list
@@ -109,13 +106,13 @@ winListInstalledColormaps (ScreenPtr pScreen, Colormap *pmaps)
   return 1;
 }
 
-
 /* See Porting Layer Definition - p. 30 */
 /* See Programming Windows - p. 663 */
 static void
 winInstallColormap (ColormapPtr pColormap)
 {
   ScreenPtr		pScreen = pColormap->pScreen;
+
   winScreenPriv(pScreen);
   ColormapPtr		oldpmap = pScreenPriv->pcmapInstalled;
 
@@ -124,16 +121,14 @@ winInstallColormap (ColormapPtr pColormap)
 #endif
  
   /* Did the colormap actually change? */
-  if (pColormap != oldpmap)
-    {
+    if (pColormap != oldpmap) {
 #if CYGDEBUG
       winDebug ("winInstallColormap - Colormap has changed, attempt "
 	      "to install.\n");
 #endif
       
       /* Was there a previous colormap? */
-      if (oldpmap != (ColormapPtr) None)
-	{
+        if (oldpmap != (ColormapPtr) None) {
 	  /* There was a previous colormap; tell clients it is gone */
 	  WalkTree (pColormap->pScreen, TellLostMap, (char *)&oldpmap->mid);
 	}
@@ -143,9 +138,9 @@ winInstallColormap (ColormapPtr pColormap)
       WalkTree (pColormap->pScreen, TellGainedMap, (char *)&pColormap->mid);
       
       /* Call the engine specific colormap install procedure */
-      if (!((*pScreenPriv->pwinInstallColormap) (pColormap)))
-	{
-	  winErrorFVerb (2, "winInstallColormap - Screen specific colormap install "
+        if (!((*pScreenPriv->pwinInstallColormap) (pColormap))) {
+            winErrorFVerb(2,
+                          "winInstallColormap - Screen specific colormap install "
 		  "procedure failed.  Continuing, but colors may be "
 		  "messed up from now on.\n");
 	}
@@ -155,7 +150,6 @@ winInstallColormap (ColormapPtr pColormap)
   pScreenPriv->pcmapInstalled = pColormap;
 }
 
-
 /* See Porting Layer Definition - p. 30 */
 static void
 winUninstallColormap (ColormapPtr pmap)
@@ -168,8 +162,7 @@ winUninstallColormap (ColormapPtr pmap)
 #endif
 
   /* Is the colormap currently installed? */
-  if (pmap != curpmap)
-    {
+    if (pmap != curpmap) {
       /* Colormap not installed, nothing to do */
       return;
     }
@@ -183,22 +176,19 @@ winUninstallColormap (ColormapPtr pmap)
    */
 
   /* Install the default cmap in place of the cmap to be uninstalled */
-  if (pmap->mid != pmap->pScreen->defColormap)
-    {
+    if (pmap->mid != pmap->pScreen->defColormap) {
       dixLookupResourceByType((pointer) &curpmap, pmap->pScreen->defColormap,
 				RT_COLORMAP, NullClient, DixUnknownAccess);
       (*pmap->pScreen->InstallColormap) (curpmap);
     }
 }
 
-
 /* See Porting Layer Definition - p. 30 */
 static void
-winStoreColors (ColormapPtr pmap,
-		int ndef,
-		xColorItem *pdefs)
+winStoreColors(ColormapPtr pmap, int ndef, xColorItem * pdefs)
 {
   ScreenPtr		pScreen = pmap->pScreen;
+
   winScreenPriv(pScreen);
   winCmapPriv(pmap);
   int			i;
@@ -206,13 +196,11 @@ winStoreColors (ColormapPtr pmap,
 
 #if CYGDEBUG
   if (ndef != 1)
-    winDebug ("winStoreColors - ndef: %d\n",
-	    ndef);
+        winDebug("winStoreColors - ndef: %d\n", ndef);
 #endif
 
   /* Save the new colors in the colormap privates */
-  for (i = 0; i < ndef; ++i)
-    {
+    for (i = 0; i < ndef; ++i) {
       /* Adjust the colors from the X color spec to the Windows color spec */
       nRed = pdefs[i].red >> 8;
       nGreen = pdefs[i].green >> 8;
@@ -235,21 +223,19 @@ winStoreColors (ColormapPtr pmap,
     }
 
   /* Call the engine specific store colors procedure */
-  if (!((pScreenPriv->pwinStoreColors) (pmap, ndef, pdefs)))
-    {
-      winErrorFVerb (2, "winStoreColors - Engine cpecific color storage procedure "
+    if (!((pScreenPriv->pwinStoreColors) (pmap, ndef, pdefs))) {
+        winErrorFVerb(2,
+                      "winStoreColors - Engine cpecific color storage procedure "
 	      "failed.  Continuing, but colors may be messed up from now "
 	      "on.\n");
     }
 }
 
-
 /* See Porting Layer Definition - p. 30 */
 static void
 winResolveColor (unsigned short *pred,
 		 unsigned short *pgreen,
-		 unsigned short *pblue,
-		 VisualPtr	pVisual)
+                unsigned short *pblue, VisualPtr pVisual)
 {
 #if CYGDEBUG
   winDebug ("winResolveColor ()\n");
@@ -258,13 +244,13 @@ winResolveColor (unsigned short *pred,
   miResolveColor (pred, pgreen, pblue, pVisual);
 }
 
-
 /* See Porting Layer Definition - p. 29 */
 static Bool
 winCreateColormap (ColormapPtr pmap)
 {
   winPrivCmapPtr	pCmapPriv = NULL;
   ScreenPtr		pScreen = pmap->pScreen;
+
   winScreenPriv(pScreen);
 
 #if CYGDEBUG
@@ -272,8 +258,7 @@ winCreateColormap (ColormapPtr pmap)
 #endif
 
   /* Allocate colormap privates */
-  if (!winAllocateCmapPrivates (pmap))
-    {
+    if (!winAllocateCmapPrivates(pmap)) {
       ErrorF ("winCreateColorma - Couldn't allocate cmap privates\n");
       return FALSE;
     }
@@ -298,8 +283,7 @@ winCreateColormap (ColormapPtr pmap)
   pCmapPriv->peColors[WIN_NUM_PALETTE_ENTRIES - 1].peBlue = 255;
 
   /* Call the engine specific colormap initialization procedure */
-  if (!((*pScreenPriv->pwinCreateColormap) (pmap)))
-    {
+    if (!((*pScreenPriv->pwinCreateColormap) (pmap))) {
       ErrorF ("winCreateColormap - Engine specific colormap creation "
 	      "procedure failed.  Aborting.\n");
       return FALSE;
@@ -308,7 +292,6 @@ winCreateColormap (ColormapPtr pmap)
   return TRUE;
 }
 
-
 /* See Porting Layer Definition - p. 29, 30 */
 static void
 winDestroyColormap (ColormapPtr pColormap)
@@ -317,9 +300,9 @@ winDestroyColormap (ColormapPtr pColormap)
   winCmapPriv(pColormap);
 
   /* Call the engine specific colormap destruction procedure */
-  if (!((*pScreenPriv->pwinDestroyColormap) (pColormap)))
-    {
-      winErrorFVerb (2, "winDestroyColormap - Engine specific colormap destruction "
+    if (!((*pScreenPriv->pwinDestroyColormap) (pColormap))) {
+        winErrorFVerb(2,
+                      "winDestroyColormap - Engine specific colormap destruction "
 	      "procedure failed.  Continuing, but it is possible that memory "
 	      "was leaked, or that colors will be messed up from now on.\n");
     }
@@ -333,7 +316,6 @@ winDestroyColormap (ColormapPtr pColormap)
 #endif
 }
 
-
 /*
  * Internal function to load the palette used by the Shadow DIB
  */
@@ -350,11 +332,8 @@ winGetPaletteDIB (ScreenPtr pScreen, ColormapPtr pcmap)
       
   /* Get the color table for the screen */
   uiColorsRetrieved = GetDIBColorTable (pScreenPriv->hdcScreen,
-					0,
-					WIN_NUM_PALETTE_ENTRIES,
-					rgbColors);
-  if (uiColorsRetrieved == 0)
-    {
+                                         0, WIN_NUM_PALETTE_ENTRIES, rgbColors);
+    if (uiColorsRetrieved == 0) {
       ErrorF ("winGetPaletteDIB - Could not retrieve screen color table\n");
       return FALSE;
     }
@@ -366,17 +345,13 @@ winGetPaletteDIB (ScreenPtr pScreen, ColormapPtr pcmap)
 
   /* Set the DIB color table to the default screen palette */
   if (SetDIBColorTable (pScreenPriv->hdcShadow,
-			0,
-			uiColorsRetrieved,
-			rgbColors) == 0)
-    {
+                         0, uiColorsRetrieved, rgbColors) == 0) {
       ErrorF ("winGetPaletteDIB - SetDIBColorTable () failed\n");
       return FALSE;
     }
 
   /* Alloc each color in the DIB color table */
-  for (i = 0; i < uiColorsRetrieved; ++i)
-    {
+    for (i = 0; i < uiColorsRetrieved; ++i) {
       pixel = i;
 
       /* Extract the color values for current palette entry */
@@ -386,31 +361,21 @@ winGetPaletteDIB (ScreenPtr pScreen, ColormapPtr pcmap)
 
 #if CYGDEBUG
       winDebug ("winGetPaletteDIB - Allocating a color: %d; "
-	      "%d %d %d\n",
-	      pixel, nRed, nGreen, nBlue);
+                 "%d %d %d\n", pixel, nRed, nGreen, nBlue);
 #endif
 
       /* Allocate a entry in the X colormap */
-      if (AllocColor (pcmap,
-		      &nRed,
-		      &nGreen,
-		      &nBlue,
-		      &pixel,
-		      0) != Success)
-	{
-	  ErrorF ("winGetPaletteDIB - AllocColor () failed, pixel %d\n",
-		  i);
+        if (AllocColor(pcmap, &nRed, &nGreen, &nBlue, &pixel, 0) != Success) {
+            ErrorF("winGetPaletteDIB - AllocColor () failed, pixel %d\n", i);
 	  return FALSE;
 	}
 
       if (i != pixel
 	  || nRed != rgbColors[i].rgbRed 
 	  || nGreen != rgbColors[i].rgbGreen
-	  || nBlue != rgbColors[i].rgbBlue)
-	{
+            || nBlue != rgbColors[i].rgbBlue) {
 	  winDebug ("winGetPaletteDIB - Got: %d; "
-		  "%d %d %d\n",
-		  (int) pixel, nRed, nGreen, nBlue);
+                     "%d %d %d\n", (int) pixel, nRed, nGreen, nBlue);
 	}
 	  
       /* FIXME: Not sure that this bit is needed at all */
@@ -427,7 +392,6 @@ winGetPaletteDIB (ScreenPtr pScreen, ColormapPtr pcmap)
   return TRUE;
 }
 
-
 /*
  * Internal function to load the standard system palette being used by DD
  */
@@ -444,17 +408,14 @@ winGetPaletteDD (ScreenPtr pScreen, ColormapPtr pcmap)
 
   /* Get a DC to obtain the default palette */
   hdc = GetDC (NULL);
-  if (hdc == NULL)
-    {
+    if (hdc == NULL) {
       ErrorF ("winGetPaletteDD - Couldn't get a DC\n");
       return FALSE;
     }
 
   /* Get the number of entries in the system palette */
-  uiSystemPaletteEntries = GetSystemPaletteEntries (hdc,
-						    0, 0, NULL);
-  if (uiSystemPaletteEntries == 0)
-    {
+    uiSystemPaletteEntries = GetSystemPaletteEntries(hdc, 0, 0, NULL);
+    if (uiSystemPaletteEntries == 0) {
       ErrorF ("winGetPaletteDD - Unable to determine number of "
 	      "system palette entries\n");
       return FALSE;
@@ -467,19 +428,16 @@ winGetPaletteDD (ScreenPtr pScreen, ColormapPtr pcmap)
   
   /* Allocate palette entries structure */
   ppeColors = malloc (uiSystemPaletteEntries * sizeof (PALETTEENTRY));
-  if (ppeColors == NULL)
-    {
+    if (ppeColors == NULL) {
       ErrorF ("winGetPaletteDD - malloc () for colormap failed\n");
       return FALSE;
     }
 
   /* Get system palette entries */
-  GetSystemPaletteEntries (hdc,
-			   0, uiSystemPaletteEntries, ppeColors);
+    GetSystemPaletteEntries(hdc, 0, uiSystemPaletteEntries, ppeColors);
 
   /* Allocate an X colormap entry for every system palette entry */
-  for (i = 0; i < uiSystemPaletteEntries; ++i)
-    {
+    for (i = 0; i < uiSystemPaletteEntries; ++i) {
       pixel = i;
 
       /* Extract the color values for current palette entry */
@@ -488,18 +446,10 @@ winGetPaletteDD (ScreenPtr pScreen, ColormapPtr pcmap)
       nBlue = ppeColors[i].peBlue << 8;
 #if CYGDEBUG
       winDebug ("winGetPaletteDD - Allocating a color: %d; "
-	      "%d %d %d\n",
-	      pixel, nRed, nGreen, nBlue);
+                 "%d %d %d\n", pixel, nRed, nGreen, nBlue);
 #endif
-      if (AllocColor (pcmap,
-		      &nRed,
-		      &nGreen,
-		      &nBlue,
-		      &pixel,
-		      0) != Success)
-	{
-	  ErrorF ("winGetPaletteDD - AllocColor () failed, pixel %d\n",
-		  i);
+        if (AllocColor(pcmap, &nRed, &nGreen, &nBlue, &pixel, 0) != Success) {
+            ErrorF("winGetPaletteDD - AllocColor () failed, pixel %d\n", i);
 	  free (ppeColors);
 	  ppeColors = NULL;
 	  return FALSE;
@@ -520,8 +470,7 @@ winGetPaletteDD (ScreenPtr pScreen, ColormapPtr pcmap)
   ppeColors = NULL;
 
   /* Free the DC */
-  if (hdc != NULL)
-    {
+    if (hdc != NULL) {
       ReleaseDC (NULL, hdc);
       hdc = NULL;
     }
@@ -529,7 +478,6 @@ winGetPaletteDD (ScreenPtr pScreen, ColormapPtr pcmap)
   return TRUE;
 }
 
-
 /*
  * Install the standard fb colormap, or the GDI colormap,
  * depending on the current screen depth.
@@ -550,9 +498,8 @@ winCreateDefColormap (ScreenPtr pScreen)
 #endif
 
   /* Use standard fb colormaps for non palettized color modes */
-  if (pScreenInfo->dwBPP > 8)
-    {
-      winDebug ("winCreateDefColormap - Deferring to " \
+    if (pScreenInfo->dwBPP > 8) {
+        winDebug("winCreateDefColormap - Deferring to "
 	      "fbCreateDefColormap ()\n");
       return fbCreateDefColormap (pScreen);
     }
@@ -568,8 +515,7 @@ winCreateDefColormap (ScreenPtr pScreen)
    */
 
 #if CYGDEBUG
-  winDebug ("winCreateDefColormap - defColormap: %d\n",
-	  pScreen->defColormap);
+    winDebug("winCreateDefColormap - defColormap: %d\n", pScreen->defColormap);
 #endif
 
   /* Allocate an X colormap, owned by client 0 */
@@ -578,13 +524,11 @@ winCreateDefColormap (ScreenPtr pScreen)
 		      pVisual,
 		      &pcmap,
 		      (pVisual->class & DynamicClass) ? AllocNone : AllocAll,
-		      0) != Success)
-    {
+                       0) != Success) {
       ErrorF ("winCreateDefColormap - CreateColormap failed\n");
       return FALSE;
     }
-  if (pcmap == NULL)
-    {
+    if (pcmap == NULL) {
       ErrorF ("winCreateDefColormap - Colormap could not be created\n");
       return FALSE;
     }
@@ -594,41 +538,31 @@ winCreateDefColormap (ScreenPtr pScreen)
 #endif
 
   /* Branch on the visual class */
-  if (!(pVisual->class & DynamicClass))
-    {
+    if (!(pVisual->class & DynamicClass)) {
       /* Branch on engine type */
-      if (pScreenInfo->dwEngine == WIN_SERVER_SHADOW_GDI)
-	{
+        if (pScreenInfo->dwEngine == WIN_SERVER_SHADOW_GDI) {
 	  /* Load the colors being used by the Shadow DIB */
-	  if (!winGetPaletteDIB (pScreen, pcmap))
-	    {
+            if (!winGetPaletteDIB(pScreen, pcmap)) {
 	      ErrorF ("winCreateDefColormap - Couldn't get DIB colors\n");
 	      return FALSE;
 	    }
 	}
-      else
-	{
+        else {
 	  /* Load the colors from the default system palette */
-	  if (!winGetPaletteDD (pScreen, pcmap))
-	    {
+            if (!winGetPaletteDD(pScreen, pcmap)) {
 	      ErrorF ("winCreateDefColormap - Couldn't get colors "
 		      "for DD\n");
 	      return FALSE;
 	    }
 	}
     }
-  else
-    {
+    else {
       wp = pScreen->whitePixel;
       bp = pScreen->blackPixel;
       
       /* Allocate a black and white pixel */
-      if ((AllocColor (pcmap, &ones, &ones, &ones, &wp, 0) !=
-	   Success)
-	  ||
-	  (AllocColor (pcmap, &zero, &zero, &zero, &bp, 0) !=
-	   Success))
-	{
+        if ((AllocColor(pcmap, &ones, &ones, &ones, &wp, 0) != Success)
+            || (AllocColor(pcmap, &zero, &zero, &zero, &bp, 0) != Success)) {
 	  ErrorF ("winCreateDefColormap - Couldn't allocate bp or wp\n");
 	  return FALSE;
 	}
@@ -638,20 +572,17 @@ winCreateDefColormap (ScreenPtr pScreen)
 
 #if 0
       /* Have to reserve first 10 and last ten pixels in DirectDraw windowed */
-      if (pScreenInfo->dwEngine != WIN_SERVER_SHADOW_GDI)
-	{
+        if (pScreenInfo->dwEngine != WIN_SERVER_SHADOW_GDI) {
 	  int		k;
 	  Pixel		p;
 
-	  for (k = 1; k < 10; ++k)
-	    {
+            for (k = 1; k < 10; ++k) {
 	      p = k;
 	      if (AllocColor (pcmap, &ones, &ones, &ones, &p, 0) != Success)
 		FatalError ("Foo!\n");
 	    }
 	  
-	  for (k = 245; k < 255; ++k)
-	    {
+            for (k = 245; k < 255; ++k) {
 	      p = k;
 	      if (AllocColor (pcmap, &zero, &zero, &zero, &p, 0) != Success)
 		FatalError ("Baz!\n");
