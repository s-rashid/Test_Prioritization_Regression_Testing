diff --git a/os/auth.c b/os/auth.c
index 6669c14..ac20de4 100644
--- a/os/auth.c
+++ b/os/auth.c
@@ -125,9 +125,8 @@ LoadAuthorization (void)
     while ((auth = XauReadAuth (f)) != 0) {
 	for (i = 0; i < NUM_AUTHORIZATION; i++) {
 	    if (protocols[i].name_length == auth->name_length &&
-		memcmp (protocols[i].name, auth->name, (int) auth->name_length) == 0 &&
-		protocols[i].Add)
-	    {
+                memcmp(protocols[i].name, auth->name,
+                       (int) auth->name_length) == 0 && protocols[i].Add) {
 		++count;
 		(*protocols[i].Add) (auth->data_length, auth->data,
 					 FakeClientID(0));
@@ -157,33 +156,27 @@ RegisterAuthorizations (void)
 #endif
 
 XID
-CheckAuthorization (
-    unsigned int name_length,
+CheckAuthorization(unsigned int name_length,
     const char	*name,
     unsigned int data_length,
-    const char	*data,
-    ClientPtr client,
-    const char	**reason)	/* failure message.  NULL for default msg */
-{
+                   const char *data, ClientPtr client, const char **reason)
+{                               /* failure message.  NULL for default msg */
     int	i;
     struct stat buf;
     static time_t lastmod = 0;
     static Bool loaded = FALSE;
 
-    if (!authorization_file || stat(authorization_file, &buf))
-    {
+    if (!authorization_file || stat(authorization_file, &buf)) {
 	if (lastmod != 0) {
 	    lastmod = 0;
 	    ShouldLoadAuth = TRUE;	/* stat lost, so force reload */
 	}
     }
-    else if (buf.st_mtime > lastmod)
-    {
+    else if (buf.st_mtime > lastmod) {
 	lastmod = buf.st_mtime;
 	ShouldLoadAuth = TRUE;
     }
-    if (ShouldLoadAuth)
-    {
+    if (ShouldLoadAuth) {
 	int loadauth = LoadAuthorization();
 
 	/*
@@ -200,8 +193,7 @@ CheckAuthorization (
 	 * change anything. (loadauth == -1 && loaded)
 	 */
 	
-	if (loadauth > 0)
-	{
+        if (loadauth > 0) {
 	    DisableLocalHost(); /* got at least one */
 	    loaded = TRUE;
 	}
@@ -211,13 +203,15 @@ CheckAuthorization (
     if (name_length) {
 	for (i = 0; i < NUM_AUTHORIZATION; i++) {
 	    if (protocols[i].name_length == name_length &&
-		memcmp (protocols[i].name, name, (int) name_length) == 0)
-	    {
-		return (*protocols[i].Check) (data_length, data, client, reason);
+                memcmp(protocols[i].name, name, (int) name_length) == 0) {
+                return (*protocols[i].Check) (data_length, data, client,
+                                              reason);
 	    }
 	    *reason = "Protocol not supported by server\n";
 	}
-    } else *reason = "No protocol specified\n";
+    }
+    else
+        *reason = "No protocol specified\n";
     return (XID) ~0L;
 }
 
@@ -233,12 +227,9 @@ ResetAuthorization (void)
 }
 
 int
-AuthorizationFromID (
-	XID 		id,
+AuthorizationFromID(XID id,
 	unsigned short	*name_lenp,
-	const char	**namep,
-	unsigned short	*data_lenp,
-	char		**datap)
+                    const char **namep, unsigned short *data_lenp, char **datap)
 {
     int	i;
 
@@ -254,19 +245,16 @@ AuthorizationFromID (
 }
 
 int
-RemoveAuthorization (
-	unsigned short	name_length,
+RemoveAuthorization(unsigned short name_length,
 	const char	*name,
-	unsigned short	data_length,
-	const char	*data)
+                    unsigned short data_length, const char *data)
 {
     int	i;
 
     for (i = 0; i < NUM_AUTHORIZATION; i++) {
     	if (protocols[i].name_length == name_length &&
 	    memcmp (protocols[i].name, name, (int) name_length) == 0 &&
-	    protocols[i].Remove)
-    	{
+            protocols[i].Remove) {
 	    return (*protocols[i].Remove) (data_length, data);
     	}
     }
@@ -282,8 +270,7 @@ AddAuthorization (unsigned name_length, const char *name,
     for (i = 0; i < NUM_AUTHORIZATION; i++) {
     	if (protocols[i].name_length == name_length &&
 	    memcmp (protocols[i].name, name, (int) name_length) == 0 &&
-	    protocols[i].Add)
-    	{
+            protocols[i].Add) {
 	    return (*protocols[i].Add) (data_length, data, FakeClientID(0));
     	}
     }
@@ -293,23 +280,21 @@ AddAuthorization (unsigned name_length, const char *name,
 #ifdef XCSECURITY
 
 XID
-GenerateAuthorization(
-	unsigned name_length,
+GenerateAuthorization(unsigned name_length,
 	const char	*name,
 	unsigned data_length,
 	const char	*data,
-	unsigned *data_length_return,
-	char	**data_return)
+                      unsigned *data_length_return, char **data_return)
 {
     int	i;
 
     for (i = 0; i < NUM_AUTHORIZATION; i++) {
     	if (protocols[i].name_length == name_length &&
 	    memcmp (protocols[i].name, name, (int) name_length) == 0 &&
-	    protocols[i].Generate)
-    	{
+            protocols[i].Generate) {
 	    return (*protocols[i].Generate) (data_length, data,
-			FakeClientID(0), data_length_return, data_return);
+                                             FakeClientID(0),
+                                             data_length_return, data_return);
     	}
     }
     return -1;
