diff --git a/Xi/chgdctl.c b/Xi/chgdctl.c
index d507513..ebe0865 100644
--- a/Xi/chgdctl.c
+++ b/Xi/chgdctl.c
@@ -104,6 +104,8 @@ ProcXChangeDeviceControl(ClientPtr client)
     xChangeDeviceControlReply rep;
     AxisInfoPtr a;
     CARD32 *resolution;
+    xDeviceTSCtl *ts;
+    xDeviceCoreCtl *c;
 
     REQUEST(xChangeDeviceControlReq);
     REQUEST_AT_LEAST_SIZE(xChangeDeviceControlReq);
@@ -168,6 +170,54 @@ ProcXChangeDeviceControl(ClientPtr client)
 	    return Success;
 	}
 	break;
+    case DEVICE_TOUCHSCREEN:
+        ts = (xDeviceTSCtl *)&stuff[1];
+
+        if (ts->button_threshold < 0 || ts->button_threshold > 255) {
+            SendErrorToClient(client, IReqCode, X_ChangeDeviceControl, 0,
+                              BadValue);
+            return Success;
+        }
+
+        status = ChangeDeviceControl(client, dev, (xDeviceCtl *) ts);
+
+        if (status == Success) {
+            dev->touchscreen->min_x = ts->min_x;
+            dev->touchscreen->max_x = ts->max_x;
+            dev->touchscreen->min_y = ts->min_y;
+            dev->touchscreen->max_y = ts->max_y;
+            dev->touchscreen->button_threshold = ts->button_threshold;
+        } else if (status == DeviceBusy) {
+            rep.status = DeviceBusy;
+            WriteReplyToClient(client, sizeof(xChangeDeviceControlReply),
+                               &rep);
+            return Success;
+        } else {
+            SendErrorToClient(client, IReqCode, X_ChangeDeviceControl, 0,
+                              BadMatch);
+            return Success;
+        }
+
+        break;
+    case DEVICE_CORE:
+        c = (xDeviceCoreCtl *)&stuff[1];
+
+        status = ChangeDeviceControl(client, dev, (xDeviceCtl *) c);
+
+        if (status == Success) {
+            dev->coreEvents = c->status;
+        } else if (status == DeviceBusy) {
+            rep.status = DeviceBusy;
+            WriteReplyToClient(client, sizeof(xChangeDeviceControlReply),
+                               &rep);
+            return Success;
+        } else {
+            SendErrorToClient(client, IReqCode, X_ChangeDeviceControl, 0,
+                              BadMatch);
+            return Success;
+        }
+
+        break;
     default:
 	SendErrorToClient(client, IReqCode, X_ChangeDeviceControl, 0, BadValue);
 	return Success;
