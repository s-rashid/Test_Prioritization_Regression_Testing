diff --git a/hw/xfree86/common/xf86Xinput.h b/hw/xfree86/common/xf86Xinput.h
index ad092dd..3731a34 100644
--- a/hw/xfree86/common/xf86Xinput.h
+++ b/hw/xfree86/common/xf86Xinput.h
@@ -48,7 +48,6 @@
  * authorization from the copyright holder(s) and author(s).
  */
 
-
 #ifndef _xf86Xinput_h
 #define _xf86Xinput_h
 
@@ -71,8 +70,7 @@ typedef struct _InputDriverRec {
     int			    (*PreInit)(struct _InputDriverRec *drv,
 				       struct _InputInfoRec* pInfo, int flags);
     void		    (*UnInit)(struct _InputDriverRec *drv,
-				      struct _InputInfoRec *pInfo,
-				      int flags);
+                    struct _InputInfoRec * pInfo, int flags);
     pointer		    module;
     char **		    default_options;
 } InputDriverRec, *InputDriverPtr;
@@ -88,14 +86,11 @@ typedef struct _InputInfoRec {
 
     Bool		    (*device_control)(DeviceIntPtr device, int what);
     void		    (*read_input)(struct _InputInfoRec *local);
-    int			    (*control_proc)(struct _InputInfoRec *local,
-					   xDeviceCtl *control);
-    int			    (*switch_mode)(ClientPtr client, DeviceIntPtr dev,
-					  int mode);
+    int (*control_proc) (struct _InputInfoRec * local, xDeviceCtl * control);
+    int (*switch_mode) (ClientPtr client, DeviceIntPtr dev, int mode);
     int                     (*set_device_valuators)
 				(struct _InputInfoRec *local,
-				 int *valuators, int first_valuator,
-				 int num_valuators);
+      int *valuators, int first_valuator, int num_valuators);
 
     int			    fd;
     DeviceIntPtr	    dev;
@@ -112,73 +107,95 @@ extern InputInfoPtr xf86InputDevs;
 
 /* xf86Xinput.c */
 extern _X_EXPORT void xf86PostMotionEvent(DeviceIntPtr device, int is_absolute,
-			 int first_valuator, int num_valuators, ...);
+                                          int first_valuator, int num_valuators,
+                                          ...);
 extern _X_EXPORT void xf86PostMotionEventP(DeviceIntPtr device, int is_absolute,
-			 int first_valuator, int num_valuators, const int *valuators);
+                                           int first_valuator,
+                                           int num_valuators,
+                                           const int *valuators);
 extern _X_EXPORT void xf86PostMotionEventM(DeviceIntPtr device, int is_absolute,
 			 const ValuatorMask *mask);
 extern _X_EXPORT void xf86PostProximityEvent(DeviceIntPtr device, int is_in,
-			    int first_valuator, int num_valuators, ...);
-extern _X_EXPORT void xf86PostProximityEventP(DeviceIntPtr device, int is_in, int first_valuator,
-			     int num_valuators, const int *valuators);
+                                             int first_valuator,
+                                             int num_valuators, ...);
+extern _X_EXPORT void xf86PostProximityEventP(DeviceIntPtr device, int is_in,
+                                              int first_valuator,
+                                              int num_valuators,
+                                              const int *valuators);
 extern _X_EXPORT void xf86PostProximityEventM(DeviceIntPtr device, int is_in,
 			 const ValuatorMask *mask);
-extern _X_EXPORT void xf86PostButtonEvent(DeviceIntPtr device, int is_absolute, int button,
-		    	 int is_down, int first_valuator, int num_valuators,
+extern _X_EXPORT void xf86PostButtonEvent(DeviceIntPtr device, int is_absolute,
+                                          int button, int is_down,
+                                          int first_valuator, int num_valuators,
 			 ...);
-extern _X_EXPORT void xf86PostButtonEventP(DeviceIntPtr device, int is_absolute, int button,
-			  int is_down, int first_valuator, int num_valuators,
+extern _X_EXPORT void xf86PostButtonEventP(DeviceIntPtr device, int is_absolute,
+                                           int button, int is_down,
+                                           int first_valuator,
+                                           int num_valuators,
 			  const int *valuators);
-extern _X_EXPORT void xf86PostButtonEventM(DeviceIntPtr device, int is_absolute, int button,
-			  int is_down, const ValuatorMask *mask);
-extern _X_EXPORT void xf86PostKeyEvent(DeviceIntPtr device, unsigned int key_code, int is_down,
-		      int is_absolute, int first_valuator, int num_valuators,
-		      ...);
-extern _X_EXPORT void xf86PostKeyEventM(DeviceIntPtr device, unsigned int key_code, int is_down,
-		       int is_absolute, const ValuatorMask *mask);
-extern _X_EXPORT void xf86PostKeyEventP(DeviceIntPtr device, unsigned int key_code, int is_down,
-		       int is_absolute, int first_valuator, int num_valuators,
+extern _X_EXPORT void xf86PostButtonEventM(DeviceIntPtr device, int is_absolute,
+                                           int button, int is_down,
+                                           const ValuatorMask *mask);
+extern _X_EXPORT void xf86PostKeyEvent(DeviceIntPtr device,
+                                       unsigned int key_code, int is_down,
+                                       int is_absolute, int first_valuator,
+                                       int num_valuators, ...);
+extern _X_EXPORT void xf86PostKeyEventM(DeviceIntPtr device,
+                                        unsigned int key_code, int is_down,
+                                        int is_absolute,
+                                        const ValuatorMask *mask);
+extern _X_EXPORT void xf86PostKeyEventP(DeviceIntPtr device,
+                                        unsigned int key_code, int is_down,
+                                        int is_absolute, int first_valuator,
+                                        int num_valuators,
 		       const int *valuators);
-extern _X_EXPORT void xf86PostKeyboardEvent(DeviceIntPtr device, unsigned int key_code,
-                           int is_down);
+extern _X_EXPORT void xf86PostKeyboardEvent(DeviceIntPtr device,
+                                            unsigned int key_code, int is_down);
 extern _X_EXPORT void xf86PostTouchEvent(DeviceIntPtr dev, uint32_t touchid,
                                          uint16_t type, uint32_t flags,
                                          const ValuatorMask *mask);
 extern _X_EXPORT InputInfoPtr xf86FirstLocalDevice(void);
-extern _X_EXPORT int xf86ScaleAxis(int Cx, int to_max, int to_min, int from_max, int from_min);
-extern _X_EXPORT void xf86ProcessCommonOptions(InputInfoPtr pInfo, XF86OptionPtr options);
-extern _X_EXPORT Bool xf86InitValuatorAxisStruct(DeviceIntPtr dev, int axnum, Atom label, int minval,
-				int maxval, int resolution, int min_res,
-				int max_res, int mode);
+extern _X_EXPORT int xf86ScaleAxis(int Cx, int to_max, int to_min, int from_max,
+                                   int from_min);
+extern _X_EXPORT void xf86ProcessCommonOptions(InputInfoPtr pInfo,
+                                               XF86OptionPtr options);
+extern _X_EXPORT Bool xf86InitValuatorAxisStruct(DeviceIntPtr dev, int axnum,
+                                                 Atom label, int minval,
+                                                 int maxval, int resolution,
+                                                 int min_res, int max_res,
+                                                 int mode);
 extern _X_EXPORT void xf86InitValuatorDefaults(DeviceIntPtr dev, int axnum);
 extern _X_EXPORT void xf86AddEnabledDevice(InputInfoPtr pInfo);
 extern _X_EXPORT void xf86RemoveEnabledDevice(InputInfoPtr pInfo);
 extern _X_EXPORT void xf86DisableDevice(DeviceIntPtr dev, Bool panic);
 extern _X_EXPORT void xf86EnableDevice(DeviceIntPtr dev);
+
 /* not exported */
 int xf86NewInputDevice(InputInfoPtr pInfo, DeviceIntPtr *pdev, BOOL is_auto);
 InputInfoPtr xf86AllocateInput(void);
 
 /* xf86Helper.c */
-extern _X_EXPORT void xf86AddInputDriver(InputDriverPtr driver, pointer module, int flags);
+extern _X_EXPORT void xf86AddInputDriver(InputDriverPtr driver, pointer module,
+                                         int flags);
 extern _X_EXPORT void xf86DeleteInputDriver(int drvIndex);
 extern _X_EXPORT InputDriverPtr xf86LookupInputDriver(const char *name);
 extern _X_EXPORT InputInfoPtr xf86LookupInput(const char *name);
 extern _X_EXPORT void xf86DeleteInput(InputInfoPtr pInp, int flags);
 extern _X_EXPORT void xf86MotionHistoryAllocate(InputInfoPtr pInfo);
-extern _X_EXPORT void xf86IDrvMsgVerb(InputInfoPtr dev,
-				      MessageType type, int verb,
-				      const char *format, ...) _X_ATTRIBUTE_PRINTF(4,5);
-extern _X_EXPORT void xf86IDrvMsg(InputInfoPtr dev,
-				  MessageType type,
-				  const char *format, ...) _X_ATTRIBUTE_PRINTF(3,4);
-extern _X_EXPORT void xf86VIDrvMsgVerb(InputInfoPtr dev,
-				       MessageType type,
-				       int verb,
-				       const char *format,
-				       va_list args) _X_ATTRIBUTE_PRINTF(4,0);
+extern _X_EXPORT void
+xf86IDrvMsgVerb(InputInfoPtr dev,
+                MessageType type, int verb, const char *format, ...)
+_X_ATTRIBUTE_PRINTF(4, 5);
+extern _X_EXPORT void
+xf86IDrvMsg(InputInfoPtr dev, MessageType type, const char *format, ...)
+_X_ATTRIBUTE_PRINTF(3, 4);
+extern _X_EXPORT void
+xf86VIDrvMsgVerb(InputInfoPtr dev,
+                 MessageType type, int verb, const char *format, va_list args)
+_X_ATTRIBUTE_PRINTF(4, 0);
 
 /* xf86Option.c */
-extern _X_EXPORT void xf86CollectInputOptions(InputInfoPtr pInfo, const char **defaultOpts);
+extern _X_EXPORT void
+xf86CollectInputOptions(InputInfoPtr pInfo, const char **defaultOpts);
 
 #endif /* _xf86Xinput_h */
