diff --git a/miext/rootless/rootless.h b/miext/rootless/rootless.h
index b2d8d0f..3d4a1b0 100644
--- a/miext/rootless/rootless.h
+++ b/miext/rootless/rootless.h
@@ -82,30 +82,8 @@ extern int rootlessGlobalOffsetY;
 /* The minimum number of bytes or pixels for which to use the
    implementation's accelerated functions. */
 extern unsigned int rootless_CopyBytes_threshold;
-extern unsigned int rootless_FillBytes_threshold;
-extern unsigned int rootless_CompositePixels_threshold;
 extern unsigned int rootless_CopyWindow_threshold;
 
-/* Operations used by CompositePixels */
-enum rl_composite_op_enum {
-    RL_COMPOSITE_SRC = 0,
-    RL_COMPOSITE_OVER,
-};
-
-/* Data formats for depth field and composite functions */
-enum rl_depth_enum {
-    RL_DEPTH_NIL = 0,			/* null source when compositing */
-    RL_DEPTH_ARGB8888,
-    RL_DEPTH_RGB555,
-    RL_DEPTH_A8,			/* for masks when compositing */
-    RL_DEPTH_INDEX8,
-};
-
-/* Macro to form the composite function for CompositePixels */
-#define RL_COMPOSITE_FUNCTION(op, src_depth, mask_depth, dest_depth) \
-    (((op) << 24) | ((src_depth) << 16) \
-     | ((mask_depth) << 8) | ((dest_depth) << 0))
-
 /* Gravity for window contents during resizing */
 enum rl_gravity_enum {
     RL_GRAVITY_NONE             = 0,	/* no gravity, fill everything */
@@ -292,44 +270,6 @@ typedef void (*RootlessCopyBytesProc)
      void *dst, unsigned int dstRowBytes);
 
 /*
- * Fill memory with 32-bit pattern. (Optional)
- *
- *  width       Bytes to fill per row
- *  height      Number of rows
- *  value       32-bit pattern to fill with
- *  dst         Destination data
- *  dstRowBytes Width of destination in bytes
- */
-typedef void (*RootlessFillBytesProc)
-    (unsigned int width, unsigned int height, unsigned int value,
-     void *dst, unsigned int dstRowBytes);
-
-/*
- * Composite pixels from source and mask to destination. (Optional)
- *
- *  width, height   Size of area to composite to in pizels
- *  function        Composite function built with RL_COMPOSITE_FUNCTION
- *  src             Source data
- *  srcRowBytes     Width of source in bytes (Passing NULL means source
- *                  is a single pixel.
- *  mask            Mask data
- *  maskRowBytes    Width of mask in bytes
- *  dst             Destination data
- *  dstRowBytes     Width of destination in bytes
- *
- *  For src and dst, the first element of the array is the color data. If
- *  the second element is non-null it implies there is alpha data (which
- *  may be meshed or planar). Data without alpha is assumed to be opaque.
- *
- *  An X11 error code is returned.
- */
-typedef int (*RootlessCompositePixelsProc)
-    (unsigned int width, unsigned int height, unsigned int function,
-     void *src[2], unsigned int srcRowBytes[2],
-     void *mask, unsigned int maskRowBytes,
-     void *dst[2], unsigned int dstRowBytes[2]);
-
-/*
  * Copy area in frame to another part of frame. (Optional)
  *
  *  wid         Frame id
@@ -374,8 +314,6 @@ typedef struct _RootlessFrameProcs {
 
     /* Optional acceleration functions */
     RootlessCopyBytesProc CopyBytes;
-    RootlessFillBytesProc FillBytes;
-    RootlessCompositePixelsProc CompositePixels;
     RootlessCopyWindowProc CopyWindow;
 } RootlessFrameProcsRec, *RootlessFrameProcsPtr;
 
@@ -386,13 +324,6 @@ typedef struct _RootlessFrameProcs {
 Bool RootlessInit(ScreenPtr pScreen, RootlessFrameProcsPtr procs);
 
 /*
- * Initialize acceleration for rootless mode on a given screen.
- *  Note: RootlessAccelInit() must be called before DamageSetup()
- *  and RootlessInit() must be called afterwards.
- */
-Bool RootlessAccelInit(ScreenPtr pScreen);
-
-/*
  * Return the frame ID for the physical window displaying the given window. 
  *
  *  create      If true and the window has no frame, attempt to create one
