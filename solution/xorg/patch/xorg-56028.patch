diff --git a/miext/rootless/rootlessCommon.c b/miext/rootless/rootlessCommon.c
index 861e8e8..d8f43bd 100644
--- a/miext/rootless/rootlessCommon.c
+++ b/miext/rootless/rootlessCommon.c
@@ -55,7 +55,6 @@ RegionRec rootlessHugeRoot = {{-32767, -32767, 32767, 32767}, NULL};
           ((r1)->y2 <= (r2)->y1)  || \
           ((r1)->y1 >= (r2)->y2) ) )
 
-
 /*
  * TopLevelParent
  *  Returns the top-level parent of pWindow.
@@ -77,7 +76,6 @@ TopLevelParent(WindowPtr pWindow)
     return top;
 }
 
-
 /*
  * IsFramedWindow
  *  Returns TRUE if this window is visible inside a frame
@@ -106,19 +104,22 @@ RootlessResolveColormap (ScreenPtr pScreen, int first_color,
   ColormapPtr map;
 
   map = RootlessGetColormap (pScreen);
-  if (map == NULL || map->class != PseudoColor) return FALSE;
+    if (map == NULL || map->class != PseudoColor)
+        return FALSE;
 
   last = min (map->pVisual->ColormapEntries, first_color + n_colors);
   for (i = max (0, first_color); i < last; i++) {
     Entry *ent = map->red + i;
     uint16_t red, green, blue;
 
-      if (!ent->refcnt)	continue;
+        if (!ent->refcnt)
+            continue;
       if (ent->fShared) {
 	red = ent->co.shco.red->color;
 	green = ent->co.shco.green->color;
 	blue = ent->co.shco.blue->color;
-      } else {
+        }
+        else {
 	red = ent->co.local.red;
 	green = ent->co.local.green;
 	blue = ent->co.local.blue;
@@ -133,14 +134,14 @@ RootlessResolveColormap (ScreenPtr pScreen, int first_color,
   return TRUE;
 }
 
-
 /*
  * RootlessStartDrawing
  *  Prepare a window for direct access to its backing buffer.
  *  Each top-level parent has a Pixmap representing its backing buffer,
  *  which all of its children inherit.
  */
-void RootlessStartDrawing(WindowPtr pWindow)
+void
+RootlessStartDrawing(WindowPtr pWindow)
 {
     ScreenPtr pScreen = pWindow->drawable.pScreen;
     WindowPtr top = TopLevelParent(pWindow);
@@ -164,8 +165,7 @@ void RootlessStartDrawing(WindowPtr pWindow)
             GetScratchPixmapHeader(pScreen, winRec->width, winRec->height,
                                    top->drawable.depth,
                                    top->drawable.bitsPerPixel,
-                                   winRec->bytesPerRow,
-                                   winRec->pixelData);
+                                   winRec->bytesPerRow, winRec->pixelData);
         SetPixmapBaseToScreen(winRec->pixmap,
                               top->drawable.x - bw, top->drawable.y - bw);
 
@@ -173,55 +173,67 @@ void RootlessStartDrawing(WindowPtr pWindow)
     }
 
     curPixmap = pScreen->GetWindowPixmap(pWindow);
-    if (curPixmap == winRec->pixmap)
-    {
-        RL_DEBUG_MSG("Window %p already has winRec->pixmap %p; not pushing\n", pWindow, winRec->pixmap);
-    }
-    else
-    {
-        PixmapPtr oldPixmap = dixLookupPrivate(&pWindow->devPrivates, rootlessWindowOldPixmapPrivateKey);
-        if (oldPixmap != NULL)
-        {
+    if (curPixmap == winRec->pixmap) {
+        RL_DEBUG_MSG("Window %p already has winRec->pixmap %p; not pushing\n",
+                     pWindow, winRec->pixmap);
+    }
+    else {
+        PixmapPtr oldPixmap =
+            dixLookupPrivate(&pWindow->devPrivates,
+                             rootlessWindowOldPixmapPrivateKey);
+        if (oldPixmap != NULL) {
             if (oldPixmap == curPixmap)
-                RL_DEBUG_MSG("Window %p's curPixmap %p is the same as its oldPixmap; strange\n", pWindow, curPixmap);
+                RL_DEBUG_MSG
+                    ("Window %p's curPixmap %p is the same as its oldPixmap; strange\n",
+                     pWindow, curPixmap);
             else
-                RL_DEBUG_MSG("Window %p's existing oldPixmap %p being lost!\n", pWindow, oldPixmap);
+                RL_DEBUG_MSG("Window %p's existing oldPixmap %p being lost!\n",
+                             pWindow, oldPixmap);
         }
-	dixSetPrivate(&pWindow->devPrivates, rootlessWindowOldPixmapPrivateKey, curPixmap);
+        dixSetPrivate(&pWindow->devPrivates, rootlessWindowOldPixmapPrivateKey,
+                      curPixmap);
         pScreen->SetWindowPixmap(pWindow, winRec->pixmap);
     }
 }
 
-
 /*
  * RootlessStopDrawing
  *  Stop drawing to a window's backing buffer. If flush is true,
  *  damaged regions are flushed to the screen.
  */
-static int RestorePreDrawingPixmapVisitor(WindowPtr pWindow, pointer data)
+static int
+RestorePreDrawingPixmapVisitor(WindowPtr pWindow, pointer data)
 {
     RootlessWindowRec *winRec = (RootlessWindowRec*)data;
     ScreenPtr pScreen = pWindow->drawable.pScreen;
     PixmapPtr exPixmap = pScreen->GetWindowPixmap(pWindow);
-    PixmapPtr oldPixmap = dixLookupPrivate(&pWindow->devPrivates, rootlessWindowOldPixmapPrivateKey);
-    if (oldPixmap == NULL)
-    {
+    PixmapPtr oldPixmap =
+        dixLookupPrivate(&pWindow->devPrivates,
+                         rootlessWindowOldPixmapPrivateKey);
+    if (oldPixmap == NULL) {
         if (exPixmap == winRec->pixmap)
-            RL_DEBUG_MSG("Window %p appears to be in drawing mode (ex-pixmap %p equals winRec->pixmap, which is being freed) but has no oldPixmap!\n", pWindow, exPixmap);
+            RL_DEBUG_MSG
+                ("Window %p appears to be in drawing mode (ex-pixmap %p equals winRec->pixmap, which is being freed) but has no oldPixmap!\n",
+                 pWindow, exPixmap);
     }
-    else
-    {
+    else {
         if (exPixmap != winRec->pixmap)
-            RL_DEBUG_MSG("Window %p appears to be in drawing mode (oldPixmap %p) but ex-pixmap %p not winRec->pixmap %p!\n", pWindow, oldPixmap, exPixmap, winRec->pixmap);
+            RL_DEBUG_MSG
+                ("Window %p appears to be in drawing mode (oldPixmap %p) but ex-pixmap %p not winRec->pixmap %p!\n",
+                 pWindow, oldPixmap, exPixmap, winRec->pixmap);
         if (oldPixmap == winRec->pixmap)
-            RL_DEBUG_MSG("Window %p's oldPixmap %p is winRec->pixmap, which has just been freed!\n", pWindow, oldPixmap);
+            RL_DEBUG_MSG
+                ("Window %p's oldPixmap %p is winRec->pixmap, which has just been freed!\n",
+                 pWindow, oldPixmap);
         pScreen->SetWindowPixmap(pWindow, oldPixmap);
-        dixSetPrivate(&pWindow->devPrivates, rootlessWindowOldPixmapPrivateKey, NULL);
+        dixSetPrivate(&pWindow->devPrivates, rootlessWindowOldPixmapPrivateKey,
+                      NULL);
     }
     return WT_WALKCHILDREN;
 }
 
-void RootlessStopDrawing(WindowPtr pWindow, Bool flush)
+void
+RootlessStopDrawing(WindowPtr pWindow, Bool flush)
 {
     ScreenPtr pScreen = pWindow->drawable.pScreen;
     WindowPtr top = TopLevelParent(pWindow);
@@ -252,7 +264,6 @@ void RootlessStopDrawing(WindowPtr pWindow, Bool flush)
     }
 }
 
-
 /*
  * RootlessDamageRegion
  *  Mark a damaged region as requiring redisplay to screen.
@@ -296,16 +307,20 @@ RootlessDamageRegion(WindowPtr pWindow, RegionPtr pRegion)
             /* Damaged region only has a single rect, so we can
                just compare that against the region */
 
-            in = RegionContainsRect(&pWindow->borderClip,
-                                RegionRects (pRegion));
+            in = RegionContainsRect(&pWindow->borderClip, RegionRects(pRegion));
             if (in == rgnIN) {
             /* clip totally contains pRegion */
 
-                SCREENREC(pWindow->drawable.pScreen)->imp->
-                    DamageRects(winRec->wid,
-                                RegionNumRects(pRegion),
-                                RegionRects(pRegion),
-                                -winRec->x, -winRec->y);
+                SCREENREC(pWindow->drawable.pScreen)->imp->DamageRects(winRec->
+                                                                       wid,
+                                                                       RegionNumRects
+                                                                       (pRegion),
+                                                                       RegionRects
+                                                                       (pRegion),
+                                                                       -winRec->
+                                                                       x,
+                                                                       -winRec->
+                                                                       y);
 
                 RootlessQueueRedisplay(pTop->drawable.pScreen);
                 goto out;
@@ -322,11 +337,13 @@ RootlessDamageRegion(WindowPtr pWindow, RegionPtr pRegion)
         RegionNull(&clipped);
         RegionIntersect(&clipped, &pWindow->borderClip, pRegion);
 
-        SCREENREC(pWindow->drawable.pScreen)->imp->
-            DamageRects(winRec->wid,
-                        RegionNumRects(&clipped),
-                        RegionRects(&clipped),
-                        -winRec->x, -winRec->y);
+        SCREENREC(pWindow->drawable.pScreen)->imp->DamageRects(winRec->wid,
+                                                               RegionNumRects
+                                                               (&clipped),
+                                                               RegionRects
+                                                               (&clipped),
+                                                               -winRec->x,
+                                                               -winRec->y);
 
         RegionUninit(&clipped);
 
@@ -348,7 +365,6 @@ out:
     return;
 }
 
-
 /*
  * RootlessDamageBox
  *  Mark a damaged box as requiring redisplay to screen.
@@ -366,7 +382,6 @@ RootlessDamageBox(WindowPtr pWindow, BoxPtr pBox)
     RegionUninit(&region);  /* no-op */
 }
 
-
 /*
  * RootlessDamageRect
  *  Mark a damaged rectangle as requiring redisplay to screen.
@@ -393,7 +408,6 @@ RootlessDamageRect(WindowPtr pWindow, int x, int y, int w, int h)
     RegionUninit(&region);  /* no-op */
 }
 
-
 /*
  * RootlessRedisplay
  *  Stop drawing and redisplay the damaged region of a window.
@@ -404,7 +418,6 @@ RootlessRedisplay(WindowPtr pWindow)
     RootlessStopDrawing(pWindow, TRUE);
 }
 
-
 /*
  * RootlessRepositionWindows
  *  Reposition all windows on a screen to their correct positions.
@@ -425,7 +438,6 @@ RootlessRepositionWindows(ScreenPtr pScreen)
     }
 }
 
-
 /*
  * RootlessRedisplayScreen
  *  Walk every window on a screen and redisplay the damaged regions.
