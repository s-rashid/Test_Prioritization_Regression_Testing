diff --git a/dix/property.c b/dix/property.c
index 713507a..3c0eaf1 100644
--- a/dix/property.c
+++ b/dix/property.c
@@ -135,31 +135,31 @@ ProcRotateProperties(ClientPtr client)
     if (!stuff->nAtoms)
 	return(Success);
     atoms = (Atom *) & stuff[1];
-    props = (PropertyPtr *)ALLOCATE_LOCAL(stuff->nAtoms * sizeof(PropertyPtr));
+    props = (PropertyPtr *)xalloc(stuff->nAtoms * sizeof(PropertyPtr));
     if (!props)
 	return(BadAlloc);
     for (i = 0; i < stuff->nAtoms; i++)
     {
         if (!ValidAtom(atoms[i])) {
-            DEALLOCATE_LOCAL(props);
+            xfree(props);
 	    client->errorValue = atoms[i];
             return BadAtom;
         }
         for (j = i + 1; j < stuff->nAtoms; j++)
             if (atoms[j] == atoms[i])
             {
-                DEALLOCATE_LOCAL(props);
+                xfree(props);
                 return BadMatch;
             }
 	pProp = FindProperty(pWin, atoms[i]);
 	if (!pProp) {
-	    DEALLOCATE_LOCAL(props);
+	    xfree(props);
 	    return BadMatch;
 	}
 	rc = XaceHook(XACE_PROPERTY_ACCESS, client, pWin, pProp,
 		      DixReadAccess|DixWriteAccess);
 	if (rc != Success) {
-            DEALLOCATE_LOCAL(props);
+	    xfree(props);
 	    client->errorValue = atoms[i];
             return rc;
 	}
@@ -182,7 +182,7 @@ ProcRotateProperties(ClientPtr client)
             props[i]->propertyName = atoms[(i + delta) % stuff->nAtoms];
 	}
     }
-    DEALLOCATE_LOCAL(props);
+    xfree(props);
     return Success;
 }
 
@@ -600,7 +600,7 @@ ProcListProperties(ClientPtr client)
 	numProps++;
     }
     if (numProps)
-        if(!(pAtoms = (Atom *)ALLOCATE_LOCAL(numProps * sizeof(Atom))))
+        if(!(pAtoms = (Atom *)xalloc(numProps * sizeof(Atom))))
             return(BadAlloc);
 
     xlpr.type = X_Reply;
@@ -619,7 +619,7 @@ ProcListProperties(ClientPtr client)
     {
         client->pSwapReplyFunc = (ReplySwapPtr)Swap32Write;
         WriteSwappedDataToClient(client, numProps * sizeof(Atom), pAtoms);
-        DEALLOCATE_LOCAL(pAtoms);
+        xfree(pAtoms);
     }
     return(client->noClientException);
 }
