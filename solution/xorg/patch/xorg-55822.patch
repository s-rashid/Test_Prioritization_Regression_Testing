diff --git a/hw/xwin/ddraw.h b/hw/xwin/ddraw.h
index 9d87b2b..9463049 100644
--- a/hw/xwin/ddraw.h
+++ b/hw/xwin/ddraw.h
@@ -29,22 +29,38 @@ extern "C" {
 /*****************************************************************************
  * Predeclare the interfaces
  */
-DEFINE_GUID( CLSID_DirectDraw,		0xD7B70EE0,0x4340,0x11CF,0xB0,0x63,0x00,0x20,0xAF,0xC2,0xCD,0x35 );
-DEFINE_GUID( CLSID_DirectDraw7,         0x3C305196,0x50DB,0x11D3,0x9C,0xFE,0x00,0xC0,0x4F,0xD9,0x30,0xC5 );
-DEFINE_GUID( CLSID_DirectDrawClipper,	0x593817A0,0x7DB3,0x11CF,0xA2,0xDE,0x00,0xAA,0x00,0xb9,0x33,0x56 );
-DEFINE_GUID( IID_IDirectDraw,		0x6C14DB80,0xA733,0x11CE,0xA5,0x21,0x00,0x20,0xAF,0x0B,0xE5,0x60 );
-DEFINE_GUID( IID_IDirectDraw2,		0xB3A6F3E0,0x2B43,0x11CF,0xA2,0xDE,0x00,0xAA,0x00,0xB9,0x33,0x56 );
-DEFINE_GUID( IID_IDirectDraw4,          0x9c59509a,0x39bd,0x11d1,0x8c,0x4a,0x00,0xc0,0x4f,0xd9,0x30,0xc5 );
-DEFINE_GUID( IID_IDirectDraw7,          0x15e65ec0,0x3b9c,0x11d2,0xb9,0x2f,0x00,0x60,0x97,0x97,0xea,0x5b );
-DEFINE_GUID( IID_IDirectDrawSurface,	0x6C14DB81,0xA733,0x11CE,0xA5,0x21,0x00,0x20,0xAF,0x0B,0xE5,0x60 );
-DEFINE_GUID( IID_IDirectDrawSurface2,	0x57805885,0x6eec,0x11cf,0x94,0x41,0xa8,0x23,0x03,0xc1,0x0e,0x27 );
-DEFINE_GUID( IID_IDirectDrawSurface3,	0xDA044E00,0x69B2,0x11D0,0xA1,0xD5,0x00,0xAA,0x00,0xB8,0xDF,0xBB );
-DEFINE_GUID( IID_IDirectDrawSurface4,   0x0B2B8630,0xAD35,0x11D0,0x8E,0xA6,0x00,0x60,0x97,0x97,0xEA,0x5B );
-DEFINE_GUID( IID_IDirectDrawSurface7,   0x06675a80,0x3b9b,0x11d2,0xb9,0x2f,0x00,0x60,0x97,0x97,0xea,0x5b );
-DEFINE_GUID( IID_IDirectDrawPalette,	0x6C14DB84,0xA733,0x11CE,0xA5,0x21,0x00,0x20,0xAF,0x0B,0xE5,0x60 );
-DEFINE_GUID( IID_IDirectDrawClipper,	0x6C14DB85,0xA733,0x11CE,0xA5,0x21,0x00,0x20,0xAF,0x0B,0xE5,0x60 );
-DEFINE_GUID( IID_IDirectDrawColorControl,0x4B9F0EE0,0x0D7E,0x11D0,0x9B,0x06,0x00,0xA0,0xC9,0x03,0xA3,0xB8 );
-DEFINE_GUID( IID_IDirectDrawGammaControl,0x69C11C3E,0xB46B,0x11D1,0xAD,0x7A,0x00,0xC0,0x4F,0xC2,0x9B,0x4E );
+    DEFINE_GUID(CLSID_DirectDraw, 0xD7B70EE0, 0x4340, 0x11CF, 0xB0, 0x63, 0x00,
+                0x20, 0xAF, 0xC2, 0xCD, 0x35);
+    DEFINE_GUID(CLSID_DirectDraw7, 0x3C305196, 0x50DB, 0x11D3, 0x9C, 0xFE, 0x00,
+                0xC0, 0x4F, 0xD9, 0x30, 0xC5);
+    DEFINE_GUID(CLSID_DirectDrawClipper, 0x593817A0, 0x7DB3, 0x11CF, 0xA2, 0xDE,
+                0x00, 0xAA, 0x00, 0xb9, 0x33, 0x56);
+    DEFINE_GUID(IID_IDirectDraw, 0x6C14DB80, 0xA733, 0x11CE, 0xA5, 0x21, 0x00,
+                0x20, 0xAF, 0x0B, 0xE5, 0x60);
+    DEFINE_GUID(IID_IDirectDraw2, 0xB3A6F3E0, 0x2B43, 0x11CF, 0xA2, 0xDE, 0x00,
+                0xAA, 0x00, 0xB9, 0x33, 0x56);
+    DEFINE_GUID(IID_IDirectDraw4, 0x9c59509a, 0x39bd, 0x11d1, 0x8c, 0x4a, 0x00,
+                0xc0, 0x4f, 0xd9, 0x30, 0xc5);
+    DEFINE_GUID(IID_IDirectDraw7, 0x15e65ec0, 0x3b9c, 0x11d2, 0xb9, 0x2f, 0x00,
+                0x60, 0x97, 0x97, 0xea, 0x5b);
+    DEFINE_GUID(IID_IDirectDrawSurface, 0x6C14DB81, 0xA733, 0x11CE, 0xA5, 0x21,
+                0x00, 0x20, 0xAF, 0x0B, 0xE5, 0x60);
+    DEFINE_GUID(IID_IDirectDrawSurface2, 0x57805885, 0x6eec, 0x11cf, 0x94, 0x41,
+                0xa8, 0x23, 0x03, 0xc1, 0x0e, 0x27);
+    DEFINE_GUID(IID_IDirectDrawSurface3, 0xDA044E00, 0x69B2, 0x11D0, 0xA1, 0xD5,
+                0x00, 0xAA, 0x00, 0xB8, 0xDF, 0xBB);
+    DEFINE_GUID(IID_IDirectDrawSurface4, 0x0B2B8630, 0xAD35, 0x11D0, 0x8E, 0xA6,
+                0x00, 0x60, 0x97, 0x97, 0xEA, 0x5B);
+    DEFINE_GUID(IID_IDirectDrawSurface7, 0x06675a80, 0x3b9b, 0x11d2, 0xb9, 0x2f,
+                0x00, 0x60, 0x97, 0x97, 0xea, 0x5b);
+    DEFINE_GUID(IID_IDirectDrawPalette, 0x6C14DB84, 0xA733, 0x11CE, 0xA5, 0x21,
+                0x00, 0x20, 0xAF, 0x0B, 0xE5, 0x60);
+    DEFINE_GUID(IID_IDirectDrawClipper, 0x6C14DB85, 0xA733, 0x11CE, 0xA5, 0x21,
+                0x00, 0x20, 0xAF, 0x0B, 0xE5, 0x60);
+    DEFINE_GUID(IID_IDirectDrawColorControl, 0x4B9F0EE0, 0x0D7E, 0x11D0, 0x9B,
+                0x06, 0x00, 0xA0, 0xC9, 0x03, 0xA3, 0xB8);
+    DEFINE_GUID(IID_IDirectDrawGammaControl, 0x69C11C3E, 0xB46B, 0x11D1, 0xAD,
+                0x7A, 0x00, 0xC0, 0x4F, 0xC2, 0x9B, 0x4E);
 
 typedef struct IDirectDraw *LPDIRECTDRAW;
 typedef struct IDirectDraw2 *LPDIRECTDRAW2;
@@ -60,13 +76,11 @@ typedef struct IDirectDrawSurface7 *LPDIRECTDRAWSURFACE7;
 typedef struct IDirectDrawColorControl *LPDIRECTDRAWCOLORCONTROL;
 typedef struct IDirectDrawGammaControl *LPDIRECTDRAWGAMMACONTROL;
 
-
 #define DDENUMRET_CANCEL	0
 #define DDENUMRET_OK		1
 
 #define DD_OK			0
 
-
 #define _FACDD		0x876
 #define MAKE_DDHRESULT( code )  MAKE_HRESULT( 1, _FACDD, code )
 
@@ -362,8 +376,7 @@ typedef struct _DDSCAPS2 {
 
 #define	DD_ROP_SPACE	(256/32)	/* space required to store ROP array */
 
-typedef struct _DDCAPS_DX7		/* DirectX 7 version of caps struct */
-{
+    typedef struct _DDCAPS_DX7 {        /* DirectX 7 version of caps struct */
     DWORD	dwSize;                 /* size of the DDDRIVERCAPS structure */
     DWORD	dwCaps;                 /* driver specific capabilities */
     DWORD	dwCaps2;                /* more driver specific capabilites */
@@ -423,8 +436,7 @@ typedef struct _DDCAPS_DX7		/* DirectX 7 version of caps struct */
     DDSCAPS2    ddsCaps;		/* surface capabilities */
 } DDCAPS_DX7,*LPDDCAPS_DX7;
 
-typedef struct _DDCAPS_DX6		/* DirectX 6 version of caps struct */
-{
+    typedef struct _DDCAPS_DX6 {        /* DirectX 6 version of caps struct */
     DWORD	dwSize;                 /* size of the DDDRIVERCAPS structure */
     DWORD	dwCaps;                 /* driver specific capabilities */
     DWORD	dwCaps2;                /* more driver specific capabilites */
@@ -485,8 +497,7 @@ typedef struct _DDCAPS_DX6		/* DirectX 6 version of caps struct */
     DDSCAPS2    ddsCaps;		/* surface capabilities */
 } DDCAPS_DX6,*LPDDCAPS_DX6;
 
-typedef struct _DDCAPS_DX5		/* DirectX5 version of caps struct */
-{
+    typedef struct _DDCAPS_DX5 {        /* DirectX5 version of caps struct */
     DWORD	dwSize;                 /* size of the DDDRIVERCAPS structure */
     DWORD	dwCaps;                 /* driver specific capabilities */
     DWORD	dwCaps2;                /* more driver specific capabilites */
@@ -546,8 +557,7 @@ typedef struct _DDCAPS_DX5		/* DirectX5 version of caps struct */
     DWORD   	dwNLVBRops[DD_ROP_SPACE]; /* ROPS supported for non-local->local blts */
 } DDCAPS_DX5,*LPDDCAPS_DX5;
 
-typedef struct _DDCAPS_DX3		/* DirectX3 version of caps struct */
-{
+    typedef struct _DDCAPS_DX3 {        /* DirectX3 version of caps struct */
     DWORD	dwSize;                 /* size of the DDDRIVERCAPS structure */
     DWORD	dwCaps;                 /* driver specific capabilities */
     DWORD	dwCaps2;                /* more driver specific capabilites */
@@ -676,7 +686,6 @@ typedef DDCAPS *LPDDCAPS;
 #define DDCAPS2_STEREO                  0x02000000
 #define DDCAPS2_SYSTONONLOCAL_AS_SYSTOLOCAL   0x04000000
 
-
 /* Set/Get Colour Key Flags */
 #define DDCKEY_COLORSPACE  0x00000001  /* Struct is single colour space */
 #define DDCKEY_DESTBLT     0x00000002  /* To be used as dest for blt */
@@ -684,8 +693,7 @@ typedef DDCAPS *LPDDCAPS;
 #define DDCKEY_SRCBLT      0x00000008  /* To be used as src for blt */
 #define DDCKEY_SRCOVERLAY  0x00000010  /* To be used as src for CK overlays */
 
-typedef struct _DDCOLORKEY
-{
+    typedef struct _DDCOLORKEY {
 	DWORD	dwColorSpaceLowValue;/* low boundary of color space that is to
                                       * be treated as Color Key, inclusive
 				      */
@@ -902,7 +910,6 @@ typedef struct _DDPIXELFORMAT {
 #define DDSCL_FPUSETUP                  0x00000800
 #define DDSCL_FPUPRESERVE               0x00001000
 
-
 /* DDSURFACEDESC.dwFlags */
 #define	DDSD_CAPS		0x00000001
 #define	DDSD_HEIGHT		0x00000002
@@ -945,8 +952,7 @@ typedef struct _DDPIXELFORMAT {
 #define DDWAITVB_BLOCKBEGINEVENT	0x00000002
 #define DDWAITVB_BLOCKEND		0x00000004
 
-typedef struct _DDSURFACEDESC
-{
+    typedef struct _DDSURFACEDESC {
 	DWORD	dwSize;		/* 0: size of the DDSURFACEDESC structure*/
 	DWORD	dwFlags;	/* 4: determines what fields are valid*/
 	DWORD	dwHeight;	/* 8: height of surface to be created*/
@@ -972,8 +978,7 @@ typedef struct _DDSURFACEDESC
 	DDSCAPS		ddsCaps;	/* 68: direct draw surface caps */
 } DDSURFACEDESC,*LPDDSURFACEDESC;
 
-typedef struct _DDSURFACEDESC2
-{
+    typedef struct _DDSURFACEDESC2 {
 	DWORD	dwSize;		/* 0: size of the DDSURFACEDESC structure*/
 	DWORD	dwFlags;	/* 4: determines what fields are valid*/
 	DWORD	dwHeight;	/* 8: height of surface to be created*/
@@ -1040,17 +1045,28 @@ typedef BOOL CALLBACK (*LPDDENUMCALLBACKW)(GUID *, LPWSTR, LPWSTR, LPVOID);
 DECL_WINELIB_TYPE_AW(LPDDENUMCALLBACK)
 
 typedef HRESULT CALLBACK (*LPDDENUMMODESCALLBACK)(LPDDSURFACEDESC, LPVOID);
-typedef HRESULT CALLBACK (*LPDDENUMMODESCALLBACK2)(LPDDSURFACEDESC2, LPVOID);
-typedef HRESULT CALLBACK (*LPDDENUMSURFACESCALLBACK)(LPDIRECTDRAWSURFACE, LPDDSURFACEDESC, LPVOID);
-typedef HRESULT CALLBACK (*LPDDENUMSURFACESCALLBACK2)(LPDIRECTDRAWSURFACE4, LPDDSURFACEDESC2, LPVOID);
-typedef HRESULT CALLBACK (*LPDDENUMSURFACESCALLBACK7)(LPDIRECTDRAWSURFACE7, LPDDSURFACEDESC2, LPVOID);
-
-typedef BOOL CALLBACK (*LPDDENUMCALLBACKEXA)(GUID *, LPSTR, LPSTR, LPVOID, HMONITOR);
-typedef BOOL CALLBACK (*LPDDENUMCALLBACKEXW)(GUID *, LPWSTR, LPWSTR, LPVOID, HMONITOR);
+    typedef HRESULT CALLBACK(*LPDDENUMMODESCALLBACK2) (LPDDSURFACEDESC2,
+                                                       LPVOID);
+    typedef HRESULT CALLBACK(*LPDDENUMSURFACESCALLBACK) (LPDIRECTDRAWSURFACE,
+                                                         LPDDSURFACEDESC,
+                                                         LPVOID);
+    typedef HRESULT CALLBACK(*LPDDENUMSURFACESCALLBACK2) (LPDIRECTDRAWSURFACE4,
+                                                          LPDDSURFACEDESC2,
+                                                          LPVOID);
+    typedef HRESULT CALLBACK(*LPDDENUMSURFACESCALLBACK7) (LPDIRECTDRAWSURFACE7,
+                                                          LPDDSURFACEDESC2,
+                                                          LPVOID);
+
+    typedef BOOL CALLBACK(*LPDDENUMCALLBACKEXA) (GUID *, LPSTR, LPSTR, LPVOID,
+                                                 HMONITOR);
+    typedef BOOL CALLBACK(*LPDDENUMCALLBACKEXW) (GUID *, LPWSTR, LPWSTR, LPVOID,
+                                                 HMONITOR);
 DECL_WINELIB_TYPE_AW(LPDDENUMCALLBACKEX)
 
-HRESULT WINAPI DirectDrawEnumerateExA( LPDDENUMCALLBACKEXA lpCallback, LPVOID lpContext, DWORD dwFlags);
-HRESULT WINAPI DirectDrawEnumerateExW( LPDDENUMCALLBACKEXW lpCallback, LPVOID lpContext, DWORD dwFlags);
+    HRESULT WINAPI DirectDrawEnumerateExA(LPDDENUMCALLBACKEXA lpCallback,
+                                          LPVOID lpContext, DWORD dwFlags);
+    HRESULT WINAPI DirectDrawEnumerateExW(LPDDENUMCALLBACKEXW lpCallback,
+                                          LPVOID lpContext, DWORD dwFlags);
 #define DirectDrawEnumerateEx WINELIB_NAME_AW(DirectDrawEnumerateEx)
 
 /* flags for DirectDrawEnumerateEx */
@@ -1062,8 +1078,7 @@ HRESULT WINAPI DirectDrawEnumerateExW( LPDDENUMCALLBACKEXW lpCallback, LPVOID lp
 #define DDCREATE_HARDWAREONLY	1L
 #define DDCREATE_EMULATIONONLY	2L
 
-typedef struct _DDBLTFX
-{
+    typedef struct _DDBLTFX {
     DWORD       dwSize;                         /* size of structure */
     DWORD       dwDDFX;                         /* FX operations */
     DWORD       dwROP;                          /* Win32 raster operations */
@@ -1074,14 +1089,12 @@ typedef struct _DDBLTFX
     DWORD       dwZBufferHigh;                  /* High limit of Z buffer */
     DWORD       dwZBufferBaseDest;              /* Destination base value */
     DWORD       dwZDestConstBitDepth;           /* Bit depth used to specify Z constant for destination */
-    union
-    {
+        union {
         DWORD   dwZDestConst;                   /* Constant to use as Z buffer for dest */
         LPDIRECTDRAWSURFACE lpDDSZBufferDest;   /* Surface to use as Z buffer for dest */
     } DUMMYUNIONNAME1;
     DWORD       dwZSrcConstBitDepth;            /* Bit depth used to specify Z constant for source */
-    union
-    {
+        union {
         DWORD   dwZSrcConst;                    /* Constant to use as Z buffer for src */
         LPDIRECTDRAWSURFACE lpDDSZBufferSrc;    /* Surface to use as Z buffer for src */
     } DUMMYUNIONNAME2;
@@ -1089,19 +1102,16 @@ typedef struct _DDBLTFX
     DWORD       dwAlphaEdgeBlend;               /* Alpha for edge blending */
     DWORD       dwReserved;
     DWORD       dwAlphaDestConstBitDepth;       /* Bit depth used to specify alpha constant for destination */
-    union
-    {
+        union {
         DWORD   dwAlphaDestConst;               /* Constant to use as Alpha Channel */
         LPDIRECTDRAWSURFACE lpDDSAlphaDest;     /* Surface to use as Alpha Channel */
     } DUMMYUNIONNAME3;
     DWORD       dwAlphaSrcConstBitDepth;        /* Bit depth used to specify alpha constant for source */
-    union
-    {
+        union {
         DWORD   dwAlphaSrcConst;                /* Constant to use as Alpha Channel */
         LPDIRECTDRAWSURFACE lpDDSAlphaSrc;      /* Surface to use as Alpha Channel */
     } DUMMYUNIONNAME4;
-    union
-    {
+        union {
         DWORD   dwFillColor;                    /* color in RGB or Palettized */
         DWORD   dwFillDepth;                    /* depth value for z-buffer */
 	DWORD   dwFillPixel;			/* pixel val for RGBA or RGBZ */
@@ -1131,21 +1141,18 @@ typedef struct _DDBLTFX
 /* add dwZBufferBaseDest to every source z value before compare */
 #define DDBLTFX_ZBUFFERBASEDEST			0x00000100
 
-typedef struct _DDOVERLAYFX
-{
+    typedef struct _DDOVERLAYFX {
     DWORD       dwSize;                         /* size of structure */
     DWORD       dwAlphaEdgeBlendBitDepth;       /* Bit depth used to specify constant for alpha edge blend */
     DWORD       dwAlphaEdgeBlend;               /* Constant to use as alpha for edge blend */
     DWORD       dwReserved;
     DWORD       dwAlphaDestConstBitDepth;       /* Bit depth used to specify alpha constant for destination */
-    union
-    {
+        union {
         DWORD   dwAlphaDestConst;               /* Constant to use as alpha channel for dest */
         LPDIRECTDRAWSURFACE lpDDSAlphaDest;     /* Surface to use as alpha channel for dest */
     } DUMMYUNIONNAME1;
     DWORD       dwAlphaSrcConstBitDepth;        /* Bit depth used to specify alpha constant for source */
-    union
-    {
+        union {
         DWORD   dwAlphaSrcConst;                /* Constant to use as alpha channel for src */
         LPDIRECTDRAWSURFACE lpDDSAlphaSrc;      /* Surface to use as alpha channel for src */
     } DUMMYUNIONNAME2;
@@ -1155,8 +1162,7 @@ typedef struct _DDOVERLAYFX
     DWORD       dwFlags;                        /* flags */
 } DDOVERLAYFX,*LPDDOVERLAYFX;
 
-typedef struct _DDBLTBATCH
-{
+    typedef struct _DDBLTBATCH {
     LPRECT		lprDest;
     LPDIRECTDRAWSURFACE	lpDDSSrc;
     LPRECT		lprSrc;
@@ -1194,15 +1200,18 @@ typedef struct tagDDDEVICEIDENTIFIER2 {
  */
 #undef INTERFACE
 #define INTERFACE IDirectDrawPalette
-DECLARE_INTERFACE_(IDirectDrawPalette,IUnknown)
-{
+     DECLARE_INTERFACE_(IDirectDrawPalette, IUnknown) {
     STDMETHOD(QueryInterface)(THIS_ REFIID,PVOID*) PURE;
     STDMETHOD_(ULONG,AddRef)(THIS) PURE;
     STDMETHOD_(ULONG,Release)(THIS) PURE;
     STDMETHOD(GetCaps)(THIS_ LPDWORD lpdwCaps) PURE;
-    STDMETHOD(GetEntries)(THIS_ DWORD dwFlags, DWORD dwBase, DWORD dwNumEntries, LPPALETTEENTRY lpEntries) PURE;
-    STDMETHOD(Initialize)(THIS_ LPDIRECTDRAW lpDD, DWORD dwFlags, LPPALETTEENTRY lpDDColorTable) PURE;
-    STDMETHOD(SetEntries)(THIS_ DWORD dwFlags, DWORD dwStartingEntry, DWORD dwCount, LPPALETTEENTRY lpEntries) PURE;
+        STDMETHOD(GetEntries) (THIS_ DWORD dwFlags, DWORD dwBase,
+                               DWORD dwNumEntries,
+                               LPPALETTEENTRY lpEntries) PURE;
+        STDMETHOD(Initialize) (THIS_ LPDIRECTDRAW lpDD, DWORD dwFlags,
+                               LPPALETTEENTRY lpDDColorTable) PURE;
+        STDMETHOD(SetEntries) (THIS_ DWORD dwFlags, DWORD dwStartingEntry,
+                               DWORD dwCount, LPPALETTEENTRY lpEntries) PURE;
 };
 
     /*** IUnknown methods ***/
@@ -1215,18 +1224,17 @@ DECLARE_INTERFACE_(IDirectDrawPalette,IUnknown)
 #define IDirectDrawPalette_Initialize(p,a,b,c)   ICOM_CALL_(Initialize,p,(p,a,b,c))
 #define IDirectDrawPalette_SetEntries(p,a,b,c,d) ICOM_CALL_(SetEntries,p,(p,a,b,c,d))
 
-
 /*****************************************************************************
  * IDirectDrawClipper interface
  */
 #undef INTERFACE
 #define INTERFACE IDirectDrawClipper
-DECLARE_INTERFACE_(IDirectDrawClipper,IUnknown)
-{
+    DECLARE_INTERFACE_(IDirectDrawClipper, IUnknown) {
     STDMETHOD(QueryInterface)(THIS_ REFIID,LPVOID*) PURE;
     STDMETHOD_(ULONG,AddRef)(THIS) PURE;
     STDMETHOD_(ULONG,Release)(THIS) PURE;
-    STDMETHOD(GetClipList)(THIS_ LPRECT lpRect, LPRGNDATA lpClipList, LPDWORD lpdwSize) PURE;
+        STDMETHOD(GetClipList) (THIS_ LPRECT lpRect, LPRGNDATA lpClipList,
+                                LPDWORD lpdwSize) PURE;
     STDMETHOD(GetHWnd)(THIS_ HWND* lphWnd) PURE;
     STDMETHOD(Initialize)(THIS_ LPDIRECTDRAW lpDD, DWORD dwFlags) PURE;
     STDMETHOD(IsClipListChanged)(THIS_ BOOL* lpbChanged) PURE;
@@ -1246,29 +1254,46 @@ DECLARE_INTERFACE_(IDirectDrawClipper,IUnknown)
 #define IDirectDrawClipper_SetClipList(p,a,b)     ICOM_CALL_(SetClipList,p,(p,a,b))
 #define IDirectDrawClipper_SetHWnd(p,a,b)         ICOM_CALL_(SetHWnd,p,(p,a,b))
 
-
 /*****************************************************************************
  * IDirectDraw interface
  */
 #undef INTERFACE
 #define INTERFACE IDirectDraw
-DECLARE_INTERFACE_(IDirectDraw,IUnknown)
-{
+    DECLARE_INTERFACE_(IDirectDraw, IUnknown) {
     STDMETHOD(QueryInterface)(THIS_ REFIID,LPVOID*) PURE;
     STDMETHOD_(ULONG,AddRef)(THIS) PURE;
     STDMETHOD_(ULONG,Release)(THIS) PURE;
     STDMETHOD(Compact)(THIS) PURE;
-    STDMETHOD(CreateClipper)(THIS_ DWORD dwFlags, LPDIRECTDRAWCLIPPER* lplpDDClipper, IUnknown* pUnkOuter) PURE;
-    STDMETHOD(CreatePalette)(THIS_ DWORD dwFlags, LPPALETTEENTRY lpColorTable, LPDIRECTDRAWPALETTE* lplpDDPalette, IUnknown* pUnkOuter) PURE;
-    STDMETHOD(CreateSurface)(THIS_ LPDDSURFACEDESC lpDDSurfaceDesc, LPDIRECTDRAWSURFACE* lplpDDSurface, IUnknown* pUnkOuter) PURE;
-    STDMETHOD(DuplicateSurface)(THIS_ LPDIRECTDRAWSURFACE lpDDSurface, LPDIRECTDRAWSURFACE* lplpDupDDSurface) PURE;
-    STDMETHOD(EnumDisplayModes)(THIS_ DWORD dwFlags, LPDDSURFACEDESC lpDDSurfaceDesc, LPVOID lpContext, LPDDENUMMODESCALLBACK lpEnumModesCallback) PURE;
-    STDMETHOD(EnumSurfaces)(THIS_ DWORD dwFlags, LPDDSURFACEDESC lpDDSD, LPVOID lpContext, LPDDENUMSURFACESCALLBACK lpEnumSurfacesCallback) PURE;
+        STDMETHOD(CreateClipper) (THIS_ DWORD dwFlags,
+                                  LPDIRECTDRAWCLIPPER * lplpDDClipper,
+                                  IUnknown * pUnkOuter) PURE;
+        STDMETHOD(CreatePalette) (THIS_ DWORD dwFlags,
+                                  LPPALETTEENTRY lpColorTable,
+                                  LPDIRECTDRAWPALETTE * lplpDDPalette,
+                                  IUnknown * pUnkOuter) PURE;
+        STDMETHOD(CreateSurface) (THIS_ LPDDSURFACEDESC lpDDSurfaceDesc,
+                                  LPDIRECTDRAWSURFACE * lplpDDSurface,
+                                  IUnknown * pUnkOuter) PURE;
+        STDMETHOD(DuplicateSurface) (THIS_ LPDIRECTDRAWSURFACE lpDDSurface,
+                                     LPDIRECTDRAWSURFACE *
+                                     lplpDupDDSurface) PURE;
+        STDMETHOD(EnumDisplayModes) (THIS_ DWORD dwFlags,
+                                     LPDDSURFACEDESC lpDDSurfaceDesc,
+                                     LPVOID lpContext,
+                                     LPDDENUMMODESCALLBACK lpEnumModesCallback)
+            PURE;
+        STDMETHOD(EnumSurfaces) (THIS_ DWORD dwFlags, LPDDSURFACEDESC lpDDSD,
+                                 LPVOID lpContext,
+                                 LPDDENUMSURFACESCALLBACK
+                                 lpEnumSurfacesCallback) PURE;
     STDMETHOD(FlipToGDISurface)(THIS) PURE;
-    STDMETHOD(GetCaps)(THIS_ LPDDCAPS lpDDDriverCaps, LPDDCAPS lpDDHELCaps) PURE;
+        STDMETHOD(GetCaps) (THIS_ LPDDCAPS lpDDDriverCaps,
+                            LPDDCAPS lpDDHELCaps) PURE;
     STDMETHOD(GetDisplayMode)(THIS_ LPDDSURFACEDESC lpDDSurfaceDesc) PURE;
-    STDMETHOD(GetFourCCCodes)(THIS_ LPDWORD lpNumCodes, LPDWORD lpCodes) PURE;
-    STDMETHOD(GetGDISurface)(THIS_ LPDIRECTDRAWSURFACE* lplpGDIDDSurface) PURE;
+        STDMETHOD(GetFourCCCodes) (THIS_ LPDWORD lpNumCodes,
+                                   LPDWORD lpCodes) PURE;
+        STDMETHOD(GetGDISurface) (THIS_ LPDIRECTDRAWSURFACE *
+                                  lplpGDIDDSurface) PURE;
     STDMETHOD(GetMonitorFrequency)(THIS_ LPDWORD lpdwFrequency) PURE;
     STDMETHOD(GetScanLine)(THIS_ LPDWORD lpdwScanLine) PURE;
     STDMETHOD(GetVerticalBlankStatus)(THIS_ BOOL* lpbIsInVB) PURE;
@@ -1276,7 +1301,8 @@ DECLARE_INTERFACE_(IDirectDraw,IUnknown)
     STDMETHOD(RestoreDisplayMode)(THIS) PURE;
     STDMETHOD(SetCooperativeLevel)(THIS_ HWND hWnd, DWORD dwFlags) PURE;
     STDMETHOD(SetDisplayMode)(THIS_ DWORD, DWORD, DWORD) PURE;
-    STDMETHOD(WaitForVerticalBlank)(THIS_ DWORD dwFlags, HANDLE hEvent) PURE;
+        STDMETHOD(WaitForVerticalBlank) (THIS_ DWORD dwFlags,
+                                         HANDLE hEvent) PURE;
 };
 
     /*** IUnknown methods ***/
@@ -1305,7 +1331,6 @@ DECLARE_INTERFACE_(IDirectDraw,IUnknown)
 #define IDirectDraw_SetDisplayMode(p,a,b,c)     ICOM_CALL_(SetDisplayMode,p,(p,a,b,c))
 #define IDirectDraw_WaitForVerticalBlank(p,a,b) ICOM_CALL_(WaitForVerticalBlank,p,(p,a,b))
 
-
 /* flags for Lock() */
 #define DDLOCK_SURFACEMEMORYPTR	0x00000000
 #define DDLOCK_WAIT		0x00000001
@@ -1314,7 +1339,6 @@ DECLARE_INTERFACE_(IDirectDraw,IUnknown)
 #define DDLOCK_WRITEONLY	0x00000020
 #define DDLOCK_NOSYSLOCK	0x00000800
 
-
 /*****************************************************************************
  * IDirectDraw2 interface
  */
@@ -1323,33 +1347,56 @@ DECLARE_INTERFACE_(IDirectDraw,IUnknown)
  */
 #undef INTERFACE
 #define INTERFACE IDirectDraw2
-DECLARE_INTERFACE_(IDirectDraw2,IUnknown)
-{
+    DECLARE_INTERFACE_(IDirectDraw2, IUnknown) {
     STDMETHOD(QueryInterface)(THIS_ REFIID,LPVOID*) PURE;
     STDMETHOD_(ULONG,AddRef)(THIS) PURE;
     STDMETHOD_(ULONG,Release)(THIS) PURE;
     STDMETHOD(Compact)(THIS) PURE; 
-    STDMETHOD(CreateClipper)(THIS_ DWORD dwFlags, LPDIRECTDRAWCLIPPER* lplpDDClipper, IUnknown* pUnkOuter) PURE; 
-    STDMETHOD(CreatePalette)(THIS_ DWORD dwFlags, LPPALETTEENTRY lpColorTable, LPDIRECTDRAWPALETTE* lplpDDPalette, IUnknown* pUnkOuter) PURE; 
-    STDMETHOD(CreateSurface)(THIS_ LPDDSURFACEDESC lpDDSurfaceDesc, LPDIRECTDRAWSURFACE2* lplpDDSurface, IUnknown* pUnkOuter) PURE; 
-    STDMETHOD(DuplicateSurface)(THIS_ LPDIRECTDRAWSURFACE2 lpDDSurface, LPDIRECTDRAWSURFACE2* lplpDupDDSurface) PURE; 
-    STDMETHOD(EnumDisplayModes)(THIS_ DWORD dwFlags, LPDDSURFACEDESC lpDDSurfaceDesc, LPVOID lpContext, LPDDENUMMODESCALLBACK lpEnumModesCallback) PURE; 
-    STDMETHOD(EnumSurfaces)(THIS_ DWORD dwFlags, LPDDSURFACEDESC lpDDSD, LPVOID lpContext, LPDDENUMSURFACESCALLBACK lpEnumSurfacesCallback) PURE; 
+        STDMETHOD(CreateClipper) (THIS_ DWORD dwFlags,
+                                  LPDIRECTDRAWCLIPPER * lplpDDClipper,
+                                  IUnknown * pUnkOuter) PURE;
+        STDMETHOD(CreatePalette) (THIS_ DWORD dwFlags,
+                                  LPPALETTEENTRY lpColorTable,
+                                  LPDIRECTDRAWPALETTE * lplpDDPalette,
+                                  IUnknown * pUnkOuter) PURE;
+        STDMETHOD(CreateSurface) (THIS_ LPDDSURFACEDESC lpDDSurfaceDesc,
+                                  LPDIRECTDRAWSURFACE2 * lplpDDSurface,
+                                  IUnknown * pUnkOuter) PURE;
+        STDMETHOD(DuplicateSurface) (THIS_ LPDIRECTDRAWSURFACE2 lpDDSurface,
+                                     LPDIRECTDRAWSURFACE2 *
+                                     lplpDupDDSurface) PURE;
+        STDMETHOD(EnumDisplayModes) (THIS_ DWORD dwFlags,
+                                     LPDDSURFACEDESC lpDDSurfaceDesc,
+                                     LPVOID lpContext,
+                                     LPDDENUMMODESCALLBACK lpEnumModesCallback)
+            PURE;
+        STDMETHOD(EnumSurfaces) (THIS_ DWORD dwFlags, LPDDSURFACEDESC lpDDSD,
+                                 LPVOID lpContext,
+                                 LPDDENUMSURFACESCALLBACK
+                                 lpEnumSurfacesCallback) PURE;
     STDMETHOD(FlipToGDISurface)(THIS) PURE; 
-    STDMETHOD(GetCaps)(THIS_ LPDDCAPS lpDDDriverCaps, LPDDCAPS lpDDHELCaps) PURE; 
+        STDMETHOD(GetCaps) (THIS_ LPDDCAPS lpDDDriverCaps,
+                            LPDDCAPS lpDDHELCaps) PURE;
     STDMETHOD(GetDisplayMode)(THIS_ LPDDSURFACEDESC lpDDSurfaceDesc) PURE; 
-    STDMETHOD(GetFourCCCodes)(THIS_ LPDWORD lpNumCodes, LPDWORD lpCodes) PURE; 
-    STDMETHOD(GetGDISurface)(THIS_ LPDIRECTDRAWSURFACE2* lplpGDIDDSurface) PURE; 
+        STDMETHOD(GetFourCCCodes) (THIS_ LPDWORD lpNumCodes,
+                                   LPDWORD lpCodes) PURE;
+        STDMETHOD(GetGDISurface) (THIS_ LPDIRECTDRAWSURFACE2 *
+                                  lplpGDIDDSurface) PURE;
     STDMETHOD(GetMonitorFrequency)(THIS_ LPDWORD lpdwFrequency) PURE; 
     STDMETHOD(GetScanLine)(THIS_ LPDWORD lpdwScanLine) PURE; 
     STDMETHOD(GetVerticalBlankStatus)(THIS_ BOOL* lpbIsInVB) PURE; 
     STDMETHOD(Initialize)(THIS_ GUID* lpGUID) PURE; 
     STDMETHOD(RestoreDisplayMode)(THIS) PURE; 
     STDMETHOD(SetCooperativeLevel)(THIS_ HWND hWnd, DWORD dwFlags) PURE; 
-    STDMETHOD(SetDisplayMode)(THIS_ DWORD dwWidth, DWORD dwHeight, DWORD dwBPP, DWORD dwRefreshRate, DWORD dwFlags) PURE; 
-    STDMETHOD(WaitForVerticalBlank)(THIS_ DWORD dwFlags, HANDLE hEvent) PURE; 
-           
-    STDMETHOD(GetAvailableVidMem)(THIS_ LPDDSCAPS lpDDCaps, LPDWORD lpdwTotal, LPDWORD lpdwFree) PURE;
+        STDMETHOD(SetDisplayMode) (THIS_ DWORD dwWidth, DWORD dwHeight,
+                                   DWORD dwBPP, DWORD dwRefreshRate,
+                                   DWORD dwFlags) PURE;
+        STDMETHOD(WaitForVerticalBlank) (THIS_ DWORD dwFlags,
+                                         HANDLE hEvent) PURE;
+
+        STDMETHOD(GetAvailableVidMem) (THIS_ LPDDSCAPS lpDDCaps,
+                                       LPDWORD lpdwTotal,
+                                       LPDWORD lpdwFree) PURE;
 };
 
     /*** IUnknown methods ***/
@@ -1380,39 +1427,61 @@ DECLARE_INTERFACE_(IDirectDraw2,IUnknown)
 /*** IDirectDraw2 methods ***/
 #define IDirectDraw2_GetAvailableVidMem(p,a,b,c) ICOM_CALL_(GetAvailableVidMem,p,(p,a,b,c))
 
-
 /*****************************************************************************
  * IDirectDraw4 interface
  */
 #undef INTERFACE
 #define INTERFACE IDirectDraw4
-DECLARE_INTERFACE_(IDirectDraw4,IUnknown)
-{
+    DECLARE_INTERFACE_(IDirectDraw4, IUnknown) {
     STDMETHOD(QueryInterface)(THIS_ REFIID,LPVOID*) PURE;
     STDMETHOD_(ULONG,AddRef)(THIS) PURE;
     STDMETHOD_(ULONG,Release)(THIS) PURE;
     STDMETHOD(Compact)(THIS) PURE; 
-    STDMETHOD(CreateClipper)(THIS_ DWORD dwFlags, LPDIRECTDRAWCLIPPER* lplpDDClipper, IUnknown* pUnkOuter) PURE; 
-    STDMETHOD(CreatePalette)(THIS_ DWORD dwFlags, LPPALETTEENTRY lpColorTable, LPDIRECTDRAWPALETTE* lplpDDPalette, IUnknown* pUnkOuter) PURE; 
-    STDMETHOD(CreateSurface)(THIS_ LPDDSURFACEDESC2 lpDDSurfaceDesc, LPDIRECTDRAWSURFACE4* lplpDDSurface, IUnknown* pUnkOuter) PURE; 
-    STDMETHOD(DuplicateSurface)(THIS_ LPDIRECTDRAWSURFACE4 lpDDSurface, LPDIRECTDRAWSURFACE4* lplpDupDDSurface) PURE; 
-    STDMETHOD(EnumDisplayModes)(THIS_ DWORD dwFlags, LPDDSURFACEDESC2 lpDDSurfaceDesc, LPVOID lpContext, LPDDENUMMODESCALLBACK2 lpEnumModesCallback) PURE; 
-    STDMETHOD(EnumSurfaces)(THIS_ DWORD dwFlags, LPDDSURFACEDESC2 lpDDSD, LPVOID lpContext, LPDDENUMSURFACESCALLBACK2 lpEnumSurfacesCallback) PURE; 
+        STDMETHOD(CreateClipper) (THIS_ DWORD dwFlags,
+                                  LPDIRECTDRAWCLIPPER * lplpDDClipper,
+                                  IUnknown * pUnkOuter) PURE;
+        STDMETHOD(CreatePalette) (THIS_ DWORD dwFlags,
+                                  LPPALETTEENTRY lpColorTable,
+                                  LPDIRECTDRAWPALETTE * lplpDDPalette,
+                                  IUnknown * pUnkOuter) PURE;
+        STDMETHOD(CreateSurface) (THIS_ LPDDSURFACEDESC2 lpDDSurfaceDesc,
+                                  LPDIRECTDRAWSURFACE4 * lplpDDSurface,
+                                  IUnknown * pUnkOuter) PURE;
+        STDMETHOD(DuplicateSurface) (THIS_ LPDIRECTDRAWSURFACE4 lpDDSurface,
+                                     LPDIRECTDRAWSURFACE4 *
+                                     lplpDupDDSurface) PURE;
+        STDMETHOD(EnumDisplayModes) (THIS_ DWORD dwFlags,
+                                     LPDDSURFACEDESC2 lpDDSurfaceDesc,
+                                     LPVOID lpContext,
+                                     LPDDENUMMODESCALLBACK2 lpEnumModesCallback)
+            PURE;
+        STDMETHOD(EnumSurfaces) (THIS_ DWORD dwFlags, LPDDSURFACEDESC2 lpDDSD,
+                                 LPVOID lpContext,
+                                 LPDDENUMSURFACESCALLBACK2
+                                 lpEnumSurfacesCallback) PURE;
     STDMETHOD(FlipToGDISurface)(THIS) PURE; 
-    STDMETHOD(GetCaps)(THIS_ LPDDCAPS lpDDDriverCaps, LPDDCAPS lpDDHELCaps) PURE; 
+        STDMETHOD(GetCaps) (THIS_ LPDDCAPS lpDDDriverCaps,
+                            LPDDCAPS lpDDHELCaps) PURE;
     STDMETHOD(GetDisplayMode)(THIS_ LPDDSURFACEDESC2 lpDDSurfaceDesc) PURE; 
-    STDMETHOD(GetFourCCCodes)(THIS_ LPDWORD lpNumCodes, LPDWORD lpCodes) PURE; 
-    STDMETHOD(GetGDISurface)(THIS_ LPDIRECTDRAWSURFACE4* lplpGDIDDSurface) PURE; 
+        STDMETHOD(GetFourCCCodes) (THIS_ LPDWORD lpNumCodes,
+                                   LPDWORD lpCodes) PURE;
+        STDMETHOD(GetGDISurface) (THIS_ LPDIRECTDRAWSURFACE4 *
+                                  lplpGDIDDSurface) PURE;
     STDMETHOD(GetMonitorFrequency)(THIS_ LPDWORD lpdwFrequency) PURE; 
     STDMETHOD(GetScanLine)(THIS_ LPDWORD lpdwScanLine) PURE; 
     STDMETHOD(GetVerticalBlankStatus)(THIS_ BOOL* lpbIsInVB) PURE; 
     STDMETHOD(Initialize)(THIS_ GUID* lpGUID) PURE; 
     STDMETHOD(RestoreDisplayMode)(THIS) PURE; 
     STDMETHOD(SetCooperativeLevel)(THIS_ HWND hWnd, DWORD dwFlags) PURE; 
-    STDMETHOD(SetDisplayMode)(THIS_ DWORD dwWidth, DWORD dwHeight, DWORD dwBPP, DWORD dwRefreshRate, DWORD dwFlags) PURE; 
-    STDMETHOD(WaitForVerticalBlank)(THIS_ DWORD dwFlags, HANDLE hEvent) PURE; 
+        STDMETHOD(SetDisplayMode) (THIS_ DWORD dwWidth, DWORD dwHeight,
+                                   DWORD dwBPP, DWORD dwRefreshRate,
+                                   DWORD dwFlags) PURE;
+        STDMETHOD(WaitForVerticalBlank) (THIS_ DWORD dwFlags,
+                                         HANDLE hEvent) PURE;
            
-    STDMETHOD(GetAvailableVidMem)(THIS_ LPDDSCAPS2 lpDDCaps, LPDWORD lpdwTotal, LPDWORD lpdwFree) PURE; 
+        STDMETHOD(GetAvailableVidMem) (THIS_ LPDDSCAPS2 lpDDCaps,
+                                       LPDWORD lpdwTotal,
+                                       LPDWORD lpdwFree) PURE;
      
     STDMETHOD(GetSurfaceFromDC)(THIS_ HDC , LPDIRECTDRAWSURFACE4* ) PURE; 
     STDMETHOD(RestoreAllSurfaces)(THIS) PURE; 
@@ -1453,7 +1522,6 @@ DECLARE_INTERFACE_(IDirectDraw4,IUnknown)
 #define IDirectDraw4_TestCooperativeLevel(p)    ICOM_CALL_(TestCooperativeLevel,p,(p))
 #define IDirectDraw4_GetDeviceIdentifier(p,a,b) ICOM_CALL_(GetDeviceIdentifier,p,(p,a,b))
 
-
 /*****************************************************************************
  * IDirectDraw7 interface
  */
@@ -1462,38 +1530,62 @@ DECLARE_INTERFACE_(IDirectDraw4,IUnknown)
  */
 #undef INTERFACE
 #define INTERFACE IDirectDraw7
-DECLARE_INTERFACE_(IDirectDraw7,IUnknown)
-{
+    DECLARE_INTERFACE_(IDirectDraw7, IUnknown) {
     STDMETHOD(QueryInterface)(THIS_ REFIID,LPVOID*) PURE;
     STDMETHOD_(ULONG,AddRef)(THIS) PURE;
     STDMETHOD_(ULONG,Release)(THIS) PURE;
     STDMETHOD(Compact)(THIS) PURE; 
-    STDMETHOD(CreateClipper)(THIS_ DWORD dwFlags, LPDIRECTDRAWCLIPPER* lplpDDClipper, IUnknown* pUnkOuter) PURE; 
-    STDMETHOD(CreatePalette)(THIS_ DWORD dwFlags, LPPALETTEENTRY lpColorTable, LPDIRECTDRAWPALETTE* lplpDDPalette, IUnknown* pUnkOuter) PURE; 
-    STDMETHOD(CreateSurface)(THIS_ LPDDSURFACEDESC2 lpDDSurfaceDesc, LPDIRECTDRAWSURFACE7* lplpDDSurface, IUnknown* pUnkOuter) PURE; 
-    STDMETHOD(DuplicateSurface)(THIS_ LPDIRECTDRAWSURFACE7 lpDDSurface, LPDIRECTDRAWSURFACE7* lplpDupDDSurface) PURE; 
-    STDMETHOD(EnumDisplayModes)(THIS_ DWORD dwFlags, LPDDSURFACEDESC2 lpDDSurfaceDesc, LPVOID lpContext, LPDDENUMMODESCALLBACK2 lpEnumModesCallback) PURE; 
-    STDMETHOD(EnumSurfaces)(THIS_ DWORD dwFlags, LPDDSURFACEDESC2 lpDDSD, LPVOID lpContext, LPDDENUMSURFACESCALLBACK7 lpEnumSurfacesCallback) PURE; 
+        STDMETHOD(CreateClipper) (THIS_ DWORD dwFlags,
+                                  LPDIRECTDRAWCLIPPER * lplpDDClipper,
+                                  IUnknown * pUnkOuter) PURE;
+        STDMETHOD(CreatePalette) (THIS_ DWORD dwFlags,
+                                  LPPALETTEENTRY lpColorTable,
+                                  LPDIRECTDRAWPALETTE * lplpDDPalette,
+                                  IUnknown * pUnkOuter) PURE;
+        STDMETHOD(CreateSurface) (THIS_ LPDDSURFACEDESC2 lpDDSurfaceDesc,
+                                  LPDIRECTDRAWSURFACE7 * lplpDDSurface,
+                                  IUnknown * pUnkOuter) PURE;
+        STDMETHOD(DuplicateSurface) (THIS_ LPDIRECTDRAWSURFACE7 lpDDSurface,
+                                     LPDIRECTDRAWSURFACE7 *
+                                     lplpDupDDSurface) PURE;
+        STDMETHOD(EnumDisplayModes) (THIS_ DWORD dwFlags,
+                                     LPDDSURFACEDESC2 lpDDSurfaceDesc,
+                                     LPVOID lpContext,
+                                     LPDDENUMMODESCALLBACK2 lpEnumModesCallback)
+            PURE;
+        STDMETHOD(EnumSurfaces) (THIS_ DWORD dwFlags, LPDDSURFACEDESC2 lpDDSD,
+                                 LPVOID lpContext,
+                                 LPDDENUMSURFACESCALLBACK7
+                                 lpEnumSurfacesCallback) PURE;
     STDMETHOD(FlipToGDISurface)(THIS) PURE; 
-    STDMETHOD(GetCaps)(THIS_ LPDDCAPS lpDDDriverCaps, LPDDCAPS lpDDHELCaps) PURE; 
+        STDMETHOD(GetCaps) (THIS_ LPDDCAPS lpDDDriverCaps,
+                            LPDDCAPS lpDDHELCaps) PURE;
     STDMETHOD(GetDisplayMode)(THIS_ LPDDSURFACEDESC2 lpDDSurfaceDesc) PURE; 
-    STDMETHOD(GetFourCCCodes)(THIS_ LPDWORD lpNumCodes, LPDWORD lpCodes) PURE; 
-    STDMETHOD(GetGDISurface)(THIS_ LPDIRECTDRAWSURFACE7* lplpGDIDDSurface) PURE; 
+        STDMETHOD(GetFourCCCodes) (THIS_ LPDWORD lpNumCodes,
+                                   LPDWORD lpCodes) PURE;
+        STDMETHOD(GetGDISurface) (THIS_ LPDIRECTDRAWSURFACE7 *
+                                  lplpGDIDDSurface) PURE;
     STDMETHOD(GetMonitorFrequency)(THIS_ LPDWORD lpdwFrequency) PURE; 
     STDMETHOD(GetScanLine)(THIS_ LPDWORD lpdwScanLine) PURE; 
     STDMETHOD(GetVerticalBlankStatus)(THIS_ BOOL* lpbIsInVB) PURE; 
     STDMETHOD(Initialize)(THIS_ GUID* lpGUID) PURE; 
     STDMETHOD(RestoreDisplayMode)(THIS) PURE; 
     STDMETHOD(SetCooperativeLevel)(THIS_ HWND hWnd, DWORD dwFlags) PURE; 
-    STDMETHOD(SetDisplayMode)(THIS_ DWORD dwWidth, DWORD dwHeight, DWORD dwBPP, DWORD dwRefreshRate, DWORD dwFlags) PURE; 
-    STDMETHOD(WaitForVerticalBlank)(THIS_ DWORD dwFlags, HANDLE hEvent) PURE; 
+        STDMETHOD(SetDisplayMode) (THIS_ DWORD dwWidth, DWORD dwHeight,
+                                   DWORD dwBPP, DWORD dwRefreshRate,
+                                   DWORD dwFlags) PURE;
+        STDMETHOD(WaitForVerticalBlank) (THIS_ DWORD dwFlags,
+                                         HANDLE hEvent) PURE;
            
-    STDMETHOD(GetAvailableVidMem)(THIS_ LPDDSCAPS2 lpDDCaps, LPDWORD lpdwTotal, LPDWORD lpdwFree) PURE; 
+        STDMETHOD(GetAvailableVidMem) (THIS_ LPDDSCAPS2 lpDDCaps,
+                                       LPDWORD lpdwTotal,
+                                       LPDWORD lpdwFree) PURE;
            
     STDMETHOD(GetSurfaceFromDC)(THIS_ HDC , LPDIRECTDRAWSURFACE7* ) PURE; 
     STDMETHOD(RestoreAllSurfaces)(THIS) PURE; 
     STDMETHOD(TestCooperativeLevel)(THIS) PURE; 
-    STDMETHOD(GetDeviceIdentifier)(THIS_ LPDDDEVICEIDENTIFIER2 , DWORD ) PURE; 
+        STDMETHOD(GetDeviceIdentifier) (THIS_ LPDDDEVICEIDENTIFIER2,
+                                        DWORD) PURE;
            
     STDMETHOD(StartModeTest)(THIS_ LPSIZE , DWORD , DWORD ) PURE; 
     STDMETHOD(EvaluateMode)(THIS_ DWORD , DWORD * ) PURE;
@@ -1535,50 +1627,73 @@ DECLARE_INTERFACE_(IDirectDraw7,IUnknown)
 #define IDirectDraw7_StartModeTest(p,a,b,c)     ICOM_CALL_(StartModeTest,p,(p,a,b,c))
 #define IDirectDraw7_EvaluateMode(p,a,b)        ICOM_CALL_(EvaluateMode,p,(p,a,b))
 
-
 /*****************************************************************************
  * IDirectDrawSurface interface
  */
 #undef INTERFACE
 #define INTERFACE IDirectDrawSurface
-DECLARE_INTERFACE_(IDirectDrawSurface,IUnknown)
-{
+    DECLARE_INTERFACE_(IDirectDrawSurface, IUnknown) {
     STDMETHOD(QueryInterface)(THIS_ REFIID,LPVOID*) PURE;
     STDMETHOD_(ULONG,AddRef)(THIS) PURE;
     STDMETHOD_(ULONG,Release)(THIS) PURE; 
-    STDMETHOD(AddAttachedSurface)(THIS_ LPDIRECTDRAWSURFACE lpDDSAttachedSurface) PURE; 
+        STDMETHOD(AddAttachedSurface) (THIS_ LPDIRECTDRAWSURFACE
+                                       lpDDSAttachedSurface) PURE;
     STDMETHOD(AddOverlayDirtyRect)(THIS_ LPRECT lpRect) PURE; 
-    STDMETHOD(Blt)(THIS_ LPRECT lpDestRect, LPDIRECTDRAWSURFACE lpDDSrcSurface, LPRECT lpSrcRect, DWORD dwFlags, LPDDBLTFX lpDDBltFx) PURE; 
-    STDMETHOD(BltBatch)(THIS_ LPDDBLTBATCH lpDDBltBatch, DWORD dwCount, DWORD dwFlags) PURE; 
-    STDMETHOD(BltFast)(THIS_ DWORD dwX, DWORD dwY, LPDIRECTDRAWSURFACE lpDDSrcSurface, LPRECT lpSrcRect, DWORD dwTrans) PURE; 
-    STDMETHOD(DeleteAttachedSurface)(THIS_ DWORD dwFlags, LPDIRECTDRAWSURFACE lpDDSAttachedSurface) PURE; 
-    STDMETHOD(EnumAttachedSurfaces)(THIS_ LPVOID lpContext, LPDDENUMSURFACESCALLBACK lpEnumSurfacesCallback) PURE; 
-    STDMETHOD(EnumOverlayZOrders)(THIS_ DWORD dwFlags, LPVOID lpContext, LPDDENUMSURFACESCALLBACK lpfnCallback) PURE; 
-    STDMETHOD(Flip)(THIS_ LPDIRECTDRAWSURFACE lpDDSurfaceTargetOverride, DWORD dwFlags) PURE; 
-    STDMETHOD(GetAttachedSurface)(THIS_ LPDDSCAPS lpDDSCaps, LPDIRECTDRAWSURFACE* lplpDDAttachedSurface) PURE; 
+        STDMETHOD(Blt) (THIS_ LPRECT lpDestRect,
+                        LPDIRECTDRAWSURFACE lpDDSrcSurface, LPRECT lpSrcRect,
+                        DWORD dwFlags, LPDDBLTFX lpDDBltFx) PURE;
+        STDMETHOD(BltBatch) (THIS_ LPDDBLTBATCH lpDDBltBatch, DWORD dwCount,
+                             DWORD dwFlags) PURE;
+        STDMETHOD(BltFast) (THIS_ DWORD dwX, DWORD dwY,
+                            LPDIRECTDRAWSURFACE lpDDSrcSurface,
+                            LPRECT lpSrcRect, DWORD dwTrans) PURE;
+        STDMETHOD(DeleteAttachedSurface) (THIS_ DWORD dwFlags,
+                                          LPDIRECTDRAWSURFACE
+                                          lpDDSAttachedSurface) PURE;
+        STDMETHOD(EnumAttachedSurfaces) (THIS_ LPVOID lpContext,
+                                         LPDDENUMSURFACESCALLBACK
+                                         lpEnumSurfacesCallback) PURE;
+        STDMETHOD(EnumOverlayZOrders) (THIS_ DWORD dwFlags, LPVOID lpContext,
+                                       LPDDENUMSURFACESCALLBACK lpfnCallback)
+            PURE;
+        STDMETHOD(Flip) (THIS_ LPDIRECTDRAWSURFACE lpDDSurfaceTargetOverride,
+                         DWORD dwFlags) PURE;
+        STDMETHOD(GetAttachedSurface) (THIS_ LPDDSCAPS lpDDSCaps,
+                                       LPDIRECTDRAWSURFACE *
+                                       lplpDDAttachedSurface) PURE;
     STDMETHOD(GetBltStatus)(THIS_ DWORD dwFlags) PURE; 
     STDMETHOD(GetCaps)(THIS_ LPDDSCAPS lpDDSCaps) PURE; 
     STDMETHOD(GetClipper)(THIS_ LPDIRECTDRAWCLIPPER* lplpDDClipper) PURE; 
-    STDMETHOD(GetColorKey)(THIS_ DWORD dwFlags, LPDDCOLORKEY lpDDColorKey) PURE; 
+        STDMETHOD(GetColorKey) (THIS_ DWORD dwFlags,
+                                LPDDCOLORKEY lpDDColorKey) PURE;
     STDMETHOD(GetDC)(THIS_ HDC* lphDC) PURE; 
     STDMETHOD(GetFlipStatus)(THIS_ DWORD dwFlags) PURE; 
     STDMETHOD(GetOverlayPosition)(THIS_ LPLONG lplX, LPLONG lplY) PURE; 
     STDMETHOD(GetPalette)(THIS_ LPDIRECTDRAWPALETTE* lplpDDPalette) PURE; 
     STDMETHOD(GetPixelFormat)(THIS_ LPDDPIXELFORMAT lpDDPixelFormat) PURE; 
     STDMETHOD(GetSurfaceDesc)(THIS_ LPDDSURFACEDESC lpDDSurfaceDesc) PURE; 
-    STDMETHOD(Initialize)(THIS_ LPDIRECTDRAW lpDD, LPDDSURFACEDESC lpDDSurfaceDesc) PURE; 
+        STDMETHOD(Initialize) (THIS_ LPDIRECTDRAW lpDD,
+                               LPDDSURFACEDESC lpDDSurfaceDesc) PURE;
     STDMETHOD(IsLost)(THIS) PURE; 
-    STDMETHOD(Lock)(THIS_ LPRECT lpDestRect, LPDDSURFACEDESC lpDDSurfaceDesc, DWORD dwFlags, HANDLE hEvent) PURE; 
+        STDMETHOD(Lock) (THIS_ LPRECT lpDestRect,
+                         LPDDSURFACEDESC lpDDSurfaceDesc, DWORD dwFlags,
+                         HANDLE hEvent) PURE;
     STDMETHOD(ReleaseDC)(THIS_ HDC hDC) PURE; 
     STDMETHOD(Restore)(THIS) PURE; 
     STDMETHOD(SetClipper)(THIS_ LPDIRECTDRAWCLIPPER lpDDClipper) PURE; 
-    STDMETHOD(SetColorKey)(THIS_ DWORD dwFlags, LPDDCOLORKEY lpDDColorKey) PURE; 
+        STDMETHOD(SetColorKey) (THIS_ DWORD dwFlags,
+                                LPDDCOLORKEY lpDDColorKey) PURE;
     STDMETHOD(SetOverlayPosition)(THIS_ LONG lX, LONG lY) PURE; 
     STDMETHOD(SetPalette)(THIS_ LPDIRECTDRAWPALETTE lpDDPalette) PURE; 
     STDMETHOD(Unlock)(THIS_ LPVOID lpSurfaceData) PURE; 
-    STDMETHOD(UpdateOverlay)(THIS_ LPRECT lpSrcRect, LPDIRECTDRAWSURFACE lpDDDestSurface, LPRECT lpDestRect, DWORD dwFlags, LPDDOVERLAYFX lpDDOverlayFx) PURE; 
+        STDMETHOD(UpdateOverlay) (THIS_ LPRECT lpSrcRect,
+                                  LPDIRECTDRAWSURFACE lpDDDestSurface,
+                                  LPRECT lpDestRect, DWORD dwFlags,
+                                  LPDDOVERLAYFX lpDDOverlayFx) PURE;
     STDMETHOD(UpdateOverlayDisplay)(THIS_ DWORD dwFlags) PURE; 
-    STDMETHOD(UpdateOverlayZOrder)(THIS_ DWORD dwFlags, LPDIRECTDRAWSURFACE lpDDSReference) PURE;
+        STDMETHOD(UpdateOverlayZOrder) (THIS_ DWORD dwFlags,
+                                        LPDIRECTDRAWSURFACE lpDDSReference)
+            PURE;
 };
 
     /*** IUnknown methods ***/
@@ -1620,7 +1735,6 @@ DECLARE_INTERFACE_(IDirectDrawSurface,IUnknown)
 #define IDirectDrawSurface_UpdateOverlayDisplay(p,a)    ICOM_CALL_(UpdateOverlayDisplay,p,(p,a))
 #define IDirectDrawSurface_UpdateOverlayZOrder(p,a,b)   ICOM_CALL_(UpdateOverlayZOrder,p,(p,a,b))
 
-
 /*****************************************************************************
  * IDirectDrawSurface2 interface
  */
@@ -1629,44 +1743,68 @@ DECLARE_INTERFACE_(IDirectDrawSurface,IUnknown)
  */
 #undef INTERFACE
 #define INTERFACE IDirectDrawSurface2
-DECLARE_INTERFACE_(IDirectDrawSurface2,IUnknown)
-{
+    DECLARE_INTERFACE_(IDirectDrawSurface2, IUnknown) {
     STDMETHOD(QueryInterface)(THIS_ REFIID,LPVOID*) PURE;
     STDMETHOD_(ULONG,AddRef)(THIS) PURE;
     STDMETHOD_(ULONG,Release)(THIS) PURE; 
-    STDMETHOD(AddAttachedSurface)(THIS_ LPDIRECTDRAWSURFACE2 lpDDSAttachedSurface) PURE; 
+        STDMETHOD(AddAttachedSurface) (THIS_ LPDIRECTDRAWSURFACE2
+                                       lpDDSAttachedSurface) PURE;
     STDMETHOD(AddOverlayDirtyRect)(THIS_ LPRECT lpRect) PURE; 
-    STDMETHOD(Blt)(THIS_ LPRECT lpDestRect, LPDIRECTDRAWSURFACE2 lpDDSrcSurface, LPRECT lpSrcRect, DWORD dwFlags, LPDDBLTFX lpDDBltFx) PURE; 
-    STDMETHOD(BltBatch)(THIS_ LPDDBLTBATCH lpDDBltBatch, DWORD dwCount, DWORD dwFlags) PURE; 
-    STDMETHOD(BltFast)(THIS_ DWORD dwX, DWORD dwY, LPDIRECTDRAWSURFACE2 lpDDSrcSurface, LPRECT lpSrcRect, DWORD dwTrans) PURE; 
-    STDMETHOD(DeleteAttachedSurface)(THIS_ DWORD dwFlags, LPDIRECTDRAWSURFACE2 lpDDSAttachedSurface) PURE; 
-    STDMETHOD(EnumAttachedSurfaces)(THIS_ LPVOID lpContext, LPDDENUMSURFACESCALLBACK lpEnumSurfacesCallback) PURE; 
-    STDMETHOD(EnumOverlayZOrders)(THIS_ DWORD dwFlags, LPVOID lpContext, LPDDENUMSURFACESCALLBACK lpfnCallback) PURE; 
-    STDMETHOD(Flip)(THIS_ LPDIRECTDRAWSURFACE2 lpDDSurfaceTargetOverride, DWORD dwFlags) PURE; 
-    STDMETHOD(GetAttachedSurface)(THIS_ LPDDSCAPS lpDDSCaps, LPDIRECTDRAWSURFACE2* lplpDDAttachedSurface) PURE; 
+        STDMETHOD(Blt) (THIS_ LPRECT lpDestRect,
+                        LPDIRECTDRAWSURFACE2 lpDDSrcSurface, LPRECT lpSrcRect,
+                        DWORD dwFlags, LPDDBLTFX lpDDBltFx) PURE;
+        STDMETHOD(BltBatch) (THIS_ LPDDBLTBATCH lpDDBltBatch, DWORD dwCount,
+                             DWORD dwFlags) PURE;
+        STDMETHOD(BltFast) (THIS_ DWORD dwX, DWORD dwY,
+                            LPDIRECTDRAWSURFACE2 lpDDSrcSurface,
+                            LPRECT lpSrcRect, DWORD dwTrans) PURE;
+        STDMETHOD(DeleteAttachedSurface) (THIS_ DWORD dwFlags,
+                                          LPDIRECTDRAWSURFACE2
+                                          lpDDSAttachedSurface) PURE;
+        STDMETHOD(EnumAttachedSurfaces) (THIS_ LPVOID lpContext,
+                                         LPDDENUMSURFACESCALLBACK
+                                         lpEnumSurfacesCallback) PURE;
+        STDMETHOD(EnumOverlayZOrders) (THIS_ DWORD dwFlags, LPVOID lpContext,
+                                       LPDDENUMSURFACESCALLBACK lpfnCallback)
+            PURE;
+        STDMETHOD(Flip) (THIS_ LPDIRECTDRAWSURFACE2 lpDDSurfaceTargetOverride,
+                         DWORD dwFlags) PURE;
+        STDMETHOD(GetAttachedSurface) (THIS_ LPDDSCAPS lpDDSCaps,
+                                       LPDIRECTDRAWSURFACE2 *
+                                       lplpDDAttachedSurface) PURE;
     STDMETHOD(GetBltStatus)(THIS_ DWORD dwFlags) PURE; 
     STDMETHOD(GetCaps)(THIS_ LPDDSCAPS lpDDSCaps) PURE; 
     STDMETHOD(GetClipper)(THIS_ LPDIRECTDRAWCLIPPER* lplpDDClipper) PURE; 
-    STDMETHOD(GetColorKey)(THIS_ DWORD dwFlags, LPDDCOLORKEY lpDDColorKey) PURE; 
+        STDMETHOD(GetColorKey) (THIS_ DWORD dwFlags,
+                                LPDDCOLORKEY lpDDColorKey) PURE;
     STDMETHOD(GetDC)(THIS_ HDC* lphDC) PURE; 
     STDMETHOD(GetFlipStatus)(THIS_ DWORD dwFlags) PURE; 
     STDMETHOD(GetOverlayPosition)(THIS_ LPLONG lplX, LPLONG lplY) PURE; 
     STDMETHOD(GetPalette)(THIS_ LPDIRECTDRAWPALETTE* lplpDDPalette) PURE; 
     STDMETHOD(GetPixelFormat)(THIS_ LPDDPIXELFORMAT lpDDPixelFormat) PURE; 
     STDMETHOD(GetSurfaceDesc)(THIS_ LPDDSURFACEDESC lpDDSurfaceDesc) PURE; 
-    STDMETHOD(Initialize)(THIS_ LPDIRECTDRAW lpDD, LPDDSURFACEDESC lpDDSurfaceDesc) PURE; 
+        STDMETHOD(Initialize) (THIS_ LPDIRECTDRAW lpDD,
+                               LPDDSURFACEDESC lpDDSurfaceDesc) PURE;
     STDMETHOD(IsLost)(THIS) PURE; 
-    STDMETHOD(Lock)(THIS_ LPRECT lpDestRect, LPDDSURFACEDESC lpDDSurfaceDesc, DWORD dwFlags, HANDLE hEvent) PURE; 
+        STDMETHOD(Lock) (THIS_ LPRECT lpDestRect,
+                         LPDDSURFACEDESC lpDDSurfaceDesc, DWORD dwFlags,
+                         HANDLE hEvent) PURE;
     STDMETHOD(ReleaseDC)(THIS_ HDC hDC) PURE; 
     STDMETHOD(Restore)(THIS) PURE; 
     STDMETHOD(SetClipper)(THIS_ LPDIRECTDRAWCLIPPER lpDDClipper) PURE; 
-    STDMETHOD(SetColorKey)(THIS_ DWORD dwFlags, LPDDCOLORKEY lpDDColorKey) PURE; 
+        STDMETHOD(SetColorKey) (THIS_ DWORD dwFlags,
+                                LPDDCOLORKEY lpDDColorKey) PURE;
     STDMETHOD(SetOverlayPosition)(THIS_ LONG lX, LONG lY) PURE; 
     STDMETHOD(SetPalette)(THIS_ LPDIRECTDRAWPALETTE lpDDPalette) PURE; 
     STDMETHOD(Unlock)(THIS_ LPVOID lpSurfaceData) PURE; 
-    STDMETHOD(UpdateOverlay)(THIS_ LPRECT lpSrcRect, LPDIRECTDRAWSURFACE2 lpDDDestSurface, LPRECT lpDestRect, DWORD dwFlags, LPDDOVERLAYFX lpDDOverlayFx) PURE; 
+        STDMETHOD(UpdateOverlay) (THIS_ LPRECT lpSrcRect,
+                                  LPDIRECTDRAWSURFACE2 lpDDDestSurface,
+                                  LPRECT lpDestRect, DWORD dwFlags,
+                                  LPDDOVERLAYFX lpDDOverlayFx) PURE;
     STDMETHOD(UpdateOverlayDisplay)(THIS_ DWORD dwFlags) PURE; 
-    STDMETHOD(UpdateOverlayZOrder)(THIS_ DWORD dwFlags, LPDIRECTDRAWSURFACE2 lpDDSReference) PURE; 
+        STDMETHOD(UpdateOverlayZOrder) (THIS_ DWORD dwFlags,
+                                        LPDIRECTDRAWSURFACE2 lpDDSReference)
+            PURE;
     /* added in v2 */ 
     STDMETHOD(GetDDInterface)(THIS_ LPVOID* lplpDD) PURE; 
     STDMETHOD(PageLock)(THIS_ DWORD dwFlags) PURE; 
@@ -1716,7 +1854,6 @@ DECLARE_INTERFACE_(IDirectDrawSurface2,IUnknown)
 #define IDirectDrawSurface2_PageLock(p,a)       ICOM_CALL_(PageLock,p,(p,a))
 #define IDirectDrawSurface2_PageUnlock(p,a)     ICOM_CALL_(PageUnlock,p,(p,a))
 
-
 /*****************************************************************************
  * IDirectDrawSurface3 interface
  */
@@ -1725,50 +1862,75 @@ DECLARE_INTERFACE_(IDirectDrawSurface2,IUnknown)
  */
 #undef INTERFACE
 #define INTERFACE IDirectDrawSurface3
-DECLARE_INTERFACE_(IDirectDrawSurface3,IUnknown)
-{
+    DECLARE_INTERFACE_(IDirectDrawSurface3, IUnknown) {
     STDMETHOD(QueryInterface)(THIS_ REFIID,LPVOID*) PURE;
     STDMETHOD_(ULONG,AddRef)(THIS) PURE;
     STDMETHOD_(ULONG,Release)(THIS) PURE; 
-    STDMETHOD(AddAttachedSurface)(THIS_ LPDIRECTDRAWSURFACE3 lpDDSAttachedSurface) PURE; 
+        STDMETHOD(AddAttachedSurface) (THIS_ LPDIRECTDRAWSURFACE3
+                                       lpDDSAttachedSurface) PURE;
     STDMETHOD(AddOverlayDirtyRect)(THIS_ LPRECT lpRect) PURE; 
-    STDMETHOD(Blt)(THIS_ LPRECT lpDestRect, LPDIRECTDRAWSURFACE3 lpDDSrcSurface, LPRECT lpSrcRect, DWORD dwFlags, LPDDBLTFX lpDDBltFx) PURE; 
-    STDMETHOD(BltBatch)(THIS_ LPDDBLTBATCH lpDDBltBatch, DWORD dwCount, DWORD dwFlags) PURE; 
-    STDMETHOD(BltFast)(THIS_ DWORD dwX, DWORD dwY, LPDIRECTDRAWSURFACE3 lpDDSrcSurface, LPRECT lpSrcRect, DWORD dwTrans) PURE; 
-    STDMETHOD(DeleteAttachedSurface)(THIS_ DWORD dwFlags, LPDIRECTDRAWSURFACE3 lpDDSAttachedSurface) PURE; 
-    STDMETHOD(EnumAttachedSurfaces)(THIS_ LPVOID lpContext, LPDDENUMSURFACESCALLBACK lpEnumSurfacesCallback) PURE; 
-    STDMETHOD(EnumOverlayZOrders)(THIS_ DWORD dwFlags, LPVOID lpContext, LPDDENUMSURFACESCALLBACK lpfnCallback) PURE; 
-    STDMETHOD(Flip)(THIS_ LPDIRECTDRAWSURFACE3 lpDDSurfaceTargetOverride, DWORD dwFlags) PURE; 
-    STDMETHOD(GetAttachedSurface)(THIS_ LPDDSCAPS lpDDSCaps, LPDIRECTDRAWSURFACE3* lplpDDAttachedSurface) PURE; 
+        STDMETHOD(Blt) (THIS_ LPRECT lpDestRect,
+                        LPDIRECTDRAWSURFACE3 lpDDSrcSurface, LPRECT lpSrcRect,
+                        DWORD dwFlags, LPDDBLTFX lpDDBltFx) PURE;
+        STDMETHOD(BltBatch) (THIS_ LPDDBLTBATCH lpDDBltBatch, DWORD dwCount,
+                             DWORD dwFlags) PURE;
+        STDMETHOD(BltFast) (THIS_ DWORD dwX, DWORD dwY,
+                            LPDIRECTDRAWSURFACE3 lpDDSrcSurface,
+                            LPRECT lpSrcRect, DWORD dwTrans) PURE;
+        STDMETHOD(DeleteAttachedSurface) (THIS_ DWORD dwFlags,
+                                          LPDIRECTDRAWSURFACE3
+                                          lpDDSAttachedSurface) PURE;
+        STDMETHOD(EnumAttachedSurfaces) (THIS_ LPVOID lpContext,
+                                         LPDDENUMSURFACESCALLBACK
+                                         lpEnumSurfacesCallback) PURE;
+        STDMETHOD(EnumOverlayZOrders) (THIS_ DWORD dwFlags, LPVOID lpContext,
+                                       LPDDENUMSURFACESCALLBACK lpfnCallback)
+            PURE;
+        STDMETHOD(Flip) (THIS_ LPDIRECTDRAWSURFACE3 lpDDSurfaceTargetOverride,
+                         DWORD dwFlags) PURE;
+        STDMETHOD(GetAttachedSurface) (THIS_ LPDDSCAPS lpDDSCaps,
+                                       LPDIRECTDRAWSURFACE3 *
+                                       lplpDDAttachedSurface) PURE;
     STDMETHOD(GetBltStatus)(THIS_ DWORD dwFlags) PURE; 
     STDMETHOD(GetCaps)(THIS_ LPDDSCAPS lpDDSCaps) PURE; 
     STDMETHOD(GetClipper)(THIS_ LPDIRECTDRAWCLIPPER* lplpDDClipper) PURE; 
-    STDMETHOD(GetColorKey)(THIS_ DWORD dwFlags, LPDDCOLORKEY lpDDColorKey) PURE; 
+        STDMETHOD(GetColorKey) (THIS_ DWORD dwFlags,
+                                LPDDCOLORKEY lpDDColorKey) PURE;
     STDMETHOD(GetDC)(THIS_ HDC* lphDC) PURE; 
     STDMETHOD(GetFlipStatus)(THIS_ DWORD dwFlags) PURE; 
     STDMETHOD(GetOverlayPosition)(THIS_ LPLONG lplX, LPLONG lplY) PURE; 
     STDMETHOD(GetPalette)(THIS_ LPDIRECTDRAWPALETTE* lplpDDPalette) PURE; 
     STDMETHOD(GetPixelFormat)(THIS_ LPDDPIXELFORMAT lpDDPixelFormat) PURE; 
     STDMETHOD(GetSurfaceDesc)(THIS_ LPDDSURFACEDESC lpDDSurfaceDesc) PURE; 
-    STDMETHOD(Initialize)(THIS_ LPDIRECTDRAW lpDD, LPDDSURFACEDESC lpDDSurfaceDesc) PURE; 
+        STDMETHOD(Initialize) (THIS_ LPDIRECTDRAW lpDD,
+                               LPDDSURFACEDESC lpDDSurfaceDesc) PURE;
     STDMETHOD(IsLost)(THIS) PURE; 
-    STDMETHOD(Lock)(THIS_ LPRECT lpDestRect, LPDDSURFACEDESC lpDDSurfaceDesc, DWORD dwFlags, HANDLE hEvent) PURE; 
+        STDMETHOD(Lock) (THIS_ LPRECT lpDestRect,
+                         LPDDSURFACEDESC lpDDSurfaceDesc, DWORD dwFlags,
+                         HANDLE hEvent) PURE;
     STDMETHOD(ReleaseDC)(THIS_ HDC hDC) PURE; 
     STDMETHOD(Restore)(THIS) PURE; 
     STDMETHOD(SetClipper)(THIS_ LPDIRECTDRAWCLIPPER lpDDClipper) PURE; 
-    STDMETHOD(SetColorKey)(THIS_ DWORD dwFlags, LPDDCOLORKEY lpDDColorKey) PURE; 
+        STDMETHOD(SetColorKey) (THIS_ DWORD dwFlags,
+                                LPDDCOLORKEY lpDDColorKey) PURE;
     STDMETHOD(SetOverlayPosition)(THIS_ LONG lX, LONG lY) PURE; 
     STDMETHOD(SetPalette)(THIS_ LPDIRECTDRAWPALETTE lpDDPalette) PURE; 
     STDMETHOD(Unlock)(THIS_ LPVOID lpSurfaceData) PURE; 
-    STDMETHOD(UpdateOverlay)(THIS_ LPRECT lpSrcRect, LPDIRECTDRAWSURFACE3 lpDDDestSurface, LPRECT lpDestRect, DWORD dwFlags, LPDDOVERLAYFX lpDDOverlayFx) PURE; 
+        STDMETHOD(UpdateOverlay) (THIS_ LPRECT lpSrcRect,
+                                  LPDIRECTDRAWSURFACE3 lpDDDestSurface,
+                                  LPRECT lpDestRect, DWORD dwFlags,
+                                  LPDDOVERLAYFX lpDDOverlayFx) PURE;
     STDMETHOD(UpdateOverlayDisplay)(THIS_ DWORD dwFlags) PURE; 
-    STDMETHOD(UpdateOverlayZOrder)(THIS_ DWORD dwFlags, LPDIRECTDRAWSURFACE3 lpDDSReference) PURE; 
+        STDMETHOD(UpdateOverlayZOrder) (THIS_ DWORD dwFlags,
+                                        LPDIRECTDRAWSURFACE3 lpDDSReference)
+            PURE;
     /* added in v2 */ 
     STDMETHOD(GetDDInterface)(THIS_ LPVOID* lplpDD) PURE; 
     STDMETHOD(PageLock)(THIS_ DWORD dwFlags) PURE; 
     STDMETHOD(PageUnlock)(THIS_ DWORD dwFlags) PURE; 
     /* added in v3 */ 
-    STDMETHOD(SetSurfaceDesc)(THIS_ LPDDSURFACEDESC lpDDSD, DWORD dwFlags) PURE;
+        STDMETHOD(SetSurfaceDesc) (THIS_ LPDDSURFACEDESC lpDDSD,
+                                   DWORD dwFlags) PURE;
 };
 
     /*** IUnknown methods ***/
@@ -1816,7 +1978,6 @@ DECLARE_INTERFACE_(IDirectDrawSurface3,IUnknown)
 /*** IDirectDrawSurface3 methods ***/
 #define IDirectDrawSurface3_SetSurfaceDesc(p,a,b) ICOM_CALL_(SetSurfaceDesc,p,(p,a,b))
 
-
 /*****************************************************************************
  * IDirectDrawSurface4 interface
  */
@@ -1824,50 +1985,75 @@ DECLARE_INTERFACE_(IDirectDrawSurface3,IUnknown)
  */
 #undef INTERFACE
 #define INTERFACE IDirectDrawSurface4
-DECLARE_INTERFACE_(IDirectDrawSurface4,IUnknown)
-{
+    DECLARE_INTERFACE_(IDirectDrawSurface4, IUnknown) {
     STDMETHOD(QueryInterface)(THIS_ REFIID,LPVOID*) PURE;
     STDMETHOD_(ULONG,AddRef)(THIS) PURE;
     STDMETHOD_(ULONG,Release)(THIS) PURE; 
-    STDMETHOD(AddAttachedSurface)(THIS_ LPDIRECTDRAWSURFACE4 lpDDSAttachedSurface) PURE; 
+        STDMETHOD(AddAttachedSurface) (THIS_ LPDIRECTDRAWSURFACE4
+                                       lpDDSAttachedSurface) PURE;
     STDMETHOD(AddOverlayDirtyRect)(THIS_ LPRECT lpRect) PURE; 
-    STDMETHOD(Blt)(THIS_ LPRECT lpDestRect, LPDIRECTDRAWSURFACE4 lpDDSrcSurface, LPRECT lpSrcRect, DWORD dwFlags, LPDDBLTFX lpDDBltFx) PURE; 
-    STDMETHOD(BltBatch)(THIS_ LPDDBLTBATCH lpDDBltBatch, DWORD dwCount, DWORD dwFlags) PURE; 
-    STDMETHOD(BltFast)(THIS_ DWORD dwX, DWORD dwY, LPDIRECTDRAWSURFACE4 lpDDSrcSurface, LPRECT lpSrcRect, DWORD dwTrans) PURE; 
-    STDMETHOD(DeleteAttachedSurface)(THIS_ DWORD dwFlags, LPDIRECTDRAWSURFACE4 lpDDSAttachedSurface) PURE; 
-    STDMETHOD(EnumAttachedSurfaces)(THIS_ LPVOID lpContext, LPDDENUMSURFACESCALLBACK lpEnumSurfacesCallback) PURE; 
-    STDMETHOD(EnumOverlayZOrders)(THIS_ DWORD dwFlags, LPVOID lpContext, LPDDENUMSURFACESCALLBACK lpfnCallback) PURE; 
-    STDMETHOD(Flip)(THIS_ LPDIRECTDRAWSURFACE4 lpDDSurfaceTargetOverride, DWORD dwFlags) PURE; 
-    STDMETHOD(GetAttachedSurface)(THIS_ LPDDSCAPS2 lpDDSCaps, LPDIRECTDRAWSURFACE4* lplpDDAttachedSurface) PURE; 
+        STDMETHOD(Blt) (THIS_ LPRECT lpDestRect,
+                        LPDIRECTDRAWSURFACE4 lpDDSrcSurface, LPRECT lpSrcRect,
+                        DWORD dwFlags, LPDDBLTFX lpDDBltFx) PURE;
+        STDMETHOD(BltBatch) (THIS_ LPDDBLTBATCH lpDDBltBatch, DWORD dwCount,
+                             DWORD dwFlags) PURE;
+        STDMETHOD(BltFast) (THIS_ DWORD dwX, DWORD dwY,
+                            LPDIRECTDRAWSURFACE4 lpDDSrcSurface,
+                            LPRECT lpSrcRect, DWORD dwTrans) PURE;
+        STDMETHOD(DeleteAttachedSurface) (THIS_ DWORD dwFlags,
+                                          LPDIRECTDRAWSURFACE4
+                                          lpDDSAttachedSurface) PURE;
+        STDMETHOD(EnumAttachedSurfaces) (THIS_ LPVOID lpContext,
+                                         LPDDENUMSURFACESCALLBACK
+                                         lpEnumSurfacesCallback) PURE;
+        STDMETHOD(EnumOverlayZOrders) (THIS_ DWORD dwFlags, LPVOID lpContext,
+                                       LPDDENUMSURFACESCALLBACK lpfnCallback)
+            PURE;
+        STDMETHOD(Flip) (THIS_ LPDIRECTDRAWSURFACE4 lpDDSurfaceTargetOverride,
+                         DWORD dwFlags) PURE;
+        STDMETHOD(GetAttachedSurface) (THIS_ LPDDSCAPS2 lpDDSCaps,
+                                       LPDIRECTDRAWSURFACE4 *
+                                       lplpDDAttachedSurface) PURE;
     STDMETHOD(GetBltStatus)(THIS_ DWORD dwFlags) PURE; 
     STDMETHOD(GetCaps)(THIS_ LPDDSCAPS2 lpDDSCaps) PURE; 
     STDMETHOD(GetClipper)(THIS_ LPDIRECTDRAWCLIPPER* lplpDDClipper) PURE; 
-    STDMETHOD(GetColorKey)(THIS_ DWORD dwFlags, LPDDCOLORKEY lpDDColorKey) PURE; 
+        STDMETHOD(GetColorKey) (THIS_ DWORD dwFlags,
+                                LPDDCOLORKEY lpDDColorKey) PURE;
     STDMETHOD(GetDC)(THIS_ HDC* lphDC) PURE; 
     STDMETHOD(GetFlipStatus)(THIS_ DWORD dwFlags) PURE; 
     STDMETHOD(GetOverlayPosition)(THIS_ LPLONG lplX, LPLONG lplY) PURE; 
     STDMETHOD(GetPalette)(THIS_ LPDIRECTDRAWPALETTE* lplpDDPalette) PURE; 
     STDMETHOD(GetPixelFormat)(THIS_ LPDDPIXELFORMAT lpDDPixelFormat) PURE; 
     STDMETHOD(GetSurfaceDesc)(THIS_ LPDDSURFACEDESC lpDDSurfaceDesc) PURE; 
-    STDMETHOD(Initialize)(THIS_ LPDIRECTDRAW lpDD, LPDDSURFACEDESC lpDDSurfaceDesc) PURE; 
+        STDMETHOD(Initialize) (THIS_ LPDIRECTDRAW lpDD,
+                               LPDDSURFACEDESC lpDDSurfaceDesc) PURE;
     STDMETHOD(IsLost)(THIS) PURE; 
-    STDMETHOD(Lock)(THIS_ LPRECT lpDestRect, LPDDSURFACEDESC lpDDSurfaceDesc, DWORD dwFlags, HANDLE hEvent) PURE; 
+        STDMETHOD(Lock) (THIS_ LPRECT lpDestRect,
+                         LPDDSURFACEDESC lpDDSurfaceDesc, DWORD dwFlags,
+                         HANDLE hEvent) PURE;
     STDMETHOD(ReleaseDC)(THIS_ HDC hDC) PURE; 
     STDMETHOD(Restore)(THIS) PURE; 
     STDMETHOD(SetClipper)(THIS_ LPDIRECTDRAWCLIPPER lpDDClipper) PURE; 
-    STDMETHOD(SetColorKey)(THIS_ DWORD dwFlags, LPDDCOLORKEY lpDDColorKey) PURE; 
+        STDMETHOD(SetColorKey) (THIS_ DWORD dwFlags,
+                                LPDDCOLORKEY lpDDColorKey) PURE;
     STDMETHOD(SetOverlayPosition)(THIS_ LONG lX, LONG lY) PURE; 
     STDMETHOD(SetPalette)(THIS_ LPDIRECTDRAWPALETTE lpDDPalette) PURE; 
     STDMETHOD(Unlock)(THIS_ LPRECT lpSurfaceData) PURE; 
-    STDMETHOD(UpdateOverlay)(THIS_ LPRECT lpSrcRect, LPDIRECTDRAWSURFACE4 lpDDDestSurface, LPRECT lpDestRect, DWORD dwFlags, LPDDOVERLAYFX lpDDOverlayFx) PURE; 
+        STDMETHOD(UpdateOverlay) (THIS_ LPRECT lpSrcRect,
+                                  LPDIRECTDRAWSURFACE4 lpDDDestSurface,
+                                  LPRECT lpDestRect, DWORD dwFlags,
+                                  LPDDOVERLAYFX lpDDOverlayFx) PURE;
     STDMETHOD(UpdateOverlayDisplay)(THIS_ DWORD dwFlags) PURE; 
-    STDMETHOD(UpdateOverlayZOrder)(THIS_ DWORD dwFlags, LPDIRECTDRAWSURFACE4 lpDDSReference) PURE; 
+        STDMETHOD(UpdateOverlayZOrder) (THIS_ DWORD dwFlags,
+                                        LPDIRECTDRAWSURFACE4 lpDDSReference)
+            PURE;
     /* added in v2 */ 
     STDMETHOD(GetDDInterface)(THIS_ LPVOID* lplpDD) PURE; 
     STDMETHOD(PageLock)(THIS_ DWORD dwFlags) PURE; 
     STDMETHOD(PageUnlock)(THIS_ DWORD dwFlags) PURE; 
     /* added in v3 */ 
-    STDMETHOD(SetSurfaceDesc)(THIS_ LPDDSURFACEDESC lpDDSD, DWORD dwFlags) PURE; 
+        STDMETHOD(SetSurfaceDesc) (THIS_ LPDDSURFACEDESC lpDDSD,
+                                   DWORD dwFlags) PURE;
     /* added in v4 */ 
     STDMETHOD(SetPrivateData)(THIS_ REFGUID , LPVOID , DWORD , DWORD ) PURE; 
     STDMETHOD(GetPrivateData)(THIS_ REFGUID , LPVOID , LPDWORD ) PURE; 
@@ -1927,56 +2113,80 @@ DECLARE_INTERFACE_(IDirectDrawSurface4,IUnknown)
 #define IDirectDrawSurface4_GetUniquenessValue(p,a)   ICOM_CALL_(GetUniquenessValue,p,(p,a))
 #define IDirectDrawSurface4_ChangeUniquenessValue(p)  ICOM_CALL_(ChangeUniquenessValue,p,(p))
 
-
 /*****************************************************************************
  * IDirectDrawSurface7 interface
  */
 #undef INTERFACE
 #define INTERFACE IDirectDrawSurface7
-DECLARE_INTERFACE_(IDirectDrawSurface7,IUnknown)
-{
+    DECLARE_INTERFACE_(IDirectDrawSurface7, IUnknown) {
     STDMETHOD(QueryInterface)(THIS_ REFIID,LPVOID*) PURE;
     STDMETHOD_(ULONG,AddRef)(THIS) PURE;
     STDMETHOD_(ULONG,Release)(THIS) PURE; 
-    STDMETHOD(AddAttachedSurface)(THIS_ LPDIRECTDRAWSURFACE7 lpDDSAttachedSurface) PURE; 
+        STDMETHOD(AddAttachedSurface) (THIS_ LPDIRECTDRAWSURFACE7
+                                       lpDDSAttachedSurface) PURE;
     STDMETHOD(AddOverlayDirtyRect)(THIS_ LPRECT lpRect) PURE; 
-    STDMETHOD(Blt)(THIS_ LPRECT lpDestRect, LPDIRECTDRAWSURFACE7 lpDDSrcSurface, LPRECT lpSrcRect, DWORD dwFlags, LPDDBLTFX lpDDBltFx) PURE; 
-    STDMETHOD(BltBatch)(THIS_ LPDDBLTBATCH lpDDBltBatch, DWORD dwCount, DWORD dwFlags) PURE; 
-    STDMETHOD(BltFast)(THIS_ DWORD dwX, DWORD dwY, LPDIRECTDRAWSURFACE7 lpDDSrcSurface, LPRECT lpSrcRect, DWORD dwTrans) PURE; 
-    STDMETHOD(DeleteAttachedSurface)(THIS_ DWORD dwFlags, LPDIRECTDRAWSURFACE7 lpDDSAttachedSurface) PURE; 
-    STDMETHOD(EnumAttachedSurfaces)(THIS_ LPVOID lpContext, LPDDENUMSURFACESCALLBACK7 lpEnumSurfacesCallback) PURE; 
-    STDMETHOD(EnumOverlayZOrders)(THIS_ DWORD dwFlags, LPVOID lpContext, LPDDENUMSURFACESCALLBACK7 lpfnCallback) PURE; 
-    STDMETHOD(Flip)(THIS_ LPDIRECTDRAWSURFACE7 lpDDSurfaceTargetOverride, DWORD dwFlags) PURE; 
-    STDMETHOD(GetAttachedSurface)(THIS_ LPDDSCAPS2 lpDDSCaps, LPDIRECTDRAWSURFACE7* lplpDDAttachedSurface) PURE; 
+        STDMETHOD(Blt) (THIS_ LPRECT lpDestRect,
+                        LPDIRECTDRAWSURFACE7 lpDDSrcSurface, LPRECT lpSrcRect,
+                        DWORD dwFlags, LPDDBLTFX lpDDBltFx) PURE;
+        STDMETHOD(BltBatch) (THIS_ LPDDBLTBATCH lpDDBltBatch, DWORD dwCount,
+                             DWORD dwFlags) PURE;
+        STDMETHOD(BltFast) (THIS_ DWORD dwX, DWORD dwY,
+                            LPDIRECTDRAWSURFACE7 lpDDSrcSurface,
+                            LPRECT lpSrcRect, DWORD dwTrans) PURE;
+        STDMETHOD(DeleteAttachedSurface) (THIS_ DWORD dwFlags,
+                                          LPDIRECTDRAWSURFACE7
+                                          lpDDSAttachedSurface) PURE;
+        STDMETHOD(EnumAttachedSurfaces) (THIS_ LPVOID lpContext,
+                                         LPDDENUMSURFACESCALLBACK7
+                                         lpEnumSurfacesCallback) PURE;
+        STDMETHOD(EnumOverlayZOrders) (THIS_ DWORD dwFlags, LPVOID lpContext,
+                                       LPDDENUMSURFACESCALLBACK7 lpfnCallback)
+            PURE;
+        STDMETHOD(Flip) (THIS_ LPDIRECTDRAWSURFACE7 lpDDSurfaceTargetOverride,
+                         DWORD dwFlags) PURE;
+        STDMETHOD(GetAttachedSurface) (THIS_ LPDDSCAPS2 lpDDSCaps,
+                                       LPDIRECTDRAWSURFACE7 *
+                                       lplpDDAttachedSurface) PURE;
     STDMETHOD(GetBltStatus)(THIS_ DWORD dwFlags) PURE; 
     STDMETHOD(GetCaps)(THIS_ LPDDSCAPS2 lpDDSCaps) PURE; 
     STDMETHOD(GetClipper)(THIS_ LPDIRECTDRAWCLIPPER* lplpDDClipper) PURE; 
-    STDMETHOD(GetColorKey)(THIS_ DWORD dwFlags, LPDDCOLORKEY lpDDColorKey) PURE; 
+        STDMETHOD(GetColorKey) (THIS_ DWORD dwFlags,
+                                LPDDCOLORKEY lpDDColorKey) PURE;
     STDMETHOD(GetDC)(THIS_ HDC* lphDC) PURE; 
     STDMETHOD(GetFlipStatus)(THIS_ DWORD dwFlags) PURE; 
     STDMETHOD(GetOverlayPosition)(THIS_ LPLONG lplX, LPLONG lplY) PURE; 
     STDMETHOD(GetPalette)(THIS_ LPDIRECTDRAWPALETTE* lplpDDPalette) PURE; 
     STDMETHOD(GetPixelFormat)(THIS_ LPDDPIXELFORMAT lpDDPixelFormat) PURE; 
     STDMETHOD(GetSurfaceDesc)(THIS_ LPDDSURFACEDESC2 lpDDSurfaceDesc) PURE; 
-    STDMETHOD(Initialize)(THIS_ LPDIRECTDRAW lpDD, LPDDSURFACEDESC2 lpDDSurfaceDesc) PURE; 
+        STDMETHOD(Initialize) (THIS_ LPDIRECTDRAW lpDD,
+                               LPDDSURFACEDESC2 lpDDSurfaceDesc) PURE;
     STDMETHOD(IsLost)(THIS) PURE; 
-    STDMETHOD(Lock)(THIS_ LPRECT lpDestRect, LPDDSURFACEDESC2 lpDDSurfaceDesc, DWORD dwFlags, HANDLE hEvent) PURE; 
+        STDMETHOD(Lock) (THIS_ LPRECT lpDestRect,
+                         LPDDSURFACEDESC2 lpDDSurfaceDesc, DWORD dwFlags,
+                         HANDLE hEvent) PURE;
     STDMETHOD(ReleaseDC)(THIS_ HDC hDC) PURE; 
     STDMETHOD(Restore)(THIS) PURE; 
     STDMETHOD(SetClipper)(THIS_ LPDIRECTDRAWCLIPPER lpDDClipper) PURE; 
-    STDMETHOD(SetColorKey)(THIS_ DWORD dwFlags, LPDDCOLORKEY lpDDColorKey) PURE; 
+        STDMETHOD(SetColorKey) (THIS_ DWORD dwFlags,
+                                LPDDCOLORKEY lpDDColorKey) PURE;
     STDMETHOD(SetOverlayPosition)(THIS_ LONG lX, LONG lY) PURE; 
     STDMETHOD(SetPalette)(THIS_ LPDIRECTDRAWPALETTE lpDDPalette) PURE; 
     STDMETHOD(Unlock)(THIS_ LPRECT lpSurfaceData) PURE; 
-    STDMETHOD(UpdateOverlay)(THIS_ LPRECT lpSrcRect, LPDIRECTDRAWSURFACE7 lpDDDestSurface, LPRECT lpDestRect, DWORD dwFlags, LPDDOVERLAYFX lpDDOverlayFx) PURE; 
+        STDMETHOD(UpdateOverlay) (THIS_ LPRECT lpSrcRect,
+                                  LPDIRECTDRAWSURFACE7 lpDDDestSurface,
+                                  LPRECT lpDestRect, DWORD dwFlags,
+                                  LPDDOVERLAYFX lpDDOverlayFx) PURE;
     STDMETHOD(UpdateOverlayDisplay)(THIS_ DWORD dwFlags) PURE; 
-    STDMETHOD(UpdateOverlayZOrder)(THIS_ DWORD dwFlags, LPDIRECTDRAWSURFACE7 lpDDSReference) PURE; 
+        STDMETHOD(UpdateOverlayZOrder) (THIS_ DWORD dwFlags,
+                                        LPDIRECTDRAWSURFACE7 lpDDSReference)
+            PURE;
     /* added in v2 */ 
     STDMETHOD(GetDDInterface)(THIS_ LPVOID* lplpDD) PURE; 
     STDMETHOD(PageLock)(THIS_ DWORD dwFlags) PURE; 
     STDMETHOD(PageUnlock)(THIS_ DWORD dwFlags) PURE; 
     /* added in v3 */ 
-    STDMETHOD(SetSurfaceDesc)(THIS_ LPDDSURFACEDESC2 lpDDSD, DWORD dwFlags) PURE; 
+        STDMETHOD(SetSurfaceDesc) (THIS_ LPDDSURFACEDESC2 lpDDSD,
+                                   DWORD dwFlags) PURE;
     /* added in v4 */ 
     STDMETHOD(SetPrivateData)(THIS_ REFGUID , LPVOID , DWORD , DWORD ) PURE; 
     STDMETHOD(GetPrivateData)(THIS_ REFGUID , LPVOID , LPDWORD ) PURE; 
@@ -2051,13 +2261,14 @@ DECLARE_INTERFACE_(IDirectDrawSurface7,IUnknown)
  */
 #undef INTERFACE
 #define INTERFACE IDirectDrawColorControl
-DECLARE_INTERFACE_(IDirectDrawColorControl,IUnknown)
-{
+    DECLARE_INTERFACE_(IDirectDrawColorControl, IUnknown) {
     STDMETHOD(QueryInterface)(THIS_ REFIID,LPVOID*) PURE;
     STDMETHOD_(ULONG,AddRef)(THIS) PURE;
     STDMETHOD_(ULONG,Release)(THIS) PURE; 
-    STDMETHOD(GetColorControls)(THIS_ LPDDCOLORCONTROL lpColorControl) PURE; 
-    STDMETHOD(SetColorControls)(THIS_ LPDDCOLORCONTROL lpColorControl) PURE;
+        STDMETHOD(GetColorControls) (THIS_ LPDDCOLORCONTROL lpColorControl)
+            PURE;
+        STDMETHOD(SetColorControls) (THIS_ LPDDCOLORCONTROL lpColorControl)
+            PURE;
 };
 
 	/*** IUnknown methods ***/
@@ -2073,13 +2284,14 @@ DECLARE_INTERFACE_(IDirectDrawColorControl,IUnknown)
  */
 #undef INTERFACE
 #define INTERFACE IDirectDrawGammaControl
-DECLARE_INTERFACE_(IDirectDrawGammaControl,IUnknown)
-{
+    DECLARE_INTERFACE_(IDirectDrawGammaControl, IUnknown) {
     STDMETHOD(QueryInterface)(THIS_ REFIID,LPVOID*) PURE;
     STDMETHOD_(ULONG,AddRef)(THIS) PURE;
     STDMETHOD_(ULONG,Release)(THIS) PURE; 
-    STDMETHOD(GetGammaRamp)(THIS_ DWORD dwFlags, LPDDGAMMARAMP lpGammaRamp) PURE; 
-    STDMETHOD(SetGammaRamp)(THIS_ DWORD dwFlags, LPDDGAMMARAMP lpGammaRamp) PURE;
+        STDMETHOD(GetGammaRamp) (THIS_ DWORD dwFlags,
+                                 LPDDGAMMARAMP lpGammaRamp) PURE;
+        STDMETHOD(SetGammaRamp) (THIS_ DWORD dwFlags,
+                                 LPDDGAMMARAMP lpGammaRamp) PURE;
 };
 
 	/*** IUnknown methods ***/
@@ -2090,14 +2302,14 @@ DECLARE_INTERFACE_(IDirectDrawGammaControl,IUnknown)
 #define IDirectDrawGammaControl_GetGammaRamp(p,a,b)   ICOM_CALL_(GetGammaRamp,p,(p,a,b))
 #define IDirectDrawGammaControl_SetGammaRamp(p,a,b)   ICOM_CALL_(SetGammaRamp,p,(p,a,b))
 
-
 HRESULT WINAPI DirectDrawCreate(LPGUID,LPDIRECTDRAW*,LPUNKNOWN);
 HRESULT WINAPI DirectDrawCreateEx(LPGUID,LPVOID*,REFIID,LPUNKNOWN);
 HRESULT WINAPI DirectDrawEnumerateA(LPDDENUMCALLBACKA,LPVOID);
 HRESULT WINAPI DirectDrawEnumerateW(LPDDENUMCALLBACKW,LPVOID);
-#define DirectDrawEnumerate WINELIB_NAME_AW(DirectDrawEnumerate)
-HRESULT WINAPI DirectDrawCreateClipper(DWORD,LPDIRECTDRAWCLIPPER*,LPUNKNOWN);
 
+#define DirectDrawEnumerate WINELIB_NAME_AW(DirectDrawEnumerate)
+    HRESULT WINAPI DirectDrawCreateClipper(DWORD, LPDIRECTDRAWCLIPPER *,
+                                           LPUNKNOWN);
 
 #ifdef __cplusplus
 } /* extern "C" */
