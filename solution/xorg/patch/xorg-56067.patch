diff --git a/os/xdmauth.c b/os/xdmauth.c
index 733fda5..28584d2 100644
--- a/os/xdmauth.c
+++ b/os/xdmauth.c
@@ -60,6 +60,7 @@ static Bool authFromXDMCP;
 
 static XdmAuthKeyRec	privateKey;
 static char XdmAuthenticationName[] = "XDM-AUTHENTICATION-1";
+
 #define XdmAuthenticationNameLen (sizeof XdmAuthenticationName - 1)
 static XdmAuthKeyRec	rho;
 
@@ -100,6 +101,7 @@ XdmAuthenticationAddAuth (int name_len, const char *name,
     int data_len, char *data)
 {
     Bool    ret;
+
     XdmcpUnwrap ((unsigned char *)data, (unsigned char *)&privateKey,
 		 (unsigned char *)data, data_len);
     authFromXDMCP = TRUE;
@@ -108,7 +110,6 @@ XdmAuthenticationAddAuth (int name_len, const char *name,
     return ret;
 }
 
-
 #define atox(c)	('0' <= c && c <= '9' ? c - '0' : \
 		 'a' <= c && c <= 'f' ? c - 'a' + 10 : \
 		 'A' <= c && c <= 'F' ? c - 'A' + 10 : -1)
@@ -118,8 +119,7 @@ HexToBinary (const char *in, char *out, int len)
 {
     int	    top, bottom;
 
-    while (len > 0)
-    {
+    while (len > 0) {
 	top = atox(in[0]);
 	if (top == -1)
 	    return 0;
@@ -140,14 +140,12 @@ void
 XdmAuthenticationInit (const char *cookie, int cookie_len)
 {
     memset(privateKey.data, 0, 8);
-    if (!strncmp (cookie, "0x", 2) || !strncmp (cookie, "0X", 2))
-    {
+    if (!strncmp(cookie, "0x", 2) || !strncmp(cookie, "0X", 2)) {
 	if (cookie_len > 2 + 2 * 8)
 	    cookie_len = 2 + 2 * 8;
 	HexToBinary (cookie + 2, (char *)privateKey.data, cookie_len - 2);
     }
-    else
-    {
+    else {
     	if (cookie_len > 7)
 	    cookie_len = 7;
     	memmove (privateKey.data + 1, cookie, cookie_len);
@@ -206,19 +204,16 @@ XdmClientAuthDecode (const unsigned char *plain, XdmClientAuthPtr auth)
     int	    i, j;
 
     j = 0;
-    for (i = 0; i < 8; i++)
-    {
+    for (i = 0; i < 8; i++) {
 	auth->rho.data[i] = plain[j];
 	++j;
     }
-    for (i = 0; i < 6; i++)
-    {
+    for (i = 0; i < 6; i++) {
 	auth->client[i] = plain[j];
 	++j;
     }
     auth->time = 0;
-    for (i = 0; i < 4; i++)
-    {
+    for (i = 0; i < 4; i++) {
 	auth->time |= plain[j] << ((3 - i) << 3);
 	j++;
     }
@@ -230,11 +225,9 @@ XdmClientAuthTimeout (long now)
     XdmClientAuthPtr	client, next, prev;
 
     prev = 0;
-    for (client = xdmClients; client; client=next)
-    {
+    for (client = xdmClients; client; client = next) {
 	next = client->next;
-	if (abs (now - client->time) > TwentyFiveMinutes)
-	{
+        if (abs(now - client->time) > TwentyFiveMinutes) {
 	    if (prev)
 		prev->next = next;
 	    else
@@ -248,7 +241,8 @@ XdmClientAuthTimeout (long now)
 
 static XdmClientAuthPtr
 XdmAuthorizationValidate (unsigned char *plain, int length, 
-    XdmAuthKeyPtr rho, ClientPtr xclient, const char **reason)
+                         XdmAuthKeyPtr rho, ClientPtr xclient,
+                         const char **reason)
 {
     XdmClientAuthPtr	client, existing;
     long		now;
@@ -263,8 +257,7 @@ XdmAuthorizationValidate (unsigned char *plain, int length,
     if (!client)
 	return NULL;
     XdmClientAuthDecode (plain, client);
-    if (!XdmcpCompareKeys (&client->rho, rho))
-    {
+    if (!XdmcpCompareKeys(&client->rho, rho)) {
 	free(client);
 	if (reason)
 	    *reason = "Invalid XDM-AUTHORIZATION-1 key (failed key comparison)";
@@ -290,7 +283,8 @@ XdmAuthorizationValidate (unsigned char *plain, int length,
 		free(client);
 		free(addr);
 		if (reason)
-		    *reason = "Invalid XDM-AUTHORIZATION-1 key (failed address comparison)";
+                    *reason =
+                        "Invalid XDM-AUTHORIZATION-1 key (failed address comparison)";
 		return NULL;
 
 	    }
@@ -299,24 +293,20 @@ XdmAuthorizationValidate (unsigned char *plain, int length,
 	}
     }
     now = time(0);
-    if (!gotClock)
-    {
+    if (!gotClock) {
 	clockOffset = client->time - now;
 	gotClock = TRUE;
     }
     now += clockOffset;
     XdmClientAuthTimeout (now);
-    if (abs (client->time - now) > TwentyMinutes)
-    {
+    if (abs(client->time - now) > TwentyMinutes) {
 	free(client);
 	if (reason)
 	    *reason = "Excessive XDM-AUTHORIZATION-1 time offset";
 	return NULL;
     }
-    for (existing = xdmClients; existing; existing=existing->next)
-    {
-	if (XdmClientAuthCompare (existing, client))
-	{
+    for (existing = xdmClients; existing; existing = existing->next) {
+        if (XdmClientAuthCompare(existing, client)) {
 	    free(client);
 	    if (reason)
 		*reason = "XDM authorization key matches an existing client!";
@@ -332,12 +322,10 @@ XdmAddCookie (unsigned short data_length, const char *data, XID id)
     XdmAuthorizationPtr	new;
     unsigned char	*rho_bits, *key_bits;
 
-    switch (data_length)
-    {
+    switch (data_length) {
     case 16:		    /* auth from files is 16 bytes long */
 #ifdef XDMCP
-	if (authFromXDMCP)
-	{
+        if (authFromXDMCP) {
 	    /* R5 xdm sent bogus authorization data in the accept packet,
 	     * but we can recover */
 	    rho_bits = rho.data;
@@ -389,9 +377,11 @@ XdmCheckCookie (unsigned short cookie_length, const char *cookie,
     if (!plain)
 	return (XID) -1;
     for (auth = xdmAuth; auth; auth=auth->next) {
-	XdmcpUnwrap ((unsigned char *)cookie, (unsigned char *)&auth->key, plain, cookie_length);
-	if ((client = XdmAuthorizationValidate (plain, cookie_length, &auth->rho, xclient, reason)) != NULL)
-	{
+        XdmcpUnwrap((unsigned char *) cookie, (unsigned char *) &auth->key,
+                    plain, cookie_length);
+        if ((client =
+             XdmAuthorizationValidate(plain, cookie_length, &auth->rho, xclient,
+                                      reason)) != NULL) {
 	    client->next = xdmClients;
 	    xdmClients = client;
 	    free(plain);
@@ -408,14 +398,12 @@ XdmResetCookie (void)
     XdmAuthorizationPtr	auth, next_auth;
     XdmClientAuthPtr	client, next_client;
 
-    for (auth = xdmAuth; auth; auth=next_auth)
-    {
+    for (auth = xdmAuth; auth; auth = next_auth) {
 	next_auth = auth->next;
 	free(auth);
     }
     xdmAuth = 0;
-    for (client = xdmClients; client; client=next_client)
-    {
+    for (client = xdmClients; client; client = next_client) {
 	next_client = client->next;
 	free(client);
     }
@@ -434,9 +422,11 @@ XdmToID (unsigned short cookie_length, char *cookie)
     if (!plain)
 	return (XID) -1;
     for (auth = xdmAuth; auth; auth=auth->next) {
-	XdmcpUnwrap ((unsigned char *)cookie, (unsigned char *)&auth->key, plain, cookie_length);
-	if ((client = XdmAuthorizationValidate (plain, cookie_length, &auth->rho, NULL, NULL)) != NULL)
-	{
+        XdmcpUnwrap((unsigned char *) cookie, (unsigned char *) &auth->key,
+                    plain, cookie_length);
+        if ((client =
+             XdmAuthorizationValidate(plain, cookie_length, &auth->rho, NULL,
+                                      NULL)) != NULL) {
 	    free(client);
 	    free(cookie);
 	    free(plain);
@@ -469,8 +459,7 @@ XdmRemoveCookie (unsigned short data_length, const char *data)
     XdmAuthorizationPtr	auth;
     XdmAuthKeyPtr	key_bits, rho_bits;
 
-    switch (data_length)
-    {
+    switch (data_length) {
     case 16:
 	rho_bits = (XdmAuthKeyPtr) data;
 	key_bits = (XdmAuthKeyPtr) (data + 8);
@@ -486,8 +475,7 @@ XdmRemoveCookie (unsigned short data_length, const char *data)
     }
     for (auth = xdmAuth; auth; auth=auth->next) {
 	if (XdmcpCompareKeys (rho_bits, &auth->rho) &&
-	    XdmcpCompareKeys (key_bits, &auth->key))
- 	{
+            XdmcpCompareKeys(key_bits, &auth->key)) {
 	    xdmAuth = auth->next;
 	    free(auth);
 	    return 1;
