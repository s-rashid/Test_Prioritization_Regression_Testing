diff --git a/hw/xgl/xglsync.c b/hw/xgl/xglsync.c
index 7bcff94..6b5c00b 100644
--- a/hw/xgl/xglsync.c
+++ b/hw/xgl/xglsync.c
@@ -25,49 +25,11 @@
 
 #include "xgl.h"
 
-/*
- * A pixmap may exist both in hardware and in software. Synchronization
- * is handled as follows:
- *
- * Regions modified by software and hardware needs to be tracked.
- * A software operation requires that a rectangle of pixels matching the
- * extents of the operation is synchronized. A hardware operation
- * requires that all pixels are synchronized. If the bounds of a
- * hardware operation intersects the bounds of a currently synchronized
- * software rectangle, the software rectangle will be discarded and the
- * next software operation will require re-synchronization.
- *
- * A software rectangle of pixels is synchronized as follows. If a
- * previously synchronized rectangle exists, then if this previous
- * rectangle subsumes our new rectangle no pixels are fetched from
- * hardware as all pixels that need to be synchronized are already up to
- * date. If a previously synchronized rectangle exists and it intersects
- * with our new rectangle, then both these rectangles are merged into a
- * larger rectangle and pixels not part of the previous rectangle are
- * fetched form hardware. If a previously synchronized rectangle exists
- * and it doesn't intersect with our new rectangle, then the previous
- * rectangle is discarded and pixels are fetched from hardware so that
- * our new rectangle becomes synchronized.
- *
- * If the pixmap exists in hardware and if it can be a target of a
- * drawing operation, then it is kept synchronized all the time, any
- * pixels modified by software will be transfered to hardware right
- * away. If the pixmap exists in hardware but it can only be used as
- * source of a drawing operation, then synchronization is performed
- * only when needed.
- */
-
-#define ALL_BITS(pPixmap, pBox)			\
-    ((pBox)->x1 <= 0 && (pBox)->y1 <= 0 &&	\
-     (pBox)->x2 >= (pPixmap)->drawable.width && \
-     (pBox)->y2 >= (pPixmap)->drawable.height)
-
 Bool
 xglSyncBits (DrawablePtr pDrawable,
 	     BoxPtr	 pExtents)
 {
     RegionRec region;
-    BoxPtr    pBitBox;
     BoxRec    box;
 
     XGL_DRAWABLE_PIXMAP (pDrawable);
@@ -76,53 +38,66 @@ xglSyncBits (DrawablePtr pDrawable,
     if (pPixmapPriv->allBits)
 	return xglMapPixmapBits (pPixmap);
 
-    pBitBox = &pPixmapPriv->bitBox;
-
     if (pPixmapPriv->target == xglPixmapTargetIn && pExtents)
     {
-	box.x1 = MAX (0, pExtents->x1);
-	box.y1 = MAX (0, pExtents->y1);
-	box.x2 = MAX (0, MIN (pPixmap->drawable.width, pExtents->x2));
-	box.y2 = MAX (0, MIN (pPixmap->drawable.height, pExtents->y2));
-
-	if (!BOX_NOTEMPTY (&box))
+	box.x1 = 0;
+	box.y1 = 0;
+	box.x2 = pPixmap->drawable.width;
+	box.y2 = pPixmap->drawable.height;
+	if (pExtents->x1 > box.x1)
+	    box.x1 = pExtents->x1;
+	if (pExtents->y1 > box.y1)
+	    box.y1 = pExtents->y1;
+	if (pExtents->x2 < box.x2)
+	    box.x2 = pExtents->x2;
+	if (pExtents->y2 < box.y2)
+	    box.y2 = pExtents->y2;
+
+	if (box.x2 <= box.x1 || box.y2 <= box.y1)
 	    return xglMapPixmapBits (pPixmap);
 	
-	if (BOX_NOTEMPTY (pBitBox))
+	if (REGION_NOTEMPTY (pDrawable->pScreen, &pPixmapPriv->bitRegion))
 	{
-	    RegionRec bitRegion;
-	    
-	    REGION_INIT (pDrawable->pScreen, &bitRegion, pBitBox, 1);
-	    
-	    switch (RECT_IN_REGION (pDrawable->pScreen, &bitRegion, &box)) {
+	    switch (RECT_IN_REGION (pDrawable->pScreen,
+				    &pPixmapPriv->bitRegion,
+				    &box)) {
 	    case rgnIN:
-		REGION_NULL (pDrawable->pScreen, &region);
+		REGION_INIT (pDrawable->pScreen, &region, NullBox, 0);
 		break;
 	    case rgnOUT:
 		REGION_INIT (pDrawable->pScreen, &region, &box, 1);
-		*pBitBox = box;
-		pPixmapPriv->allBits = ALL_BITS (pPixmap, pBitBox);
+		REGION_UNION (pDrawable->pScreen,
+			      &pPixmapPriv->bitRegion, &pPixmapPriv->bitRegion,
+			      &region);
 		break;
 	    case rgnPART:
- 		pBitBox->x1 = MIN (pBitBox->x1, box.x1);
-		pBitBox->y1 = MIN (pBitBox->y1, box.y1);
-		pBitBox->x2 = MAX (pBitBox->x2, box.x2);
-		pBitBox->y2 = MAX (pBitBox->y2, box.y2);
-		pPixmapPriv->allBits = ALL_BITS (pPixmap, pBitBox);
-		
-		REGION_INIT (pDrawable->pScreen, &region, pBitBox, 1);
+		REGION_INIT (pDrawable->pScreen, &region, &box, 1);
 		REGION_SUBTRACT (pDrawable->pScreen, &region, &region,
-				 &bitRegion);
-		
+				 &pPixmapPriv->bitRegion);
+		REGION_UNION (pDrawable->pScreen,
+			      &pPixmapPriv->bitRegion, &pPixmapPriv->bitRegion,
+			      &region);
 		break;
 	    }
-	    REGION_UNINIT (pDrawable->pScreen, &bitRegion);
 	}
 	else
 	{
 	    REGION_INIT (pDrawable->pScreen, &region, &box, 1);
-	    *pBitBox = box;
-	    pPixmapPriv->allBits = ALL_BITS (pPixmap, pBitBox);
+	    REGION_SUBTRACT (pDrawable->pScreen, &pPixmapPriv->bitRegion,
+			     &region, &pPixmapPriv->bitRegion);
+	}
+
+	if (REGION_NUM_RECTS (&pPixmapPriv->bitRegion) == 1)
+	{
+	    BoxPtr pBox;
+
+	    pBox = REGION_RECTS (&pPixmapPriv->bitRegion);
+
+	    if (pBox->x1 <= 0			    &&
+		pBox->y1 <= 0			    &&
+		pBox->x2 >= pPixmap->drawable.width &&
+		pBox->y2 >= pPixmap->drawable.height)
+		pPixmapPriv->allBits = TRUE;
 	}
     }
     else
@@ -133,17 +108,9 @@ xglSyncBits (DrawablePtr pDrawable,
 	box.y2 = pPixmap->drawable.height;
 
 	REGION_INIT (pDrawable->pScreen, &region, &box, 1);
+	REGION_SUBTRACT (pDrawable->pScreen, &region, &region,
+			 &pPixmapPriv->bitRegion);
 	
-	if (BOX_NOTEMPTY (pBitBox))
-	{
-	    RegionRec bitRegion;
-	    
-	    REGION_INIT (pDrawable->pScreen, &bitRegion, pBitBox, 1);
-	    REGION_SUBTRACT (pDrawable->pScreen, &region, &region, &bitRegion);
-	    REGION_UNINIT (pDrawable->pScreen, &bitRegion);
-	}
-	
-	*pBitBox = box;
 	pPixmapPriv->allBits = TRUE;
     }
 
@@ -151,18 +118,11 @@ xglSyncBits (DrawablePtr pDrawable,
 	if (!xglAllocatePixmapBits (pPixmap, XGL_PIXMAP_USAGE_HINT_DEFAULT))
 	    return FALSE;
 
-    if (pPixmapPriv->pDamage)
-    {
-	RegionPtr pRegion;
-
-	pRegion = DamageRegion (pPixmapPriv->pDamage);
-	REGION_SUBTRACT (pDrawable->pScreen, &region, &region, pRegion);
-    }
-    
     if (REGION_NOTEMPTY (pDrawable->pScreen, &region) && pPixmapPriv->surface)
     {
 	glitz_pixel_format_t format;
 	BoxPtr		     pBox;
+	BoxPtr		     pExt;
 	int		     nBox;
 	
 	if (!xglSyncSurface (pDrawable))
@@ -172,41 +132,52 @@ xglSyncBits (DrawablePtr pDrawable,
 	    
 	pBox = REGION_RECTS (&region);
 	nBox = REGION_NUM_RECTS (&region);
+	pExt = REGION_EXTENTS (pDrawable->pScreen, &region);
 
 	format.fourcc = GLITZ_FOURCC_RGB;
-	format.masks = pPixmapPriv->pPixel->masks;
-	
-	while (nBox--)
-	{
-	    format.xoffset = pBox->x1;
+	format.masks   = pPixmapPriv->pVisual->pPixel->masks;
+	format.xoffset = pExt->x1;
 
 	    if (pPixmapPriv->stride < 0)
 	    {
-		format.skip_lines     = pPixmap->drawable.height - pBox->y2;
+	    format.skip_lines	  = pPixmap->drawable.height - pExt->y2;
 		format.bytes_per_line = -pPixmapPriv->stride;
 		format.scanline_order = GLITZ_PIXEL_SCANLINE_ORDER_BOTTOM_UP;
 	    }
 	    else
 	    {
-		format.skip_lines     = pBox->y1;
+	    format.skip_lines	  = pExt->y1;
 		format.bytes_per_line = pPixmapPriv->stride;
 		format.scanline_order = GLITZ_PIXEL_SCANLINE_ORDER_TOP_DOWN;
 	    }
 
+	glitz_surface_set_clip_region (pPixmapPriv->surface,
+				       0, 0, (glitz_box_t *) pBox, nBox);
+
 	    glitz_get_pixels (pPixmapPriv->surface,
-			      pBox->x1,
-			      pBox->y1,
-			      pBox->x2 - pBox->x1,
-			      pBox->y2 - pBox->y1,
+			  pExt->x1,
+			  pExt->y1,
+			  pExt->x2 - pExt->x1,
+			  pExt->y2 - pExt->y1,
 			      &format,
 			      pPixmapPriv->buffer);
 	    
-	    pBox++;
-	}
+	glitz_surface_set_clip_region (pPixmapPriv->surface, 0, 0, NULL, 0);
     }
 
     REGION_UNINIT (pDrawable->pScreen, &region);
 
+    if (pPixmapPriv->allBits)
+    {
+	box.x1 = 0;
+	box.y1 = 0;
+	box.x2 = pPixmap->drawable.width;
+	box.y2 = pPixmap->drawable.height;
+
+	REGION_UNINIT (pDrawable->pScreen, &pPixmapPriv->bitRegion);
+	REGION_INIT (pDrawable->pScreen, &pPixmapPriv->bitRegion, &box, 1);
+    }
+
     return xglMapPixmapBits (pPixmap);
 }
 
@@ -229,9 +200,6 @@ xglSyncSurface (DrawablePtr pDrawable)
 
     if (!pPixmapPriv->surface)
     {
-	if (!pPixmapPriv->format)
-	    return FALSE;
-
 	if (!xglCreatePixmapSurface (pPixmap))
 	    return FALSE;
     }
@@ -251,8 +219,8 @@ xglSyncSurface (DrawablePtr pDrawable)
 	pBox = REGION_RECTS (pRegion);
 	pExt = REGION_EXTENTS (pDrawable->pScreen, pRegion);
 
-	format.fourcc  = GLITZ_FOURCC_RGB;
-	format.masks   = pPixmapPriv->pPixel->masks;
+	format.fourcc  = pPixmapPriv->pVisual->format.surface->color.fourcc;
+	format.masks   = pPixmapPriv->pVisual->pPixel->masks;
 	format.xoffset = pExt->x1;
 
 	if (pPixmapPriv->stride < 0)
@@ -299,9 +267,44 @@ xglPrepareTarget (DrawablePtr pDrawable)
     case xglPixmapTargetOut:
 	if (xglSyncSurface (pDrawable))
 	{
+	    glitz_drawable_format_t *format;
+
+	    XGL_SCREEN_PRIV (pDrawable->pScreen);
+
+	    if (!pPixmapPriv->drawable)
+	    {
+		unsigned int width, height;
+
+		format = pPixmapPriv->pVisual->format.drawable;
+		width  = pPixmap->drawable.width;
+		height = pPixmap->drawable.height;
+
+		if (pPixmapPriv->pVisual->pbuffer)
+		{
+		    pPixmapPriv->drawable =
+			glitz_create_pbuffer_drawable (pScreenPriv->drawable,
+						       format, width, height);
+		}
+		else
+		{
+		    pPixmapPriv->drawable =
+			glitz_create_drawable (pScreenPriv->drawable,
+					       format, width, height);
+		}
+	    }
+
+	    if (pPixmapPriv->drawable)
+	    {
+		glitz_surface_attach (pPixmapPriv->surface,
+				      pPixmapPriv->drawable,
+				      GLITZ_DRAWABLE_BUFFER_FRONT_COLOR);
+
 	  pPixmapPriv->target = xglPixmapTargetIn;
+
 	  return TRUE;
 	}
+	}
+	pPixmapPriv->target = xglPixmapTargetNo;
 	break;
     case xglPixmapTargetIn:
 	if (xglSyncSurface (pDrawable))
@@ -316,24 +319,32 @@ void
 xglAddSurfaceDamage (DrawablePtr pDrawable,
 		     RegionPtr   pRegion)
 {
-    RegionPtr	    pDamageRegion;
     glitz_surface_t *surface;
     int		    xOff, yOff;
     
     XGL_DRAWABLE_PIXMAP_PRIV (pDrawable);
 
     pPixmapPriv->damageBox = miEmptyBox;
-    if (!pPixmapPriv->format)
-	return;
 
     XGL_GET_DRAWABLE (pDrawable, surface, xOff, yOff);
 
     if (xOff || yOff)
 	REGION_TRANSLATE (pDrawable->pScreen, pRegion, xOff, yOff);
 
+    if (pPixmapPriv->pDamage)
+    {
+	RegionPtr pDamageRegion;
+
     pDamageRegion = DamageRegion (pPixmapPriv->pDamage);
 
-    REGION_UNION (pDrawable->pScreen, pDamageRegion, pDamageRegion, pRegion);
+	REGION_UNION (pDrawable->pScreen,
+		      pDamageRegion, pDamageRegion,
+		      pRegion);
+    }
+
+    REGION_UNION (pDrawable->pScreen,
+		  &pPixmapPriv->bitRegion, &pPixmapPriv->bitRegion,
+		  pRegion);
     
     if (xOff || yOff)
 	REGION_TRANSLATE (pDrawable->pScreen, pRegion, -xOff, -yOff);
@@ -344,22 +355,27 @@ xglAddCurrentSurfaceDamage (DrawablePtr pDrawable)
 {   
     XGL_DRAWABLE_PIXMAP_PRIV (pDrawable);
 
-    if (!pPixmapPriv->format)
+    if (BOX_NOTEMPTY (&pPixmapPriv->damageBox))
     {
-	pPixmapPriv->damageBox = miEmptyBox;
-	return;
-    }
+	RegionRec region;
 
-    if (BOX_NOTEMPTY (&pPixmapPriv->damageBox))
+	REGION_INIT (pDrawable->pScreen, &region, &pPixmapPriv->damageBox, 1);
+
+	if (pPixmapPriv->pDamage)
     {
 	RegionPtr pDamageRegion;
-	RegionRec region;
 
 	pDamageRegion = DamageRegion (pPixmapPriv->pDamage);
 
-	REGION_INIT (pDrawable->pScreen, &region, &pPixmapPriv->damageBox, 1);
 	REGION_UNION (pDrawable->pScreen,
-		      pDamageRegion, pDamageRegion, &region);
+			  pDamageRegion, pDamageRegion,
+			  &region);
+	}
+
+	REGION_UNION (pDrawable->pScreen,
+		      &pPixmapPriv->bitRegion, &pPixmapPriv->bitRegion,
+		      &region);
+
 	REGION_UNINIT (pDrawable->pScreen, &region);
 	
 	pPixmapPriv->damageBox = miEmptyBox;
@@ -370,29 +386,36 @@ void
 xglAddBitDamage (DrawablePtr pDrawable,
 		 RegionPtr   pRegion)
 {
+    XGL_DRAWABLE_PIXMAP_PRIV (pDrawable);
+
+    if (REGION_NOTEMPTY (pDrawable->pScreen, &pPixmapPriv->bitRegion))
+    {
     BoxPtr pBox;
-    BoxPtr pExt;
+	BoxPtr pExt, pBitExt;
     int    nBox;
     
-    XGL_DRAWABLE_PIXMAP_PRIV (pDrawable);
-
     pBox = REGION_RECTS (pRegion);
     pExt = REGION_EXTENTS (pDrawable->pScreen, pRegion);
     nBox = REGION_NUM_RECTS (pRegion);
 
-    if (pExt->x1 < pPixmapPriv->bitBox.x2 &&
-	pExt->y1 < pPixmapPriv->bitBox.y2 &&
-	pExt->x2 > pPixmapPriv->bitBox.x1 &&
-	pExt->y2 > pPixmapPriv->bitBox.y1)
+	pBitExt = REGION_EXTENTS (pDrawable->pScreen, &pPixmapPriv->bitRegion);
+
+	if (pExt->x1 < pBitExt->x2 &&
+	    pExt->y1 < pBitExt->y2 &&
+	    pExt->x2 > pBitExt->x1 &&
+	    pExt->y2 > pBitExt->y1)
     {
 	while (nBox--)
 	{
-	    if (pBox->x1 < pPixmapPriv->bitBox.x2 &&
-		pBox->y1 < pPixmapPriv->bitBox.y2 &&
-		pBox->x2 > pPixmapPriv->bitBox.x1 &&
-		pBox->y2 > pPixmapPriv->bitBox.y1)
+		if (pBox->x1 < pBitExt->x2 &&
+		    pBox->y1 < pBitExt->y2 &&
+		    pBox->x2 > pBitExt->x1 &&
+		    pBox->y2 > pBitExt->y1)
 	    {
-		pPixmapPriv->bitBox = miEmptyBox;
+		    REGION_UNINIT (pDrawable->pScreen,
+				   &pPixmapPriv->bitRegion);
+		    REGION_INIT (pDrawable->pScreen, &pPixmapPriv->bitRegion,
+				 NullBox, 0);
 		pPixmapPriv->allBits = FALSE;
 		return;
 	    }
@@ -401,20 +424,30 @@ xglAddBitDamage (DrawablePtr pDrawable,
 	}
     }
 }
+}
 
 void
 xglAddCurrentBitDamage (DrawablePtr pDrawable)
 {
     XGL_DRAWABLE_PIXMAP_PRIV (pDrawable);
 
-    if (pPixmapPriv->damageBox.x1 < pPixmapPriv->bitBox.x2 &&
-	pPixmapPriv->damageBox.y1 < pPixmapPriv->bitBox.y2 &&
-	pPixmapPriv->damageBox.x2 > pPixmapPriv->bitBox.x1 &&
-	pPixmapPriv->damageBox.y2 > pPixmapPriv->bitBox.y1)
+    if (REGION_NOTEMPTY (pDrawable->pScreen, &pPixmapPriv->bitRegion))
     {
-	pPixmapPriv->bitBox = miEmptyBox;
+	BoxPtr pBitExt;
+
+	pBitExt = REGION_EXTENTS (pDrawable->pScreen, &pPixmapPriv->bitRegion);
+
+	if (pPixmapPriv->damageBox.x1 < pBitExt->x2 &&
+	    pPixmapPriv->damageBox.y1 < pBitExt->y2 &&
+	    pPixmapPriv->damageBox.x2 > pBitExt->x1 &&
+	    pPixmapPriv->damageBox.y2 > pBitExt->y1)
+	{
+	    REGION_UNINIT (pDrawable->pScreen, &pPixmapPriv->bitRegion);
+	    REGION_INIT (pDrawable->pScreen, &pPixmapPriv->bitRegion,
+			 NullBox, 0);
 	pPixmapPriv->allBits = FALSE;
     }
+    }
 
     pPixmapPriv->damageBox = miEmptyBox;
 }
