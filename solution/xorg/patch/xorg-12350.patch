diff --git a/hw/xgl/xglgeometry.c b/hw/xgl/xglgeometry.c
index 6b2ebd3..7c46e31 100644
--- a/hw/xgl/xglgeometry.c
+++ b/hw/xgl/xglgeometry.c
@@ -5,7 +5,7 @@
  * and its documentation for any purpose is hereby granted without
  * fee, provided that the above copyright notice appear in all copies
  * and that both that copyright notice and this permission notice
- * appear in supporting documentation, and that the names of
+ * appear in supporting documentation, and that the name of
  * David Reveman not be used in advertising or publicity pertaining to
  * distribution of the software without specific, written prior permission.
  * David Reveman makes no representations about the suitability of this
@@ -20,15 +20,14 @@
  * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
  * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  *
- * Author: David Reveman <davidr@freedesktop.org>
+ * Author: David Reveman <davidr@novell.com>
  */
 
 #include "xgl.h"
+#include "fontstruct.h"
+#include "dixfontstr.h"
 
-struct xglDataTypeInfo {
-    glitz_data_type_t type;
-    int		      size;
-} dataTypes[] = {
+xglDataTypeInfoRec xglGeometryDataTypes[2] = {
     { GLITZ_DATA_TYPE_SHORT, sizeof (glitz_short_t) },
     { GLITZ_DATA_TYPE_FLOAT, sizeof (glitz_float_t) }
 };
@@ -46,17 +45,15 @@ xglGeometryResize (ScreenPtr	  pScreen,
 {
     XGL_SCREEN_PRIV (pScreen);
 
-    if (pGeometry->broken)
+    if (size == pGeometry->size)
 	return;
     
-    if (size == pGeometry->size)
+    if (pGeometry->broken)
 	return;
 
-    if (pGeometry->usage == GEOMETRY_USAGE_USERMEM)
+    if (pGeometry->usage == GEOMETRY_USAGE_SYSMEM)
     {
-	pGeometry->data =
-	    xrealloc (pGeometry->data,
-		      size * dataTypes[pGeometry->dataType].size);
+	pGeometry->data = xrealloc (pGeometry->data, size);
 
 	if (pGeometry->buffer)
 	    glitz_buffer_destroy (pGeometry->buffer);
@@ -81,15 +78,10 @@ xglGeometryResize (ScreenPtr	  pScreen,
     else
     {
 	glitz_buffer_t *newBuffer;
-	int	       dataTypeSize;
-
-	dataTypeSize = dataTypes[pGeometry->dataType].size;
-
 	if (size)
 	{
 	    newBuffer =
-		glitz_geometry_buffer_create (pScreenPriv->drawable, NULL,
-					      size * dataTypeSize,
+		glitz_vertex_buffer_create (pScreenPriv->drawable, NULL, size,
 					      usageTypes[pGeometry->usage]);
 	    if (!newBuffer)
 	    {
@@ -109,8 +101,7 @@ xglGeometryResize (ScreenPtr	  pScreen,
 					GLITZ_BUFFER_ACCESS_WRITE_ONLY);
 	    
 	    if (oldData && newData)
-		memcpy (newData, oldData,
-			MIN (size, pGeometry->size) * dataTypeSize);
+		memcpy (newData, oldData, MIN (size, pGeometry->size));
 	    
 	    glitz_buffer_unmap (pGeometry->buffer);
 	    glitz_buffer_unmap (newBuffer);
@@ -126,101 +117,37 @@ xglGeometryResize (ScreenPtr	  pScreen,
 	pGeometry->endOffset = size;
 }
 
-/*
- * Storage for 100 extra vertices are always allocated if
- * buffer size is to small. Geometry should be initialized
- * to desired size prior to calling this function when size
- * is known.
- */
-#define RESIZE_GEOMETRY_FOR_VERTICES(pScreen, pGeometry, nvertices)	   \
-    if (((pGeometry)->size - (pGeometry)->endOffset) < ((nvertices) << 1)) \
+#define MAP_GEOMETRY(pScreen, pGeometry, offset, units, ptr, _size)	  \
+    if ((pGeometry)->broken)						  \
+	return;								  \
+    (_size) = (units) * xglGeometryDataTypes[(pGeometry)->dataType].size; \
+    if (((pGeometry)->size - (offset)) < (_size))			  \
     {									   \
 	xglGeometryResize (pScreen, pGeometry,				   \
-			   (pGeometry)->endOffset +			   \
-			   ((nvertices) << 1) + 200);			   \
+			   (pGeometry)->endOffset + (_size) + 500);	  \
 	if ((pGeometry)->broken)					   \
 	    return;							   \
-    }
-
-/*
- * Adds a number of rectangles as GL_QUAD primitives
- */
-void
-xglGeometryAddRect (ScreenPtr	   pScreen,
-		    xglGeometryPtr pGeometry,
-		    xRectangle	   *pRect,
-		    int		   nRect)
-{
-    int  nvertices;
-    void *ptr;
-
-    if (pGeometry->broken)
-	return;
-
-    if (nRect < 1)
-	return;
-
-    nvertices = nRect << 2;
-
-    RESIZE_GEOMETRY_FOR_VERTICES (pScreen, pGeometry, nvertices);
-
-    ptr = glitz_buffer_map (pGeometry->buffer, GLITZ_BUFFER_ACCESS_WRITE_ONLY);
-    if (!ptr)
-    {
-	pGeometry->broken = TRUE;
-	return;
-    }
-    
-    switch (pGeometry->dataType) {
-    case GEOMETRY_DATA_TYPE_SHORT:
-    {
-	glitz_short_t *data = (glitz_short_t *) ptr;
-
-	data += pGeometry->endOffset;
-
-	while (nRect--)
-	{
-	    *data++ = pRect->x;
-	    *data++ = pRect->y;
-	    *data++ = pRect->x + pRect->width;
-	    *data++ = pRect->y;
-	    *data++ = pRect->x + pRect->width;
-	    *data++ = pRect->y + pRect->height;
-	    *data++ = pRect->x;
-	    *data++ = pRect->y + pRect->height;
-
-	    pRect++;
-	}
-    } break;
-    case GEOMETRY_DATA_TYPE_FLOAT:
-    {
-	glitz_float_t *data = (glitz_float_t *) ptr;
-
-	data += pGeometry->endOffset;
-
-	while (nRect--)
-	{
-	    *data++ = (glitz_float_t) pRect->x;
-	    *data++ = (glitz_float_t) pRect->y;
-	    *data++ = (glitz_float_t) pRect->x + pRect->width;
-	    *data++ = (glitz_float_t) pRect->y;
-	    *data++ = (glitz_float_t) pRect->x + pRect->width;
-	    *data++ = (glitz_float_t) pRect->y + pRect->height;
-	    *data++ = (glitz_float_t) pRect->x;
-	    *data++ = (glitz_float_t) pRect->y + pRect->height;
-		
-	    pRect++;
-	}
-    } break;
-    }
-	
-    if (glitz_buffer_unmap (pGeometry->buffer))
-    {
-	pGeometry->broken = TRUE;
-	return;
-    }
+    }									  \
+    (ptr) = glitz_buffer_map ((pGeometry)->buffer,			  \
+			      GLITZ_BUFFER_ACCESS_WRITE_ONLY);		  \
+    if (!(ptr))								  \
+    {									  \
+	(pGeometry)->broken = TRUE;					  \
+	return;								  \
+    }									  \
+    (ptr) += (offset)
 
-    pGeometry->endOffset += (nvertices << 1);
+#define UNMAP_GEOMETRY(pGeometry, offset, _size)			   \
+    if (glitz_buffer_unmap ((pGeometry)->buffer))			   \
+    {									   \
+	(pGeometry)->broken = TRUE;					   \
+	return;								   \
+    }									   \
+    if (((offset) + (_size)) > (pGeometry)->endOffset)			   \
+    {									   \
+	(pGeometry)->endOffset = (offset) + (_size);			   \
+	(pGeometry)->count = (pGeometry)->endOffset /			   \
+	    (2 * xglGeometryDataTypes[(pGeometry)->dataType].size);	   \
 }
 
 /*
@@ -230,35 +157,22 @@ void
 xglGeometryAddBox (ScreenPtr	  pScreen,
 		   xglGeometryPtr pGeometry,
 		   BoxPtr	  pBox,
-		   int		  nBox)
+		   int		  nBox,
+		   int		  offset)
 {
-    int	 nvertices;
-    void *ptr;
-
-    if (pGeometry->broken)
-	return;
+    int  size;
+    char *ptr;
 
     if (nBox < 1)
 	return;
 
-    nvertices = nBox << 2;
-
-    RESIZE_GEOMETRY_FOR_VERTICES (pScreen, pGeometry, nvertices);
-	
-    ptr = glitz_buffer_map (pGeometry->buffer, GLITZ_BUFFER_ACCESS_WRITE_ONLY);
-    if (!ptr)
-    {
-	pGeometry->broken = TRUE;
-	return;
-    }
+    MAP_GEOMETRY (pScreen, pGeometry, offset, nBox * 8, ptr, size);
 
     switch (pGeometry->dataType) {
     case GEOMETRY_DATA_TYPE_SHORT:
     {
 	glitz_short_t *data = (glitz_short_t *) ptr;
 
-	data += pGeometry->endOffset;
-
 	while (nBox--)
 	{
 	    *data++ = (glitz_short_t) pBox->x1;
@@ -277,8 +191,6 @@ xglGeometryAddBox (ScreenPtr	  pScreen,
     {
 	glitz_float_t *data = (glitz_float_t *) ptr;
 	
-	data += pGeometry->endOffset;
-
 	while (nBox--)
 	{
 	    *data++ = (glitz_float_t) pBox->x1;
@@ -295,59 +207,38 @@ xglGeometryAddBox (ScreenPtr	  pScreen,
     } break;
     }
 
-    if (glitz_buffer_unmap (pGeometry->buffer))
-    {
-	pGeometry->broken = TRUE;
-	return;
-    }
-
-    pGeometry->endOffset += (nvertices << 1);
+    UNMAP_GEOMETRY (pGeometry, offset, size);
 }
 
 /*
  * Adds a number of spans as GL_LINE primitives
- *
- * An extra 1 is added to *pwidth as OpenGL line segments are half-opened.
  */
 void
 xglGeometryAddSpan (ScreenPtr	   pScreen,
 		    xglGeometryPtr pGeometry,
 		    DDXPointPtr	   ppt,
 		    int		   *pwidth,
-		    int		   n)
+		    int		   n,
+		    int		   offset)
 {
-    int  nvertices;
-    void *ptr;
-
-    if (pGeometry->broken)
-	return;
+    int  size;
+    char *ptr;
 
     if (n < 1)
 	return;
 
-    nvertices = n << 1;
-
-    RESIZE_GEOMETRY_FOR_VERTICES (pScreen, pGeometry, nvertices);
-	
-    ptr = glitz_buffer_map (pGeometry->buffer, GLITZ_BUFFER_ACCESS_WRITE_ONLY);
-    if (!ptr)
-    {
-	pGeometry->broken = TRUE;
-	return;
-    }
+    MAP_GEOMETRY (pScreen, pGeometry, offset, n * 4, ptr, size);
     
     switch (pGeometry->dataType) {
     case GEOMETRY_DATA_TYPE_SHORT:
     {
 	glitz_short_t *data = (glitz_short_t *) ptr;
 
-	data += pGeometry->endOffset;
-
 	while (n--)
 	{
 	    *data++ = (glitz_short_t) ppt->x;
 	    *data++ = (glitz_short_t) ppt->y;
-	    *data++ = (glitz_short_t) (ppt->x + *pwidth + 1);
+	    *data++ = (glitz_short_t) (ppt->x + *pwidth);
 	    *data++ = (glitz_short_t) ppt->y;
 	
 	    ppt++;
@@ -358,13 +249,11 @@ xglGeometryAddSpan (ScreenPtr	   pScreen,
     {
 	glitz_float_t *data = (glitz_float_t *) ptr;
 
-	data += pGeometry->endOffset;
-
 	while (n--)
 	{
 	    *data++ = (glitz_float_t) ppt->x;
 	    *data++ = (glitz_float_t) ppt->y;
-	    *data++ = (glitz_float_t) (ppt->x + *pwidth + 1);
+	    *data++ = (glitz_float_t) (ppt->x + *pwidth);
 	    *data++ = (glitz_float_t) ppt->y;
 	
 	    ppt++;
@@ -373,13 +262,7 @@ xglGeometryAddSpan (ScreenPtr	   pScreen,
     } break;
     }
 	
-    if (glitz_buffer_unmap (pGeometry->buffer))
-    {
-	pGeometry->broken = TRUE;
-	return;
-    }
-
-    pGeometry->endOffset += (nvertices << 1);
+    UNMAP_GEOMETRY (pGeometry, offset, size);
 }
 
 /*
@@ -401,28 +284,17 @@ xglGeometryAddLine (ScreenPtr	   pScreen,
 		    int		   loop,
 		    int		   mode,
 		    int		   npt,
-		    DDXPointPtr    ppt)
+		    DDXPointPtr    ppt,
+		    int		   offset)
 {
     DDXPointRec pt;
-    int		nvertices;
-    void	*ptr;
-
-    if (pGeometry->broken)
-	return;
+    int		size;
+    char	*ptr;
 
     if (npt < 2)
 	return;
 
-    nvertices = npt;
-
-    RESIZE_GEOMETRY_FOR_VERTICES (pScreen, pGeometry, nvertices);
-	
-    ptr = glitz_buffer_map (pGeometry->buffer, GLITZ_BUFFER_ACCESS_WRITE_ONLY);
-    if (!ptr)
-    {
-	pGeometry->broken = TRUE;
-	return;
-    }
+    MAP_GEOMETRY (pScreen, pGeometry, offset, npt * 2, ptr, size);
 
     pt.x = 0;
     pt.y = 0;
@@ -432,8 +304,6 @@ xglGeometryAddLine (ScreenPtr	   pScreen,
     {
 	glitz_short_t *data = (glitz_short_t *) ptr;
 
-	data += pGeometry->endOffset;
-
 	while (npt--)
 	{
 	    if (mode == CoordModePrevious)
@@ -447,19 +317,17 @@ xglGeometryAddLine (ScreenPtr	   pScreen,
 		pt.y = ppt->y;
 	    }
 
-	    *data++ = pt.x;
-	    *data++ = pt.y;
-
 	    if (npt || loop)
 	    {
-		*data++ = pt.x;
-		*data++ = pt.y;
+		*data++ = (glitz_short_t) pt.x;
+		*data++ = (glitz_short_t) pt.y;
 	    }
 	    else
 	    {
 		ppt--;
-		*data++ = ADJUST_END_POINT (ppt->x, pt.x, ppt->y == pt.y);
-		*data++ = ADJUST_END_POINT (ppt->y, pt.y, 0);
+		*data++ = (glitz_short_t)
+		    ADJUST_END_POINT (ppt->x, pt.x, ppt->y == pt.y);
+		*data++ = (glitz_short_t) ADJUST_END_POINT (ppt->y, pt.y, 0);
 	    }
 	
 	    ppt++;
@@ -469,8 +337,6 @@ xglGeometryAddLine (ScreenPtr	   pScreen,
     {
 	glitz_float_t *data = (glitz_float_t *) ptr;
 
-	data += pGeometry->endOffset;
-	
 	while (npt--)
 	{
 	    if (mode == CoordModePrevious)
@@ -502,13 +368,7 @@ xglGeometryAddLine (ScreenPtr	   pScreen,
     } break;
     }
 	
-    if (glitz_buffer_unmap (pGeometry->buffer))
-    {
-	pGeometry->broken = TRUE;
-	return;
-    }
-
-    pGeometry->endOffset += (nvertices << 1);
+    UNMAP_GEOMETRY (pGeometry, offset, size);
 }
 
 /*
@@ -518,42 +378,31 @@ void
 xglGeometryAddSegment (ScreenPtr      pScreen,
 		       xglGeometryPtr pGeometry,
 		       int	      nsegInit,
-		       xSegment       *pSegInit)
+		       xSegment       *pSegInit,
+		       int	      offset)
 {
-    int  nvertices;
-    void *ptr;
-
-    if (pGeometry->broken)
-	return;
+    int  size;
+    char *ptr;
 
     if (nsegInit < 1)
 	return;
 
-    nvertices = nsegInit << 1;
-
-    RESIZE_GEOMETRY_FOR_VERTICES (pScreen, pGeometry, nvertices);
-	
-    ptr = glitz_buffer_map (pGeometry->buffer, GLITZ_BUFFER_ACCESS_WRITE_ONLY);
-    if (!ptr)
-    {
-	pGeometry->broken = TRUE;
-	return;
-    }
+    MAP_GEOMETRY (pScreen, pGeometry, offset, nsegInit * 4, ptr, size);
 
     switch (pGeometry->dataType) {
     case GEOMETRY_DATA_TYPE_SHORT:
     {
 	glitz_short_t *data = (glitz_short_t *) ptr;
 
-	data += pGeometry->endOffset;
-
 	while (nsegInit--)
 	{
-	    *data++ = pSegInit->x1;
-	    *data++ = pSegInit->y1;
-	    *data++ = ADJUST_END_POINT (pSegInit->x1, pSegInit->x2,
+	    *data++ = (glitz_short_t) pSegInit->x1;
+	    *data++ = (glitz_short_t) pSegInit->y1;
+	    *data++ = (glitz_short_t)
+		ADJUST_END_POINT (pSegInit->x1, pSegInit->x2,
 					pSegInit->y1 == pSegInit->y2);
-	    *data++ = ADJUST_END_POINT (pSegInit->y1, pSegInit->y2, 0);
+	    *data++ = (glitz_short_t)
+		ADJUST_END_POINT (pSegInit->y1, pSegInit->y2, 0);
 	
 	    pSegInit++;
 	}
@@ -562,8 +411,6 @@ xglGeometryAddSegment (ScreenPtr      pScreen,
     {
 	glitz_float_t *data = (glitz_float_t *) ptr;
 
-	data += pGeometry->endOffset;
-
 	while (nsegInit--)
 	{
 	    *data++ = (glitz_float_t) pSegInit->x1;
@@ -579,37 +426,298 @@ xglGeometryAddSegment (ScreenPtr      pScreen,
     } break;
     }
 	
-    if (glitz_buffer_unmap (pGeometry->buffer))
+    UNMAP_GEOMETRY (pGeometry, offset, size);
+}
+
+void
+xglGeometryForGlyph (ScreenPtr	    pScreen,
+		     xglGeometryPtr pGeometry,
+		     unsigned int   nGlyph,
+		     CharInfoPtr    *ppciInit,
+		     pointer	    pglyphBase)
+{
+    CharInfoPtr		*ppci;
+    CharInfoPtr		pci;
+    unsigned char	*glyphbase = (pointer) ~0;
+    unsigned char	*pglyph;
+    int			x = 0;
+    int			gx, gy;
+    int			gWidth, gHeight;
+    int			n, lastX = 0, lastY = 0;
+    glitz_multi_array_t *array;
+    glitz_buffer_t	*buffer;
+
+    ppci = ppciInit;
+    n = nGlyph;
+    
+    while (n--)
+    {
+	pglyph = FONTGLYPHBITS (pglyphBase, *ppci++);
+	if (pglyph < glyphbase)
+	    glyphbase = pglyph;
+    }
+
+    buffer = glitz_buffer_create_for_data (glyphbase);
+    if (!buffer)
     {
 	pGeometry->broken = TRUE;
 	return;
     }
 
-    pGeometry->endOffset += (nvertices << 1);
+    GEOMETRY_SET_BUFFER (pGeometry, buffer);
+
+    array = glitz_multi_array_create (nGlyph);
+    if (!array)
+    {
+	pGeometry->broken = TRUE;
+	return;
 }
 
-Bool
-xglSetGeometry (xglGeometryPtr 	pGeometry,
-		glitz_surface_t *surface,
-		int		first,
+    GEOMETRY_SET_MULTI_ARRAY (pGeometry, array);
+
+    ppci = ppciInit;
+    while (nGlyph--)
+    {
+	pci = *ppci++;
+	pglyph = FONTGLYPHBITS (pglyphBase, pci);
+	gWidth = GLYPHWIDTHPIXELS (pci);
+	gHeight = GLYPHHEIGHTPIXELS (pci);
+	
+	if (gWidth && gHeight)
+	{
+	    gx = x + pci->metrics.leftSideBearing;
+	    gy = -pci->metrics.ascent;
+
+	    glitz_multi_array_add (array,
+				   (pglyph - glyphbase) * 8,
+				   gWidth, gHeight,
+				   (gx - lastX) << 16, (gy - lastY) << 16);
+	    lastX = gx;
+	    lastY = gy;
+	}
+	x += pci->metrics.characterWidth;
+    }
+
+    glitz_buffer_destroy (buffer);
+    glitz_multi_array_destroy (array);
+}
+
+#define FIXED_LINE_X_TO_FLOAT(line, v)		  \
+    (((glitz_float_t)				  \
+	((line).p1.x + (xFixed_16_16)		  \
+	 (((xFixed_32_32) ((v) - (line).p1.y) *   \
+	   ((line).p2.x - (line).p1.x)) /	  \
+	  ((line).p2.y - (line).p1.y)))) / 65536)
+
+#define FIXED_LINE_X_CEIL_TO_FLOAT(line, v)	\
+  (((glitz_float_t)				\
+      ((line).p1.x + (xFixed_16_16)		\
+       (((((line).p2.y - (line).p1.y) - 1) +	\
+         ((xFixed_32_32) ((v) - (line).p1.y) *	\
+          ((line).p2.x - (line).p1.x))) /	\
+	((line).p2.y - (line).p1.y)))) / 65536)
+
+/*
+ * Adds a number of trapezoids as GL_QUAD primitives
+ */
+void
+xglGeometryAddTrapezoid (ScreenPtr	pScreen,
+			 xglGeometryPtr pGeometry,
+			 xTrapezoid	*pTrap,
+			 int		nTrap,
+			 int		offset)
+{
+    int  size;
+    char *ptr;
+
+    if (nTrap < 1)
+	return;
+
+    MAP_GEOMETRY (pScreen, pGeometry, offset, nTrap * 8, ptr, size);
+
+    switch (pGeometry->dataType) {
+    case GEOMETRY_DATA_TYPE_SHORT:
+	/* not supported */
+	pGeometry->broken = TRUE;
+	break;
+    case GEOMETRY_DATA_TYPE_FLOAT:
+    {
+	glitz_float_t *data = (glitz_float_t *) ptr;
+	glitz_float_t top, bottom;
+
+	while (nTrap--)
+	{
+	    top    = FIXED_TO_FLOAT (pTrap->top);
+	    bottom = FIXED_TO_FLOAT (pTrap->bottom);
+	    
+	    *data++ = FIXED_LINE_X_TO_FLOAT (pTrap->left, pTrap->top);
+	    *data++ = top;
+	    *data++ = FIXED_LINE_X_CEIL_TO_FLOAT (pTrap->right, pTrap->top);
+	    *data++ = top;
+	    *data++ = FIXED_LINE_X_CEIL_TO_FLOAT (pTrap->right, pTrap->bottom);
+	    *data++ = bottom;
+	    *data++ = FIXED_LINE_X_TO_FLOAT (pTrap->left, pTrap->bottom);
+	    *data++ = bottom;
+
+	    pTrap++;
+	}
+    } break;
+    }
+
+    UNMAP_GEOMETRY (pGeometry, offset, size);
+}
+
+/*
+ * Adds a number of traps as GL_QUAD primitives
+ */
+void
+xglGeometryAddTrap (ScreenPtr	   pScreen,
+		    xglGeometryPtr pGeometry,
+		    xTrap	   *pTrap,
+		    int		   nTrap,
+		    int		   offset)
+{
+    int  size;
+    char *ptr;
+
+    if (nTrap < 1)
+	return;
+
+    MAP_GEOMETRY (pScreen, pGeometry, offset, nTrap * 8, ptr, size);
+
+    switch (pGeometry->dataType) {
+    case GEOMETRY_DATA_TYPE_SHORT:
+	/* not supported */
+	pGeometry->broken = TRUE;
+	break;
+    case GEOMETRY_DATA_TYPE_FLOAT:
+    {
+	glitz_float_t *data = (glitz_float_t *) ptr;
+	glitz_float_t top, bottom;
+
+	while (nTrap--)
+	{
+	    top    = FIXED_TO_FLOAT (pTrap->top.y);
+	    bottom = FIXED_TO_FLOAT (pTrap->bot.y);
+	    
+	    *data++ = FIXED_TO_FLOAT (pTrap->top.l);
+	    *data++ = top;
+	    *data++ = FIXED_TO_FLOAT (pTrap->top.r);
+	    *data++ = top;
+	    *data++ = FIXED_TO_FLOAT (pTrap->bot.r);
+	    *data++ = bottom;
+	    *data++ = FIXED_TO_FLOAT (pTrap->bot.l);
+	    *data++ = bottom;
+
+	    pTrap++;
+	}
+    } break;
+    }
+
+    UNMAP_GEOMETRY (pGeometry, offset, size);
+}
+
+/* XXX: scratch geometry size never shrinks, it just gets larger when
+   required. this is not acceptable. */
+xglGeometryPtr
+xglGetScratchGeometryWithSize (ScreenPtr pScreen,
+			       int	 size)
+{
+    xglGeometryPtr pGeometry;
+
+    XGL_SCREEN_PRIV (pScreen);
+	
+    pGeometry = &pScreenPriv->scratchGeometry;
+    
+    if (pGeometry->broken || pGeometry->size < size)
+    {
+	GEOMETRY_UNINIT (pGeometry);
+	GEOMETRY_INIT (pScreen, pGeometry, pGeometry->type,
+		       pScreenPriv->geometryUsage, size);
+    }
+    else
+    {
+	if (pGeometry->array)
+	{
+	    glitz_multi_array_destroy (pGeometry->array);
+	    pGeometry->array = NULL;
+	}
+	pGeometry->endOffset = 0;
+	pGeometry->xOff      = 0;
+	pGeometry->yOff      = 0;
+	pGeometry->first     = 0;
+	pGeometry->count     = 0;
+	pGeometry->width     = 2;
+    }
+    
+    return pGeometry;
+}
+
+xglGeometryPtr
+xglGetScratchVertexGeometryWithType (ScreenPtr pScreen,
+				     int       type,
 		int		count)
 {
-    glitz_geometry_format_t format;
+    xglGeometryPtr pGeometry;
+    int		   stride;
     
+    stride = 2 * xglGeometryDataTypes[type].size;
+    
+    pGeometry = xglGetScratchGeometryWithSize (pScreen, count * stride);
+
+    pGeometry->type	= GLITZ_GEOMETRY_TYPE_VERTEX;
+    pGeometry->dataType	= type;
+    
+    pGeometry->f.vertex.primitive	 = GLITZ_PRIMITIVE_QUADS;
+    pGeometry->f.vertex.type		 = xglGeometryDataTypes[type].type;
+    pGeometry->f.vertex.bytes_per_vertex = stride;
+    pGeometry->f.vertex.attributes       = 0;
+    
+    return pGeometry;
+}
+
+xglGeometryPtr
+xglGetScratchVertexGeometry (ScreenPtr pScreen,
+			     int	 count)
+{
+    xglGeometryPtr pGeometry;
+    int		   type, stride;
+
+    XGL_SCREEN_PRIV (pScreen);
+
+    type   = pScreenPriv->geometryDataType;
+    stride = 2 * xglGeometryDataTypes[type].size;
+
+    pGeometry = xglGetScratchGeometryWithSize (pScreen, count * stride);
+
+    pGeometry->type	= GLITZ_GEOMETRY_TYPE_VERTEX;
+    pGeometry->dataType	= type;
+    
+    pGeometry->f.vertex.primitive	 = GLITZ_PRIMITIVE_QUADS;
+    pGeometry->f.vertex.type		 = xglGeometryDataTypes[type].type;
+    pGeometry->f.vertex.bytes_per_vertex = stride;
+    pGeometry->f.vertex.attributes       = 0;
+    
+    return pGeometry;
+}
+
+Bool
+xglSetGeometry (xglGeometryPtr 	pGeometry,
+		glitz_surface_t *surface)
+{
     if (pGeometry->broken)
 	return FALSE;
     
-    format.first     = first;
-    format.count     = count;
-    format.primitive = pGeometry->primitive;
-    format.type      = dataTypes[pGeometry->dataType].type;
-    format.mode      = GLITZ_GEOMETRY_MODE_DIRECT;
-    format.edge_hint = GLITZ_GEOMETRY_EDGE_HINT_SHARP;
-
-    glitz_set_geometry (surface,
-			pGeometry->xOff, pGeometry->yOff,
-			&format,
+    glitz_set_geometry (surface, pGeometry->type, &pGeometry->f,
 			pGeometry->buffer);
 
+    if (pGeometry->array)
+	glitz_set_multi_array (surface, pGeometry->array,
+			       pGeometry->xOff, pGeometry->yOff);
+    else
+	glitz_set_array (surface,
+			 pGeometry->first, pGeometry->width, pGeometry->count,
+			 pGeometry->xOff, pGeometry->yOff);
+    
     return TRUE;
 }
