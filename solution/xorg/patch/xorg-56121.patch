diff --git a/test/xi2/protocol-xiselectevents.c b/test/xi2/protocol-xiselectevents.c
index 0390858..4daba87 100644
--- a/test/xi2/protocol-xiselectevents.c
+++ b/test/xi2/protocol-xiselectevents.c
@@ -61,7 +61,9 @@
 
 static unsigned char *data[4096 * 20]; /* the request data buffer */
 
-int __wrap_XISetEventMask(DeviceIntPtr dev, WindowPtr win, int len, unsigned char* mask)
+int
+__wrap_XISetEventMask(DeviceIntPtr dev, WindowPtr win, int len,
+                      unsigned char *mask)
 {
     return Success;
 }
@@ -71,14 +73,14 @@ int __wrap_XISetEventMask(DeviceIntPtr dev, WindowPtr win, int len, unsigned cha
  * fake client window. If the requested ID is neither of those wanted,
  * return whatever the real dixLookupWindow does.
  */
-int __wrap_dixLookupWindow(WindowPtr *win, XID id, ClientPtr client, Mask access)
-{
-    if (id == root.drawable.id)
+int
+__wrap_dixLookupWindow(WindowPtr *win, XID id, ClientPtr client, Mask access)
     {
+    if (id == root.drawable.id) {
         *win = &root;
         return Success;
-    } else if (id == window.drawable.id)
-    {
+    }
+    else if (id == window.drawable.id) {
         *win = &window;
         return Success;
     }
@@ -86,8 +88,8 @@ int __wrap_dixLookupWindow(WindowPtr *win, XID id, ClientPtr client, Mask access
     return __real_dixLookupWindow(win, id, client, access);
 }
 
-
-static void request_XISelectEvent(xXISelectEventsReq *req, int error)
+static void
+request_XISelectEvent(xXISelectEventsReq * req, int error)
 {
     int i;
     int rc;
@@ -96,8 +98,7 @@ static void request_XISelectEvent(xXISelectEventsReq *req, int error)
 
     req->length = (sz_xXISelectEventsReq/4);
     mask = (xXIEventMask*)&req[1];
-    for (i = 0; i < req->num_masks; i++)
-    {
+    for (i = 0; i < req->num_masks; i++) {
         req->length += sizeof(xXIEventMask)/4 + mask->mask_len;
         mask = (xXIEventMask*)((char*)&mask[1] + mask->mask_len * 4);
     }
@@ -110,8 +111,7 @@ static void request_XISelectEvent(xXISelectEventsReq *req, int error)
     client.swapped = TRUE;
 
     mask = (xXIEventMask*)&req[1];
-    for (i = 0; i < req->num_masks; i++)
-    {
+    for (i = 0; i < req->num_masks; i++) {
         next = (xXIEventMask*)((char*)&mask[1] + mask->mask_len * 4);
         swaps(&mask->deviceid);
         swaps(&mask->mask_len);
@@ -125,29 +125,30 @@ static void request_XISelectEvent(xXISelectEventsReq *req, int error)
     assert(rc == error);
 }
 
-static void _set_bit(unsigned char *bits, int bit)
+static void
+_set_bit(unsigned char *bits, int bit)
 {
     SetBit(bits, bit);
-    if (bit >= XI_TouchBegin && bit <= XI_TouchOwnership)
-    {
+    if (bit >= XI_TouchBegin && bit <= XI_TouchOwnership) {
         SetBit(bits, XI_TouchBegin);
         SetBit(bits, XI_TouchUpdate);
         SetBit(bits, XI_TouchEnd);
     }
 }
 
-static void _clear_bit(unsigned char *bits, int bit)
+static void
+_clear_bit(unsigned char *bits, int bit)
 {
     ClearBit(bits, bit);
-    if (bit >= XI_TouchBegin && bit <= XI_TouchOwnership)
-    {
+    if (bit >= XI_TouchBegin && bit <= XI_TouchOwnership) {
         ClearBit(bits, XI_TouchBegin);
         ClearBit(bits, XI_TouchUpdate);
         ClearBit(bits, XI_TouchEnd);
     }
 }
 
-static void request_XISelectEvents_masks(xXISelectEventsReq *req)
+static void
+request_XISelectEvents_masks(xXISelectEventsReq * req)
 {
     int i, j;
     xXIEventMask *mask;
@@ -158,8 +159,7 @@ static void request_XISelectEvents_masks(xXISelectEventsReq *req)
     req->win = ROOT_WINDOW_ID;
 
     /* if a clients submits more than 100 masks, consider it insane and untested */
-    for (i = 1; i <= 1000; i++)
-    {
+    for (i = 1; i <= 1000; i++) {
         req->num_masks = i;
         mask->deviceid = XIAllDevices;
 
@@ -177,8 +177,7 @@ static void request_XISelectEvents_masks(xXISelectEventsReq *req)
         bits = (unsigned char*)&mask[1];
         mask->mask_len = (nmasks + 3)/4 * 10;
         memset(bits, 0, mask->mask_len * 4);
-        for (j = 0; j <= XI2LASTEVENT; j++)
-        {
+        for (j = 0; j <= XI2LASTEVENT; j++) {
             _set_bit(bits, j);
             request_XISelectEvent(req, Success);
             _clear_bit(bits, j);
@@ -193,8 +192,7 @@ static void request_XISelectEvents_masks(xXISelectEventsReq *req)
         mask->mask_len = (nmasks + 3)/4 * 10;
         memset(bits, 0, mask->mask_len * 4);
 
-        for (j = 0; j <= XI2LASTEVENT; j++)
-        {
+        for (j = 0; j <= XI2LASTEVENT; j++) {
             _set_bit(bits, j);
             request_XISelectEvent(req, Success);
         }
@@ -207,8 +205,7 @@ static void request_XISelectEvents_masks(xXISelectEventsReq *req)
         mask->mask_len = (nmasks + 3)/4 * 10;
         memset(bits, 0, mask->mask_len * 4);
 
-        for (j = XI2LASTEVENT + 1; j < mask->mask_len * 4; j++)
-        {
+        for (j = XI2LASTEVENT + 1; j < mask->mask_len * 4; j++) {
             _set_bit(bits, j);
             request_XISelectEvent(req, BadValue);
             _clear_bit(bits, j);
@@ -220,8 +217,7 @@ static void request_XISelectEvents_masks(xXISelectEventsReq *req)
         bits = (unsigned char*)&mask[1];
         mask->mask_len = (nmasks + 3)/4;
         memset(bits, 0, mask->mask_len * 4);
-        for (j = 0; j <= XI2LASTEVENT; j++)
-        {
+        for (j = 0; j <= XI2LASTEVENT; j++) {
             _set_bit(bits, j);
             request_XISelectEvent(req, Success);
         }
@@ -236,8 +232,7 @@ static void request_XISelectEvents_masks(xXISelectEventsReq *req)
         SetBit(bits, XI_HierarchyChanged);
         mask->deviceid = XIAllDevices;
         request_XISelectEvent(req, Success);
-        for (j = 1; j < devices.num_devices; j++)
-        {
+        for (j = 1; j < devices.num_devices; j++) {
             mask->deviceid = j;
             request_XISelectEvent(req, BadValue);
         }
@@ -251,21 +246,24 @@ static void request_XISelectEvents_masks(xXISelectEventsReq *req)
         for (j = 0; j <= XI2LASTEVENT; j++)
             _set_bit(bits, j);
         _clear_bit(bits, XI_HierarchyChanged);
-        for (j = 1; j < 6; j++)
-        {
+        for (j = 1; j < 6; j++) {
             mask->deviceid = j;
             request_XISelectEvent(req, Success);
         }
 
-        mask = (xXIEventMask*)((char*)mask + sizeof(xXIEventMask) + mask->mask_len * 4);
+        mask =
+            (xXIEventMask *) ((char *) mask + sizeof(xXIEventMask) +
+                              mask->mask_len * 4);
     }
 }
 
-static void test_XISelectEvents(void)
+static void
+test_XISelectEvents(void)
 {
     int i;
     xXIEventMask *mask;
     xXISelectEventsReq *req;
+
     req = (xXISelectEventsReq*)data;
 
     request_init(req, XISelectEvents);
@@ -320,8 +318,7 @@ static void test_XISelectEvents(void)
 
     /* testing various device ids */
     printf("Testing existing device ids.\n");
-    for (i = 0; i < 6; i++)
-    {
+    for (i = 0; i < 6; i++) {
         mask = (xXIEventMask*)&req[1];
         mask->deviceid = i;
         mask->mask_len = 1;
@@ -331,8 +328,7 @@ static void test_XISelectEvents(void)
     }
 
     printf("Testing non-existing device ids.\n");
-    for (i = 6; i <= 0xFFFF; i++)
-    {
+    for (i = 6; i <= 0xFFFF; i++) {
         req->win = ROOT_WINDOW_ID;
         req->num_masks = 1;
         mask = (xXIEventMask*)&req[1];
@@ -344,7 +340,8 @@ static void test_XISelectEvents(void)
     request_XISelectEvents_masks(req);
 }
 
-int main(int argc, char** argv)
+int
+main(int argc, char **argv)
 {
     init_simple();
 
@@ -352,4 +349,3 @@ int main(int argc, char** argv)
 
     return 0;
 }
-
