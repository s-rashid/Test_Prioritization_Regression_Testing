diff --git a/hw/xgl/xglparse.c b/hw/xgl/xglparse.c
index 663d798..c1f7e65 100644
--- a/hw/xgl/xglparse.c
+++ b/hw/xgl/xglparse.c
@@ -44,17 +44,16 @@ xglParseFindNext (char *cur,
 }
 
 void
-xglParseScreen (xglScreenInfoPtr pScreenInfo,
-		char	         *arg)
+xglParseScreen (char *arg)
 {
     char delim;
     char save[1024];
     int	 i, pixels, mm;
     
-    pScreenInfo->width    = 0;
-    pScreenInfo->height   = 0;
-    pScreenInfo->widthMm  = 0;
-    pScreenInfo->heightMm = 0;
+    xglScreenInfo.width    = 0;
+    xglScreenInfo.height   = 0;
+    xglScreenInfo.widthMm  = 0;
+    xglScreenInfo.heightMm = 0;
     
     if (!arg)
 	return;
@@ -82,13 +81,13 @@ xglParseScreen (xglScreenInfoPtr pScreenInfo,
 	
 	if (i == 0)
 	{
-	    pScreenInfo->width   = pixels;
-	    pScreenInfo->widthMm = mm;
+	    xglScreenInfo.width   = pixels;
+	    xglScreenInfo.widthMm = mm;
 	}
 	else
 	{
-	    pScreenInfo->height   = pixels;
-	    pScreenInfo->heightMm = mm;
+	    xglScreenInfo.height   = pixels;
+	    xglScreenInfo.heightMm = mm;
 	}
 	
 	if (delim != 'x')
@@ -99,79 +98,66 @@ xglParseScreen (xglScreenInfoPtr pScreenInfo,
 void
 xglUseMsg (void)
 {
-    ErrorF ("-screen WIDTH[/WIDTHMM]xHEIGHT[/HEIGHTMM] "
-	    "specify screen characteristics\n");
-    ErrorF ("-fullscreen            run fullscreen\n");
     ErrorF ("-vertextype [short|float] set vertex data type\n");
-    ErrorF ("-vbostream             "
-	    "use vertex buffer objects for streaming of vertex data\n");
     ErrorF ("-yinverted             Y is upside-down\n");
-    ErrorF ("-pbomask [1|4|8|16|32] "
-	    "set bpp's to use with pixel buffer objects\n");
     ErrorF ("-lines                 "
 	    "accelerate lines that are not vertical or horizontal\n");
+    ErrorF ("-vbo                   "
+	    "use vertex buffer objects for streaming of vertex data\n");
+    ErrorF ("-pbomask [1|4|8|16|32] "
+	    "set bpp's to use with pixel buffer objects\n");
+    ErrorF ("-fbo                   "
+	    "use frame buffer objects for accelerate offscreen drawing\n");
 }
 
 int
-xglProcessArgument (xglScreenInfoPtr pScreenInfo,
-		    int		     argc,
+xglProcessArgument (int	 argc,
 		    char	     **argv,
 		    int		     i)
 {
-    if (!strcmp (argv[i], "-screen"))
+    if (!strcmp (argv[i], "-vertextype"))
     {
 	if ((i + 1) < argc)
 	{
-	    xglParseScreen (pScreenInfo, argv[i + 1]);
+	    if (!strcasecmp (argv[i + 1], "short"))
+		xglScreenInfo.geometryDataType = GEOMETRY_DATA_TYPE_SHORT;
+	    else if (!strcasecmp (argv[i + 1], "float"))
+		xglScreenInfo.geometryDataType = GEOMETRY_DATA_TYPE_FLOAT;
 	}
 	else
 	    return 1;
 	
 	return 2;
     }
-    else if (!strcmp (argv[i], "-fullscreen"))
-    {
-	pScreenInfo->fullscreen = TRUE;
-	return 1;
-    }
-    else if (!strcmp (argv[i], "-vertextype"))
-    {
-	if ((i + 1) < argc)
+    else if (!strcmp (argv[i], "-yinverted"))
 	{
-	    if (!strcasecmp (argv[i + 1], "short"))
-		pScreenInfo->geometryDataType = GEOMETRY_DATA_TYPE_SHORT;
-	    else if (!strcasecmp (argv[i + 1], "float"))
-		pScreenInfo->geometryDataType = GEOMETRY_DATA_TYPE_FLOAT;
-	}
-	else
+	xglScreenInfo.yInverted = TRUE;
 	    return 1;
-	
-	return 2;
     }
-    else if (!strcmp (argv[i], "-vbostream"))
+    else if (!strcmp (argv[i], "-lines"))
     {
-	pScreenInfo->geometryUsage = GEOMETRY_USAGE_STREAM;
+	xglScreenInfo.lines = TRUE;
 	return 1;
     }
-    else if (!strcmp (argv[i], "-yinverted"))
+    else if (!strcmp (argv[i], "-vbo"))
     {
-	pScreenInfo->yInverted = TRUE;
+	xglScreenInfo.geometryUsage = GEOMETRY_USAGE_STREAM;
 	return 1;
     }
     else if (!strcmp (argv[i], "-pbomask"))
     {
 	if ((i + 1) < argc)
 	{
-	    pScreenInfo->pboMask = atoi (argv[i + 1]);
+	    xglScreenInfo.pboMask = atoi (argv[i + 1]);
 	}
 	else
 	    return 1;
 	
 	return 2;
     }
-    else if (!strcmp (argv[i], "-lines"))
+    else if (!strcmp (argv[i], "-fbo"))
     {
-	pScreenInfo->lines = TRUE;
+	xglScreenInfo.fbo = TRUE;
 	return 1;
     }
     
