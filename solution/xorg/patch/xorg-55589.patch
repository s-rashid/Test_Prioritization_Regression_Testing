diff --git a/hw/xfree86/os-support/shared/posix_tty.c b/hw/xfree86/os-support/shared/posix_tty.c
index cc12a31..ab3757a 100644
--- a/hw/xfree86/os-support/shared/posix_tty.c
+++ b/hw/xfree86/os-support/shared/posix_tty.c
@@ -119,15 +119,13 @@ xf86OpenSerial (XF86OptionPtr options)
 	char *dev;
 
 	dev = xf86SetStrOption (options, "Device", NULL);
-	if (!dev)
-	{
+    if (!dev) {
 		xf86Msg (X_ERROR, "xf86OpenSerial: No Device specified.\n");
 		return -1;
 	}
 
 	SYSCALL (fd = open (dev, O_RDWR | O_NONBLOCK));
-	if (fd == -1)
-	{
+    if (fd == -1) {
 		xf86Msg (X_ERROR,
 			 "xf86OpenSerial: Cannot open device %s\n\t%s.\n",
 			 dev, strerror (errno));
@@ -135,8 +133,7 @@ xf86OpenSerial (XF86OptionPtr options)
 		return -1;
 	}
 
-	if (!isatty (fd))
-	{
+    if (!isatty(fd)) {
 		/* Allow non-tty devices to be opened. */
 		free(dev);
 		return fd;
@@ -144,7 +141,7 @@ xf86OpenSerial (XF86OptionPtr options)
 
 	/* set up default port parameters */
 	SYSCALL (tcgetattr (fd, &t));
-	t.c_iflag &= ~(IGNBRK|BRKINT|PARMRK|ISTRIP|INLCR\
+    t.c_iflag &= ~(IGNBRK | BRKINT | PARMRK | ISTRIP | INLCR
 						|IGNCR|ICRNL|IXON);
 	t.c_oflag &= ~OPOST;
 	t.c_lflag &= ~(ECHO|ECHONL|ICANON|ISIG|IEXTEN);
@@ -158,24 +155,21 @@ xf86OpenSerial (XF86OptionPtr options)
 
 	SYSCALL (tcsetattr (fd, TCSANOW, &t));
 
-	if (xf86SetSerial (fd, options) == -1)
-	{
+    if (xf86SetSerial(fd, options) == -1) {
 		SYSCALL (close (fd));
 		free(dev);
 		return -1;
 	}
 
 	SYSCALL (i = fcntl (fd, F_GETFL, 0));
-	if (i == -1)
-	{
+    if (i == -1) {
 		SYSCALL (close (fd));
 		free(dev);
 		return -1;
 	}
 	i &= ~O_NONBLOCK;
 	SYSCALL (i = fcntl (fd, F_SETFL, i));
-	if (i == -1)
-	{
+    if (i == -1) {
 		SYSCALL (close (fd));
 		free(dev);
 		return -1;
@@ -201,25 +195,19 @@ xf86SetSerial (int fd, XF86OptionPtr options)
 
 	SYSCALL (tcgetattr (fd, &t));
 
-	if ((val = xf86SetIntOption (options, "BaudRate", 0)))
-	{
-		if ((baud = GetBaud (val)))
-		{
+    if ((val = xf86SetIntOption(options, "BaudRate", 0))) {
+        if ((baud = GetBaud(val))) {
 			cfsetispeed (&t, baud);
 			cfsetospeed (&t, baud);
 		}
-		else
-		{
-			xf86Msg (X_ERROR,
-				 "Invalid Option BaudRate value: %d\n", val);
+        else {
+            xf86Msg(X_ERROR, "Invalid Option BaudRate value: %d\n", val);
 			return -1;
 		}
 	}
 
-	if ((val = xf86SetIntOption (options, "StopBits", 0)))
-	{
-		switch (val)
-		{
+    if ((val = xf86SetIntOption(options, "StopBits", 0))) {
+        switch (val) {
 		case 1:
 			t.c_cflag &= ~(CSTOPB);
 			break;
@@ -227,17 +215,14 @@ xf86SetSerial (int fd, XF86OptionPtr options)
 			t.c_cflag |= CSTOPB;
 			break;
 		default:
-			xf86Msg (X_ERROR,
-				 "Invalid Option StopBits value: %d\n", val);
+            xf86Msg(X_ERROR, "Invalid Option StopBits value: %d\n", val);
 			return -1;
 			break;
 		}
 	}
 
-	if ((val = xf86SetIntOption (options, "DataBits", 0)))
-	{
-		switch (val)
-		{
+    if ((val = xf86SetIntOption(options, "DataBits", 0))) {
+        switch (val) {
 		case 5:
 			t.c_cflag &= ~(CSIZE);
 			t.c_cflag |= CS5;
@@ -255,74 +240,57 @@ xf86SetSerial (int fd, XF86OptionPtr options)
 			t.c_cflag |= CS8;
 			break;
 		default:
-			xf86Msg (X_ERROR,
-				 "Invalid Option DataBits value: %d\n", val);
+            xf86Msg(X_ERROR, "Invalid Option DataBits value: %d\n", val);
 			return -1;
 			break;
 		}
 	}
 
-	if ((s = xf86SetStrOption (options, "Parity", NULL)))
-	{
-		if (xf86NameCmp (s, "Odd") == 0)
-		{
+    if ((s = xf86SetStrOption(options, "Parity", NULL))) {
+        if (xf86NameCmp(s, "Odd") == 0) {
 			t.c_cflag |= PARENB | PARODD;
 		}
-		else if (xf86NameCmp (s, "Even") == 0)
-		{
+        else if (xf86NameCmp(s, "Even") == 0) {
 			t.c_cflag |= PARENB;
 			t.c_cflag &= ~(PARODD);
 		}
-		else if (xf86NameCmp (s, "None") == 0)
-		{
+        else if (xf86NameCmp(s, "None") == 0) {
 			t.c_cflag &= ~(PARENB);
 		}
-		else
-		{
-			xf86Msg (X_ERROR, "Invalid Option Parity value: %s\n",
-				 s);
+        else {
+            xf86Msg(X_ERROR, "Invalid Option Parity value: %s\n", s);
 			return -1;
 		}
 	}
 
-	if ((val = xf86SetIntOption (options, "Vmin", -1)) != -1)
-	{
+    if ((val = xf86SetIntOption(options, "Vmin", -1)) != -1) {
 		t.c_cc[VMIN] = val;
 	}
-	if ((val = xf86SetIntOption (options, "Vtime", -1)) != -1)
-	{
+    if ((val = xf86SetIntOption(options, "Vtime", -1)) != -1) {
 		t.c_cc[VTIME] = val;
 	}
 
-	if ((s = xf86SetStrOption (options, "FlowControl", NULL)))
-	{
+    if ((s = xf86SetStrOption(options, "FlowControl", NULL))) {
 		xf86MarkOptionUsedByName (options, "FlowControl");
-		if (xf86NameCmp (s, "Xoff") == 0)
-		{
+        if (xf86NameCmp(s, "Xoff") == 0) {
 			t.c_iflag |= IXOFF;
 		}
-		else if (xf86NameCmp (s, "Xon") == 0)
-		{
+        else if (xf86NameCmp(s, "Xon") == 0) {
 			t.c_iflag |= IXON;
 		}
-		else if (xf86NameCmp (s, "XonXoff") == 0)
-		{
+        else if (xf86NameCmp(s, "XonXoff") == 0) {
 			t.c_iflag |= IXON|IXOFF;
 		}
-		else if (xf86NameCmp (s, "None") == 0)
-		{
+        else if (xf86NameCmp(s, "None") == 0) {
 			t.c_iflag &= ~(IXON | IXOFF);
 		}
-		else
-		{
-			xf86Msg (X_ERROR,
-				 "Invalid Option FlowControl value: %s\n", s);
+        else {
+            xf86Msg(X_ERROR, "Invalid Option FlowControl value: %s\n", s);
 			return -1;
 		}
 	}
 
-	if ((xf86SetBoolOption (options, "ClearDTR", FALSE)))
-	{
+    if ((xf86SetBoolOption(options, "ClearDTR", FALSE))) {
 #ifdef CLEARDTR_SUPPORT
 # if defined(TIOCMBIC)
 		val = TIOCM_DTR;
@@ -331,17 +299,14 @@ xf86SetSerial (int fd, XF86OptionPtr options)
 		SYSCALL (ioctl(fd, TIOCCDTR, NULL));
 # endif
 #else
-		xf86Msg (X_WARNING,
-			 "Option ClearDTR not supported on this OS\n");
+        xf86Msg(X_WARNING, "Option ClearDTR not supported on this OS\n");
 			return -1;
 #endif
 		xf86MarkOptionUsedByName (options, "ClearDTR");
 	}
 
-	if ((xf86SetBoolOption (options, "ClearRTS", FALSE)))
-	{
-		xf86Msg (X_WARNING,
-			 "Option ClearRTS not supported on this OS\n");
+    if ((xf86SetBoolOption(options, "ClearRTS", FALSE))) {
+        xf86Msg(X_WARNING, "Option ClearRTS not supported on this OS\n");
 			return -1;
 		xf86MarkOptionUsedByName (options, "ClearRTS");
 	}
@@ -365,15 +330,12 @@ xf86SetSerialSpeed (int fd, int speed)
 
 	SYSCALL (tcgetattr (fd, &t));
 
-	if ((baud = GetBaud (speed)))
-	{
+    if ((baud = GetBaud(speed))) {
 		cfsetispeed (&t, baud);
 		cfsetospeed (&t, baud);
 	}
-	else
-	{
-		xf86Msg (X_ERROR,
-			 "Invalid Option BaudRate value: %d\n", speed);
+    else {
+        xf86Msg(X_ERROR, "Invalid Option BaudRate value: %d\n", speed);
 		return -1;
 	}
 
@@ -388,8 +350,7 @@ xf86ReadSerial (int fd, void *buf, int count)
 	int i;
 
 	SYSCALL (r = read (fd, buf, count));
-	DebugF("ReadingSerial: 0x%x",
-	       (unsigned char)*(((unsigned char *)buf)));
+    DebugF("ReadingSerial: 0x%x", (unsigned char) *(((unsigned char *) buf)));
 	for (i = 1; i < r; i++)
 	    DebugF(", 0x%x",(unsigned char)*(((unsigned char *)buf) + i));
 	DebugF("\n");
@@ -484,35 +445,46 @@ static struct states {
 	int os;
 } modemStates[] = {
 #ifdef TIOCM_LE
-	{ XF86_M_LE, TIOCM_LE },
+    {
+    XF86_M_LE, TIOCM_LE},
 #endif
 #ifdef TIOCM_DTR
-	{ XF86_M_DTR, TIOCM_DTR },
+    {
+    XF86_M_DTR, TIOCM_DTR},
 #endif
 #ifdef TIOCM_RTS
-	{ XF86_M_RTS, TIOCM_RTS },
+    {
+    XF86_M_RTS, TIOCM_RTS},
 #endif
 #ifdef TIOCM_ST
-	{ XF86_M_ST, TIOCM_ST },
+    {
+    XF86_M_ST, TIOCM_ST},
 #endif
 #ifdef TIOCM_SR
-	{ XF86_M_SR, TIOCM_SR },
+    {
+    XF86_M_SR, TIOCM_SR},
 #endif
 #ifdef TIOCM_CTS
-	{ XF86_M_CTS, TIOCM_CTS },
+    {
+    XF86_M_CTS, TIOCM_CTS},
 #endif
 #ifdef TIOCM_CAR
-	{ XF86_M_CAR, TIOCM_CAR },
+    {
+    XF86_M_CAR, TIOCM_CAR},
 #elif defined(TIOCM_CD)
-	{ XF86_M_CAR, TIOCM_CD },
+    {
+    XF86_M_CAR, TIOCM_CD},
 #endif
 #ifdef TIOCM_RNG
-	{ XF86_M_RNG, TIOCM_RNG },
+    {
+    XF86_M_RNG, TIOCM_RNG},
 #elif defined(TIOCM_RI)
-	{ XF86_M_CAR, TIOCM_RI },
+    {
+    XF86_M_CAR, TIOCM_RI},
 #endif
 #ifdef TIOCM_DSR
-	{ XF86_M_DSR, TIOCM_DSR },
+    {
+    XF86_M_DSR, TIOCM_DSR},
 #endif
 };
 
@@ -547,6 +519,7 @@ getOsStateMask(void)
 {
 	int i;
 	int ret = 0;
+
 	for (i = 0; i < numStates; i++)
 		ret |= modemStates[i].os;
 	return ret;
