diff --git a/hw/xfree86/common/xf86xv.c b/hw/xfree86/common/xf86xv.c
index b46dfef..88e2f31 100644
--- a/hw/xfree86/common/xf86xv.c
+++ b/hw/xfree86/common/xf86xv.c
@@ -28,7 +28,6 @@
  * authorization from the copyright holder(s) and author(s).
  */
 
-
 #ifdef HAVE_XORG_CONFIG_H
 #include <xorg-config.h>
 #endif
@@ -56,7 +55,6 @@
 
 #include "xf86xvpriv.h"
 
-
 /* XvScreenRec fields */
 
 static Bool xf86XVCloseScreen(int, ScreenPtr);
@@ -87,17 +85,16 @@ static int xf86XVQueryBestSize(ClientPtr, XvPortPtr, CARD8,
 static int xf86XVPutImage(ClientPtr, DrawablePtr, XvPortPtr, GCPtr,
 				INT16, INT16, CARD16, CARD16,
 				INT16, INT16, CARD16, CARD16,
-				XvImagePtr, unsigned char*, Bool,
-				CARD16, CARD16);
+                          XvImagePtr, unsigned char *, Bool, CARD16, CARD16);
 static int xf86XVQueryImageAttributes(ClientPtr, XvPortPtr, XvImagePtr,
 				CARD16*, CARD16*, int*, int*);
 
-
 /* ScreenRec fields */
 
 static Bool xf86XVDestroyWindow(WindowPtr pWin);
 static void xf86XVWindowExposures(WindowPtr pWin, RegionPtr r1, RegionPtr r2);
-static void xf86XVPostValidateTree(WindowPtr pWin, WindowPtr pLayerWin, VTKind kind);
+static void xf86XVPostValidateTree(WindowPtr pWin, WindowPtr pLayerWin,
+                                   VTKind kind);
 static void xf86XVClipNotify(WindowPtr pWin, int dx, int dy);
 
 #define PostValidateTreeUndefined ((PostValidateTreeProcPtr)-1)
@@ -113,8 +110,8 @@ static void xf86XVModeSet(ScrnInfoPtr pScrn);
 
 static Bool xf86XVInitAdaptors(ScreenPtr, XF86VideoAdaptorPtr*, int);
 
-
 static DevPrivateKeyRec XF86XVWindowKeyRec;
+
 #define XF86XVWindowKey (&XF86XVWindowKeyRec)
 
 DevPrivateKey XF86XvScreenKey;
@@ -138,9 +135,8 @@ static xf86XVInitGenericAdaptorPtr *GenDrivers = NULL;
 static int NumGenDrivers = 0;
 
 int
-xf86XVRegisterGenericAdaptorDriver(
-    xf86XVInitGenericAdaptorPtr InitFunc
-){
+xf86XVRegisterGenericAdaptorDriver(xf86XVInitGenericAdaptorPtr InitFunc)
+{
   xf86XVInitGenericAdaptorPtr *newdrivers;
 
   newdrivers = realloc(GenDrivers, sizeof(xf86XVInitGenericAdaptorPtr) *
@@ -155,10 +151,8 @@ xf86XVRegisterGenericAdaptorDriver(
 }
 
 int
-xf86XVListGenericAdaptors(
-    ScrnInfoPtr pScrn,
-    XF86VideoAdaptorPtr **adaptors
-){
+xf86XVListGenericAdaptors(ScrnInfoPtr pScrn, XF86VideoAdaptorPtr ** adaptors)
+{
     int i,j,n,num;
     XF86VideoAdaptorPtr *DrivAdap,*new;
 
@@ -183,7 +177,6 @@ xf86XVListGenericAdaptors(
     return num;
 }
 
-
 /****************  Offscreen surface stuff *******************/
 
 typedef struct {
@@ -192,24 +185,26 @@ typedef struct {
 } OffscreenImageRec;
 
 static DevPrivateKeyRec OffscreenPrivateKeyRec;
+
 #define OffscreenPrivateKey (&OffscreenPrivateKeyRec)
 #define GetOffscreenImage(pScreen) ((OffscreenImageRec *) dixLookupPrivate(&(pScreen)->devPrivates, OffscreenPrivateKey))
 
 Bool
-xf86XVRegisterOffscreenImages(
-    ScreenPtr pScreen,
-    XF86OffscreenImagePtr images,
-    int num
-){
+xf86XVRegisterOffscreenImages(ScreenPtr pScreen,
+                              XF86OffscreenImagePtr images, int num)
+{
     OffscreenImageRec *OffscreenImage;
+
     /* This function may be called before xf86XVScreenInit, so there's
      * no better place than this to call dixRegisterPrivateKey to ensure we
      * have space reserved. After the first call it is a no-op. */
-    if(!dixRegisterPrivateKey(OffscreenPrivateKey, PRIVATE_SCREEN, sizeof(OffscreenImageRec)) ||
+    if (!dixRegisterPrivateKey
+        (OffscreenPrivateKey, PRIVATE_SCREEN, sizeof(OffscreenImageRec)) ||
        !(OffscreenImage = GetOffscreenImage(pScreen)))
         /* Every X.org driver assumes this function always succeeds, so
          * just die on allocation failure. */
-        FatalError("Could not allocate private storage for XV offscreen images.\n");
+        FatalError
+            ("Could not allocate private storage for XV offscreen images.\n");
 
     OffscreenImage->num = num;
     OffscreenImage->images = images;
@@ -217,16 +212,14 @@ xf86XVRegisterOffscreenImages(
 }
 
 XF86OffscreenImagePtr
-xf86XVQueryOffscreenImages(
-   ScreenPtr pScreen,
-   int *num
-){
+xf86XVQueryOffscreenImages(ScreenPtr pScreen, int *num)
+{
     OffscreenImageRec *OffscreenImage = GetOffscreenImage(pScreen);
+
     *num = OffscreenImage->num;
     return OffscreenImage->images;
 }
 
-
 XF86VideoAdaptorPtr
 xf86XVAllocateVideoAdaptorRec(ScrnInfoPtr pScrn)
 {
@@ -239,13 +232,9 @@ xf86XVFreeVideoAdaptorRec(XF86VideoAdaptorPtr ptr)
     free(ptr);
 }
 
-
 Bool
-xf86XVScreenInit(
-   ScreenPtr pScreen,
-   XF86VideoAdaptorPtr *adaptors,
-   int num
-){
+xf86XVScreenInit(ScreenPtr pScreen, XF86VideoAdaptorPtr * adaptors, int num)
+{
   ScrnInfoPtr pScrn;
   XF86XVScreenPtr ScreenPriv;
   XvScreenPtr pxvs;
@@ -254,7 +243,8 @@ xf86XVScreenInit(
      !XvGetScreenKeyProc || !XvGetRTPortProc || !XvScreenInitProc)
 	return FALSE;
 
-  if(Success != (*XvScreenInitProc)(pScreen)) return FALSE;
+    if (Success != (*XvScreenInitProc) (pScreen))
+        return FALSE;
 
   if (!dixRegisterPrivateKey(&XF86XVWindowKeyRec, PRIVATE_WINDOW, 0))
       return FALSE;
@@ -279,7 +269,8 @@ xf86XVScreenInit(
   ScreenPriv = malloc(sizeof(XF86XVScreenRec));
   pxvs->devPriv.ptr = (pointer)ScreenPriv;
 
-  if(!ScreenPriv) return FALSE;
+    if (!ScreenPriv)
+        return FALSE;
 
   pScrn = xf86Screens[pScreen->myNum];
 
@@ -363,11 +354,8 @@ xf86XVFreeAdaptor(XvAdaptorPtr pAdaptor)
 }
 
 static Bool
-xf86XVInitAdaptors(
-   ScreenPtr pScreen,
-   XF86VideoAdaptorPtr *infoPtr,
-   int number
-) {
+xf86XVInitAdaptors(ScreenPtr pScreen, XF86VideoAdaptorPtr * infoPtr, int number)
+{
   XvScreenPtr pxvs = GET_XV_SCREEN(pScreen);
   ScrnInfoPtr pScrn = xf86Screens[pScreen->myNum];
   XF86VideoAdaptorPtr adaptorPtr;
@@ -449,8 +437,7 @@ xf86XVInitAdaptors(
 	(pEncode = calloc(adaptorPtr->nEncodings, sizeof(XvEncodingRec)))) {
 
 	for(pe = pEncode, encodingPtr = adaptorPtr->pEncodings, i = 0;
-	    i < adaptorPtr->nEncodings; pe++, i++, encodingPtr++)
-	{
+                 i < adaptorPtr->nEncodings; pe++, i++, encodingPtr++) {
 	    pe->id = encodingPtr->id;
 	    pe->pScreen = pScreen;
 	    pe->name = strdup(encodingPtr->name);
@@ -467,8 +454,7 @@ xf86XVInitAdaptors(
 	 (pImage = calloc(adaptorPtr->nImages, sizeof(XvImageRec)))) {
 
 	  for(i = 0, pi = pImage, imagePtr = adaptorPtr->pImages;
-	      i < adaptorPtr->nImages; i++, pi++, imagePtr++)
-	  {
+                 i < adaptorPtr->nImages; i++, pi++, imagePtr++) {
 	     pi->id = imagePtr->id;
 	     pi->type = imagePtr->type;
 	     pi->byte_order = imagePtr->byte_order;
@@ -497,11 +483,10 @@ xf86XVInitAdaptors(
       }
 
       if(adaptorPtr->nAttributes &&
-	(pAttribute = calloc(adaptorPtr->nAttributes, sizeof(XvAttributeRec))))
-      {
-	for(pat = pAttribute, attributePtr = adaptorPtr->pAttributes, i = 0;
-	    i < adaptorPtr->nAttributes; pat++, i++, attributePtr++)
-	{
+            (pAttribute =
+             calloc(adaptorPtr->nAttributes, sizeof(XvAttributeRec)))) {
+            for (pat = pAttribute, attributePtr = adaptorPtr->pAttributes, i =
+                 0; i < adaptorPtr->nAttributes; pat++, i++, attributePtr++) {
 	    pat->flags = attributePtr->flags;
 	    pat->min_value = attributePtr->min_value;
 	    pat->max_value = attributePtr->max_value;
@@ -511,16 +496,14 @@ xf86XVInitAdaptors(
 	pa->pAttributes = pAttribute;
       }
 
-
       totFormat = adaptorPtr->nFormats;
 
       if(!(pFormat = calloc(totFormat, sizeof(XvFormatRec)))) {
 	  xf86XVFreeAdaptor(pa);
 	  continue;
       }
-      for(pf = pFormat, i = 0, numFormat = 0, formatPtr = adaptorPtr->pFormats;
-	  i < adaptorPtr->nFormats; i++, formatPtr++)
-      {
+        for (pf = pFormat, i = 0, numFormat = 0, formatPtr =
+             adaptorPtr->pFormats; i < adaptorPtr->nFormats; i++, formatPtr++) {
 	  numVisuals = pScreen->numVisuals;
 	  pVisual = pScreen->visuals;
 
@@ -530,10 +513,12 @@ xf86XVInitAdaptors(
 
 		   if(numFormat >= totFormat) {
 			void *moreSpace;
+
 			totFormat *= 2;
 			moreSpace = realloc(pFormat,
 					     totFormat * sizeof(XvFormatRec));
-			if(!moreSpace) break;
+                        if (!moreSpace)
+                            break;
 			pFormat = moreSpace;
 			pf = pFormat + numFormat;
 		   }
@@ -578,8 +563,7 @@ xf86XVInitAdaptors(
 	  xf86XVFreeAdaptor(pa);
 	  continue;
       }
-      for(pp = pPort, i = 0, numPort = 0;
-	  i < adaptorPtr->nPorts; i++) {
+        for (pp = pPort, i = 0, numPort = 0; i < adaptorPtr->nPorts; i++) {
 
 	  if(!(pp->id = FakeClientID(0)))
 		continue;
@@ -623,7 +607,8 @@ xf86XVInitAdaptors(
   if(numAdaptor) {
       pxvs->nAdaptors = numAdaptor;
       pxvs->pAdaptors = pAdaptor;
-  } else {
+    }
+    else {
      free(pAdaptor);
      return FALSE;
   }
@@ -663,7 +648,8 @@ xf86XVUpdateCompositeClip(XvPortRecPrivatePtr portPriv)
    if(portPriv->subWindowMode == IncludeInferiors) {
 	pregWin = NotClippedByChildren(pWin);
 	freeCompClip = TRUE;
-   } else
+    }
+    else
 	pregWin = &pWin->clipList;
 
    if(!portPriv->clientClip) {
@@ -674,8 +660,7 @@ xf86XVUpdateCompositeClip(XvPortRecPrivatePtr portPriv)
 
    pCompositeClip = RegionCreate(NullBox, 1);
    RegionCopy(pCompositeClip, portPriv->clientClip);
-   RegionTranslate(pCompositeClip,
-		   portPriv->pDraw->x, portPriv->pDraw->y);
+    RegionTranslate(pCompositeClip, portPriv->pDraw->x, portPriv->pDraw->y);
    RegionIntersect(pCompositeClip, pregWin, pCompositeClip);
 
    portPriv->pCompositeClip = pCompositeClip;
@@ -690,19 +675,17 @@ xf86XVUpdateCompositeClip(XvPortRecPrivatePtr portPriv)
    we have a fresh GC */
 
 static void
-xf86XVCopyClip(
-   XvPortRecPrivatePtr portPriv,
-   GCPtr pGC
-){
+xf86XVCopyClip(XvPortRecPrivatePtr portPriv, GCPtr pGC)
+{
     /* copy the new clip if it exists */
     if((pGC->clientClipType == CT_REGION) && pGC->clientClip) {
 	if(!portPriv->clientClip)
 	    portPriv->clientClip = RegionCreate(NullBox, 1);
 	/* Note: this is in window coordinates */
 	RegionCopy(portPriv->clientClip, pGC->clientClip);
-	RegionTranslate(portPriv->clientClip,
-			pGC->clipOrg.x, pGC->clipOrg.y);
-    } else if(portPriv->clientClip) { /* free the old clientClip */
+        RegionTranslate(portPriv->clientClip, pGC->clipOrg.x, pGC->clipOrg.y);
+    }
+    else if (portPriv->clientClip) {    /* free the old clientClip */
 	RegionDestroy(portPriv->clientClip);
 	portPriv->clientClip = NULL;
     }
@@ -719,15 +702,13 @@ xf86XVCopyClip(
 
 static void
 xf86XVCopyCompositeClip(XvPortRecPrivatePtr portPriv,
-			GCPtr pGC,
-			DrawablePtr pDraw)
+                        GCPtr pGC, DrawablePtr pDraw)
 {
     if (!portPriv->clientClip)
 	portPriv->clientClip = RegionCreate(NullBox, 1);
     /* Keep the original GC composite clip around for ReputImage */
     RegionCopy(portPriv->clientClip, pGC->pCompositeClip);
-    RegionTranslate(portPriv->clientClip,
-		    -pDraw->x, -pDraw->y);
+    RegionTranslate(portPriv->clientClip, -pDraw->x, -pDraw->y);
 
     /* get rid of the old clip list */
     if (portPriv->pCompositeClip && portPriv->FreeCompositeClip)
@@ -784,8 +765,8 @@ xf86XVRegetVideo(XvPortRecPrivatePtr portPriv)
 CLIP_VIDEO_BAILOUT:
 
   if((clippedAway || (ret != Success)) && portPriv->isOn == XV_ON) {
-	(*portPriv->AdaptorRec->StopVideo)(
-		portPriv->pScrn, portPriv->DevPriv.ptr, FALSE);
+        (*portPriv->AdaptorRec->StopVideo) (portPriv->pScrn,
+                                            portPriv->DevPriv.ptr, FALSE);
 	portPriv->isOn = XV_PENDING;
   }
 
@@ -799,7 +780,6 @@ CLIP_VIDEO_BAILOUT:
   return ret;
 }
 
-
 static int
 xf86XVReputVideo(XvPortRecPrivatePtr portPriv)
 {
@@ -846,10 +826,10 @@ xf86XVReputVideo(XvPortRecPrivatePtr portPriv)
   /* bailout if we have to clip but the hardware doesn't support it */
   if(portPriv->AdaptorRec->flags & VIDEO_NO_CLIPPING) {
      BoxPtr clipBox = RegionRects(&ClipRegion);
+
      if(  (RegionNumRects(&ClipRegion) != 1) ||
 	  (clipBox->x1 != WinBox.x1) || (clipBox->x2 != WinBox.x2) ||
-	  (clipBox->y1 != WinBox.y1) || (clipBox->y2 != WinBox.y2))
-     {
+            (clipBox->y1 != WinBox.y1) || (clipBox->y2 != WinBox.y2)) {
 	    clippedAway = TRUE;
 	    goto CLIP_VIDEO_BAILOUT;
      }
@@ -867,13 +847,14 @@ xf86XVReputVideo(XvPortRecPrivatePtr portPriv)
 			&ClipRegion, portPriv->DevPriv.ptr,
 			portPriv->pDraw);
 
-  if(ret == Success) portPriv->isOn = XV_ON;
+    if (ret == Success)
+        portPriv->isOn = XV_ON;
 
 CLIP_VIDEO_BAILOUT:
 
   if((clippedAway || (ret != Success)) && (portPriv->isOn == XV_ON)) {
-	(*portPriv->AdaptorRec->StopVideo)(
-		portPriv->pScrn, portPriv->DevPriv.ptr, FALSE);
+        (*portPriv->AdaptorRec->StopVideo) (portPriv->pScrn,
+                                            portPriv->DevPriv.ptr, FALSE);
 	portPriv->isOn = XV_PENDING;
   }
 
@@ -939,10 +920,10 @@ xf86XVReputImage(XvPortRecPrivatePtr portPriv)
   /* bailout if we have to clip but the hardware doesn't support it */
   if(portPriv->AdaptorRec->flags & VIDEO_NO_CLIPPING) {
      BoxPtr clipBox = RegionRects(&ClipRegion);
+
      if(  (RegionNumRects(&ClipRegion) != 1) ||
 	  (clipBox->x1 != WinBox.x1) || (clipBox->x2 != WinBox.x2) ||
-	  (clipBox->y1 != WinBox.y1) || (clipBox->y2 != WinBox.y2))
-     {
+            (clipBox->y1 != WinBox.y1) || (clipBox->y2 != WinBox.y2)) {
 	    clippedAway = TRUE;
 	    goto CLIP_VIDEO_BAILOUT;
      }
@@ -957,7 +938,8 @@ xf86XVReputImage(XvPortRecPrivatePtr portPriv)
 			WinBox.x1, WinBox.y1,
 			portPriv->vid_w, portPriv->vid_h,
 			portPriv->drw_w, portPriv->drw_h,
-			&ClipRegion, portPriv->DevPriv.ptr,
+                                               &ClipRegion,
+                                               portPriv->DevPriv.ptr,
 			portPriv->pDraw);
 
   portPriv->isOn = (ret == Success) ? XV_ON : XV_OFF;
@@ -965,8 +947,8 @@ xf86XVReputImage(XvPortRecPrivatePtr portPriv)
 CLIP_VIDEO_BAILOUT:
 
   if((clippedAway || (ret != Success)) && (portPriv->isOn == XV_ON)) {
-	(*portPriv->AdaptorRec->StopVideo)(
-		portPriv->pScrn, portPriv->DevPriv.ptr, FALSE);
+        (*portPriv->AdaptorRec->StopVideo) (portPriv->pScrn,
+                                            portPriv->DevPriv.ptr, FALSE);
 	portPriv->isOn = XV_PENDING;
   }
 
@@ -980,7 +962,6 @@ CLIP_VIDEO_BAILOUT:
   return ret;
 }
 
-
 static int
 xf86XVReputAllVideo(WindowPtr pWin, pointer data)
 {
@@ -1013,7 +994,8 @@ xf86XVEnlistPortInWindow(WindowPtr pWin, XvPortRecPrivatePtr portPriv)
 
    if(!winPriv) {
 	winPriv = calloc(1, sizeof(XF86XVWindowRec));
-	if(!winPriv) return BadAlloc;
+        if (!winPriv)
+            return BadAlloc;
 	winPriv->PortRec = portPriv;
 	winPriv->next = PrivRoot;
 	dixSetPrivate(&pWin->devPrivates, XF86XVWindowKey, winPriv);
@@ -1024,11 +1006,11 @@ xf86XVEnlistPortInWindow(WindowPtr pWin, XvPortRecPrivatePtr portPriv)
    return Success;
 }
 
-
 static void
 xf86XVRemovePortFromWindow(WindowPtr pWin, XvPortRecPrivatePtr portPriv)
 {
      XF86XVWindowPtr winPriv, prevPriv = NULL;
+
      winPriv = GET_XF86XV_WINDOW(pWin);
 
      while(winPriv) {
@@ -1053,13 +1035,12 @@ xf86XVRemovePortFromWindow(WindowPtr pWin, XvPortRecPrivatePtr portPriv)
 }
 
 static void
-xf86XVReputOrStopPort(XvPortRecPrivatePtr pPriv,
-		      WindowPtr pWin,
-		      Bool visible)
+xf86XVReputOrStopPort(XvPortRecPrivatePtr pPriv, WindowPtr pWin, Bool visible)
 {
     if (!visible) {
 	if (pPriv->isOn == XV_ON) {
-	    (*pPriv->AdaptorRec->StopVideo)(pPriv->pScrn, pPriv->DevPriv.ptr, FALSE);
+            (*pPriv->AdaptorRec->StopVideo) (pPriv->pScrn, pPriv->DevPriv.ptr,
+                                             FALSE);
 	    pPriv->isOn = XV_PENDING;
 	}
 
@@ -1095,7 +1076,8 @@ xf86XVReputOrStopAllPorts(ScrnInfoPtr pScrn, Bool onlyChanged)
 	XvPortPtr pPort = pa->pPorts;
 
 	for (i = pa->nPorts; i > 0; i--, pPort++) {
-	    XvPortRecPrivatePtr pPriv = (XvPortRecPrivatePtr)pPort->devPriv.ptr;
+            XvPortRecPrivatePtr pPriv =
+                (XvPortRecPrivatePtr) pPort->devPriv.ptr;
 	    WindowPtr pWin = (WindowPtr)pPriv->pDraw;
 	    Bool visible;
 
@@ -1136,8 +1118,8 @@ xf86XVDestroyWindow(WindowPtr pWin)
      XvPortRecPrivatePtr pPriv = WinPriv->PortRec;
 
      if(pPriv->isOn > XV_OFF) {
-	(*pPriv->AdaptorRec->StopVideo)(
-			pPriv->pScrn, pPriv->DevPriv.ptr, TRUE);
+            (*pPriv->AdaptorRec->StopVideo) (pPriv->pScrn, pPriv->DevPriv.ptr,
+                                             TRUE);
 	pPriv->isOn = XV_OFF;
      }
 
@@ -1196,7 +1178,8 @@ xf86XVWindowExposures(WindowPtr pWin, RegionPtr reg1, RegionPtr reg2)
   pScreen->WindowExposures = xf86XVWindowExposures;
 
   /* filter out XClearWindow/Area */
-  if (!pWin->valdata) return;
+    if (!pWin->valdata)
+        return;
 
   while(WinPriv) {
      Bool visible = TRUE;
@@ -1219,6 +1202,7 @@ xf86XVWindowExposures(WindowPtr pWin, RegionPtr reg1, RegionPtr reg2)
 
      if (visible && pPriv->ckeyFilled) {
         RegionRec tmp;
+
         RegionNull(&tmp);
         RegionCopy(&tmp, reg1);
         RegionTranslate(&tmp, pWin->drawable.x, pWin->drawable.y);
@@ -1269,8 +1253,6 @@ xf86XVClipNotify(WindowPtr pWin, int dx, int dy)
   }
 }
 
-
-
 /**** Required XvScreenRec fields ****/
 
 static Bool
@@ -1282,7 +1264,8 @@ xf86XVCloseScreen(int i, ScreenPtr pScreen)
   XvAdaptorPtr pa;
   int c;
 
-  if(!ScreenPriv) return TRUE;
+    if (!ScreenPriv)
+        return TRUE;
 
   pScreen->DestroyWindow = ScreenPriv->DestroyWindow;
   pScreen->WindowExposures = ScreenPriv->WindowExposures;
@@ -1302,13 +1285,10 @@ xf86XVCloseScreen(int i, ScreenPtr pScreen)
   return TRUE;
 }
 
-
 static int
-xf86XVQueryAdaptors(
-   ScreenPtr pScreen,
-   XvAdaptorPtr *p_pAdaptors,
-   int *p_nAdaptors
-){
+xf86XVQueryAdaptors(ScreenPtr pScreen,
+                    XvAdaptorPtr * p_pAdaptors, int *p_nAdaptors)
+{
   XvScreenPtr pxvs = GET_XV_SCREEN(pScreen);
 
   *p_nAdaptors = pxvs->nAdaptors;
@@ -1317,7 +1297,6 @@ xf86XVQueryAdaptors(
   return Success;
 }
 
-
 /**** ScrnInfoRec fields ****/
 
 static Bool
@@ -1333,7 +1312,8 @@ xf86XVEnterVT(int index, int flags)
     ScreenPriv->EnterVT = pScrn->EnterVT;
     pScrn->EnterVT = xf86XVEnterVT;
 
-    if(ret) WalkTree(pScreen, xf86XVReputAllVideo, 0);
+    if (ret)
+        WalkTree(pScreen, xf86XVReputAllVideo, 0);
 
     return ret;
 }
@@ -1357,8 +1337,8 @@ xf86XVLeaveVT(int index, int flags)
 	    pPriv = (XvPortRecPrivatePtr)pPort->devPriv.ptr;
 	    if(pPriv->isOn > XV_OFF) {
 
-		(*pPriv->AdaptorRec->StopVideo)(
-			pPriv->pScrn, pPriv->DevPriv.ptr, TRUE);
+                (*pPriv->AdaptorRec->StopVideo) (pPriv->pScrn,
+                                                 pPriv->DevPriv.ptr, TRUE);
 		pPriv->isOn = XV_OFF;
 
 		if(pPriv->pCompositeClip && pPriv->FreeCompositeClip)
@@ -1419,35 +1399,27 @@ xf86XVModeSet(ScrnInfoPtr pScrn)
 /**** XvAdaptorRec fields ****/
 
 static int
-xf86XVAllocatePort(
-   unsigned long port,
-   XvPortPtr pPort,
-   XvPortPtr *ppPort
-){
+xf86XVAllocatePort(unsigned long port, XvPortPtr pPort, XvPortPtr * ppPort)
+{
   *ppPort = pPort;
   return Success;
 }
 
-
-
 static int
 xf86XVFreePort(XvPortPtr pPort)
 {
   return Success;
 }
 
-
 static int
-xf86XVPutVideo(
-   ClientPtr client,
+xf86XVPutVideo(ClientPtr client,
    DrawablePtr pDraw,
    XvPortPtr pPort,
    GCPtr pGC,
    INT16 vid_x, INT16 vid_y,
    CARD16 vid_w, CARD16 vid_h,
-   INT16 drw_x, INT16 drw_y,
-   CARD16 drw_w, CARD16 drw_h
-){
+               INT16 drw_x, INT16 drw_y, CARD16 drw_w, CARD16 drw_h)
+{
   XvPortRecPrivatePtr portPriv = (XvPortRecPrivatePtr)(pPort->devPriv.ptr);
   int result;
 
@@ -1463,15 +1435,20 @@ xf86XVPutVideo(
 
   /* Register our port with the new window */
   result =  xf86XVEnlistPortInWindow((WindowPtr)pDraw, portPriv);
-  if(result != Success) return result;
+    if (result != Success)
+        return result;
 
   portPriv->type = XvInputMask;
 
   /* save a copy of these parameters */
-  portPriv->vid_x = vid_x;  portPriv->vid_y = vid_y;
-  portPriv->vid_w = vid_w;  portPriv->vid_h = vid_h;
-  portPriv->drw_x = drw_x;  portPriv->drw_y = drw_y;
-  portPriv->drw_w = drw_w;  portPriv->drw_h = drw_h;
+    portPriv->vid_x = vid_x;
+    portPriv->vid_y = vid_y;
+    portPriv->vid_w = vid_w;
+    portPriv->vid_h = vid_h;
+    portPriv->drw_x = drw_x;
+    portPriv->drw_y = drw_y;
+    portPriv->drw_w = drw_w;
+    portPriv->drw_h = drw_h;
 
   /* make sure we have the most recent copy of the clientClip */
   xf86XVCopyClip(portPriv, pGC);
@@ -1479,22 +1456,21 @@ xf86XVPutVideo(
   /* To indicate to the DI layer that we were successful */
   pPort->pDraw = pDraw;
 
-  if(!portPriv->pScrn->vtSema) return Success; /* Success ? */
+    if (!portPriv->pScrn->vtSema)
+        return Success;         /* Success ? */
 
   return(xf86XVReputVideo(portPriv));
 }
 
 static int
-xf86XVPutStill(
-   ClientPtr client,
+xf86XVPutStill(ClientPtr client,
    DrawablePtr pDraw,
    XvPortPtr pPort,
    GCPtr pGC,
    INT16 vid_x, INT16 vid_y,
    CARD16 vid_w, CARD16 vid_h,
-   INT16 drw_x, INT16 drw_y,
-   CARD16 drw_w, CARD16 drw_h
-){
+               INT16 drw_x, INT16 drw_y, CARD16 drw_w, CARD16 drw_h)
+{
   XvPortRecPrivatePtr portPriv = (XvPortRecPrivatePtr)(pPort->devPriv.ptr);
   RegionRec WinRegion;
   RegionRec ClipRegion;
@@ -1505,7 +1481,8 @@ xf86XVPutStill(
   if (pDraw->type != DRAWABLE_WINDOW)
       return BadAlloc;
 
-  if(!portPriv->pScrn->vtSema) return Success; /* Success ? */
+    if (!portPriv->pScrn->vtSema)
+        return Success;         /* Success ? */
 
   WinBox.x1 = pDraw->x + drw_x;
   WinBox.y1 = pDraw->y + drw_y;
@@ -1543,10 +1520,10 @@ xf86XVPutStill(
 
   if(portPriv->AdaptorRec->flags & VIDEO_NO_CLIPPING) {
      BoxPtr clipBox = RegionRects(&ClipRegion);
+
      if(  (RegionNumRects(&ClipRegion) != 1) ||
 	  (clipBox->x1 != WinBox.x1) || (clipBox->x2 != WinBox.x2) ||
-	  (clipBox->y1 != WinBox.y1) || (clipBox->y2 != WinBox.y2))
-     {
+            (clipBox->y1 != WinBox.y1) || (clipBox->y2 != WinBox.y2)) {
 	  clippedAway = TRUE;
 	  goto PUT_STILL_BAILOUT;
      }
@@ -1567,10 +1544,14 @@ xf86XVPutStill(
 
      xf86XVEnlistPortInWindow((WindowPtr)pDraw, portPriv);
      portPriv->isOn = XV_ON;
-     portPriv->vid_x = vid_x;  portPriv->vid_y = vid_y;
-     portPriv->vid_w = vid_w;  portPriv->vid_h = vid_h;
-     portPriv->drw_x = drw_x;  portPriv->drw_y = drw_y;
-     portPriv->drw_w = drw_w;  portPriv->drw_h = drw_h;
+        portPriv->vid_x = vid_x;
+        portPriv->vid_y = vid_y;
+        portPriv->vid_w = vid_w;
+        portPriv->vid_h = vid_h;
+        portPriv->drw_x = drw_x;
+        portPriv->drw_y = drw_y;
+        portPriv->drw_w = drw_w;
+        portPriv->drw_h = drw_h;
      portPriv->type = 0;  /* no mask means it's transient and should
 			     not be reput once it's removed */
      pPort->pDraw = pDraw;  /* make sure we can get stop requests */
@@ -1579,8 +1560,8 @@ xf86XVPutStill(
 PUT_STILL_BAILOUT:
 
   if((clippedAway || (ret != Success)) && (portPriv->isOn == XV_ON)) {
-	(*portPriv->AdaptorRec->StopVideo)(
-		portPriv->pScrn, portPriv->DevPriv.ptr, FALSE);
+        (*portPriv->AdaptorRec->StopVideo) (portPriv->pScrn,
+                                            portPriv->DevPriv.ptr, FALSE);
 	portPriv->isOn = XV_PENDING;
   }
 
@@ -1595,16 +1576,14 @@ PUT_STILL_BAILOUT:
 }
 
 static int
-xf86XVGetVideo(
-   ClientPtr client,
+xf86XVGetVideo(ClientPtr client,
    DrawablePtr pDraw,
    XvPortPtr pPort,
    GCPtr pGC,
    INT16 vid_x, INT16 vid_y,
    CARD16 vid_w, CARD16 vid_h,
-   INT16 drw_x, INT16 drw_y,
-   CARD16 drw_w, CARD16 drw_h
-){
+               INT16 drw_x, INT16 drw_y, CARD16 drw_w, CARD16 drw_h)
+{
   XvPortRecPrivatePtr portPriv = (XvPortRecPrivatePtr)(pPort->devPriv.ptr);
   int result;
 
@@ -1620,15 +1599,20 @@ xf86XVGetVideo(
 
   /* Register our port with the new window */
   result =  xf86XVEnlistPortInWindow((WindowPtr)pDraw, portPriv);
-  if(result != Success) return result;
+    if (result != Success)
+        return result;
 
   portPriv->type = XvOutputMask;
 
   /* save a copy of these parameters */
-  portPriv->vid_x = vid_x;  portPriv->vid_y = vid_y;
-  portPriv->vid_w = vid_w;  portPriv->vid_h = vid_h;
-  portPriv->drw_x = drw_x;  portPriv->drw_y = drw_y;
-  portPriv->drw_w = drw_w;  portPriv->drw_h = drw_h;
+    portPriv->vid_x = vid_x;
+    portPriv->vid_y = vid_y;
+    portPriv->vid_w = vid_w;
+    portPriv->vid_h = vid_h;
+    portPriv->drw_x = drw_x;
+    portPriv->drw_y = drw_y;
+    portPriv->drw_w = drw_w;
+    portPriv->drw_h = drw_h;
 
   /* make sure we have the most recent copy of the clientClip */
   xf86XVCopyClip(portPriv, pGC);
@@ -1636,22 +1620,21 @@ xf86XVGetVideo(
   /* To indicate to the DI layer that we were successful */
   pPort->pDraw = pDraw;
 
-  if(!portPriv->pScrn->vtSema) return Success; /* Success ? */
+    if (!portPriv->pScrn->vtSema)
+        return Success;         /* Success ? */
 
   return(xf86XVRegetVideo(portPriv));
 }
 
 static int
-xf86XVGetStill(
-   ClientPtr client,
+xf86XVGetStill(ClientPtr client,
    DrawablePtr pDraw,
    XvPortPtr pPort,
    GCPtr pGC,
    INT16 vid_x, INT16 vid_y,
    CARD16 vid_w, CARD16 vid_h,
-   INT16 drw_x, INT16 drw_y,
-   CARD16 drw_w, CARD16 drw_h
-){
+               INT16 drw_x, INT16 drw_y, CARD16 drw_w, CARD16 drw_h)
+{
   XvPortRecPrivatePtr portPriv = (XvPortRecPrivatePtr)(pPort->devPriv.ptr);
   RegionRec WinRegion;
   RegionRec ClipRegion;
@@ -1662,7 +1645,8 @@ xf86XVGetStill(
   if (pDraw->type != DRAWABLE_WINDOW)
       return BadAlloc;
 
-  if(!portPriv->pScrn->vtSema) return Success; /* Success ? */
+    if (!portPriv->pScrn->vtSema)
+        return Success;         /* Success ? */
 
   WinBox.x1 = pDraw->x + drw_x;
   WinBox.y1 = pDraw->y + drw_y;
@@ -1695,8 +1679,8 @@ xf86XVGetStill(
 GET_STILL_BAILOUT:
 
   if((clippedAway || (ret != Success)) && (portPriv->isOn == XV_ON)) {
-	(*portPriv->AdaptorRec->StopVideo)(
-		portPriv->pScrn, portPriv->DevPriv.ptr, FALSE);
+        (*portPriv->AdaptorRec->StopVideo) (portPriv->pScrn,
+                                            portPriv->DevPriv.ptr, FALSE);
 	portPriv->isOn = XV_PENDING;
   }
 
@@ -1706,14 +1690,9 @@ GET_STILL_BAILOUT:
   return ret;
 }
 
-
-
 static int
-xf86XVStopVideo(
-   ClientPtr client,
-   XvPortPtr pPort,
-   DrawablePtr pDraw
-){
+xf86XVStopVideo(ClientPtr client, XvPortPtr pPort, DrawablePtr pDraw)
+{
   XvPortRecPrivatePtr portPriv = (XvPortRecPrivatePtr)(pPort->devPriv.ptr);
 
   if(pDraw->type != DRAWABLE_WINDOW)
@@ -1721,13 +1700,14 @@ xf86XVStopVideo(
 
   xf86XVRemovePortFromWindow((WindowPtr)pDraw, portPriv);
 
-  if(!portPriv->pScrn->vtSema) return Success; /* Success ? */
+    if (!portPriv->pScrn->vtSema)
+        return Success;         /* Success ? */
 
   /* Must free resources. */
 
   if(portPriv->isOn > XV_OFF) {
-	(*portPriv->AdaptorRec->StopVideo)(
-		portPriv->pScrn, portPriv->DevPriv.ptr, TRUE);
+        (*portPriv->AdaptorRec->StopVideo) (portPriv->pScrn,
+                                            portPriv->DevPriv.ptr, TRUE);
 	portPriv->isOn = XV_OFF;
   }
 
@@ -1735,56 +1715,47 @@ xf86XVStopVideo(
 }
 
 static int
-xf86XVSetPortAttribute(
-   ClientPtr client,
-   XvPortPtr pPort,
-   Atom attribute,
-   INT32 value
-){
+xf86XVSetPortAttribute(ClientPtr client,
+                       XvPortPtr pPort, Atom attribute, INT32 value)
+{
   XvPortRecPrivatePtr portPriv = (XvPortRecPrivatePtr)(pPort->devPriv.ptr);
 
   return((*portPriv->AdaptorRec->SetPortAttribute)(portPriv->pScrn,
-		attribute, value, portPriv->DevPriv.ptr));
+                                                       attribute, value,
+                                                       portPriv->DevPriv.ptr));
 }
 
-
 static int
-xf86XVGetPortAttribute(
-   ClientPtr client,
-   XvPortPtr pPort,
-   Atom attribute,
-   INT32 *p_value
-){
+xf86XVGetPortAttribute(ClientPtr client,
+                       XvPortPtr pPort, Atom attribute, INT32 *p_value)
+{
   XvPortRecPrivatePtr portPriv = (XvPortRecPrivatePtr)(pPort->devPriv.ptr);
 
   return((*portPriv->AdaptorRec->GetPortAttribute)(portPriv->pScrn,
-		attribute, p_value, portPriv->DevPriv.ptr));
+                                                       attribute, p_value,
+                                                       portPriv->DevPriv.ptr));
 }
 
-
-
 static int
-xf86XVQueryBestSize(
-   ClientPtr client,
+xf86XVQueryBestSize(ClientPtr client,
    XvPortPtr pPort,
    CARD8 motion,
    CARD16 vid_w, CARD16 vid_h,
    CARD16 drw_w, CARD16 drw_h,
-   unsigned int *p_w, unsigned int *p_h
-){
+                    unsigned int *p_w, unsigned int *p_h)
+{
   XvPortRecPrivatePtr portPriv = (XvPortRecPrivatePtr)(pPort->devPriv.ptr);
 
   (*portPriv->AdaptorRec->QueryBestSize)(portPriv->pScrn,
-		(Bool)motion, vid_w, vid_h, drw_w, drw_h,
-		p_w, p_h, portPriv->DevPriv.ptr);
+                                            (Bool) motion, vid_w, vid_h, drw_w,
+                                            drw_h, p_w, p_h,
+                                            portPriv->DevPriv.ptr);
 
   return Success;
 }
 
-
 static int
-xf86XVPutImage(
-   ClientPtr client,
+xf86XVPutImage(ClientPtr client,
    DrawablePtr pDraw,
    XvPortPtr pPort,
    GCPtr pGC,
@@ -1793,10 +1764,8 @@ xf86XVPutImage(
    INT16 drw_x, INT16 drw_y,
    CARD16 drw_w, CARD16 drw_h,
    XvImagePtr format,
-   unsigned char* data,
-   Bool sync,
-   CARD16 width, CARD16 height
-){
+               unsigned char *data, Bool sync, CARD16 width, CARD16 height)
+{
   XvPortRecPrivatePtr portPriv = (XvPortRecPrivatePtr)(pPort->devPriv.ptr);
   RegionRec WinRegion;
   RegionRec ClipRegion;
@@ -1807,7 +1776,8 @@ xf86XVPutImage(
   if (pDraw->type != DRAWABLE_WINDOW)
       return BadAlloc;
 
-  if(!portPriv->pScrn->vtSema) return Success; /* Success ? */
+    if (!portPriv->pScrn->vtSema)
+        return Success;         /* Success ? */
 
   xf86XVCopyCompositeClip(portPriv, pGC, pDraw);
 
@@ -1840,7 +1810,8 @@ xf86XVPutImage(
 
   /* Register our port with the new window */
   ret =  xf86XVEnlistPortInWindow((WindowPtr)pDraw, portPriv);
-  if(ret != Success) goto PUT_IMAGE_BAILOUT;
+    if (ret != Success)
+        goto PUT_IMAGE_BAILOUT;
 
   if(!RegionNotEmpty(&ClipRegion)) {
      clippedAway = TRUE;
@@ -1849,10 +1820,10 @@ xf86XVPutImage(
 
   if(portPriv->AdaptorRec->flags & VIDEO_NO_CLIPPING) {
      BoxPtr clipBox = RegionRects(&ClipRegion);
+
      if(  (RegionNumRects(&ClipRegion) != 1) ||
 	  (clipBox->x1 != WinBox.x1) || (clipBox->x2 != WinBox.x2) ||
-	  (clipBox->y1 != WinBox.y1) || (clipBox->y2 != WinBox.y2))
-     {
+            (clipBox->y1 != WinBox.y1) || (clipBox->y2 != WinBox.y2)) {
 	  clippedAway = TRUE;
 	  goto PUT_IMAGE_BAILOUT;
      }
@@ -1864,18 +1835,23 @@ xf86XVPutImage(
 
   ret = (*portPriv->AdaptorRec->PutImage)(portPriv->pScrn,
 		src_x, src_y, WinBox.x1, WinBox.y1,
-		src_w, src_h, drw_w, drw_h, format->id, data, width, height,
-		sync, &ClipRegion, portPriv->DevPriv.ptr,
-		pDraw);
+                                             src_w, src_h, drw_w, drw_h,
+                                             format->id, data, width, height,
+                                             sync, &ClipRegion,
+                                             portPriv->DevPriv.ptr, pDraw);
 
   if((ret == Success) &&
 	(portPriv->AdaptorRec->flags & VIDEO_OVERLAID_IMAGES)) {
 
      portPriv->isOn = XV_ON;
-     portPriv->vid_x = src_x;  portPriv->vid_y = src_y;
-     portPriv->vid_w = src_w;  portPriv->vid_h = src_h;
-     portPriv->drw_x = drw_x;  portPriv->drw_y = drw_y;
-     portPriv->drw_w = drw_w;  portPriv->drw_h = drw_h;
+        portPriv->vid_x = src_x;
+        portPriv->vid_y = src_y;
+        portPriv->vid_w = src_w;
+        portPriv->vid_h = src_h;
+        portPriv->drw_x = drw_x;
+        portPriv->drw_y = drw_y;
+        portPriv->drw_w = drw_w;
+        portPriv->drw_h = drw_h;
      portPriv->type = 0;  /* no mask means it's transient and should
 			     not be reput once it's removed */
      pPort->pDraw = pDraw;  /* make sure we can get stop requests */
@@ -1884,8 +1860,8 @@ xf86XVPutImage(
 PUT_IMAGE_BAILOUT:
 
   if((clippedAway || (ret != Success)) && (portPriv->isOn == XV_ON)) {
-	(*portPriv->AdaptorRec->StopVideo)(
-		portPriv->pScrn, portPriv->DevPriv.ptr, FALSE);
+        (*portPriv->AdaptorRec->StopVideo) (portPriv->pScrn,
+                                            portPriv->DevPriv.ptr, FALSE);
 	portPriv->isOn = XV_PENDING;
   }
 
@@ -1899,21 +1875,19 @@ PUT_IMAGE_BAILOUT:
   return ret;
 }
 
-
 static  int
-xf86XVQueryImageAttributes(
-   ClientPtr client,
+xf86XVQueryImageAttributes(ClientPtr client,
    XvPortPtr pPort,
    XvImagePtr format,
    CARD16 *width,
-   CARD16 *height,
-   int *pitches,
-   int *offsets
-){
+                           CARD16 *height, int *pitches, int *offsets)
+{
   XvPortRecPrivatePtr portPriv = (XvPortRecPrivatePtr)(pPort->devPriv.ptr);
 
   return (*portPriv->AdaptorRec->QueryImageAttributes)(portPriv->pScrn,
-			format->id, width, height, pitches, offsets);
+                                                          format->id, width,
+                                                          height, pitches,
+                                                          offsets);
 }
 
 void
@@ -1926,7 +1900,8 @@ xf86XVFillKeyHelperDrawable (DrawablePtr pDraw, CARD32 key, RegionPtr fillboxes)
    xRectangle *rects;
    GCPtr gc;
 
-   if(!xf86Screens[pScreen->myNum]->vtSema) return;
+    if (!xf86Screens[pScreen->myNum]->vtSema)
+        return;
 
    gc = GetScratchGC(pDraw->depth, pScreen);
    pval[0].val = key;
@@ -1936,8 +1911,7 @@ xf86XVFillKeyHelperDrawable (DrawablePtr pDraw, CARD32 key, RegionPtr fillboxes)
 
    rects = malloc(nbox * sizeof(xRectangle));
 
-   for(i = 0; i < nbox; i++, pbox++) 
-   {
+    for (i = 0; i < nbox; i++, pbox++) {
       rects[i].x = pbox->x1 - pDraw->x;
       rects[i].y = pbox->y1 - pDraw->y;
       rects[i].width = pbox->x2 - pbox->x1;
@@ -1957,7 +1931,8 @@ xf86XVFillKeyHelper (ScreenPtr pScreen, CARD32 key, RegionPtr fillboxes)
 }
 
 void
-xf86XVFillKeyHelperPort (DrawablePtr pDraw, pointer data, CARD32 key, RegionPtr clipboxes, Bool fillEverything)
+xf86XVFillKeyHelperPort(DrawablePtr pDraw, pointer data, CARD32 key,
+                        RegionPtr clipboxes, Bool fillEverything)
 {
     WindowPtr pWin = (WindowPtr)pDraw;
     XF86XVWindowPtr WinPriv = GET_XF86XV_WINDOW(pWin);
@@ -1989,10 +1964,10 @@ xf86XVFillKeyHelperPort (DrawablePtr pDraw, pointer data, CARD32 key, RegionPtr
 
 	if (!RegionNotEmpty(fillboxes))
 	    goto out;
-    } else
+    }
+    else
 	fillboxes = clipboxes;
 
-
     RegionCopy(portPriv->ckeyFilled, clipboxes);
 
     xf86XVFillKeyHelperDrawable(pDraw, key, fillboxes);
@@ -2001,7 +1976,6 @@ out:
         RegionUninit(&reg);
 }
 
-
 /* xf86XVClipVideoHelper -
 
    Takes the dst box in standard X BoxRec form (top and left
@@ -2012,16 +1986,12 @@ out:
 */
 
 Bool
-xf86XVClipVideoHelper(
-    BoxPtr dst,
+xf86XVClipVideoHelper(BoxPtr dst,
     INT32 *xa,
     INT32 *xb,
     INT32 *ya,
-    INT32 *yb,
-    RegionPtr reg,
-    INT32 width,
-    INT32 height
-){
+                      INT32 *yb, RegionPtr reg, INT32 width, INT32 height)
+{
     double xsw, xdw, ysw, ydw;
     INT32 delta;
     BoxPtr extents = RegionExtents(reg);
@@ -2032,8 +2002,10 @@ xf86XVClipVideoHelper(
     ysw = (*yb - *ya) << 16;
     ydw = dst->y2 - dst->y1;
 
-    *xa <<= 16; *xb <<= 16;
-    *ya <<= 16; *yb <<= 16;
+    *xa <<= 16;
+    *xb <<= 16;
+    *ya <<= 16;
+    *yb <<= 16;
 
     diff = extents->x1 - dst->x1;
     if (diff > 0) {
@@ -2067,7 +2039,8 @@ xf86XVClipVideoHelper(
 	dst->x2 -= diff;
 	*xb -= (diff * xsw) / xdw;
     }
-    if (*xa >= *xb) return FALSE;
+    if (*xa >= *xb)
+        return FALSE;
 
     if (*ya < 0) {
 	diff = (((-*ya) * ydw) + ysw - 1) / ysw;
@@ -2080,12 +2053,13 @@ xf86XVClipVideoHelper(
 	dst->y2 -= diff;
 	*yb -= (diff * ysw) / ydw;
     }
-    if (*ya >= *yb) return FALSE;
+    if (*ya >= *yb)
+        return FALSE;
 
     if ((dst->x1 > extents->x1) || (dst->x2 < extents->x2) ||
-	(dst->y1 > extents->y1) || (dst->y2 < extents->y2))
-    {
+        (dst->y1 > extents->y1) || (dst->y2 < extents->y2)) {
 	RegionRec clipReg;
+
 	RegionInit(&clipReg, dst, 1);
 	RegionIntersect(reg, reg, &clipReg);
 	RegionUninit(&clipReg);
@@ -2094,17 +2068,13 @@ xf86XVClipVideoHelper(
 }
 
 void
-xf86XVCopyYUV12ToPacked(
-    const void *srcy,
+xf86XVCopyYUV12ToPacked(const void *srcy,
     const void *srcv,
     const void *srcu,
     void *dst,
     int srcPitchy,
-    int srcPitchuv,
-    int dstPitch,
-    int h,
-    int w
-){
+                        int srcPitchuv, int dstPitch, int h, int w)
+{
     CARD32 *Dst;
     const CARD8 *Y, *U, *V;
     int i, j;
@@ -2113,7 +2083,9 @@ xf86XVCopyYUV12ToPacked(
 
     for (j = 0;  j < h;  j++) {
 	Dst = dst;
-	Y = srcy;  V = srcv;  U = srcu;
+        Y = srcy;
+        V = srcv;
+        U = srcu;
 	i = w;
 	while (i >= 4) {
 #if X_BYTE_ORDER == X_LITTLE_ENDIAN
@@ -2128,7 +2100,10 @@ xf86XVCopyYUV12ToPacked(
 	    Dst[2] = (Y[4] << 24) | (Y[5] << 8) | (U[2] << 16) | V[2];
 	    Dst[3] = (Y[6] << 24) | (Y[7] << 8) | (U[3] << 16) | V[3];
 #endif
-	    Dst += 4;  Y += 8;  V += 4;  U += 4;
+            Dst += 4;
+            Y += 8;
+            V += 4;
+            U += 4;
 	    i -= 4;
 	}
 
@@ -2139,7 +2114,10 @@ xf86XVCopyYUV12ToPacked(
 	    /* This assumes a little-endian framebuffer */
 	    Dst[0] = (Y[0] << 24) | (Y[1] << 8) | (U[0] << 16) | V[0];
 #endif
-	    Dst++;  Y += 2;  V++;  U++;
+            Dst++;
+            Y += 2;
+            V++;
+            U++;
 	}
 
 	dst = (CARD8 *)dst + dstPitch;
@@ -2152,14 +2130,9 @@ xf86XVCopyYUV12ToPacked(
 }
 
 void
-xf86XVCopyPacked(
-    const void *src,
-    void *dst,
-    int srcPitch,
-    int dstPitch,
-    int h,
-    int w
-){
+xf86XVCopyPacked(const void *src,
+                 void *dst, int srcPitch, int dstPitch, int h, int w)
+{
     const CARD32 *Src;
     CARD32 *Dst;
     int i;
@@ -2167,20 +2140,26 @@ xf86XVCopyPacked(
     w >>= 1;
     while (--h >= 0) {
 	do {
-	    Dst = dst;  Src = src;
+            Dst = dst;
+            Src = src;
 	    i = w;
 	    while (i >= 4) {
 		Dst[0] = Src[0];
 		Dst[1] = Src[1];
 		Dst[2] = Src[2];
 		Dst[3] = Src[3];
-		Dst += 4;  Src += 4;  i -= 4;
+                Dst += 4;
+                Src += 4;
+                i -= 4;
 	    }
-	    if (!i) break;
+            if (!i)
+                break;
 	    Dst[0] = Src[0];
-	    if (i == 1) break;
+            if (i == 1)
+                break;
 	    Dst[1] = Src[1];
-	    if (i == 2) break;
+            if (i == 2)
+                break;
 	    Dst[2] = Src[2];
 	} while (0);
 
