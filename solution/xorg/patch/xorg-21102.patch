diff --git a/hw/xfree86/loader/loader.c b/hw/xfree86/loader/loader.c
index 05df281..da70b02 100644
--- a/hw/xfree86/loader/loader.c
+++ b/hw/xfree86/loader/loader.c
@@ -1,5 +1,3 @@
-/* $XFree86: xc/programs/Xserver/hw/xfree86/loader/loader.c,v 1.71 2003/11/06 18:38:13 tsi Exp $ */
-
 /*
  * Copyright 1995-1998 by Metro Link, Inc.
  *
@@ -71,7 +69,6 @@
 #include <stdarg.h>
 
 #include "os.h"
-#include "sym.h"
 #include "loader.h"
 #include "loaderProcs.h"
 #include "xf86.h"
@@ -79,31 +76,11 @@
 
 #include "compiler.h"
 
-extern LOOKUP miLookupTab[];
-extern LOOKUP xfree86LookupTab[];
-extern LOOKUP dixLookupTab[];
-extern LOOKUP fontLookupTab[];
-extern LOOKUP extLookupTab[];
-
-/*
-#define DEBUG
-#define DEBUGAR
-#define DEBUGLIST
-#define DEBUGMEM
-*/
-
-int check_unresolved_sema = 0;
-
 #if defined(Lynx) && defined(sun)
 /* Cross build machine doesn;t have strerror() */
 #define strerror(err) "strerror unsupported"
 #endif
 
-#ifdef __UNIXOS2__
-void *os2ldcalloc(size_t, size_t);
-#endif
-
-#ifdef HANDLE_IN_HASH_ENTRY
 /*
  * handles are used to identify files that are loaded. Even archives
  * are counted as a single file.
@@ -113,7 +90,6 @@ void *os2ldcalloc(size_t, size_t);
 #define HANDLE_USED 1
 static char freeHandles[MAX_HANDLE];
 static int refCount[MAX_HANDLE];
-#endif
 
 #if defined(__sparc__) && defined(__GNUC__) && !defined(__FreeBSD__)
 # define SYMFUNCDOT(func) { "." #func, (funcptr)&__sparc_dot_ ## func },
@@ -133,26 +109,6 @@ DEFFUNCDOT(mul)
 DEFFUNCDOT(umul)
 DEFFUNCDOT(div)
 DEFFUNCDOT(udiv)
-#ifdef linux
-static LOOKUP SparcV89LookupTab[] = {
-    SYMFUNCDOT89(rem)
-    SYMFUNCDOT89(urem)
-    SYMFUNCDOT89(mul)
-    SYMFUNCDOT89(umul)
-    SYMFUNCDOT89(div)
-    SYMFUNCDOT89(udiv)
-    {0, 0}
-};
-#endif
-static LOOKUP SparcLookupTab[] = {
-    SYMFUNCDOT(rem)
-    SYMFUNCDOT(urem)
-    SYMFUNCDOT(mul)
-    SYMFUNCDOT(umul)
-    SYMFUNCDOT(div)
-    SYMFUNCDOT(udiv)
-    {0, 0}
-};
 
 #ifdef linux
 #if defined(__GNUC__) && defined(__GLIBC__)
@@ -220,22 +176,6 @@ sparcUseHWMulDiv(void)
  */
 static int moduleseq = 0;
 
-/*
- * GDB Interface
- * =============
- *
- * Linked list of loaded modules - gdb will traverse this to determine
- * whether it needs to add the symbols for the loaded module.
- */
-LDRModulePtr ModList = 0;
-
-/* Flag which gdb sets to let us know we're being debugged */
-char DebuggerPresent = 0;
-
-/* List of common symbols */
-LDRCommonPtr ldrCommons;
-int nCommons;
-
 typedef struct {
     int num;
     const char **list;
@@ -253,29 +193,8 @@ static symlist reqList = { 0, NULL };
 static int fatalReqSym = 0;
 
 /* Prototypes for static functions. */
-static int _GetModuleType(int, long);
 static loaderPtr _LoaderListPush(void);
 static loaderPtr _LoaderListPop(int);
- /*ARGSUSED*/ static char *
-ARCHIVEAddressToSection(void *modptr, unsigned long address)
-{
-    return NULL;
-}
-
-/*
- * Array containing entry points for different formats.
- */
-
-static loader_funcs funcs[] = {
-    /* LD_ELFDLOBJECT */
-    {DLLoadModule,
-     DLResolveSymbols,
-     DLCheckForUnresolved,
-     ARCHIVEAddressToSection,
-     DLUnloadModule},
-};
-
-int numloaders = sizeof(funcs) / sizeof(loader_funcs);
 
 void
 LoaderInit(void)
@@ -287,20 +206,6 @@ LoaderInit(void)
         xf86Msg(X_ERROR, "LD_BIND_NOW is set, dlloader will NOT work!\n");
     }
 
-    LoaderAddSymbols(-1, -1, miLookupTab);
-    LoaderAddSymbols(-1, -1, xfree86LookupTab);
-    LoaderAddSymbols(-1, -1, dixLookupTab);
-    LoaderAddSymbols(-1, -1, fontLookupTab);
-    LoaderAddSymbols(-1, -1, extLookupTab);
-#if defined(__sparc__) && !defined(__FreeBSD__)
-#ifdef linux
-    if (sparcUseHWMulDiv())
-	LoaderAddSymbols(-1, -1, SparcV89LookupTab);
-    else
-#endif
-	LoaderAddSymbols(-1, -1, SparcLookupTab);
-#endif
-
     xf86MsgVerb(X_INFO, 2, "Module ABI versions:\n");
     xf86ErrorFVerb(2, "\t%s: %d.%d\n", ABI_CLASS_ANSIC,
 		   GET_ABI_MAJOR(LoaderVersionInfo.ansicVersion),
@@ -322,16 +227,6 @@ LoaderInit(void)
     if (osname)
 	xf86MsgVerb(X_INFO, 2, "Loader running on %s\n", osname);
 
-#if defined(linux) && \
-    (defined(__alpha__) || defined(__powerpc__) || defined(__ia64__) \
-     || ( defined __amd64__ && ! defined UseMMAP && ! defined DoMMAPedMerge))
-    /*
-     * The glibc malloc uses mmap for large allocations anyway. This breaks
-     * some relocation types because the offset overflow. See loader.h for more
-     * details. We need to turn off this behavior here.
-     */
-    mallopt(M_MMAP_MAX, 0);
-#endif
 #if defined(__UNIXWARE__) && !defined(__GNUC__)
     /* For UnixWare we need to load the C Runtime libraries which are
      * normally auto-linked by the compiler. Otherwise we are bound to
@@ -354,25 +249,12 @@ LoaderInit(void)
 #endif
 }
 
-/*
- * Determine what type of object is being loaded.
- * This function is responsible for restoring the offset.
- * The fd and offset are used here so that when Archive processing
- * is enabled, individual elements of an archive can be evaluated
- * so the correct loader_funcs can be determined.
- */
-static int
-_GetModuleType(int fd, long offset)
-{
-    return LD_ELFDLOBJECT;
-}
-
 static loaderPtr listHead = (loaderPtr) 0;
 
 static loaderPtr
 _LoaderListPush()
 {
-    loaderPtr item = xf86loadercalloc(1, sizeof(struct _loader));
+    loaderPtr item = calloc(1, sizeof(struct _loader));
 
     item->next = listHead;
     listHead = item;
@@ -494,28 +376,6 @@ _LoaderModuleToName(int module)
 }
 
 /*
- * _LoaderAddressToSection() will return the name of the file & section
- * that contains the given address.
- */
-int
-_LoaderAddressToSection(const unsigned long address, const char **module,
-			const char **section)
-{
-    loaderPtr item = listHead;
-
-    while (item) {
-	if ((*section =
-	     item->funcs->AddressToSection(item->private, address)) != NULL) {
-	    *module = _LoaderModuleToName(item->module);
-	    return 1;
-	}
-	item = item->next;
-    }
-
-    return 0;
-}
-
-/*
  * Add a list of symbols to the referenced list.
  */
 
@@ -676,22 +536,15 @@ _LoaderHandleUnresolved(char *symbol, char *module)
     return (fatalsym);
 }
 
-/*
- * Relocation list manipulation routines
- */
-
-/*
- * Public Interface to the loader.
- */
+/* Public Interface to the loader. */
 
 int
 LoaderOpen(const char *module, const char *cname, int handle,
 	   int *errmaj, int *errmin, int *wasLoaded, int flags)
 {
     loaderPtr tmp;
-    int new_handle, modtype;
+    int new_handle;
     int fd;
-    LOOKUP *pLookup;
 
 #if defined(DEBUG)
     ErrorF("LoaderOpen(%s)\n", module);
@@ -757,26 +610,15 @@ LoaderOpen(const char *module, const char *cname, int handle,
 	return -1;
     }
 
-    if ((modtype = _GetModuleType(fd, 0)) < 0) {
-	xf86Msg(X_ERROR, "%s is an unrecognized module type\n", module);
-	freeHandles[new_handle] = HANDLE_FREE;
-	if (errmaj)
-	    *errmaj = LDR_UNKTYPE;
-	if (errmin)
-	    *errmin = LDR_UNKTYPE;
-	return -1;
-    }
-
     tmp = _LoaderListPush();
-    tmp->name = xf86loadermalloc(strlen(module) + 1);
+    tmp->name = malloc(strlen(module) + 1);
     strcpy(tmp->name, module);
-    tmp->cname = xf86loadermalloc(strlen(cname) + 1);
+    tmp->cname = malloc(strlen(cname) + 1);
     strcpy(tmp->cname, cname);
     tmp->handle = new_handle;
     tmp->module = moduleseq++;
-    tmp->funcs = &funcs[modtype];
 
-    if ((tmp->private = funcs[modtype].LoadModule(tmp, fd, &pLookup, flags)) == NULL) {
+    if ((tmp->private = DLLoadModule(tmp, fd, flags)) == NULL) {
 	xf86Msg(X_ERROR, "Failed to load %s\n", module);
 	_LoaderListPop(new_handle);
 	freeHandles[new_handle] = HANDLE_FREE;
@@ -787,11 +629,6 @@ LoaderOpen(const char *module, const char *cname, int handle,
 	return -1;
     }
 
-    if (tmp->private != (void *)-1L) {
-	LoaderAddSymbols(new_handle, tmp->module, pLookup);
-	xf86loaderfree(pLookup);
-    }
-
     close(fd);
 
     return new_handle;
@@ -813,50 +650,13 @@ LoaderHandleOpen(int handle)
 _X_EXPORT void *
 LoaderSymbol(const char *sym)
 {
-    int i;
-    itemPtr item = NULL;
-
-    for (i = 0; i < numloaders; i++)
-	funcs[i].ResolveSymbols(&funcs[i]);
-
-    item = (itemPtr) LoaderHashFind(sym);
-
-    if (item)
-	return item->address;
-    else
 	return (DLFindSymbol(sym));
 }
 
-int
-LoaderResolveSymbols(void)
-{
-    int i;
-
-    for (i = 0; i < numloaders; i++)
-	funcs[i].ResolveSymbols(&funcs[i]);
-    return 0;
-}
-
 _X_EXPORT int
 LoaderCheckUnresolved(int delay_flag)
 {
-    int i, ret = 0;
-    LoaderResolveOptions delayFlag = (LoaderResolveOptions)delay_flag;
-
-    LoaderResolveSymbols();
-
-    if (delayFlag == LD_RESOLV_NOW) {
-	if (check_unresolved_sema > 0)
-	    check_unresolved_sema--;
-	else
-	    xf86Msg(X_WARNING, "LoaderCheckUnresolved: not enough "
-		    "MAGIC_DONT_CHECK_UNRESOLVED\n");
-    }
-
-    if (!check_unresolved_sema || delayFlag == LD_RESOLV_FORCE)
-	for (i = 0; i < numloaders; i++)
-	    if (funcs[i].CheckForUnresolved(&funcs[i]))
-		ret = 1;
+    int ret = 0;
 
     if (fatalReqSym)
 	FatalError("Some required symbols were unresolved\n");
@@ -864,24 +664,6 @@ LoaderCheckUnresolved(int delay_flag)
     return ret;
 }
 
-void xf86LoaderTrap(void);
-
-void
-xf86LoaderTrap(void)
-{
-}
-
-_X_EXPORT void
-LoaderDefaultFunc(void)
-{
-    ErrorF("\n\n\tThis should not happen!\n"
-	   "\tAn unresolved function was called!\n");
-
-    xf86LoaderTrap();
-
-    FatalError("\n");
-}
-
 int
 LoaderUnload(int handle)
 {
@@ -905,10 +687,10 @@ LoaderUnload(int handle)
 	    /* It is not a member of an archive */
 	    xf86Msg(X_INFO, "Unloading %s\n", tmp->name);
 	}
-	tmp->funcs->LoaderUnload(tmp->private);
-	xf86loaderfree(tmp->name);
-	xf86loaderfree(tmp->cname);
-	xf86loaderfree(tmp);
+	DLUnloadModule(tmp->private);
+	free(tmp->name);
+	free(tmp->cname);
+	free(tmp);
     }
 
     freeHandles[handle] = HANDLE_FREE;
@@ -925,12 +707,6 @@ LoaderDuplicateSymbol(const char *symbol, const int handle)
     FatalError("Module load failure\n");
 }
 
-/* GDB Sync function */
-void
-_loader_debug_state()
-{
-}
-
 unsigned long LoaderOptions = 0;
 
 void
