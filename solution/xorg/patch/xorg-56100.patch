diff --git a/render/picture.c b/render/picture.c
index f134596..2fd13fc 100644
--- a/render/picture.c
+++ b/render/picture.c
@@ -58,8 +58,7 @@ PictureDestroyWindow (WindowPtr pWindow)
     PictureScreenPtr    ps = GetPictureScreen(pScreen);
     Bool		ret;
 
-    while ((pPicture = GetPictureWindow(pWindow)))
-    {
+    while ((pPicture = GetPictureWindow(pWindow))) {
 	SetPictureWindow(pWindow, pPicture->pNext);
 	if (pPicture->id)
 	    FreeResource (pPicture->id, PictureType);
@@ -103,16 +102,13 @@ PictureStoreColors (ColormapPtr pColormap, int ndef, xColorItem *pdef)
     ps->StoreColors = pScreen->StoreColors;
     pScreen->StoreColors = PictureStoreColors;
 
-    if (pColormap->class == PseudoColor || pColormap->class == GrayScale)
-    {
+    if (pColormap->class == PseudoColor || pColormap->class == GrayScale) {
 	PictFormatPtr	format = ps->formats;
 	int		nformats = ps->nformats;
 
-	while (nformats--)
-	{
+        while (nformats--) {
 	    if (format->type == PictTypeIndexed &&
-		format->index.pColormap == pColormap)
-	    {
+                format->index.pColormap == pColormap) {
 		(*ps->UpdateIndexed) (pScreen, format, ndef, pdef);
 		break;
 	    }
@@ -127,8 +123,7 @@ visualDepth (ScreenPtr pScreen, VisualPtr pVisual)
     int		d, v;
     DepthPtr	pDepth;
 
-    for (d = 0; d < pScreen->numDepths; d++)
-    {
+    for (d = 0; d < pScreen->numDepths; d++) {
 	pDepth = &pScreen->allowedDepths[d];
 	for (v = 0; v < pDepth->numVids; v++)
 	    if (pDepth->vids[v] == pVisual->vid)
@@ -143,10 +138,7 @@ typedef struct _formatInit {
 } FormatInitRec, *FormatInitPtr;
 
 static int
-addFormat (FormatInitRec    formats[256],
-	   int		    nformat,
-	   CARD32	    format,
-	   CARD8	    depth)
+addFormat(FormatInitRec formats[256], int nformat, CARD32 format, CARD8 depth)
 {
     int	n;
 
@@ -182,13 +174,11 @@ PictureCreateDefaultFormats (ScreenPtr pScreen, int *nformatp)
     formats[nformats].depth = 1;
     nformats++;
     formats[nformats].format = PICT_FORMAT(BitsPerPixel(8),
-					   PICT_TYPE_A,
-					   8, 0, 0, 0);
+                                           PICT_TYPE_A, 8, 0, 0, 0);
     formats[nformats].depth = 8;
     nformats++;
     formats[nformats].format = PICT_FORMAT(BitsPerPixel(4),
-					   PICT_TYPE_A,
-					   4, 0, 0, 0);
+                                           PICT_TYPE_A, 4, 0, 0, 0);
     formats[nformats].depth = 4;
     nformats++;
     formats[nformats].format = PICT_a8r8g8b8;
@@ -205,8 +195,7 @@ PictureCreateDefaultFormats (ScreenPtr pScreen, int *nformatp)
     nformats++;
 
     /* now look through the depths and visuals adding other formats */
-    for (v = 0; v < pScreen->numVisuals; v++)
-    {
+    for (v = 0; v < pScreen->numVisuals; v++) {
 	pVisual = &pScreen->visuals[v];
 	depth = visualDepth (pScreen, pVisual);
 	if (!depth)
@@ -224,25 +213,20 @@ PictureCreateDefaultFormats (ScreenPtr pScreen, int *nformatp)
 	     * fields must be packed together at the bottom of the pixel
 	     */
 	    if (pVisual->offsetBlue == 0 &&
-		pVisual->offsetGreen == b &&
-		pVisual->offsetRed == b + g)
-	    {
+                pVisual->offsetGreen == b && pVisual->offsetRed == b + g) {
 		type = PICT_TYPE_ARGB;
 	    }
 	    else if (pVisual->offsetRed == 0 &&
 		     pVisual->offsetGreen == r && 
-		     pVisual->offsetBlue == r + g)
-	    {
+                     pVisual->offsetBlue == r + g) {
 		type = PICT_TYPE_ABGR;
 	    }
 	    else if (pVisual->offsetRed == pVisual->offsetGreen - r &&
 		     pVisual->offsetGreen == pVisual->offsetBlue - g && 
-		     pVisual->offsetBlue == bpp - b)
-	    {
+                     pVisual->offsetBlue == bpp - b) {
 		type = PICT_TYPE_BGRA;
 	    }
-	    if (type != PICT_TYPE_OTHER)
-	    {
+            if (type != PICT_TYPE_OTHER) {
 		format = PICT_FORMAT(bpp, type, 0, r, g, b);
 		nformats = addFormat (formats, nformats, format, depth);
 	    }
@@ -262,32 +246,28 @@ PictureCreateDefaultFormats (ScreenPtr pScreen, int *nformatp)
     /*
      * Walk supported depths and add useful Direct formats
      */
-    for (d = 0; d < pScreen->numDepths; d++)
-    {
+    for (d = 0; d < pScreen->numDepths; d++) {
 	pDepth = &pScreen->allowedDepths[d];
 	bpp = BitsPerPixel (pDepth->depth);
 	format = 0;
 	switch (bpp) {
 	case 16:
 	    /* depth 12 formats */
-	    if (pDepth->depth >= 12)
-	    {
+            if (pDepth->depth >= 12) {
 		nformats = addFormat (formats, nformats,
 				      PICT_x4r4g4b4, pDepth->depth);
 		nformats = addFormat (formats, nformats,
 				      PICT_x4b4g4r4, pDepth->depth);
 	    }
 	    /* depth 15 formats */
-	    if (pDepth->depth >= 15)
-	    {
+            if (pDepth->depth >= 15) {
 		nformats = addFormat (formats, nformats,
 				      PICT_x1r5g5b5, pDepth->depth);
 		nformats = addFormat (formats, nformats,
 				      PICT_x1b5g5r5, pDepth->depth);
 	    }
 	    /* depth 16 formats */
-	    if (pDepth->depth >= 16) 
-	    {
+            if (pDepth->depth >= 16) {
 		nformats = addFormat (formats, nformats,
 				      PICT_a1r5g5b5, pDepth->depth);
 		nformats = addFormat (formats, nformats,
@@ -303,8 +283,7 @@ PictureCreateDefaultFormats (ScreenPtr pScreen, int *nformatp)
 	    }
 	    break;
 	case 24:
-	    if (pDepth->depth >= 24)
-	    {
+            if (pDepth->depth >= 24) {
 		nformats = addFormat (formats, nformats,
 				      PICT_r8g8b8, pDepth->depth);
 		nformats = addFormat (formats, nformats,
@@ -312,15 +291,13 @@ PictureCreateDefaultFormats (ScreenPtr pScreen, int *nformatp)
 	    }
 	    break;
 	case 32:
-	    if (pDepth->depth >= 24)
-	    {
+            if (pDepth->depth >= 24) {
 		nformats = addFormat (formats, nformats,
 				      PICT_x8r8g8b8, pDepth->depth);
 		nformats = addFormat (formats, nformats,
 				      PICT_x8b8g8r8, pDepth->depth);
 	    }
-	    if (pDepth->depth >= 30)
-	    {
+            if (pDepth->depth >= 30) {
 		nformats = addFormat (formats, nformats,
 				      PICT_a2r10g10b10, pDepth->depth);
 		nformats = addFormat (formats, nformats,
@@ -334,12 +311,10 @@ PictureCreateDefaultFormats (ScreenPtr pScreen, int *nformatp)
 	}
     }
     
-
     pFormats = calloc(nformats, sizeof (PictFormatRec));
     if (!pFormats)
 	return 0;
-    for (f = 0; f < nformats; f++)
-    {
+    for (f = 0; f < nformats; f++) {
         pFormats[f].id = FakeClientID (0);
 	pFormats[f].depth = formats[f].depth;
 	format = formats[f].format;
@@ -349,19 +324,23 @@ PictureCreateDefaultFormats (ScreenPtr pScreen, int *nformatp)
 	    pFormats[f].type = PictTypeDirect;
 	    
 	    pFormats[f].direct.alphaMask = Mask(PICT_FORMAT_A(format));
+
 	    if (pFormats[f].direct.alphaMask)
 		pFormats[f].direct.alpha = (PICT_FORMAT_R(format) +
 					    PICT_FORMAT_G(format) +
 					    PICT_FORMAT_B(format));
 	    
 	    pFormats[f].direct.redMask = Mask(PICT_FORMAT_R(format));
+
 	    pFormats[f].direct.red = (PICT_FORMAT_G(format) + 
 				      PICT_FORMAT_B(format));
 	    
 	    pFormats[f].direct.greenMask = Mask(PICT_FORMAT_G(format));
+
 	    pFormats[f].direct.green = PICT_FORMAT_B(format);
 	    
 	    pFormats[f].direct.blueMask = Mask(PICT_FORMAT_B(format));
+
 	    pFormats[f].direct.blue = 0;
 	    break;
 
@@ -369,19 +348,23 @@ PictureCreateDefaultFormats (ScreenPtr pScreen, int *nformatp)
 	    pFormats[f].type = PictTypeDirect;
 	    
 	    pFormats[f].direct.alphaMask = Mask(PICT_FORMAT_A(format));
+
 	    if (pFormats[f].direct.alphaMask)
 		pFormats[f].direct.alpha = (PICT_FORMAT_B(format) +
 					    PICT_FORMAT_G(format) +
 					    PICT_FORMAT_R(format));
 	    
 	    pFormats[f].direct.blueMask = Mask(PICT_FORMAT_B(format));
+
 	    pFormats[f].direct.blue = (PICT_FORMAT_G(format) + 
 				       PICT_FORMAT_R(format));
 	    
 	    pFormats[f].direct.greenMask = Mask(PICT_FORMAT_G(format));
+
 	    pFormats[f].direct.green = PICT_FORMAT_R(format);
 	    
 	    pFormats[f].direct.redMask = Mask(PICT_FORMAT_R(format));
+
 	    pFormats[f].direct.red = 0;
 	    break;
 
@@ -389,17 +372,24 @@ PictureCreateDefaultFormats (ScreenPtr pScreen, int *nformatp)
 	    pFormats[f].type = PictTypeDirect;
 	    
 	    pFormats[f].direct.blueMask = Mask(PICT_FORMAT_B(format));
-	    pFormats[f].direct.blue = (PICT_FORMAT_BPP(format) - PICT_FORMAT_B(format));
+
+            pFormats[f].direct.blue =
+                (PICT_FORMAT_BPP(format) - PICT_FORMAT_B(format));
 
 	    pFormats[f].direct.greenMask = Mask(PICT_FORMAT_G(format));
-	    pFormats[f].direct.green = (PICT_FORMAT_BPP(format) - PICT_FORMAT_B(format) -
+
+            pFormats[f].direct.green =
+                (PICT_FORMAT_BPP(format) - PICT_FORMAT_B(format) -
 					PICT_FORMAT_G(format));
 
 	    pFormats[f].direct.redMask = Mask(PICT_FORMAT_R(format));
-	    pFormats[f].direct.red = (PICT_FORMAT_BPP(format) - PICT_FORMAT_B(format) -
+
+            pFormats[f].direct.red =
+                (PICT_FORMAT_BPP(format) - PICT_FORMAT_B(format) -
 				      PICT_FORMAT_G(format) - PICT_FORMAT_R(format));
 
 	    pFormats[f].direct.alphaMask = Mask(PICT_FORMAT_A(format));
+
 	    pFormats[f].direct.alpha = 0;
 	    break;
 
@@ -415,7 +405,8 @@ PictureCreateDefaultFormats (ScreenPtr pScreen, int *nformatp)
 	case PICT_TYPE_COLOR:
 	case PICT_TYPE_GRAY:
 	    pFormats[f].type = PictTypeIndexed;
-	    pFormats[f].index.vid = pScreen->visuals[PICT_FORMAT_VIS(format)].vid;
+            pFormats[f].index.vid =
+                pScreen->visuals[PICT_FORMAT_VIS(format)].vid;
 	    break;
 	}
     }
@@ -428,10 +419,9 @@ PictureFindVisual (ScreenPtr pScreen, VisualID visual)
 {
     int         i;
     VisualPtr   pVisual;
+
     for (i = 0, pVisual = pScreen->visuals;
-         i < pScreen->numVisuals;
-         i++, pVisual++)
-    {
+         i < pScreen->numVisuals; i++, pVisual++) {
         if (pVisual->vid == visual)
             return pVisual;
     }
@@ -450,8 +440,10 @@ PictureInitIndexedFormat(ScreenPtr pScreen, PictFormatPtr format)
 	dixLookupResourceByType((pointer *)&format->index.pColormap,
 				pScreen->defColormap, RT_COLORMAP,
 				serverClient, DixGetAttrAccess);
-    } else {
+    }
+    else {
 	VisualPtr pVisual = PictureFindVisual(pScreen, format->index.vid);
+
 	if (CreateColormap(FakeClientID (0), pScreen, pVisual,
 		    &format->index.pColormap, AllocNone, 0)
 		!= Success)
@@ -484,8 +476,7 @@ PictureFinishInit (void)
 {
     int	    s;
 
-    for (s = 0; s < screenInfo.numScreens; s++)
-    {
+    for (s = 0; s < screenInfo.numScreens; s++) {
 	if (!PictureInitIndexedFormats (screenInfo.screens[s]))
 	    return FALSE;
 	(void) AnimCurInit (screenInfo.screens[s]);
@@ -542,24 +533,19 @@ PictureMatchVisual (ScreenPtr pScreen, int depth, VisualPtr pVisual)
     default:
 	return 0;
     }
-    while (nformat--)
-    {
-	if (format->depth == depth && format->type == type)
-	{
-	    if (type == PictTypeIndexed)
-	    {
+    while (nformat--) {
+        if (format->depth == depth && format->type == type) {
+            if (type == PictTypeIndexed) {
 		if (format->index.vid == pVisual->vid)
 		    return format;
 	    }
-	    else
-	    {
+            else {
 		if (format->direct.redMask << format->direct.red == 
 		    pVisual->redMask &&
 		    format->direct.greenMask << format->direct.green == 
 		    pVisual->greenMask &&
 		    format->direct.blueMask << format->direct.blue == 
-		    pVisual->blueMask)
-		{
+                    pVisual->blueMask) {
 		    return format;
 		}
 	    }
@@ -580,8 +566,7 @@ PictureMatchFormat (ScreenPtr pScreen, int depth, CARD32 f)
 	return 0;
     format = ps->formats;
     nformat = ps->nformats;
-    while (nformat--)
-    {
+    while (nformat--) {
 	if (format->depth == depth && format->format == (f & 0xffffff))
 	    return format;
 	format++;
@@ -613,8 +598,7 @@ PictureInit (ScreenPtr pScreen, PictFormatPtr formats, int nformats)
     int			n;
     CARD32		type, a, r, g, b;
     
-    if (PictureGeneration != serverGeneration)
-    {
+    if (PictureGeneration != serverGeneration) {
 	PictureType = CreateNewResourceType (FreePicture, "PICTURE");
 	if (!PictureType)
 	    return FALSE;
@@ -632,33 +616,29 @@ PictureInit (ScreenPtr pScreen, PictFormatPtr formats, int nformats)
     if (!dixRegisterPrivateKey(&PictureWindowPrivateKeyRec, PRIVATE_WINDOW, 0))
 	return FALSE;
 
-    if (!formats)
-    {
+    if (!formats) {
 	formats = PictureCreateDefaultFormats (pScreen, &nformats);
 	if (!formats)
 	    return FALSE;
     }
-    for (n = 0; n < nformats; n++)
-    {
-	if (!AddResource (formats[n].id, PictFormatType, (pointer) (formats+n)))
-	{
+    for (n = 0; n < nformats; n++) {
+        if (!AddResource
+            (formats[n].id, PictFormatType, (pointer) (formats + n))) {
 	    free(formats);
 	    return FALSE;
 	}
-	if (formats[n].type == PictTypeIndexed)
-	{
-            VisualPtr   pVisual = PictureFindVisual (pScreen, formats[n].index.vid);
+        if (formats[n].type == PictTypeIndexed) {
+            VisualPtr pVisual =
+                PictureFindVisual(pScreen, formats[n].index.vid);
 	    if ((pVisual->class | DynamicClass) == PseudoColor)
 		type = PICT_TYPE_COLOR;
 	    else
 		type = PICT_TYPE_GRAY;
 	    a = r = g = b = 0;
 	}
-	else
-	{
+        else {
 	    if ((formats[n].direct.redMask|
-		 formats[n].direct.blueMask|
-		 formats[n].direct.greenMask) == 0)
+                 formats[n].direct.blueMask | formats[n].direct.greenMask) == 0)
 		type = PICT_TYPE_A;
 	    else if (formats[n].direct.red > formats[n].direct.blue)
 		type = PICT_TYPE_ARGB;
@@ -674,8 +654,7 @@ PictureInit (ScreenPtr pScreen, PictFormatPtr formats, int nformats)
 	formats[n].format = PICT_FORMAT(0,type,a,r,g,b);
     }
     ps = (PictureScreenPtr) malloc(sizeof (PictureScreenRec));
-    if (!ps)
-    {
+    if (!ps) {
 	free(formats);
 	return FALSE;
     }
@@ -699,8 +678,7 @@ PictureInit (ScreenPtr pScreen, PictFormatPtr formats, int nformats)
     pScreen->CloseScreen = PictureCloseScreen;
     pScreen->StoreColors = PictureStoreColors;
 
-    if (!PictureSetDefaultFilters (pScreen))
-    {
+    if (!PictureSetDefaultFilters(pScreen)) {
 	PictureResetFilters (pScreen);
 	SetPictureScreen(pScreen, 0);
 	free(formats);
@@ -748,17 +726,13 @@ PicturePtr
 CreatePicture (Picture		pid,
 	       DrawablePtr	pDrawable,
 	       PictFormatPtr	pFormat,
-	       Mask		vmask,
-	       XID		*vlist,
-	       ClientPtr	client,
-	       int		*error)
+              Mask vmask, XID *vlist, ClientPtr client, int *error)
 {
     PicturePtr		pPicture;
     PictureScreenPtr	ps = GetPictureScreen(pDrawable->pScreen);
 
     pPicture = dixAllocateObjectWithPrivates(PictureRec, PRIVATE_PICTURE);
-    if (!pPicture)
-    {
+    if (!pPicture) {
 	*error = BadAlloc;
 	return 0;
     }
@@ -774,13 +748,11 @@ CreatePicture (Picture		pid,
     if (*error != Success)
 	goto out;
 
-    if (pDrawable->type == DRAWABLE_PIXMAP)
-    {
+    if (pDrawable->type == DRAWABLE_PIXMAP) {
 	++((PixmapPtr)pDrawable)->refcnt;
 	pPicture->pNext = 0;
     }
-    else
-    {
+    else {
 	pPicture->pNext = GetPictureWindow(((WindowPtr) pDrawable));
 	SetPictureWindow(((WindowPtr) pDrawable), pPicture);
     }
@@ -794,24 +766,23 @@ CreatePicture (Picture		pid,
     if (*error == Success)
 	*error = (*ps->CreatePicture) (pPicture);
 out:
-    if (*error != Success)
-    {
+    if (*error != Success) {
 	FreePicture (pPicture, (XID) 0);
 	pPicture = 0;
     }
     return pPicture;
 }
 
-static CARD32 xRenderColorToCard32(xRenderColor c)
+static CARD32
+xRenderColorToCard32(xRenderColor c)
 {
     return
         (c.alpha >> 8 << 24) |
-        (c.red >> 8 << 16) |
-        (c.green & 0xff00) |
-        (c.blue >> 8);
+        (c.red >> 8 << 16) | (c.green & 0xff00) | (c.blue >> 8);
 }
 
-static void initGradient(SourcePictPtr pGradient, int stopCount,
+static void
+initGradient(SourcePictPtr pGradient, int stopCount,
                          xFixed *stopPoints, xRenderColor *stopColors, int *error)
 {
     int i;
@@ -845,9 +816,11 @@ static void initGradient(SourcePictPtr pGradient, int stopCount,
     }
 }
 
-static PicturePtr createSourcePicture(void)
+static PicturePtr
+createSourcePicture(void)
 {
     PicturePtr pPicture;
+
     pPicture = dixAllocateObjectWithPrivates(PictureRec, PRIVATE_PICTURE);
     pPicture->pDrawable = 0;
     pPicture->pFormat = 0;
@@ -862,6 +835,7 @@ PicturePtr
 CreateSolidPicture (Picture pid, xRenderColor *color, int *error)
 {
     PicturePtr pPicture;
+
     pPicture = createSourcePicture();
     if (!pPicture) {
         *error = BadAlloc;
@@ -882,7 +856,8 @@ CreateSolidPicture (Picture pid, xRenderColor *color, int *error)
 
 PicturePtr
 CreateLinearGradientPicture (Picture pid, xPointFixed *p1, xPointFixed *p2,
-                             int nStops, xFixed *stops, xRenderColor *colors, int *error)
+                            int nStops, xFixed * stops, xRenderColor * colors,
+                            int *error)
 {
     PicturePtr pPicture;
 
@@ -918,9 +893,10 @@ CreateLinearGradientPicture (Picture pid, xPointFixed *p1, xPointFixed *p2,
 }
 
 PicturePtr
-CreateRadialGradientPicture (Picture pid, xPointFixed *inner, xPointFixed *outer,
-                             xFixed innerRadius, xFixed outerRadius,
-                             int nStops, xFixed *stops, xRenderColor *colors, int *error)
+CreateRadialGradientPicture(Picture pid, xPointFixed * inner,
+                            xPointFixed * outer, xFixed innerRadius,
+                            xFixed outerRadius, int nStops, xFixed * stops,
+                            xRenderColor * colors, int *error)
 {
     PicturePtr pPicture;
     PictRadialGradient *radial;
@@ -963,7 +939,8 @@ CreateRadialGradientPicture (Picture pid, xPointFixed *inner, xPointFixed *outer
 
 PicturePtr
 CreateConicalGradientPicture (Picture pid, xPointFixed *center, xFixed angle,
-                              int nStops, xFixed *stops, xRenderColor *colors, int *error)
+                             int nStops, xFixed * stops, xRenderColor * colors,
+                             int *error)
 {
     PicturePtr pPicture;
 
@@ -1004,10 +981,7 @@ CreateConicalGradientPicture (Picture pid, xPointFixed *center, xFixed angle,
 
 int
 ChangePicture (PicturePtr	pPicture,
-	       Mask		vmask,
-	       XID		*vlist,
-	       DevUnion		*ulist,
-	       ClientPtr	client)
+              Mask vmask, XID *vlist, DevUnion *ulist, ClientPtr client)
 {
     ScreenPtr pScreen = pPicture->pDrawable ? pPicture->pDrawable->pScreen : 0;
     PictureScreenPtr ps = pScreen ? GetPictureScreen(pScreen) : 0;
@@ -1017,24 +991,21 @@ ChangePicture (PicturePtr	pPicture,
     
     pPicture->serialNumber |= GC_CHANGE_SERIAL_BIT;
     maskQ = vmask;
-    while (vmask && !error)
-    {
+    while (vmask && !error) {
 	index2 = (BITS32) lowbit (vmask);
 	vmask &= ~index2;
 	pPicture->stateChanges |= index2;
-	switch (index2)
-	{
+        switch (index2) {
 	case CPRepeat:
 	    {
 		unsigned int	newr;
 		newr = NEXT_VAL(unsigned int);
-		if (newr <= RepeatReflect)
-		{
+
+            if (newr <= RepeatReflect) {
 		    pPicture->repeat = (newr != RepeatNone);
 		    pPicture->repeatType = newr;
 		}
-		else
-		{
+            else {
 		    client->errorValue = newr;
 		    error = BadValue;
 		}
@@ -1044,25 +1015,21 @@ ChangePicture (PicturePtr	pPicture,
 	    {
 		PicturePtr  pAlpha;
 		
-		if (vlist)
-		{
+            if (vlist) {
 		    Picture	pid = NEXT_VAL(Picture);
 
 		    if (pid == None)
 			pAlpha = 0;
-		    else
-		    {
+                else {
 			error = dixLookupResourceByType((pointer *)&pAlpha, pid,
 						  PictureType, client,
 						  DixReadAccess);
-			if (error != Success)
-			{
+                    if (error != Success) {
 			    client->errorValue = pid;
 			    break;
 			}
 			if (pAlpha->pDrawable == NULL ||
-			    pAlpha->pDrawable->type != DRAWABLE_PIXMAP)
-			{
+                        pAlpha->pDrawable->type != DRAWABLE_PIXMAP) {
 			    client->errorValue = pid;
 			    error = BadMatch;
 			    break;
@@ -1071,8 +1038,7 @@ ChangePicture (PicturePtr	pPicture,
 		}
 		else
 		    pAlpha = NEXT_PTR(PicturePtr);
-		if (!error)
-		{
+            if (!error) {
 		    if (pAlpha && pAlpha->pDrawable->type == DRAWABLE_PIXMAP)
 			pAlpha->refcnt++;
 		    if (pPicture->alphaMap)
@@ -1083,64 +1049,62 @@ ChangePicture (PicturePtr	pPicture,
 	    break;
 	case CPAlphaXOrigin:
 	    pPicture->alphaOrigin.x = NEXT_VAL(INT16);
+
 	    break;
 	case CPAlphaYOrigin:
 	    pPicture->alphaOrigin.y = NEXT_VAL(INT16);
+
 	    break;
 	case CPClipXOrigin:
 	    pPicture->clipOrigin.x = NEXT_VAL(INT16);
+
 	    break;
 	case CPClipYOrigin:
 	    pPicture->clipOrigin.y = NEXT_VAL(INT16);
+
 	    break;
 	case CPClipMask:
 	    {
 		Pixmap	    pid;
 		PixmapPtr   pPixmap;
 		int	    clipType;
+
                 if (!pScreen)
                     return BadDrawable;
 
-		if (vlist)
-		{
+            if (vlist) {
 		    pid = NEXT_VAL(Pixmap);
-		    if (pid == None)
-		    {
+                if (pid == None) {
 			clipType = CT_NONE;
 			pPixmap = NullPixmap;
 		    }
-		    else
-		    {
+                else {
 			clipType = CT_PIXMAP;
 			error = dixLookupResourceByType((pointer *)&pPixmap, pid,
 						  RT_PIXMAP, client,
 						  DixReadAccess);
-			if (error != Success)
-			{
+                    if (error != Success) {
 			    client->errorValue = pid;
 			    break;
 			}
 		    }
 		}
-		else
-		{
+            else {
 		    pPixmap = NEXT_PTR(PixmapPtr);
+
 		    if (pPixmap)
 			clipType = CT_PIXMAP;
 		    else
 			clipType = CT_NONE;
 		}
 
-		if (pPixmap)
-		{
+            if (pPixmap) {
 		    if ((pPixmap->drawable.depth != 1) ||
-			(pPixmap->drawable.pScreen != pScreen))
-		    {
+                    (pPixmap->drawable.pScreen != pScreen)) {
 			error = BadMatch;
 			break;
 		    }
-		    else
-		    {
+                else {
 			clipType = CT_PIXMAP;
 			pPixmap->refcnt++;
 		    }
@@ -1153,10 +1117,10 @@ ChangePicture (PicturePtr	pPicture,
 	    {
 		unsigned int	newe;
 		newe = NEXT_VAL(unsigned int);
+
 		if (newe <= xTrue)
 		    pPicture->graphicsExposures = newe;
-		else
-		{
+            else {
 		    client->errorValue = newe;
 		    error = BadValue;
 		}
@@ -1166,10 +1130,10 @@ ChangePicture (PicturePtr	pPicture,
 	    {
 		unsigned int	news;
 		news = NEXT_VAL(unsigned int);
+
 		if (news == ClipByChildren || news == IncludeInferiors)
 		    pPicture->subWindowMode = news;
-		else
-		{
+            else {
 		    client->errorValue = news;
 		    error = BadValue;
 		}
@@ -1179,10 +1143,10 @@ ChangePicture (PicturePtr	pPicture,
 	    {
 		unsigned int	newe;
 		newe = NEXT_VAL(unsigned int);
+
 		if (newe == PolyEdgeSharp || newe == PolyEdgeSmooth)
 		    pPicture->polyEdge = newe;
-		else
-		{
+            else {
 		    client->errorValue = newe;
 		    error = BadValue;
 		}
@@ -1192,10 +1156,10 @@ ChangePicture (PicturePtr	pPicture,
 	    {
 		unsigned int	newm;
 		newm = NEXT_VAL(unsigned int);
+
 		if (newm == PolyModePrecise || newm == PolyModeImprecise)
 		    pPicture->polyMode = newm;
-		else
-		{
+            else {
 		    client->errorValue = newm;
 		    error = BadValue;
 		}
@@ -1203,16 +1167,17 @@ ChangePicture (PicturePtr	pPicture,
 	    break;
 	case CPDither:
 	    (void) NEXT_VAL(Atom); /* unimplemented */
+
 	    break;
 	case CPComponentAlpha:
 	    {
 		unsigned int	newca;
 
 		newca = NEXT_VAL (unsigned int);
+
 		if (newca <= xTrue)
 		    pPicture->componentAlpha = newca;
-		else
-		{
+            else {
 		    client->errorValue = newca;
 		    error = BadValue;
 		}
@@ -1231,10 +1196,7 @@ ChangePicture (PicturePtr	pPicture,
 
 int
 SetPictureClipRects (PicturePtr	pPicture,
-		     int	xOrigin,
-		     int	yOrigin,
-		     int	nRect,
-		     xRectangle	*rects)
+                    int xOrigin, int yOrigin, int nRect, xRectangle *rects)
 {
     ScreenPtr		pScreen = pPicture->pDrawable->pScreen;
     PictureScreenPtr	ps = GetPictureScreen(pScreen);
@@ -1246,8 +1208,7 @@ SetPictureClipRects (PicturePtr	pPicture,
 	return BadAlloc;
     result =(*ps->ChangePictureClip) (pPicture, CT_REGION, 
 				      (pointer) clientClip, 0);
-    if (result == Success)
-    {
+    if (result == Success) {
 	pPicture->clipOrigin.x = xOrigin;
 	pPicture->clipOrigin.y = yOrigin;
 	pPicture->stateChanges |= CPClipXOrigin|CPClipYOrigin|CPClipMask;
@@ -1258,9 +1219,7 @@ SetPictureClipRects (PicturePtr	pPicture,
 
 int
 SetPictureClipRegion (PicturePtr    pPicture,
-                      int           xOrigin,
-                      int           yOrigin,
-                      RegionPtr     pRegion)
+                     int xOrigin, int yOrigin, RegionPtr pRegion)
 {
     ScreenPtr           pScreen = pPicture->pDrawable->pScreen;
     PictureScreenPtr    ps = GetPictureScreen(pScreen);
@@ -1268,29 +1227,24 @@ SetPictureClipRegion (PicturePtr    pPicture,
     int                 result;
     int                 type;
 
-    if (pRegion)
-    {
+    if (pRegion) {
         type = CT_REGION;
         clientClip = RegionCreate(RegionExtents(pRegion),
                                   RegionNumRects(pRegion));
         if (!clientClip)
             return BadAlloc;
-        if (!RegionCopy(clientClip, pRegion))
-        {
+        if (!RegionCopy(clientClip, pRegion)) {
             RegionDestroy(clientClip);
             return BadAlloc;
         }
     }
-    else
-    {
+    else {
         type = CT_NONE;
         clientClip = 0;
     }
 
-    result =(*ps->ChangePictureClip) (pPicture, type,
-                                      (pointer) clientClip, 0);
-    if (result == Success)
-    {
+    result = (*ps->ChangePictureClip) (pPicture, type, (pointer) clientClip, 0);
+    if (result == Success) {
         pPicture->clipOrigin.x = xOrigin;
         pPicture->clipOrigin.y = yOrigin;
         pPicture->stateChanges |= CPClipXOrigin|CPClipYOrigin|CPClipMask;
@@ -1309,29 +1263,25 @@ transformIsIdentity(PictTransform *t)
             (t->matrix[0][2] == 0) &&
             (t->matrix[1][0] == 0) &&
             (t->matrix[1][2] == 0) &&
-            (t->matrix[2][0] == 0) &&
-            (t->matrix[2][1] == 0));
+            (t->matrix[2][0] == 0) && (t->matrix[2][1] == 0));
 }
 
 int
-SetPictureTransform (PicturePtr	    pPicture,
-		     PictTransform  *transform)
+SetPictureTransform(PicturePtr pPicture, PictTransform * transform)
 {
     if (transform && transformIsIdentity (transform))
 	transform = 0;
     
-    if (transform)
-    {
-	if (!pPicture->transform)
-	{
-	    pPicture->transform = (PictTransform *) malloc(sizeof (PictTransform));
+    if (transform) {
+        if (!pPicture->transform) {
+            pPicture->transform =
+                (PictTransform *) malloc(sizeof(PictTransform));
 	    if (!pPicture->transform)
 		return BadAlloc;
 	}
 	*pPicture->transform = *transform;
     }
-    else
-    {
+    else {
 	free(pPicture->transform);
 	pPicture->transform = NULL;
     }
@@ -1350,9 +1300,7 @@ SetPictureTransform (PicturePtr	    pPicture,
 }
 
 void
-CopyPicture (PicturePtr	pSrc,
-	     Mask	mask,
-	     PicturePtr	pDst)
+CopyPicture(PicturePtr pSrc, Mask mask, PicturePtr pDst)
 {
     PictureScreenPtr ps = GetPictureScreen(pSrc->pDrawable->pScreen);
     Mask origMask = mask;
@@ -1363,14 +1311,14 @@ CopyPicture (PicturePtr	pSrc,
     while (mask) {
 	Mask bit = lowbit(mask);
 
-	switch (bit)
-	{
+        switch (bit) {
 	case CPRepeat:
 	    pDst->repeat = pSrc->repeat;
 	    pDst->repeatType = pSrc->repeatType;
 	    break;
 	case CPAlphaMap:
-	    if (pSrc->alphaMap && pSrc->alphaMap->pDrawable->type == DRAWABLE_PIXMAP)
+            if (pSrc->alphaMap &&
+                pSrc->alphaMap->pDrawable->type == DRAWABLE_PIXMAP)
 		pSrc->alphaMap->refcnt++;
 	    if (pDst->alphaMap)
 		FreePicture ((pointer) pDst->alphaMap, (XID) 0);
@@ -1396,12 +1344,12 @@ CopyPicture (PicturePtr	pSrc,
 	    case CT_REGION:
 		if (!pSrc->clientClip) {
 		    (*ps->ChangePictureClip)(pDst, CT_NONE, NULL, 0);
-		} else {
+                }
+                else {
 		    RegionPtr clientClip;
 		    RegionPtr srcClientClip = (RegionPtr)pSrc->clientClip;
 
-		    clientClip = RegionCreate(
-			RegionExtents(srcClientClip),
+                    clientClip = RegionCreate(RegionExtents(srcClientClip),
 			RegionNumRects(srcClientClip));
 		    (*ps->ChangePictureClip)(pDst, CT_REGION, clientClip, 0);
 		}
@@ -1435,8 +1383,8 @@ CopyPicture (PicturePtr	pSrc,
 static void
 ValidateOnePicture (PicturePtr pPicture)
 {
-    if (pPicture->pDrawable && pPicture->serialNumber != pPicture->pDrawable->serialNumber)
-    {
+    if (pPicture->pDrawable &&
+        pPicture->serialNumber != pPicture->pDrawable->serialNumber) {
 	PictureScreenPtr    ps = GetPictureScreen(pPicture->pDrawable->pScreen);
 
 	(*ps->ValidatePicture) (pPicture, pPicture->stateChanges);
@@ -1454,25 +1402,21 @@ ValidatePicture(PicturePtr pPicture)
 }
 
 int
-FreePicture (pointer	value,
-	     XID	pid)
+FreePicture(pointer value, XID pid)
 {
     PicturePtr	pPicture = (PicturePtr) value;
 
-    if (--pPicture->refcnt == 0)
-    {
+    if (--pPicture->refcnt == 0) {
 	free(pPicture->transform);
 
-	if (pPicture->pSourcePict)
-	{
+        if (pPicture->pSourcePict) {
 	    if (pPicture->pSourcePict->type != SourcePictTypeSolidFill)
 		free(pPicture->pSourcePict->linear.stops);
 
 	    free(pPicture->pSourcePict);
 	}
 
-	if (pPicture->pDrawable)
-	{
+        if (pPicture->pDrawable) {
             ScreenPtr	    pScreen = pPicture->pDrawable->pScreen;
             PictureScreenPtr    ps = GetPictureScreen(pScreen);
 	
@@ -1480,25 +1424,20 @@ FreePicture (pointer	value,
                 FreePicture ((pointer) pPicture->alphaMap, (XID) 0);
             (*ps->DestroyPicture) (pPicture);
             (*ps->DestroyPictureClip) (pPicture);
-            if (pPicture->pDrawable->type == DRAWABLE_WINDOW)
-            {
+            if (pPicture->pDrawable->type == DRAWABLE_WINDOW) {
                 WindowPtr	pWindow = (WindowPtr) pPicture->pDrawable;
                 PicturePtr	*pPrev;
 
                 for (pPrev = (PicturePtr *)dixLookupPrivateAddr
 			 (&pWindow->devPrivates, PictureWindowPrivateKey);
-                     *pPrev;
-                     pPrev = &(*pPrev)->pNext)
-                {
-                    if (*pPrev == pPicture)
-                    {
+                     *pPrev; pPrev = &(*pPrev)->pNext) {
+                    if (*pPrev == pPicture) {
                         *pPrev = pPicture->pNext;
                         break;
                     }
                 }
             }
-            else if (pPicture->pDrawable->type == DRAWABLE_PIXMAP)
-            {
+            else if (pPicture->pDrawable->type == DRAWABLE_PIXMAP) {
                 (*pScreen->DestroyPixmap) ((PixmapPtr)pPicture->pDrawable);
             }
         }
@@ -1508,8 +1447,7 @@ FreePicture (pointer	value,
 }
 
 int
-FreePictFormat (pointer	pPictFormat,
-		XID     pid)
+FreePictFormat(pointer pPictFormat, XID pid)
 {
     return Success;
 }
@@ -1539,17 +1477,14 @@ ReduceCompositeOp (CARD8 op, PicturePtr pSrc, PicturePtr pMask, PicturePtr pDst,
 		     xSrc >= 0 && ySrc >= 0 &&
 		     xSrc + width <= pSrc->pDrawable->width &&
 		     ySrc + height <= pSrc->pDrawable->height)) &&
-                   pSrc->alphaMap == NULL &&
-                   pMask == NULL;
+        pSrc->alphaMap == NULL && pMask == NULL;
     no_dst_alpha = PICT_FORMAT_COLOR(pDst->format) &&
-                   PICT_FORMAT_A(pDst->format) == 0 &&
-                   pDst->alphaMap == NULL;
+        PICT_FORMAT_A(pDst->format) == 0 && pDst->alphaMap == NULL;
 
     /* TODO, maybe: Conjoint and Disjoint op reductions? */
  
     /* Deal with simplifications where the source alpha is always 1. */
-    if (no_src_alpha)
-    {
+    if (no_src_alpha) {
 	switch (op) {
 	case PictOpOver:
 	    op = PictOpSrc;
@@ -1575,8 +1510,7 @@ ReduceCompositeOp (CARD8 op, PicturePtr pSrc, PicturePtr pMask, PicturePtr pDst,
     }
 
     /* Deal with simplifications when the destination alpha is always 1 */
-    if (no_dst_alpha)
-    {
+    if (no_dst_alpha) {
 	switch (op) {
 	case PictOpOverReverse:
 	    op = PictOpDst;
@@ -1628,10 +1562,7 @@ CompositePicture (CARD8		op,
 		  INT16		ySrc,
 		  INT16		xMask,
 		  INT16		yMask,
-		  INT16		xDst,
-		  INT16		yDst,
-		  CARD16	width,
-		  CARD16	height)
+                 INT16 xDst, INT16 yDst, CARD16 width, CARD16 height)
 {
     PictureScreenPtr	ps = GetPictureScreen(pDst->pDrawable->pScreen);
     
@@ -1648,22 +1579,13 @@ CompositePicture (CARD8		op,
 		       pSrc,
 		       pMask,
 		       pDst,
-		       xSrc,
-		       ySrc,
-		       xMask,
-		       yMask,
-		       xDst,
-		       yDst,
-		       width,
-		       height);
+                      xSrc, ySrc, xMask, yMask, xDst, yDst, width, height);
 }
 
 void
 CompositeRects (CARD8		op,
 		PicturePtr	pDst,
-		xRenderColor	*color,
-		int		nRect,
-		xRectangle      *rects)
+               xRenderColor * color, int nRect, xRectangle *rects)
 {
     PictureScreenPtr	ps = GetPictureScreen(pDst->pDrawable->pScreen);
     
@@ -1676,10 +1598,7 @@ CompositeTrapezoids (CARD8	    op,
 		     PicturePtr	    pSrc,
 		     PicturePtr	    pDst,
 		     PictFormatPtr  maskFormat,
-		     INT16	    xSrc,
-		     INT16	    ySrc,
-		     int	    ntrap,
-		     xTrapezoid	    *traps)
+                    INT16 xSrc, INT16 ySrc, int ntrap, xTrapezoid * traps)
 {
     PictureScreenPtr	ps = GetPictureScreen(pDst->pDrawable->pScreen);
     
@@ -1694,15 +1613,14 @@ CompositeTriangles (CARD8	    op,
 		    PicturePtr	    pDst,
 		    PictFormatPtr   maskFormat,
 		    INT16	    xSrc,
-		    INT16	    ySrc,
-		    int		    ntriangles,
-		    xTriangle	    *triangles)
+                   INT16 ySrc, int ntriangles, xTriangle * triangles)
 {
     PictureScreenPtr	ps = GetPictureScreen(pDst->pDrawable->pScreen);
     
     ValidatePicture (pSrc);
     ValidatePicture (pDst);
-    (*ps->Triangles) (op, pSrc, pDst, maskFormat, xSrc, ySrc, ntriangles, triangles);
+    (*ps->Triangles) (op, pSrc, pDst, maskFormat, xSrc, ySrc, ntriangles,
+                      triangles);
 }
 
 void
@@ -1710,10 +1628,7 @@ CompositeTriStrip (CARD8	    op,
 		   PicturePtr	    pSrc,
 		   PicturePtr	    pDst,
 		   PictFormatPtr    maskFormat,
-		   INT16	    xSrc,
-		   INT16	    ySrc,
-		   int		    npoints,
-		   xPointFixed	    *points)
+                  INT16 xSrc, INT16 ySrc, int npoints, xPointFixed * points)
 {
     PictureScreenPtr	ps = GetPictureScreen(pDst->pDrawable->pScreen);
 
@@ -1730,10 +1645,7 @@ CompositeTriFan (CARD8		op,
 		 PicturePtr	pSrc,
 		 PicturePtr	pDst,
 		 PictFormatPtr	maskFormat,
-		 INT16		xSrc,
-		 INT16		ySrc,
-		 int		npoints,
-		 xPointFixed	*points)
+                INT16 xSrc, INT16 ySrc, int npoints, xPointFixed * points)
 {
     PictureScreenPtr	ps = GetPictureScreen(pDst->pDrawable->pScreen);
 
@@ -1746,15 +1658,10 @@ CompositeTriFan (CARD8		op,
 }
 
 void
-AddTraps (PicturePtr	pPicture,
-	  INT16		xOff,
-	  INT16		yOff,
-	  int		ntrap,
-	  xTrap		*traps)
+AddTraps(PicturePtr pPicture, INT16 xOff, INT16 yOff, int ntrap, xTrap * traps)
 {
     PictureScreenPtr	ps = GetPictureScreen(pPicture->pDrawable->pScreen);
     
     ValidatePicture (pPicture);
     (*ps->AddTraps) (pPicture, xOff, yOff, ntrap, traps);
 }
-
