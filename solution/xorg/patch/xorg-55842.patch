diff --git a/hw/xwin/winconfig.c b/hw/xwin/winconfig.c
index 4dbbe7c..313320f 100644
--- a/hw/xwin/winconfig.c
+++ b/hw/xwin/winconfig.c
@@ -106,13 +106,11 @@ winInfoRec g_winInfo = {
 #ifdef XWIN_XF86CONFIG
 serverLayoutRec g_winConfigLayout;
 
-static Bool ParseOptionValue (int scrnIndex, pointer options,
-			      OptionInfoPtr p);
+static Bool ParseOptionValue(int scrnIndex, pointer options, OptionInfoPtr p);
 static Bool configLayout (serverLayoutPtr, XF86ConfLayoutPtr, char *);
 static Bool configImpliedLayout (serverLayoutPtr, XF86ConfScreenPtr);
 static Bool GetBoolValue (OptionInfoPtr p, const char *s);
 
-
 Bool
 winReadConfigfile ()
 {
@@ -123,13 +121,11 @@ winReadConfigfile ()
   char		*xf86ConfigFile = NULL;
   char		*xf86ConfigDir = NULL;
 
-  if (g_cmdline.configFile)
-    {
+    if (g_cmdline.configFile) {
       filefrom = X_CMDLINE;
       xf86ConfigFile = g_cmdline.configFile;
     }
-  if (g_cmdline.configDir)
-    {
+    if (g_cmdline.configDir) {
       dirfrom = X_CMDLINE;
       xf86ConfigDir = g_cmdline.configDir;
     }
@@ -143,36 +139,30 @@ winReadConfigfile ()
   if (!filename && from == X_DEFAULT)
     filename = xf86openConfigFile (CONFIGPATH, "XF86Config", PROJECTROOT);
 
-  if (filename)
-    {
+    if (filename) {
       winMsg (from, "Using config file: \"%s\"\n", filename);
     }
-  else
-    {
+    else {
       winMsg (X_ERROR, "Unable to locate/open config file");
       if (xf86ConfigFile)
 	ErrorF (": \"%s\"", xf86ConfigFile);
       ErrorF ("\n");
     }
-  if (dirname)
-    {
+    if (dirname) {
       winMsg (from, "Using config directory: \"%s\"\n", dirname);
     }
-  else
-    {
+    else {
       winMsg (X_ERROR, "Unable to locate/open config directory");
       if (xf86ConfigDir)
 	ErrorF (": \"%s\"", xf86ConfigDir);
       ErrorF ("\n");
     }
-  if (!filename && !dirname)
-    {
+    if (!filename && !dirname) {
       return FALSE;
     }
   free(filename);
   free(dirname);
-  if ((g_xf86configptr = xf86readConfigFile ()) == NULL)
-    {
+    if ((g_xf86configptr = xf86readConfigFile()) == NULL) {
       winMsg (X_ERROR, "Problem parsing the config file\n");
       return FALSE;
     }
@@ -182,25 +172,21 @@ winReadConfigfile ()
 
   /* set options from data structure */
 
-  if (g_xf86configptr->conf_layout_lst == NULL || g_cmdline.screenname != NULL)
-    {
-      if (g_cmdline.screenname == NULL)
-	{
+    if (g_xf86configptr->conf_layout_lst == NULL ||
+        g_cmdline.screenname != NULL) {
+        if (g_cmdline.screenname == NULL) {
 	  winMsg (X_WARNING,
 		  "No Layout section. Using the first Screen section.\n");
 	}
       if (!configImpliedLayout (&g_winConfigLayout,
-				g_xf86configptr->conf_screen_lst))
-	{
+                                 g_xf86configptr->conf_screen_lst)) {
 	  winMsg (X_ERROR, "Unable to determine the screen layout\n");
 	  return FALSE;
 	}
     }
-  else
-    {
+    else {
       /* Check if layout is given in the config file */
-      if (g_xf86configptr->conf_flags != NULL)
-	{
+        if (g_xf86configptr->conf_flags != NULL) {
 	  char *dfltlayout = NULL;
 	  pointer optlist = g_xf86configptr->conf_flags->flg_option_lst;
 
@@ -209,19 +195,14 @@ winReadConfigfile ()
 	      winSetStrOption (optlist, "defaultserverlayout", NULL);
 
 	  if (!configLayout (&g_winConfigLayout,
-			     g_xf86configptr->conf_layout_lst,
-			     dfltlayout))
-	    {
+                              g_xf86configptr->conf_layout_lst, dfltlayout)) {
 	      winMsg (X_ERROR, "Unable to determine the screen layout\n");
 	      return FALSE;
 	    }
 	}
-      else
-	{
+        else {
 	  if (!configLayout (&g_winConfigLayout,
-			     g_xf86configptr->conf_layout_lst,
-			     NULL))
-	    {
+                              g_xf86configptr->conf_layout_lst, NULL)) {
 	      winMsg (X_ERROR, "Unable to determine the screen layout\n");
 	      return FALSE;
 	    }
@@ -245,6 +226,7 @@ winConfigKeyboard (DeviceIntPtr pDevice)
   unsigned char                 layoutFriendlyName[256];
   static unsigned int           layoutNum = 0;
   int                           keyboardType;
+
 #ifdef XWIN_XF86CONFIG
   XF86ConfInputPtr		kbd = NULL;
   XF86ConfInputPtr		input_list = NULL;
@@ -262,16 +244,23 @@ winConfigKeyboard (DeviceIntPtr pDevice)
   {
     int kbd_delay;
     DWORD kbd_speed;
+
     if (SystemParametersInfo(SPI_GETKEYBOARDDELAY, 0, &kbd_delay, 0) &&
-        SystemParametersInfo(SPI_GETKEYBOARDSPEED, 0, &kbd_speed, 0))
-      {
-        switch (kbd_delay) 
-          {
-            case 0:  g_winInfo.keyboard.delay = 250; break;
-            case 1:  g_winInfo.keyboard.delay = 500; break;
-            case 2:  g_winInfo.keyboard.delay = 750; break;
+            SystemParametersInfo(SPI_GETKEYBOARDSPEED, 0, &kbd_speed, 0)) {
+            switch (kbd_delay) {
+            case 0:
+                g_winInfo.keyboard.delay = 250;
+                break;
+            case 1:
+                g_winInfo.keyboard.delay = 500;
+                break;
+            case 2:
+                g_winInfo.keyboard.delay = 750;
+                break;
             default:
-            case 3:  g_winInfo.keyboard.delay = 1000; break;
+            case 3:
+                g_winInfo.keyboard.delay = 1000;
+                break;
           }
         g_winInfo.keyboard.rate = (kbd_speed>0)?kbd_speed:1;
         winMsgVerb(X_PROBED, 1, "Setting autorepeat to delay=%d, rate=%d\n",
@@ -279,10 +268,8 @@ winConfigKeyboard (DeviceIntPtr pDevice)
       }
   }
   
-
   keyboardType = GetKeyboardType (0);
-  if (keyboardType > 0 && GetKeyboardLayoutName (layoutName)) 
-  {
+    if (keyboardType > 0 && GetKeyboardLayoutName(layoutName)) {
     WinKBLayoutPtr	pLayout;
     Bool                bfound = FALSE;
 
@@ -294,8 +281,7 @@ winConfigKeyboard (DeviceIntPtr pDevice)
 	   Same might apply for chinese, korean and other symbol languages
 	   too */
         layoutNum = (layoutNum & 0xffff);
-	if (keyboardType == 7)
-	  {
+            if (keyboardType == 7) {
 	    /* Japanese layouts have problems with key event messages
 	       such as the lack of WM_KEYUP for Caps Lock key.
 	       Loading US layout fixes this problem. */
@@ -309,7 +295,8 @@ winConfigKeyboard (DeviceIntPtr pDevice)
     /* Discover the friendly name of the current layout */
     {
       HKEY                regkey = NULL;
-      const char          regtempl[] = "SYSTEM\\CurrentControlSet\\Control\\Keyboard Layouts\\";
+            const char regtempl[] =
+                "SYSTEM\\CurrentControlSet\\Control\\Keyboard Layouts\\";
       char                *regpath;
       DWORD               namesize = sizeof(layoutFriendlyName);
 
@@ -318,7 +305,8 @@ winConfigKeyboard (DeviceIntPtr pDevice)
       strcat(regpath, layoutName);
 
       if (!RegOpenKey(HKEY_LOCAL_MACHINE, regpath, &regkey))
-          RegQueryValueEx(regkey, "Layout Text", 0, NULL, layoutFriendlyName, &namesize);
+                RegQueryValueEx(regkey, "Layout Text", 0, NULL,
+                                layoutFriendlyName, &namesize);
 
       /* Close registry key */
       if (regkey)
@@ -326,11 +314,11 @@ winConfigKeyboard (DeviceIntPtr pDevice)
       free(regpath);
     }
 
-    winMsg (X_PROBED, "Windows keyboard layout: \"%s\" (%08x) \"%s\", type %d\n",
+        winMsg(X_PROBED,
+               "Windows keyboard layout: \"%s\" (%08x) \"%s\", type %d\n",
             layoutName, layoutNum, layoutFriendlyName, keyboardType);
 
-    for (pLayout = winKBLayouts; pLayout->winlayout != -1; pLayout++)
-      {
+        for (pLayout = winKBLayouts; pLayout->winlayout != -1; pLayout++) {
 	if (pLayout->winlayout != layoutNum)
 	  continue;
 	if (pLayout->winkbtype > 0 && pLayout->winkbtype != keyboardType)
@@ -354,13 +342,13 @@ winConfigKeyboard (DeviceIntPtr pDevice)
 	g_winInfo.xkb.variant = pLayout->xkbvariant;
 	g_winInfo.xkb.options = pLayout->xkboptions;
 
-
 	break;
       }
 
-    if (!bfound)
-      {
-        winMsg (X_ERROR, "Keyboardlayout \"%s\" (%s) is unknown, using X server default layout\n", layoutFriendlyName, layoutName);
+        if (!bfound) {
+            winMsg(X_ERROR,
+                   "Keyboardlayout \"%s\" (%s) is unknown, using X server default layout\n",
+                   layoutFriendlyName, layoutName);
       }
   }
 
@@ -377,10 +365,8 @@ winConfigKeyboard (DeviceIntPtr pDevice)
   if (g_xf86configptr != NULL)
     input_list = g_xf86configptr->conf_input_lst;
 
-  while (input_list != NULL)
-    {
-      if (winNameCompare (input_list->inp_driver, "keyboard") == 0)
-	{
+    while (input_list != NULL) {
+        if (winNameCompare(input_list->inp_driver, "keyboard") == 0) {
 	  /* Check if device name matches requested name */
 	  if (g_cmdline.keyboard && winNameCompare (input_list->inp_identifier,
 						    g_cmdline.keyboard))
@@ -390,21 +376,18 @@ winConfigKeyboard (DeviceIntPtr pDevice)
       input_list = input_list->list.next;
     }
 
-  if (kbd != NULL)
-    {
+    if (kbd != NULL) {
 
       if (kbd->inp_identifier)
 	winMsg (kbdfrom, "Using keyboard \"%s\" as primary keyboard\n",
 		kbd->inp_identifier);
 
-      if ((s = winSetStrOption(kbd->inp_option_lst, "AutoRepeat", NULL)))
-        {
+        if ((s = winSetStrOption(kbd->inp_option_lst, "AutoRepeat", NULL))) {
           if ((sscanf(s, "%ld %ld", &g_winInfo.keyboard.delay, 
                       &g_winInfo.keyboard.rate) != 2) ||
                   (g_winInfo.keyboard.delay < 1) || 
                   (g_winInfo.keyboard.rate == 0) || 
-                  (1000 / g_winInfo.keyboard.rate) < 1) 
-            {
+                (1000 / g_winInfo.keyboard.rate) < 1) {
               winErrorFVerb (2, "\"%s\" is not a valid AutoRepeat value", s);
               free(s);
               return FALSE;
@@ -416,96 +399,81 @@ winConfigKeyboard (DeviceIntPtr pDevice)
 #endif
       
         s = NULL;
-        if (g_cmdline.xkbRules)
-          {
+        if (g_cmdline.xkbRules) {
             s = g_cmdline.xkbRules;
             from = X_CMDLINE;
           }
 #ifdef XWIN_XF86CONFIG
-        else
-          {
+        else {
             s = winSetStrOption (kbd->inp_option_lst, "XkbRules", NULL);
             from = X_CONFIG;
           }
 #endif
-        if (s)
-          {
+        if (s) {
             g_winInfo.xkb.rules = NULL_IF_EMPTY (s);
             winMsg (from, "XKB: rules: \"%s\"\n", s);
 	  }
           
         s = NULL;
-        if (g_cmdline.xkbModel)
-          {
+        if (g_cmdline.xkbModel) {
             s = g_cmdline.xkbModel;
             from = X_CMDLINE;
           }
 #ifdef XWIN_XF86CONFIG
-        else
-          {
+        else {
             s = winSetStrOption (kbd->inp_option_lst, "XkbModel", NULL);
             from = X_CONFIG;
           }
 #endif
-        if (s)
-	  {
+        if (s) {
 	    g_winInfo.xkb.model = NULL_IF_EMPTY (s);
 	    winMsg (from, "XKB: model: \"%s\"\n", s);
 	  }
 
         s = NULL;
-        if (g_cmdline.xkbLayout)
-          {
+        if (g_cmdline.xkbLayout) {
             s = g_cmdline.xkbLayout;
             from = X_CMDLINE;
           }
 #ifdef XWIN_XF86CONFIG
-        else
-          {
+        else {
             s = winSetStrOption (kbd->inp_option_lst, "XkbLayout", NULL);
             from = X_CONFIG;
           }
 #endif
-        if (s)
-          {
+        if (s) {
 	    g_winInfo.xkb.layout = NULL_IF_EMPTY (s);
 	    winMsg (from, "XKB: layout: \"%s\"\n", s);
 	  }
 
         s = NULL;
-        if (g_cmdline.xkbVariant)
-          {
+        if (g_cmdline.xkbVariant) {
             s = g_cmdline.xkbVariant;
             from = X_CMDLINE;
           }
 #ifdef XWIN_XF86CONFIG
-        else
-          {
+        else {
             s = winSetStrOption (kbd->inp_option_lst, "XkbVariant", NULL);
             from = X_CONFIG;
           }
 #endif
-	if (s)
-	  {
+        if (s) {
 	    g_winInfo.xkb.variant = NULL_IF_EMPTY (s);
 	    winMsg (from, "XKB: variant: \"%s\"\n", s);
 	  }
 
         s = NULL;
-        if (g_cmdline.xkbOptions)
-          {
+        if (g_cmdline.xkbOptions) {
             s = g_cmdline.xkbOptions;
             from = X_CMDLINE;
           }
 #ifdef XWIN_XF86CONFIG
-        else
-          {
+        else {
             s = winSetStrOption (kbd->inp_option_lst, "XkbOptions", NULL);
             from = X_CONFIG;
           }
 #endif
-        if (s)
-	  {
+        if (s) {
 	    g_winInfo.xkb.options = NULL_IF_EMPTY (s);
 	    winMsg (from, "XKB: options: \"%s\"\n", s);
 	  }
@@ -517,7 +485,6 @@ winConfigKeyboard (DeviceIntPtr pDevice)
   return TRUE;
 }
 
-
 #ifdef XWIN_XF86CONFIG
 Bool
 winConfigMouse (DeviceIntPtr pDevice)
@@ -533,10 +500,8 @@ winConfigMouse (DeviceIntPtr pDevice)
   if (g_xf86configptr != NULL)
     input_list = g_xf86configptr->conf_input_lst;
 
-  while (input_list != NULL)
-    {
-      if (winNameCompare (input_list->inp_driver, "mouse") == 0)
-	{
+    while (input_list != NULL) {
+        if (winNameCompare(input_list->inp_driver, "mouse") == 0) {
 	  /* Check if device name matches requested name */
 	  if (g_cmdline.mouse && winNameCompare (input_list->inp_identifier,
 						 g_cmdline.mouse))
@@ -546,8 +511,7 @@ winConfigMouse (DeviceIntPtr pDevice)
       input_list = input_list->list.next;
     }
 
-  if (mouse != NULL)
-    {
+    if (mouse != NULL) {
       if (mouse->inp_identifier)
 	winMsg (mousefrom, "Using pointer \"%s\" as primary pointer\n",
 		mouse->inp_identifier);
@@ -562,8 +526,7 @@ winConfigMouse (DeviceIntPtr pDevice)
       if (g_cmdline.emulate3timeout)
 	g_winInfo.pointer.emulate3Timeout = g_cmdline.emulate3timeout;
     }
-  else
-    {
+    else {
       winMsg (X_ERROR, "No primary pointer configured\n");
       winMsg (X_DEFAULT, "Using compiletime defaults for pointer\n");
     }
@@ -571,7 +534,6 @@ winConfigMouse (DeviceIntPtr pDevice)
   return TRUE;
 }
 
-
 Bool
 winConfigFiles ()
 {
@@ -579,22 +541,18 @@ winConfigFiles ()
   XF86ConfFilesPtr filesptr = NULL;
 
   /* set some shortcuts */
-  if (g_xf86configptr != NULL)
-    {
+    if (g_xf86configptr != NULL) {
       filesptr = g_xf86configptr->conf_files;
     }
 
-
   /* Fontpath */
   from = X_DEFAULT;
 
-  if (g_cmdline.fontPath)
-    {
+    if (g_cmdline.fontPath) {
       from = X_CMDLINE;
       defaultFontPath = g_cmdline.fontPath;
     }
-  else if (filesptr != NULL && filesptr->file_fontpath)
-    {
+    else if (filesptr != NULL && filesptr->file_fontpath) {
       from = X_CONFIG;
       defaultFontPath = strdup (filesptr->file_fontpath);
     }
@@ -607,8 +565,7 @@ Bool
 winConfigFiles (void)
 {
   /* Fontpath */
-  if (g_cmdline.fontPath)
-    {
+    if (g_cmdline.fontPath) {
       defaultFontPath = g_cmdline.fontPath;
       winMsg (X_CMDLINE, "FontPath set to \"%s\"\n", defaultFontPath);
     }
@@ -617,21 +574,18 @@ winConfigFiles (void)
 }
 #endif
 
-
 Bool
 winConfigOptions (void)
 {
   return TRUE;
 }
 
-
 Bool
 winConfigScreens (void)
 {
   return TRUE;
 }
 
-
 #ifdef XWIN_XF86CONFIG
 char *
 winSetStrOption (pointer optlist, const char *name, char *deflt)
@@ -648,7 +602,6 @@ winSetStrOption (pointer optlist, const char *name, char *deflt)
     return NULL;
 }
 
-
 int
 winSetBoolOption (pointer optlist, const char *name, int deflt)
 {
@@ -661,7 +614,6 @@ winSetBoolOption (pointer optlist, const char *name, int deflt)
   return deflt;
 }
 
-
 int
 winSetIntOption (pointer optlist, const char *name, int deflt)
 {
@@ -674,7 +626,6 @@ winSetIntOption (pointer optlist, const char *name, int deflt)
   return deflt;
 }
 
-
 double
 winSetRealOption (pointer optlist, const char *name, double deflt)
 {
@@ -700,7 +651,6 @@ winSetPercentOption (pointer optlist, const char *name, double deflt)
 }
 #endif
 
-
 /*
  * Compare two strings for equality. This is caseinsensitive  and
  * The characters '_', ' ' (space) and '\t' (tab) are treated as 
@@ -712,8 +662,7 @@ winNameCompare (const char *s1, const char *s2)
 {
   char c1, c2;
 
-  if (!s1 || *s1 == 0)
-    {
+    if (!s1 || *s1 == 0) {
       if (!s2 || *s2 == 0)
 	return 0;
       else
@@ -728,8 +677,7 @@ winNameCompare (const char *s1, const char *s2)
   c1 = (isupper ((int)*s1) ? tolower ((int)*s1) : *s1);
   c2 = (isupper ((int)*s2) ? tolower ((int)*s2) : *s2);
 
-  while (c1 == c2)
-    {
+    while (c1 == c2) {
       if (c1 == 0)
 	return 0;
       s1++;
@@ -746,7 +694,6 @@ winNameCompare (const char *s1, const char *s2)
   return c1 - c2;
 }
 
-
 #ifdef XWIN_XF86CONFIG
 /*
  * Find the named option in the list. 
@@ -756,8 +703,7 @@ winNameCompare (const char *s1, const char *s2)
 XF86OptionPtr
 winFindOption (XF86OptionPtr list, const char *name)
 {
-  while (list)
-    {
+    while (list) {
       if (winNameCompare (list->opt_name, name) == 0)
 	return list;
       list = list->list.next;
@@ -765,7 +711,6 @@ winFindOption (XF86OptionPtr list, const char *name)
   return NULL;
 }
 
-
 /*
  * Find the Value of an named option.
  * @return The option value or NULL if not found.
@@ -775,8 +720,7 @@ char *
 winFindOptionValue (XF86OptionPtr list, const char *name)
 {
   list = winFindOption (list, name);
-  if (list)
-    {
+    if (list) {
       if (list->opt_val)
 	return list->opt_val;
       else
@@ -785,7 +729,6 @@ winFindOptionValue (XF86OptionPtr list, const char *name)
   return NULL;
 }
 
-
 /*
  * Parse the option.
  */
@@ -795,27 +738,20 @@ ParseOptionValue (int scrnIndex, pointer options, OptionInfoPtr p)
 {
   char *s, *end;
 
-  if ((s = winFindOptionValue (options, p->name)) != NULL)
-    {
-      switch (p->type)
-	{
+    if ((s = winFindOptionValue(options, p->name)) != NULL) {
+        switch (p->type) {
 	case OPTV_INTEGER:
-	  if (*s == '\0')
-	    {
+            if (*s == '\0') {
 	      winDrvMsg (scrnIndex, X_WARNING,
-			 "Option \"%s\" requires an integer value\n",
-			 p->name);
+                          "Option \"%s\" requires an integer value\n", p->name);
 	      p->found = FALSE;
 	    }
-	  else
-	    {
+            else {
 	      p->value.num = strtoul (s, &end, 0);
-	      if (*end == '\0')
-		{
+                if (*end == '\0') {
 		  p->found = TRUE;
 		}
-	      else
-		{
+                else {
 		  winDrvMsg (scrnIndex, X_WARNING,
 			     "Option \"%s\" requires an integer value\n",
 			     p->name);
@@ -824,14 +760,12 @@ ParseOptionValue (int scrnIndex, pointer options, OptionInfoPtr p)
 	    }
 	  break;
 	case OPTV_STRING:
-	  if (*s == '\0')
-	    {
+            if (*s == '\0') {
 	      winDrvMsg (scrnIndex, X_WARNING,
 			 "Option \"%s\" requires an string value\n", p->name);
 	      p->found = FALSE;
 	    }
-	  else
-	    {
+            else {
 	      p->value.str = s;
 	      p->found = TRUE;
 	    }
@@ -841,22 +775,18 @@ ParseOptionValue (int scrnIndex, pointer options, OptionInfoPtr p)
 	  p->found = TRUE;
 	  break;
 	case OPTV_REAL:
-	  if (*s == '\0')
-	    {
+            if (*s == '\0') {
 	      winDrvMsg (scrnIndex, X_WARNING,
 			 "Option \"%s\" requires a floating point value\n",
 			 p->name);
 	      p->found = FALSE;
 	    }
-	  else
-	    {
+            else {
 	      p->value.realnum = strtod (s, &end);
-	      if (*end == '\0')
-		{
+                if (*end == '\0') {
 		  p->found = TRUE;
 		}
-	      else
-		{
+                else {
 		  winDrvMsg (scrnIndex, X_WARNING,
 			     "Option \"%s\" requires a floating point value\n",
 			     p->name);
@@ -865,36 +795,29 @@ ParseOptionValue (int scrnIndex, pointer options, OptionInfoPtr p)
 	    }
 	  break;
 	case OPTV_BOOLEAN:
-	  if (GetBoolValue (p, s))
-	    {
+            if (GetBoolValue(p, s)) {
 	      p->found = TRUE;
 	    }
-	  else
-	    {
+            else {
 	      winDrvMsg (scrnIndex, X_WARNING,
 			 "Option \"%s\" requires a boolean value\n", p->name);
 	      p->found = FALSE;
 	    }
 	  break;
 	case OPTV_PERCENT:
-	  if (*s == '\0')
-	    {
+            if (*s == '\0') {
 	      winDrvMsg (scrnIndex, X_WARNING,
-			 "Option \"%s\" requires a percent value\n",
-			 p->name);
+                          "Option \"%s\" requires a percent value\n", p->name);
 	      p->found = FALSE;
 	    }
-	  else
-	    {
+            else {
 	       double percent = strtod (s, &end);
 
-	       if (end != s && winNameCompare (end, "%"))
-		 {
+                if (end != s && winNameCompare(end, "%")) {
 		   p->found = TRUE;
 		   p->value.realnum = percent;
 		 }
-	       else
-		 {
+                else {
 		   winDrvMsg (scrnIndex, X_WARNING,
 			      "Option \"%s\" requires a frequency value\n",
 			       p->name);
@@ -902,20 +825,17 @@ ParseOptionValue (int scrnIndex, pointer options, OptionInfoPtr p)
 		 }
 	    }
 	case OPTV_FREQ:
-	  if (*s == '\0')
-	    {
+            if (*s == '\0') {
 	      winDrvMsg (scrnIndex, X_WARNING,
 			 "Option \"%s\" requires a frequency value\n",
 			 p->name);
 	      p->found = FALSE;
 	    }
-	  else
-	    {
+            else {
 	      double freq = strtod (s, &end);
 	      int units = 0;
 
-	      if (end != s)
-		{
+                if (end != s) {
 		  p->found = TRUE;
 		  if (!winNameCompare (end, "Hz"))
 		    units = 1;
@@ -925,8 +845,7 @@ ParseOptionValue (int scrnIndex, pointer options, OptionInfoPtr p)
 		  else if (!winNameCompare (end, "MHz") ||
 			   !winNameCompare (end, "M"))
 		    units = 1000000;
-		  else
-		    {
+                    else {
 		      winDrvMsg (scrnIndex, X_WARNING,
 				 "Option \"%s\" requires a frequency value\n",
 				 p->name);
@@ -935,15 +854,13 @@ ParseOptionValue (int scrnIndex, pointer options, OptionInfoPtr p)
 		  if (p->found)
 		    freq *= (double) units;
 		}
-	      else
-		{
+                else {
 		  winDrvMsg (scrnIndex, X_WARNING,
 			     "Option \"%s\" requires a frequency value\n",
 			     p->name);
 		  p->found = FALSE;
 		}
-	      if (p->found)
-		{
+                if (p->found) {
 		  p->value.freq.freq = freq;
 		  p->value.freq.units = units;
 		}
@@ -954,38 +871,31 @@ ParseOptionValue (int scrnIndex, pointer options, OptionInfoPtr p)
 	  p->found = FALSE;
 	  break;
 	}
-      if (p->found)
-	{
+        if (p->found) {
 	  winDrvMsgVerb (scrnIndex, X_CONFIG, 2, "Option \"%s\"", p->name);
-	  if (!(p->type == OPTV_BOOLEAN && *s == 0))
-	    {
+            if (!(p->type == OPTV_BOOLEAN && *s == 0)) {
 	      winErrorFVerb (2, " \"%s\"", s);
 	    }
 	  winErrorFVerb (2, "\n");
 	}
     }
-  else if (p->type == OPTV_BOOLEAN)
-    {
+    else if (p->type == OPTV_BOOLEAN) {
       /* Look for matches with options with or without a "No" prefix. */
       char *n, *newn;
       OptionInfoRec opt;
 
       n = winNormalizeName (p->name);
-      if (!n)
-	{
+        if (!n) {
 	  p->found = FALSE;
 	  return FALSE;
 	}
-      if (strncmp (n, "no", 2) == 0)
-	{
+        if (strncmp(n, "no", 2) == 0) {
 	  newn = n + 2;
 	}
-      else
-	{
+        else {
 	  free (n);
 	  n = malloc (strlen (p->name) + 2 + 1);
-	  if (!n)
-	    {
+            if (!n) {
 	      p->found = FALSE;
 	      return FALSE;
 	    }
@@ -993,43 +903,35 @@ ParseOptionValue (int scrnIndex, pointer options, OptionInfoPtr p)
 	  strcat (n, p->name);
 	  newn = n;
 	}
-      if ((s = winFindOptionValue (options, newn)) != NULL)
-	{
-	  if (GetBoolValue (&opt, s))
-	    {
+        if ((s = winFindOptionValue(options, newn)) != NULL) {
+            if (GetBoolValue(&opt, s)) {
 	      p->value.bool = !opt.value.bool;
 	      p->found = TRUE;
 	    }
-	  else
-	    {
+            else {
 	      winDrvMsg (scrnIndex, X_WARNING,
 			 "Option \"%s\" requires a boolean value\n", newn);
 	      p->found = FALSE;
 	    }
 	}
-      else
-	{
+        else {
 	  p->found = FALSE;
 	}
-      if (p->found)
-	{
+        if (p->found) {
 	  winDrvMsgVerb (scrnIndex, X_CONFIG, 2, "Option \"%s\"", newn);
-	  if (*s != 0)
-	    {
+            if (*s != 0) {
 	      winErrorFVerb (2, " \"%s\"", s);
 	    }
 	  winErrorFVerb (2, "\n");
 	}
       free (n);
     }
-  else
-    {
+    else {
       p->found = FALSE;
     }
   return p->found;
 }
 
-
 static Bool
 configLayout (serverLayoutPtr servlayoutp, XF86ConfLayoutPtr conf_layout,
 	      char *default_layout)
@@ -1040,10 +942,8 @@ configLayout (serverLayoutPtr servlayoutp, XF86ConfLayoutPtr conf_layout,
   return TRUE;
 }
 
-
 static Bool
-configImpliedLayout (serverLayoutPtr servlayoutp,
-		     XF86ConfScreenPtr conf_screen)
+configImpliedLayout(serverLayoutPtr servlayoutp, XF86ConfScreenPtr conf_screen)
 {
 #if 0
 #pragma warn UNIMPLEMENTED
@@ -1051,16 +951,13 @@ configImpliedLayout (serverLayoutPtr servlayoutp,
   return TRUE;
 }
 
-
 static Bool
 GetBoolValue (OptionInfoPtr p, const char *s)
 {
-  if (*s == 0)
-    {
+    if (*s == 0) {
       p->value.bool = TRUE;
     }
-  else
-    {
+    else {
       if (winNameCompare (s, "1") == 0)
 	p->value.bool = TRUE;
       else if (winNameCompare (s, "on") == 0)
@@ -1082,7 +979,6 @@ GetBoolValue (OptionInfoPtr p, const char *s)
 }
 #endif
 
-
 char *
 winNormalizeName (const char *s)
 {
@@ -1093,10 +989,8 @@ winNormalizeName (const char *s)
     return NULL;
 
   ret = malloc (strlen (s) + 1);
-  for (p = s, q = ret; *p != 0; p++)
-    {
-      switch (*p)
-	{
+    for (p = s, q = ret; *p != 0; p++) {
+        switch (*p) {
 	case '_':
 	case ' ':
 	case '\t':
@@ -1111,4 +1005,3 @@ winNormalizeName (const char *s)
   *q = '\0';
   return ret;
 }
-
