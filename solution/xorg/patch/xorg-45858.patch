diff --git a/hw/xfree86/common/xf86pciBus.c b/hw/xfree86/common/xf86pciBus.c
index 3935c5c..0317882 100644
--- a/hw/xfree86/common/xf86pciBus.c
+++ b/hw/xfree86/common/xf86pciBus.c
@@ -232,92 +232,6 @@ xf86PciProbe(void)
     }
 }
 
-void
-initPciState(void)
-{
-    unsigned i;
-    pciAccPtr pcaccp;
-
-    if (xf86PciVideoInfo == NULL) {
-	return;
-    }
-
-    for (i = 0 ; xf86PciVideoInfo[i] != NULL ; i++) {
-	struct pci_device * const pvp = xf86PciVideoInfo[i];
-
-	if (pvp->user_data == 0) {
-	    pcaccp = xnfalloc( sizeof( pciAccRec ) );
-	    pvp->user_data = (intptr_t) pcaccp;
-
-	    pcaccp->arg.dev = pvp;
-	    pcaccp->ctrl = PCISHAREDIOCLASSES(pvp->device_class);
-
-	    pcaccp->arg.ctrl = pcaccp->save.command;
-	}
-    }
-}
-
-/*
- * initPciBusState() - fill out the BusAccRec for a PCI bus.
- * Theory: each bus is associated with one bridge connecting it
- * to its parent bus. The address of a bridge is therefore stored
- * in the BusAccRec of the bus it connects to. Each bus can
- * have several bridges connecting secondary buses to it. Only one
- * of these bridges can be open. Therefore the status of a bridge
- * associated with a bus is stored in the BusAccRec of the parent
- * the bridge connects to. The first member of the structure is
- * a pointer to a function that open access to this bus. This function
- * receives a pointer to the structure itself as argument. This
- * design should be common to BusAccRecs of any type of buses we
- * support. The remeinder of the structure is bus type specific.
- * In this case it contains a pointer to the structure of the
- * parent bus. Thus enabling access to a specific bus is simple:
- * 1. Close any bridge going to secondary buses.
- * 2. Climb down the ladder and enable any bridge on buses
- *    on the path from the CPU to this bus.
- */
- 
-void
-initPciBusState(void)
-{
-    static const struct pci_id_match bridge_match = {
-	PCI_MATCH_ANY, PCI_MATCH_ANY, PCI_MATCH_ANY, PCI_MATCH_ANY,
-	(PCI_CLASS_BRIDGE << 16), 0x0000ff0000, 0
-    };
-    struct pci_device *dev;
-    struct pci_device_iterator *iter;
-    BusAccPtr pbap;
-
-    iter = pci_id_match_iterator_create(& bridge_match);
-    while((dev = pci_device_next(iter)) != NULL) {
-	const uint8_t subclass = (dev->device_class >> 8) & 0x0ff;
-	int primary;
-	int secondary;
-	int subordinate;
-
-	pci_device_get_bridge_buses(dev, &primary, &secondary, &subordinate);
-
-	pbap = xnfcalloc(1,sizeof(BusAccRec));
-	pbap->busdep.pci.bus = secondary;
-	pbap->busdep.pci.primary_bus = primary;
-	pbap->busdep_type = BUS_PCI;
-	pbap->busdep.pci.dev = dev;
-
-	switch (subclass) {
-	case PCI_SUBCLASS_BRIDGE_HOST:
-	    pbap->type = BUS_PCI;
-	    break;
-	case PCI_SUBCLASS_BRIDGE_PCI:
-	case PCI_SUBCLASS_BRIDGE_CARDBUS:
-	    pbap->type = BUS_PCI;
-	    break;
-	}
-    }
-
-    pci_iterator_destroy(iter);
-
-}
-
 /*
  * If the slot requested is already in use, return -1.
  * Otherwise, claim the slot for the screen requesting it.
