diff --git a/dix/dixfonts.c b/dix/dixfonts.c
index a09626f..006d514 100644
--- a/dix/dixfonts.c
+++ b/dix/dixfonts.c
@@ -1,4 +1,4 @@
-/* $XdotOrg$ */
+/* $XdotOrg: xc/programs/Xserver/dix/dixfonts.c,v 1.2 2004/04/23 19:04:44 eich Exp $ */
 /* $XFree86: xc/programs/Xserver/dix/dixfonts.c,v 3.28 2003/11/08 02:02:03 dawes Exp $ */
 /************************************************************************
 Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts.
@@ -123,8 +123,7 @@ FontToXError(err)
  * adding RT_FONT prevents conflict with default cursor font
  */
 Bool
-SetDefaultFont(defaultfontname)
-    char       *defaultfontname;
+SetDefaultFont(char *defaultfontname)
 {
     int         err;
     FontPtr     pf;
@@ -152,8 +151,7 @@ SetDefaultFont(defaultfontname)
  * freed data.
  */
 void
-QueueFontWakeup(fpe)
-    FontPathElementPtr fpe;
+QueueFontWakeup(FontPathElementPtr fpe)
 {
     int         i;
     FontPathElementPtr *new;
@@ -182,8 +180,7 @@ QueueFontWakeup(fpe)
 }
 
 void
-RemoveFontWakeup(fpe)
-    FontPathElementPtr fpe;
+RemoveFontWakeup(FontPathElementPtr fpe)
 {
     int         i,
                 j;
@@ -199,12 +196,8 @@ RemoveFontWakeup(fpe)
     }
 }
 
-/* ARGSUSED */
 void
-FontWakeup(data, count, LastSelectMask)
-    pointer     data;
-    int		count;
-    pointer     LastSelectMask;
+FontWakeup(pointer data, int count, pointer LastSelectMask)
 {
     int         i;
     FontPathElementPtr fpe;
@@ -381,12 +374,7 @@ bail:
 }
 
 int
-OpenFont(client, fid, flags, lenfname, pfontname)
-    ClientPtr   client;
-    XID         fid;
-    Mask        flags;
-    unsigned    lenfname;
-    char       *pfontname;
+OpenFont(ClientPtr client, XID fid, Mask flags, unsigned lenfname, char *pfontname)
 {
     OFclosurePtr c;
     int         i;
@@ -470,14 +458,13 @@ OpenFont(client, fid, flags, lenfname, pfontname)
     return Success;
 }
 
-/*
+/**
  * Decrement font's ref count, and free storage if ref count equals zero
+ *
+ *  \param value must conform to DeleteType
  */
-/*ARGSUSED*/
 int
-CloseFont(value, fid)
-    pointer	value;  /* must conform to DeleteType */
-    XID		fid;
+CloseFont(pointer value, XID fid)
 {
     int         nscr;
     ScreenPtr   pscr;
@@ -516,16 +503,14 @@ CloseFont(value, fid)
 
 /***====================================================================***/
 
- /*
-  * \ Sets up pReply as the correct QueryFontReply for pFont with the first
-  * nProtoCCIStructs char infos. \
+/**
+ * Sets up pReply as the correct QueryFontReply for pFont with the first
+ * nProtoCCIStructs char infos.
+ *
+ *  \param pReply caller must allocate this storage
   */
-
 void
-QueryFont(pFont, pReply, nProtoCCIStructs)
-    FontPtr          pFont;
-    xQueryFontReply *pReply;	/* caller must allocate this storage */
-    int              nProtoCCIStructs;
+QueryFont(FontPtr pFont, xQueryFontReply *pReply, int nProtoCCIStructs)
 {
     FontPropPtr      pFP;
     int              r,
@@ -843,11 +828,8 @@ bail:
 }
 
 int
-ListFonts(client, pattern, length, max_names)
-    ClientPtr   client;
-    unsigned char *pattern;
-    unsigned int length;
-    unsigned int max_names;
+ListFonts(ClientPtr client, unsigned char *pattern, unsigned length, 
+          unsigned max_names)
 {
     int         i;
     LFclosurePtr c;
@@ -896,9 +878,7 @@ ListFonts(client, pattern, length, max_names)
 }
 
 int
-doListFontsWithInfo(client, c)
-    ClientPtr   client;
-    LFWIclosurePtr c;
+doListFontsWithInfo(ClientPtr client, LFWIclosurePtr c)
 {
     FontPathElementPtr fpe;
     int         err = Successful;
@@ -1120,11 +1100,8 @@ bail:
 }
 
 int
-StartListFontsWithInfo(client, length, pattern, max_names)
-    ClientPtr   client;
-    int         length;
-    unsigned char       *pattern;
-    int         max_names;
+StartListFontsWithInfo(ClientPtr client, int length, unsigned char *pattern, 
+                       int max_names)
 {
     int		    i;
     LFWIclosurePtr  c;
@@ -1178,9 +1155,7 @@ static XID clearGC[] = { CT_NONE };
 #define clearGCmask (GCClipMask)
 
 int
-doPolyText(client, c)
-    ClientPtr   client;
-    register PTclosurePtr c;
+doPolyText(ClientPtr client, register PTclosurePtr c)
 {
     register FontPtr pFont = c->pGC->font, oldpFont;
     Font	fid, oldfid;
@@ -1447,16 +1422,8 @@ bail:
 }
 
 int
-PolyText(client, pDraw, pGC, pElt, endReq, xorg, yorg, reqType, did)
-    ClientPtr client;
-    DrawablePtr pDraw;
-    GC *pGC;
-    unsigned char *pElt;
-    unsigned char *endReq;
-    int xorg;
-    int yorg;
-    int reqType;
-    XID did;
+PolyText(ClientPtr client, DrawablePtr pDraw, GC *pGC, unsigned char *pElt, 
+         unsigned char *endReq, int xorg, int yorg, int reqType, XID did)
 {
     PTclosureRec local_closure;
 
@@ -1490,9 +1457,7 @@ PolyText(client, pDraw, pGC, pElt, endReq, xorg, yorg, reqType, did)
 #undef FontShiftSize
 
 int
-doImageText(client, c)
-    ClientPtr   client;
-    register ITclosurePtr c;
+doImageText(ClientPtr client, register ITclosurePtr c)
 {
     int err = Success, lgerr;	/* err is in X error, not font error, space */
     FontPathElementPtr fpe;
@@ -1613,16 +1578,8 @@ bail:
 }
 
 int
-ImageText(client, pDraw, pGC, nChars, data, xorg, yorg, reqType, did)
-    ClientPtr client;
-    DrawablePtr pDraw;
-    GC *pGC;
-    int nChars;
-    unsigned char *data;
-    int xorg;
-    int yorg;
-    int reqType;
-    XID did;
+ImageText(ClientPtr client, DrawablePtr pDraw, GC *pGC, int nChars, 
+          unsigned char *data, int xorg, int yorg, int reqType, XID did)
 {
     ITclosureRec local_closure;
 
@@ -1822,11 +1779,7 @@ bail:
 
 /* XXX -- do we need to pass error down to each renderer? */
 int
-SetFontPath(client, npaths, paths, error)
-    ClientPtr   client;
-    int         npaths;
-    unsigned char *paths;
-    int        *error;
+SetFontPath(ClientPtr client, int npaths, unsigned char *paths, int *error)
 {
     int   err = Success;
 
@@ -1840,8 +1793,7 @@ SetFontPath(client, npaths, paths, error)
 }
 
 int
-SetDefaultFontPath(path)
-    char       *path;
+SetDefaultFontPath(char *path)
 {
     unsigned char *cp,
                *pp,
@@ -1882,9 +1834,7 @@ SetDefaultFontPath(path)
 }
 
 unsigned char *
-GetFontPath(count, length)
-    int			*count;
-    int			*length;
+GetFontPath(int *count, int *length)
 {
     int			i;
     unsigned char       *c;
@@ -1914,12 +1864,7 @@ GetFontPath(count, length)
 }
 
 int
-LoadGlyphs(client, pfont, nchars, item_size, data)
-    ClientPtr   client;
-    FontPtr     pfont;
-    unsigned    nchars;
-    int         item_size;
-    unsigned char *data;
+LoadGlyphs(ClientPtr client, FontPtr pfont, unsigned nchars, int item_size, unsigned char *data)
 {
     if (fpe_functions[pfont->fpe->type].load_glyphs)
 	return (*fpe_functions[pfont->fpe->type].load_glyphs)
@@ -1929,8 +1874,7 @@ LoadGlyphs(client, pfont, nchars, item_size, data)
 }
 
 void
-DeleteClientFontStuff(client)
-    ClientPtr	client;
+DeleteClientFontStuff(ClientPtr client)
 {
     int			i;
     FontPathElementPtr	fpe;
@@ -1974,8 +1918,7 @@ GetDefaultPointSize ()
 
 
 FontResolutionPtr
-GetClientResolutions (num)
-    int        *num;
+GetClientResolutions (int *num)
 {
     if (requestingClient && requestingClient->fontResFunc != NULL &&
 	!requestingClient->clientGone)
@@ -2080,8 +2023,7 @@ FreeFonts()
 /* convenience functions for FS interface */
 
 FontPtr
-find_old_font(id)
-    XID         id;
+find_old_font(XID id)
 {
     return (FontPtr) SecurityLookupIDByType(NullClient, id, RT_NONE,
 					    SecurityUnknownAccess);
@@ -2094,23 +2036,19 @@ GetNewFontClientID()
 }
 
 int
-StoreFontClientFont(pfont, id)
-    FontPtr     pfont;
-    Font        id;
+StoreFontClientFont(FontPtr pfont, Font id)
 {
     return AddResource(id, RT_NONE, (pointer) pfont);
 }
 
 void
-DeleteFontClientID(id)
-    Font        id;
+DeleteFontClientID(Font id)
 {
     FreeResource(id, RT_NONE);
 }
 
 int
-client_auth_generation(client)
-    ClientPtr client;
+client_auth_generation(ClientPtr client)
 {
     return 0;
 }
@@ -2119,9 +2057,7 @@ static int  fs_handlers_installed = 0;
 static unsigned int last_server_gen;
 
 int
-init_fs_handlers(fpe, block_handler)
-    FontPathElementPtr fpe;
-    BlockHandlerProcPtr block_handler;
+init_fs_handlers(FontPathElementPtr fpe, BlockHandlerProcPtr block_handler)
 {
     /* if server has reset, make sure the b&w handlers are reinstalled */
     if (last_server_gen < serverGeneration) {
@@ -2144,10 +2080,7 @@ init_fs_handlers(fpe, block_handler)
 }
 
 void
-remove_fs_handlers(fpe, block_handler, all)
-    FontPathElementPtr fpe;
-    BlockHandlerProcPtr block_handler;
-    Bool        all;
+remove_fs_handlers(FontPathElementPtr fpe, BlockHandlerProcPtr block_handler, Bool all)
 {
     if (all) {
 	/* remove the handlers if no one else is using them */
@@ -2175,8 +2108,8 @@ remove_fs_handlers(fpe, block_handler, all)
 #define GLYPH_SIZE(ch, nbytes)          \
 	GLWIDTHBYTESPADDED((ch)->metrics.rightSideBearing - \
 			(ch)->metrics.leftSideBearing, (nbytes))
-dump_char_ascii(cip)
-    CharInfoPtr cip;
+void
+dump_char_ascii(CharInfoPtr cip)
 {
     int         r,
                 l;
