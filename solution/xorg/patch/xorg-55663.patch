diff --git a/hw/xfree86/x86emu/ops.c b/hw/xfree86/x86emu/ops.c
index 5d3cac1..76b8358 100644
--- a/hw/xfree86/x86emu/ops.c
+++ b/hw/xfree86/x86emu/ops.c
@@ -81,8 +81,8 @@ op1 - Instruction op code
 REMARKS:
 Handles illegal opcodes.
 ****************************************************************************/
-static void x86emuOp_illegal_op(
-    u8 op1)
+static void
+x86emuOp_illegal_op(u8 op1)
 {
     START_OF_INSTR();
     if (M.x86.R_SP != 0) {
@@ -108,7 +108,8 @@ static void x86emuOp_illegal_op(
 REMARKS:
 Handles opcode 0x00
 ****************************************************************************/
-static void x86emuOp_add_byte_RM_R(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_add_byte_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -166,7 +167,8 @@ static void x86emuOp_add_byte_RM_R(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x01
 ****************************************************************************/
-static void x86emuOp_add_word_RM_R(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_add_word_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -188,7 +190,8 @@ static void x86emuOp_add_word_RM_R(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = add_long(destval, *srcreg);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
             u16 *srcreg;
 
@@ -215,7 +218,8 @@ static void x86emuOp_add_word_RM_R(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = add_long(destval, *srcreg);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
             u16 *srcreg;
 
@@ -242,7 +246,8 @@ static void x86emuOp_add_word_RM_R(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = add_long(destval, *srcreg);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
             u16 *srcreg;
 
@@ -266,7 +271,8 @@ static void x86emuOp_add_word_RM_R(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = add_long(*destreg, *srcreg);
-        } else {
+        }
+        else {
             u16 *destreg,*srcreg;
 
             destreg = DECODE_RM_WORD_REGISTER(rl);
@@ -286,7 +292,8 @@ static void x86emuOp_add_word_RM_R(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x02
 ****************************************************************************/
-static void x86emuOp_add_byte_R_RM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_add_byte_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -341,7 +348,8 @@ static void x86emuOp_add_byte_R_RM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x03
 ****************************************************************************/
-static void x86emuOp_add_word_R_RM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_add_word_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -362,7 +370,8 @@ static void x86emuOp_add_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = add_long(*destreg, srcval);
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
 
@@ -387,7 +396,8 @@ static void x86emuOp_add_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = add_long(*destreg, srcval);
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
 
@@ -412,7 +422,8 @@ static void x86emuOp_add_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = add_long(*destreg, srcval);
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
 
@@ -435,7 +446,8 @@ static void x86emuOp_add_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = add_long(*destreg, *srcreg);
-        } else {
+        }
+        else {
             u16 *destreg,*srcreg;
 
             destreg = DECODE_RM_WORD_REGISTER(rh);
@@ -455,7 +467,8 @@ static void x86emuOp_add_word_R_RM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x04
 ****************************************************************************/
-static void x86emuOp_add_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_add_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 srcval;
 
@@ -473,7 +486,8 @@ static void x86emuOp_add_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x05
 ****************************************************************************/
-static void x86emuOp_add_word_AX_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_add_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -481,7 +495,8 @@ static void x86emuOp_add_word_AX_IMM(u8 X86EMU_UNUSED(op1))
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("ADD\tEAX,");
         srcval = fetch_long_imm();
-    } else {
+    }
+    else {
         DECODE_PRINTF("ADD\tAX,");
         srcval = fetch_word_imm();
     }
@@ -489,7 +504,8 @@ static void x86emuOp_add_word_AX_IMM(u8 X86EMU_UNUSED(op1))
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EAX = add_long(M.x86.R_EAX, srcval);
-    } else {
+    }
+    else {
         M.x86.R_AX = add_word(M.x86.R_AX, (u16)srcval);
     }
     DECODE_CLEAR_SEGOVR();
@@ -500,7 +516,8 @@ static void x86emuOp_add_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x06
 ****************************************************************************/
-static void x86emuOp_push_ES(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_push_ES(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("PUSH\tES\n");
@@ -514,7 +531,8 @@ static void x86emuOp_push_ES(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x07
 ****************************************************************************/
-static void x86emuOp_pop_ES(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_pop_ES(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("POP\tES\n");
@@ -528,7 +546,8 @@ static void x86emuOp_pop_ES(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x08
 ****************************************************************************/
-static void x86emuOp_or_byte_RM_R(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_or_byte_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -586,7 +605,8 @@ static void x86emuOp_or_byte_RM_R(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x09
 ****************************************************************************/
-static void x86emuOp_or_word_RM_R(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_or_word_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -608,7 +628,8 @@ static void x86emuOp_or_word_RM_R(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = or_long(destval, *srcreg);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
             u16 *srcreg;
 
@@ -635,7 +656,8 @@ static void x86emuOp_or_word_RM_R(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = or_long(destval, *srcreg);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
             u16 *srcreg;
 
@@ -662,7 +684,8 @@ static void x86emuOp_or_word_RM_R(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = or_long(destval, *srcreg);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
             u16 *srcreg;
 
@@ -686,7 +709,8 @@ static void x86emuOp_or_word_RM_R(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = or_long(*destreg, *srcreg);
-        } else {
+        }
+        else {
             u16 *destreg,*srcreg;
 
             destreg = DECODE_RM_WORD_REGISTER(rl);
@@ -706,7 +730,8 @@ static void x86emuOp_or_word_RM_R(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x0a
 ****************************************************************************/
-static void x86emuOp_or_byte_R_RM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_or_byte_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -761,7 +786,8 @@ static void x86emuOp_or_byte_R_RM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x0b
 ****************************************************************************/
-static void x86emuOp_or_word_R_RM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_or_word_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -782,7 +808,8 @@ static void x86emuOp_or_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = or_long(*destreg, srcval);
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
 
@@ -807,7 +834,8 @@ static void x86emuOp_or_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = or_long(*destreg, srcval);
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
 
@@ -832,7 +860,8 @@ static void x86emuOp_or_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = or_long(*destreg, srcval);
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
 
@@ -855,7 +884,8 @@ static void x86emuOp_or_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = or_long(*destreg, *srcreg);
-        } else {
+        }
+        else {
             u16 *destreg,*srcreg;
 
             destreg = DECODE_RM_WORD_REGISTER(rh);
@@ -875,7 +905,8 @@ static void x86emuOp_or_word_R_RM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x0c
 ****************************************************************************/
-static void x86emuOp_or_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_or_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 srcval;
 
@@ -893,7 +924,8 @@ static void x86emuOp_or_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x0d
 ****************************************************************************/
-static void x86emuOp_or_word_AX_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_or_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -901,7 +933,8 @@ static void x86emuOp_or_word_AX_IMM(u8 X86EMU_UNUSED(op1))
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("OR\tEAX,");
         srcval = fetch_long_imm();
-    } else {
+    }
+    else {
         DECODE_PRINTF("OR\tAX,");
         srcval = fetch_word_imm();
     }
@@ -909,7 +942,8 @@ static void x86emuOp_or_word_AX_IMM(u8 X86EMU_UNUSED(op1))
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EAX = or_long(M.x86.R_EAX, srcval);
-    } else {
+    }
+    else {
         M.x86.R_AX = or_word(M.x86.R_AX, (u16)srcval);
     }
     DECODE_CLEAR_SEGOVR();
@@ -920,7 +954,8 @@ static void x86emuOp_or_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x0e
 ****************************************************************************/
-static void x86emuOp_push_CS(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_push_CS(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("PUSH\tCS\n");
@@ -934,9 +969,11 @@ static void x86emuOp_push_CS(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x0f. Escape for two-byte opcode (286 or better)
 ****************************************************************************/
-static void x86emuOp_two_byte(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_two_byte(u8 X86EMU_UNUSED(op1))
 {
     u8 op2 = (*sys_rdb)(((u32)M.x86.R_CS << 4) + (M.x86.R_IP++));
+
     INC_DECODED_INST_LEN(1);
     (*x86emu_optab2[op2])(op2);
 }
@@ -945,7 +982,8 @@ static void x86emuOp_two_byte(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x10
 ****************************************************************************/
-static void x86emuOp_adc_byte_RM_R(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_adc_byte_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -1003,7 +1041,8 @@ static void x86emuOp_adc_byte_RM_R(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x11
 ****************************************************************************/
-static void x86emuOp_adc_word_RM_R(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_adc_word_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -1025,7 +1064,8 @@ static void x86emuOp_adc_word_RM_R(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = adc_long(destval, *srcreg);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
             u16 *srcreg;
 
@@ -1052,7 +1092,8 @@ static void x86emuOp_adc_word_RM_R(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = adc_long(destval, *srcreg);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
             u16 *srcreg;
 
@@ -1079,7 +1120,8 @@ static void x86emuOp_adc_word_RM_R(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = adc_long(destval, *srcreg);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
             u16 *srcreg;
 
@@ -1103,7 +1145,8 @@ static void x86emuOp_adc_word_RM_R(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = adc_long(*destreg, *srcreg);
-        } else {
+        }
+        else {
             u16 *destreg,*srcreg;
 
             destreg = DECODE_RM_WORD_REGISTER(rl);
@@ -1123,7 +1166,8 @@ static void x86emuOp_adc_word_RM_R(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x12
 ****************************************************************************/
-static void x86emuOp_adc_byte_R_RM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_adc_byte_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -1178,7 +1222,8 @@ static void x86emuOp_adc_byte_R_RM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x13
 ****************************************************************************/
-static void x86emuOp_adc_word_R_RM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_adc_word_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -1199,7 +1244,8 @@ static void x86emuOp_adc_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = adc_long(*destreg, srcval);
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
 
@@ -1224,7 +1270,8 @@ static void x86emuOp_adc_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = adc_long(*destreg, srcval);
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
 
@@ -1249,7 +1296,8 @@ static void x86emuOp_adc_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = adc_long(*destreg, srcval);
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
 
@@ -1272,7 +1320,8 @@ static void x86emuOp_adc_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = adc_long(*destreg, *srcreg);
-        } else {
+        }
+        else {
             u16 *destreg,*srcreg;
 
             destreg = DECODE_RM_WORD_REGISTER(rh);
@@ -1292,7 +1341,8 @@ static void x86emuOp_adc_word_R_RM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x14
 ****************************************************************************/
-static void x86emuOp_adc_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_adc_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 srcval;
 
@@ -1310,7 +1360,8 @@ static void x86emuOp_adc_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x15
 ****************************************************************************/
-static void x86emuOp_adc_word_AX_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_adc_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -1318,7 +1369,8 @@ static void x86emuOp_adc_word_AX_IMM(u8 X86EMU_UNUSED(op1))
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("ADC\tEAX,");
         srcval = fetch_long_imm();
-    } else {
+    }
+    else {
         DECODE_PRINTF("ADC\tAX,");
         srcval = fetch_word_imm();
     }
@@ -1326,7 +1378,8 @@ static void x86emuOp_adc_word_AX_IMM(u8 X86EMU_UNUSED(op1))
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EAX = adc_long(M.x86.R_EAX, srcval);
-    } else {
+    }
+    else {
         M.x86.R_AX = adc_word(M.x86.R_AX, (u16)srcval);
     }
     DECODE_CLEAR_SEGOVR();
@@ -1337,7 +1390,8 @@ static void x86emuOp_adc_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x16
 ****************************************************************************/
-static void x86emuOp_push_SS(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_push_SS(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("PUSH\tSS\n");
@@ -1351,7 +1405,8 @@ static void x86emuOp_push_SS(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x17
 ****************************************************************************/
-static void x86emuOp_pop_SS(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_pop_SS(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("POP\tSS\n");
@@ -1365,7 +1420,8 @@ static void x86emuOp_pop_SS(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x18
 ****************************************************************************/
-static void x86emuOp_sbb_byte_RM_R(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_sbb_byte_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -1423,7 +1479,8 @@ static void x86emuOp_sbb_byte_RM_R(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x19
 ****************************************************************************/
-static void x86emuOp_sbb_word_RM_R(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_sbb_word_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -1445,7 +1502,8 @@ static void x86emuOp_sbb_word_RM_R(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = sbb_long(destval, *srcreg);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
             u16 *srcreg;
 
@@ -1472,7 +1530,8 @@ static void x86emuOp_sbb_word_RM_R(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = sbb_long(destval, *srcreg);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
             u16 *srcreg;
 
@@ -1499,7 +1558,8 @@ static void x86emuOp_sbb_word_RM_R(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = sbb_long(destval, *srcreg);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
             u16 *srcreg;
 
@@ -1523,7 +1583,8 @@ static void x86emuOp_sbb_word_RM_R(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = sbb_long(*destreg, *srcreg);
-        } else {
+        }
+        else {
             u16 *destreg,*srcreg;
 
             destreg = DECODE_RM_WORD_REGISTER(rl);
@@ -1543,7 +1604,8 @@ static void x86emuOp_sbb_word_RM_R(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x1a
 ****************************************************************************/
-static void x86emuOp_sbb_byte_R_RM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_sbb_byte_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -1598,7 +1660,8 @@ static void x86emuOp_sbb_byte_R_RM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x1b
 ****************************************************************************/
-static void x86emuOp_sbb_word_R_RM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_sbb_word_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -1619,7 +1682,8 @@ static void x86emuOp_sbb_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = sbb_long(*destreg, srcval);
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
 
@@ -1644,7 +1708,8 @@ static void x86emuOp_sbb_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = sbb_long(*destreg, srcval);
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
 
@@ -1669,7 +1734,8 @@ static void x86emuOp_sbb_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = sbb_long(*destreg, srcval);
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
 
@@ -1692,7 +1758,8 @@ static void x86emuOp_sbb_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = sbb_long(*destreg, *srcreg);
-        } else {
+        }
+        else {
             u16 *destreg,*srcreg;
 
             destreg = DECODE_RM_WORD_REGISTER(rh);
@@ -1712,7 +1779,8 @@ static void x86emuOp_sbb_word_R_RM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x1c
 ****************************************************************************/
-static void x86emuOp_sbb_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_sbb_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 srcval;
 
@@ -1730,7 +1798,8 @@ static void x86emuOp_sbb_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x1d
 ****************************************************************************/
-static void x86emuOp_sbb_word_AX_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_sbb_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -1738,7 +1807,8 @@ static void x86emuOp_sbb_word_AX_IMM(u8 X86EMU_UNUSED(op1))
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("SBB\tEAX,");
         srcval = fetch_long_imm();
-    } else {
+    }
+    else {
         DECODE_PRINTF("SBB\tAX,");
         srcval = fetch_word_imm();
     }
@@ -1746,7 +1816,8 @@ static void x86emuOp_sbb_word_AX_IMM(u8 X86EMU_UNUSED(op1))
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EAX = sbb_long(M.x86.R_EAX, srcval);
-    } else {
+    }
+    else {
         M.x86.R_AX = sbb_word(M.x86.R_AX, (u16)srcval);
     }
     DECODE_CLEAR_SEGOVR();
@@ -1757,7 +1828,8 @@ static void x86emuOp_sbb_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x1e
 ****************************************************************************/
-static void x86emuOp_push_DS(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_push_DS(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("PUSH\tDS\n");
@@ -1771,7 +1843,8 @@ static void x86emuOp_push_DS(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x1f
 ****************************************************************************/
-static void x86emuOp_pop_DS(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_pop_DS(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("POP\tDS\n");
@@ -1785,7 +1858,8 @@ static void x86emuOp_pop_DS(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x20
 ****************************************************************************/
-static void x86emuOp_and_byte_RM_R(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_and_byte_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -1847,7 +1921,8 @@ static void x86emuOp_and_byte_RM_R(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x21
 ****************************************************************************/
-static void x86emuOp_and_word_RM_R(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_and_word_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -1869,7 +1944,8 @@ static void x86emuOp_and_word_RM_R(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = and_long(destval, *srcreg);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
             u16 *srcreg;
 
@@ -1896,7 +1972,8 @@ static void x86emuOp_and_word_RM_R(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = and_long(destval, *srcreg);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
             u16 *srcreg;
 
@@ -1923,7 +2000,8 @@ static void x86emuOp_and_word_RM_R(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = and_long(destval, *srcreg);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
             u16 *srcreg;
 
@@ -1947,7 +2025,8 @@ static void x86emuOp_and_word_RM_R(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = and_long(*destreg, *srcreg);
-        } else {
+        }
+        else {
             u16 *destreg,*srcreg;
 
             destreg = DECODE_RM_WORD_REGISTER(rl);
@@ -1967,7 +2046,8 @@ static void x86emuOp_and_word_RM_R(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x22
 ****************************************************************************/
-static void x86emuOp_and_byte_R_RM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_and_byte_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -2022,7 +2102,8 @@ static void x86emuOp_and_byte_R_RM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x23
 ****************************************************************************/
-static void x86emuOp_and_word_R_RM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_and_word_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -2043,7 +2124,8 @@ static void x86emuOp_and_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = and_long(*destreg, srcval);
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
 
@@ -2069,7 +2151,8 @@ static void x86emuOp_and_word_R_RM(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             *destreg = and_long(*destreg, srcval);
             break;
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
 
@@ -2094,7 +2177,8 @@ static void x86emuOp_and_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = and_long(*destreg, srcval);
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
 
@@ -2117,7 +2201,8 @@ static void x86emuOp_and_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = and_long(*destreg, *srcreg);
-        } else {
+        }
+        else {
             u16 *destreg,*srcreg;
 
             destreg = DECODE_RM_WORD_REGISTER(rh);
@@ -2137,7 +2222,8 @@ static void x86emuOp_and_word_R_RM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x24
 ****************************************************************************/
-static void x86emuOp_and_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_and_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 srcval;
 
@@ -2155,7 +2241,8 @@ static void x86emuOp_and_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x25
 ****************************************************************************/
-static void x86emuOp_and_word_AX_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_and_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -2163,7 +2250,8 @@ static void x86emuOp_and_word_AX_IMM(u8 X86EMU_UNUSED(op1))
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("AND\tEAX,");
         srcval = fetch_long_imm();
-    } else {
+    }
+    else {
         DECODE_PRINTF("AND\tAX,");
         srcval = fetch_word_imm();
     }
@@ -2171,7 +2259,8 @@ static void x86emuOp_and_word_AX_IMM(u8 X86EMU_UNUSED(op1))
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EAX = and_long(M.x86.R_EAX, srcval);
-    } else {
+    }
+    else {
         M.x86.R_AX = and_word(M.x86.R_AX, (u16)srcval);
     }
     DECODE_CLEAR_SEGOVR();
@@ -2182,7 +2271,8 @@ static void x86emuOp_and_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x26
 ****************************************************************************/
-static void x86emuOp_segovr_ES(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_segovr_ES(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("ES:\n");
@@ -2199,7 +2289,8 @@ static void x86emuOp_segovr_ES(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x27
 ****************************************************************************/
-static void x86emuOp_daa(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_daa(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("DAA\n");
@@ -2213,7 +2304,8 @@ static void x86emuOp_daa(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x28
 ****************************************************************************/
-static void x86emuOp_sub_byte_RM_R(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_sub_byte_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -2271,7 +2363,8 @@ static void x86emuOp_sub_byte_RM_R(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x29
 ****************************************************************************/
-static void x86emuOp_sub_word_RM_R(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_sub_word_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -2293,7 +2386,8 @@ static void x86emuOp_sub_word_RM_R(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = sub_long(destval, *srcreg);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
             u16 *srcreg;
 
@@ -2320,7 +2414,8 @@ static void x86emuOp_sub_word_RM_R(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = sub_long(destval, *srcreg);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
             u16 *srcreg;
 
@@ -2347,7 +2442,8 @@ static void x86emuOp_sub_word_RM_R(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = sub_long(destval, *srcreg);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
             u16 *srcreg;
 
@@ -2371,7 +2467,8 @@ static void x86emuOp_sub_word_RM_R(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = sub_long(*destreg, *srcreg);
-        } else {
+        }
+        else {
             u16 *destreg,*srcreg;
 
             destreg = DECODE_RM_WORD_REGISTER(rl);
@@ -2391,7 +2488,8 @@ static void x86emuOp_sub_word_RM_R(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x2a
 ****************************************************************************/
-static void x86emuOp_sub_byte_R_RM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_sub_byte_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -2446,7 +2544,8 @@ static void x86emuOp_sub_byte_R_RM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x2b
 ****************************************************************************/
-static void x86emuOp_sub_word_R_RM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_sub_word_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -2467,7 +2566,8 @@ static void x86emuOp_sub_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = sub_long(*destreg, srcval);
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
 
@@ -2492,7 +2592,8 @@ static void x86emuOp_sub_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = sub_long(*destreg, srcval);
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
 
@@ -2517,7 +2618,8 @@ static void x86emuOp_sub_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = sub_long(*destreg, srcval);
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
 
@@ -2540,7 +2642,8 @@ static void x86emuOp_sub_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = sub_long(*destreg, *srcreg);
-        } else {
+        }
+        else {
             u16 *destreg,*srcreg;
 
             destreg = DECODE_RM_WORD_REGISTER(rh);
@@ -2560,7 +2663,8 @@ static void x86emuOp_sub_word_R_RM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x2c
 ****************************************************************************/
-static void x86emuOp_sub_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_sub_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 srcval;
 
@@ -2578,7 +2682,8 @@ static void x86emuOp_sub_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x2d
 ****************************************************************************/
-static void x86emuOp_sub_word_AX_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_sub_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -2586,7 +2691,8 @@ static void x86emuOp_sub_word_AX_IMM(u8 X86EMU_UNUSED(op1))
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("SUB\tEAX,");
         srcval = fetch_long_imm();
-    } else {
+    }
+    else {
         DECODE_PRINTF("SUB\tAX,");
         srcval = fetch_word_imm();
     }
@@ -2594,7 +2700,8 @@ static void x86emuOp_sub_word_AX_IMM(u8 X86EMU_UNUSED(op1))
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EAX = sub_long(M.x86.R_EAX, srcval);
-    } else {
+    }
+    else {
         M.x86.R_AX = sub_word(M.x86.R_AX, (u16)srcval);
     }
     DECODE_CLEAR_SEGOVR();
@@ -2605,7 +2712,8 @@ static void x86emuOp_sub_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x2e
 ****************************************************************************/
-static void x86emuOp_segovr_CS(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_segovr_CS(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("CS:\n");
@@ -2619,7 +2727,8 @@ static void x86emuOp_segovr_CS(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x2f
 ****************************************************************************/
-static void x86emuOp_das(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_das(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("DAS\n");
@@ -2633,7 +2742,8 @@ static void x86emuOp_das(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x30
 ****************************************************************************/
-static void x86emuOp_xor_byte_RM_R(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_xor_byte_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -2691,7 +2801,8 @@ static void x86emuOp_xor_byte_RM_R(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x31
 ****************************************************************************/
-static void x86emuOp_xor_word_RM_R(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_xor_word_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -2713,7 +2824,8 @@ static void x86emuOp_xor_word_RM_R(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = xor_long(destval, *srcreg);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
             u16 *srcreg;
 
@@ -2740,7 +2852,8 @@ static void x86emuOp_xor_word_RM_R(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = xor_long(destval, *srcreg);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
             u16 *srcreg;
 
@@ -2767,7 +2880,8 @@ static void x86emuOp_xor_word_RM_R(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = xor_long(destval, *srcreg);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
             u16 *srcreg;
 
@@ -2791,7 +2905,8 @@ static void x86emuOp_xor_word_RM_R(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = xor_long(*destreg, *srcreg);
-        } else {
+        }
+        else {
             u16 *destreg,*srcreg;
 
             destreg = DECODE_RM_WORD_REGISTER(rl);
@@ -2811,7 +2926,8 @@ static void x86emuOp_xor_word_RM_R(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x32
 ****************************************************************************/
-static void x86emuOp_xor_byte_R_RM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_xor_byte_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -2866,7 +2982,8 @@ static void x86emuOp_xor_byte_R_RM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x33
 ****************************************************************************/
-static void x86emuOp_xor_word_R_RM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_xor_word_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -2887,7 +3004,8 @@ static void x86emuOp_xor_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = xor_long(*destreg, srcval);
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
 
@@ -2912,7 +3030,8 @@ static void x86emuOp_xor_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = xor_long(*destreg, srcval);
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
 
@@ -2937,7 +3056,8 @@ static void x86emuOp_xor_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = xor_long(*destreg, srcval);
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
 
@@ -2960,7 +3080,8 @@ static void x86emuOp_xor_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = xor_long(*destreg, *srcreg);
-        } else {
+        }
+        else {
             u16 *destreg,*srcreg;
 
             destreg = DECODE_RM_WORD_REGISTER(rh);
@@ -2980,7 +3101,8 @@ static void x86emuOp_xor_word_R_RM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x34
 ****************************************************************************/
-static void x86emuOp_xor_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_xor_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 srcval;
 
@@ -2998,7 +3120,8 @@ static void x86emuOp_xor_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x35
 ****************************************************************************/
-static void x86emuOp_xor_word_AX_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_xor_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -3006,7 +3129,8 @@ static void x86emuOp_xor_word_AX_IMM(u8 X86EMU_UNUSED(op1))
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("XOR\tEAX,");
         srcval = fetch_long_imm();
-    } else {
+    }
+    else {
         DECODE_PRINTF("XOR\tAX,");
         srcval = fetch_word_imm();
     }
@@ -3014,7 +3138,8 @@ static void x86emuOp_xor_word_AX_IMM(u8 X86EMU_UNUSED(op1))
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EAX = xor_long(M.x86.R_EAX, srcval);
-    } else {
+    }
+    else {
         M.x86.R_AX = xor_word(M.x86.R_AX, (u16)srcval);
     }
     DECODE_CLEAR_SEGOVR();
@@ -3025,7 +3150,8 @@ static void x86emuOp_xor_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x36
 ****************************************************************************/
-static void x86emuOp_segovr_SS(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_segovr_SS(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("SS:\n");
@@ -3039,7 +3165,8 @@ static void x86emuOp_segovr_SS(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x37
 ****************************************************************************/
-static void x86emuOp_aaa(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_aaa(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("AAA\n");
@@ -3053,7 +3180,8 @@ static void x86emuOp_aaa(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x38
 ****************************************************************************/
-static void x86emuOp_cmp_byte_RM_R(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_cmp_byte_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -3108,7 +3236,8 @@ static void x86emuOp_cmp_byte_RM_R(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x39
 ****************************************************************************/
-static void x86emuOp_cmp_word_RM_R(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_cmp_word_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -3129,7 +3258,8 @@ static void x86emuOp_cmp_word_RM_R(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             cmp_long(destval, *srcreg);
-        } else {
+        }
+        else {
             u16 destval;
             u16 *srcreg;
 
@@ -3154,7 +3284,8 @@ static void x86emuOp_cmp_word_RM_R(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             cmp_long(destval, *srcreg);
-        } else {
+        }
+        else {
             u16 destval;
             u16 *srcreg;
 
@@ -3179,7 +3310,8 @@ static void x86emuOp_cmp_word_RM_R(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             cmp_long(destval, *srcreg);
-        } else {
+        }
+        else {
             u16 destval;
             u16 *srcreg;
 
@@ -3202,7 +3334,8 @@ static void x86emuOp_cmp_word_RM_R(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             cmp_long(*destreg, *srcreg);
-        } else {
+        }
+        else {
             u16 *destreg,*srcreg;
 
             destreg = DECODE_RM_WORD_REGISTER(rl);
@@ -3222,7 +3355,8 @@ static void x86emuOp_cmp_word_RM_R(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x3a
 ****************************************************************************/
-static void x86emuOp_cmp_byte_R_RM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_cmp_byte_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -3277,7 +3411,8 @@ static void x86emuOp_cmp_byte_R_RM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x3b
 ****************************************************************************/
-static void x86emuOp_cmp_word_R_RM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_cmp_word_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -3298,7 +3433,8 @@ static void x86emuOp_cmp_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             cmp_long(*destreg, srcval);
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
 
@@ -3323,7 +3459,8 @@ static void x86emuOp_cmp_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             cmp_long(*destreg, srcval);
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
 
@@ -3348,7 +3485,8 @@ static void x86emuOp_cmp_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             cmp_long(*destreg, srcval);
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
 
@@ -3371,7 +3509,8 @@ static void x86emuOp_cmp_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             cmp_long(*destreg, *srcreg);
-        } else {
+        }
+        else {
             u16 *destreg,*srcreg;
 
             destreg = DECODE_RM_WORD_REGISTER(rh);
@@ -3391,7 +3530,8 @@ static void x86emuOp_cmp_word_R_RM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x3c
 ****************************************************************************/
-static void x86emuOp_cmp_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_cmp_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 srcval;
 
@@ -3409,7 +3549,8 @@ static void x86emuOp_cmp_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x3d
 ****************************************************************************/
-static void x86emuOp_cmp_word_AX_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_cmp_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -3417,7 +3558,8 @@ static void x86emuOp_cmp_word_AX_IMM(u8 X86EMU_UNUSED(op1))
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("CMP\tEAX,");
         srcval = fetch_long_imm();
-    } else {
+    }
+    else {
         DECODE_PRINTF("CMP\tAX,");
         srcval = fetch_word_imm();
     }
@@ -3425,7 +3567,8 @@ static void x86emuOp_cmp_word_AX_IMM(u8 X86EMU_UNUSED(op1))
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         cmp_long(M.x86.R_EAX, srcval);
-    } else {
+    }
+    else {
         cmp_word(M.x86.R_AX, (u16)srcval);
     }
     DECODE_CLEAR_SEGOVR();
@@ -3436,7 +3579,8 @@ static void x86emuOp_cmp_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x3e
 ****************************************************************************/
-static void x86emuOp_segovr_DS(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_segovr_DS(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("DS:\n");
@@ -3450,7 +3594,8 @@ static void x86emuOp_segovr_DS(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x3f
 ****************************************************************************/
-static void x86emuOp_aas(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_aas(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("AAS\n");
@@ -3464,18 +3609,21 @@ static void x86emuOp_aas(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x40
 ****************************************************************************/
-static void x86emuOp_inc_AX(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_inc_AX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("INC\tEAX\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("INC\tAX\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EAX = inc_long(M.x86.R_EAX);
-    } else {
+    }
+    else {
         M.x86.R_AX = inc_word(M.x86.R_AX);
     }
     DECODE_CLEAR_SEGOVR();
@@ -3486,18 +3634,21 @@ static void x86emuOp_inc_AX(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x41
 ****************************************************************************/
-static void x86emuOp_inc_CX(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_inc_CX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("INC\tECX\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("INC\tCX\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_ECX = inc_long(M.x86.R_ECX);
-    } else {
+    }
+    else {
         M.x86.R_CX = inc_word(M.x86.R_CX);
     }
     DECODE_CLEAR_SEGOVR();
@@ -3508,18 +3659,21 @@ static void x86emuOp_inc_CX(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x42
 ****************************************************************************/
-static void x86emuOp_inc_DX(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_inc_DX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("INC\tEDX\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("INC\tDX\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EDX = inc_long(M.x86.R_EDX);
-    } else {
+    }
+    else {
         M.x86.R_DX = inc_word(M.x86.R_DX);
     }
     DECODE_CLEAR_SEGOVR();
@@ -3530,18 +3684,21 @@ static void x86emuOp_inc_DX(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x43
 ****************************************************************************/
-static void x86emuOp_inc_BX(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_inc_BX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("INC\tEBX\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("INC\tBX\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EBX = inc_long(M.x86.R_EBX);
-    } else {
+    }
+    else {
         M.x86.R_BX = inc_word(M.x86.R_BX);
     }
     DECODE_CLEAR_SEGOVR();
@@ -3552,18 +3709,21 @@ static void x86emuOp_inc_BX(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x44
 ****************************************************************************/
-static void x86emuOp_inc_SP(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_inc_SP(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("INC\tESP\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("INC\tSP\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_ESP = inc_long(M.x86.R_ESP);
-    } else {
+    }
+    else {
         M.x86.R_SP = inc_word(M.x86.R_SP);
     }
     DECODE_CLEAR_SEGOVR();
@@ -3574,18 +3734,21 @@ static void x86emuOp_inc_SP(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x45
 ****************************************************************************/
-static void x86emuOp_inc_BP(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_inc_BP(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("INC\tEBP\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("INC\tBP\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EBP = inc_long(M.x86.R_EBP);
-    } else {
+    }
+    else {
         M.x86.R_BP = inc_word(M.x86.R_BP);
     }
     DECODE_CLEAR_SEGOVR();
@@ -3596,18 +3759,21 @@ static void x86emuOp_inc_BP(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x46
 ****************************************************************************/
-static void x86emuOp_inc_SI(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_inc_SI(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("INC\tESI\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("INC\tSI\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_ESI = inc_long(M.x86.R_ESI);
-    } else {
+    }
+    else {
         M.x86.R_SI = inc_word(M.x86.R_SI);
     }
     DECODE_CLEAR_SEGOVR();
@@ -3618,18 +3784,21 @@ static void x86emuOp_inc_SI(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x47
 ****************************************************************************/
-static void x86emuOp_inc_DI(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_inc_DI(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("INC\tEDI\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("INC\tDI\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EDI = inc_long(M.x86.R_EDI);
-    } else {
+    }
+    else {
         M.x86.R_DI = inc_word(M.x86.R_DI);
     }
     DECODE_CLEAR_SEGOVR();
@@ -3640,18 +3809,21 @@ static void x86emuOp_inc_DI(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x48
 ****************************************************************************/
-static void x86emuOp_dec_AX(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_dec_AX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("DEC\tEAX\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("DEC\tAX\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EAX = dec_long(M.x86.R_EAX);
-    } else {
+    }
+    else {
         M.x86.R_AX = dec_word(M.x86.R_AX);
     }
     DECODE_CLEAR_SEGOVR();
@@ -3662,18 +3834,21 @@ static void x86emuOp_dec_AX(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x49
 ****************************************************************************/
-static void x86emuOp_dec_CX(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_dec_CX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("DEC\tECX\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("DEC\tCX\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_ECX = dec_long(M.x86.R_ECX);
-    } else {
+    }
+    else {
         M.x86.R_CX = dec_word(M.x86.R_CX);
     }
     DECODE_CLEAR_SEGOVR();
@@ -3684,18 +3859,21 @@ static void x86emuOp_dec_CX(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x4a
 ****************************************************************************/
-static void x86emuOp_dec_DX(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_dec_DX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("DEC\tEDX\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("DEC\tDX\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EDX = dec_long(M.x86.R_EDX);
-    } else {
+    }
+    else {
         M.x86.R_DX = dec_word(M.x86.R_DX);
     }
     DECODE_CLEAR_SEGOVR();
@@ -3706,18 +3884,21 @@ static void x86emuOp_dec_DX(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x4b
 ****************************************************************************/
-static void x86emuOp_dec_BX(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_dec_BX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("DEC\tEBX\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("DEC\tBX\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EBX = dec_long(M.x86.R_EBX);
-    } else {
+    }
+    else {
         M.x86.R_BX = dec_word(M.x86.R_BX);
     }
     DECODE_CLEAR_SEGOVR();
@@ -3728,18 +3909,21 @@ static void x86emuOp_dec_BX(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x4c
 ****************************************************************************/
-static void x86emuOp_dec_SP(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_dec_SP(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("DEC\tESP\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("DEC\tSP\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_ESP = dec_long(M.x86.R_ESP);
-    } else {
+    }
+    else {
         M.x86.R_SP = dec_word(M.x86.R_SP);
     }
     DECODE_CLEAR_SEGOVR();
@@ -3750,18 +3934,21 @@ static void x86emuOp_dec_SP(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x4d
 ****************************************************************************/
-static void x86emuOp_dec_BP(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_dec_BP(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("DEC\tEBP\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("DEC\tBP\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EBP = dec_long(M.x86.R_EBP);
-    } else {
+    }
+    else {
         M.x86.R_BP = dec_word(M.x86.R_BP);
     }
     DECODE_CLEAR_SEGOVR();
@@ -3772,18 +3959,21 @@ static void x86emuOp_dec_BP(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x4e
 ****************************************************************************/
-static void x86emuOp_dec_SI(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_dec_SI(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("DEC\tESI\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("DEC\tSI\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_ESI = dec_long(M.x86.R_ESI);
-    } else {
+    }
+    else {
         M.x86.R_SI = dec_word(M.x86.R_SI);
     }
     DECODE_CLEAR_SEGOVR();
@@ -3794,18 +3984,21 @@ static void x86emuOp_dec_SI(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x4f
 ****************************************************************************/
-static void x86emuOp_dec_DI(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_dec_DI(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("DEC\tEDI\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("DEC\tDI\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EDI = dec_long(M.x86.R_EDI);
-    } else {
+    }
+    else {
         M.x86.R_DI = dec_word(M.x86.R_DI);
     }
     DECODE_CLEAR_SEGOVR();
@@ -3816,18 +4009,21 @@ static void x86emuOp_dec_DI(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x50
 ****************************************************************************/
-static void x86emuOp_push_AX(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_push_AX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("PUSH\tEAX\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("PUSH\tAX\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         push_long(M.x86.R_EAX);
-    } else {
+    }
+    else {
         push_word(M.x86.R_AX);
     }
     DECODE_CLEAR_SEGOVR();
@@ -3838,18 +4034,21 @@ static void x86emuOp_push_AX(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x51
 ****************************************************************************/
-static void x86emuOp_push_CX(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_push_CX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("PUSH\tECX\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("PUSH\tCX\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         push_long(M.x86.R_ECX);
-    } else {
+    }
+    else {
         push_word(M.x86.R_CX);
     }
     DECODE_CLEAR_SEGOVR();
@@ -3860,18 +4059,21 @@ static void x86emuOp_push_CX(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x52
 ****************************************************************************/
-static void x86emuOp_push_DX(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_push_DX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("PUSH\tEDX\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("PUSH\tDX\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         push_long(M.x86.R_EDX);
-    } else {
+    }
+    else {
         push_word(M.x86.R_DX);
     }
     DECODE_CLEAR_SEGOVR();
@@ -3882,18 +4084,21 @@ static void x86emuOp_push_DX(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x53
 ****************************************************************************/
-static void x86emuOp_push_BX(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_push_BX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("PUSH\tEBX\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("PUSH\tBX\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         push_long(M.x86.R_EBX);
-    } else {
+    }
+    else {
         push_word(M.x86.R_BX);
     }
     DECODE_CLEAR_SEGOVR();
@@ -3904,12 +4109,14 @@ static void x86emuOp_push_BX(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x54
 ****************************************************************************/
-static void x86emuOp_push_SP(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_push_SP(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("PUSH\tESP\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("PUSH\tSP\n");
     }
     TRACE_AND_STEP();
@@ -3919,7 +4126,8 @@ static void x86emuOp_push_SP(u8 X86EMU_UNUSED(op1))
 	 */
 	if (M.x86.mode & SYSMODE_PREFIX_DATA) {
 		push_long(M.x86.R_ESP);
-	} else {
+    }
+    else {
 		push_word((u16)(M.x86.R_SP));
     }
     DECODE_CLEAR_SEGOVR();
@@ -3930,18 +4138,21 @@ static void x86emuOp_push_SP(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x55
 ****************************************************************************/
-static void x86emuOp_push_BP(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_push_BP(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("PUSH\tEBP\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("PUSH\tBP\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         push_long(M.x86.R_EBP);
-    } else {
+    }
+    else {
         push_word(M.x86.R_BP);
     }
     DECODE_CLEAR_SEGOVR();
@@ -3952,18 +4163,21 @@ static void x86emuOp_push_BP(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x56
 ****************************************************************************/
-static void x86emuOp_push_SI(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_push_SI(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("PUSH\tESI\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("PUSH\tSI\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         push_long(M.x86.R_ESI);
-    } else {
+    }
+    else {
         push_word(M.x86.R_SI);
     }
     DECODE_CLEAR_SEGOVR();
@@ -3974,18 +4188,21 @@ static void x86emuOp_push_SI(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x57
 ****************************************************************************/
-static void x86emuOp_push_DI(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_push_DI(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("PUSH\tEDI\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("PUSH\tDI\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         push_long(M.x86.R_EDI);
-    } else {
+    }
+    else {
         push_word(M.x86.R_DI);
     }
     DECODE_CLEAR_SEGOVR();
@@ -3996,18 +4213,21 @@ static void x86emuOp_push_DI(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x58
 ****************************************************************************/
-static void x86emuOp_pop_AX(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_pop_AX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("POP\tEAX\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("POP\tAX\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EAX = pop_long();
-    } else {
+    }
+    else {
         M.x86.R_AX = pop_word();
     }
     DECODE_CLEAR_SEGOVR();
@@ -4018,18 +4238,21 @@ static void x86emuOp_pop_AX(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x59
 ****************************************************************************/
-static void x86emuOp_pop_CX(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_pop_CX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("POP\tECX\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("POP\tCX\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_ECX = pop_long();
-    } else {
+    }
+    else {
         M.x86.R_CX = pop_word();
     }
     DECODE_CLEAR_SEGOVR();
@@ -4040,18 +4263,21 @@ static void x86emuOp_pop_CX(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x5a
 ****************************************************************************/
-static void x86emuOp_pop_DX(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_pop_DX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("POP\tEDX\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("POP\tDX\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EDX = pop_long();
-    } else {
+    }
+    else {
         M.x86.R_DX = pop_word();
     }
     DECODE_CLEAR_SEGOVR();
@@ -4062,18 +4288,21 @@ static void x86emuOp_pop_DX(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x5b
 ****************************************************************************/
-static void x86emuOp_pop_BX(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_pop_BX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("POP\tEBX\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("POP\tBX\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EBX = pop_long();
-    } else {
+    }
+    else {
         M.x86.R_BX = pop_word();
     }
     DECODE_CLEAR_SEGOVR();
@@ -4084,18 +4313,21 @@ static void x86emuOp_pop_BX(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x5c
 ****************************************************************************/
-static void x86emuOp_pop_SP(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_pop_SP(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("POP\tESP\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("POP\tSP\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_ESP = pop_long();
-    } else {
+    }
+    else {
         M.x86.R_SP = pop_word();
     }
     DECODE_CLEAR_SEGOVR();
@@ -4106,18 +4338,21 @@ static void x86emuOp_pop_SP(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x5d
 ****************************************************************************/
-static void x86emuOp_pop_BP(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_pop_BP(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("POP\tEBP\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("POP\tBP\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EBP = pop_long();
-    } else {
+    }
+    else {
         M.x86.R_BP = pop_word();
     }
     DECODE_CLEAR_SEGOVR();
@@ -4128,18 +4363,21 @@ static void x86emuOp_pop_BP(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x5e
 ****************************************************************************/
-static void x86emuOp_pop_SI(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_pop_SI(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("POP\tESI\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("POP\tSI\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_ESI = pop_long();
-    } else {
+    }
+    else {
         M.x86.R_SI = pop_word();
     }
     DECODE_CLEAR_SEGOVR();
@@ -4150,18 +4388,21 @@ static void x86emuOp_pop_SI(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x5f
 ****************************************************************************/
-static void x86emuOp_pop_DI(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_pop_DI(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("POP\tEDI\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("POP\tDI\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EDI = pop_long();
-    } else {
+    }
+    else {
         M.x86.R_DI = pop_word();
     }
     DECODE_CLEAR_SEGOVR();
@@ -4172,12 +4413,14 @@ static void x86emuOp_pop_DI(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x60
 ****************************************************************************/
-static void x86emuOp_push_all(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_push_all(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("PUSHAD\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("PUSHA\n");
     }
     TRACE_AND_STEP();
@@ -4192,7 +4435,8 @@ static void x86emuOp_push_all(u8 X86EMU_UNUSED(op1))
         push_long(M.x86.R_EBP);
         push_long(M.x86.R_ESI);
         push_long(M.x86.R_EDI);
-    } else {
+    }
+    else {
         u16 old_sp = M.x86.R_SP;
 
         push_word(M.x86.R_AX);
@@ -4212,12 +4456,14 @@ static void x86emuOp_push_all(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x61
 ****************************************************************************/
-static void x86emuOp_pop_all(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_pop_all(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("POPAD\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("POPA\n");
     }
     TRACE_AND_STEP();
@@ -4230,7 +4476,8 @@ static void x86emuOp_pop_all(u8 X86EMU_UNUSED(op1))
         M.x86.R_EDX = pop_long();
         M.x86.R_ECX = pop_long();
         M.x86.R_EAX = pop_long();
-    } else {
+    }
+    else {
         M.x86.R_DI = pop_word();
         M.x86.R_SI = pop_word();
         M.x86.R_BP = pop_word();
@@ -4251,7 +4498,8 @@ static void x86emuOp_pop_all(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x64
 ****************************************************************************/
-static void x86emuOp_segovr_FS(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_segovr_FS(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("FS:\n");
@@ -4268,7 +4516,8 @@ static void x86emuOp_segovr_FS(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x65
 ****************************************************************************/
-static void x86emuOp_segovr_GS(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_segovr_GS(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("GS:\n");
@@ -4285,7 +4534,8 @@ static void x86emuOp_segovr_GS(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x66 - prefix for 32-bit register
 ****************************************************************************/
-static void x86emuOp_prefix_data(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_prefix_data(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("DATA:\n");
@@ -4299,7 +4549,8 @@ static void x86emuOp_prefix_data(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x67 - prefix for 32-bit address
 ****************************************************************************/
-static void x86emuOp_prefix_addr(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_prefix_addr(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("ADDR:\n");
@@ -4313,21 +4564,24 @@ static void x86emuOp_prefix_addr(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x68
 ****************************************************************************/
-static void x86emuOp_push_word_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_push_word_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 imm;
 
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         imm = fetch_long_imm();
-    } else {
+    }
+    else {
         imm = fetch_word_imm();
     }
     DECODE_PRINTF2("PUSH\t%x\n", imm);
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         push_long(imm);
-    } else {
+    }
+    else {
         push_word((u16)imm);
     }
     DECODE_CLEAR_SEGOVR();
@@ -4338,7 +4592,8 @@ static void x86emuOp_push_word_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x69
 ****************************************************************************/
-static void x86emuOp_imul_word_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_imul_word_IMM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -4365,12 +4620,14 @@ static void x86emuOp_imul_word_IMM(u8 X86EMU_UNUSED(op1))
             if (res_hi != 0) {
                 SET_FLAG(F_CF);
                 SET_FLAG(F_OF);
-            } else {
+            }
+            else {
                 CLEAR_FLAG(F_CF);
                 CLEAR_FLAG(F_OF);
             }
             *destreg = (u32)res_lo;
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
             u32 res;
@@ -4384,10 +4641,12 @@ static void x86emuOp_imul_word_IMM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF2(",%d\n", (s32)imm);
             TRACE_AND_STEP();
             res = (s16)srcval * (s16)imm;
+
             if (res > 0xFFFF) {
                 SET_FLAG(F_CF);
                 SET_FLAG(F_OF);
-            } else {
+            }
+            else {
                 CLEAR_FLAG(F_CF);
                 CLEAR_FLAG(F_OF);
             }
@@ -4412,12 +4671,14 @@ static void x86emuOp_imul_word_IMM(u8 X86EMU_UNUSED(op1))
             if (res_hi != 0) {
                 SET_FLAG(F_CF);
                 SET_FLAG(F_OF);
-            } else {
+            }
+            else {
                 CLEAR_FLAG(F_CF);
                 CLEAR_FLAG(F_OF);
             }
             *destreg = (u32)res_lo;
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
             u32 res;
@@ -4431,10 +4692,12 @@ static void x86emuOp_imul_word_IMM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF2(",%d\n", (s32)imm);
             TRACE_AND_STEP();
             res = (s16)srcval * (s16)imm;
+
             if (res > 0xFFFF) {
                 SET_FLAG(F_CF);
                 SET_FLAG(F_OF);
-            } else {
+            }
+            else {
                 CLEAR_FLAG(F_CF);
                 CLEAR_FLAG(F_OF);
             }
@@ -4459,12 +4722,14 @@ static void x86emuOp_imul_word_IMM(u8 X86EMU_UNUSED(op1))
             if (res_hi != 0) {
                 SET_FLAG(F_CF);
                 SET_FLAG(F_OF);
-            } else {
+            }
+            else {
                 CLEAR_FLAG(F_CF);
                 CLEAR_FLAG(F_OF);
             }
             *destreg = (u32)res_lo;
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
             u32 res;
@@ -4478,10 +4743,12 @@ static void x86emuOp_imul_word_IMM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF2(",%d\n", (s32)imm);
             TRACE_AND_STEP();
             res = (s16)srcval * (s16)imm;
+
             if (res > 0xFFFF) {
                 SET_FLAG(F_CF);
                 SET_FLAG(F_OF);
-            } else {
+            }
+            else {
                 CLEAR_FLAG(F_CF);
                 CLEAR_FLAG(F_OF);
             }
@@ -4504,12 +4771,14 @@ static void x86emuOp_imul_word_IMM(u8 X86EMU_UNUSED(op1))
             if (res_hi != 0) {
                 SET_FLAG(F_CF);
                 SET_FLAG(F_OF);
-            } else {
+            }
+            else {
                 CLEAR_FLAG(F_CF);
                 CLEAR_FLAG(F_OF);
             }
             *destreg = (u32)res_lo;
-        } else {
+        }
+        else {
             u16 *destreg,*srcreg;
             u32 res;
             s16 imm;
@@ -4523,7 +4792,8 @@ static void x86emuOp_imul_word_IMM(u8 X86EMU_UNUSED(op1))
             if (res > 0xFFFF) {
                 SET_FLAG(F_CF);
                 SET_FLAG(F_OF);
-            } else {
+            }
+            else {
                 CLEAR_FLAG(F_CF);
                 CLEAR_FLAG(F_OF);
             }
@@ -4539,7 +4809,8 @@ static void x86emuOp_imul_word_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x6a
 ****************************************************************************/
-static void x86emuOp_push_byte_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_push_byte_IMM(u8 X86EMU_UNUSED(op1))
 {
     s16 imm;
 
@@ -4549,7 +4820,8 @@ static void x86emuOp_push_byte_IMM(u8 X86EMU_UNUSED(op1))
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
 	push_long((s32)imm);
-    } else {
+    }
+    else {
 	push_word(imm);
     }
     DECODE_CLEAR_SEGOVR();
@@ -4560,7 +4832,8 @@ static void x86emuOp_push_byte_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x6b
 ****************************************************************************/
-static void x86emuOp_imul_byte_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_imul_byte_IMM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -4587,12 +4860,14 @@ static void x86emuOp_imul_byte_IMM(u8 X86EMU_UNUSED(op1))
             if (res_hi != 0) {
                 SET_FLAG(F_CF);
                 SET_FLAG(F_OF);
-            } else {
+            }
+            else {
                 CLEAR_FLAG(F_CF);
                 CLEAR_FLAG(F_OF);
             }
             *destreg = (u32)res_lo;
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
             u32 res;
@@ -4605,10 +4880,12 @@ static void x86emuOp_imul_byte_IMM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF2(",%d\n", (s32)imm);
             TRACE_AND_STEP();
             res = (s16)srcval * (s16)imm;
+
             if (res > 0xFFFF) {
                 SET_FLAG(F_CF);
                 SET_FLAG(F_OF);
-            } else {
+            }
+            else {
                 CLEAR_FLAG(F_CF);
                 CLEAR_FLAG(F_OF);
             }
@@ -4632,12 +4909,14 @@ static void x86emuOp_imul_byte_IMM(u8 X86EMU_UNUSED(op1))
             if (res_hi != 0) {
                 SET_FLAG(F_CF);
                 SET_FLAG(F_OF);
-            } else {
+            }
+            else {
                 CLEAR_FLAG(F_CF);
                 CLEAR_FLAG(F_OF);
             }
             *destreg = (u32)res_lo;
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
             u32 res;
@@ -4650,10 +4929,12 @@ static void x86emuOp_imul_byte_IMM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF2(",%d\n", (s32)imm);
             TRACE_AND_STEP();
             res = (s16)srcval * (s16)imm;
+
             if (res > 0xFFFF) {
                 SET_FLAG(F_CF);
                 SET_FLAG(F_OF);
-            } else {
+            }
+            else {
                 CLEAR_FLAG(F_CF);
                 CLEAR_FLAG(F_OF);
             }
@@ -4677,12 +4958,14 @@ static void x86emuOp_imul_byte_IMM(u8 X86EMU_UNUSED(op1))
             if (res_hi != 0) {
                 SET_FLAG(F_CF);
                 SET_FLAG(F_OF);
-            } else {
+            }
+            else {
                 CLEAR_FLAG(F_CF);
                 CLEAR_FLAG(F_OF);
             }
             *destreg = (u32)res_lo;
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
             u32 res;
@@ -4695,10 +4978,12 @@ static void x86emuOp_imul_byte_IMM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF2(",%d\n", (s32)imm);
             TRACE_AND_STEP();
             res = (s16)srcval * (s16)imm;
+
             if (res > 0xFFFF) {
                 SET_FLAG(F_CF);
                 SET_FLAG(F_OF);
-            } else {
+            }
+            else {
                 CLEAR_FLAG(F_CF);
                 CLEAR_FLAG(F_OF);
             }
@@ -4720,12 +5005,14 @@ static void x86emuOp_imul_byte_IMM(u8 X86EMU_UNUSED(op1))
             if (res_hi != 0) {
                 SET_FLAG(F_CF);
                 SET_FLAG(F_OF);
-            } else {
+            }
+            else {
                 CLEAR_FLAG(F_CF);
                 CLEAR_FLAG(F_OF);
             }
             *destreg = (u32)res_lo;
-        } else {
+        }
+        else {
             u16 *destreg,*srcreg;
             u32 res;
 
@@ -4738,7 +5025,8 @@ static void x86emuOp_imul_byte_IMM(u8 X86EMU_UNUSED(op1))
             if (res > 0xFFFF) {
                 SET_FLAG(F_CF);
                 SET_FLAG(F_OF);
-            } else {
+            }
+            else {
                 CLEAR_FLAG(F_CF);
                 CLEAR_FLAG(F_OF);
             }
@@ -4754,7 +5042,8 @@ static void x86emuOp_imul_byte_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x6c
 ****************************************************************************/
-static void x86emuOp_ins_byte(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_ins_byte(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("INSB\n");
@@ -4768,13 +5057,15 @@ static void x86emuOp_ins_byte(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x6d
 ****************************************************************************/
-static void x86emuOp_ins_word(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_ins_word(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("INSD\n");
         ins(4);
-    } else {
+    }
+    else {
         DECODE_PRINTF("INSW\n");
         ins(2);
     }
@@ -4787,7 +5078,8 @@ static void x86emuOp_ins_word(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x6e
 ****************************************************************************/
-static void x86emuOp_outs_byte(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_outs_byte(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("OUTSB\n");
@@ -4801,13 +5093,15 @@ static void x86emuOp_outs_byte(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x6f
 ****************************************************************************/
-static void x86emuOp_outs_word(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_outs_word(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("OUTSD\n");
         outs(4);
-    } else {
+    }
+    else {
         DECODE_PRINTF("OUTSW\n");
         outs(2);
     }
@@ -4820,7 +5114,8 @@ static void x86emuOp_outs_word(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x70
 ****************************************************************************/
-static void x86emuOp_jump_near_O(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_jump_near_O(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -4842,7 +5137,8 @@ static void x86emuOp_jump_near_O(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x71
 ****************************************************************************/
-static void x86emuOp_jump_near_NO(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_jump_near_NO(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -4864,7 +5160,8 @@ static void x86emuOp_jump_near_NO(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x72
 ****************************************************************************/
-static void x86emuOp_jump_near_B(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_jump_near_B(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -4886,7 +5183,8 @@ static void x86emuOp_jump_near_B(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x73
 ****************************************************************************/
-static void x86emuOp_jump_near_NB(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_jump_near_NB(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -4908,7 +5206,8 @@ static void x86emuOp_jump_near_NB(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x74
 ****************************************************************************/
-static void x86emuOp_jump_near_Z(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_jump_near_Z(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -4930,7 +5229,8 @@ static void x86emuOp_jump_near_Z(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x75
 ****************************************************************************/
-static void x86emuOp_jump_near_NZ(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_jump_near_NZ(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -4952,7 +5252,8 @@ static void x86emuOp_jump_near_NZ(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x76
 ****************************************************************************/
-static void x86emuOp_jump_near_BE(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_jump_near_BE(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -4975,7 +5276,8 @@ static void x86emuOp_jump_near_BE(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x77
 ****************************************************************************/
-static void x86emuOp_jump_near_NBE(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_jump_near_NBE(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -4998,7 +5300,8 @@ static void x86emuOp_jump_near_NBE(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x78
 ****************************************************************************/
-static void x86emuOp_jump_near_S(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_jump_near_S(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -5020,7 +5323,8 @@ static void x86emuOp_jump_near_S(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x79
 ****************************************************************************/
-static void x86emuOp_jump_near_NS(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_jump_near_NS(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -5042,7 +5346,8 @@ static void x86emuOp_jump_near_NS(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x7a
 ****************************************************************************/
-static void x86emuOp_jump_near_P(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_jump_near_P(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -5064,7 +5369,8 @@ static void x86emuOp_jump_near_P(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x7b
 ****************************************************************************/
-static void x86emuOp_jump_near_NP(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_jump_near_NP(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -5086,7 +5392,8 @@ static void x86emuOp_jump_near_NP(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x7c
 ****************************************************************************/
-static void x86emuOp_jump_near_L(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_jump_near_L(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -5111,7 +5418,8 @@ static void x86emuOp_jump_near_L(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x7d
 ****************************************************************************/
-static void x86emuOp_jump_near_NL(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_jump_near_NL(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -5137,7 +5445,8 @@ static void x86emuOp_jump_near_NL(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x7e
 ****************************************************************************/
-static void x86emuOp_jump_near_LE(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_jump_near_LE(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -5163,7 +5472,8 @@ static void x86emuOp_jump_near_LE(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x7f
 ****************************************************************************/
-static void x86emuOp_jump_near_NLE(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_jump_near_NLE(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -5185,8 +5495,7 @@ static void x86emuOp_jump_near_NLE(u8 X86EMU_UNUSED(op1))
     END_OF_INSTR();
 }
 
-static u8 (*opc80_byte_operation[])(u8 d, u8 s) =
-{
+static u8(*opc80_byte_operation[]) (u8 d, u8 s) = {
     add_byte,           /* 00 */
     or_byte,            /* 01 */
     adc_byte,           /* 02 */
@@ -5201,7 +5510,8 @@ static u8 (*opc80_byte_operation[])(u8 d, u8 s) =
 REMARKS:
 Handles opcode 0x80
 ****************************************************************************/
-static void x86emuOp_opc80_byte_RM_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_opc80_byte_RM_IMM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg;
@@ -5305,8 +5615,7 @@ static void x86emuOp_opc80_byte_RM_IMM(u8 X86EMU_UNUSED(op1))
     END_OF_INSTR();
 }
 
-static u16 (*opc81_word_operation[])(u16 d, u16 s) =
-{
+static u16(*opc81_word_operation[]) (u16 d, u16 s) = {
     add_word,           /*00 */
     or_word,            /*01 */
     adc_word,           /*02 */
@@ -5317,8 +5626,7 @@ static u16 (*opc81_word_operation[])(u16 d, u16 s) =
     cmp_word,           /*07 */
 };
 
-static u32 (*opc81_long_operation[])(u32 d, u32 s) =
-{
+static u32(*opc81_long_operation[]) (u32 d, u32 s) = {
     add_long,           /*00 */
     or_long,            /*01 */
     adc_long,           /*02 */
@@ -5333,7 +5641,8 @@ static u32 (*opc81_long_operation[])(u32 d, u32 s) =
 REMARKS:
 Handles opcode 0x81
 ****************************************************************************/
-static void x86emuOp_opc81_word_RM_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_opc81_word_RM_IMM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -5399,7 +5708,8 @@ static void x86emuOp_opc81_word_RM_IMM(u8 X86EMU_UNUSED(op1))
             destval = (*opc81_long_operation[rh]) (destval, imm);
             if (rh != 7)
                 store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval,imm;
 
             DECODE_PRINTF("WORD PTR ");
@@ -5428,7 +5738,8 @@ static void x86emuOp_opc81_word_RM_IMM(u8 X86EMU_UNUSED(op1))
             destval = (*opc81_long_operation[rh]) (destval, imm);
             if (rh != 7)
                 store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval,imm;
 
             DECODE_PRINTF("WORD PTR ");
@@ -5457,7 +5768,8 @@ static void x86emuOp_opc81_word_RM_IMM(u8 X86EMU_UNUSED(op1))
             destval = (*opc81_long_operation[rh]) (destval, imm);
             if (rh != 7)
                 store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval,imm;
 
             DECODE_PRINTF("WORD PTR ");
@@ -5485,7 +5797,8 @@ static void x86emuOp_opc81_word_RM_IMM(u8 X86EMU_UNUSED(op1))
             destval = (*opc81_long_operation[rh]) (*destreg, imm);
             if (rh != 7)
                 *destreg = destval;
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 destval,imm;
 
@@ -5504,8 +5817,7 @@ static void x86emuOp_opc81_word_RM_IMM(u8 X86EMU_UNUSED(op1))
     END_OF_INSTR();
 }
 
-static u8 (*opc82_byte_operation[])(u8 s, u8 d) =
-{
+static u8(*opc82_byte_operation[]) (u8 s, u8 d) = {
     add_byte,           /*00 */
     or_byte,            /*01 *//*YYY UNUSED ???? */
     adc_byte,           /*02 */
@@ -5520,7 +5832,8 @@ static u8 (*opc82_byte_operation[])(u8 s, u8 d) =
 REMARKS:
 Handles opcode 0x82
 ****************************************************************************/
-static void x86emuOp_opc82_byte_RM_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_opc82_byte_RM_IMM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg;
@@ -5620,8 +5933,7 @@ static void x86emuOp_opc82_byte_RM_IMM(u8 X86EMU_UNUSED(op1))
     END_OF_INSTR();
 }
 
-static u16 (*opc83_word_operation[])(u16 s, u16 d) =
-{
+static u16(*opc83_word_operation[]) (u16 s, u16 d) = {
     add_word,           /*00 */
     or_word,            /*01 *//*YYY UNUSED ???? */
     adc_word,           /*02 */
@@ -5632,8 +5944,7 @@ static u16 (*opc83_word_operation[])(u16 s, u16 d) =
     cmp_word,           /*07 */
 };
 
-static u32 (*opc83_long_operation[])(u32 s, u32 d) =
-{
+static u32(*opc83_long_operation[]) (u32 s, u32 d) = {
     add_long,           /*00 */
     or_long,            /*01 *//*YYY UNUSED ???? */
     adc_long,           /*02 */
@@ -5648,7 +5959,8 @@ static u32 (*opc83_long_operation[])(u32 s, u32 d) =
 REMARKS:
 Handles opcode 0x83
 ****************************************************************************/
-static void x86emuOp_opc83_word_RM_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_opc83_word_RM_IMM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -5711,7 +6023,8 @@ static void x86emuOp_opc83_word_RM_IMM(u8 X86EMU_UNUSED(op1))
             destval = (*opc83_long_operation[rh]) (destval, imm);
             if (rh != 7)
                 store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval,imm;
 
             DECODE_PRINTF("WORD PTR ");
@@ -5738,7 +6051,8 @@ static void x86emuOp_opc83_word_RM_IMM(u8 X86EMU_UNUSED(op1))
             destval = (*opc83_long_operation[rh]) (destval, imm);
             if (rh != 7)
                 store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval,imm;
 
             DECODE_PRINTF("WORD PTR ");
@@ -5765,7 +6079,8 @@ static void x86emuOp_opc83_word_RM_IMM(u8 X86EMU_UNUSED(op1))
             destval = (*opc83_long_operation[rh]) (destval, imm);
             if (rh != 7)
                 store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval,imm;
 
             DECODE_PRINTF("WORD PTR ");
@@ -5791,7 +6106,8 @@ static void x86emuOp_opc83_word_RM_IMM(u8 X86EMU_UNUSED(op1))
             destval = (*opc83_long_operation[rh]) (*destreg, imm);
             if (rh != 7)
                 *destreg = destval;
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 destval,imm;
 
@@ -5813,7 +6129,8 @@ static void x86emuOp_opc83_word_RM_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x84
 ****************************************************************************/
-static void x86emuOp_test_byte_RM_R(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_test_byte_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -5868,7 +6185,8 @@ static void x86emuOp_test_byte_RM_R(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x85
 ****************************************************************************/
-static void x86emuOp_test_word_RM_R(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_test_word_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -5889,7 +6207,8 @@ static void x86emuOp_test_word_RM_R(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             test_long(destval, *srcreg);
-        } else {
+        }
+        else {
             u16 destval;
             u16 *srcreg;
 
@@ -5914,7 +6233,8 @@ static void x86emuOp_test_word_RM_R(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             test_long(destval, *srcreg);
-        } else {
+        }
+        else {
             u16 destval;
             u16 *srcreg;
 
@@ -5939,7 +6259,8 @@ static void x86emuOp_test_word_RM_R(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             test_long(destval, *srcreg);
-        } else {
+        }
+        else {
             u16 destval;
             u16 *srcreg;
 
@@ -5962,7 +6283,8 @@ static void x86emuOp_test_word_RM_R(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             test_long(*destreg, *srcreg);
-        } else {
+        }
+        else {
             u16 *destreg,*srcreg;
 
             destreg = DECODE_RM_WORD_REGISTER(rl);
@@ -5982,7 +6304,8 @@ static void x86emuOp_test_word_RM_R(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x86
 ****************************************************************************/
-static void x86emuOp_xchg_byte_RM_R(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_xchg_byte_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -6049,7 +6372,8 @@ static void x86emuOp_xchg_byte_RM_R(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x87
 ****************************************************************************/
-static void x86emuOp_xchg_word_RM_R(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_xchg_word_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -6073,7 +6397,8 @@ static void x86emuOp_xchg_word_RM_R(u8 X86EMU_UNUSED(op1))
             *srcreg = destval;
             destval = tmp;
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 *srcreg;
             u16 destval,tmp;
 
@@ -6104,7 +6429,8 @@ static void x86emuOp_xchg_word_RM_R(u8 X86EMU_UNUSED(op1))
             *srcreg = destval;
             destval = tmp;
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 *srcreg;
             u16 destval,tmp;
 
@@ -6135,7 +6461,8 @@ static void x86emuOp_xchg_word_RM_R(u8 X86EMU_UNUSED(op1))
             *srcreg = destval;
             destval = tmp;
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 *srcreg;
             u16 destval,tmp;
 
@@ -6164,7 +6491,8 @@ static void x86emuOp_xchg_word_RM_R(u8 X86EMU_UNUSED(op1))
             tmp = *srcreg;
             *srcreg = *destreg;
             *destreg = tmp;
-        } else {
+        }
+        else {
             u16 *destreg,*srcreg;
             u16 tmp;
 
@@ -6187,7 +6515,8 @@ static void x86emuOp_xchg_word_RM_R(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x88
 ****************************************************************************/
-static void x86emuOp_mov_byte_RM_R(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_byte_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -6238,7 +6567,8 @@ static void x86emuOp_mov_byte_RM_R(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x89
 ****************************************************************************/
-static void x86emuOp_mov_word_RM_R(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_word_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u32 destoffset;
@@ -6257,7 +6587,8 @@ static void x86emuOp_mov_word_RM_R(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             store_data_long(destoffset, *srcreg);
-        } else {
+        }
+        else {
             u16 *srcreg;
 
             destoffset = decode_rm00_address(rl);
@@ -6278,7 +6609,8 @@ static void x86emuOp_mov_word_RM_R(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             store_data_long(destoffset, *srcreg);
-        } else {
+        }
+        else {
             u16 *srcreg;
 
             destoffset = decode_rm01_address(rl);
@@ -6299,7 +6631,8 @@ static void x86emuOp_mov_word_RM_R(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             store_data_long(destoffset, *srcreg);
-        } else {
+        }
+        else {
             u16 *srcreg;
 
             destoffset = decode_rm10_address(rl);
@@ -6320,7 +6653,8 @@ static void x86emuOp_mov_word_RM_R(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = *srcreg;
-        } else {
+        }
+        else {
             u16 *destreg,*srcreg;
 
             destreg = DECODE_RM_WORD_REGISTER(rl);
@@ -6340,7 +6674,8 @@ static void x86emuOp_mov_word_RM_R(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x8a
 ****************************************************************************/
-static void x86emuOp_mov_byte_R_RM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_byte_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -6395,7 +6730,8 @@ static void x86emuOp_mov_byte_R_RM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x8b
 ****************************************************************************/
-static void x86emuOp_mov_word_R_RM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_word_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -6416,7 +6752,8 @@ static void x86emuOp_mov_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = srcval;
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
 
@@ -6441,7 +6778,8 @@ static void x86emuOp_mov_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = srcval;
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
 
@@ -6466,7 +6804,8 @@ static void x86emuOp_mov_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = srcval;
-        } else {
+        }
+        else {
             u16 *destreg;
             u16 srcval;
 
@@ -6489,7 +6828,8 @@ static void x86emuOp_mov_word_R_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = *srcreg;
-        } else {
+        }
+        else {
             u16 *destreg, *srcreg;
 
             destreg = DECODE_RM_WORD_REGISTER(rh);
@@ -6509,7 +6849,8 @@ static void x86emuOp_mov_word_R_RM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x8c
 ****************************************************************************/
-static void x86emuOp_mov_word_RM_SR(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_word_RM_SR(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u16 *destreg, *srcreg;
@@ -6564,7 +6905,8 @@ static void x86emuOp_mov_word_RM_SR(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x8d
 ****************************************************************************/
-static void x86emuOp_lea_word_R_M(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_lea_word_R_M(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -6576,13 +6918,16 @@ static void x86emuOp_lea_word_R_M(u8 X86EMU_UNUSED(op1))
     case 0:
         if (M.x86.mode & SYSMODE_PREFIX_ADDR) {
             u32 *srcreg = DECODE_RM_LONG_REGISTER(rh);
+
             DECODE_PRINTF(",");
             destoffset = decode_rm00_address(rl);
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *srcreg = (u32)destoffset;
-        } else {
+        }
+        else {
             u16 *srcreg = DECODE_RM_WORD_REGISTER(rh);
+
             DECODE_PRINTF(",");
             destoffset = decode_rm00_address(rl);
             DECODE_PRINTF("\n");
@@ -6593,13 +6938,16 @@ static void x86emuOp_lea_word_R_M(u8 X86EMU_UNUSED(op1))
     case 1:
         if (M.x86.mode & SYSMODE_PREFIX_ADDR) {
             u32 *srcreg = DECODE_RM_LONG_REGISTER(rh);
+
             DECODE_PRINTF(",");
             destoffset = decode_rm01_address(rl);
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *srcreg = (u32)destoffset;
-        } else {
+        }
+        else {
             u16 *srcreg = DECODE_RM_WORD_REGISTER(rh);
+
             DECODE_PRINTF(",");
             destoffset = decode_rm01_address(rl);
             DECODE_PRINTF("\n");
@@ -6610,13 +6958,16 @@ static void x86emuOp_lea_word_R_M(u8 X86EMU_UNUSED(op1))
     case 2:
         if (M.x86.mode & SYSMODE_PREFIX_ADDR) {
             u32 *srcreg = DECODE_RM_LONG_REGISTER(rh);
+
             DECODE_PRINTF(",");
             destoffset = decode_rm10_address(rl);
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *srcreg = (u32)destoffset;
-        } else {
+        }
+        else {
             u16 *srcreg = DECODE_RM_WORD_REGISTER(rh);
+
             DECODE_PRINTF(",");
             destoffset = decode_rm10_address(rl);
             DECODE_PRINTF("\n");
@@ -6636,7 +6987,8 @@ static void x86emuOp_lea_word_R_M(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x8e
 ****************************************************************************/
-static void x86emuOp_mov_word_SR_RM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_word_SR_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u16 *destreg, *srcreg;
@@ -6697,7 +7049,8 @@ static void x86emuOp_mov_word_SR_RM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x8f
 ****************************************************************************/
-static void x86emuOp_pop_RM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_pop_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -6719,7 +7072,8 @@ static void x86emuOp_pop_RM(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = pop_long();
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
 
             destoffset = decode_rm00_address(rl);
@@ -6738,7 +7092,8 @@ static void x86emuOp_pop_RM(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = pop_long();
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
 
             destoffset = decode_rm01_address(rl);
@@ -6757,7 +7112,8 @@ static void x86emuOp_pop_RM(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = pop_long();
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
 
             destoffset = decode_rm10_address(rl);
@@ -6775,7 +7131,8 @@ static void x86emuOp_pop_RM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF("\n");
             TRACE_AND_STEP();
             *destreg = pop_long();
-        } else {
+        }
+        else {
             u16 *destreg;
 
             destreg = DECODE_RM_WORD_REGISTER(rl);
@@ -6793,7 +7150,8 @@ static void x86emuOp_pop_RM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x90
 ****************************************************************************/
-static void x86emuOp_nop(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_nop(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("NOP\n");
@@ -6806,14 +7164,16 @@ static void x86emuOp_nop(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x91
 ****************************************************************************/
-static void x86emuOp_xchg_word_AX_CX(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_xchg_word_AX_CX(u8 X86EMU_UNUSED(op1))
 {
     u32 tmp;
 
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("XCHG\tEAX,ECX\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("XCHG\tAX,CX\n");
     }
     TRACE_AND_STEP();
@@ -6821,7 +7181,8 @@ static void x86emuOp_xchg_word_AX_CX(u8 X86EMU_UNUSED(op1))
         tmp = M.x86.R_EAX;
         M.x86.R_EAX = M.x86.R_ECX;
         M.x86.R_ECX = tmp;
-    } else {
+    }
+    else {
         tmp = M.x86.R_AX;
         M.x86.R_AX = M.x86.R_CX;
         M.x86.R_CX = (u16)tmp;
@@ -6834,14 +7195,16 @@ static void x86emuOp_xchg_word_AX_CX(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x92
 ****************************************************************************/
-static void x86emuOp_xchg_word_AX_DX(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_xchg_word_AX_DX(u8 X86EMU_UNUSED(op1))
 {
     u32 tmp;
 
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("XCHG\tEAX,EDX\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("XCHG\tAX,DX\n");
     }
     TRACE_AND_STEP();
@@ -6849,7 +7212,8 @@ static void x86emuOp_xchg_word_AX_DX(u8 X86EMU_UNUSED(op1))
         tmp = M.x86.R_EAX;
         M.x86.R_EAX = M.x86.R_EDX;
         M.x86.R_EDX = tmp;
-    } else {
+    }
+    else {
         tmp = M.x86.R_AX;
         M.x86.R_AX = M.x86.R_DX;
         M.x86.R_DX = (u16)tmp;
@@ -6862,14 +7226,16 @@ static void x86emuOp_xchg_word_AX_DX(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x93
 ****************************************************************************/
-static void x86emuOp_xchg_word_AX_BX(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_xchg_word_AX_BX(u8 X86EMU_UNUSED(op1))
 {
     u32 tmp;
 
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("XCHG\tEAX,EBX\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("XCHG\tAX,BX\n");
     }
     TRACE_AND_STEP();
@@ -6877,7 +7243,8 @@ static void x86emuOp_xchg_word_AX_BX(u8 X86EMU_UNUSED(op1))
         tmp = M.x86.R_EAX;
         M.x86.R_EAX = M.x86.R_EBX;
         M.x86.R_EBX = tmp;
-    } else {
+    }
+    else {
         tmp = M.x86.R_AX;
         M.x86.R_AX = M.x86.R_BX;
         M.x86.R_BX = (u16)tmp;
@@ -6890,14 +7257,16 @@ static void x86emuOp_xchg_word_AX_BX(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x94
 ****************************************************************************/
-static void x86emuOp_xchg_word_AX_SP(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_xchg_word_AX_SP(u8 X86EMU_UNUSED(op1))
 {
     u32 tmp;
 
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("XCHG\tEAX,ESP\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("XCHG\tAX,SP\n");
     }
     TRACE_AND_STEP();
@@ -6905,7 +7274,8 @@ static void x86emuOp_xchg_word_AX_SP(u8 X86EMU_UNUSED(op1))
         tmp = M.x86.R_EAX;
         M.x86.R_EAX = M.x86.R_ESP;
         M.x86.R_ESP = tmp;
-    } else {
+    }
+    else {
         tmp = M.x86.R_AX;
         M.x86.R_AX = M.x86.R_SP;
         M.x86.R_SP = (u16)tmp;
@@ -6918,14 +7288,16 @@ static void x86emuOp_xchg_word_AX_SP(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x95
 ****************************************************************************/
-static void x86emuOp_xchg_word_AX_BP(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_xchg_word_AX_BP(u8 X86EMU_UNUSED(op1))
 {
     u32 tmp;
 
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("XCHG\tEAX,EBP\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("XCHG\tAX,BP\n");
     }
     TRACE_AND_STEP();
@@ -6933,7 +7305,8 @@ static void x86emuOp_xchg_word_AX_BP(u8 X86EMU_UNUSED(op1))
         tmp = M.x86.R_EAX;
         M.x86.R_EAX = M.x86.R_EBP;
         M.x86.R_EBP = tmp;
-    } else {
+    }
+    else {
         tmp = M.x86.R_AX;
         M.x86.R_AX = M.x86.R_BP;
         M.x86.R_BP = (u16)tmp;
@@ -6946,14 +7319,16 @@ static void x86emuOp_xchg_word_AX_BP(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x96
 ****************************************************************************/
-static void x86emuOp_xchg_word_AX_SI(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_xchg_word_AX_SI(u8 X86EMU_UNUSED(op1))
 {
     u32 tmp;
 
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("XCHG\tEAX,ESI\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("XCHG\tAX,SI\n");
     }
     TRACE_AND_STEP();
@@ -6961,7 +7336,8 @@ static void x86emuOp_xchg_word_AX_SI(u8 X86EMU_UNUSED(op1))
         tmp = M.x86.R_EAX;
         M.x86.R_EAX = M.x86.R_ESI;
         M.x86.R_ESI = tmp;
-    } else {
+    }
+    else {
         tmp = M.x86.R_AX;
         M.x86.R_AX = M.x86.R_SI;
         M.x86.R_SI = (u16)tmp;
@@ -6974,14 +7350,16 @@ static void x86emuOp_xchg_word_AX_SI(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x97
 ****************************************************************************/
-static void x86emuOp_xchg_word_AX_DI(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_xchg_word_AX_DI(u8 X86EMU_UNUSED(op1))
 {
     u32 tmp;
 
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("XCHG\tEAX,EDI\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("XCHG\tAX,DI\n");
     }
     TRACE_AND_STEP();
@@ -6989,7 +7367,8 @@ static void x86emuOp_xchg_word_AX_DI(u8 X86EMU_UNUSED(op1))
         tmp = M.x86.R_EAX;
         M.x86.R_EAX = M.x86.R_EDI;
         M.x86.R_EDI = tmp;
-    } else {
+    }
+    else {
         tmp = M.x86.R_AX;
         M.x86.R_AX = M.x86.R_DI;
         M.x86.R_DI = (u16)tmp;
@@ -7002,25 +7381,30 @@ static void x86emuOp_xchg_word_AX_DI(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x98
 ****************************************************************************/
-static void x86emuOp_cbw(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_cbw(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("CWDE\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("CBW\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         if (M.x86.R_AX & 0x8000) {
             M.x86.R_EAX |= 0xffff0000;
-        } else {
+        }
+        else {
             M.x86.R_EAX &= 0x0000ffff;
         }
-    } else {
+    }
+    else {
         if (M.x86.R_AL & 0x80) {
             M.x86.R_AH = 0xff;
-        } else {
+        }
+        else {
             M.x86.R_AH = 0x0;
         }
     }
@@ -7032,12 +7416,14 @@ static void x86emuOp_cbw(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x99
 ****************************************************************************/
-static void x86emuOp_cwd(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_cwd(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("CDQ\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("CWD\n");
     }
     DECODE_PRINTF("CWD\n");
@@ -7045,13 +7431,16 @@ static void x86emuOp_cwd(u8 X86EMU_UNUSED(op1))
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         if (M.x86.R_EAX & 0x80000000) {
             M.x86.R_EDX = 0xffffffff;
-        } else {
+        }
+        else {
             M.x86.R_EDX = 0x0;
         }
-    } else {
+    }
+    else {
         if (M.x86.R_AX & 0x8000) {
             M.x86.R_DX = 0xffff;
-        } else {
+        }
+        else {
             M.x86.R_DX = 0x0;
         }
     }
@@ -7063,7 +7452,8 @@ static void x86emuOp_cwd(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x9a
 ****************************************************************************/
-static void x86emuOp_call_far_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_call_far_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 farseg, faroff;
 
@@ -7072,7 +7462,8 @@ static void x86emuOp_call_far_IMM(u8 X86EMU_UNUSED(op1))
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
 	faroff = fetch_long_imm();
 	farseg = fetch_word_imm();
-    } else {
+    }
+    else {
 	faroff = fetch_word_imm();
 	farseg = fetch_word_imm();
     }
@@ -7091,7 +7482,8 @@ static void x86emuOp_call_far_IMM(u8 X86EMU_UNUSED(op1))
     M.x86.R_CS = farseg;
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
 	push_long(M.x86.R_EIP);
-    } else {
+    }
+    else {
 	push_word(M.x86.R_IP);
     }
     M.x86.R_EIP = faroff & 0xffff;
@@ -7103,7 +7495,8 @@ static void x86emuOp_call_far_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x9b
 ****************************************************************************/
-static void x86emuOp_wait(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_wait(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("WAIT");
@@ -7117,14 +7510,16 @@ static void x86emuOp_wait(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x9c
 ****************************************************************************/
-static void x86emuOp_pushf_word(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_pushf_word(u8 X86EMU_UNUSED(op1))
 {
     u32 flags;
 
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("PUSHFD\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("PUSHF\n");
     }
     TRACE_AND_STEP();
@@ -7133,7 +7528,8 @@ static void x86emuOp_pushf_word(u8 X86EMU_UNUSED(op1))
     flags = (M.x86.R_EFLG & F_MSK) | F_ALWAYS_ON;
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         push_long(flags);
-    } else {
+    }
+    else {
         push_word((u16)flags);
     }
     DECODE_CLEAR_SEGOVR();
@@ -7144,18 +7540,21 @@ static void x86emuOp_pushf_word(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x9d
 ****************************************************************************/
-static void x86emuOp_popf_word(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_popf_word(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("POPFD\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("POPF\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EFLG = pop_long();
-    } else {
+    }
+    else {
         M.x86.R_FLG = pop_word();
     }
     DECODE_CLEAR_SEGOVR();
@@ -7166,7 +7565,8 @@ static void x86emuOp_popf_word(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x9e
 ****************************************************************************/
-static void x86emuOp_sahf(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_sahf(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("SAHF\n");
@@ -7183,7 +7583,8 @@ static void x86emuOp_sahf(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x9f
 ****************************************************************************/
-static void x86emuOp_lahf(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_lahf(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("LAHF\n");
@@ -7200,7 +7601,8 @@ static void x86emuOp_lahf(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xa0
 ****************************************************************************/
-static void x86emuOp_mov_AL_M_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_AL_M_IMM(u8 X86EMU_UNUSED(op1))
 {
     u16 offset;
 
@@ -7218,7 +7620,8 @@ static void x86emuOp_mov_AL_M_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xa1
 ****************************************************************************/
-static void x86emuOp_mov_AX_M_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_AX_M_IMM(u8 X86EMU_UNUSED(op1))
 {
     u16 offset;
 
@@ -7226,13 +7629,15 @@ static void x86emuOp_mov_AX_M_IMM(u8 X86EMU_UNUSED(op1))
     offset = fetch_word_imm();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF2("MOV\tEAX,[%04x]\n", offset);
-    } else {
+    }
+    else {
         DECODE_PRINTF2("MOV\tAX,[%04x]\n", offset);
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EAX = fetch_data_long(offset);
-    } else {
+    }
+    else {
         M.x86.R_AX = fetch_data_word(offset);
     }
     DECODE_CLEAR_SEGOVR();
@@ -7243,7 +7648,8 @@ static void x86emuOp_mov_AX_M_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xa2
 ****************************************************************************/
-static void x86emuOp_mov_M_AL_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_M_AL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u16 offset;
 
@@ -7261,7 +7667,8 @@ static void x86emuOp_mov_M_AL_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xa3
 ****************************************************************************/
-static void x86emuOp_mov_M_AX_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_M_AX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u16 offset;
 
@@ -7269,13 +7676,15 @@ static void x86emuOp_mov_M_AX_IMM(u8 X86EMU_UNUSED(op1))
     offset = fetch_word_imm();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF2("MOV\t[%04x],EAX\n", offset);
-    } else {
+    }
+    else {
         DECODE_PRINTF2("MOV\t[%04x],AX\n", offset);
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         store_data_long(offset, M.x86.R_EAX);
-    } else {
+    }
+    else {
         store_data_word(offset, M.x86.R_AX);
     }
     DECODE_CLEAR_SEGOVR();
@@ -7286,7 +7695,8 @@ static void x86emuOp_mov_M_AX_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xa4
 ****************************************************************************/
-static void x86emuOp_movs_byte(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_movs_byte(u8 X86EMU_UNUSED(op1))
 {
     u8  val;
     u32 count;
@@ -7321,7 +7731,8 @@ static void x86emuOp_movs_byte(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xa5
 ****************************************************************************/
-static void x86emuOp_movs_word(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_movs_word(u8 X86EMU_UNUSED(op1))
 {
     u32 val;
     int inc;
@@ -7334,7 +7745,8 @@ static void x86emuOp_movs_word(u8 X86EMU_UNUSED(op1))
             inc = -4;
         else
             inc = 4;
-    } else {
+    }
+    else {
         DECODE_PRINTF("MOVS\tWORD\n");
         if (ACCESS_FLAG(F_DF))      /* down */
             inc = -2;
@@ -7354,7 +7766,8 @@ static void x86emuOp_movs_word(u8 X86EMU_UNUSED(op1))
         if (M.x86.mode & SYSMODE_PREFIX_DATA) {
             val = fetch_data_long(M.x86.R_SI);
             store_data_long_abs(M.x86.R_ES, M.x86.R_DI, val);
-        } else {
+        }
+        else {
             val = fetch_data_word(M.x86.R_SI);
             store_data_word_abs(M.x86.R_ES, M.x86.R_DI, (u16)val);
         }
@@ -7369,7 +7782,8 @@ static void x86emuOp_movs_word(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xa6
 ****************************************************************************/
-static void x86emuOp_cmps_byte(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_cmps_byte(u8 X86EMU_UNUSED(op1))
 {
     s8 val1, val2;
     int inc;
@@ -7396,7 +7810,8 @@ static void x86emuOp_cmps_byte(u8 X86EMU_UNUSED(op1))
                 break;
         }
         M.x86.mode &= ~SYSMODE_PREFIX_REPE;
-    } else if (M.x86.mode & SYSMODE_PREFIX_REPNE) {
+    }
+    else if (M.x86.mode & SYSMODE_PREFIX_REPNE) {
         /* REPNE  */
         /* move them until CX is ZERO. */
         while (M.x86.R_CX != 0) {
@@ -7410,7 +7825,8 @@ static void x86emuOp_cmps_byte(u8 X86EMU_UNUSED(op1))
                 break;          /* zero flag set means equal */
         }
         M.x86.mode &= ~SYSMODE_PREFIX_REPNE;
-    } else {
+    }
+    else {
         val1 = fetch_data_byte(M.x86.R_SI);
         val2 = fetch_data_byte_abs(M.x86.R_ES, M.x86.R_DI);
         cmp_byte(val1, val2);
@@ -7425,7 +7841,8 @@ static void x86emuOp_cmps_byte(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xa7
 ****************************************************************************/
-static void x86emuOp_cmps_word(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_cmps_word(u8 X86EMU_UNUSED(op1))
 {
     u32 val1,val2;
     int inc;
@@ -7437,7 +7854,8 @@ static void x86emuOp_cmps_word(u8 X86EMU_UNUSED(op1))
             inc = -4;
         else
             inc = 4;
-    } else {
+    }
+    else {
         DECODE_PRINTF("CMPS\tWORD\n");
         if (ACCESS_FLAG(F_DF))   /* down */
             inc = -2;
@@ -7453,7 +7871,8 @@ static void x86emuOp_cmps_word(u8 X86EMU_UNUSED(op1))
                 val1 = fetch_data_long(M.x86.R_SI);
                 val2 = fetch_data_long_abs(M.x86.R_ES, M.x86.R_DI);
                 cmp_long(val1, val2);
-            } else {
+            }
+            else {
                 val1 = fetch_data_word(M.x86.R_SI);
                 val2 = fetch_data_word_abs(M.x86.R_ES, M.x86.R_DI);
                 cmp_word((u16)val1, (u16)val2);
@@ -7465,7 +7884,8 @@ static void x86emuOp_cmps_word(u8 X86EMU_UNUSED(op1))
                 break;
         }
         M.x86.mode &= ~SYSMODE_PREFIX_REPE;
-    } else if (M.x86.mode & SYSMODE_PREFIX_REPNE) {
+    }
+    else if (M.x86.mode & SYSMODE_PREFIX_REPNE) {
         /* REPNE  */
         /* move them until CX is ZERO. */
         while (M.x86.R_CX != 0) {
@@ -7473,7 +7893,8 @@ static void x86emuOp_cmps_word(u8 X86EMU_UNUSED(op1))
                 val1 = fetch_data_long(M.x86.R_SI);
                 val2 = fetch_data_long_abs(M.x86.R_ES, M.x86.R_DI);
                 cmp_long(val1, val2);
-            } else {
+            }
+            else {
                 val1 = fetch_data_word(M.x86.R_SI);
                 val2 = fetch_data_word_abs(M.x86.R_ES, M.x86.R_DI);
                 cmp_word((u16)val1, (u16)val2);
@@ -7485,12 +7906,14 @@ static void x86emuOp_cmps_word(u8 X86EMU_UNUSED(op1))
                 break;          /* zero flag set means equal */
         }
         M.x86.mode &= ~SYSMODE_PREFIX_REPNE;
-    } else {
+    }
+    else {
         if (M.x86.mode & SYSMODE_PREFIX_DATA) {
             val1 = fetch_data_long(M.x86.R_SI);
             val2 = fetch_data_long_abs(M.x86.R_ES, M.x86.R_DI);
             cmp_long(val1, val2);
-        } else {
+        }
+        else {
             val1 = fetch_data_word(M.x86.R_SI);
             val2 = fetch_data_word_abs(M.x86.R_ES, M.x86.R_DI);
             cmp_word((u16)val1, (u16)val2);
@@ -7506,7 +7929,8 @@ static void x86emuOp_cmps_word(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xa8
 ****************************************************************************/
-static void x86emuOp_test_AL_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_test_AL_IMM(u8 X86EMU_UNUSED(op1))
 {
     int imm;
 
@@ -7524,7 +7948,8 @@ static void x86emuOp_test_AL_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xa9
 ****************************************************************************/
-static void x86emuOp_test_AX_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_test_AX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -7532,7 +7957,8 @@ static void x86emuOp_test_AX_IMM(u8 X86EMU_UNUSED(op1))
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("TEST\tEAX,");
         srcval = fetch_long_imm();
-    } else {
+    }
+    else {
         DECODE_PRINTF("TEST\tAX,");
         srcval = fetch_word_imm();
     }
@@ -7540,7 +7966,8 @@ static void x86emuOp_test_AX_IMM(u8 X86EMU_UNUSED(op1))
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         test_long(M.x86.R_EAX, srcval);
-    } else {
+    }
+    else {
         test_word(M.x86.R_AX, (u16)srcval);
     }
     DECODE_CLEAR_SEGOVR();
@@ -7551,7 +7978,8 @@ static void x86emuOp_test_AX_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xaa
 ****************************************************************************/
-static void x86emuOp_stos_byte(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_stos_byte(u8 X86EMU_UNUSED(op1))
 {
     int inc;
 
@@ -7571,7 +7999,8 @@ static void x86emuOp_stos_byte(u8 X86EMU_UNUSED(op1))
             M.x86.R_DI += inc;
         }
         M.x86.mode &= ~(SYSMODE_PREFIX_REPE | SYSMODE_PREFIX_REPNE);
-    } else {
+    }
+    else {
         store_data_byte_abs(M.x86.R_ES, M.x86.R_DI, M.x86.R_AL);
         M.x86.R_DI += inc;
     }
@@ -7583,7 +8012,8 @@ static void x86emuOp_stos_byte(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xab
 ****************************************************************************/
-static void x86emuOp_stos_word(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_stos_word(u8 X86EMU_UNUSED(op1))
 {
     int inc;
     u32 count;
@@ -7595,7 +8025,8 @@ static void x86emuOp_stos_word(u8 X86EMU_UNUSED(op1))
             inc = -4;
         else
             inc = 4;
-    } else {
+    }
+    else {
         DECODE_PRINTF("STOS\tWORD\n");
         if (ACCESS_FLAG(F_DF))   /* down */
             inc = -2;
@@ -7614,7 +8045,8 @@ static void x86emuOp_stos_word(u8 X86EMU_UNUSED(op1))
     while (count--) {
         if (M.x86.mode & SYSMODE_PREFIX_DATA) {
             store_data_long_abs(M.x86.R_ES, M.x86.R_DI, M.x86.R_EAX);
-        } else {
+        }
+        else {
             store_data_word_abs(M.x86.R_ES, M.x86.R_DI, M.x86.R_AX);
         }
         M.x86.R_DI += inc;
@@ -7627,7 +8059,8 @@ static void x86emuOp_stos_word(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xac
 ****************************************************************************/
-static void x86emuOp_lods_byte(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_lods_byte(u8 X86EMU_UNUSED(op1))
 {
     int inc;
 
@@ -7647,7 +8080,8 @@ static void x86emuOp_lods_byte(u8 X86EMU_UNUSED(op1))
             M.x86.R_SI += inc;
         }
         M.x86.mode &= ~(SYSMODE_PREFIX_REPE | SYSMODE_PREFIX_REPNE);
-    } else {
+    }
+    else {
         M.x86.R_AL = fetch_data_byte(M.x86.R_SI);
         M.x86.R_SI += inc;
     }
@@ -7659,7 +8093,8 @@ static void x86emuOp_lods_byte(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xad
 ****************************************************************************/
-static void x86emuOp_lods_word(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_lods_word(u8 X86EMU_UNUSED(op1))
 {
     int inc;
     u32 count;
@@ -7671,7 +8106,8 @@ static void x86emuOp_lods_word(u8 X86EMU_UNUSED(op1))
             inc = -4;
         else
             inc = 4;
-    } else {
+    }
+    else {
         DECODE_PRINTF("LODS\tWORD\n");
         if (ACCESS_FLAG(F_DF))   /* down */
             inc = -2;
@@ -7690,7 +8126,8 @@ static void x86emuOp_lods_word(u8 X86EMU_UNUSED(op1))
     while (count--) {
         if (M.x86.mode & SYSMODE_PREFIX_DATA) {
             M.x86.R_EAX = fetch_data_long(M.x86.R_SI);
-        } else {
+        }
+        else {
             M.x86.R_AX = fetch_data_word(M.x86.R_SI);
         }
         M.x86.R_SI += inc;
@@ -7703,7 +8140,8 @@ static void x86emuOp_lods_word(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xae
 ****************************************************************************/
-static void x86emuOp_scas_byte(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_scas_byte(u8 X86EMU_UNUSED(op1))
 {
     s8 val2;
     int inc;
@@ -7727,7 +8165,8 @@ static void x86emuOp_scas_byte(u8 X86EMU_UNUSED(op1))
                 break;
         }
         M.x86.mode &= ~SYSMODE_PREFIX_REPE;
-    } else if (M.x86.mode & SYSMODE_PREFIX_REPNE) {
+    }
+    else if (M.x86.mode & SYSMODE_PREFIX_REPNE) {
         /* REPNE  */
         /* move them until CX is ZERO. */
         while (M.x86.R_CX != 0) {
@@ -7739,7 +8178,8 @@ static void x86emuOp_scas_byte(u8 X86EMU_UNUSED(op1))
                 break;          /* zero flag set means equal */
         }
         M.x86.mode &= ~SYSMODE_PREFIX_REPNE;
-    } else {
+    }
+    else {
         val2 = fetch_data_byte_abs(M.x86.R_ES, M.x86.R_DI);
         cmp_byte(M.x86.R_AL, val2);
         M.x86.R_DI += inc;
@@ -7752,7 +8192,8 @@ static void x86emuOp_scas_byte(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xaf
 ****************************************************************************/
-static void x86emuOp_scas_word(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_scas_word(u8 X86EMU_UNUSED(op1))
 {
     int inc;
     u32 val;
@@ -7764,7 +8205,8 @@ static void x86emuOp_scas_word(u8 X86EMU_UNUSED(op1))
             inc = -4;
         else
             inc = 4;
-    } else {
+    }
+    else {
         DECODE_PRINTF("SCAS\tWORD\n");
         if (ACCESS_FLAG(F_DF))   /* down */
             inc = -2;
@@ -7779,7 +8221,8 @@ static void x86emuOp_scas_word(u8 X86EMU_UNUSED(op1))
             if (M.x86.mode & SYSMODE_PREFIX_DATA) {
                 val = fetch_data_long_abs(M.x86.R_ES, M.x86.R_DI);
                 cmp_long(M.x86.R_EAX, val);
-            } else {
+            }
+            else {
                 val = fetch_data_word_abs(M.x86.R_ES, M.x86.R_DI);
                 cmp_word(M.x86.R_AX, (u16)val);
             }
@@ -7789,14 +8232,16 @@ static void x86emuOp_scas_word(u8 X86EMU_UNUSED(op1))
                 break;
         }
         M.x86.mode &= ~SYSMODE_PREFIX_REPE;
-    } else if (M.x86.mode & SYSMODE_PREFIX_REPNE) {
+    }
+    else if (M.x86.mode & SYSMODE_PREFIX_REPNE) {
         /* REPNE  */
         /* move them until CX is ZERO. */
         while (M.x86.R_CX != 0) {
             if (M.x86.mode & SYSMODE_PREFIX_DATA) {
                 val = fetch_data_long_abs(M.x86.R_ES, M.x86.R_DI);
                 cmp_long(M.x86.R_EAX, val);
-            } else {
+            }
+            else {
                 val = fetch_data_word_abs(M.x86.R_ES, M.x86.R_DI);
                 cmp_word(M.x86.R_AX, (u16)val);
             }
@@ -7806,11 +8251,13 @@ static void x86emuOp_scas_word(u8 X86EMU_UNUSED(op1))
                 break;          /* zero flag set means equal */
         }
         M.x86.mode &= ~SYSMODE_PREFIX_REPNE;
-    } else {
+    }
+    else {
         if (M.x86.mode & SYSMODE_PREFIX_DATA) {
             val = fetch_data_long_abs(M.x86.R_ES, M.x86.R_DI);
             cmp_long(M.x86.R_EAX, val);
-        } else {
+        }
+        else {
             val = fetch_data_word_abs(M.x86.R_ES, M.x86.R_DI);
             cmp_word(M.x86.R_AX, (u16)val);
         }
@@ -7824,7 +8271,8 @@ static void x86emuOp_scas_word(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xb0
 ****************************************************************************/
-static void x86emuOp_mov_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 imm;
 
@@ -7842,7 +8290,8 @@ static void x86emuOp_mov_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xb1
 ****************************************************************************/
-static void x86emuOp_mov_byte_CL_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_byte_CL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 imm;
 
@@ -7860,7 +8309,8 @@ static void x86emuOp_mov_byte_CL_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xb2
 ****************************************************************************/
-static void x86emuOp_mov_byte_DL_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_byte_DL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 imm;
 
@@ -7878,7 +8328,8 @@ static void x86emuOp_mov_byte_DL_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xb3
 ****************************************************************************/
-static void x86emuOp_mov_byte_BL_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_byte_BL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 imm;
 
@@ -7896,7 +8347,8 @@ static void x86emuOp_mov_byte_BL_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xb4
 ****************************************************************************/
-static void x86emuOp_mov_byte_AH_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_byte_AH_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 imm;
 
@@ -7914,7 +8366,8 @@ static void x86emuOp_mov_byte_AH_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xb5
 ****************************************************************************/
-static void x86emuOp_mov_byte_CH_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_byte_CH_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 imm;
 
@@ -7932,7 +8385,8 @@ static void x86emuOp_mov_byte_CH_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xb6
 ****************************************************************************/
-static void x86emuOp_mov_byte_DH_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_byte_DH_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 imm;
 
@@ -7950,7 +8404,8 @@ static void x86emuOp_mov_byte_DH_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xb7
 ****************************************************************************/
-static void x86emuOp_mov_byte_BH_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_byte_BH_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 imm;
 
@@ -7968,7 +8423,8 @@ static void x86emuOp_mov_byte_BH_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xb8
 ****************************************************************************/
-static void x86emuOp_mov_word_AX_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -7976,7 +8432,8 @@ static void x86emuOp_mov_word_AX_IMM(u8 X86EMU_UNUSED(op1))
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("MOV\tEAX,");
         srcval = fetch_long_imm();
-    } else {
+    }
+    else {
         DECODE_PRINTF("MOV\tAX,");
         srcval = fetch_word_imm();
     }
@@ -7984,7 +8441,8 @@ static void x86emuOp_mov_word_AX_IMM(u8 X86EMU_UNUSED(op1))
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EAX = srcval;
-    } else {
+    }
+    else {
         M.x86.R_AX = (u16)srcval;
     }
     DECODE_CLEAR_SEGOVR();
@@ -7995,7 +8453,8 @@ static void x86emuOp_mov_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xb9
 ****************************************************************************/
-static void x86emuOp_mov_word_CX_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_word_CX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -8003,7 +8462,8 @@ static void x86emuOp_mov_word_CX_IMM(u8 X86EMU_UNUSED(op1))
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("MOV\tECX,");
         srcval = fetch_long_imm();
-    } else {
+    }
+    else {
         DECODE_PRINTF("MOV\tCX,");
         srcval = fetch_word_imm();
     }
@@ -8011,7 +8471,8 @@ static void x86emuOp_mov_word_CX_IMM(u8 X86EMU_UNUSED(op1))
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_ECX = srcval;
-    } else {
+    }
+    else {
         M.x86.R_CX = (u16)srcval;
     }
     DECODE_CLEAR_SEGOVR();
@@ -8022,7 +8483,8 @@ static void x86emuOp_mov_word_CX_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xba
 ****************************************************************************/
-static void x86emuOp_mov_word_DX_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_word_DX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -8030,7 +8492,8 @@ static void x86emuOp_mov_word_DX_IMM(u8 X86EMU_UNUSED(op1))
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("MOV\tEDX,");
         srcval = fetch_long_imm();
-    } else {
+    }
+    else {
         DECODE_PRINTF("MOV\tDX,");
         srcval = fetch_word_imm();
     }
@@ -8038,7 +8501,8 @@ static void x86emuOp_mov_word_DX_IMM(u8 X86EMU_UNUSED(op1))
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EDX = srcval;
-    } else {
+    }
+    else {
         M.x86.R_DX = (u16)srcval;
     }
     DECODE_CLEAR_SEGOVR();
@@ -8049,7 +8513,8 @@ static void x86emuOp_mov_word_DX_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xbb
 ****************************************************************************/
-static void x86emuOp_mov_word_BX_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_word_BX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -8057,7 +8522,8 @@ static void x86emuOp_mov_word_BX_IMM(u8 X86EMU_UNUSED(op1))
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("MOV\tEBX,");
         srcval = fetch_long_imm();
-    } else {
+    }
+    else {
         DECODE_PRINTF("MOV\tBX,");
         srcval = fetch_word_imm();
     }
@@ -8065,7 +8531,8 @@ static void x86emuOp_mov_word_BX_IMM(u8 X86EMU_UNUSED(op1))
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EBX = srcval;
-    } else {
+    }
+    else {
         M.x86.R_BX = (u16)srcval;
     }
     DECODE_CLEAR_SEGOVR();
@@ -8076,7 +8543,8 @@ static void x86emuOp_mov_word_BX_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xbc
 ****************************************************************************/
-static void x86emuOp_mov_word_SP_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_word_SP_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -8084,7 +8552,8 @@ static void x86emuOp_mov_word_SP_IMM(u8 X86EMU_UNUSED(op1))
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("MOV\tESP,");
         srcval = fetch_long_imm();
-    } else {
+    }
+    else {
         DECODE_PRINTF("MOV\tSP,");
         srcval = fetch_word_imm();
     }
@@ -8092,7 +8561,8 @@ static void x86emuOp_mov_word_SP_IMM(u8 X86EMU_UNUSED(op1))
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_ESP = srcval;
-    } else {
+    }
+    else {
         M.x86.R_SP = (u16)srcval;
     }
     DECODE_CLEAR_SEGOVR();
@@ -8103,7 +8573,8 @@ static void x86emuOp_mov_word_SP_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xbd
 ****************************************************************************/
-static void x86emuOp_mov_word_BP_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_word_BP_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -8111,7 +8582,8 @@ static void x86emuOp_mov_word_BP_IMM(u8 X86EMU_UNUSED(op1))
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("MOV\tEBP,");
         srcval = fetch_long_imm();
-    } else {
+    }
+    else {
         DECODE_PRINTF("MOV\tBP,");
         srcval = fetch_word_imm();
     }
@@ -8119,7 +8591,8 @@ static void x86emuOp_mov_word_BP_IMM(u8 X86EMU_UNUSED(op1))
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EBP = srcval;
-    } else {
+    }
+    else {
         M.x86.R_BP = (u16)srcval;
     }
     DECODE_CLEAR_SEGOVR();
@@ -8130,7 +8603,8 @@ static void x86emuOp_mov_word_BP_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xbe
 ****************************************************************************/
-static void x86emuOp_mov_word_SI_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_word_SI_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -8138,7 +8612,8 @@ static void x86emuOp_mov_word_SI_IMM(u8 X86EMU_UNUSED(op1))
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("MOV\tESI,");
         srcval = fetch_long_imm();
-    } else {
+    }
+    else {
         DECODE_PRINTF("MOV\tSI,");
         srcval = fetch_word_imm();
     }
@@ -8146,7 +8621,8 @@ static void x86emuOp_mov_word_SI_IMM(u8 X86EMU_UNUSED(op1))
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_ESI = srcval;
-    } else {
+    }
+    else {
         M.x86.R_SI = (u16)srcval;
     }
     DECODE_CLEAR_SEGOVR();
@@ -8157,7 +8633,8 @@ static void x86emuOp_mov_word_SI_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xbf
 ****************************************************************************/
-static void x86emuOp_mov_word_DI_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_word_DI_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -8165,7 +8642,8 @@ static void x86emuOp_mov_word_DI_IMM(u8 X86EMU_UNUSED(op1))
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("MOV\tEDI,");
         srcval = fetch_long_imm();
-    } else {
+    }
+    else {
         DECODE_PRINTF("MOV\tDI,");
         srcval = fetch_word_imm();
     }
@@ -8173,7 +8651,8 @@ static void x86emuOp_mov_word_DI_IMM(u8 X86EMU_UNUSED(op1))
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EDI = srcval;
-    } else {
+    }
+    else {
         M.x86.R_DI = (u16)srcval;
     }
     DECODE_CLEAR_SEGOVR();
@@ -8181,23 +8660,16 @@ static void x86emuOp_mov_word_DI_IMM(u8 X86EMU_UNUSED(op1))
 }
 
 /* used by opcodes c0, d0, and d2. */
-static u8(*opcD0_byte_operation[])(u8 d, u8 s) =
-{
-    rol_byte,
-    ror_byte,
-    rcl_byte,
-    rcr_byte,
-    shl_byte,
-    shr_byte,
-    shl_byte,           /* sal_byte === shl_byte  by definition */
-    sar_byte,
-};
+static u8(*opcD0_byte_operation[]) (u8 d, u8 s) = {
+    rol_byte, ror_byte, rcl_byte, rcr_byte, shl_byte, shr_byte, shl_byte,       /* sal_byte === shl_byte  by definition */
+sar_byte,};
 
 /****************************************************************************
 REMARKS:
 Handles opcode 0xc0
 ****************************************************************************/
-static void x86emuOp_opcC0_byte_RM_MEM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_opcC0_byte_RM_MEM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg;
@@ -8294,36 +8766,21 @@ static void x86emuOp_opcC0_byte_RM_MEM(u8 X86EMU_UNUSED(op1))
 }
 
 /* used by opcodes c1, d1, and d3. */
-static u16(*opcD1_word_operation[])(u16 s, u8 d) =
-{
-    rol_word,
-    ror_word,
-    rcl_word,
-    rcr_word,
-    shl_word,
-    shr_word,
-    shl_word,           /* sal_byte === shl_byte  by definition */
-    sar_word,
-};
+static u16(*opcD1_word_operation[]) (u16 s, u8 d) = {
+    rol_word, ror_word, rcl_word, rcr_word, shl_word, shr_word, shl_word,       /* sal_byte === shl_byte  by definition */
+sar_word,};
 
 /* used by opcodes c1, d1, and d3. */
-static u32 (*opcD1_long_operation[])(u32 s, u8 d) =
-{
-    rol_long,
-    ror_long,
-    rcl_long,
-    rcr_long,
-    shl_long,
-    shr_long,
-    shl_long,           /* sal_byte === shl_byte  by definition */
-    sar_long,
-};
+static u32(*opcD1_long_operation[]) (u32 s, u8 d) = {
+    rol_long, ror_long, rcl_long, rcr_long, shl_long, shr_long, shl_long,       /* sal_byte === shl_byte  by definition */
+sar_long,};
 
 /****************************************************************************
 REMARKS:
 Handles opcode 0xc1
 ****************************************************************************/
-static void x86emuOp_opcC1_word_RM_MEM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_opcC1_word_RM_MEM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -8386,7 +8843,8 @@ static void x86emuOp_opcC1_word_RM_MEM(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = (*opcD1_long_operation[rh]) (destval, amt);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
 
             DECODE_PRINTF("WORD PTR ");
@@ -8411,7 +8869,8 @@ static void x86emuOp_opcC1_word_RM_MEM(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = (*opcD1_long_operation[rh]) (destval, amt);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
 
             DECODE_PRINTF("WORD PTR ");
@@ -8436,7 +8895,8 @@ static void x86emuOp_opcC1_word_RM_MEM(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = (*opcD1_long_operation[rh]) (destval, amt);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
 
             DECODE_PRINTF("WORD PTR ");
@@ -8458,7 +8918,8 @@ static void x86emuOp_opcC1_word_RM_MEM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF2(",%x\n", amt);
             TRACE_AND_STEP();
             *destreg = (*opcD1_long_operation[rh]) (*destreg, amt);
-        } else {
+        }
+        else {
             u16 *destreg;
 
             destreg = DECODE_RM_WORD_REGISTER(rl);
@@ -8477,7 +8938,8 @@ static void x86emuOp_opcC1_word_RM_MEM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xc2
 ****************************************************************************/
-static void x86emuOp_ret_near_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_ret_near_IMM(u8 X86EMU_UNUSED(op1))
 {
     u16 imm;
 
@@ -8497,7 +8959,8 @@ static void x86emuOp_ret_near_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xc3
 ****************************************************************************/
-static void x86emuOp_ret_near(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_ret_near(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("RET\n");
@@ -8512,7 +8975,8 @@ static void x86emuOp_ret_near(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xc4
 ****************************************************************************/
-static void x86emuOp_les_R_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_les_R_IMM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rh, rl;
     u16 *dstreg;
@@ -8561,7 +9025,8 @@ static void x86emuOp_les_R_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xc5
 ****************************************************************************/
-static void x86emuOp_lds_R_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_lds_R_IMM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rh, rl;
     u16 *dstreg;
@@ -8610,7 +9075,8 @@ static void x86emuOp_lds_R_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xc6
 ****************************************************************************/
-static void x86emuOp_mov_byte_RM_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_byte_RM_IMM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg;
@@ -8665,7 +9131,8 @@ static void x86emuOp_mov_byte_RM_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xc7
 ****************************************************************************/
-static void x86emuOp_mov_word_RM_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_mov_word_RM_IMM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -8688,7 +9155,8 @@ static void x86emuOp_mov_word_RM_IMM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF2(",%x\n", imm);
             TRACE_AND_STEP();
             store_data_long(destoffset, imm);
-        } else {
+        }
+        else {
             u16 imm;
 
             DECODE_PRINTF("WORD PTR ");
@@ -8709,7 +9177,8 @@ static void x86emuOp_mov_word_RM_IMM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF2(",%x\n", imm);
             TRACE_AND_STEP();
             store_data_long(destoffset, imm);
-        } else {
+        }
+        else {
             u16 imm;
 
             DECODE_PRINTF("WORD PTR ");
@@ -8730,7 +9199,8 @@ static void x86emuOp_mov_word_RM_IMM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF2(",%x\n", imm);
             TRACE_AND_STEP();
             store_data_long(destoffset, imm);
-        } else {
+        }
+        else {
             u16 imm;
 
             DECODE_PRINTF("WORD PTR ");
@@ -8751,7 +9221,8 @@ static void x86emuOp_mov_word_RM_IMM(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF2(",%x\n", imm);
             TRACE_AND_STEP();
             *destreg = imm;
-        } else {
+        }
+        else {
 			u16 *destreg;
 			u16 imm;
 
@@ -8771,7 +9242,8 @@ static void x86emuOp_mov_word_RM_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xc8
 ****************************************************************************/
-static void x86emuOp_enter(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_enter(u8 X86EMU_UNUSED(op1))
 {
     u16 local,frame_pointer;
     u8  nesting;
@@ -8802,7 +9274,8 @@ static void x86emuOp_enter(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xc9
 ****************************************************************************/
-static void x86emuOp_leave(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_leave(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("LEAVE\n");
@@ -8817,7 +9290,8 @@ static void x86emuOp_leave(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xca
 ****************************************************************************/
-static void x86emuOp_ret_far_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_ret_far_IMM(u8 X86EMU_UNUSED(op1))
 {
     u16 imm;
 
@@ -8838,7 +9312,8 @@ static void x86emuOp_ret_far_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xcb
 ****************************************************************************/
-static void x86emuOp_ret_far(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_ret_far(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("RETF\n");
@@ -8854,14 +9329,16 @@ static void x86emuOp_ret_far(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xcc
 ****************************************************************************/
-static void x86emuOp_int3(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_int3(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("INT 3\n");
     TRACE_AND_STEP();
     if (_X86EMU_intrTab[3]) {
 	(*_X86EMU_intrTab[3])(3);
-    } else {
+    }
+    else {
         push_word((u16)M.x86.R_FLG);
         CLEAR_FLAG(F_IF);
         CLEAR_FLAG(F_TF);
@@ -8878,7 +9355,8 @@ static void x86emuOp_int3(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xcd
 ****************************************************************************/
-static void x86emuOp_int_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_int_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 intnum;
 
@@ -8889,7 +9367,8 @@ static void x86emuOp_int_IMM(u8 X86EMU_UNUSED(op1))
     TRACE_AND_STEP();
     if (_X86EMU_intrTab[intnum]) {
 	(*_X86EMU_intrTab[intnum])(intnum);
-    } else {
+    }
+    else {
         push_word((u16)M.x86.R_FLG);
         CLEAR_FLAG(F_IF);
         CLEAR_FLAG(F_TF);
@@ -8906,7 +9385,8 @@ static void x86emuOp_int_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xce
 ****************************************************************************/
-static void x86emuOp_into(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_into(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("INTO\n");
@@ -8914,7 +9394,8 @@ static void x86emuOp_into(u8 X86EMU_UNUSED(op1))
     if (ACCESS_FLAG(F_OF)) {
 	if (_X86EMU_intrTab[4]) {
 	    (*_X86EMU_intrTab[4])(4);
-        } else {
+        }
+        else {
             push_word((u16)M.x86.R_FLG);
             CLEAR_FLAG(F_IF);
             CLEAR_FLAG(F_TF);
@@ -8932,7 +9413,8 @@ static void x86emuOp_into(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xcf
 ****************************************************************************/
-static void x86emuOp_iret(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_iret(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("IRET\n");
@@ -8950,7 +9432,8 @@ static void x86emuOp_iret(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xd0
 ****************************************************************************/
-static void x86emuOp_opcD0_byte_RM_1(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_opcD0_byte_RM_1(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg;
@@ -9044,7 +9527,8 @@ static void x86emuOp_opcD0_byte_RM_1(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xd1
 ****************************************************************************/
-static void x86emuOp_opcD1_word_RM_1(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_opcD1_word_RM_1(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -9104,7 +9588,8 @@ static void x86emuOp_opcD1_word_RM_1(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = (*opcD1_long_operation[rh]) (destval, 1);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
 
             DECODE_PRINTF("WORD PTR ");
@@ -9127,7 +9612,8 @@ static void x86emuOp_opcD1_word_RM_1(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = (*opcD1_long_operation[rh]) (destval, 1);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
 
             DECODE_PRINTF("WORD PTR ");
@@ -9150,7 +9636,8 @@ static void x86emuOp_opcD1_word_RM_1(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = (*opcD1_long_operation[rh]) (destval, 1);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
 
             DECODE_PRINTF("BYTE PTR ");
@@ -9172,7 +9659,8 @@ static void x86emuOp_opcD1_word_RM_1(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = (*opcD1_long_operation[rh]) (*destreg, 1);
             *destreg = destval;
-        } else {
+        }
+        else {
 			u16 destval;
 			u16 *destreg;
 
@@ -9192,7 +9680,8 @@ static void x86emuOp_opcD1_word_RM_1(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xd2
 ****************************************************************************/
-static void x86emuOp_opcD2_byte_RM_CL(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_opcD2_byte_RM_CL(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg;
@@ -9288,7 +9777,8 @@ static void x86emuOp_opcD2_byte_RM_CL(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xd3
 ****************************************************************************/
-static void x86emuOp_opcD3_word_RM_CL(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_opcD3_word_RM_CL(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -9350,7 +9840,8 @@ static void x86emuOp_opcD3_word_RM_CL(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = (*opcD1_long_operation[rh]) (destval, amt);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
 
             DECODE_PRINTF("WORD PTR ");
@@ -9373,7 +9864,8 @@ static void x86emuOp_opcD3_word_RM_CL(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = (*opcD1_long_operation[rh]) (destval, amt);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
 
             DECODE_PRINTF("WORD PTR ");
@@ -9396,7 +9888,8 @@ static void x86emuOp_opcD3_word_RM_CL(u8 X86EMU_UNUSED(op1))
             TRACE_AND_STEP();
             destval = (*opcD1_long_operation[rh]) (destval, amt);
             store_data_long(destoffset, destval);
-        } else {
+        }
+        else {
             u16 destval;
 
             DECODE_PRINTF("WORD PTR ");
@@ -9416,7 +9909,8 @@ static void x86emuOp_opcD3_word_RM_CL(u8 X86EMU_UNUSED(op1))
             DECODE_PRINTF(",CL\n");
             TRACE_AND_STEP();
             *destreg = (*opcD1_long_operation[rh]) (*destreg, amt);
-        } else {
+        }
+        else {
             u16 *destreg;
 
             destreg = DECODE_RM_WORD_REGISTER(rl);
@@ -9434,7 +9928,8 @@ static void x86emuOp_opcD3_word_RM_CL(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xd4
 ****************************************************************************/
-static void x86emuOp_aam(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_aam(u8 X86EMU_UNUSED(op1))
 {
     u8 a;
 
@@ -9459,7 +9954,8 @@ static void x86emuOp_aam(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xd5
 ****************************************************************************/
-static void x86emuOp_aad(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_aad(u8 X86EMU_UNUSED(op1))
 {
     u8 a;
 
@@ -9485,7 +9981,8 @@ static void x86emuOp_aad(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xd7
 ****************************************************************************/
-static void x86emuOp_xlat(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_xlat(u8 X86EMU_UNUSED(op1))
 {
     u16 addr;
 
@@ -9504,7 +10001,8 @@ static void x86emuOp_xlat(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xe0
 ****************************************************************************/
-static void x86emuOp_loopne(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_loopne(u8 X86EMU_UNUSED(op1))
 {
     s16 ip;
 
@@ -9525,7 +10023,8 @@ static void x86emuOp_loopne(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xe1
 ****************************************************************************/
-static void x86emuOp_loope(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_loope(u8 X86EMU_UNUSED(op1))
 {
     s16 ip;
 
@@ -9546,7 +10045,8 @@ static void x86emuOp_loope(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xe2
 ****************************************************************************/
-static void x86emuOp_loop(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_loop(u8 X86EMU_UNUSED(op1))
 {
     s16 ip;
 
@@ -9567,7 +10067,8 @@ static void x86emuOp_loop(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xe3
 ****************************************************************************/
-static void x86emuOp_jcxz(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_jcxz(u8 X86EMU_UNUSED(op1))
 {
     u16 target;
     s8  offset;
@@ -9589,7 +10090,8 @@ static void x86emuOp_jcxz(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xe4
 ****************************************************************************/
-static void x86emuOp_in_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_in_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 port;
 
@@ -9607,7 +10109,8 @@ static void x86emuOp_in_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xe5
 ****************************************************************************/
-static void x86emuOp_in_word_AX_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_in_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 port;
 
@@ -9616,13 +10119,15 @@ static void x86emuOp_in_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 	port = (u8) fetch_byte_imm();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF2("EAX,%x\n", port);
-    } else {
+    }
+    else {
         DECODE_PRINTF2("AX,%x\n", port);
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EAX = (*sys_inl)(port);
-    } else {
+    }
+    else {
         M.x86.R_AX = (*sys_inw)(port);
     }
     DECODE_CLEAR_SEGOVR();
@@ -9633,7 +10138,8 @@ static void x86emuOp_in_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xe6
 ****************************************************************************/
-static void x86emuOp_out_byte_IMM_AL(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_out_byte_IMM_AL(u8 X86EMU_UNUSED(op1))
 {
     u8 port;
 
@@ -9651,7 +10157,8 @@ static void x86emuOp_out_byte_IMM_AL(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xe7
 ****************************************************************************/
-static void x86emuOp_out_word_IMM_AX(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_out_word_IMM_AX(u8 X86EMU_UNUSED(op1))
 {
     u8 port;
 
@@ -9660,13 +10167,15 @@ static void x86emuOp_out_word_IMM_AX(u8 X86EMU_UNUSED(op1))
 	port = (u8) fetch_byte_imm();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF2("%x,EAX\n", port);
-    } else {
+    }
+    else {
         DECODE_PRINTF2("%x,AX\n", port);
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         (*sys_outl)(port, M.x86.R_EAX);
-    } else {
+    }
+    else {
         (*sys_outw)(port, M.x86.R_AX);
     }
     DECODE_CLEAR_SEGOVR();
@@ -9677,7 +10186,8 @@ static void x86emuOp_out_word_IMM_AX(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xe8
 ****************************************************************************/
-static void x86emuOp_call_near_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_call_near_IMM(u8 X86EMU_UNUSED(op1))
 {
     s16 ip16;
     s32 ip32;
@@ -9689,7 +10199,8 @@ static void x86emuOp_call_near_IMM(u8 X86EMU_UNUSED(op1))
 	ip32 += (s16) M.x86.R_IP;    /* CHECK SIGN */
 	DECODE_PRINTF2("%04x\n", (u16)ip32);
 	CALL_TRACE(M.x86.saved_cs, M.x86.saved_ip, M.x86.R_CS, ip32, "");
-    } else {
+    }
+    else {
 	ip16 = (s16) fetch_word_imm();
 	ip16 += (s16) M.x86.R_IP;    /* CHECK SIGN */
 	DECODE_PRINTF2("%04x\n", (u16)ip16);
@@ -9699,7 +10210,8 @@ static void x86emuOp_call_near_IMM(u8 X86EMU_UNUSED(op1))
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
 	push_long(M.x86.R_EIP);
 	M.x86.R_EIP = ip32 & 0xffff;
-    } else {
+    }
+    else {
 	push_word(M.x86.R_IP);
 	M.x86.R_EIP = ip16;
     }
@@ -9711,7 +10223,8 @@ static void x86emuOp_call_near_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xe9
 ****************************************************************************/
-static void x86emuOp_jump_near_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_jump_near_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 ip;
 
@@ -9723,7 +10236,8 @@ static void x86emuOp_jump_near_IMM(u8 X86EMU_UNUSED(op1))
 	DECODE_PRINTF2("%08x\n", (u32)ip);
 	TRACE_AND_STEP();
 	M.x86.R_EIP = (u32)ip;
-    } else {
+    }
+    else {
 	ip = (s16)fetch_word_imm();
 	ip += (s16)M.x86.R_IP;
 	DECODE_PRINTF2("%04x\n", (u16)ip);
@@ -9738,7 +10252,8 @@ static void x86emuOp_jump_near_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xea
 ****************************************************************************/
-static void x86emuOp_jump_far_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_jump_far_IMM(u8 X86EMU_UNUSED(op1))
 {
     u16 cs;
     u32 ip;
@@ -9747,7 +10262,8 @@ static void x86emuOp_jump_far_IMM(u8 X86EMU_UNUSED(op1))
     DECODE_PRINTF("JMP\tFAR ");
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
 	ip = fetch_long_imm();
-    } else {
+    }
+    else {
 	ip = fetch_word_imm();
     }
     cs = fetch_word_imm();
@@ -9764,7 +10280,8 @@ static void x86emuOp_jump_far_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xeb
 ****************************************************************************/
-static void x86emuOp_jump_byte_IMM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_jump_byte_IMM(u8 X86EMU_UNUSED(op1))
 {
     u16 target;
     s8 offset;
@@ -9784,7 +10301,8 @@ static void x86emuOp_jump_byte_IMM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xec
 ****************************************************************************/
-static void x86emuOp_in_byte_AL_DX(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_in_byte_AL_DX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("IN\tAL,DX\n");
@@ -9798,18 +10316,21 @@ static void x86emuOp_in_byte_AL_DX(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xed
 ****************************************************************************/
-static void x86emuOp_in_word_AX_DX(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_in_word_AX_DX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("IN\tEAX,DX\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("IN\tAX,DX\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         M.x86.R_EAX = (*sys_inl)(M.x86.R_DX);
-    } else {
+    }
+    else {
         M.x86.R_AX = (*sys_inw)(M.x86.R_DX);
     }
     DECODE_CLEAR_SEGOVR();
@@ -9820,7 +10341,8 @@ static void x86emuOp_in_word_AX_DX(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xee
 ****************************************************************************/
-static void x86emuOp_out_byte_DX_AL(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_out_byte_DX_AL(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("OUT\tDX,AL\n");
@@ -9834,18 +10356,21 @@ static void x86emuOp_out_byte_DX_AL(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xef
 ****************************************************************************/
-static void x86emuOp_out_word_DX_AX(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_out_word_DX_AX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         DECODE_PRINTF("OUT\tDX,EAX\n");
-    } else {
+    }
+    else {
         DECODE_PRINTF("OUT\tDX,AX\n");
     }
     TRACE_AND_STEP();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
         (*sys_outl)(M.x86.R_DX, M.x86.R_EAX);
-    } else {
+    }
+    else {
         (*sys_outw)(M.x86.R_DX, M.x86.R_AX);
     }
     DECODE_CLEAR_SEGOVR();
@@ -9856,7 +10381,8 @@ static void x86emuOp_out_word_DX_AX(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xf0
 ****************************************************************************/
-static void x86emuOp_lock(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_lock(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("LOCK:\n");
@@ -9871,7 +10397,8 @@ static void x86emuOp_lock(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xf2
 ****************************************************************************/
-static void x86emuOp_repne(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_repne(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("REPNE\n");
@@ -9885,7 +10412,8 @@ static void x86emuOp_repne(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xf3
 ****************************************************************************/
-static void x86emuOp_repe(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_repe(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("REPE\n");
@@ -9899,7 +10427,8 @@ static void x86emuOp_repe(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xf4
 ****************************************************************************/
-static void x86emuOp_halt(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_halt(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("HALT\n");
@@ -9913,7 +10442,8 @@ static void x86emuOp_halt(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xf5
 ****************************************************************************/
-static void x86emuOp_cmc(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_cmc(u8 X86EMU_UNUSED(op1))
 {
     /* complement the carry flag. */
     START_OF_INSTR();
@@ -9928,7 +10458,8 @@ static void x86emuOp_cmc(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xf6
 ****************************************************************************/
-static void x86emuOp_opcF6_byte_RM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_opcF6_byte_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg;
@@ -10212,7 +10743,8 @@ static void x86emuOp_opcF6_byte_RM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xf7
 ****************************************************************************/
-static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -10236,7 +10768,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 destval = fetch_data_long(destoffset);
                 TRACE_AND_STEP();
                 test_long(destval, srcval);
-            } else {
+            }
+            else {
                 u16 destval,srcval;
 
                 DECODE_PRINTF("TEST\tWORD PTR ");
@@ -10264,7 +10797,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 TRACE_AND_STEP();
                 destval = not_long(destval);
                 store_data_long(destoffset, destval);
-            } else {
+            }
+            else {
                 u16 destval;
 
                 DECODE_PRINTF("NOT\tWORD PTR ");
@@ -10287,7 +10821,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 TRACE_AND_STEP();
                 destval = neg_long(destval);
                 store_data_long(destoffset, destval);
-            } else {
+            }
+            else {
                 u16 destval;
 
                 DECODE_PRINTF("NEG\tWORD PTR ");
@@ -10309,7 +10844,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 destval = fetch_data_long(destoffset);
                 TRACE_AND_STEP();
                 mul_long(destval);
-            } else {
+            }
+            else {
                 u16 destval;
 
                 DECODE_PRINTF("MUL\tWORD PTR ");
@@ -10330,7 +10866,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 destval = fetch_data_long(destoffset);
                 TRACE_AND_STEP();
                 imul_long(destval);
-            } else {
+            }
+            else {
                 u16 destval;
 
                 DECODE_PRINTF("IMUL\tWORD PTR ");
@@ -10351,7 +10888,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 destval = fetch_data_long(destoffset);
                 TRACE_AND_STEP();
                 div_long(destval);
-            } else {
+            }
+            else {
                 u16 destval;
 
                 DECODE_PRINTF("DIV\tWORD PTR ");
@@ -10372,7 +10910,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 destval = fetch_data_long(destoffset);
                 TRACE_AND_STEP();
                 idiv_long(destval);
-            } else {
+            }
+            else {
                 u16 destval;
 
                 DECODE_PRINTF("IDIV\tWORD PTR ");
@@ -10399,7 +10938,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 destval = fetch_data_long(destoffset);
                 TRACE_AND_STEP();
                 test_long(destval, srcval);
-            } else {
+            }
+            else {
                 u16 destval,srcval;
 
                 DECODE_PRINTF("TEST\tWORD PTR ");
@@ -10427,7 +10967,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 TRACE_AND_STEP();
                 destval = not_long(destval);
                 store_data_long(destoffset, destval);
-            } else {
+            }
+            else {
                 u16 destval;
 
                 DECODE_PRINTF("NOT\tWORD PTR ");
@@ -10450,7 +10991,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 TRACE_AND_STEP();
                 destval = neg_long(destval);
                 store_data_long(destoffset, destval);
-            } else {
+            }
+            else {
                 u16 destval;
 
                 DECODE_PRINTF("NEG\tWORD PTR ");
@@ -10472,7 +11014,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 destval = fetch_data_long(destoffset);
                 TRACE_AND_STEP();
                 mul_long(destval);
-            } else {
+            }
+            else {
                 u16 destval;
 
                 DECODE_PRINTF("MUL\tWORD PTR ");
@@ -10493,7 +11036,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 destval = fetch_data_long(destoffset);
                 TRACE_AND_STEP();
                 imul_long(destval);
-            } else {
+            }
+            else {
                 u16 destval;
 
                 DECODE_PRINTF("IMUL\tWORD PTR ");
@@ -10514,7 +11058,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 destval = fetch_data_long(destoffset);
                 TRACE_AND_STEP();
                 div_long(destval);
-            } else {
+            }
+            else {
                 u16 destval;
 
                 DECODE_PRINTF("DIV\tWORD PTR ");
@@ -10535,7 +11080,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 destval = fetch_data_long(destoffset);
                 TRACE_AND_STEP();
                 idiv_long(destval);
-            } else {
+            }
+            else {
                 u16 destval;
 
                 DECODE_PRINTF("IDIV\tWORD PTR ");
@@ -10562,7 +11108,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 destval = fetch_data_long(destoffset);
                 TRACE_AND_STEP();
                 test_long(destval, srcval);
-            } else {
+            }
+            else {
                 u16 destval,srcval;
 
                 DECODE_PRINTF("TEST\tWORD PTR ");
@@ -10590,7 +11137,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 TRACE_AND_STEP();
                 destval = not_long(destval);
                 store_data_long(destoffset, destval);
-            } else {
+            }
+            else {
                 u16 destval;
 
                 DECODE_PRINTF("NOT\tWORD PTR ");
@@ -10613,7 +11161,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 TRACE_AND_STEP();
                 destval = neg_long(destval);
                 store_data_long(destoffset, destval);
-            } else {
+            }
+            else {
                 u16 destval;
 
                 DECODE_PRINTF("NEG\tWORD PTR ");
@@ -10635,7 +11184,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 destval = fetch_data_long(destoffset);
                 TRACE_AND_STEP();
                 mul_long(destval);
-            } else {
+            }
+            else {
                 u16 destval;
 
                 DECODE_PRINTF("MUL\tWORD PTR ");
@@ -10656,7 +11206,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 destval = fetch_data_long(destoffset);
                 TRACE_AND_STEP();
                 imul_long(destval);
-            } else {
+            }
+            else {
                 u16 destval;
 
                 DECODE_PRINTF("IMUL\tWORD PTR ");
@@ -10677,7 +11228,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 destval = fetch_data_long(destoffset);
                 TRACE_AND_STEP();
                 div_long(destval);
-            } else {
+            }
+            else {
                 u16 destval;
 
                 DECODE_PRINTF("DIV\tWORD PTR ");
@@ -10698,7 +11250,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 destval = fetch_data_long(destoffset);
                 TRACE_AND_STEP();
                 idiv_long(destval);
-            } else {
+            }
+            else {
                 u16 destval;
 
                 DECODE_PRINTF("IDIV\tWORD PTR ");
@@ -10725,7 +11278,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 DECODE_PRINTF2("%x\n", srcval);
                 TRACE_AND_STEP();
                 test_long(*destreg, srcval);
-            } else {
+            }
+            else {
                 u16 *destreg;
                 u16 srcval;
 
@@ -10751,7 +11305,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 DECODE_PRINTF("\n");
                 TRACE_AND_STEP();
                 *destreg = not_long(*destreg);
-            } else {
+            }
+            else {
                 u16 *destreg;
 
                 DECODE_PRINTF("NOT\t");
@@ -10770,7 +11325,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 DECODE_PRINTF("\n");
                 TRACE_AND_STEP();
                 *destreg = neg_long(*destreg);
-            } else {
+            }
+            else {
                 u16 *destreg;
 
                 DECODE_PRINTF("NEG\t");
@@ -10789,7 +11345,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 DECODE_PRINTF("\n");
                 TRACE_AND_STEP();
                 mul_long(*destreg);      /*!!!  */
-            } else {
+            }
+            else {
                 u16 *destreg;
 
                 DECODE_PRINTF("MUL\t");
@@ -10808,7 +11365,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 DECODE_PRINTF("\n");
                 TRACE_AND_STEP();
                 imul_long(*destreg);
-            } else {
+            }
+            else {
                 u16 *destreg;
 
                 DECODE_PRINTF("IMUL\t");
@@ -10827,7 +11385,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 DECODE_PRINTF("\n");
                 TRACE_AND_STEP();
                 div_long(*destreg);
-            } else {
+            }
+            else {
                 u16 *destreg;
 
                 DECODE_PRINTF("DIV\t");
@@ -10846,7 +11405,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
                 DECODE_PRINTF("\n");
                 TRACE_AND_STEP();
                 idiv_long(*destreg);
-            } else {
+            }
+            else {
                 u16 *destreg;
 
                 DECODE_PRINTF("IDIV\t");
@@ -10867,7 +11427,8 @@ static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xf8
 ****************************************************************************/
-static void x86emuOp_clc(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_clc(u8 X86EMU_UNUSED(op1))
 {
     /* clear the carry flag. */
     START_OF_INSTR();
@@ -10882,7 +11443,8 @@ static void x86emuOp_clc(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xf9
 ****************************************************************************/
-static void x86emuOp_stc(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_stc(u8 X86EMU_UNUSED(op1))
 {
     /* set the carry flag. */
     START_OF_INSTR();
@@ -10897,7 +11459,8 @@ static void x86emuOp_stc(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xfa
 ****************************************************************************/
-static void x86emuOp_cli(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_cli(u8 X86EMU_UNUSED(op1))
 {
     /* clear interrupts. */
     START_OF_INSTR();
@@ -10912,7 +11475,8 @@ static void x86emuOp_cli(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xfb
 ****************************************************************************/
-static void x86emuOp_sti(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_sti(u8 X86EMU_UNUSED(op1))
 {
     /* enable  interrupts. */
     START_OF_INSTR();
@@ -10927,7 +11491,8 @@ static void x86emuOp_sti(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xfc
 ****************************************************************************/
-static void x86emuOp_cld(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_cld(u8 X86EMU_UNUSED(op1))
 {
     /* clear interrupts. */
     START_OF_INSTR();
@@ -10942,7 +11507,8 @@ static void x86emuOp_cld(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xfd
 ****************************************************************************/
-static void x86emuOp_std(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_std(u8 X86EMU_UNUSED(op1))
 {
     /* clear interrupts. */
     START_OF_INSTR();
@@ -10957,7 +11523,8 @@ static void x86emuOp_std(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xfe
 ****************************************************************************/
-static void x86emuOp_opcFE_byte_RM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_opcFE_byte_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rh, rl;
     u8 destval;
@@ -11074,7 +11641,8 @@ static void x86emuOp_opcFE_byte_RM(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xff
 ****************************************************************************/
-static void x86emuOp_opcFF_word_RM(u8 X86EMU_UNUSED(op1))
+static void
+x86emuOp_opcFF_word_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rh, rl;
     uint destoffset = 0;
@@ -11095,14 +11663,16 @@ static void x86emuOp_opcFF_word_RM(u8 X86EMU_UNUSED(op1))
         case 0:
             if (M.x86.mode & SYSMODE_PREFIX_DATA) {
                 DECODE_PRINTF("INC\tDWORD PTR ");
-            } else {
+            }
+            else {
                 DECODE_PRINTF("INC\tWORD PTR ");
             }
             break;
         case 1:
             if (M.x86.mode & SYSMODE_PREFIX_DATA) {
                 DECODE_PRINTF("DEC\tDWORD PTR ");
-            } else {
+            }
+            else {
                 DECODE_PRINTF("DEC\tWORD PTR ");
             }
             break;
@@ -11141,7 +11711,8 @@ static void x86emuOp_opcFF_word_RM(u8 X86EMU_UNUSED(op1))
                 TRACE_AND_STEP();
                 destval = inc_long(destval);
                 store_data_long(destoffset, destval);
-            } else {
+            }
+            else {
                 u16 destval;
 
                 destval = fetch_data_word(destoffset);
@@ -11158,7 +11729,8 @@ static void x86emuOp_opcFF_word_RM(u8 X86EMU_UNUSED(op1))
                 TRACE_AND_STEP();
                 destval = dec_long(destval);
                 store_data_long(destoffset, destval);
-            } else {
+            }
+            else {
                 u16 destval;
 
                 destval = fetch_data_word(destoffset);
@@ -11201,7 +11773,8 @@ static void x86emuOp_opcFF_word_RM(u8 X86EMU_UNUSED(op1))
                 destval = fetch_data_long(destoffset);
                 TRACE_AND_STEP();
                 push_long(destval);
-            } else {
+            }
+            else {
                 u16 destval;
 
                 destval = fetch_data_word(destoffset);
@@ -11223,7 +11796,8 @@ static void x86emuOp_opcFF_word_RM(u8 X86EMU_UNUSED(op1))
                 TRACE_AND_STEP();
                 destval = inc_long(destval);
                 store_data_long(destoffset, destval);
-            } else {
+            }
+            else {
                 u16 destval;
 
                 destval = fetch_data_word(destoffset);
@@ -11240,7 +11814,8 @@ static void x86emuOp_opcFF_word_RM(u8 X86EMU_UNUSED(op1))
                 TRACE_AND_STEP();
                 destval = dec_long(destval);
                 store_data_long(destoffset, destval);
-            } else {
+            }
+            else {
                 u16 destval;
 
                 destval = fetch_data_word(destoffset);
@@ -11283,7 +11858,8 @@ static void x86emuOp_opcFF_word_RM(u8 X86EMU_UNUSED(op1))
                 destval = fetch_data_long(destoffset);
                 TRACE_AND_STEP();
                 push_long(destval);
-            } else {
+            }
+            else {
                 u16 destval;
 
                 destval = fetch_data_word(destoffset);
@@ -11305,7 +11881,8 @@ static void x86emuOp_opcFF_word_RM(u8 X86EMU_UNUSED(op1))
                 TRACE_AND_STEP();
                 destval = inc_long(destval);
                 store_data_long(destoffset, destval);
-            } else {
+            }
+            else {
                 u16 destval;
 
                 destval = fetch_data_word(destoffset);
@@ -11322,7 +11899,8 @@ static void x86emuOp_opcFF_word_RM(u8 X86EMU_UNUSED(op1))
                 TRACE_AND_STEP();
                 destval = dec_long(destval);
                 store_data_long(destoffset, destval);
-            } else {
+            }
+            else {
                 u16 destval;
 
                 destval = fetch_data_word(destoffset);
@@ -11365,7 +11943,8 @@ static void x86emuOp_opcFF_word_RM(u8 X86EMU_UNUSED(op1))
                 destval = fetch_data_long(destoffset);
                 TRACE_AND_STEP();
                 push_long(destval);
-            } else {
+            }
+            else {
                 u16 destval;
 
                 destval = fetch_data_word(destoffset);
@@ -11385,7 +11964,8 @@ static void x86emuOp_opcFF_word_RM(u8 X86EMU_UNUSED(op1))
                 DECODE_PRINTF("\n");
                 TRACE_AND_STEP();
                 *destreg = inc_long(*destreg);
-            } else {
+            }
+            else {
                 u16 *destreg;
 
                 destreg = DECODE_RM_WORD_REGISTER(rl);
@@ -11402,7 +11982,8 @@ static void x86emuOp_opcFF_word_RM(u8 X86EMU_UNUSED(op1))
                 DECODE_PRINTF("\n");
                 TRACE_AND_STEP();
                 *destreg = dec_long(*destreg);
-            } else {
+            }
+            else {
                 u16 *destreg;
 
                 destreg = DECODE_RM_WORD_REGISTER(rl);
@@ -11443,7 +12024,8 @@ static void x86emuOp_opcFF_word_RM(u8 X86EMU_UNUSED(op1))
                 DECODE_PRINTF("\n");
                 TRACE_AND_STEP();
                 push_long(*destreg);
-            } else {
+            }
+            else {
                 u16 *destreg;
 
                 destreg = DECODE_RM_WORD_REGISTER(rl);
@@ -11462,8 +12044,7 @@ static void x86emuOp_opcFF_word_RM(u8 X86EMU_UNUSED(op1))
 /***************************************************************************
  * Single byte operation code table:
  **************************************************************************/
-void (*x86emu_optab[256])(u8) =
-{
+void (*x86emu_optab[256]) (u8) = {
 /*  0x00 */ x86emuOp_add_byte_RM_R,
 /*  0x01 */ x86emuOp_add_word_RM_R,
 /*  0x02 */ x86emuOp_add_byte_R_RM,
@@ -11472,7 +12053,6 @@ void (*x86emu_optab[256])(u8) =
 /*  0x05 */ x86emuOp_add_word_AX_IMM,
 /*  0x06 */ x86emuOp_push_ES,
 /*  0x07 */ x86emuOp_pop_ES,
-
 /*  0x08 */ x86emuOp_or_byte_RM_R,
 /*  0x09 */ x86emuOp_or_word_RM_R,
 /*  0x0a */ x86emuOp_or_byte_R_RM,
@@ -11481,7 +12061,6 @@ void (*x86emu_optab[256])(u8) =
 /*  0x0d */ x86emuOp_or_word_AX_IMM,
 /*  0x0e */ x86emuOp_push_CS,
 /*  0x0f */ x86emuOp_two_byte,
-
 /*  0x10 */ x86emuOp_adc_byte_RM_R,
 /*  0x11 */ x86emuOp_adc_word_RM_R,
 /*  0x12 */ x86emuOp_adc_byte_R_RM,
@@ -11490,7 +12069,6 @@ void (*x86emu_optab[256])(u8) =
 /*  0x15 */ x86emuOp_adc_word_AX_IMM,
 /*  0x16 */ x86emuOp_push_SS,
 /*  0x17 */ x86emuOp_pop_SS,
-
 /*  0x18 */ x86emuOp_sbb_byte_RM_R,
 /*  0x19 */ x86emuOp_sbb_word_RM_R,
 /*  0x1a */ x86emuOp_sbb_byte_R_RM,
@@ -11499,7 +12077,6 @@ void (*x86emu_optab[256])(u8) =
 /*  0x1d */ x86emuOp_sbb_word_AX_IMM,
 /*  0x1e */ x86emuOp_push_DS,
 /*  0x1f */ x86emuOp_pop_DS,
-
 /*  0x20 */ x86emuOp_and_byte_RM_R,
 /*  0x21 */ x86emuOp_and_word_RM_R,
 /*  0x22 */ x86emuOp_and_byte_R_RM,
@@ -11508,7 +12085,6 @@ void (*x86emu_optab[256])(u8) =
 /*  0x25 */ x86emuOp_and_word_AX_IMM,
 /*  0x26 */ x86emuOp_segovr_ES,
 /*  0x27 */ x86emuOp_daa,
-
 /*  0x28 */ x86emuOp_sub_byte_RM_R,
 /*  0x29 */ x86emuOp_sub_word_RM_R,
 /*  0x2a */ x86emuOp_sub_byte_R_RM,
@@ -11517,7 +12093,6 @@ void (*x86emu_optab[256])(u8) =
 /*  0x2d */ x86emuOp_sub_word_AX_IMM,
 /*  0x2e */ x86emuOp_segovr_CS,
 /*  0x2f */ x86emuOp_das,
-
 /*  0x30 */ x86emuOp_xor_byte_RM_R,
 /*  0x31 */ x86emuOp_xor_word_RM_R,
 /*  0x32 */ x86emuOp_xor_byte_R_RM,
@@ -11526,7 +12101,6 @@ void (*x86emu_optab[256])(u8) =
 /*  0x35 */ x86emuOp_xor_word_AX_IMM,
 /*  0x36 */ x86emuOp_segovr_SS,
 /*  0x37 */ x86emuOp_aaa,
-
 /*  0x38 */ x86emuOp_cmp_byte_RM_R,
 /*  0x39 */ x86emuOp_cmp_word_RM_R,
 /*  0x3a */ x86emuOp_cmp_byte_R_RM,
@@ -11535,7 +12109,6 @@ void (*x86emu_optab[256])(u8) =
 /*  0x3d */ x86emuOp_cmp_word_AX_IMM,
 /*  0x3e */ x86emuOp_segovr_DS,
 /*  0x3f */ x86emuOp_aas,
-
 /*  0x40 */ x86emuOp_inc_AX,
 /*  0x41 */ x86emuOp_inc_CX,
 /*  0x42 */ x86emuOp_inc_DX,
@@ -11544,7 +12117,6 @@ void (*x86emu_optab[256])(u8) =
 /*  0x45 */ x86emuOp_inc_BP,
 /*  0x46 */ x86emuOp_inc_SI,
 /*  0x47 */ x86emuOp_inc_DI,
-
 /*  0x48 */ x86emuOp_dec_AX,
 /*  0x49 */ x86emuOp_dec_CX,
 /*  0x4a */ x86emuOp_dec_DX,
@@ -11553,7 +12125,6 @@ void (*x86emu_optab[256])(u8) =
 /*  0x4d */ x86emuOp_dec_BP,
 /*  0x4e */ x86emuOp_dec_SI,
 /*  0x4f */ x86emuOp_dec_DI,
-
 /*  0x50 */ x86emuOp_push_AX,
 /*  0x51 */ x86emuOp_push_CX,
 /*  0x52 */ x86emuOp_push_DX,
@@ -11562,7 +12133,6 @@ void (*x86emu_optab[256])(u8) =
 /*  0x55 */ x86emuOp_push_BP,
 /*  0x56 */ x86emuOp_push_SI,
 /*  0x57 */ x86emuOp_push_DI,
-
 /*  0x58 */ x86emuOp_pop_AX,
 /*  0x59 */ x86emuOp_pop_CX,
 /*  0x5a */ x86emuOp_pop_DX,
@@ -11571,16 +12141,16 @@ void (*x86emu_optab[256])(u8) =
 /*  0x5d */ x86emuOp_pop_BP,
 /*  0x5e */ x86emuOp_pop_SI,
 /*  0x5f */ x86emuOp_pop_DI,
-
 /*  0x60 */ x86emuOp_push_all,
 /*  0x61 */ x86emuOp_pop_all,
-/*  0x62 */ x86emuOp_illegal_op,   /* bound */
-/*  0x63 */ x86emuOp_illegal_op,   /* arpl */
+                                                /*  0x62 */ x86emuOp_illegal_op,
+                                                /* bound */
+                                                /*  0x63 */ x86emuOp_illegal_op,
+                                                /* arpl */
 /*  0x64 */ x86emuOp_segovr_FS,
 /*  0x65 */ x86emuOp_segovr_GS,
 /*  0x66 */ x86emuOp_prefix_data,
 /*  0x67 */ x86emuOp_prefix_addr,
-
 /*  0x68 */ x86emuOp_push_word_IMM,
 /*  0x69 */ x86emuOp_imul_word_IMM,
 /*  0x6a */ x86emuOp_push_byte_IMM,
@@ -11589,7 +12159,6 @@ void (*x86emu_optab[256])(u8) =
 /*  0x6d */ x86emuOp_ins_word,
 /*  0x6e */ x86emuOp_outs_byte,
 /*  0x6f */ x86emuOp_outs_word,
-
 /*  0x70 */ x86emuOp_jump_near_O,
 /*  0x71 */ x86emuOp_jump_near_NO,
 /*  0x72 */ x86emuOp_jump_near_B,
@@ -11598,7 +12167,6 @@ void (*x86emu_optab[256])(u8) =
 /*  0x75 */ x86emuOp_jump_near_NZ,
 /*  0x76 */ x86emuOp_jump_near_BE,
 /*  0x77 */ x86emuOp_jump_near_NBE,
-
 /*  0x78 */ x86emuOp_jump_near_S,
 /*  0x79 */ x86emuOp_jump_near_NS,
 /*  0x7a */ x86emuOp_jump_near_P,
@@ -11607,7 +12175,6 @@ void (*x86emu_optab[256])(u8) =
 /*  0x7d */ x86emuOp_jump_near_NL,
 /*  0x7e */ x86emuOp_jump_near_LE,
 /*  0x7f */ x86emuOp_jump_near_NLE,
-
 /*  0x80 */ x86emuOp_opc80_byte_RM_IMM,
 /*  0x81 */ x86emuOp_opc81_word_RM_IMM,
 /*  0x82 */ x86emuOp_opc82_byte_RM_IMM,
@@ -11616,7 +12183,6 @@ void (*x86emu_optab[256])(u8) =
 /*  0x85 */ x86emuOp_test_word_RM_R,
 /*  0x86 */ x86emuOp_xchg_byte_RM_R,
 /*  0x87 */ x86emuOp_xchg_word_RM_R,
-
 /*  0x88 */ x86emuOp_mov_byte_RM_R,
 /*  0x89 */ x86emuOp_mov_word_RM_R,
 /*  0x8a */ x86emuOp_mov_byte_R_RM,
@@ -11625,7 +12191,6 @@ void (*x86emu_optab[256])(u8) =
 /*  0x8d */ x86emuOp_lea_word_R_M,
 /*  0x8e */ x86emuOp_mov_word_SR_RM,
 /*  0x8f */ x86emuOp_pop_RM,
-
 /*  0x90 */ x86emuOp_nop,
 /*  0x91 */ x86emuOp_xchg_word_AX_CX,
 /*  0x92 */ x86emuOp_xchg_word_AX_DX,
@@ -11634,7 +12199,6 @@ void (*x86emu_optab[256])(u8) =
 /*  0x95 */ x86emuOp_xchg_word_AX_BP,
 /*  0x96 */ x86emuOp_xchg_word_AX_SI,
 /*  0x97 */ x86emuOp_xchg_word_AX_DI,
-
 /*  0x98 */ x86emuOp_cbw,
 /*  0x99 */ x86emuOp_cwd,
 /*  0x9a */ x86emuOp_call_far_IMM,
@@ -11643,7 +12207,6 @@ void (*x86emu_optab[256])(u8) =
 /*  0x9d */ x86emuOp_popf_word,
 /*  0x9e */ x86emuOp_sahf,
 /*  0x9f */ x86emuOp_lahf,
-
 /*  0xa0 */ x86emuOp_mov_AL_M_IMM,
 /*  0xa1 */ x86emuOp_mov_AX_M_IMM,
 /*  0xa2 */ x86emuOp_mov_M_AL_IMM,
@@ -11660,8 +12223,6 @@ void (*x86emu_optab[256])(u8) =
 /*  0xad */ x86emuOp_lods_word,
 /*  0xac */ x86emuOp_scas_byte,
 /*  0xad */ x86emuOp_scas_word,
-
-
 /*  0xb0 */ x86emuOp_mov_byte_AL_IMM,
 /*  0xb1 */ x86emuOp_mov_byte_CL_IMM,
 /*  0xb2 */ x86emuOp_mov_byte_DL_IMM,
@@ -11670,7 +12231,6 @@ void (*x86emu_optab[256])(u8) =
 /*  0xb5 */ x86emuOp_mov_byte_CH_IMM,
 /*  0xb6 */ x86emuOp_mov_byte_DH_IMM,
 /*  0xb7 */ x86emuOp_mov_byte_BH_IMM,
-
 /*  0xb8 */ x86emuOp_mov_word_AX_IMM,
 /*  0xb9 */ x86emuOp_mov_word_CX_IMM,
 /*  0xba */ x86emuOp_mov_word_DX_IMM,
@@ -11679,7 +12239,6 @@ void (*x86emu_optab[256])(u8) =
 /*  0xbd */ x86emuOp_mov_word_BP_IMM,
 /*  0xbe */ x86emuOp_mov_word_SI_IMM,
 /*  0xbf */ x86emuOp_mov_word_DI_IMM,
-
 /*  0xc0 */ x86emuOp_opcC0_byte_RM_MEM,
 /*  0xc1 */ x86emuOp_opcC1_word_RM_MEM,
 /*  0xc2 */ x86emuOp_ret_near_IMM,
@@ -11696,14 +12255,14 @@ void (*x86emu_optab[256])(u8) =
 /*  0xcd */ x86emuOp_int_IMM,
 /*  0xce */ x86emuOp_into,
 /*  0xcf */ x86emuOp_iret,
-
 /*  0xd0 */ x86emuOp_opcD0_byte_RM_1,
 /*  0xd1 */ x86emuOp_opcD1_word_RM_1,
 /*  0xd2 */ x86emuOp_opcD2_byte_RM_CL,
 /*  0xd3 */ x86emuOp_opcD3_word_RM_CL,
 /*  0xd4 */ x86emuOp_aam,
 /*  0xd5 */ x86emuOp_aad,
-/*  0xd6 */ x86emuOp_illegal_op,   /* Undocumented SETALC instruction */
+                                                /*  0xd6 */ x86emuOp_illegal_op,
+                                                /* Undocumented SETALC instruction */
 /*  0xd7 */ x86emuOp_xlat,
 /*  0xd8 */ x86emuOp_esc_coprocess_d8,
 /*  0xd9 */ x86emuOp_esc_coprocess_d9,
@@ -11713,7 +12272,6 @@ void (*x86emu_optab[256])(u8) =
 /*  0xdd */ x86emuOp_esc_coprocess_dd,
 /*  0xde */ x86emuOp_esc_coprocess_de,
 /*  0xdf */ x86emuOp_esc_coprocess_df,
-
 /*  0xe0 */ x86emuOp_loopne,
 /*  0xe1 */ x86emuOp_loope,
 /*  0xe2 */ x86emuOp_loop,
@@ -11722,7 +12280,6 @@ void (*x86emu_optab[256])(u8) =
 /*  0xe5 */ x86emuOp_in_word_AX_IMM,
 /*  0xe6 */ x86emuOp_out_byte_IMM_AL,
 /*  0xe7 */ x86emuOp_out_word_IMM_AX,
-
 /*  0xe8 */ x86emuOp_call_near_IMM,
 /*  0xe9 */ x86emuOp_jump_near_IMM,
 /*  0xea */ x86emuOp_jump_far_IMM,
@@ -11731,7 +12288,6 @@ void (*x86emu_optab[256])(u8) =
 /*  0xed */ x86emuOp_in_word_AX_DX,
 /*  0xee */ x86emuOp_out_byte_DX_AL,
 /*  0xef */ x86emuOp_out_word_DX_AX,
-
 /*  0xf0 */ x86emuOp_lock,
 /*  0xf1 */ x86emuOp_illegal_op,
 /*  0xf2 */ x86emuOp_repne,
@@ -11740,7 +12296,6 @@ void (*x86emu_optab[256])(u8) =
 /*  0xf5 */ x86emuOp_cmc,
 /*  0xf6 */ x86emuOp_opcF6_byte_RM,
 /*  0xf7 */ x86emuOp_opcF7_word_RM,
-
 /*  0xf8 */ x86emuOp_clc,
 /*  0xf9 */ x86emuOp_stc,
 /*  0xfa */ x86emuOp_cli,
