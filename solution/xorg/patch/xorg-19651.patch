diff --git a/GL/glx/glxcmds.c b/GL/glx/glxcmds.c
index c63b170..6426e29 100644
--- a/GL/glx/glxcmds.c
+++ b/GL/glx/glxcmds.c
@@ -49,7 +49,6 @@
 #include <pixmapstr.h>
 #include <windowstr.h>
 #include "g_disptab_EXT.h"
-#include "glximports.h"
 #include "glxutil.h"
 #include "glxext.h"
 #include "GL/glx_ansic.h"
@@ -61,24 +60,6 @@
 
 /************************************************************************/
 
-static __GLimports imports = {
-    __glXImpMalloc,
-    __glXImpCalloc,
-    __glXImpRealloc,
-    __glXImpFree,
-    __glXImpWarning,
-    __glXImpFatal,
-    __glXImpGetenv,
-    __glXImpAtoi,
-    __glXImpSprintf,
-    __glXImpFopen,
-    __glXImpFclose,
-    __glXImpFprintf,
-    __glXImpGetDrawablePrivate,
-    __glXImpGetReadablePrivate,
-    NULL
-};
-
 static int __glXGetFBConfigsSGIX(__GLXclientState *cl, GLbyte *pc);
 static int __glXCreateContextWithConfigSGIX(__GLXclientState *cl, GLbyte *pc);
 static int __glXCreateGLXPixmapWithConfigSGIX(__GLXclientState *cl, GLbyte *pc);
@@ -94,6 +75,27 @@ static int __glxHyperpipeConfigSGIX(__GLXclientState *cl, GLbyte *pc);
 
 /************************************************************************/
 
+static void __glXdirectContextDestroy(__GLXcontext *context)
+{
+    __glXFree(context);
+}
+
+static __GLXcontext *__glXdirectContextCreate(__GLXscreen *screen,
+					      __GLcontextModes *modes,
+					      __GLXcontext *shareContext)
+{
+    __GLXcontext *context;
+
+    context = __glXMalloc (sizeof (__GLXcontext));
+    if (context == NULL)
+	return NULL;
+
+    memset(context, 0, sizeof *context);
+    context->destroy = __glXdirectContextDestroy;
+
+    return context;
+}
+
 /**
  * Create a GL context with the given properties.  This routine is used
  * to implement \c glXCreateContext, \c glXCreateNewContext, and
@@ -111,8 +113,7 @@ int DoCreateContext(__GLXclientState *cl, GLXContextID gcId,
     ScreenPtr pScreen;
     __GLXcontext *glxc, *shareglxc;
     __GLcontextModes *modes;
-    __GLXscreenInfo *pGlxScreen;
-    __GLinterface *shareGC;
+    __GLXscreen *pGlxScreen;
     GLint i;
 
     LEGAL_NEW_RESOURCE(gcId, client);
@@ -125,7 +126,7 @@ int DoCreateContext(__GLXclientState *cl, GLXContextID gcId,
 	return BadValue;
     }
     pScreen = screenInfo.screens[screen];
-    pGlxScreen = &__glXActiveScreens[screen];
+    pGlxScreen = __glXActiveScreens[screen];
     
     /*
     ** Check if the visual ID is valid for this screen.
@@ -167,7 +168,7 @@ int DoCreateContext(__GLXclientState *cl, GLXContextID gcId,
     ** for multithreaded servers, we don't do this.  
     */
     if (shareList == None) {
-	shareGC = 0;
+	shareglxc = 0;
     } else {
 	shareglxc = (__GLXcontext *) LookupIDByType(shareList, __glXContextRes);
 	if (!shareglxc) {
@@ -193,17 +194,18 @@ int DoCreateContext(__GLXclientState *cl, GLXContextID gcId,
 	    */
 	    isDirect = GL_FALSE;
 	}
-	shareGC = shareglxc->gc;
     }
 
     /*
     ** Allocate memory for the new context
     */
-    glxc = (__GLXcontext *) __glXMalloc(sizeof(__GLXcontext));
+    if (!isDirect)
+	glxc = pGlxScreen->createContext(pGlxScreen, modes, shareglxc);
+    else
+	glxc = __glXdirectContextCreate(pGlxScreen, modes, shareglxc);
     if (!glxc) {
 	return BadAlloc;
     }
-    __glXMemset(glxc, 0, sizeof(__GLXcontext));
 
     /*
     ** Initially, setup the part of the context that could be used by
@@ -214,32 +216,11 @@ int DoCreateContext(__GLXclientState *cl, GLXContextID gcId,
     glxc->pVisual = pVisual;
     glxc->modes = modes;
 
-    if (!isDirect) {
-
-	/*
-	** Allocate a GL context
-	*/
-	imports.other = (void *)glxc;
-	glxc->gc = (*pGlxScreen->createContext)(&imports, glxc->modes, shareGC);
-	if (!glxc->gc) {
-	    __glXFree(glxc);
-	    client->errorValue = gcId;
-	    return BadAlloc;
-	}
-    } else {
-	/*
-	** Don't need local GL context for a direct context.
-	*/
-	glxc->gc = 0;
-    }
     /*
     ** Register this context as a resource.
     */
     if (!AddResource(gcId, __glXContextRes, (pointer)glxc)) {
-	if (!isDirect) {
-	    (*glxc->gc->exports.destroyContext)((__GLcontext *)glxc->gc);
-        }
-	__glXFree(glxc);
+	(*glxc->destroy)(glxc);
 	client->errorValue = gcId;
 	return BadAlloc;
     }
@@ -520,9 +501,8 @@ int DoMakeCurrent( __GLXclientState *cl,
     __GLXpixmap *drawPixmap = NULL;
     __GLXpixmap *readPixmap = NULL;
     __GLXcontext *glxc, *prevglxc;
-    __GLinterface *gc, *prevgc;
-    __GLXdrawablePrivate *drawPriv = NULL;
-    __GLXdrawablePrivate *readPriv = NULL;
+    __GLXdrawable *drawPriv = NULL;
+    __GLXdrawable *readPriv = NULL;
     GLint error;
     GLuint  mask;
 
@@ -554,10 +534,8 @@ int DoMakeCurrent( __GLXclientState *cl,
 	    client->errorValue = prevglxc->id;
 	    return __glXBadContextState;
 	}
-	prevgc = prevglxc->gc;
     } else {
 	prevglxc = 0;
-	prevgc = 0;
     }
 
     /*
@@ -575,8 +553,6 @@ int DoMakeCurrent( __GLXclientState *cl,
 	    /* Context is current to somebody else */
 	    return BadAccess;
 	}
-	gc = glxc->gc;
-
 
 	assert( drawId != None );
 	assert( readId != None );
@@ -600,14 +576,14 @@ int DoMakeCurrent( __GLXclientState *cl,
 	/* FIXME: Finish refactoring this. - idr */
 	/* get the drawable private */
 	if (pDraw) {
-	    drawPriv = __glXGetDrawablePrivate(pDraw, drawId, glxc->modes);
+	    drawPriv = __glXGetDrawable(glxc, pDraw, drawId);
 	    if (drawPriv == NULL) {
 		return __glXBadDrawable;
 	    }
 	}
 
 	if (pRead != pDraw) {
-	    readPriv = __glXGetDrawablePrivate(pRead, readId, glxc->modes);
+	    readPriv = __glXGetDrawable(glxc, pRead, readId);
 	    if (readPriv == NULL) {
 		return __glXBadDrawable;
 	    }
@@ -618,7 +594,6 @@ int DoMakeCurrent( __GLXclientState *cl,
     } else {
 	/* Switching to no context.  Ignore new drawable. */
 	glxc = 0;
-	gc = 0;
 	pDraw = 0;
 	pRead = 0;
     }
@@ -640,7 +615,7 @@ int DoMakeCurrent( __GLXclientState *cl,
 	/*
 	** Make the previous context not current.
 	*/
-	if (!(*prevgc->exports.loseCurrent)((__GLcontext *)prevgc)) {
+	if (!(*prevglxc->loseCurrent)(prevglxc)) {
 	    return __glXBadContext;
 	}
 	__glXDeassociateContext(prevglxc);
@@ -651,19 +626,18 @@ int DoMakeCurrent( __GLXclientState *cl,
 
 	glxc->drawPriv = drawPriv;
 	glxc->readPriv = readPriv;
-	__glXCacheDrawableSize(drawPriv);
 
 	/* make the context current */
-	if (!(*gc->exports.makeCurrent)((__GLcontext *)gc)) {
+	if (!(*glxc->makeCurrent)(glxc)) {
 	    glxc->drawPriv = NULL;
 	    glxc->readPriv = NULL;
 	    return __glXBadContext;
 	}
 
 	/* resize the buffers */
-	if (!__glXResizeDrawableBuffers(drawPriv)) {
+	if (!(*drawPriv->resize)(drawPriv)) {
 	    /* could not do initial resize.  make current failed */
-	    (*gc->exports.loseCurrent)((__GLcontext *)gc);
+	    (*glxc->loseCurrent)(glxc);
 	    glxc->drawPriv = NULL;
 	    glxc->readPriv = NULL;
 	    return __glXBadContext;
@@ -911,9 +885,7 @@ int __glXCopyContext(__GLXclientState *cl, GLbyte *pc)
     /*
     ** Issue copy.  The only reason for failure is a bad mask.
     */
-    if (!(*dst->gc->exports.copyContext)((__GLcontext *)dst->gc, 
-					 (__GLcontext *)src->gc,
-					 mask)) {
+    if (!(*dst->copy)(dst, src, mask)) {
 	client->errorValue = mask;
 	return BadValue;
     }
@@ -926,7 +898,7 @@ int DoGetVisualConfigs(__GLXclientState *cl, unsigned screen,
 {
     ClientPtr client = cl->client;
     xGLXGetVisualConfigsReply reply;
-    __GLXscreenInfo *pGlxScreen;
+    __GLXscreen *pGlxScreen;
     __GLcontextModes *modes;
     CARD32 buf[__GLX_TOTAL_CONFIG];
     int p;
@@ -938,7 +910,7 @@ int DoGetVisualConfigs(__GLXclientState *cl, unsigned screen,
 	client->errorValue = screen;
 	return BadValue;
     }
-    pGlxScreen = &__glXActiveScreens[screen];
+    pGlxScreen = __glXActiveScreens[screen];
 
     reply.numVisuals = pGlxScreen->numUsableVisuals;
     reply.numProps = __GLX_TOTAL_CONFIG;
@@ -1017,6 +989,68 @@ int __glXGetVisualConfigs(__GLXclientState *cl, GLbyte *pc)
 }
 
 
+/* Composite adds a 32 bit ARGB visual after glxvisuals.c have created
+ * the context modes for the screens.  This visual is useful for GLX
+ * pixmaps, so we create a single mode for this visual with no extra
+ * buffers. */
+static void
+__glXCreateARGBConfig(__GLXscreen *screen)
+{
+    __GLcontextModes *modes;
+    VisualPtr visual;
+    int i;
+
+    visual = NULL;
+    for (i = 0; i < screen->pScreen->numVisuals; i++) 
+	if (screen->pScreen->visuals[i].nplanes == 32) {
+	    visual = &screen->pScreen->visuals[i];
+	    break;
+	}
+
+    if (visual == NULL || visual->class != TrueColor)
+	return;
+
+    if (_gl_context_modes_find_visual (screen->modes, visual->vid))
+	return;
+
+    /* Stop now if we already added the mode. */
+    modes = _gl_context_modes_create(1, sizeof(__GLcontextModes));
+    if (modes == NULL)
+	return;
+
+    modes->next = screen->modes;
+    screen->modes = modes;
+    screen->numUsableVisuals++;
+    screen->numVisuals++;
+
+    modes->visualID = visual->vid;
+    modes->fbconfigID = visual->vid;
+    modes->visualType = GLX_TRUE_COLOR;
+    modes->drawableType = GLX_WINDOW_BIT | GLX_PIXMAP_BIT;
+    modes->renderType = GLX_RGBA_BIT;
+    modes->xRenderable = GL_TRUE;
+    modes->rgbMode = TRUE;
+    modes->colorIndexMode = FALSE;
+    modes->doubleBufferMode = FALSE;
+    modes->stereoMode = FALSE;
+    modes->haveAccumBuffer = FALSE;
+
+    modes->redBits = visual->bitsPerRGBValue;;
+    modes->greenBits = visual->bitsPerRGBValue;
+    modes->blueBits = visual->bitsPerRGBValue;
+    modes->alphaBits = visual->bitsPerRGBValue;
+
+    modes->rgbBits = 4 * visual->bitsPerRGBValue;
+    modes->indexBits = 0;
+    modes->level = 0;
+    modes->numAuxBuffers = 0;
+
+    modes->haveDepthBuffer = FALSE;
+    modes->depthBits = 0;
+    modes->haveStencilBuffer = FALSE;
+    modes->stencilBits = 0;
+}
+
 
 #define __GLX_TOTAL_FBCONFIG_ATTRIBS (28)
 #define __GLX_FBCONFIG_ATTRIBS_LENGTH (__GLX_TOTAL_FBCONFIG_ATTRIBS * 2)
@@ -1034,7 +1068,7 @@ int DoGetFBConfigs(__GLXclientState *cl, unsigned screen, GLboolean do_swap)
 {
     ClientPtr client = cl->client;
     xGLXGetFBConfigsReply reply;
-    __GLXscreenInfo *pGlxScreen;
+    __GLXscreen *pGlxScreen;
     CARD32 buf[__GLX_FBCONFIG_ATTRIBS_LENGTH];
     int p;
     __GLcontextModes *modes;
@@ -1047,7 +1081,9 @@ int DoGetFBConfigs(__GLXclientState *cl, unsigned screen, GLboolean do_swap)
 	client->errorValue = screen;
 	return BadValue;
     }
-    pGlxScreen = &__glXActiveScreens[screen];
+    pGlxScreen = __glXActiveScreens[screen];
+
+    __glXCreateARGBConfig(pGlxScreen);
 
     reply.numFBConfigs = pGlxScreen->numUsableVisuals;
     reply.numAttribs = __GLX_TOTAL_FBCONFIG_ATTRIBS;
@@ -1145,7 +1181,7 @@ int DoCreateGLXPixmap(__GLXclientState *cl, VisualID visual,
     ScreenPtr pScreen;
     VisualPtr pVisual;
     __GLXpixmap *pGlxPixmap;
-    __GLXscreenInfo *pGlxScreen;
+    __GLXscreen *pGlxScreen;
     __GLcontextModes *modes;
     int i;
 
@@ -1188,7 +1224,7 @@ int DoCreateGLXPixmap(__GLXclientState *cl, VisualID visual,
     /*
     ** Get configuration of the visual.
     */
-    pGlxScreen = &__glXActiveScreens[screenNum];
+    pGlxScreen = __glXActiveScreens[screenNum];
     modes = _gl_context_modes_find_visual( pGlxScreen->modes, visual );
     if (modes == NULL) {
 	/*
@@ -1339,16 +1375,16 @@ int __glXSwapBuffers(__GLXclientState *cl, GLbyte *pc)
     }
 
     if (pDraw) {
-	__GLXdrawablePrivate *glxPriv;
+	__GLXdrawable *glxPriv;
 
 	if (glxc) {
-	    glxPriv = __glXGetDrawablePrivate(pDraw, drawId, glxc->modes);
+	    glxPriv = __glXGetDrawable(glxc, pDraw, drawId);
 	    if (glxPriv == NULL) {
 		return __glXBadDrawable;
 	    }
 	}
 	else {
-	    glxPriv = __glXFindDrawablePrivate(drawId);
+	    glxPriv = __glXFindDrawable(drawId);
 	    if (glxPriv == NULL) {
 		/* This is a window we've never seen before, do nothing */
 		return Success;
@@ -1412,6 +1448,136 @@ int __glXQueryContextInfoEXT(__GLXclientState *cl, GLbyte *pc)
 }
 
 
+int __glXBindTexImageEXT(__GLXclientState *cl, GLbyte *pc)
+{
+    xGLXVendorPrivateReq *req = (xGLXVendorPrivateReq *) pc;
+    ClientPtr		 client = cl->client;
+    __GLXpixmap		*pGlxPixmap;
+    __GLXcontext	*context;
+    GLXDrawable		 drawId;
+    int			 buffer;
+    int			 error;
+
+    pc += __GLX_VENDPRIV_HDR_SIZE;
+
+    drawId = *((CARD32 *) (pc));
+    buffer = *((INT32 *)  (pc + 4));
+
+    if (buffer != GLX_FRONT_LEFT_EXT)
+      return __glXBadPixmap;
+
+    context = __glXForceCurrent (cl, req->contextTag, &error);
+    if (!context)
+	return error;
+
+    pGlxPixmap = (__GLXpixmap *)LookupIDByType(drawId, __glXPixmapRes);
+    if (!pGlxPixmap) {
+	client->errorValue = drawId;
+	return __glXBadPixmap;
+    }
+
+    if (!context->textureFromPixmap)
+	return __glXUnsupportedPrivateRequest;
+
+    return context->textureFromPixmap->bindTexImage(context,
+						    buffer,
+						    pGlxPixmap);
+}
+
+int __glXReleaseTexImageEXT(__GLXclientState *cl, GLbyte *pc)
+{
+    xGLXVendorPrivateReq *req = (xGLXVendorPrivateReq *) pc;
+    ClientPtr		 client = cl->client;
+    __GLXpixmap		*pGlxPixmap;
+    __GLXcontext	*context;
+    GLXDrawable		 drawId;
+    int			 buffer;
+    int			 error;
+
+    pc += __GLX_VENDPRIV_HDR_SIZE;
+
+    drawId = *((CARD32 *) (pc));
+    buffer = *((INT32 *)  (pc + 4));
+    
+    context = __glXForceCurrent (cl, req->contextTag, &error);
+    if (!context)
+	return error;
+
+    pGlxPixmap = (__GLXpixmap *)LookupIDByType(drawId, __glXPixmapRes);
+    if (!pGlxPixmap) {
+	client->errorValue = drawId;
+	return __glXBadDrawable;
+    }
+
+    if (!context->textureFromPixmap)
+	return __glXUnsupportedPrivateRequest;
+
+    return context->textureFromPixmap->releaseTexImage(context,
+						       buffer,
+						       pGlxPixmap);
+}
+
+#ifndef GLX_TEXTURE_TARGET_EXT
+#define GLX_TEXTURE_TARGET_EXT              0x6001
+#define GLX_TEXTURE_2D_EXT                  0x6002
+#define GLX_TEXTURE_RECTANGLE_EXT           0x6003
+#define GLX_NO_TEXTURE_EXT                  0x6004
+#define GLX_Y_INVERTED_EXT                  0x6006
+#endif
+
+/*
+** Get drawable attributes
+*/
+static int
+DoGetDrawableAttributes(__GLXclientState *cl, XID drawId)
+{
+    ClientPtr client = cl->client;
+    __GLXpixmap *glxPixmap;
+    xGLXGetDrawableAttributesReply reply;
+    CARD32 attributes[2];
+    int numAttribs;
+
+    glxPixmap = (__GLXpixmap *)LookupIDByType(drawId, __glXPixmapRes);
+    if (!glxPixmap) {
+	client->errorValue = drawId;
+	return __glXBadPixmap;
+    }
+
+    numAttribs = 2;
+    reply.length = numAttribs << 1;
+    reply.type = X_Reply;
+    reply.sequenceNumber = client->sequence;
+    reply.numAttribs = numAttribs;
+
+    attributes[0] = GLX_TEXTURE_TARGET_EXT;
+    attributes[1] = GLX_TEXTURE_RECTANGLE_EXT;
+    attributes[2] = GLX_Y_INVERTED_EXT;
+    attributes[3] = GL_FALSE;
+
+    if (client->swapped) {
+	__glXSwapGetDrawableAttributesReply(client, &reply, attributes);
+    } else {
+	WriteToClient(client, sz_xGLXGetDrawableAttributesReply,
+		      (char *)&reply);
+	WriteToClient(client, reply.length * sizeof (CARD32),
+		      (char *)attributes);
+    }
+
+    return Success;
+}
+
+int __glXGetDrawableAttributesSGIX(__GLXclientState *cl, GLbyte *pc)
+{
+    xGLXVendorPrivateWithReplyReq *req = (xGLXVendorPrivateWithReplyReq *)pc;
+    CARD32 *data;
+    XID drawable;
+    
+    data = (CARD32 *) (req + 1);
+    drawable = data[0];
+
+    return DoGetDrawableAttributes(cl, drawable);
+}
+
 /************************************************************************/
 
 /*
@@ -1985,6 +2151,10 @@ int __glXVendorPrivate(__GLXclientState *cl, GLbyte *pc)
 	return Success;
     case X_GLXvop_BindSwapBarrierSGIX:
         return __glXBindSwapBarrierSGIX(cl, pc);
+    case X_GLXvop_BindTexImageEXT:
+	return __glXBindTexImageEXT(cl, pc);
+    case X_GLXvop_ReleaseTexImageEXT:
+	return __glXReleaseTexImageEXT(cl, pc);  
     }
 #endif
 
@@ -2030,6 +2200,8 @@ int __glXVendorPrivateWithReply(__GLXclientState *cl, GLbyte *pc)
 	return __glXCreateContextWithConfigSGIX(cl, pc);
       case X_GLXvop_CreateGLXPixmapWithConfigSGIX:
 	return __glXCreateGLXPixmapWithConfigSGIX(cl, pc);
+      case X_GLXvop_GetDrawableAttributesSGIX:
+	return __glXGetDrawableAttributesSGIX(cl, pc);
       default:
 	break;
     }
@@ -2064,7 +2236,7 @@ int __glXQueryExtensionsString(__GLXclientState *cl, GLbyte *pc)
 	return BadValue;
     }
 
-    ptr = __glXActiveScreens[screen].GLXextensions;
+    ptr = __glXActiveScreens[screen]->GLXextensions;
 
     n = __glXStrlen(ptr) + 1;
     length = __GLX_PAD(n) >> 2;
@@ -2111,13 +2283,13 @@ int __glXQueryServerString(__GLXclientState *cl, GLbyte *pc)
     }
     switch(name) {
 	case GLX_VENDOR:
-	    ptr = __glXActiveScreens[screen].GLXvendor;
+	    ptr = __glXActiveScreens[screen]->GLXvendor;
 	    break;
 	case GLX_VERSION:
-	    ptr = __glXActiveScreens[screen].GLXversion;
+	    ptr = __glXActiveScreens[screen]->GLXversion;
 	    break;
 	case GLX_EXTENSIONS:
-	    ptr = __glXActiveScreens[screen].GLXextensions;
+	    ptr = __glXActiveScreens[screen]->GLXextensions;
 	    break;
 	default:
 	    return BadValue; 
