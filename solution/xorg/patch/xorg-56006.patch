diff --git a/mi/mispans.c b/mi/mispans.c
index 21ba4da..0f89880 100644
--- a/mi/mispans.c
+++ b/mi/mispans.c
@@ -22,7 +22,6 @@ Except as contained in this notice, the name of The Open Group shall not be
 used in advertising or otherwise to promote the sale, use or other dealings
 in this Software without prior written authorization from The Open Group.
 
-
 Copyright 1989 by Digital Equipment Corporation, Maynard, Massachusetts.
 
                         All Rights Reserved
@@ -45,7 +44,6 @@ SOFTWARE.
 
 ******************************************************************/
 
-
 #ifdef HAVE_DIX_CONFIG_H
 #include <dix-config.h>
 #endif
@@ -64,8 +62,8 @@ Written by Joel McCormack, Summer 1989.
 
 */
 
-
-void miInitSpanGroup(SpanGroup *spanGroup)
+void
+miInitSpanGroup(SpanGroup * spanGroup)
 {
     spanGroup->size = 0;
     spanGroup->count = 0;
@@ -77,7 +75,8 @@ void miInitSpanGroup(SpanGroup *spanGroup)
 #define YMIN(spans) (spans->points[0].y)
 #define YMAX(spans)  (spans->points[spans->count-1].y)
 
-static void miSubtractSpans (SpanGroup *spanGroup, Spans *sub)
+static void
+miSubtractSpans(SpanGroup * spanGroup, Spans * sub)
 {
     int		i, subCount, spansCount;
     int		ymin, ymax, xmin, xmax;
@@ -98,72 +97,76 @@ static void miSubtractSpans (SpanGroup *spanGroup, Spans *sub)
 	    spansPt = spans->points;
 	    spansWid = spans->widths;
 	    extra = 0;
-	    for (;;)
- 	    {
-		while (spansCount && spansPt->y < subPt->y)
-		{
-		    spansPt++;  spansWid++; spansCount--;
+            for (;;) {
+                while (spansCount && spansPt->y < subPt->y) {
+                    spansPt++;
+                    spansWid++;
+                    spansCount--;
 		}
 		if (!spansCount)
 		    break;
-		while (subCount && subPt->y < spansPt->y)
-		{
-		    subPt++;	subWid++;   subCount--;
+                while (subCount && subPt->y < spansPt->y) {
+                    subPt++;
+                    subWid++;
+                    subCount--;
 		}
 		if (!subCount)
 		    break;
-		if (subPt->y == spansPt->y)
-		{
+                if (subPt->y == spansPt->y) {
 		    xmin = subPt->x;
 		    xmax = xmin + *subWid;
-		    if (xmin >= spansPt->x + *spansWid || spansPt->x >= xmax)
-		    {
+                    if (xmin >= spansPt->x + *spansWid || spansPt->x >= xmax) {
 			;
 		    }
-		    else if (xmin <= spansPt->x)
-		    {
-			if (xmax >= spansPt->x + *spansWid) 
-			{
-			    memmove (spansPt, spansPt + 1, sizeof *spansPt * (spansCount - 1));
-			    memmove (spansWid, spansWid + 1, sizeof *spansWid * (spansCount - 1));
+                    else if (xmin <= spansPt->x) {
+                        if (xmax >= spansPt->x + *spansWid) {
+                            memmove(spansPt, spansPt + 1,
+                                    sizeof *spansPt * (spansCount - 1));
+                            memmove(spansWid, spansWid + 1,
+                                    sizeof *spansWid * (spansCount - 1));
 			    spansPt--;
 			    spansWid--;
 			    spans->count--;
 			    extra++;
 			}
-			else 
-			{
+                        else {
 			    *spansWid = *spansWid - (xmax - spansPt->x);
 			    spansPt->x = xmax;
 			}
 		    }
-		    else
-		    {
-			if (xmax >= spansPt->x + *spansWid)
-			{
+                    else {
+                        if (xmax >= spansPt->x + *spansWid) {
 			    *spansWid = xmin - spansPt->x;
 			}
-			else
-			{
+                        else {
 			    if (!extra) {
 				DDXPointPtr newPt;
 				int	    *newwid;
 
 #define EXTRA 8
-				newPt = (DDXPointPtr) realloc(spans->points, (spans->count + EXTRA) * sizeof (DDXPointRec));
+                                newPt =
+                                    (DDXPointPtr) realloc(spans->points,
+                                                          (spans->count +
+                                                           EXTRA) *
+                                                          sizeof(DDXPointRec));
 				if (!newPt)
 				    break;
 				spansPt = newPt + (spansPt - spans->points);
 				spans->points = newPt;
-				newwid = (int *) realloc(spans->widths, (spans->count + EXTRA) * sizeof (int));
+                                newwid =
+                                    (int *) realloc(spans->widths,
+                                                    (spans->count +
+                                                     EXTRA) * sizeof(int));
 				if (!newwid)
 				    break;
 				spansWid = newwid + (spansWid - spans->widths);
 				spans->widths = newwid;
 				extra = EXTRA;
 			    }
-			    memmove (spansPt + 1, spansPt, sizeof *spansPt * (spansCount));
-			    memmove (spansWid + 1, spansWid, sizeof *spansWid * (spansCount));
+                            memmove(spansPt + 1, spansPt,
+                                    sizeof *spansPt * (spansCount));
+                            memmove(spansWid + 1, spansWid,
+                                    sizeof *spansWid * (spansCount));
 			    spans->count++;
 			    extra--;
 			    *spansWid = xmin - spansPt->x;
@@ -174,13 +177,16 @@ static void miSubtractSpans (SpanGroup *spanGroup, Spans *sub)
 			}
 		    }
 		}
-		spansPt++;  spansWid++; spansCount--;
+                spansPt++;
+                spansWid++;
+                spansCount--;
 	    }
 	}
     }
 }
 
-void miAppendSpans(SpanGroup *spanGroup, SpanGroup *otherGroup, Spans *spans)
+void
+miAppendSpans(SpanGroup * spanGroup, SpanGroup * otherGroup, Spans * spans)
 {
     int ymin, ymax;
     int spansCount;
@@ -196,32 +202,29 @@ void miAppendSpans(SpanGroup *spanGroup, SpanGroup *otherGroup, Spans *spans)
 	spanGroup->group[spanGroup->count] = *spans;
 	(spanGroup->count)++;
 	ymin = spans->points[0].y;
-	if (ymin < spanGroup->ymin) spanGroup->ymin = ymin;
+        if (ymin < spanGroup->ymin)
+            spanGroup->ymin = ymin;
 	ymax = spans->points[spansCount - 1].y;
-	if (ymax > spanGroup->ymax) spanGroup->ymax = ymax;
-	if (otherGroup &&
-	    otherGroup->ymin < ymax &&
-	    ymin < otherGroup->ymax)
-	{
+        if (ymax > spanGroup->ymax)
+            spanGroup->ymax = ymax;
+        if (otherGroup && otherGroup->ymin < ymax && ymin < otherGroup->ymax) {
 	    miSubtractSpans (otherGroup, spans);
 	}
     }
-    else
-    {
+    else {
 	free(spans->points);
 	free(spans->widths);
     }
 } /* AppendSpans */
 
-void miFreeSpanGroup(SpanGroup *spanGroup)
+void
+miFreeSpanGroup(SpanGroup * spanGroup)
 {
     free(spanGroup->group);
 }
 
-static void QuickSortSpansX(
-    DDXPointRec points[],
-    int		widths[],
-    int		numSpans )
+static void
+QuickSortSpansX(DDXPointRec points[], int widths[], int numSpans)
 {
     int	    		x;
     int	    		i, j, m;
@@ -253,7 +256,8 @@ static void QuickSortSpansX(
 		    DDXPointRec tpt;
 		    int	    tw, k;
 
-		    for (j = 0; x >= points[j].x; j++) {}
+                    for (j = 0; x >= points[j].x; j++) {
+                    }
 		    tpt = points[i];
 		    tw  = widths[i];
 		    for (k = i; k != j; k--) {
@@ -272,9 +276,12 @@ static void QuickSortSpansX(
 
 	/* Choose partition element, stick in location 0 */
 	m = numSpans / 2;
-	if (points[m].x > points[0].x)		ExchangeSpans(m, 0);
-	if (points[m].x > points[numSpans-1].x) ExchangeSpans(m, numSpans-1);
-	if (points[m].x > points[0].x)		ExchangeSpans(m, 0);
+        if (points[m].x > points[0].x)
+            ExchangeSpans(m, 0);
+        if (points[m].x > points[numSpans - 1].x)
+            ExchangeSpans(m, numSpans - 1);
+        if (points[m].x > points[0].x)
+            ExchangeSpans(m, 0);
 	x = points[0].x;
 
         /* Partition array */
@@ -291,7 +298,8 @@ static void QuickSortSpansX(
 		r--;
 		j--;
             } while (x < r->x);
-            if (i < j) ExchangeSpans(i, j);
+            if (i < j)
+                ExchangeSpans(i, j);
         } while (i < j);
 
         /* Move partition element back to middle */
@@ -304,11 +312,8 @@ static void QuickSortSpansX(
     } while (numSpans > 1);
 } /* QuickSortSpans */
 
-
-static int UniquifySpansX(
-    Spans	    	*spans,
-    DDXPointRec    	*newPoints,
-    int	    		*newWidths )
+static int
+UniquifySpansX(Spans * spans, DDXPointRec * newPoints, int *newWidths)
 {
     int 		newx1, newx2, oldpt, i, y;
     DDXPointRec		*oldPoints;
@@ -319,7 +324,6 @@ static int UniquifySpansX(
 /* Uniquify the spans, and stash them into newPoints and newWidths.  Return the
    number of unique spans. */
 
-
     startNewWidths = newWidths;
 
     oldPoints = spans->points;
@@ -342,10 +346,12 @@ static int UniquifySpansX(
 	    newWidths++;
 	    newx1 = oldpt;
 	    newx2 = oldpt + *oldWidths;
-	} else {
+        }
+        else {
 	    /* extend current span, if old extends beyond new */
 	    oldpt = oldpt + *oldWidths;
-	    if (oldpt > newx2) newx2 = oldpt;
+            if (oldpt > newx2)
+                newx2 = oldpt;
 	}
     } /* for */
 
@@ -363,15 +369,15 @@ miDisposeSpanGroup (SpanGroup *spanGroup)
     int	    i;
     Spans   *spans;
 
-    for (i = 0; i < spanGroup->count; i++)
-    {
+    for (i = 0; i < spanGroup->count; i++) {
 	spans = spanGroup->group + i;
 	free(spans->points);
 	free(spans->widths);
     }
 }
 
-void miFillUniqueSpanGroup(DrawablePtr pDraw, GCPtr pGC, SpanGroup *spanGroup)
+void
+miFillUniqueSpanGroup(DrawablePtr pDraw, GCPtr pGC, SpanGroup * spanGroup)
 {
     int    		i;
     Spans  		*spans;
@@ -384,7 +390,8 @@ void miFillUniqueSpanGroup(DrawablePtr pDraw, GCPtr pGC, SpanGroup *spanGroup)
     int	    		*widths;
     int	    		count;
 
-    if (spanGroup->count == 0) return;
+    if (spanGroup->count == 0)
+        return;
 
     if (spanGroup->count == 1) {
 	/* Already should be sorted, unique */
@@ -394,8 +401,7 @@ void miFillUniqueSpanGroup(DrawablePtr pDraw, GCPtr pGC, SpanGroup *spanGroup)
 	free(spans->points);
 	free(spans->widths);
     }
-    else
-    {
+    else {
 	/* Yuck.  Gross.  Radix sort into y buckets, then sort x and uniquify */
 	/* This seems to be the fastest thing to do.  I've tried sorting on
 	   both x and y at the same time rather than creating into all those
@@ -408,8 +414,7 @@ void miFillUniqueSpanGroup(DrawablePtr pDraw, GCPtr pGC, SpanGroup *spanGroup)
 	yspans = malloc(ylength * sizeof(Spans));
 	ysizes = malloc(ylength * sizeof (int));
 
-	if (!yspans || !ysizes)
-	{
+        if (!yspans || !ysizes) {
 	    free(yspans);
 	    free(ysizes);
 	    miDisposeSpanGroup (spanGroup);
@@ -426,33 +431,31 @@ void miFillUniqueSpanGroup(DrawablePtr pDraw, GCPtr pGC, SpanGroup *spanGroup)
 	/* Go through every single span and put it into the correct bucket */
 	count = 0;
 	for (i = 0, spans = spanGroup->group;
-		i != spanGroup->count;
-		i++, spans++) {
+             i != spanGroup->count; i++, spans++) {
 	    int		index;
 	    int		j;
 
 	    for (j = 0, points = spans->points, widths = spans->widths;
-		    j != spans->count;
-		    j++, points++, widths++) {
+                 j != spans->count; j++, points++, widths++) {
 		index = points->y - ymin;
 		if (index >= 0 && index < ylength) {
 		    Spans *newspans = &(yspans[index]);
+
 		    if (newspans->count == ysizes[index]) {
 			DDXPointPtr newpoints;
 			int	    *newwidths;
+
 			ysizes[index] = (ysizes[index] + 8) * 2;
-			newpoints = (DDXPointPtr) realloc(
-			    newspans->points,
-			    ysizes[index] * sizeof(DDXPointRec));
-			newwidths = (int *) realloc(
-			    newspans->widths,
+                        newpoints = (DDXPointPtr) realloc(newspans->points,
+                                                          ysizes[index] *
+                                                          sizeof(DDXPointRec));
+                        newwidths =
+                            (int *) realloc(newspans->widths,
 			    ysizes[index] * sizeof(int));
-			if (!newpoints || !newwidths)
-			{
+                        if (!newpoints || !newwidths) {
 			    int	i;
 
-			    for (i = 0; i < ylength; i++)
-			    {
+                            for (i = 0; i < ylength; i++) {
 				free(yspans[i].points);
 				free(yspans[i].widths);
 			    }
@@ -481,12 +484,10 @@ void miFillUniqueSpanGroup(DrawablePtr pDraw, GCPtr pGC, SpanGroup *spanGroup)
 	/* Now sort by x and uniquify each bucket into the final array */
 	points = malloc(count * sizeof(DDXPointRec));
 	widths = malloc(count * sizeof(int));
-	if (!points || !widths)
-	{
+        if (!points || !widths) {
 	    int	i;
 
-	    for (i = 0; i < ylength; i++)
-	    {
+            for (i = 0; i < ylength; i++) {
 		free(yspans[i].points);
 		free(yspans[i].widths);
 	    }
@@ -499,12 +500,14 @@ void miFillUniqueSpanGroup(DrawablePtr pDraw, GCPtr pGC, SpanGroup *spanGroup)
 	count = 0;
 	for (i = 0; i != ylength; i++) {
 	    int ycount = yspans[i].count;
+
 	    if (ycount > 0) {
 		if (ycount > 1) {
 		    QuickSortSpansX(yspans[i].points, yspans[i].widths, ycount);
 		    count += UniquifySpansX
 			(&(yspans[i]), &(points[count]), &(widths[count]));
-		} else {
+                }
+                else {
 		    points[count] = yspans[i].points[0];
 		    widths[count] = yspans[i].widths[0];
 		    count++;
