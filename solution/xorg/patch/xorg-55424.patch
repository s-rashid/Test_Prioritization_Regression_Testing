diff --git a/hw/xfree86/common/xf86Init.c b/hw/xfree86/common/xf86Init.c
index 5263b5f..0974893 100644
--- a/hw/xfree86/common/xf86Init.c
+++ b/hw/xfree86/common/xf86Init.c
@@ -106,6 +106,7 @@ static PixmapFormatRec formats[MAXFORMATS] = {
 	{ 24,	32,	BITMAP_SCANLINE_PAD },
 	{ 32,	32,	BITMAP_SCANLINE_PAD },
 };
+
 static int numFormats = 7;
 static Bool formatsDone = FALSE;
 
@@ -124,8 +125,8 @@ xf86PrintBanner(void)
 {
 #if PRE_RELEASE
   xf86ErrorFVerb(0, "\n"
-    "This is a pre-release version of the X server from " XVENDORNAME ".\n"
-    "It is not supported in any way.\n"
+                   "This is a pre-release version of the X server from "
+                   XVENDORNAME ".\n" "It is not supported in any way.\n"
     "Bugs may be filed in the bugzilla at http://bugs.freedesktop.org/.\n"
     "Select the \"xorg\" product for bugs you find in this release.\n"
     "Before reporting bugs in pre-release versions please check the\n"
@@ -133,9 +134,7 @@ xf86PrintBanner(void)
     "See http://wiki.x.org/wiki/GitPage for git access instructions.\n");
 #endif
   xf86ErrorFVerb(0, "\nX.Org X Server %d.%d.%d",
-	 XORG_VERSION_MAJOR,
-	 XORG_VERSION_MINOR,
-	 XORG_VERSION_PATCH);
+                   XORG_VERSION_MAJOR, XORG_VERSION_MINOR, XORG_VERSION_PATCH);
 #if XORG_VERSION_SNAP > 0
   xf86ErrorFVerb(0, ".%d", XORG_VERSION_SNAP);
 #endif
@@ -181,11 +180,13 @@ xf86PrintBanner(void)
      */
     if (uname(&name) >= 0) {
       xf86ErrorFVerb(0, "Current Operating System: %s %s %s %s %s\n",
-	name.sysname, name.nodename, name.release, name.version, name.machine);
+                           name.sysname, name.nodename, name.release,
+                           name.version, name.machine);
 #ifdef linux
       do {
 	  char buf[80];
 	  int fd = open("/proc/cmdline", O_RDONLY);
+
 	  if (fd != -1) {
 	    xf86ErrorFVerb(0, "Kernel command line: ");
 	    memset(buf, 0, 80);
@@ -238,7 +239,8 @@ xf86PrintMarkers(void)
   LogPrintMarkers();
 }
 
-Bool xf86PrivsElevated(void)
+Bool
+xf86PrivsElevated(void)
 {
   static Bool privsTested = FALSE;
   static Bool privsElevated = TRUE;
@@ -249,7 +251,8 @@ Bool xf86PrivsElevated(void)
 #else
     if ((getuid() != geteuid()) || (getgid() != getegid())) {
       privsElevated = TRUE;
-    } else {
+        }
+        else {
 #if defined(HAVE_ISSETUGID)
       privsElevated = issetugid();
 #elif defined(HAVE_GETRESUID)
@@ -278,11 +281,13 @@ Bool xf86PrivsElevated(void)
          * euid to 0.
          */
         unsigned int oldeuid;
+
         oldeuid = geteuid();
 
         if (seteuid(0) != 0) {
           privsElevated = FALSE;
-        } else {
+                }
+                else {
           if (seteuid(oldeuid) != 0) {
             FatalError("Failed to drop privileges.  Exiting\n");
           }
@@ -330,23 +335,21 @@ xf86CreateRootWindow(WindowPtr pWin)
   if (xf86RegisteredPropertiesTable != NULL) {
     if (pWin->parent == NULL && xf86RegisteredPropertiesTable != NULL) {
       for (pProp = xf86RegisteredPropertiesTable[pScreen->myNum];
-	   pProp != NULL && err==Success;
-	   pProp = pProp->next )
-	{
+                 pProp != NULL && err == Success; pProp = pProp->next) {
 	  Atom prop;
 
 	  prop = MakeAtom(pProp->name, strlen(pProp->name), TRUE);
 	  err = dixChangeWindowProperty(serverClient, pWin,
 					prop, pProp->type,
 					pProp->format, PropModeReplace,
-					pProp->size, pProp->data,
-					FALSE);
+                                              pProp->size, pProp->data, FALSE);
 	}
 
       /* Look at err */
       ret &= (err==Success);
 
-    } else {
+        }
+        else {
       xf86Msg(X_ERROR, "xf86CreateRootWindow unexpectedly called with "
 	      "non-root window %p (parent %p)\n",
 	      (void *)pWin, (void *)pWin->parent);
@@ -358,7 +361,6 @@ xf86CreateRootWindow(WindowPtr pWin)
   return ret;
 }
 
-
 static void
 InstallSignalHandlers(void)
 {
@@ -368,7 +370,8 @@ InstallSignalHandlers(void)
     xf86Info.caughtSignal=FALSE;
     if (!xf86Info.notrapSignals) {
 	OsRegisterSigWrapper(xf86SigWrapper);
-    } else {
+    }
+    else {
 	signal(SIGSEGV, SIG_DFL);
 	signal(SIGILL, SIG_DFL);
 #ifdef SIGEMT
@@ -413,6 +416,7 @@ InitOutput(ScreenInfo *pScreenInfo, int argc, char **argv)
 	if (xf86LogFile)  {
 	    time_t t;
 	    const char *ct;
+
 	    t = time(NULL);
 	    ct = ctime(&t);
 	    xf86MsgVerb(xf86LogFileFrom, 0, "Log file: \"%s\", Time: %s",
@@ -526,6 +530,7 @@ InitOutput(ScreenInfo *pScreenInfo, int argc, char **argv)
 
 	if (!xorgHWAccess || !xorgHWOpenConsole) {
 	    xorgHWFlags flags;
+
 	    if(!xf86DriverList[i]->driverFunc
 		|| !xf86DriverList[i]->driverFunc(NULL,
 						  GET_REQUIRED_HW_INTERFACES,
@@ -558,6 +563,7 @@ InitOutput(ScreenInfo *pScreenInfo, int argc, char **argv)
 	    if (xf86Screens[i + 1]->confScreen->screennum <
 		xf86Screens[i]->confScreen->screennum) {
 		ScrnInfoPtr tmpScrn = xf86Screens[i + 1];
+
 		xf86Screens[i + 1] = xf86Screens[i];
 		xf86Screens[i] = tmpScrn;
 	    }
@@ -627,10 +633,12 @@ InitOutput(ScreenInfo *pScreenInfo, int argc, char **argv)
 	    FatalError("Inconsistent display bitmapBitOrder.  Exiting\n");
 	if (xf86Screens[i]->bitmapScanlinePad !=
 	    xf86Screens[0]->bitmapScanlinePad)
-	    FatalError("Inconsistent display bitmapScanlinePad.  Exiting\n");
+                FatalError
+                    ("Inconsistent display bitmapScanlinePad.  Exiting\n");
 	if (xf86Screens[i]->bitmapScanlineUnit !=
 	    xf86Screens[0]->bitmapScanlineUnit)
-	    FatalError("Inconsistent display bitmapScanlineUnit.  Exiting\n");
+                FatalError
+                    ("Inconsistent display bitmapScanlineUnit.  Exiting\n");
 	if (xf86Screens[i]->bitmapBitOrder !=
 	    xf86Screens[0]->bitmapBitOrder)
 	    FatalError("Inconsistent display bitmapBitOrder.  Exiting\n");
@@ -640,19 +648,23 @@ InitOutput(ScreenInfo *pScreenInfo, int argc, char **argv)
 	    if (screenpix24 == Pix24DontCare)
 		screenpix24 = xf86Screens[i]->pixmap24;
 	    else if (screenpix24 != xf86Screens[i]->pixmap24)
-		FatalError("Inconsistent depth 24 pixmap format.  Exiting\n");
+                    FatalError
+                        ("Inconsistent depth 24 pixmap format.  Exiting\n");
 	}
     }
     /* check if screenpix24 is consistent with the config/cmdline */
     if (xf86Info.pixmap24 != Pix24DontCare) {
 	pix24 = xf86Info.pixmap24;
 	pix24From = xf86Info.pix24From;
-	if (screenpix24 != Pix24DontCare && screenpix24 != xf86Info.pixmap24)
+            if (screenpix24 != Pix24DontCare &&
+                screenpix24 != xf86Info.pixmap24)
 	    pix24Fail = TRUE;
-    } else if (screenpix24 != Pix24DontCare) {
+        }
+        else if (screenpix24 != Pix24DontCare) {
 	pix24 = screenpix24;
 	pix24From = X_PROBED;
-    } else
+        }
+        else
 	pix24 = Pix24Use32;
 
     if (pix24Fail)
@@ -660,8 +672,7 @@ InitOutput(ScreenInfo *pScreenInfo, int argc, char **argv)
 		   " (%d).  Exiting\n", PIX24TOBPP(pix24));
 
     /* Initialise the depth 24 format */
-    for (j = 0; j < numFormats && formats[j].depth != 24; j++)
-	;
+        for (j = 0; j < numFormats && formats[j].depth != 24; j++);
     formats[j].bitsPerPixel = PIX24TOBPP(pix24);
 
     /* Collect additional formats */
@@ -699,16 +710,19 @@ InitOutput(ScreenInfo *pScreenInfo, int argc, char **argv)
 	 initialized, and we can create the property for real.
       */
       if ( (VT = malloc(sizeof(CARD32)))==NULL ) {
-	FatalError("Unable to make VT property - out of memory. Exiting...\n");
+                FatalError
+                    ("Unable to make VT property - out of memory. Exiting...\n");
       }
       *VT = xf86Info.vtno;
 
       VTAtom = MakeAtom(VT_ATOM_NAME, sizeof(VT_ATOM_NAME) - 1, TRUE);
 
-      for (i = 0, ret = Success; i < xf86NumScreens && ret == Success; i++) {
-	ret = xf86RegisterRootWindowProperty(xf86Screens[i]->scrnIndex,
-					     VTAtom, XA_INTEGER, 32,
-					     1, VT );
+            for (i = 0, ret = Success; i < xf86NumScreens && ret == Success;
+                 i++) {
+                ret =
+                    xf86RegisterRootWindowProperty(xf86Screens[i]->scrnIndex,
+                                                   VTAtom, XA_INTEGER, 32, 1,
+                                                   VT);
 	if (ret != Success)
 	  xf86DrvMsg(xf86Screens[i]->scrnIndex, X_WARNING,
 		     "Failed to register VT property\n");
@@ -718,14 +732,16 @@ InitOutput(ScreenInfo *pScreenInfo, int argc, char **argv)
     if (SeatId) {
         Atom SeatAtom;
 
-        SeatAtom = MakeAtom(SEAT_ATOM_NAME, sizeof(SEAT_ATOM_NAME) - 1, TRUE);
+            SeatAtom =
+                MakeAtom(SEAT_ATOM_NAME, sizeof(SEAT_ATOM_NAME) - 1, TRUE);
 
         for (i = 0; i < xf86NumScreens; i++) {
             int ret;
 
             ret = xf86RegisterRootWindowProperty(xf86Screens[i]->scrnIndex,
                                                  SeatAtom, XA_STRING, 8,
-                                                 strlen(SeatId)+1, SeatId );
+                                                     strlen(SeatId) + 1,
+                                                     SeatId);
             if (ret != Success) {
                 xf86DrvMsg(xf86Screens[i]->scrnIndex, X_WARNING,
                            "Failed to register seat property\n");
@@ -741,7 +757,8 @@ InitOutput(ScreenInfo *pScreenInfo, int argc, char **argv)
 	    break;
 	}
     }
-  } else {
+    }
+    else {
     /*
      * serverGeneration != 1; some OSs have to do things here, too.
      */
@@ -826,7 +843,8 @@ InitOutput(ScreenInfo *pScreenInfo, int argc, char **argv)
 	xf86Screens[i]->pScreen = screenInfo.screens[scr_index];
 	/* The driver should set this, but make sure it is set anyway */
 	xf86Screens[i]->vtSema = TRUE;
-      } else {
+        }
+        else {
 	/* This shouldn't normally happen */
 	FatalError("AddScreen/ScreenInit failed for driver %d\n", i);
       }
@@ -841,9 +859,9 @@ InitOutput(ScreenInfo *pScreenInfo, int argc, char **argv)
 		    xf86Screens[i]->pScreen->CreateWindow);
       xf86Screens[i]->pScreen->CreateWindow = xf86CreateRootWindow;
 
-    if (PictureGetSubpixelOrder (xf86Screens[i]->pScreen) == SubPixelUnknown)
-    {
+        if (PictureGetSubpixelOrder(xf86Screens[i]->pScreen) == SubPixelUnknown) {
 	xf86MonPtr DDC = (xf86MonPtr)(xf86Screens[i]->monitor->DDC);
+
 	PictureSetSubpixelOrder (xf86Screens[i]->pScreen,
 				 DDC ?
 				 (DDC->features.input_type ?
@@ -886,8 +904,10 @@ InitInput(int argc, char **argv)
 
     /* Initialize all configured input devices */
     for (pInfo = xf86ConfigLayout.inputs; pInfo && *pInfo; pInfo++) {
-        (*pInfo)->options = xf86AddNewOption((*pInfo)->options, "driver", (*pInfo)->driver);
-        (*pInfo)->options = xf86AddNewOption((*pInfo)->options, "identifier", (*pInfo)->name);
+        (*pInfo)->options =
+            xf86AddNewOption((*pInfo)->options, "driver", (*pInfo)->driver);
+        (*pInfo)->options =
+            xf86AddNewOption((*pInfo)->options, "identifier", (*pInfo)->name);
         /* If one fails, the others will too */
         if (NewInputDeviceRequest((*pInfo)->options, NULL, &dev) == BadAlloc)
             break;
@@ -931,8 +951,7 @@ OsVendorInit(void)
 
 #ifdef O_NONBLOCK
   if (!beenHere) {
-    if (xf86PrivsElevated())
-    {
+        if (xf86PrivsElevated()) {
       int status;
 
       status = fcntl(fileno(stderr), F_GETFL, 0);
@@ -989,8 +1008,6 @@ ddxGiveUp(enum ExitCode error)
 	OsAbort();
 }
 
-
-
 /*
  * AbortDDX --
  *      DDX - specific abort routine.  Called by AbortServer(). The attempt is
@@ -1108,9 +1125,9 @@ ddxProcessArgument(int argc, char **argv, int i)
       FatalError("The '%s' option cannot be used with "
                  "elevated privileges.\n", argv[i]);
     }
-    else if (!strcmp(argv[i], "-modulepath"))
-    {
+        else if (!strcmp(argv[i], "-modulepath")) {
       char *mp;
+
       CHECK_FOR_REQUIRED_ARGUMENT();
       mp = strdup(argv[i + 1]);
       if (!mp)
@@ -1119,9 +1136,9 @@ ddxProcessArgument(int argc, char **argv, int i)
       xf86ModPathFrom = X_CMDLINE;
       return 2;
     }
-    else if (!strcmp(argv[i], "-logfile"))
-    {
+        else if (!strcmp(argv[i], "-logfile")) {
       char *lf;
+
       CHECK_FOR_REQUIRED_ARGUMENT();
       lf = strdup(argv[i + 1]);
       if (!lf)
@@ -1131,8 +1148,7 @@ ddxProcessArgument(int argc, char **argv, int i)
       return 2;
     }
   }
-  if (!strcmp(argv[i], "-config") || !strcmp(argv[i], "-xf86config"))
-  {
+    if (!strcmp(argv[i], "-config") || !strcmp(argv[i], "-xf86config")) {
     CHECK_FOR_REQUIRED_ARGUMENT();
     if (xf86PrivsElevated() && !xf86PathIsSafe(argv[i + 1])) {
       FatalError("\nInvalid argument for %s\n"
@@ -1144,8 +1160,7 @@ ddxProcessArgument(int argc, char **argv, int i)
     xf86ConfigFile = argv[i + 1];
     return 2;
   }
-  if (!strcmp(argv[i], "-configdir"))
-  {
+    if (!strcmp(argv[i], "-configdir")) {
     CHECK_FOR_REQUIRED_ARGUMENT();
     if (xf86PrivsElevated() && !xf86PathIsSafe(argv[i + 1])) {
       FatalError("\nInvalid argument for %s\n"
@@ -1157,42 +1172,35 @@ ddxProcessArgument(int argc, char **argv, int i)
     xf86ConfigDir = argv[i + 1];
     return 2;
   }
-  if (!strcmp(argv[i],"-flipPixels"))
-  {
+    if (!strcmp(argv[i], "-flipPixels")) {
     xf86FlipPixels = TRUE;
     return 1;
   }
 #ifdef XF86VIDMODE
-  if (!strcmp(argv[i],"-disableVidMode"))
-  {
+    if (!strcmp(argv[i], "-disableVidMode")) {
     xf86VidModeDisabled = TRUE;
     return 1;
   }
-  if (!strcmp(argv[i],"-allowNonLocalXvidtune"))
-  {
+    if (!strcmp(argv[i], "-allowNonLocalXvidtune")) {
     xf86VidModeAllowNonLocal = TRUE;
     return 1;
   }
 #endif
-  if (!strcmp(argv[i],"-allowMouseOpenFail"))
-  {
+    if (!strcmp(argv[i], "-allowMouseOpenFail")) {
     xf86AllowMouseOpenFail = TRUE;
     return 1;
   }
-  if (!strcmp(argv[i],"-ignoreABI"))
-  {
+    if (!strcmp(argv[i], "-ignoreABI")) {
     LoaderSetOptions(LDR_OPT_ABI_MISMATCH_NONFATAL);
     return 1;
   }
-  if (!strcmp(argv[i],"-verbose"))
-  {
-    if (++i < argc && argv[i])
-    {
+    if (!strcmp(argv[i], "-verbose")) {
+        if (++i < argc && argv[i]) {
       char *end;
       long val;
+
       val = strtol(argv[i], &end, 0);
-      if (*end == '\0')
-      {
+            if (*end == '\0') {
 	xf86SetVerbosity(val);
 	return 2;
       }
@@ -1200,15 +1208,13 @@ ddxProcessArgument(int argc, char **argv, int i)
     xf86SetVerbosity(++xf86Verbose);
     return 1;
   }
-  if (!strcmp(argv[i],"-logverbose"))
-  {
-    if (++i < argc && argv[i])
-    {
+    if (!strcmp(argv[i], "-logverbose")) {
+        if (++i < argc && argv[i]) {
       char *end;
       long val;
+
       val = strtol(argv[i], &end, 0);
-      if (*end == '\0')
-      {
+            if (*end == '\0') {
 	xf86SetLogVerbosity(val);
 	return 2;
       }
@@ -1216,111 +1222,95 @@ ddxProcessArgument(int argc, char **argv, int i)
     xf86SetLogVerbosity(++xf86LogVerbose);
     return 1;
   }
-  if (!strcmp(argv[i],"-quiet"))
-  {
+    if (!strcmp(argv[i], "-quiet")) {
     xf86SetVerbosity(-1);
     return 1;
   }
-  if (!strcmp(argv[i],"-showconfig") || !strcmp(argv[i],"-version"))
-  {
+    if (!strcmp(argv[i], "-showconfig") || !strcmp(argv[i], "-version")) {
     xf86PrintBanner();
     exit(0);
   }
-  if (!strcmp(argv[i],"-showDefaultModulePath"))
-  {
+    if (!strcmp(argv[i], "-showDefaultModulePath")) {
     xf86PrintDefaultModulePath();
     exit(0);
   }
-  if (!strcmp(argv[i],"-showDefaultLibPath"))
-  {
+    if (!strcmp(argv[i], "-showDefaultLibPath")) {
     xf86PrintDefaultLibraryPath();
     exit(0);
   }
   /* Notice the -fp flag, but allow it to pass to the dix layer */
-  if (!strcmp(argv[i], "-fp"))
-  {
+    if (!strcmp(argv[i], "-fp")) {
     xf86fpFlag = TRUE;
     return 0;
   }
   /* Notice the -bs flag, but allow it to pass to the dix layer */
-  if (!strcmp(argv[i], "-bs"))
-  {
+    if (!strcmp(argv[i], "-bs")) {
     xf86bsDisableFlag = TRUE;
     return 0;
   }
   /* Notice the +bs flag, but allow it to pass to the dix layer */
-  if (!strcmp(argv[i], "+bs"))
-  {
+    if (!strcmp(argv[i], "+bs")) {
     xf86bsEnableFlag = TRUE;
     return 0;
   }
   /* Notice the -s flag, but allow it to pass to the dix layer */
-  if (!strcmp(argv[i], "-s"))
-  {
+    if (!strcmp(argv[i], "-s")) {
     xf86sFlag = TRUE;
     return 0;
   }
-  if (!strcmp(argv[i], "-pixmap24"))
-  {
+    if (!strcmp(argv[i], "-pixmap24")) {
     xf86Pix24 = Pix24Use24;
     return 1;
   }
-  if (!strcmp(argv[i], "-pixmap32"))
-  {
+    if (!strcmp(argv[i], "-pixmap32")) {
     xf86Pix24 = Pix24Use32;
     return 1;
   }
-  if (!strcmp(argv[i], "-fbbpp"))
-  {
+    if (!strcmp(argv[i], "-fbbpp")) {
     int bpp;
+
     CHECK_FOR_REQUIRED_ARGUMENT();
-    if (sscanf(argv[++i], "%d", &bpp) == 1)
-    {
+        if (sscanf(argv[++i], "%d", &bpp) == 1) {
       xf86FbBpp = bpp;
       return 2;
     }
-    else
-    {
+        else {
       ErrorF("Invalid fbbpp\n");
       return 0;
     }
   }
-  if (!strcmp(argv[i], "-depth"))
-  {
+    if (!strcmp(argv[i], "-depth")) {
     int depth;
+
     CHECK_FOR_REQUIRED_ARGUMENT();
-    if (sscanf(argv[++i], "%d", &depth) == 1)
-    {
+        if (sscanf(argv[++i], "%d", &depth) == 1) {
       xf86Depth = depth;
       return 2;
     }
-    else
-    {
+        else {
       ErrorF("Invalid depth\n");
       return 0;
     }
   }
-  if (!strcmp(argv[i], "-weight"))
-  {
+    if (!strcmp(argv[i], "-weight")) {
     int red, green, blue;
+
     CHECK_FOR_REQUIRED_ARGUMENT();
-    if (sscanf(argv[++i], "%1d%1d%1d", &red, &green, &blue) == 3)
-    {
+        if (sscanf(argv[++i], "%1d%1d%1d", &red, &green, &blue) == 3) {
       xf86Weight.red = red;
       xf86Weight.green = green;
       xf86Weight.blue = blue;
       return 2;
     }
-    else
-    {
+        else {
       ErrorF("Invalid weighting\n");
       return 0;
     }
   }
   if (!strcmp(argv[i], "-gamma")  || !strcmp(argv[i], "-rgamma") ||
-      !strcmp(argv[i], "-ggamma") || !strcmp(argv[i], "-bgamma"))
-  {
+        !strcmp(argv[i], "-ggamma") || !strcmp(argv[i], "-bgamma")) {
     double gamma;
+
     CHECK_FOR_REQUIRED_ARGUMENT();
     if (sscanf(argv[++i], "%lf", &gamma) == 1) {
        if (gamma < GAMMA_MIN || gamma > GAMMA_MAX) {
@@ -1330,50 +1320,46 @@ ddxProcessArgument(int argc, char **argv, int i)
        }
        if (!strcmp(argv[i-1], "-gamma"))
 	  xf86Gamma.red = xf86Gamma.green = xf86Gamma.blue = gamma;
-       else if (!strcmp(argv[i-1], "-rgamma")) xf86Gamma.red = gamma;
-       else if (!strcmp(argv[i-1], "-ggamma")) xf86Gamma.green = gamma;
-       else if (!strcmp(argv[i-1], "-bgamma")) xf86Gamma.blue = gamma;
+            else if (!strcmp(argv[i - 1], "-rgamma"))
+                xf86Gamma.red = gamma;
+            else if (!strcmp(argv[i - 1], "-ggamma"))
+                xf86Gamma.green = gamma;
+            else if (!strcmp(argv[i - 1], "-bgamma"))
+                xf86Gamma.blue = gamma;
        return 2;
     }
   }
-  if (!strcmp(argv[i], "-layout"))
-  {
+    if (!strcmp(argv[i], "-layout")) {
     CHECK_FOR_REQUIRED_ARGUMENT();
     xf86LayoutName = argv[++i];
     return 2;
   }
-  if (!strcmp(argv[i], "-screen"))
-  {
+    if (!strcmp(argv[i], "-screen")) {
     CHECK_FOR_REQUIRED_ARGUMENT();
     xf86ScreenName = argv[++i];
     return 2;
   }
-  if (!strcmp(argv[i], "-pointer"))
-  {
+    if (!strcmp(argv[i], "-pointer")) {
     CHECK_FOR_REQUIRED_ARGUMENT();
     xf86PointerName = argv[++i];
     return 2;
   }
-  if (!strcmp(argv[i], "-keyboard"))
-  {
+    if (!strcmp(argv[i], "-keyboard")) {
     CHECK_FOR_REQUIRED_ARGUMENT();
     xf86KeyboardName = argv[++i];
     return 2;
   }
-  if (!strcmp(argv[i], "-nosilk"))
-  {
+    if (!strcmp(argv[i], "-nosilk")) {
     xf86silkenMouseDisableFlag = TRUE;
     return 1;
   }
 #ifdef HAVE_ACPI
-  if (!strcmp(argv[i], "-noacpi"))
-  {
+    if (!strcmp(argv[i], "-noacpi")) {
     xf86acpiDisableFlag = TRUE;
     return 1;
   }
 #endif
-  if (!strcmp(argv[i], "-configure"))
-  {
+    if (!strcmp(argv[i], "-configure")) {
     if (getuid() != 0 && geteuid() == 0) {
 	ErrorF("The '-configure' option can only be used by root.\n");
 	exit(1);
@@ -1382,8 +1368,7 @@ ddxProcessArgument(int argc, char **argv, int i)
     xf86AllowMouseOpenFail = TRUE;
     return 1;
   }
-  if (!strcmp(argv[i], "-showopts"))
-  {
+    if (!strcmp(argv[i], "-showopts")) {
     if (getuid() != 0 && geteuid() == 0) {
     ErrorF("The '-showopts' option can only be used by root.\n");
     exit(1);
@@ -1392,8 +1377,7 @@ ddxProcessArgument(int argc, char **argv, int i)
     return 1;
   }
 #ifdef XSERVER_LIBPCIACCESS
-  if (!strcmp(argv[i], "-isolateDevice"))
-  {
+    if (!strcmp(argv[i], "-isolateDevice")) {
     CHECK_FOR_REQUIRED_ARGUMENT();
     if (strncmp(argv[++i], "PCI:", 4)) {
        FatalError("Bus types other than PCI not yet isolable\n");
@@ -1403,18 +1387,15 @@ ddxProcessArgument(int argc, char **argv, int i)
   }
 #endif
   /* Notice cmdline xkbdir, but pass to dix as well */
-  if (!strcmp(argv[i], "-xkbdir"))
-  {
+    if (!strcmp(argv[i], "-xkbdir")) {
     xf86xkbdirFlag = TRUE;
     return 0;
   }
-  if (!strcmp(argv[i], "-novtswitch"))
-  {
+    if (!strcmp(argv[i], "-novtswitch")) {
     xf86Info.autoVTSwitch = FALSE;
     return 1;
   }
-  if (!strcmp(argv[i], "-sharevts"))
-  {
+    if (!strcmp(argv[i], "-sharevts")) {
     xf86Info.ShareVTs = TRUE;
     return 1;
   }
@@ -1435,17 +1416,22 @@ ddxUseMsg(void)
   ErrorF("\n");
   ErrorF("\n");
   ErrorF("Device Dependent Usage\n");
-  if (!xf86PrivsElevated())
-  {
+    if (!xf86PrivsElevated()) {
     ErrorF("-modulepath paths      specify the module search path\n");
     ErrorF("-logfile file          specify a log file name\n");
-    ErrorF("-configure             probe for devices and write an "__XCONFIGFILE__"\n");
-    ErrorF("-showopts              print available options for all installed drivers\n");
-  }
-  ErrorF("-config file           specify a configuration file, relative to the\n");
-  ErrorF("                       "__XCONFIGFILE__" search path, only root can use absolute\n");
-  ErrorF("-configdir dir         specify a configuration directory, relative to the\n");
-  ErrorF("                       "__XCONFIGDIR__" search path, only root can use absolute\n");
+        ErrorF("-configure             probe for devices and write an "
+               __XCONFIGFILE__ "\n");
+        ErrorF
+            ("-showopts              print available options for all installed drivers\n");
+    }
+    ErrorF
+        ("-config file           specify a configuration file, relative to the\n");
+    ErrorF("                       " __XCONFIGFILE__
+           " search path, only root can use absolute\n");
+    ErrorF
+        ("-configdir dir         specify a configuration directory, relative to the\n");
+    ErrorF("                       " __XCONFIGDIR__
+           " search path, only root can use absolute\n");
   ErrorF("-verbose [n]           verbose startup messages\n");
   ErrorF("-logverbose [n]        verbose log messages\n");
   ErrorF("-quiet                 minimal startup messages\n");
@@ -1453,37 +1439,44 @@ ddxUseMsg(void)
   ErrorF("-pixmap32              use 32bpp pixmaps for depth 24\n");
   ErrorF("-fbbpp n               set bpp for the framebuffer. Default: 8\n");
   ErrorF("-depth n               set colour depth. Default: 8\n");
-  ErrorF("-gamma f               set gamma value (0.1 < f < 10.0) Default: 1.0\n");
+    ErrorF
+        ("-gamma f               set gamma value (0.1 < f < 10.0) Default: 1.0\n");
   ErrorF("-rgamma f              set gamma value for red phase\n");
   ErrorF("-ggamma f              set gamma value for green phase\n");
   ErrorF("-bgamma f              set gamma value for blue phase\n");
-  ErrorF("-weight nnn            set RGB weighting at 16 bpp.  Default: 565\n");
+    ErrorF
+        ("-weight nnn            set RGB weighting at 16 bpp.  Default: 565\n");
   ErrorF("-layout name           specify the ServerLayout section name\n");
   ErrorF("-screen name           specify the Screen section name\n");
-  ErrorF("-keyboard name         specify the core keyboard InputDevice name\n");
-  ErrorF("-pointer name          specify the core pointer InputDevice name\n");
+    ErrorF
+        ("-keyboard name         specify the core keyboard InputDevice name\n");
+    ErrorF
+        ("-pointer name          specify the core pointer InputDevice name\n");
   ErrorF("-nosilk                disable Silken Mouse\n");
   ErrorF("-flipPixels            swap default black/white Pixel values\n");
 #ifdef XF86VIDMODE
   ErrorF("-disableVidMode        disable mode adjustments with xvidtune\n");
-  ErrorF("-allowNonLocalXvidtune allow xvidtune to be run as a non-local client\n");
+    ErrorF
+        ("-allowNonLocalXvidtune allow xvidtune to be run as a non-local client\n");
 #endif
-  ErrorF("-allowMouseOpenFail    start server even if the mouse can't be initialized\n");
+    ErrorF
+        ("-allowMouseOpenFail    start server even if the mouse can't be initialized\n");
   ErrorF("-ignoreABI             make module ABI mismatches non-fatal\n");
 #ifdef XSERVER_LIBPCIACCESS
-  ErrorF("-isolateDevice bus_id  restrict device resets to bus_id (PCI only)\n");
+    ErrorF
+        ("-isolateDevice bus_id  restrict device resets to bus_id (PCI only)\n");
 #endif
   ErrorF("-version               show the server version\n");
   ErrorF("-showDefaultModulePath show the server default module path\n");
   ErrorF("-showDefaultLibPath    show the server default library path\n");
-  ErrorF("-novtswitch            don't automatically switch VT at reset & exit\n");
+    ErrorF
+        ("-novtswitch            don't automatically switch VT at reset & exit\n");
   ErrorF("-sharevts              share VTs with another X server\n");
   /* OS-specific usage */
   xf86UseMsg();
   ErrorF("\n");
 }
 
-
 /*
  * xf86LoadModules iterates over a list that is being passed in.
  */
@@ -1581,7 +1574,6 @@ xf86GetBppFromDepth(ScrnInfoPtr pScrn, int depth)
 {
     PixmapFormatPtr format;
 
-
     format = xf86GetPixFormat(pScrn, depth);
     if (format)
 	return format->bitsPerPixel;
