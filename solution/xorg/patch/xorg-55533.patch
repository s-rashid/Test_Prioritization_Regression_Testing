diff --git a/hw/xfree86/modes/xf86Crtc.c b/hw/xfree86/modes/xf86Crtc.c
index da9db34..6d5e92f 100644
--- a/hw/xfree86/modes/xf86Crtc.c
+++ b/hw/xfree86/modes/xf86Crtc.c
@@ -55,8 +55,7 @@
 int xf86CrtcConfigPrivateIndex = -1;
 
 void
-xf86CrtcConfigInit (ScrnInfoPtr scrn,
-		    const xf86CrtcConfigFuncsRec *funcs)
+xf86CrtcConfigInit(ScrnInfoPtr scrn, const xf86CrtcConfigFuncsRec * funcs)
 {
     xf86CrtcConfigPtr	config;
     
@@ -71,8 +70,7 @@ xf86CrtcConfigInit (ScrnInfoPtr scrn,
  
 void
 xf86CrtcSetSizeRange (ScrnInfoPtr scrn,
-		      int minWidth, int minHeight,
-		      int maxWidth, int maxHeight)
+                     int minWidth, int minHeight, int maxWidth, int maxHeight)
 {
     xf86CrtcConfigPtr	config = XF86_CRTC_CONFIG_PTR(scrn);
 
@@ -86,8 +84,7 @@ xf86CrtcSetSizeRange (ScrnInfoPtr scrn,
  * Crtc functions
  */
 xf86CrtcPtr
-xf86CrtcCreate (ScrnInfoPtr		scrn,
-		const xf86CrtcFuncsRec	*funcs)
+xf86CrtcCreate(ScrnInfoPtr scrn, const xf86CrtcFuncsRec * funcs)
 {
     xf86CrtcConfigPtr   xf86_config = XF86_CRTC_CONFIG_PTR(scrn);
     xf86CrtcPtr		crtc, *crtcs;
@@ -131,8 +128,7 @@ xf86CrtcCreate (ScrnInfoPtr		scrn,
 			  (xf86_config->num_crtc + 1) * sizeof (xf86CrtcPtr));
     else
 	crtcs = malloc((xf86_config->num_crtc + 1) * sizeof (xf86CrtcPtr));
-    if (!crtcs)
-    {
+    if (!crtcs) {
 	free(crtc->gamma_red);
 	free(crtc);
 	return NULL;
@@ -150,8 +146,7 @@ xf86CrtcDestroy (xf86CrtcPtr crtc)
     
     (*crtc->funcs->destroy) (crtc);
     for (c = 0; c < xf86_config->num_crtc; c++)
-	if (xf86_config->crtc[c] == crtc)
-	{
+        if (xf86_config->crtc[c] == crtc) {
 	    memmove (&xf86_config->crtc[c],
 		     &xf86_config->crtc[c+1],
 		     ((xf86_config->num_crtc - (c + 1)) * sizeof(void*)));
@@ -163,7 +158,6 @@ xf86CrtcDestroy (xf86CrtcPtr crtc)
     free(crtc);
 }
 
-
 /**
  * Return whether any outputs are connected to the specified pipe
  */
@@ -190,16 +184,13 @@ xf86CrtcSetScreenSubpixelOrder (ScreenPtr pScreen)
     xf86CrtcConfigPtr   xf86_config = XF86_CRTC_CONFIG_PTR(scrn);
     int			c, o;
 
-    for (c = 0; c < xf86_config->num_crtc; c++)
-    {
+    for (c = 0; c < xf86_config->num_crtc; c++) {
 	xf86CrtcPtr crtc = xf86_config->crtc[c];
 	
-	for (o = 0; o < xf86_config->num_output; o++)
-	{
+        for (o = 0; o < xf86_config->num_output; o++) {
 	    xf86OutputPtr   output = xf86_config->output[o];
 
-	    if (output->crtc == crtc)
-	    {
+            if (output->crtc == crtc) {
 		switch (output->subpixel_order) {
 		case SubPixelNone:
 		    has_none = TRUE;
@@ -214,8 +205,7 @@ xf86CrtcSetScreenSubpixelOrder (ScreenPtr pScreen)
 	    if (subpixel_order != SubPixelUnknown)
 		break;
 	}
-	if (subpixel_order != SubPixelUnknown)
-	{
+        if (subpixel_order != SubPixelUnknown) {
 	    static const int circle[4] = {
 		SubPixelHorizontalRGB,
 		SubPixelVerticalRGB,
@@ -224,6 +214,7 @@ xf86CrtcSetScreenSubpixelOrder (ScreenPtr pScreen)
 	    };
 	    int	rotate;
 	    int c;
+
 	    for (rotate = 0; rotate < 4; rotate++)
 		if (crtc->rotation & (1 << rotate))
 		    break;
@@ -248,8 +239,9 @@ xf86CrtcSetScreenSubpixelOrder (ScreenPtr pScreen)
  * Sets the given video mode on the given crtc
  */
 Bool
-xf86CrtcSetModeTransform (xf86CrtcPtr crtc, DisplayModePtr mode, Rotation rotation,
-			  RRTransformPtr transform, int x, int y)
+xf86CrtcSetModeTransform(xf86CrtcPtr crtc, DisplayModePtr mode,
+                         Rotation rotation, RRTransformPtr transform, int x,
+                         int y)
 {
     ScrnInfoPtr		scrn = crtc->scrn;
     xf86CrtcConfigPtr   xf86_config = XF86_CRTC_CONFIG_PTR(scrn);
@@ -266,8 +258,7 @@ xf86CrtcSetModeTransform (xf86CrtcPtr crtc, DisplayModePtr mode, Rotation rotati
     crtc->enabled = xf86CrtcInUse (crtc);
 
     /* We only hit this if someone explicitly sends a "disabled" modeset. */
-    if (!crtc->enabled)
-    {
+    if (!crtc->enabled) {
 	/* Check everything for stuff that should be off. */
 	xf86DisableUnusedFunctions(scrn);
 	return TRUE;
@@ -275,7 +266,6 @@ xf86CrtcSetModeTransform (xf86CrtcPtr crtc, DisplayModePtr mode, Rotation rotati
 
     adjusted_mode = xf86DuplicateMode(mode);
 
-
     saved_mode = crtc->mode;
     saved_x = crtc->x;
     saved_y = crtc->y;
@@ -296,7 +286,8 @@ xf86CrtcSetModeTransform (xf86CrtcPtr crtc, DisplayModePtr mode, Rotation rotati
     if (transform) {
 	RRTransformCopy (&crtc->transform, transform);
 	crtc->transformPresent = TRUE;
-    } else
+    }
+    else
 	crtc->transformPresent = FALSE;
 
     if (crtc->funcs->set_mode_major) {
@@ -344,9 +335,9 @@ xf86CrtcSetModeTransform (xf86CrtcPtr crtc, DisplayModePtr mode, Rotation rotati
      * on the DPLL.
      */
     crtc->funcs->mode_set(crtc, mode, adjusted_mode, crtc->x, crtc->y);
-    for (i = 0; i < xf86_config->num_output; i++) 
-    {
+    for (i = 0; i < xf86_config->num_output; i++) {
 	xf86OutputPtr output = xf86_config->output[i];
+
 	if (output->crtc == crtc)
 	    output->funcs->mode_set(output, mode, adjusted_mode);
     }
@@ -358,9 +349,9 @@ xf86CrtcSetModeTransform (xf86CrtcPtr crtc, DisplayModePtr mode, Rotation rotati
 
     /* Now, enable the clocks, plane, pipe, and outputs that we set up. */
     crtc->funcs->commit(crtc);
-    for (i = 0; i < xf86_config->num_output; i++) 
-    {
+    for (i = 0; i < xf86_config->num_output; i++) {
 	xf86OutputPtr output = xf86_config->output[i];
+
 	if (output->crtc == crtc)
 	    output->funcs->commit(output);
     }
@@ -374,7 +365,8 @@ done:
 	    xf86CrtcSetScreenSubpixelOrder (scrn->pScreen);
 	if (scrn->ModeSet)
 	    scrn->ModeSet(scrn);
-    } else {
+    }
+    else {
 	crtc->x = saved_x;
 	crtc->y = saved_y;
 	crtc->rotation = saved_rotation;
@@ -506,8 +498,7 @@ xf86OutputSetMonitor (xf86OutputPtr output)
     if (!output->conf_monitor && output->use_screen_monitor)
 	output->conf_monitor = xf86findMonitor (output->scrn->monitor->id,
 						xf86configptr->conf_monitor_lst);
-    if (output->conf_monitor)
-    {
+    if (output->conf_monitor) {
 	xf86DrvMsg (output->scrn->scrnIndex, X_INFO,
 		    "Output %s using monitor section %s\n",
 		    output->name, output->conf_monitor->mon_identifier);
@@ -517,8 +508,7 @@ xf86OutputSetMonitor (xf86OutputPtr output)
     }
     else
 	xf86DrvMsg (output->scrn->scrnIndex, X_INFO,
-		    "Output %s has no monitor section\n",
-		    output->name);
+                   "Output %s has no monitor section\n", output->name);
 }
 
 static Bool
@@ -527,15 +517,13 @@ xf86OutputEnabled (xf86OutputPtr output, Bool strict)
     Bool    enable, disable;
 
     /* check to see if this output was enabled in the config file */
-    if (xf86GetOptValBool (output->options, OPTION_ENABLE, &enable) && enable)
-    {
+    if (xf86GetOptValBool(output->options, OPTION_ENABLE, &enable) && enable) {
 	xf86DrvMsg (output->scrn->scrnIndex, X_INFO,
 		    "Output %s enabled by config file\n", output->name);
 	return TRUE;
     }
     /* or if this output was disabled in the config file */
-    if (xf86GetOptValBool (output->options, OPTION_DISABLE, &disable) && disable)
-    {
+    if (xf86GetOptValBool(output->options, OPTION_DISABLE, &disable) && disable) {
 	xf86DrvMsg (output->scrn->scrnIndex, X_INFO,
 		    "Output %s disabled by config file\n", output->name);
 	return FALSE;
@@ -589,8 +577,7 @@ xf86OutputInitialRotation (xf86OutputPtr output)
 
 xf86OutputPtr
 xf86OutputCreate (ScrnInfoPtr		    scrn,
-		  const xf86OutputFuncsRec  *funcs,
-		  const char		    *name)
+                 const xf86OutputFuncsRec * funcs, const char *name)
 {
     xf86OutputPtr	output, *outputs;
     xf86CrtcConfigPtr   xf86_config = XF86_CRTC_CONFIG_PTR(scrn);
@@ -607,8 +594,7 @@ xf86OutputCreate (ScrnInfoPtr		    scrn,
 	return NULL;
     output->scrn = scrn;
     output->funcs = funcs;
-    if (name)
-    {
+    if (name) {
 	output->name = (char *) (output + 1);
 	strcpy (output->name, name);
     }
@@ -620,38 +606,33 @@ xf86OutputCreate (ScrnInfoPtr		    scrn,
 #ifdef RANDR_12_INTERFACE
     output->randr_output = NULL;
 #endif
-    if (name)
-    {
+    if (name) {
 	xf86OutputSetMonitor (output);
-	if (xf86OutputIgnored (output))
-	{
+        if (xf86OutputIgnored(output)) {
 	    free(output);
 	    return FALSE;
 	}
     }
     
-    
     if (xf86_config->output)
 	outputs = realloc(xf86_config->output,
-			  (xf86_config->num_output + 1) * sizeof (xf86OutputPtr));
+                          (xf86_config->num_output +
+                           1) * sizeof(xf86OutputPtr));
     else
 	outputs = malloc((xf86_config->num_output + 1) * sizeof (xf86OutputPtr));
-    if (!outputs)
-    {
+    if (!outputs) {
 	free(output);
 	return NULL;
     }
 
     xf86_config->output = outputs;
 
-    if (xf86GetOptValBool (output->options, OPTION_PRIMARY, &primary) && primary)
-    {
+    if (xf86GetOptValBool(output->options, OPTION_PRIMARY, &primary) && primary) {
 	memmove(xf86_config->output + 1, xf86_config->output,
 		xf86_config->num_output * sizeof (xf86OutputPtr));
 	xf86_config->output[0] = output;
     }
-    else
-    {
+    else {
 	xf86_config->output[xf86_config->num_output] = output;
     }
 
@@ -680,8 +661,7 @@ xf86OutputRename (xf86OutputPtr output, const char *name)
 void
 xf86OutputUseScreenMonitor (xf86OutputPtr output, Bool use_screen_monitor)
 {
-    if (use_screen_monitor != output->use_screen_monitor)
-    {
+    if (use_screen_monitor != output->use_screen_monitor) {
 	output->use_screen_monitor = use_screen_monitor;
 	xf86OutputSetMonitor (output);
     }
@@ -698,8 +678,7 @@ xf86OutputDestroy (xf86OutputPtr output)
     while (output->probed_modes)
 	xf86DeleteMode (&output->probed_modes, output->probed_modes);
     for (o = 0; o < xf86_config->num_output; o++)
-	if (xf86_config->output[o] == output)
-	{
+        if (xf86_config->output[o] == output) {
 	    memmove (&xf86_config->output[o],
 		     &xf86_config->output[o+1],
 		     ((xf86_config->num_output - (o + 1)) * sizeof(void*)));
@@ -745,14 +724,12 @@ xf86CrtcCloseScreen (int index, ScreenPtr screen)
 
     xf86RotateCloseScreen (screen);
 
-    for (o = 0; o < config->num_output; o++)
-    {
+    for (o = 0; o < config->num_output; o++) {
 	xf86OutputPtr	output = config->output[o];
 
 	output->randr_output = NULL;
     }
-    for (c = 0; c < config->num_crtc; c++)
-    {
+    for (c = 0; c < config->num_crtc; c++) {
 	xf86CrtcPtr	crtc = config->crtc[c];
 
 	crtc->randr_crtc = NULL;
@@ -777,26 +754,25 @@ xf86CrtcScreenInit (ScreenPtr screen)
     int			c;
 
     /* Rotation */
-    xf86DrvMsg(scrn->scrnIndex, X_INFO, "RandR 1.2 enabled, ignore the following RandR disabled message.\n");
+    xf86DrvMsg(scrn->scrnIndex, X_INFO,
+               "RandR 1.2 enabled, ignore the following RandR disabled message.\n");
     xf86DisableRandR(); /* Disable old RandR extension support */
     xf86RandR12Init (screen);
 
     /* support all rotations if every crtc has the shadow alloc funcs */
-    for (c = 0; c < config->num_crtc; c++)
-    {
+    for (c = 0; c < config->num_crtc; c++) {
 	xf86CrtcPtr crtc = config->crtc[c];
+
 	if (!crtc->funcs->shadow_allocate || !crtc->funcs->shadow_create)
 	    break;
     }
-    if (c == config->num_crtc)
-    {
+    if (c == config->num_crtc) {
 	xf86RandR12SetRotations (screen, RR_Rotate_0 | RR_Rotate_90 |
 				 RR_Rotate_180 | RR_Rotate_270 |
 				 RR_Reflect_X | RR_Reflect_Y);
 	xf86RandR12SetTransformSupport (screen, TRUE);
     }
-    else
-    {
+    else {
 	xf86RandR12SetRotations (screen, RR_Rotate_0);
 	xf86RandR12SetTransformSupport (screen, FALSE);
     }
@@ -836,8 +812,7 @@ xf86DefaultMode (xf86OutputPtr output, int width, int height)
     /*
      * Pick a mode closest to DEFAULT_DPI
      */
-    for (mode = output->probed_modes; mode; mode = mode->next)
-    {
+    for (mode = output->probed_modes; mode; mode = mode->next) {
 	int	    dpi;
 	int	    preferred = (((mode->type & M_T_PREFERRED) != 0) +
 				 ((mode->type & M_T_USERPREF) != 0));
@@ -852,8 +827,7 @@ xf86DefaultMode (xf86OutputPtr output, int width, int height)
 	diff = dpi - DEFAULT_DPI;
 	diff = diff < 0 ? -diff : diff;
 	if (target_mode == NULL || (preferred > target_preferred) ||
-	    (preferred == target_preferred && diff < target_diff))
-	{
+            (preferred == target_preferred && diff < target_diff)) {
 	    target_mode = mode;
 	    target_diff = diff;
 	    target_preferred = preferred;
@@ -874,8 +848,7 @@ xf86ClosestMode (xf86OutputPtr output,
     /*
      * Pick a mode closest to the specified mode
      */
-    for (mode = output->probed_modes; mode; mode = mode->next)
-    {
+    for (mode = output->probed_modes; mode; mode = mode->next) {
 	int	    dx, dy;
 	int	    diff;
 
@@ -888,11 +861,14 @@ xf86ClosestMode (xf86OutputPtr output,
 	    xf86ModesEqual (mode, match))
 	    return mode;
 	
-	dx = xf86ModeWidth (match, match_rotation) - xf86ModeWidth (mode, output->initial_rotation);
-	dy = xf86ModeHeight (match, match_rotation) - xf86ModeHeight (mode, output->initial_rotation);
+        dx = xf86ModeWidth(match, match_rotation) - xf86ModeWidth(mode,
+                                                                  output->
+                                                                  initial_rotation);
+        dy = xf86ModeHeight(match, match_rotation) - xf86ModeHeight(mode,
+                                                                    output->
+                                                                    initial_rotation);
 	diff = dx * dx + dy * dy;
-	if (target_mode == NULL || diff < target_diff)
-	{
+        if (target_mode == NULL || diff < target_diff) {
 	    target_mode = mode;
 	    target_diff = diff;
 	}
@@ -905,8 +881,7 @@ xf86OutputHasPreferredMode (xf86OutputPtr output, int width, int height)
 {
     DisplayModePtr  mode;
 
-    for (mode = output->probed_modes; mode; mode = mode->next)
-    {
+    for (mode = output->probed_modes; mode; mode = mode->next) {
 	if (xf86ModeWidth (mode, output->initial_rotation) > width ||
 	    xf86ModeHeight (mode, output->initial_rotation) > height)
 	    continue;
@@ -932,10 +907,7 @@ xf86OutputHasUserPreferredMode (xf86OutputPtr output)
 static int
 xf86PickCrtcs (ScrnInfoPtr	scrn,
 	       xf86CrtcPtr	*best_crtcs,
-	       DisplayModePtr	*modes,
-	       int		n,
-	       int		width,
-	       int		height)
+              DisplayModePtr * modes, int n, int width, int height)
 {
     xf86CrtcConfigPtr	config = XF86_CRTC_CONFIG_PTR(scrn);
     int		    c, o;
@@ -976,8 +948,7 @@ xf86PickCrtcs (ScrnInfoPtr	scrn,
      * then attempt to configure the remaining
      * outputs
      */
-    for (c = 0; c < config->num_crtc; c++)
-    {
+    for (c = 0; c < config->num_crtc; c++) {
 	if ((output->possible_crtcs & (1 << c)) == 0)
 	    continue;
 	
@@ -989,17 +960,16 @@ xf86PickCrtcs (ScrnInfoPtr	scrn,
 	for (o = 0; o < n; o++)
 	    if (best_crtcs[o] == crtc)
 		break;
-	if (o < n)
-	{
+        if (o < n) {
 	    /*
 	     * If the two outputs desire the same mode,
 	     * see if they can be cloned
 	     */
 	    if (xf86ModesEqual (modes[o], modes[n]) &&
-		config->output[o]->initial_rotation == config->output[n]->initial_rotation &&
+                config->output[o]->initial_rotation ==
+                config->output[n]->initial_rotation &&
 		config->output[o]->initial_x == config->output[n]->initial_x &&
-		config->output[o]->initial_y == config->output[n]->initial_y)
-	    {
+                config->output[o]->initial_y == config->output[n]->initial_y) {
 		if ((output->possible_clones & (1 << o)) == 0)
 		    continue;		/* nope, try next CRTC */
 	    }
@@ -1008,9 +978,9 @@ xf86PickCrtcs (ScrnInfoPtr	scrn,
 	}
 	crtcs[n] = crtc;
 	memcpy (crtcs, best_crtcs, n * sizeof (xf86CrtcPtr));
-	score = my_score + xf86PickCrtcs (scrn, crtcs, modes, n+1, width, height);
-	if (score > best_score)
-	{
+        score =
+            my_score + xf86PickCrtcs(scrn, crtcs, modes, n + 1, width, height);
+        if (score > best_score) {
 	    best_crtc = crtc;
 	    best_score = score;
 	    memcpy (best_crtcs, crtcs, config->num_output * sizeof (xf86CrtcPtr));
@@ -1020,7 +990,6 @@ xf86PickCrtcs (ScrnInfoPtr	scrn,
     return best_score;
 }
 
-
 /*
  * Compute the virtual size necessary to place all of the available
  * crtcs in the specified configuration.
@@ -1040,27 +1009,28 @@ xf86DefaultScreenLimits (ScrnInfoPtr scrn, int *widthp, int *heightp,
     int	    c;
     int	    s;
 
-    for (c = 0; c < config->num_crtc; c++)
-    {
+    for (c = 0; c < config->num_crtc; c++) {
 	int	    crtc_width = 0, crtc_height = 0;
 	xf86CrtcPtr crtc = config->crtc[c];
 
-	if (crtc->enabled)
-	{
-	    crtc_width = crtc->desiredX + xf86ModeWidth (&crtc->desiredMode, crtc->desiredRotation);
-	    crtc_height = crtc->desiredY + xf86ModeHeight (&crtc->desiredMode, crtc->desiredRotation);
+        if (crtc->enabled) {
+            crtc_width =
+                crtc->desiredX + xf86ModeWidth(&crtc->desiredMode,
+                                               crtc->desiredRotation);
+            crtc_height =
+                crtc->desiredY + xf86ModeHeight(&crtc->desiredMode,
+                                                crtc->desiredRotation);
 	}
 	if (!canGrow) {
-	    for (o = 0; o < config->num_output; o++)
-	    {
+            for (o = 0; o < config->num_output; o++) {
 		xf86OutputPtr   output = config->output[o];
 
 		for (s = 0; s < config->num_crtc; s++)
-		    if (output->possible_crtcs & (1 << s))
-		    {
+                    if (output->possible_crtcs & (1 << s)) {
 			DisplayModePtr  mode;
-			for (mode = output->probed_modes; mode; mode = mode->next)
-			{
+
+                        for (mode = output->probed_modes; mode;
+                             mode = mode->next) {
 			    if (mode->HDisplay > crtc_width)
 				crtc_width = mode->HDisplay;
 			    if (mode->VDisplay > crtc_width)
@@ -1078,10 +1048,14 @@ xf86DefaultScreenLimits (ScrnInfoPtr scrn, int *widthp, int *heightp,
 	if (crtc_height > height)
 	    height = crtc_height;
     }
-    if (config->maxWidth && width > config->maxWidth) width = config->maxWidth;
-    if (config->maxHeight && height > config->maxHeight) height = config->maxHeight;
-    if (config->minWidth && width < config->minWidth) width = config->minWidth;
-    if (config->minHeight && height < config->minHeight) height = config->minHeight;
+    if (config->maxWidth && width > config->maxWidth)
+        width = config->maxWidth;
+    if (config->maxHeight && height > config->maxHeight)
+        height = config->maxHeight;
+    if (config->minWidth && width < config->minWidth)
+        width = config->minWidth;
+    if (config->minHeight && height < config->minHeight)
+        height = config->minHeight;
     *widthp = width;
     *heightp = height;
 }
@@ -1099,29 +1073,26 @@ xf86UserConfiguredOutputs(ScrnInfoPtr scrn, DisplayModePtr *modes)
     int o;
     Bool user_conf = FALSE;
 
-    for (o = 0; o < config->num_output; o++)
-    {
+    for (o = 0; o < config->num_output; o++) {
 	xf86OutputPtr output = config->output[o];
 	char	    *position;
 	char	    *relative_name;
 	OutputOpts	    relation;
 	int r;
+
 	static const OutputOpts	relations[] = {
 	    OPTION_BELOW, OPTION_RIGHT_OF, OPTION_ABOVE, OPTION_LEFT_OF
 	};
 
-	position = xf86GetOptValString (output->options,
-					OPTION_POSITION);
+        position = xf86GetOptValString(output->options, OPTION_POSITION);
 	if (position)
 	    user_conf = TRUE;
 
 	relation = 0;
 	relative_name = NULL;
-	for (r = 0; r < 4; r++)
-	{
+        for (r = 0; r < 4; r++) {
 	    relation = relations[r];
-	    relative_name = xf86GetOptValString (output->options,
-						     relation);
+            relative_name = xf86GetOptValString(output->options, relation);
 	    if (relative_name)
 		break;
 	}
@@ -1143,8 +1114,7 @@ xf86InitialOutputPositions (ScrnInfoPtr scrn, DisplayModePtr *modes)
     int			o;
     int			min_x, min_y;
     
-    for (o = 0; o < config->num_output; o++)
-    {
+    for (o = 0; o < config->num_output; o++) {
 	xf86OutputPtr	output = config->output[o];
 
 	output->initial_x = output->initial_y = POSITION_UNSET;
@@ -1153,13 +1123,11 @@ xf86InitialOutputPositions (ScrnInfoPtr scrn, DisplayModePtr *modes)
     /*
      * Loop until all outputs are set
      */
-    for (;;)
-    {
+    for (;;) {
 	Bool	any_set = FALSE;
 	Bool	keep_going = FALSE;
 
-	for (o = 0; o < config->num_output; o++)	
-	{
+        for (o = 0; o < config->num_output; o++) {
 	    static const OutputOpts	relations[] = {
 		OPTION_BELOW, OPTION_RIGHT_OF, OPTION_ABOVE, OPTION_LEFT_OF
 	    };
@@ -1172,21 +1140,18 @@ xf86InitialOutputPositions (ScrnInfoPtr scrn, DisplayModePtr *modes)
 
 	    if (output->initial_x != POSITION_UNSET)
 		continue;
-	    position = xf86GetOptValString (output->options,
-					    OPTION_POSITION);
+            position = xf86GetOptValString(output->options, OPTION_POSITION);
 	    /*
 	     * Absolute position wins
 	     */
-	    if (position)
-	    {
+            if (position) {
 		int		    x, y;
-		if (sscanf (position, "%d %d", &x, &y) == 2)
-		{
+
+                if (sscanf(position, "%d %d", &x, &y) == 2) {
 		    output->initial_x = x;
 		    output->initial_y = y;
 		}
-		else
-		{
+                else {
 		    xf86DrvMsg (scrn->scrnIndex, X_ERROR,
 				"Output %s position not of form \"x y\"\n",
 				output->name);
@@ -1200,40 +1165,33 @@ xf86InitialOutputPositions (ScrnInfoPtr scrn, DisplayModePtr *modes)
 	     */
 	    relation = 0;
 	    relative_name = NULL;
-	    for (r = 0; r < 4; r++)
-	    {
+            for (r = 0; r < 4; r++) {
 		relation = relations[r];
-		relative_name = xf86GetOptValString (output->options,
-						     relation);
+                relative_name = xf86GetOptValString(output->options, relation);
 		if (relative_name)
 		    break;
 	    }
-	    if (relative_name)
-	    {
+            if (relative_name) {
 		int or;
+
 		relative = NULL;
-		for (or = 0; or < config->num_output; or++)
-		{
+                for (or = 0; or < config->num_output; or++) {
 		    xf86OutputPtr	out_rel = config->output[or];
 		    XF86ConfMonitorPtr	rel_mon = out_rel->conf_monitor;
 
-		    if (rel_mon)
-		    {
+                    if (rel_mon) {
 			if (xf86nameCompare (rel_mon->mon_identifier,
-					      relative_name) == 0)
-			{
+                                            relative_name) == 0) {
 			    relative = config->output[or];
 			    break;
 			}
 		    }
-		    if (strcmp (out_rel->name, relative_name) == 0)
-		    {
+                    if (strcmp(out_rel->name, relative_name) == 0) {
 			relative = config->output[or];
 			break;
 		    }
 		}
-		if (!relative)
-		{
+                if (!relative) {
 		    xf86DrvMsg (scrn->scrnIndex, X_ERROR,
 				"Cannot position output %s relative to unknown output %s\n",
 				output->name, relative_name);
@@ -1242,8 +1200,7 @@ xf86InitialOutputPositions (ScrnInfoPtr scrn, DisplayModePtr *modes)
 		    any_set = TRUE;
 		    continue;
 		}
-		if (!modes[or])
-		{
+                if (!modes[or]) {
 		    xf86DrvMsg (scrn->scrnIndex, X_ERROR,
 				"Cannot position output %s relative to output %s without modes\n",
 				output->name, relative_name);
@@ -1252,8 +1209,7 @@ xf86InitialOutputPositions (ScrnInfoPtr scrn, DisplayModePtr *modes)
 		    any_set = TRUE;
 		    continue;
 		}
-		if (relative->initial_x == POSITION_UNSET)
-		{
+                if (relative->initial_x == POSITION_UNSET) {
 		    keep_going = TRUE;
 		    continue;
 		}
@@ -1261,18 +1217,22 @@ xf86InitialOutputPositions (ScrnInfoPtr scrn, DisplayModePtr *modes)
 		output->initial_y = relative->initial_y;
 		switch (relation) {
 		case OPTION_BELOW:
-		    output->initial_y += xf86ModeHeight (modes[or], relative->initial_rotation);
+                    output->initial_y +=
+                        xf86ModeHeight(modes[or], relative->initial_rotation);
 		    break;
 		case OPTION_RIGHT_OF:
-		    output->initial_x += xf86ModeWidth (modes[or], relative->initial_rotation);
+                    output->initial_x +=
+                        xf86ModeWidth(modes[or], relative->initial_rotation);
 		    break;
 		case OPTION_ABOVE:
 		    if (modes[o])
-			output->initial_y -= xf86ModeHeight (modes[o], output->initial_rotation);
+                        output->initial_y -=
+                            xf86ModeHeight(modes[o], output->initial_rotation);
 		    break;
 		case OPTION_LEFT_OF:
 		    if (modes[o])
-			output->initial_x -= xf86ModeWidth (modes[o], output->initial_rotation);
+                        output->initial_x -=
+                            xf86ModeWidth(modes[o], output->initial_rotation);
 		    break;
 		default:
 		    break;
@@ -1288,13 +1248,11 @@ xf86InitialOutputPositions (ScrnInfoPtr scrn, DisplayModePtr *modes)
 	}
 	if (!keep_going)
 	    break;
-	if (!any_set) 
-	{
-	    for (o = 0; o < config->num_output; o++)
-	    {
+        if (!any_set) {
+            for (o = 0; o < config->num_output; o++) {
 		xf86OutputPtr   output = config->output[o];
-		if (output->initial_x == POSITION_UNSET)
-		{
+
+                if (output->initial_x == POSITION_UNSET) {
 		    xf86DrvMsg (scrn->scrnIndex, X_ERROR,
 				"Output position loop. Moving %s to 0,0\n",
 				output->name);
@@ -1310,8 +1268,7 @@ xf86InitialOutputPositions (ScrnInfoPtr scrn, DisplayModePtr *modes)
      */
     min_x = 1000000;
     min_y = 1000000;
-    for (o = 0; o < config->num_output; o++)
-    {
+    for (o = 0; o < config->num_output; o++) {
 	xf86OutputPtr	output = config->output[o];
 
 	if (output->initial_x < min_x)
@@ -1320,8 +1277,7 @@ xf86InitialOutputPositions (ScrnInfoPtr scrn, DisplayModePtr *modes)
 	    min_y = output->initial_y;
     }
     
-    for (o = 0; o < config->num_output; o++)
-    {
+    for (o = 0; o < config->num_output; o++) {
 	xf86OutputPtr	output = config->output[o];
 
 	output->initial_x -= min_x;
@@ -1336,8 +1292,7 @@ xf86InitialPanning (ScrnInfoPtr scrn)
     xf86CrtcConfigPtr	config = XF86_CRTC_CONFIG_PTR(scrn);
     int			o;
     
-    for (o = 0; o < config->num_output; o++)
-    {
+    for (o = 0; o < config->num_output; o++) {
 	xf86OutputPtr	output = config->output[o];
 	char	       *panning = xf86GetOptValString (output->options, OPTION_PANNING);
 	int		width, height, left, top;
@@ -1409,8 +1364,7 @@ xf86SortModes (DisplayModePtr input)
     DisplayModePtr  output = NULL, i, o, n, *op, prev;
 
     /* sort by preferred status and pixel area */
-    while (input)
-    {
+    while (input) {
 	i = input;
 	input = input->next;
 	for (op = &output; (o = *op); op = &o->next)
@@ -1420,10 +1374,8 @@ xf86SortModes (DisplayModePtr input)
 	*op = i;
     }
     /* prune identical modes */
-    for (o = output; o && (n = o->next); o = n)
-    {
-	if (!strcmp (o->name, n->name) && xf86ModesEqual (o, n))
-	{
+    for (o = output; o && (n = o->next); o = n) {
+        if (!strcmp(o->name, n->name) && xf86ModesEqual(o, n)) {
 	    o->next = n->next;
 	    free(n->name);
 	    free(n);
@@ -1432,8 +1384,7 @@ xf86SortModes (DisplayModePtr input)
     }
     /* hook up backward links */
     prev = NULL;
-    for (o = output; o; o = o->next)
-    {
+    for (o = output; o; o = o->next) {
 	o->prev = prev;
 	prev = o;
     }
@@ -1513,14 +1464,16 @@ struct det_monrec_parameter {
     enum det_monrec_source *sync_source;
 };
 
-static void handle_detailed_monrec(struct detailed_monitor_section *det_mon,
-                                   void *data)
+static void
+handle_detailed_monrec(struct detailed_monitor_section *det_mon, void *data)
 {
     struct det_monrec_parameter *p;
+
     p = (struct det_monrec_parameter *)data;
 
     if (det_mon->type == DS_RANGES) {
         struct monitor_ranges *ranges = &det_mon->section.ranges;
+
         if (p->set_hsync && ranges->max_h) {
             p->mon_rec->hsync[p->mon_rec->nHsync].lo = ranges->min_h;
             p->mon_rec->hsync[p->mon_rec->nHsync].hi = ranges->max_h;
@@ -1557,8 +1510,7 @@ xf86ProbeOutputModes (ScrnInfoPtr scrn, int maxX, int maxY)
     }
 
     /* Probe the list of modes for each output. */
-    for (o = 0; o < config->num_output; o++) 
-    {
+    for (o = 0; o < config->num_output; o++) {
 	xf86OutputPtr	    output = config->output[o];
 	DisplayModePtr	    mode;
 	DisplayModePtr	    config_modes = NULL, output_modes, default_modes = NULL;
@@ -1570,8 +1522,7 @@ xf86ProbeOutputModes (ScrnInfoPtr scrn, int maxX, int maxY)
 	int		    max_clock = 0;
 	double		    clock;
 	Bool		    add_default_modes;
-	Bool		    debug_modes = config->debug_modes ||
-					  xf86Initialising;
+        Bool debug_modes = config->debug_modes || xf86Initialising;
 	enum det_monrec_source sync_source = sync_default;
 	
 	while (output->probed_modes != NULL)
@@ -1583,8 +1534,7 @@ xf86ProbeOutputModes (ScrnInfoPtr scrn, int maxX, int maxY)
 	output->status = (*output->funcs->detect)(output);
 
 	if (output->status == XF86OutputStatusDisconnected &&
-		!xf86ReturnOptValBool(output->options, OPTION_ENABLE, FALSE))
-	{
+            !xf86ReturnOptValBool(output->options, OPTION_ENABLE, FALSE)) {
 	    xf86OutputSetEDID (output, NULL);
 	    continue;
 	}
@@ -1593,21 +1543,22 @@ xf86ProbeOutputModes (ScrnInfoPtr scrn, int maxX, int maxY)
 	
 	conf_monitor = output->conf_monitor;
 	
-	if (conf_monitor)
-	{
+        if (conf_monitor) {
 	    int	i;
 	    
-	    for (i = 0; i < conf_monitor->mon_n_hsync; i++)
-	    {
-		mon_rec.hsync[mon_rec.nHsync].lo = conf_monitor->mon_hsync[i].lo;
-		mon_rec.hsync[mon_rec.nHsync].hi = conf_monitor->mon_hsync[i].hi;
+            for (i = 0; i < conf_monitor->mon_n_hsync; i++) {
+                mon_rec.hsync[mon_rec.nHsync].lo =
+                    conf_monitor->mon_hsync[i].lo;
+                mon_rec.hsync[mon_rec.nHsync].hi =
+                    conf_monitor->mon_hsync[i].hi;
 		mon_rec.nHsync++;
 		sync_source = sync_config;
 	    }
-	    for (i = 0; i < conf_monitor->mon_n_vrefresh; i++)
-	    {
-		mon_rec.vrefresh[mon_rec.nVrefresh].lo = conf_monitor->mon_vrefresh[i].lo;
-		mon_rec.vrefresh[mon_rec.nVrefresh].hi = conf_monitor->mon_vrefresh[i].hi;
+            for (i = 0; i < conf_monitor->mon_n_vrefresh; i++) {
+                mon_rec.vrefresh[mon_rec.nVrefresh].lo =
+                    conf_monitor->mon_vrefresh[i].lo;
+                mon_rec.vrefresh[mon_rec.nVrefresh].hi =
+                    conf_monitor->mon_vrefresh[i].hi;
 		mon_rec.nVrefresh++;
 		sync_source = sync_config;
 	    }
@@ -1626,8 +1577,7 @@ xf86ProbeOutputModes (ScrnInfoPtr scrn, int maxX, int maxY)
 	
 	edid_monitor = output->MonInfo;
 	
-        if (edid_monitor)
-        {
+        if (edid_monitor) {
             struct det_monrec_parameter p;
             struct disp_features    *features = &edid_monitor->features;
 
@@ -1641,9 +1591,7 @@ xf86ProbeOutputModes (ScrnInfoPtr scrn, int maxX, int maxY)
 	    p.set_vrefresh = mon_rec.nVrefresh == 0;
 	    p.sync_source = &sync_source;
 
-	    xf86ForEachDetailedBlock(edid_monitor,
-			             handle_detailed_monrec,
-			             &p);
+            xf86ForEachDetailedBlock(edid_monitor, handle_detailed_monrec, &p);
 	}
 
 	if (xf86GetOptValFreq (output->options, OPTION_MIN_CLOCK,
@@ -1662,14 +1610,12 @@ xf86ProbeOutputModes (ScrnInfoPtr scrn, int maxX, int maxY)
 	 * which seems like a fairly good mode to use when nothing else is
 	 * specified
 	 */
-	if (mon_rec.nHsync == 0)
-	{
+        if (mon_rec.nHsync == 0) {
 	    mon_rec.hsync[0].lo = 31.0;
 	    mon_rec.hsync[0].hi = 55.0;
 	    mon_rec.nHsync = 1;
 	}
-	if (mon_rec.nVrefresh == 0)
-	{
+        if (mon_rec.nVrefresh == 0) {
 	    mon_rec.vrefresh[0].lo = 58.0;
 	    mon_rec.vrefresh[0].hi = 62.0;
 	    mon_rec.nVrefresh = 1;
@@ -1685,8 +1631,7 @@ xf86ProbeOutputModes (ScrnInfoPtr scrn, int maxX, int maxY)
 	if (!mon_rec.reducedblanking)
 	    xf86ValidateModesReducedBlanking (scrn, default_modes);
 
-	if (sync_source == sync_config)
-	{
+        if (sync_source == sync_config) {
 	    /* 
 	     * Check output and config modes against sync range from config file
 	     */
@@ -1710,14 +1655,14 @@ xf86ProbeOutputModes (ScrnInfoPtr scrn, int maxX, int maxY)
 	output->probed_modes = NULL;
 	output->probed_modes = xf86ModesAdd (output->probed_modes, config_modes);
 	output->probed_modes = xf86ModesAdd (output->probed_modes, output_modes);
-	output->probed_modes = xf86ModesAdd (output->probed_modes, default_modes);
+        output->probed_modes =
+            xf86ModesAdd(output->probed_modes, default_modes);
 	
 	/*
 	 * Check all modes against max size, interlace, and doublescan
 	 */
 	if (maxX && maxY)
-	    xf86ValidateModesSize (scrn, output->probed_modes,
-				       maxX, maxY, 0);
+            xf86ValidateModesSize(scrn, output->probed_modes, maxX, maxY, 0);
 
 	{
 	    int flags = (output->interlaceAllowed ? V_INTERLACE : 0) |
@@ -1739,14 +1684,10 @@ xf86ProbeOutputModes (ScrnInfoPtr scrn, int maxX, int maxY)
 	/* Check for a configured preference for a particular mode */
 	preferred_mode = preferredMode(scrn, output);
 
-	if (preferred_mode)
-	{
-	    for (mode = output->probed_modes; mode; mode = mode->next)
-	    {
-		if (!strcmp (preferred_mode, mode->name))
-		{
-		    if (mode != output->probed_modes)
-		    {
+        if (preferred_mode) {
+            for (mode = output->probed_modes; mode; mode = mode->next) {
+                if (!strcmp(preferred_mode, mode->name)) {
+                    if (mode != output->probed_modes) {
 			if (mode->prev)
 			    mode->prev->next = mode->next;
 			if (mode->next)
@@ -1769,14 +1710,14 @@ xf86ProbeOutputModes (ScrnInfoPtr scrn, int maxX, int maxY)
 		xf86DrvMsg(scrn->scrnIndex, X_INFO,
 			   "Printing probed modes for output %s\n",
 			   output->name);
-	    } else {
+            }
+            else {
 		xf86DrvMsg(scrn->scrnIndex, X_INFO,
 			   "No remaining probed modes for output %s\n",
 			   output->name);
 	    }
 	}
-	for (mode = output->probed_modes; mode != NULL; mode = mode->next)
-	{
+        for (mode = output->probed_modes; mode != NULL; mode = mode->next) {
 	    /* The code to choose the best mode per pipe later on will require
 	     * VRefresh to be set.
 	     */
@@ -1789,7 +1730,6 @@ xf86ProbeOutputModes (ScrnInfoPtr scrn, int maxX, int maxY)
     }
 }
 
-
 /**
  * Copy one of the output mode lists to the ScrnInfo record
  */
@@ -1825,8 +1765,7 @@ SetCompatOutput(xf86CrtcConfigPtr config)
     int o, compat = -1, count, mincount = 0;
 
     /* Look for one that's definitely connected */
-    for (o = 0; o < config->num_output; o++)
-    {
+    for (o = 0; o < config->num_output; o++) {
 	test = config->output[o];
 	if (!test->crtc)
 	    continue;
@@ -1844,12 +1783,14 @@ SetCompatOutput(xf86CrtcConfigPtr config)
 	    compat = o;
 	    maxmode = testmode;
 	    mincount = count;
-	} else if (maxmode == biggestMode(maxmode, testmode)) {
+        }
+        else if (maxmode == biggestMode(maxmode, testmode)) {
 	    output = test;
 	    compat = o;
 	    maxmode = testmode;
 	    mincount = count;
-	} else if ((maxmode->HDisplay == testmode->HDisplay) && 
+        }
+        else if ((maxmode->HDisplay == testmode->HDisplay) &&
 		(maxmode->VDisplay == testmode->VDisplay) &&
 		count <= mincount) {
 	    output = test;
@@ -1860,10 +1801,8 @@ SetCompatOutput(xf86CrtcConfigPtr config)
     }
 
     /* If we didn't find one, take anything we can get */
-    if (!output)
-    {
-	for (o = 0; o < config->num_output; o++)
-	{
+    if (!output) {
+        for (o = 0; o < config->num_output; o++) {
 	    test = config->output[o];
 	    if (!test->crtc)
 		continue;
@@ -1873,7 +1812,9 @@ SetCompatOutput(xf86CrtcConfigPtr config)
 	    if (!output) {
 		output = test;
 		compat = o;
-	    } else if (test->probed_modes->HDisplay < output->probed_modes->HDisplay) {
+            }
+            else if (test->probed_modes->HDisplay <
+                     output->probed_modes->HDisplay) {
 		output = test;
 		compat = o;
 	    }
@@ -1882,7 +1823,8 @@ SetCompatOutput(xf86CrtcConfigPtr config)
 
     if (compat >= 0) {
 	config->compat_output = compat;
-    } else {
+    }
+    else {
 	/* Don't change the compat output when no valid outputs found */
 	output = config->output[config->compat_output];
     }
@@ -1928,8 +1870,7 @@ xf86SetScrnInfoModes (ScrnInfoPtr scrn)
     /* For some reason, scrn->modes is circular, unlike the other mode
      * lists.  How great is that?
      */
-    for (last = scrn->modes; last && last->next; last = last->next)
-	;
+    for (last = scrn->modes; last && last->next; last = last->next);
     last->next = scrn->modes;
     scrn->modes->prev = last;
     if (mode) {
@@ -1959,7 +1900,8 @@ xf86CollectEnabledOutputs(ScrnInfoPtr scrn, xf86CrtcConfigPtr config,
 		   "No outputs definitely connected, trying again...\n");
 
 	for (o = 0; o < config->num_output; o++)
-	    any_enabled |= enabled[o] = xf86OutputEnabled(config->output[o], FALSE);
+            any_enabled |= enabled[o] =
+                xf86OutputEnabled(config->output[o], FALSE);
     }
 
     return any_enabled;
@@ -2057,6 +1999,7 @@ xf86TargetPreferred(ScrnInfoPtr scrn, xf86CrtcConfigPtr config,
     for (p = -1; nextEnabledOutput(config, enabled, &p); ) {
 	Rotation r = config->output[p]->initial_rotation;
 	DisplayModePtr mode;
+
 	if ((preferred[p] = xf86OutputHasPreferredMode(config->output[p],
 			width, height))) {
 	    int pref_width = xf86ModeWidth(preferred[p], r);
@@ -2066,6 +2009,7 @@ xf86TargetPreferred(ScrnInfoPtr scrn, xf86CrtcConfigPtr config,
 	    for (o = -1; nextEnabledOutput(config, enabled, &o); ) {
 		Bool match = FALSE;
 		xf86OutputPtr output = config->output[o];
+
 		if (o == p)
 		    continue;
 
@@ -2081,10 +2025,11 @@ xf86TargetPreferred(ScrnInfoPtr scrn, xf86CrtcConfigPtr config,
 		if (mode && xf86ModesEqual(mode, preferred[p])) {
 			preferred[o] = mode;
 			match = TRUE;
-		} else {
-			for (mode = output->probed_modes; mode;
-			     mode = mode->next) {
+                }
+                else {
+                    for (mode = output->probed_modes; mode; mode = mode->next) {
 				Rotation r = output->initial_rotation;
+
 				if (xf86ModeWidth(mode, r) == pref_width &&
 				    xf86ModeHeight(mode, r) == pref_height) {
 					preferred[o] = mode;
@@ -2111,7 +2056,8 @@ xf86TargetPreferred(ScrnInfoPtr scrn, xf86CrtcConfigPtr config,
      * If there's no preferred mode, but only one monitor, pick the
      * biggest mode for its aspect ratio, assuming one exists.
      */
-    if (!ret) do {
+    if (!ret)
+        do {
 	int i = 0;
 	float aspect = 0.0;
 
@@ -2148,8 +2094,7 @@ xf86TargetPreferred(ScrnInfoPtr scrn, xf86CrtcConfigPtr config,
 
 static Bool
 xf86TargetAspect(ScrnInfoPtr scrn, xf86CrtcConfigPtr config,
-		 DisplayModePtr *modes, Bool *enabled,
-		 int width, int height)
+                 DisplayModePtr * modes, Bool *enabled, int width, int height)
 {
     int o;
     float aspect = 0.0, *aspects;
@@ -2173,7 +2118,8 @@ xf86TargetAspect(ScrnInfoPtr scrn, xf86CrtcConfigPtr config,
 	output = config->output[o];
 	if (!aspect) {
 	    aspect = aspects[o];
-	} else if (!aspectMatch(aspect, aspects[o])) {
+        }
+        else if (!aspectMatch(aspect, aspects[o])) {
 	    goto no_aspect_match;
 	}
     }
@@ -2203,8 +2149,7 @@ out:
 
 static Bool
 xf86TargetFallback(ScrnInfoPtr scrn, xf86CrtcConfigPtr config,
-		   DisplayModePtr *modes, Bool *enabled,
-		   int width, int height)
+                   DisplayModePtr * modes, Bool *enabled, int width, int height)
 {
     DisplayModePtr target_mode = NULL;
     Rotation target_rotation = RR_Rotate_0;
@@ -2243,8 +2188,7 @@ xf86TargetFallback(ScrnInfoPtr scrn, xf86CrtcConfigPtr config,
 
 static Bool
 xf86TargetUserpref(ScrnInfoPtr scrn, xf86CrtcConfigPtr config,
-		   DisplayModePtr *modes, Bool *enabled,
-		   int width, int height)
+                   DisplayModePtr * modes, Bool *enabled, int width, int height)
 {
     int o;
 
@@ -2271,10 +2215,12 @@ xf86CrtcSetInitialGamma(xf86CrtcPtr crtc, float gamma_red, float gamma_green,
     blue = green + size;
 
      /* Only cause warning if user wanted gamma to be set. */
-    if (!crtc->funcs->gamma_set && (gamma_red != 1.0 || gamma_green != 1.0 || gamma_blue != 1.0)) {
+    if (!crtc->funcs->gamma_set &&
+        (gamma_red != 1.0 || gamma_green != 1.0 || gamma_blue != 1.0)) {
         free(red);
         return FALSE;
-    } else if (!crtc->funcs->gamma_set) {
+    }
+    else if (!crtc->funcs->gamma_set) {
         free(red);
         return TRUE;
       }
@@ -2287,19 +2233,24 @@ xf86CrtcSetInitialGamma(xf86CrtcPtr crtc, float gamma_red, float gamma_green,
             red[i] = i << 8;
         else
             red[i] = (CARD16)(pow((double)i/(double)(size - 1),
-			1. / (double)gamma_red) * (double)(size - 1) * 256);
+                                   1. / (double) gamma_red) * (double) (size -
+                                                                        1) *
+                               256);
 
         if (gamma_green == 1.0)
             green[i] = i << 8;
         else
             green[i] = (CARD16)(pow((double)i/(double)(size - 1),
-			1. / (double)gamma_green) * (double)(size - 1) * 256);
+                                     1. / (double) gamma_green) *
+                                 (double) (size - 1) * 256);
 
         if (gamma_blue == 1.0)
             blue[i] = i << 8;
         else
             blue[i] = (CARD16)(pow((double)i/(double)(size - 1),
-			1. / (double)gamma_blue) * (double)(size - 1) * 256);
+                                    1. / (double) gamma_blue) * (double) (size -
+                                                                          1) *
+                                256);
     }
 
     /* Default size is 256, so anything else is failure. */
@@ -2333,23 +2284,24 @@ xf86OutputSetInitialGamma(xf86OutputPtr output)
         return FALSE;
 
     /* Get configured values, where they exist. */
-    if (mon->mon_gamma_red >= GAMMA_MIN &&
-        mon->mon_gamma_red <= GAMMA_MAX)
+    if (mon->mon_gamma_red >= GAMMA_MIN && mon->mon_gamma_red <= GAMMA_MAX)
             gamma_red = mon->mon_gamma_red;
 
-    if (mon->mon_gamma_green >= GAMMA_MIN &&
-        mon->mon_gamma_green <= GAMMA_MAX)
+    if (mon->mon_gamma_green >= GAMMA_MIN && mon->mon_gamma_green <= GAMMA_MAX)
             gamma_green = mon->mon_gamma_green;
 
-    if (mon->mon_gamma_blue >= GAMMA_MIN &&
-        mon->mon_gamma_blue <= GAMMA_MAX)
+    if (mon->mon_gamma_blue >= GAMMA_MIN && mon->mon_gamma_blue <= GAMMA_MAX)
             gamma_blue = mon->mon_gamma_blue;
 
     /* This avoids setting gamma 1.0 in case another cloned output on this crtc has a specific gamma. */
     if (gamma_red != 1.0 || gamma_green != 1.0 || gamma_blue != 1.0) {
-	xf86DrvMsg(output->scrn->scrnIndex, X_INFO, "Output %s wants gamma correction (%.1f, %.1f, %.1f)\n", output->name, gamma_red, gamma_green, gamma_blue);
-	return xf86CrtcSetInitialGamma(output->crtc, gamma_red, gamma_green, gamma_blue);
-    }else
+        xf86DrvMsg(output->scrn->scrnIndex, X_INFO,
+                   "Output %s wants gamma correction (%.1f, %.1f, %.1f)\n",
+                   output->name, gamma_red, gamma_green, gamma_blue);
+        return xf86CrtcSetInitialGamma(output->crtc, gamma_red, gamma_green,
+                                       gamma_blue);
+    }
+    else
 	return TRUE;
 }
 
@@ -2384,9 +2336,7 @@ xf86InitialConfiguration (ScrnInfoPtr scrn, Bool canGrow)
     /* Set up the device options */
     config->options = xnfalloc (sizeof (xf86DeviceOptions));
     memcpy (config->options, xf86DeviceOptions, sizeof (xf86DeviceOptions));
-    xf86ProcessOptions (scrn->scrnIndex,
-			scrn->options,
-			config->options);
+    xf86ProcessOptions(scrn->scrnIndex, scrn->options, config->options);
     config->debug_modes = xf86ReturnOptValBool (config->options,
 						OPTION_MODEDEBUG, FALSE);
 
@@ -2407,17 +2357,22 @@ xf86InitialConfiguration (ScrnInfoPtr scrn, Bool canGrow)
     
     ret = xf86CollectEnabledOutputs(scrn, config, enabled);
     if (ret == FALSE && canGrow) {
-	xf86DrvMsg(i, X_WARNING, "Unable to find connected outputs - setting %dx%d initial framebuffer\n",
+        xf86DrvMsg(i, X_WARNING,
+                   "Unable to find connected outputs - setting %dx%d initial framebuffer\n",
 		   NO_OUTPUT_DEFAULT_WIDTH, NO_OUTPUT_DEFAULT_HEIGHT);
 	have_outputs = FALSE;
-    } else {
+    }
+    else {
 	if (xf86TargetUserpref(scrn, config, modes, enabled, width, height))
 	    xf86DrvMsg(i, X_INFO, "Using user preference for initial modes\n");
-	else if (xf86TargetPreferred(scrn, config, modes, enabled, width, height))
+        else if (xf86TargetPreferred
+                 (scrn, config, modes, enabled, width, height))
 	    xf86DrvMsg(i, X_INFO, "Using exact sizes for initial modes\n");
 	else if (xf86TargetAspect(scrn, config, modes, enabled, width, height))
-	    xf86DrvMsg(i, X_INFO, "Using fuzzy aspect match for initial modes\n");
-	else if (xf86TargetFallback(scrn, config, modes, enabled, width, height))
+            xf86DrvMsg(i, X_INFO,
+                       "Using fuzzy aspect match for initial modes\n");
+        else if (xf86TargetFallback
+                 (scrn, config, modes, enabled, width, height))
 	    xf86DrvMsg(i, X_INFO, "Using sloppy heuristic for initial modes\n");
 	else
 	    xf86DrvMsg(i, X_WARNING, "Unable to find initial modes\n");
@@ -2456,8 +2411,7 @@ xf86InitialConfiguration (ScrnInfoPtr scrn, Bool canGrow)
     scrn->display->frameX0 = 0;
     scrn->display->frameY0 = 0;
     
-    for (c = 0; c < config->num_crtc; c++)
-    {
+    for (c = 0; c < config->num_crtc; c++) {
 	xf86CrtcPtr	crtc = config->crtc[c];
 
 	crtc->enabled = FALSE;
@@ -2468,38 +2422,42 @@ xf86InitialConfiguration (ScrnInfoPtr scrn, Bool canGrow)
     }
 
     if (xf86_crtc_supports_gamma(scrn))
-	xf86DrvMsg(scrn->scrnIndex, X_INFO, "Using default gamma of (1.0, 1.0, 1.0) unless otherwise stated.\n");
+        xf86DrvMsg(scrn->scrnIndex, X_INFO,
+                   "Using default gamma of (1.0, 1.0, 1.0) unless otherwise stated.\n");
 
     /*
      * Set initial configuration
      */
-    for (o = 0; o < config->num_output; o++)
-    {
+    for (o = 0; o < config->num_output; o++) {
 	xf86OutputPtr	output = config->output[o];
 	DisplayModePtr	mode = modes[o];
         xf86CrtcPtr	crtc = crtcs[o];
 
-	if (mode && crtc)
-	{
+        if (mode && crtc) {
 	    crtc->desiredMode = *mode;
 	    crtc->desiredRotation = output->initial_rotation;
 	    crtc->desiredX = output->initial_x;
 	    crtc->desiredY = output->initial_y;
 	    crtc->desiredTransformPresent = FALSE;
 	    crtc->enabled = TRUE;
-	    memcpy (&crtc->panningTotalArea,    &output->initialTotalArea,    sizeof(BoxRec));
-	    memcpy (&crtc->panningTrackingArea, &output->initialTrackingArea, sizeof(BoxRec));
-	    memcpy (crtc->panningBorder,        output->initialBorder,        4*sizeof(INT16));
+            memcpy(&crtc->panningTotalArea, &output->initialTotalArea,
+                   sizeof(BoxRec));
+            memcpy(&crtc->panningTrackingArea, &output->initialTrackingArea,
+                   sizeof(BoxRec));
+            memcpy(crtc->panningBorder, output->initialBorder,
+                   4 * sizeof(INT16));
 	    output->crtc = crtc;
 	    if (!xf86OutputSetInitialGamma(output))
-		xf86DrvMsg (scrn->scrnIndex, X_WARNING, "Initial gamma correction for output %s: failed.\n", output->name);
-	} else {
+                xf86DrvMsg(scrn->scrnIndex, X_WARNING,
+                           "Initial gamma correction for output %s: failed.\n",
+                           output->name);
+        }
+        else {
 	    output->crtc = NULL;
 	}
     }
 
-    if (scrn->display->virtualX == 0)
-    {
+    if (scrn->display->virtualX == 0) {
 	/*
 	 * Expand virtual size to cover the current config and potential mode
 	 * switches, if the driver can't enlarge the screen later.
@@ -2507,7 +2465,8 @@ xf86InitialConfiguration (ScrnInfoPtr scrn, Bool canGrow)
 	xf86DefaultScreenLimits (scrn, &width, &height, canGrow);
     
 	if (have_outputs == FALSE) {
-	    if (width < NO_OUTPUT_DEFAULT_WIDTH && height < NO_OUTPUT_DEFAULT_HEIGHT) {
+            if (width < NO_OUTPUT_DEFAULT_WIDTH &&
+                height < NO_OUTPUT_DEFAULT_HEIGHT) {
 		width = NO_OUTPUT_DEFAULT_WIDTH;
 		height = NO_OUTPUT_DEFAULT_HEIGHT;
 	    }
@@ -2532,8 +2491,7 @@ xf86InitialConfiguration (ScrnInfoPtr scrn, Bool canGrow)
      * Limit the crtc config to virtual[XY] if the driver can't grow the
      * desktop.
      */
-    if (!canGrow)
-    {
+    if (!canGrow) {
 	xf86CrtcSetSizeRange (scrn, config->minWidth, config->minHeight,
 			      width, height);
     }
@@ -2561,6 +2519,7 @@ xf86PrepareOutputs (ScrnInfoPtr scrn)
 
     for (o = 0; o < config->num_output; o++) {
 	xf86OutputPtr output = config->output[o];
+
 #if RANDR_GET_CRTC_INTERFACE
 	/* Disable outputs that are unused or will be re-routed */
 	if (!output->funcs->get_crtc ||
@@ -2601,8 +2560,7 @@ xf86PrepareCrtcs (ScrnInfoPtr scrn)
 	 * If mappings are different or the CRTC is unused,
 	 * we need to disable it
 	 */
-	if (desired_outputs != current_outputs ||
-	    !desired_outputs)
+        if (desired_outputs != current_outputs || !desired_outputs)
 	    (*crtc->funcs->dpms)(crtc, DPMSModeOff);
 #else
 	(*crtc->funcs->dpms)(crtc, DPMSModeOff);
@@ -2628,8 +2586,7 @@ xf86SetDesiredModes (ScrnInfoPtr scrn)
 	xf86PrepareCrtcs(scrn);
     }
 
-    for (c = 0; c < config->num_crtc; c++)
-    {
+    for (c = 0; c < config->num_crtc; c++) {
 	xf86OutputPtr	output = NULL;
 	int		o;
 	RRTransformPtr	transform;
@@ -2642,11 +2599,9 @@ xf86SetDesiredModes (ScrnInfoPtr scrn)
 
 	if (xf86CompatOutput(scrn) && xf86CompatCrtc(scrn) == crtc)
 	    output = xf86CompatOutput(scrn);
-	else
-	{
+        else {
 	    for (o = 0; o < config->num_output; o++)
-		if (config->output[o]->crtc == crtc)
-		{
+                if (config->output[o]->crtc == crtc) {
 		    output = config->output[o];
 		    break;
 		}
@@ -2657,9 +2612,9 @@ xf86SetDesiredModes (ScrnInfoPtr scrn)
 
 	/* Mark that we'll need to re-set the mode for sure */
 	memset(&crtc->mode, 0, sizeof(crtc->mode));
-	if (!crtc->desiredMode.CrtcHDisplay)
-	{
-	    DisplayModePtr  mode = xf86OutputFindClosestMode (output, scrn->currentMode);
+        if (!crtc->desiredMode.CrtcHDisplay) {
+            DisplayModePtr mode =
+                xf86OutputFindClosestMode(output, scrn->currentMode);
 
 	    if (!mode)
 		return FALSE;
@@ -2674,8 +2629,9 @@ xf86SetDesiredModes (ScrnInfoPtr scrn)
 	    transform = &crtc->desiredTransform;
 	else
 	    transform = NULL;
-	if (!xf86CrtcSetModeTransform (crtc, &crtc->desiredMode, crtc->desiredRotation,
-				       transform, crtc->desiredX, crtc->desiredY))
+        if (!xf86CrtcSetModeTransform
+            (crtc, &crtc->desiredMode, crtc->desiredRotation, transform,
+             crtc->desiredX, crtc->desiredY))
 	    return FALSE;
     }
 
@@ -2698,8 +2654,7 @@ xf86OutputFindClosestMode (xf86OutputPtr output, DisplayModePtr desired)
 {
     DisplayModePtr	best = NULL, scan = NULL;
 
-    for (scan = output->probed_modes; scan != NULL; scan = scan->next) 
-    {
+    for (scan = output->probed_modes; scan != NULL; scan = scan->next) {
 	/* If there's an exact match, we're done. */
 	if (xf86ModesEqual(scan, desired)) {
 	    best = desired;
@@ -2708,8 +2663,7 @@ xf86OutputFindClosestMode (xf86OutputPtr output, DisplayModePtr desired)
 
 	/* Reject if it's larger than the desired mode. */
 	if (scan->HDisplay > desired->HDisplay || 
-	    scan->VDisplay > desired->VDisplay)
-	{
+            scan->VDisplay > desired->VDisplay) {
 	    continue;
 	}
 
@@ -2717,8 +2671,7 @@ xf86OutputFindClosestMode (xf86OutputPtr output, DisplayModePtr desired)
 	 * If we haven't picked a best mode yet, use the first
 	 * one in the size range
 	 */
-	if (best == NULL) 
-	{
+        if (best == NULL) {
 	    best = scan;
 	    continue;
 	}
@@ -2729,8 +2682,7 @@ xf86OutputFindClosestMode (xf86OutputPtr output, DisplayModePtr desired)
 	if ((scan->HDisplay > best->HDisplay &&
 	     scan->VDisplay >= best->VDisplay) ||
 	    (scan->HDisplay >= best->HDisplay &&
-	     scan->VDisplay > best->VDisplay))
-	{
+             scan->VDisplay > best->VDisplay)) {
 	    best = scan;
 	    continue;
 	}
@@ -2774,8 +2726,7 @@ xf86SetSingleMode (ScrnInfoPtr pScrn, DisplayModePtr desired, Rotation rotation)
     if (compat_mode)
 	desired = compat_mode;
     
-    for (c = 0; c < config->num_crtc; c++)
-    {
+    for (c = 0; c < config->num_crtc; c++) {
 	xf86CrtcPtr	crtc = config->crtc[c];
 	DisplayModePtr	crtc_mode = NULL;
 	int		o;
@@ -2783,8 +2734,7 @@ xf86SetSingleMode (ScrnInfoPtr pScrn, DisplayModePtr desired, Rotation rotation)
 	if (!crtc->enabled)
 	    continue;
 	
-	for (o = 0; o < config->num_output; o++)
-	{
+        for (o = 0; o < config->num_output; o++) {
 	    xf86OutputPtr   output = config->output[o];
 	    DisplayModePtr  output_mode;
 
@@ -2792,8 +2742,7 @@ xf86SetSingleMode (ScrnInfoPtr pScrn, DisplayModePtr desired, Rotation rotation)
 	    if (output->crtc != crtc)
 		continue;
 	    
-	    if (crtc_mode)
-	    {
+            if (crtc_mode) {
 		output_mode = xf86OutputFindClosestMode (output, crtc_mode);
 		if (output_mode != crtc_mode)
 		    output->crtc = NULL;
@@ -2801,15 +2750,13 @@ xf86SetSingleMode (ScrnInfoPtr pScrn, DisplayModePtr desired, Rotation rotation)
 	    else
 		crtc_mode = xf86OutputFindClosestMode (output, desired);
 	}
-	if (!crtc_mode)
-	{
+        if (!crtc_mode) {
 	    crtc->enabled = FALSE;
 	    continue;
 	}
 	if (!xf86CrtcSetModeTransform (crtc, crtc_mode, rotation, NULL, 0, 0))
 	    ok = FALSE;
-	else
-	{
+        else {
 	    crtc->desiredMode = *crtc_mode;
 	    crtc->desiredRotation = rotation;
 	    crtc->desiredTransformPresent = FALSE;
@@ -2824,7 +2771,6 @@ xf86SetSingleMode (ScrnInfoPtr pScrn, DisplayModePtr desired, Rotation rotation)
     return ok;
 }
 
-
 /**
  * Set the DPMS power mode of all outputs and CRTCs.
  *
@@ -2843,6 +2789,7 @@ xf86DPMSSet(ScrnInfoPtr scrn, int mode, int flags)
     if (mode == DPMSModeOff) {
 	for (i = 0; i < config->num_output; i++) {
 	    xf86OutputPtr output = config->output[i];
+
 	    if (output->crtc != NULL)
 		(*output->funcs->dpms) (output, mode);
 	}
@@ -2850,6 +2797,7 @@ xf86DPMSSet(ScrnInfoPtr scrn, int mode, int flags)
 
     for (i = 0; i < config->num_crtc; i++) {
 	xf86CrtcPtr crtc = config->crtc[i];
+
 	if (crtc->enabled)
 	    (*crtc->funcs->dpms) (crtc, mode);
     }
@@ -2857,6 +2805,7 @@ xf86DPMSSet(ScrnInfoPtr scrn, int mode, int flags)
     if (mode != DPMSModeOff) {
 	for (i = 0; i < config->num_output; i++) {
 	    xf86OutputPtr output = config->output[i];
+
 	    if (output->crtc != NULL)
 		(*output->funcs->dpms) (output, mode);
 	}
@@ -2891,19 +2840,17 @@ xf86DisableUnusedFunctions(ScrnInfoPtr pScrn)
     xf86CrtcConfigPtr   xf86_config = XF86_CRTC_CONFIG_PTR(pScrn);
     int			o, c;
 
-    for (o = 0; o < xf86_config->num_output; o++) 
-    {
+    for (o = 0; o < xf86_config->num_output; o++) {
 	xf86OutputPtr  output = xf86_config->output[o];
+
 	if (!output->crtc) 
 	    (*output->funcs->dpms)(output, DPMSModeOff);
     }
 
-    for (c = 0; c < xf86_config->num_crtc; c++) 
-    {
+    for (c = 0; c < xf86_config->num_crtc; c++) {
 	xf86CrtcPtr crtc = xf86_config->crtc[c];
 
-	if (!crtc->enabled) 
-	{
+        if (!crtc->enabled) {
 	    crtc->funcs->dpms(crtc, DPMSModeOff);
 	    memset(&crtc->mode, 0, sizeof(crtc->mode));
 	    xf86RotateDestroy(crtc);
@@ -2935,7 +2882,8 @@ xf86OutputSetEDIDProperty (xf86OutputPtr output, void *data, int data_len)
     if (data_len != 0) {
 	RRChangeOutputProperty(output->randr_output, edid_atom, XA_INTEGER, 8,
 			       PropModeReplace, data_len, data, FALSE, TRUE);
-    } else {
+    }
+    else {
 	RRDeleteOutputProperty(output->randr_output, edid_atom);
     }
 }
@@ -2949,10 +2897,12 @@ struct det_phySize_parameter {
     Bool ret;
 };
 
-static void  handle_detailed_physical_size(struct detailed_monitor_section
+static void
+handle_detailed_physical_size(struct detailed_monitor_section
 		                          *det_mon, void *data)
 {
     struct det_phySize_parameter *p;
+
     p = (struct det_phySize_parameter *)data;
 
     if (p->ret == TRUE )
@@ -2980,6 +2930,7 @@ xf86OutputSetEDID (xf86OutputPtr output, xf86MonPtr edid_mon)
     ScrnInfoPtr		scrn = output->scrn;
     xf86CrtcConfigPtr	config = XF86_CRTC_CONFIG_PTR(scrn);
     Bool		debug_modes = config->debug_modes || xf86Initialising;
+
 #ifdef RANDR_12_INTERFACE
     int			size;
 #endif
@@ -3003,31 +2954,31 @@ xf86OutputSetEDID (xf86OutputPtr output, xf86MonPtr edid_mon)
 #ifdef RANDR_12_INTERFACE
     /* Set the RandR output properties */
     size = 0;
-    if (edid_mon)
-    {
+    if (edid_mon) {
 	if (edid_mon->ver.version == 1) {
 	    size = 128;
 	    if (edid_mon->flags & EDID_COMPLETE_RAWDATA)
 		size += edid_mon->no_sections * 128;
-	} else if (edid_mon->ver.version == 2)
+        }
+        else if (edid_mon->ver.version == 2)
 	    size = 256;
     }
-    xf86OutputSetEDIDProperty (output, edid_mon ? edid_mon->rawData : NULL, size);
+    xf86OutputSetEDIDProperty(output, edid_mon ? edid_mon->rawData : NULL,
+                              size);
 #endif
 
     if (edid_mon) {
 
         struct det_phySize_parameter p;
+
         p.output = output;
         p.quirks = xf86DDCDetectQuirks(scrn->scrnIndex,edid_mon, FALSE);
         p.ret = FALSE;
-        xf86ForEachDetailedBlock(edid_mon,
-                                 handle_detailed_physical_size, &p);
+        xf86ForEachDetailedBlock(edid_mon, handle_detailed_physical_size, &p);
 
 	/* if no mm size is available from a detailed timing, check the max size field */
 	if ((!output->mm_width || !output->mm_height) &&
-	    (edid_mon->features.hsize && edid_mon->features.vsize))
-	{
+            (edid_mon->features.hsize && edid_mon->features.vsize)) {
 	    output->mm_width = edid_mon->features.hsize * 10;
 	    output->mm_height = edid_mon->features.vsize * 10;
 	}
@@ -3069,6 +3020,7 @@ static const char *_xf86ConnectorNames[] = {
 					"Component", "LFP", "Proprietary",
 					"HDMI", "DisplayPort",
 				     };
+
 const char *
 xf86ConnectorGetName(xf86ConnectorType connector)
 {
@@ -3095,7 +3047,8 @@ x86_crtc_box(xf86CrtcPtr crtc, BoxPtr crtc_box)
 	crtc_box->x2 = crtc->x + xf86ModeWidth(&crtc->mode, crtc->rotation);
 	crtc_box->y1 = crtc->y;
 	crtc_box->y2 = crtc->y + xf86ModeHeight(&crtc->mode, crtc->rotation);
-    } else
+    }
+    else
 	crtc_box->x1 = crtc_box->x2 = crtc_box->y1 = crtc_box->y2 = 0;
 }
 
@@ -3114,9 +3067,7 @@ xf86_crtc_box_area(BoxPtr box)
 
 static xf86CrtcPtr
 xf86_covering_crtc(ScrnInfoPtr pScrn,
-		   BoxPtr      box,
-		   xf86CrtcPtr desired,
-		   BoxPtr      crtc_box_ret)
+                   BoxPtr box, xf86CrtcPtr desired, BoxPtr crtc_box_ret)
 {
     xf86CrtcConfigPtr   xf86_config = XF86_CRTC_CONFIG_PTR(pScrn);
     xf86CrtcPtr		crtc, best_crtc;
@@ -3138,7 +3089,8 @@ xf86_covering_crtc(ScrnInfoPtr pScrn,
 	if (coverage && crtc == desired) {
 	    *crtc_box_ret = crtc_box;
 	    return crtc;
-	} else if (coverage > best_coverage) {
+        }
+        else if (coverage > best_coverage) {
 	    *crtc_box_ret = crtc_box;
 	    best_crtc = crtc;
 	    best_coverage = coverage;
@@ -3163,10 +3115,7 @@ xf86_crtc_clip_video_helper(ScrnInfoPtr pScrn,
 			    INT32	*xa,
 			    INT32	*xb,
 			    INT32	*ya,
-			    INT32	*yb,
-			    RegionPtr   reg,
-			    INT32	width,
-			    INT32	height)
+                            INT32 *yb, RegionPtr reg, INT32 width, INT32 height)
 {
     Bool	ret;
     RegionRec	crtc_region_local;
@@ -3199,8 +3148,7 @@ xf86_crtc_clip_video_helper(ScrnInfoPtr pScrn,
 xf86_crtc_notify_proc_ptr
 xf86_wrap_crtc_notify (ScreenPtr screen, xf86_crtc_notify_proc_ptr new)
 {
-    if (xf86CrtcConfigPrivateIndex != -1)
-    {
+    if (xf86CrtcConfigPrivateIndex != -1) {
 	ScrnInfoPtr		scrn = xf86Screens[screen->myNum];
 	xf86CrtcConfigPtr	config = XF86_CRTC_CONFIG_PTR(scrn);
 	xf86_crtc_notify_proc_ptr	old;
@@ -3215,8 +3163,7 @@ xf86_wrap_crtc_notify (ScreenPtr screen, xf86_crtc_notify_proc_ptr new)
 void
 xf86_unwrap_crtc_notify(ScreenPtr screen, xf86_crtc_notify_proc_ptr old)
 {
-    if (xf86CrtcConfigPrivateIndex != -1)
-    {
+    if (xf86CrtcConfigPrivateIndex != -1) {
 	ScrnInfoPtr		scrn = xf86Screens[screen->myNum];
 	xf86CrtcConfigPtr	config = XF86_CRTC_CONFIG_PTR(scrn);
     
