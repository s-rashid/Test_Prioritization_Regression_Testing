diff --git a/hw/dmx/dmxgcops.c b/hw/dmx/dmxgcops.c
index 500e2cd..1933066 100644
--- a/hw/dmx/dmxgcops.c
+++ b/hw/dmx/dmxgcops.c
@@ -75,17 +75,17 @@ do {									\
        !DMX_GET_WINDOW_PRIV((WindowPtr)(_pDraw))->window)))
 
 /** Fill spans -- this function should never be called. */
-void dmxFillSpans(DrawablePtr pDrawable, GCPtr pGC,
-		  int nInit, DDXPointPtr pptInit, int *pwidthInit,
-		  int fSorted)
+void
+dmxFillSpans(DrawablePtr pDrawable, GCPtr pGC,
+             int nInit, DDXPointPtr pptInit, int *pwidthInit, int fSorted)
 {
     /* Error -- this should never happen! */
 }
 
 /** Set spans -- this function should never be called. */
-void dmxSetSpans(DrawablePtr pDrawable, GCPtr pGC,
-		 char *psrc, DDXPointPtr ppt, int *pwidth, int nspans,
-		 int fSorted)
+void
+dmxSetSpans(DrawablePtr pDrawable, GCPtr pGC,
+            char *psrc, DDXPointPtr ppt, int *pwidth, int nspans, int fSorted)
 {
     /* Error -- this should never happen! */
 }
@@ -94,7 +94,8 @@ void dmxSetSpans(DrawablePtr pDrawable, GCPtr pGC,
  *  pDrawable's screen.  If primitive subdivision optimization is
  *  enabled, then only transfer the sections of \a pBits that are
  *  visible (i.e., not-clipped) to the back-end server. */
-void dmxPutImage(DrawablePtr pDrawable, GCPtr pGC,
+void
+dmxPutImage(DrawablePtr pDrawable, GCPtr pGC,
 		 int depth, int x, int y, int w, int h,
 		 int leftPad, int format, char *pBits)
 {
@@ -102,7 +103,8 @@ void dmxPutImage(DrawablePtr pDrawable, GCPtr pGC,
     dmxGCPrivPtr   pGCPriv = DMX_GET_GC_PRIV(pGC);
     XImage        *img;
 
-    if (DMX_GCOPS_OFFSCREEN(pDrawable)) return;
+    if (DMX_GCOPS_OFFSCREEN(pDrawable))
+        return;
 
     img = XCreateImage(dmxScreen->beDisplay,
 		       dmxScreen->beVisuals[dmxScreen->beDefVisualIndex].visual,
@@ -131,8 +133,7 @@ void dmxPutImage(DrawablePtr pDrawable, GCPtr pGC,
 
 	    pClip = RegionCreate(NullBox, 1);
 	    RegionCopy(pClip, pGC->pCompositeClip);
-	    RegionTranslate(pClip,
-			     -pDrawable->x, -pDrawable->y);
+            RegionTranslate(pClip, -pDrawable->x, -pDrawable->y);
 	    RegionIntersect(pSubImages, pSubImages, pClip);
 
 	    nBox = RegionNumRects(pSubImages);
@@ -143,14 +144,13 @@ void dmxPutImage(DrawablePtr pDrawable, GCPtr pGC,
 			  pBox->x1 - box.x1,
 			  pBox->y1 - box.y1,
 			  pBox->x1,
-			  pBox->y1,
-			  pBox->x2 - pBox->x1,
-			  pBox->y2 - pBox->y1);
+                          pBox->y1, pBox->x2 - pBox->x1, pBox->y2 - pBox->y1);
 		pBox++;
 	    }
             RegionDestroy(pClip);
             RegionDestroy(pSubImages);
-	} else {
+        }
+        else {
 	    XPutImage(dmxScreen->beDisplay, draw, pGCPriv->gc,
 		      img, 0, 0, x, y, w, h);
 	}
@@ -159,7 +159,8 @@ void dmxPutImage(DrawablePtr pDrawable, GCPtr pGC,
                                  * caller. */
 
 	dmxSync(dmxScreen, FALSE);
-    } else {
+    }
+    else {
 	/* Error -- this should not happen! */
     }
 }
@@ -168,7 +169,8 @@ void dmxPutImage(DrawablePtr pDrawable, GCPtr pGC,
  *  server associated with \a pSrc drawable's screen.  If the offscreen
  *  optimization is enabled, only copy when both \a pSrc and \a pDst are
  *  at least partially visible. */
-RegionPtr dmxCopyArea(DrawablePtr pSrc, DrawablePtr pDst, GCPtr pGC,
+RegionPtr
+dmxCopyArea(DrawablePtr pSrc, DrawablePtr pDst, GCPtr pGC,
 		      int srcx, int srcy, int w, int h, int dstx, int dsty)
 {
     DMXScreenInfo *dmxScreen = &dmxScreens[pSrc->pScreen->myNum];
@@ -186,15 +188,15 @@ RegionPtr dmxCopyArea(DrawablePtr pSrc, DrawablePtr pDst, GCPtr pGC,
 	      srcx, srcy, w, h, dstx, dsty);
     dmxSync(dmxScreen, FALSE);
 
-    return miHandleExposures(pSrc, pDst, pGC, srcx, srcy, w, h,
-			     dstx, dsty, 0L);
+    return miHandleExposures(pSrc, pDst, pGC, srcx, srcy, w, h, dstx, dsty, 0L);
 }
 
 /** Copy plane number \a bitPlane from \a pSrc drawable to \a pDst
  *  drawable on the back-end server associated with \a pSrc drawable's
  *  screen.  If the offscreen optimization is enabled, only copy when
  *  both \a pSrc and \a pDst are at least partially visible. */
-RegionPtr dmxCopyPlane(DrawablePtr pSrc, DrawablePtr pDst, GCPtr pGC,
+RegionPtr
+dmxCopyPlane(DrawablePtr pSrc, DrawablePtr pDst, GCPtr pGC,
 		       int srcx, int srcy, int width, int height,
 		       int dstx, int dsty, unsigned long bitPlane)
 {
@@ -221,14 +223,16 @@ RegionPtr dmxCopyPlane(DrawablePtr pSrc, DrawablePtr pDst, GCPtr pGC,
  *  server associated with \a pDrawable's screen.  If the offscreen
  *  optimization is enabled, only draw when \a pDrawable is at least
  *  partially visible. */
-void dmxPolyPoint(DrawablePtr pDrawable, GCPtr pGC,
+void
+dmxPolyPoint(DrawablePtr pDrawable, GCPtr pGC,
 		  int mode, int npt, DDXPointPtr pptInit)
 {
     DMXScreenInfo *dmxScreen = &dmxScreens[pDrawable->pScreen->myNum];
     dmxGCPrivPtr   pGCPriv = DMX_GET_GC_PRIV(pGC);
     Drawable       draw;
 
-    if (DMX_GCOPS_OFFSCREEN(pDrawable)) return;
+    if (DMX_GCOPS_OFFSCREEN(pDrawable))
+        return;
 
     DMX_GCOPS_SET_DRAWABLE(pDrawable, draw);
 
@@ -241,14 +245,16 @@ void dmxPolyPoint(DrawablePtr pDrawable, GCPtr pGC,
  *  back-end server associated with \a pDrawable's screen.  If the
  *  offscreen optimization is enabled, only draw when \a pDrawable is at
  *  least partially visible. */
-void dmxPolylines(DrawablePtr pDrawable, GCPtr pGC,
+void
+dmxPolylines(DrawablePtr pDrawable, GCPtr pGC,
 		  int mode, int npt, DDXPointPtr pptInit)
 {
     DMXScreenInfo *dmxScreen = &dmxScreens[pDrawable->pScreen->myNum];
     dmxGCPrivPtr   pGCPriv = DMX_GET_GC_PRIV(pGC);
     Drawable       draw;
 
-    if (DMX_GCOPS_OFFSCREEN(pDrawable)) return;
+    if (DMX_GCOPS_OFFSCREEN(pDrawable))
+        return;
 
     DMX_GCOPS_SET_DRAWABLE(pDrawable, draw);
 
@@ -261,14 +267,15 @@ void dmxPolylines(DrawablePtr pDrawable, GCPtr pGC,
  *  back-end server associated with \a pDrawable's screen.  If the
  *  offscreen optimization is enabled, only draw when \a pDrawable is at
  *  least partially visible. */
-void dmxPolySegment(DrawablePtr pDrawable, GCPtr pGC,
-		    int nseg, xSegment *pSegs)
+void
+dmxPolySegment(DrawablePtr pDrawable, GCPtr pGC, int nseg, xSegment * pSegs)
 {
     DMXScreenInfo *dmxScreen = &dmxScreens[pDrawable->pScreen->myNum];
     dmxGCPrivPtr   pGCPriv = DMX_GET_GC_PRIV(pGC);
     Drawable       draw;
 
-    if (DMX_GCOPS_OFFSCREEN(pDrawable)) return;
+    if (DMX_GCOPS_OFFSCREEN(pDrawable))
+        return;
 
     DMX_GCOPS_SET_DRAWABLE(pDrawable, draw);
 
@@ -281,14 +288,16 @@ void dmxPolySegment(DrawablePtr pDrawable, GCPtr pGC,
  *  back-end server associated with \a pDrawable's screen.  If the
  *  offscreen optimization is enabled, only draw when \a pDrawable is at
  *  least partially visible. */
-void dmxPolyRectangle(DrawablePtr pDrawable, GCPtr pGC,
+void
+dmxPolyRectangle(DrawablePtr pDrawable, GCPtr pGC,
 		      int nrects, xRectangle *pRects)
 {
     DMXScreenInfo *dmxScreen = &dmxScreens[pDrawable->pScreen->myNum];
     dmxGCPrivPtr   pGCPriv = DMX_GET_GC_PRIV(pGC);
     Drawable       draw;
 
-    if (DMX_GCOPS_OFFSCREEN(pDrawable)) return;
+    if (DMX_GCOPS_OFFSCREEN(pDrawable))
+        return;
 
     DMX_GCOPS_SET_DRAWABLE(pDrawable, draw);
 
@@ -302,19 +311,19 @@ void dmxPolyRectangle(DrawablePtr pDrawable, GCPtr pGC,
  *  back-end server associated with \a pDrawable's screen.  If the
  *  offscreen optimization is enabled, only draw when \a pDrawable is at
  *  least partially visible. */
-void dmxPolyArc(DrawablePtr pDrawable, GCPtr pGC,
-		int narcs, xArc *parcs)
+void
+dmxPolyArc(DrawablePtr pDrawable, GCPtr pGC, int narcs, xArc * parcs)
 {
     DMXScreenInfo *dmxScreen = &dmxScreens[pDrawable->pScreen->myNum];
     dmxGCPrivPtr   pGCPriv = DMX_GET_GC_PRIV(pGC);
     Drawable       draw;
 
-    if (DMX_GCOPS_OFFSCREEN(pDrawable)) return;
+    if (DMX_GCOPS_OFFSCREEN(pDrawable))
+        return;
 
     DMX_GCOPS_SET_DRAWABLE(pDrawable, draw);
 
-    XDrawArcs(dmxScreen->beDisplay, draw, pGCPriv->gc,
-	      (XArc *)parcs, narcs);
+    XDrawArcs(dmxScreen->beDisplay, draw, pGCPriv->gc, (XArc *) parcs, narcs);
     dmxSync(dmxScreen, FALSE);
 }
 
@@ -322,14 +331,16 @@ void dmxPolyArc(DrawablePtr pDrawable, GCPtr pGC,
  *  associated with \a pDrawable's screen.  If the offscreen
  *  optimization is enabled, only draw when \a pDrawable is at least
  *  partially visible. */
-void dmxFillPolygon(DrawablePtr pDrawable, GCPtr pGC,
+void
+dmxFillPolygon(DrawablePtr pDrawable, GCPtr pGC,
 		    int shape, int mode, int count, DDXPointPtr pPts)
 {
     DMXScreenInfo *dmxScreen = &dmxScreens[pDrawable->pScreen->myNum];
     dmxGCPrivPtr   pGCPriv = DMX_GET_GC_PRIV(pGC);
     Drawable       draw;
 
-    if (DMX_GCOPS_OFFSCREEN(pDrawable)) return;
+    if (DMX_GCOPS_OFFSCREEN(pDrawable))
+        return;
 
     DMX_GCOPS_SET_DRAWABLE(pDrawable, draw);
 
@@ -342,14 +353,16 @@ void dmxFillPolygon(DrawablePtr pDrawable, GCPtr pGC,
  *  the back-end server associated with \a pDrawable's screen.  If the
  *  offscreen optimization is enabled, only draw when \a pDrawable is at
  *  least partially visible. */
-void dmxPolyFillRect(DrawablePtr pDrawable, GCPtr pGC,
+void
+dmxPolyFillRect(DrawablePtr pDrawable, GCPtr pGC,
 		     int nrectFill, xRectangle *prectInit)
 {
     DMXScreenInfo *dmxScreen = &dmxScreens[pDrawable->pScreen->myNum];
     dmxGCPrivPtr   pGCPriv = DMX_GET_GC_PRIV(pGC);
     Drawable       draw;
 
-    if (DMX_GCOPS_OFFSCREEN(pDrawable)) return;
+    if (DMX_GCOPS_OFFSCREEN(pDrawable))
+        return;
 
     DMX_GCOPS_SET_DRAWABLE(pDrawable, draw);
 
@@ -362,19 +375,19 @@ void dmxPolyFillRect(DrawablePtr pDrawable, GCPtr pGC,
  *  server associated with \a pDrawable's screen.  If the offscreen
  *  optimization is enabled, only draw when \a pDrawable is at least
  *  partially visible. */
-void dmxPolyFillArc(DrawablePtr pDrawable, GCPtr pGC,
-		    int narcs, xArc *parcs)
+void
+dmxPolyFillArc(DrawablePtr pDrawable, GCPtr pGC, int narcs, xArc * parcs)
 {
     DMXScreenInfo *dmxScreen = &dmxScreens[pDrawable->pScreen->myNum];
     dmxGCPrivPtr   pGCPriv = DMX_GET_GC_PRIV(pGC);
     Drawable       draw;
 
-    if (DMX_GCOPS_OFFSCREEN(pDrawable)) return;
+    if (DMX_GCOPS_OFFSCREEN(pDrawable))
+        return;
 
     DMX_GCOPS_SET_DRAWABLE(pDrawable, draw);
 
-    XFillArcs(dmxScreen->beDisplay, draw, pGCPriv->gc,
-	      (XArc *)parcs, narcs);
+    XFillArcs(dmxScreen->beDisplay, draw, pGCPriv->gc, (XArc *) parcs, narcs);
     dmxSync(dmxScreen, FALSE);
 }
 
@@ -382,7 +395,8 @@ void dmxPolyFillArc(DrawablePtr pDrawable, GCPtr pGC,
  *  the back-end server associated with \a pDrawable's screen.  If the
  *  offscreen optimization is enabled, only draw when \a pDrawable is at
  *  least partially visible. */
-int dmxPolyText8(DrawablePtr pDrawable, GCPtr pGC,
+int
+dmxPolyText8(DrawablePtr pDrawable, GCPtr pGC,
 		 int x, int y, int count, char *chars)
 {
     DMXScreenInfo *dmxScreen = &dmxScreens[pDrawable->pScreen->myNum];
@@ -397,7 +411,8 @@ int dmxPolyText8(DrawablePtr pDrawable, GCPtr pGC,
 
     /* Calculate text width */
     w = 0;
-    for (i = 0; i < n; i++) w += charinfo[i]->metrics.characterWidth;
+    for (i = 0; i < n; i++)
+        w += charinfo[i]->metrics.characterWidth;
 
     if (n != 0 && !DMX_GCOPS_OFFSCREEN(pDrawable)) {
 	DMX_GCOPS_SET_DRAWABLE(pDrawable, draw);
@@ -414,7 +429,8 @@ int dmxPolyText8(DrawablePtr pDrawable, GCPtr pGC,
  *  on the back-end server associated with \a pDrawable's screen.  If
  *  the offscreen optimization is enabled, only draw when \a pDrawable
  *  is at least partially visible. */
-int dmxPolyText16(DrawablePtr pDrawable, GCPtr pGC,
+int
+dmxPolyText16(DrawablePtr pDrawable, GCPtr pGC,
 		  int x, int y, int count, unsigned short *chars)
 {
     DMXScreenInfo *dmxScreen = &dmxScreens[pDrawable->pScreen->myNum];
@@ -430,7 +446,8 @@ int dmxPolyText16(DrawablePtr pDrawable, GCPtr pGC,
 
     /* Calculate text width */
     w = 0;
-    for (i = 0; i < n; i++) w += charinfo[i]->metrics.characterWidth;
+    for (i = 0; i < n; i++)
+        w += charinfo[i]->metrics.characterWidth;
 
     if (n != 0 && !DMX_GCOPS_OFFSCREEN(pDrawable)) {
 	DMX_GCOPS_SET_DRAWABLE(pDrawable, draw);
@@ -447,14 +464,16 @@ int dmxPolyText16(DrawablePtr pDrawable, GCPtr pGC,
  *  \a pDrawable on the back-end server associated with \a pDrawable's
  *  screen.  If the offscreen optimization is enabled, only draw when \a
  *  pDrawable is at least partially visible. */
-void dmxImageText8(DrawablePtr pDrawable, GCPtr pGC,
+void
+dmxImageText8(DrawablePtr pDrawable, GCPtr pGC,
 		   int x, int y, int count, char *chars)
 {
     DMXScreenInfo *dmxScreen = &dmxScreens[pDrawable->pScreen->myNum];
     dmxGCPrivPtr   pGCPriv = DMX_GET_GC_PRIV(pGC);
     Drawable       draw;
 
-    if (DMX_GCOPS_OFFSCREEN(pDrawable)) return;
+    if (DMX_GCOPS_OFFSCREEN(pDrawable))
+        return;
 
     DMX_GCOPS_SET_DRAWABLE(pDrawable, draw);
 
@@ -467,14 +486,16 @@ void dmxImageText8(DrawablePtr pDrawable, GCPtr pGC,
  *  \a pDrawable on the back-end server associated with \a pDrawable's
  *  screen.  If the offscreen optimization is enabled, only draw when \a
  *  pDrawable is at least partially visible. */
-void dmxImageText16(DrawablePtr pDrawable, GCPtr pGC,
+void
+dmxImageText16(DrawablePtr pDrawable, GCPtr pGC,
 		    int x, int y, int count, unsigned short *chars)
 {
     DMXScreenInfo *dmxScreen = &dmxScreens[pDrawable->pScreen->myNum];
     dmxGCPrivPtr   pGCPriv = DMX_GET_GC_PRIV(pGC);
     Drawable       draw;
 
-    if (DMX_GCOPS_OFFSCREEN(pDrawable)) return;
+    if (DMX_GCOPS_OFFSCREEN(pDrawable))
+        return;
 
     DMX_GCOPS_SET_DRAWABLE(pDrawable, draw);
 
@@ -484,7 +505,8 @@ void dmxImageText16(DrawablePtr pDrawable, GCPtr pGC,
 }
 
 /** Image Glyph Blt -- this function should never be called. */
-void dmxImageGlyphBlt(DrawablePtr pDrawable, GCPtr pGC,
+void
+dmxImageGlyphBlt(DrawablePtr pDrawable, GCPtr pGC,
 		      int x, int y, unsigned int nglyph,
 		      CharInfoPtr *ppci, pointer pglyphBase)
 {
@@ -492,7 +514,8 @@ void dmxImageGlyphBlt(DrawablePtr pDrawable, GCPtr pGC,
 }
 
 /** Poly Glyph Blt -- this function should never be called. */
-void dmxPolyGlyphBlt(DrawablePtr pDrawable, GCPtr pGC,
+void
+dmxPolyGlyphBlt(DrawablePtr pDrawable, GCPtr pGC,
 		     int x, int y, unsigned int nglyph,
 		     CharInfoPtr *ppci, pointer pglyphBase)
 {
@@ -500,7 +523,8 @@ void dmxPolyGlyphBlt(DrawablePtr pDrawable, GCPtr pGC,
 }
 
 /** Push Pixels -- this function should never be called. */
-void dmxPushPixels(GCPtr pGC, PixmapPtr pBitMap, DrawablePtr pDst,
+void
+dmxPushPixels(GCPtr pGC, PixmapPtr pBitMap, DrawablePtr pDst,
 		   int w, int h, int x, int y)
 {
     /* Error -- this should never happen! */
@@ -514,15 +538,18 @@ void dmxPushPixels(GCPtr pGC, PixmapPtr pBitMap, DrawablePtr pDst,
  * screen 0.  When screen 0 is detached, the pixmaps must be obtained
  * from any other screen that is not detached.  Usually, this is screen
  * 1. */
-static DMXScreenInfo *dmxFindAlternatePixmap(DrawablePtr pDrawable, XID *draw)
+static DMXScreenInfo *
+dmxFindAlternatePixmap(DrawablePtr pDrawable, XID *draw)
 {
 #ifdef PANORAMIX
     PanoramiXRes  *pXinPix;
     int           i;
     DMXScreenInfo *dmxScreen;
             
-    if (noPanoramiXExtension)               return NULL;
-    if (pDrawable->type != DRAWABLE_PIXMAP) return NULL;
+    if (noPanoramiXExtension)
+        return NULL;
+    if (pDrawable->type != DRAWABLE_PIXMAP)
+        return NULL;
 
     if (Success != dixLookupResourceByType((pointer*) &pXinPix,
 					   pDrawable->id, XRT_PIXMAP,
@@ -553,7 +580,8 @@ static DMXScreenInfo *dmxFindAlternatePixmap(DrawablePtr pDrawable, XID *draw)
  *  image from it.  If it is not viewable, then get the image from the
  *  first ancestor of \a pDrawable that is viewable.  If no viewable
  *  ancestor is found, then simply return without getting an image.  */
-void dmxGetImage(DrawablePtr pDrawable, int sx, int sy, int w, int h,
+void
+dmxGetImage(DrawablePtr pDrawable, int sx, int sy, int w, int h,
 		 unsigned int format, unsigned long planeMask, char *pdstLine)
 {
     DMXScreenInfo *dmxScreen = &dmxScreens[pDrawable->pScreen->myNum];
@@ -563,6 +591,7 @@ void dmxGetImage(DrawablePtr pDrawable, int sx, int sy, int w, int h,
     /* Cannot get image from unviewable window */
     if (pDrawable->type == DRAWABLE_WINDOW) {
 	WindowPtr pWindow = (WindowPtr)pDrawable;
+
 	if (!pWindow->viewable) {
 	    while (!pWindow->viewable && pWindow->parent) {
 		sx += pWindow->origin.x - wBorderWidth(pWindow);
@@ -576,12 +605,14 @@ void dmxGetImage(DrawablePtr pDrawable, int sx, int sy, int w, int h,
 	DMX_GCOPS_SET_DRAWABLE(&pWindow->drawable, draw);
 	if (DMX_GCOPS_OFFSCREEN(&pWindow->drawable))
 	    return;
-    } else {
+    }
+    else {
 	DMX_GCOPS_SET_DRAWABLE(pDrawable, draw);
 	if (DMX_GCOPS_OFFSCREEN(pDrawable)) {
             /* Try to find the pixmap on a non-detached Xinerama screen */
             dmxScreen = dmxFindAlternatePixmap(pDrawable, &draw);
-            if (!dmxScreen) return;
+            if (!dmxScreen)
+                return;
         }
     }
 
@@ -589,6 +620,7 @@ void dmxGetImage(DrawablePtr pDrawable, int sx, int sy, int w, int h,
 		    sx, sy, w, h, planeMask, format);
     if (img) {
 	int len = img->bytes_per_line * img->height;
+
 	memmove(pdstLine, img->data, len);
 	XDestroyImage(img);
     }
@@ -597,9 +629,9 @@ void dmxGetImage(DrawablePtr pDrawable, int sx, int sy, int w, int h,
 }
 
 /** Get Spans -- this function should never be called. */
-void dmxGetSpans(DrawablePtr pDrawable, int wMax,
-		 DDXPointPtr ppt, int *pwidth, int nspans,
-		 char *pdstStart)
+void
+dmxGetSpans(DrawablePtr pDrawable, int wMax,
+            DDXPointPtr ppt, int *pwidth, int nspans, char *pdstStart)
 {
     /* Error -- this should never happen! */
 }
