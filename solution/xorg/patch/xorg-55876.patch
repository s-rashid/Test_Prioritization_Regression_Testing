diff --git a/hw/xwin/winpfbdd.c b/hw/xwin/winpfbdd.c
index 1a5a0e7..3fddd85 100644
--- a/hw/xwin/winpfbdd.c
+++ b/hw/xwin/winpfbdd.c
@@ -36,7 +36,6 @@
 #endif
 #include "win.h"
 
-
 /*
  * Local function prototypes
  */
@@ -59,7 +58,6 @@ winActivateAppPrimaryDD (ScreenPtr pScreen);
 static Bool
 winHotKeyAltTabPrimaryDD (ScreenPtr pScreen);
 
-
 /*
  * Create a DirectDraw primary surface 
  */
@@ -80,8 +78,7 @@ winAllocateFBPrimaryDD (ScreenPtr pScreen)
   /* Get client area location in screen coords */
   GetClientRect (pScreenPriv->hwndScreen, &rcClient);
   MapWindowPoints (pScreenPriv->hwndScreen,
-		   HWND_DESKTOP,
-		   (LPPOINT)&rcClient, 2);
+                    HWND_DESKTOP, (LPPOINT) & rcClient, 2);
 
   /* Create a DirectDraw object, store the address at lpdd */
   ddrval = (*g_fpDirectDrawCreate) (NULL, &pScreenPriv->pdd, NULL);
@@ -92,19 +89,16 @@ winAllocateFBPrimaryDD (ScreenPtr pScreen)
   ddrval = IDirectDraw_QueryInterface (pScreenPriv->pdd,
 				       &IID_IDirectDraw2,
 				       (LPVOID*) &pScreenPriv->pdd2);
-  if (FAILED (ddrval))
-    {
+    if (FAILED(ddrval)) {
       ErrorF ("winAllocateFBShadowDD - Failed DD2 query: %08x\n",
 	      (unsigned int) ddrval);
       return FALSE;
     }
 
-
   ErrorF ("winAllocateFBPrimaryDD - Created and initialized DD\n");
 
   /* Are we windowed or fullscreen? */
-  if (pScreenInfo->fFullScreen)
-    {
+    if (pScreenInfo->fFullScreen) {
       /* Full screen mode */
       ddrval = IDirectDraw2_SetCooperativeLevel (pScreenPriv->pdd2,
 						 pScreenPriv->hwndScreen,
@@ -119,14 +113,12 @@ winAllocateFBPrimaryDD (ScreenPtr pScreen)
 					    pScreenInfo->dwWidth,
 					    pScreenInfo->dwHeight,
 					    pScreenInfo->dwBPP,
-					    pScreenInfo->dwRefreshRate,
-					    0);
+                                             pScreenInfo->dwRefreshRate, 0);
        if (FAILED (ddrval))
 	FatalError ("winAllocateFBPrimaryDD - Could not set "
 		    "full screen display mode\n");
     }
-  else
-    {
+    else {
       /* Windowed mode */
       ddrval = IDirectDraw2_SetCooperativeLevel (pScreenPriv->pdd2,
 						 pScreenPriv->hwndScreen,
@@ -144,9 +136,7 @@ winAllocateFBPrimaryDD (ScreenPtr pScreen)
   
   /* Create the primary surface */
   ddrval = IDirectDraw2_CreateSurface (pScreenPriv->pdd2,
-				       &ddsd,
-				       &pScreenPriv->pddsPrimary,
-				       NULL);
+                                        &ddsd, &pScreenPriv->pddsPrimary, NULL);
   if (FAILED (ddrval))
        FatalError ("winAllocateFBPrimaryDD - Could not create primary "
 		  "surface %08x\n", (unsigned int) ddrval);
@@ -154,8 +144,7 @@ winAllocateFBPrimaryDD (ScreenPtr pScreen)
   ErrorF ("winAllocateFBPrimaryDD - Created primary\n");
 
   /* Allocate a DD surface description for our screen privates */
-  pddsdPrimary = pScreenPriv->pddsdPrimary
-    = malloc (sizeof (DDSURFACEDESC));
+    pddsdPrimary = pScreenPriv->pddsdPrimary = malloc(sizeof(DDSURFACEDESC));
   if (pddsdPrimary == NULL)
     FatalError ("winAllocateFBPrimaryDD - Could not allocate surface "
 		"description memory\n");
@@ -181,8 +170,7 @@ winAllocateFBPrimaryDD (ScreenPtr pScreen)
   /* Create the shadow surface */
   ddrval = IDirectDraw2_CreateSurface (pScreenPriv->pdd2,
 				       &ddsd,
-				       &pScreenPriv->pddsOffscreen,
-				       NULL);
+                                        &pScreenPriv->pddsOffscreen, NULL);
   if (ddrval != DD_OK)
     FatalError ("winAllocateFBPrimaryDD - Could not create shadow "
 		"surface\n");
@@ -202,10 +190,9 @@ winAllocateFBPrimaryDD (ScreenPtr pScreen)
 
   /* Lock the primary surface */
   ddrval = IDirectDrawSurface2_Lock (pScreenPriv->pddsPrimary,
-				    pScreenInfo->fFullScreen ? NULL:&rcClient,
-				    pddsdPrimary,
-				    DDLOCK_WAIT,
-				    NULL);
+                                      pScreenInfo->
+                                      fFullScreen ? NULL : &rcClient,
+                                      pddsdPrimary, DDLOCK_WAIT, NULL);
   if (ddrval != DD_OK || pddsdPrimary->lpSurface == NULL)
     FatalError ("winAllocateFBPrimaryDD - Could not lock "
 		"primary surface\n");
@@ -240,24 +227,21 @@ winFreeFBPrimaryDD (ScreenPtr pScreen)
   winScreenInfo *pScreenInfo = pScreenPriv->pScreenInfo;
 
   /* Free the offscreen surface, if there is one */
-  if (pScreenPriv->pddsOffscreen)
-    {
+    if (pScreenPriv->pddsOffscreen) {
       IDirectDrawSurface2_Unlock (pScreenPriv->pddsOffscreen, NULL);
       IDirectDrawSurface2_Release (pScreenPriv->pddsOffscreen);
       pScreenPriv->pddsOffscreen = NULL;
     }
 
   /* Release the primary surface, if there is one */
-  if (pScreenPriv->pddsPrimary)
-    {
+    if (pScreenPriv->pddsPrimary) {
       IDirectDrawSurface2_Unlock (pScreenPriv->pddsPrimary, NULL);
       IDirectDrawSurface2_Release (pScreenPriv->pddsPrimary);
       pScreenPriv->pddsPrimary = NULL;
     }
 
   /* Free the DirectDraw object, if there is one */
-  if (pScreenPriv->pdd)
-    {
+    if (pScreenPriv->pdd) {
       IDirectDraw2_RestoreDisplayMode (pScreenPriv->pdd);
       IDirectDraw2_Release (pScreenPriv->pdd);
       pScreenPriv->pdd = NULL;
@@ -307,15 +291,13 @@ winCloseScreenPrimaryDD (int nIndex, ScreenPtr pScreen)
     winDeleteNotifyIcon (pScreenPriv);
 
   /* Free the exit confirmation dialog box, if it exists */
-  if (g_hDlgExit != NULL)
-    {
+    if (g_hDlgExit != NULL) {
       DestroyWindow (g_hDlgExit);
       g_hDlgExit = NULL;
     }
 
   /* Kill our window */
-  if (pScreenPriv->hwndScreen)
-    {
+    if (pScreenPriv->hwndScreen) {
       DestroyWindow (pScreenPriv->hwndScreen);
       pScreenPriv->hwndScreen = NULL;
     }
@@ -329,7 +311,6 @@ winCloseScreenPrimaryDD (int nIndex, ScreenPtr pScreen)
   return fReturn;
 }
 
-
 /*
  * Tell mi what sort of visuals we need.
  * 
@@ -365,8 +346,7 @@ winInitVisualsPrimaryDD (ScreenPtr pScreen)
 	  (int) pScreenPriv->dwBitsPerRGB);
 
   /* Create a single visual according to the Windows screen depth */
-  switch (pScreenInfo->dwDepth)
-    {
+    switch (pScreenInfo->dwDepth) {
     case 24:
     case 16:
     case 15:
@@ -376,8 +356,7 @@ winInitVisualsPrimaryDD (ScreenPtr pScreen)
 				     TrueColor,
 				     pScreenPriv->dwRedMask,
 				     pScreenPriv->dwGreenMask,
-				     pScreenPriv->dwBlueMask))
-	{
+                                      pScreenPriv->dwBlueMask)) {
 	  ErrorF ("winInitVisualsPrimaryDD - " 
 		  "miSetVisualTypesAndMasks failed\n");
 	  return FALSE;
@@ -394,8 +373,7 @@ winInitVisualsPrimaryDD (ScreenPtr pScreen)
 				     PseudoColor,
 				     pScreenPriv->dwRedMask,
 				     pScreenPriv->dwGreenMask,
-				     pScreenPriv->dwBlueMask))
-	{
+                                      pScreenPriv->dwBlueMask)) {
 	  ErrorF ("winInitVisualsPrimaryDD - "
 		  "miSetVisualTypesAndMasks failed\n");
 	  return FALSE;
@@ -416,7 +394,6 @@ winInitVisualsPrimaryDD (ScreenPtr pScreen)
   return TRUE;
 }
 
-
 static Bool
 winAdjustVideoModePrimaryDD (ScreenPtr pScreen)
 {
@@ -427,8 +404,7 @@ winAdjustVideoModePrimaryDD (ScreenPtr pScreen)
 
   /* We're in serious trouble if we can't get a DC */
   hdc = GetDC (NULL);
-  if (hdc == NULL)
-    {
+    if (hdc == NULL) {
       ErrorF ("winAdjustVideoModePrimaryDD - GetDC failed\n");
       return FALSE;
     }
@@ -437,9 +413,7 @@ winAdjustVideoModePrimaryDD (ScreenPtr pScreen)
   dwBPP = GetDeviceCaps (hdc, BITSPIXEL);
 
   /* DirectDraw can only change the depth in fullscreen mode */
-  if (!(pScreenInfo->fFullScreen &&
-        (pScreenInfo->dwBPP != WIN_DEFAULT_BPP)))
-    {
+    if (!(pScreenInfo->fFullScreen && (pScreenInfo->dwBPP != WIN_DEFAULT_BPP))) {
       /* Otherwise, We'll use GDI's depth */
       pScreenInfo->dwBPP = dwBPP;
     }
@@ -450,7 +424,6 @@ winAdjustVideoModePrimaryDD (ScreenPtr pScreen)
   return TRUE;
 }
 
-
 /*
  * We need to blit our offscreen fb to
  * the screen when we are activated, and we need to point
@@ -477,10 +450,8 @@ winActivateAppPrimaryDD (ScreenPtr pScreen)
   
   /* We are activating */
   ddrval = IDirectDrawSurface2_IsLost (pScreenPriv->pddsOffscreen);
-  if (ddrval == DD_OK)
-    {
-      IDirectDrawSurface2_Unlock (pScreenPriv->pddsOffscreen,
-				  NULL);
+    if (ddrval == DD_OK) {
+        IDirectDrawSurface2_Unlock(pScreenPriv->pddsOffscreen, NULL);
       /*
        * We don't check for an error from Unlock, because it
        * doesn't matter if the Unlock failed.
@@ -494,8 +465,7 @@ winActivateAppPrimaryDD (ScreenPtr pScreen)
   /* Get client area in screen coords */
   GetClientRect (pScreenPriv->hwndScreen, &rcClient);
   MapWindowPoints (pScreenPriv->hwndScreen,
-		   HWND_DESKTOP,
-		   (LPPOINT)&rcClient, 2);
+                    HWND_DESKTOP, (LPPOINT) & rcClient, 2);
 
   /* Setup a source rectangle */
   rcSrc.left = 0;
@@ -506,9 +476,7 @@ winActivateAppPrimaryDD (ScreenPtr pScreen)
   ddrval = IDirectDrawSurface2_Blt (pScreenPriv->pddsPrimary,
 				    &rcClient,
 				    pScreenPriv->pddsOffscreen,
-				    &rcSrc,
-				    DDBLT_WAIT,
-				    NULL);
+                                     &rcSrc, DDBLT_WAIT, NULL);
   if (ddrval != DD_OK)
     FatalError ("winActivateAppPrimaryDD () - Failed blitting offscreen "
 		"surface to primary surface %08x\n", (unsigned int) ddrval);
@@ -517,16 +485,13 @@ winActivateAppPrimaryDD (ScreenPtr pScreen)
   ddrval = IDirectDrawSurface2_Lock (pScreenPriv->pddsPrimary,
 				     &rcClient,
 				     pScreenPriv->pddsdPrimary,
-				     DDLOCK_WAIT,
-				     NULL);
-  if (ddrval != DD_OK
-      || pScreenPriv->pddsdPrimary->lpSurface == NULL)
+                                      DDLOCK_WAIT, NULL);
+    if (ddrval != DD_OK || pScreenPriv->pddsdPrimary->lpSurface == NULL)
     FatalError ("winActivateAppPrimaryDD () - Could not lock "
 		"primary surface\n");
 
   /* Notify FB of the new memory pointer */
-  winUpdateFBPointer (pScreen,
-		      pScreenPriv->pddsdPrimary->lpSurface);
+    winUpdateFBPointer(pScreen, pScreenPriv->pddsdPrimary->lpSurface);
 
   /*
    * Register the Alt-Tab combo as a hotkey so we can copy
@@ -537,7 +502,6 @@ winActivateAppPrimaryDD (ScreenPtr pScreen)
   return TRUE;
 }
 
-
 /*
  * Handle the Alt+Tab hotkey.
  *
@@ -560,22 +524,18 @@ winHotKeyAltTabPrimaryDD (ScreenPtr pScreen)
   pScreenPriv->fActive = FALSE;
   
   /* Check for error conditions */
-  if (pScreenPriv->pddsPrimary == NULL
-      || pScreenPriv->pddsOffscreen == NULL)
+    if (pScreenPriv->pddsPrimary == NULL || pScreenPriv->pddsOffscreen == NULL)
     return FALSE;
 
   /* Get client area in screen coords */
   GetClientRect (pScreenPriv->hwndScreen, &rcClient);
   MapWindowPoints (pScreenPriv->hwndScreen,
-		   HWND_DESKTOP,
-		   (LPPOINT)&rcClient, 2);
+                    HWND_DESKTOP, (LPPOINT) & rcClient, 2);
 
   /* Did we loose the primary surface? */
   ddrval = IDirectDrawSurface2_IsLost (pScreenPriv->pddsPrimary);
-  if (ddrval == DD_OK)
-    {
-      ddrval = IDirectDrawSurface2_Unlock (pScreenPriv->pddsPrimary,
-					   NULL);
+    if (ddrval == DD_OK) {
+        ddrval = IDirectDrawSurface2_Unlock(pScreenPriv->pddsPrimary, NULL);
       if (FAILED (ddrval))
 	FatalError ("winHotKeyAltTabPrimaryDD - Failed unlocking primary "
 		    "surface\n");
@@ -588,14 +548,10 @@ winHotKeyAltTabPrimaryDD (ScreenPtr pScreen)
   rcSrc.bottom = pScreenInfo->dwHeight;
 
       /* Blit the primary surface to the offscreen surface */
-  ddrval = IDirectDrawSurface2_Blt (pScreenPriv->pddsOffscreen,
-				    NULL, /* should be rcDest */
+    ddrval = IDirectDrawSurface2_Blt(pScreenPriv->pddsOffscreen, NULL,  /* should be rcDest */
 				    pScreenPriv->pddsPrimary,
-				    NULL,
-				    DDBLT_WAIT,
-				    NULL);
-  if (ddrval == DDERR_SURFACELOST)
-    {
+                                     NULL, DDBLT_WAIT, NULL);
+    if (ddrval == DDERR_SURFACELOST) {
       IDirectDrawSurface2_Restore (pScreenPriv->pddsOffscreen);  
       IDirectDrawSurface2_Restore (pScreenPriv->pddsPrimary);
 		  		  
@@ -603,16 +559,13 @@ winHotKeyAltTabPrimaryDD (ScreenPtr pScreen)
       ddrval = IDirectDrawSurface2_Blt (pScreenPriv->pddsOffscreen,
 					NULL,
 					pScreenPriv->pddsPrimary,
-					NULL,
-					DDBLT_WAIT,
-					NULL);
+                                         NULL, DDBLT_WAIT, NULL);
       if (FAILED (ddrval))
 	FatalError ("winHotKeyAltTabPrimaryDD - Failed blitting primary "
 		    "surface to offscreen surface: %08x\n",
 		    (unsigned int) ddrval);
     }
-  else
-    {
+    else {
       FatalError ("winHotKeyAltTabPrimaryDD - Unknown error from "
 		  "Blt: %08dx\n", (unsigned int) ddrval);
     }
@@ -621,16 +574,13 @@ winHotKeyAltTabPrimaryDD (ScreenPtr pScreen)
   ddrval = IDirectDrawSurface2_Lock (pScreenPriv->pddsOffscreen,
 				     NULL,
 				     pScreenPriv->pddsdOffscreen,
-				     DDLOCK_WAIT,
-				     NULL);
-  if (ddrval != DD_OK
-      || pScreenPriv->pddsdPrimary->lpSurface == NULL)
+                                      DDLOCK_WAIT, NULL);
+    if (ddrval != DD_OK || pScreenPriv->pddsdPrimary->lpSurface == NULL)
     FatalError ("winHotKeyAltTabPrimaryDD - Could not lock "
 		"offscreen surface\n");
 
   /* Notify FB of the new memory pointer */
-  winUpdateFBPointer (pScreen,
-		      pScreenPriv->pddsdOffscreen->lpSurface);
+    winUpdateFBPointer(pScreen, pScreenPriv->pddsdOffscreen->lpSurface);
 
   /* Unregister our hotkey */
   UnregisterHotKey (pScreenPriv->hwndScreen, 1);
@@ -638,7 +588,6 @@ winHotKeyAltTabPrimaryDD (ScreenPtr pScreen)
   return TRUE;
 }
 
-
 /* Set engine specific functions */
 Bool
 winSetEngineFunctionsPrimaryDD (ScreenPtr pScreen)
@@ -649,17 +598,20 @@ winSetEngineFunctionsPrimaryDD (ScreenPtr pScreen)
   /* Set our pointers */
   pScreenPriv->pwinAllocateFB = winAllocateFBPrimaryDD;
   pScreenPriv->pwinFreeFB = winFreeFBPrimaryDD;
-  pScreenPriv->pwinShadowUpdate = (winShadowUpdateProcPtr) (void (*)(void))NoopDDA;
+    pScreenPriv->pwinShadowUpdate =
+        (winShadowUpdateProcPtr) (void (*)(void)) NoopDDA;
   pScreenPriv->pwinInitScreen = winInitScreenPrimaryDD;
   pScreenPriv->pwinCloseScreen = winCloseScreenPrimaryDD;
   pScreenPriv->pwinInitVisuals = winInitVisualsPrimaryDD;
   pScreenPriv->pwinAdjustVideoMode = winAdjustVideoModePrimaryDD;
   if (pScreenInfo->fFullScreen)
-    pScreenPriv->pwinCreateBoundingWindow = winCreateBoundingWindowFullScreen;
+        pScreenPriv->pwinCreateBoundingWindow =
+            winCreateBoundingWindowFullScreen;
   else
     pScreenPriv->pwinCreateBoundingWindow = winCreateBoundingWindowWindowed;
   pScreenPriv->pwinFinishScreenInit = winFinishScreenInitFB;
-  pScreenPriv->pwinBltExposedRegions = (winBltExposedRegionsProcPtr) (void (*)(void))NoopDDA;
+    pScreenPriv->pwinBltExposedRegions =
+        (winBltExposedRegionsProcPtr) (void (*)(void)) NoopDDA;
   pScreenPriv->pwinActivateApp = winActivateAppPrimaryDD;
   pScreenPriv->pwinRedrawScreen = NULL;
   pScreenPriv->pwinRealizeInstalledPalette = NULL;
@@ -668,8 +620,10 @@ winSetEngineFunctionsPrimaryDD (ScreenPtr pScreen)
   pScreenPriv->pwinCreateColormap = NULL;
   pScreenPriv->pwinDestroyColormap = NULL;
   pScreenPriv->pwinHotKeyAltTab = winHotKeyAltTabPrimaryDD;
-  pScreenPriv->pwinCreatePrimarySurface = (winCreatePrimarySurfaceProcPtr) (void (*)(void))NoopDDA;
-  pScreenPriv->pwinReleasePrimarySurface = (winReleasePrimarySurfaceProcPtr) (void (*)(void))NoopDDA;
+    pScreenPriv->pwinCreatePrimarySurface =
+        (winCreatePrimarySurfaceProcPtr) (void (*)(void)) NoopDDA;
+    pScreenPriv->pwinReleasePrimarySurface =
+        (winReleasePrimarySurfaceProcPtr) (void (*)(void)) NoopDDA;
 #ifdef XWIN_MULTIWINDOW
   pScreenPriv->pwinFinishCreateWindowsWindow =
     (winFinishCreateWindowsWindowProcPtr) (void (*)(void))NoopDDA;
