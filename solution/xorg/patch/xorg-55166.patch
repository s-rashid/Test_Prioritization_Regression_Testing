diff --git a/glx/glxcmds.c b/glx/glxcmds.c
index d5b764f..24fed8f 100644
--- a/glx/glxcmds.c
+++ b/glx/glxcmds.c
@@ -51,7 +51,8 @@
 #include "indirect_util.h"
 
 static int
-validGlxScreen(ClientPtr client, int screen, __GLXscreen **pGlxScreen, int *err)
+validGlxScreen(ClientPtr client, int screen, __GLXscreen ** pGlxScreen,
+               int *err)
 {
     /*
     ** Check if screen exists.
@@ -192,15 +193,16 @@ __glXContextDestroy(__GLXcontext *context)
     __glXFlushContextCache();
 }
 
-static void __glXdirectContextDestroy(__GLXcontext *context)
+static void
+__glXdirectContextDestroy(__GLXcontext * context)
 {
     __glXContextDestroy(context);
     free(context);
 }
 
-static __GLXcontext *__glXdirectContextCreate(__GLXscreen *screen,
-					      __GLXconfig *modes,
-					      __GLXcontext *shareContext)
+static __GLXcontext *
+__glXdirectContextCreate(__GLXscreen * screen,
+                         __GLXconfig * modes, __GLXcontext * shareContext)
 {
     __GLXcontext *context;
 
@@ -243,7 +245,8 @@ DoCreateContext(__GLXclientState *cl, GLXContextID gcId,
     */
     if (shareList == None) {
 	shareglxc = 0;
-    } else {
+    }
+    else {
 	if (!validGlxContext(client, shareList, DixReadAccess,
 			     &shareglxc, &err))
 	    return err;
@@ -260,7 +263,8 @@ DoCreateContext(__GLXclientState *cl, GLXContextID gcId,
 	    client->errorValue = shareList;
 	    return BadMatch;
 #endif
-	} else {
+        }
+        else {
 	    /*
 	    ** Create an indirect context regardless of what the client asked
 	    ** for; this way we can share display list space with shareList.
@@ -312,7 +316,8 @@ DoCreateContext(__GLXclientState *cl, GLXContextID gcId,
     return Success;
 }
 
-int __glXDisp_CreateContext(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_CreateContext(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXCreateContextReq *req = (xGLXCreateContextReq *) pc;
@@ -331,7 +336,8 @@ int __glXDisp_CreateContext(__GLXclientState *cl, GLbyte *pc)
 			   config, pGlxScreen, req->isDirect);
 }
 
-int __glXDisp_CreateNewContext(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_CreateNewContext(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXCreateNewContextReq *req = (xGLXCreateNewContextReq *) pc;
@@ -350,7 +356,8 @@ int __glXDisp_CreateNewContext(__GLXclientState *cl, GLbyte *pc)
 			   config, pGlxScreen, req->isDirect);
 }
 
-int __glXDisp_CreateContextWithConfigSGIX(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_CreateContextWithConfigSGIX(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXCreateContextWithConfigSGIXReq *req = 
@@ -370,7 +377,8 @@ int __glXDisp_CreateContextWithConfigSGIX(__GLXclientState *cl, GLbyte *pc)
 			   config, pGlxScreen, req->isDirect);
 }
 
-int __glXDisp_DestroyContext(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_DestroyContext(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXDestroyContextReq *req = (xGLXDestroyContextReq *) pc;
@@ -399,7 +407,8 @@ int __glXDisp_DestroyContext(__GLXclientState *cl, GLbyte *pc)
  * way to destruction.  Notice that DoMakeCurrent calls validGlxContext
  * for new contexts but __glXLookupContextByTag for previous contexts.
  */
-__GLXcontext *__glXLookupContextByTag(__GLXclientState *cl, GLXContextTag tag)
+__GLXcontext *
+__glXLookupContextByTag(__GLXclientState * cl, GLXContextTag tag)
 {
     __GLXcontext *ret;
 
@@ -412,7 +421,8 @@ __GLXcontext *__glXLookupContextByTag(__GLXclientState *cl, GLXContextTag tag)
 
 /*****************************************************************************/
 
-static void StopUsingContext(__GLXcontext *glxc)
+static void
+StopUsingContext(__GLXcontext * glxc)
 {
     if (glxc) {
 	if (glxc == __glXLastContext) {
@@ -426,7 +436,8 @@ static void StopUsingContext(__GLXcontext *glxc)
     }
 }
 
-static void StartUsingContext(__GLXclientState *cl, __GLXcontext *glxc)
+static void
+StartUsingContext(__GLXclientState * cl, __GLXcontext * glxc)
 {
     glxc->isCurrent = GL_TRUE;
     __glXLastContext = glxc;	
@@ -546,7 +557,8 @@ DoMakeCurrent(__GLXclientState *cl,
 	    client->errorValue = prevglxc->id;
 	    return __glXError(GLXBadContextState);
 	}
-    } else {
+    }
+    else {
 	prevglxc = 0;
     }
 
@@ -574,14 +586,14 @@ DoMakeCurrent(__GLXclientState *cl,
 	if (readPriv == NULL)
 	    return status;
 
-    } else {
+    }
+    else {
 	/* Switching to no context.  Ignore new drawable. */
 	glxc = 0;
 	drawPriv = 0;
 	readPriv = 0;
     }
 
-
     if (prevglxc) {
 	/*
 	** Flush the previous context if needed.
@@ -590,7 +602,8 @@ DoMakeCurrent(__GLXclientState *cl,
 	    if (__glXForceCurrent(cl, tag, (int *)&error)) {
 		CALL_Flush( GET_DISPATCH(), () );
 		prevglxc->hasUnflushedCommands = GL_FALSE;
-	    } else {
+            }
+            else {
 		return error;
 	    }
 	}
@@ -608,7 +621,6 @@ DoMakeCurrent(__GLXclientState *cl,
 	}
     }
 	
-
     if ((glxc != 0) && !glxc->isDirect) {
 
 	glxc->drawPriv = drawPriv;
@@ -629,7 +641,8 @@ DoMakeCurrent(__GLXclientState *cl,
     if (glxc) {
 	StartUsingContext(cl, glxc);
 	reply.contextTag = glxc->id;
-    } else {
+    }
+    else {
 	reply.contextTag = 0;
     }
 
@@ -639,13 +652,15 @@ DoMakeCurrent(__GLXclientState *cl,
 
     if (client->swapped) {
 	__glXSwapMakeCurrentReply(client, &reply);
-    } else {
+    }
+    else {
 	WriteToClient(client, sz_xGLXMakeCurrentReply, (char *)&reply);
     }
     return Success;
 }
 
-int __glXDisp_MakeCurrent(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_MakeCurrent(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXMakeCurrentReq *req = (xGLXMakeCurrentReq *) pc;
@@ -656,7 +671,8 @@ int __glXDisp_MakeCurrent(__GLXclientState *cl, GLbyte *pc)
 			  req->context, req->oldContextTag );
 }
 
-int __glXDisp_MakeContextCurrent(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_MakeContextCurrent(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXMakeContextCurrentReq *req = (xGLXMakeContextCurrentReq *) pc;
@@ -667,7 +683,8 @@ int __glXDisp_MakeContextCurrent(__GLXclientState *cl, GLbyte *pc)
 			  req->context, req->oldContextTag );
 }
 
-int __glXDisp_MakeCurrentReadSGI(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_MakeCurrentReadSGI(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXMakeCurrentReadSGIReq *req = (xGLXMakeCurrentReadSGIReq *) pc;
@@ -678,7 +695,8 @@ int __glXDisp_MakeCurrentReadSGI(__GLXclientState *cl, GLbyte *pc)
 			  req->context, req->oldContextTag );
 }
 
-int __glXDisp_IsDirect(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_IsDirect(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXIsDirectReq *req = (xGLXIsDirectReq *) pc;
@@ -698,14 +716,16 @@ int __glXDisp_IsDirect(__GLXclientState *cl, GLbyte *pc)
 
     if (client->swapped) {
 	__glXSwapIsDirectReply(client, &reply);
-    } else {
+    }
+    else {
 	WriteToClient(client, sz_xGLXIsDirectReply, (char *)&reply);
     }
 
     return Success;
 }
 
-int __glXDisp_QueryVersion(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_QueryVersion(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXQueryVersionReq *req = (xGLXQueryVersionReq *) pc;
@@ -732,13 +752,15 @@ int __glXDisp_QueryVersion(__GLXclientState *cl, GLbyte *pc)
 
     if (client->swapped) {
 	__glXSwapQueryVersionReply(client, &reply);
-    } else {
+    }
+    else {
 	WriteToClient(client, sz_xGLXQueryVersionReply, (char *)&reply);
     }
     return Success;
 }
 
-int __glXDisp_WaitGL(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_WaitGL(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXWaitGLReq *req = (xGLXWaitGLReq *)pc;
@@ -766,7 +788,8 @@ int __glXDisp_WaitGL(__GLXclientState *cl, GLbyte *pc)
     return Success;
 }
 
-int __glXDisp_WaitX(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_WaitX(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXWaitXReq *req = (xGLXWaitXReq *)pc;
@@ -792,7 +815,8 @@ int __glXDisp_WaitX(__GLXclientState *cl, GLbyte *pc)
     return Success;
 }
 
-int __glXDisp_CopyContext(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_CopyContext(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXCopyContextReq *req = (xGLXCopyContextReq *) pc;
@@ -818,8 +842,7 @@ int __glXDisp_CopyContext(__GLXclientState *cl, GLbyte *pc)
     ** They must be in the same address space, and same screen.
     ** NOTE: no support for direct rendering contexts here.
     */
-    if (src->isDirect || dst->isDirect ||
-	(src->pGlxScreen != dst->pGlxScreen)) {
+    if (src->isDirect || dst->isDirect || (src->pGlxScreen != dst->pGlxScreen)) {
 	client->errorValue = source;
 	return BadMatch;
     }
@@ -856,7 +879,8 @@ int __glXDisp_CopyContext(__GLXclientState *cl, GLbyte *pc)
 	    */
 	    CALL_Finish( GET_DISPATCH(), () );
 	    tagcx->hasUnflushedCommands = GL_FALSE;
-	} else {
+        }
+        else {
 	    return error;
 	}
     }
@@ -879,7 +903,8 @@ enum {
     GLX_VIS_CONFIG_TOTAL = GLX_VIS_CONFIG_UNPAIRED + GLX_VIS_CONFIG_PAIRED
 };
 
-int __glXDisp_GetVisualConfigs(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_GetVisualConfigs(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXGetVisualConfigsReq *req = (xGLXGetVisualConfigsReq *) pc;
     ClientPtr client = cl->client;
@@ -888,6 +913,7 @@ int __glXDisp_GetVisualConfigs(__GLXclientState *cl, GLbyte *pc)
     __GLXconfig *modes;
     CARD32 buf[GLX_VIS_CONFIG_TOTAL];
     int p, i, err;
+
     __GLX_DECLARE_SWAP_VARIABLES;
     __GLX_DECLARE_SWAP_ARRAY_VARIABLES;
 
@@ -898,7 +924,8 @@ int __glXDisp_GetVisualConfigs(__GLXclientState *cl, GLbyte *pc)
 
     reply.numVisuals = pGlxScreen->numVisuals;
     reply.numProps = GLX_VIS_CONFIG_TOTAL;
-    reply.length = (reply.numVisuals * __GLX_SIZE_CARD32 * GLX_VIS_CONFIG_TOTAL) >> 2;
+    reply.length =
+        (reply.numVisuals * __GLX_SIZE_CARD32 * GLX_VIS_CONFIG_TOTAL) >> 2;
     reply.type = X_Reply;
     reply.sequenceNumber = client->sequence;
 
@@ -992,6 +1019,7 @@ DoGetFBConfigs(__GLXclientState *cl, unsigned screen)
     CARD32 buf[__GLX_FBCONFIG_ATTRIBS_LENGTH];
     int p, err;
     __GLXconfig *modes;
+
     __GLX_DECLARE_SWAP_VARIABLES;
     __GLX_DECLARE_SWAP_ARRAY_VARIABLES;
 
@@ -1058,7 +1086,8 @@ DoGetFBConfigs(__GLXclientState *cl, unsigned screen)
 	WRITE_PAIR( GLX_BIND_TO_TEXTURE_RGB_EXT, modes->bindToTextureRgb );
 	WRITE_PAIR( GLX_BIND_TO_TEXTURE_RGBA_EXT, modes->bindToTextureRgba );
 	WRITE_PAIR( GLX_BIND_TO_MIPMAP_TEXTURE_EXT, modes->bindToMipmapTexture );
-	WRITE_PAIR( GLX_BIND_TO_TEXTURE_TARGETS_EXT, modes->bindToTextureTargets );
+        WRITE_PAIR(GLX_BIND_TO_TEXTURE_TARGETS_EXT,
+                   modes->bindToTextureTargets);
 
 	if (client->swapped) {
 	    __GLX_SWAP_INT_ARRAY(buf, __GLX_FBCONFIG_ATTRIBS_LENGTH);
@@ -1069,19 +1098,22 @@ DoGetFBConfigs(__GLXclientState *cl, unsigned screen)
     return Success;
 }
 
-
-int __glXDisp_GetFBConfigs(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_GetFBConfigs(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXGetFBConfigsReq *req = (xGLXGetFBConfigsReq *) pc;
+
     REQUEST_SIZE_MATCH(xGLXGetFBConfigsReq);
     return DoGetFBConfigs(cl, req->screen);
 }
 
-int __glXDisp_GetFBConfigsSGIX(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_GetFBConfigsSGIX(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXGetFBConfigsSGIXReq *req = (xGLXGetFBConfigsSGIXReq *) pc;
+
     /* work around mesa bug, don't use REQUEST_SIZE_MATCH */
     REQUEST_AT_LEAST_SIZE(xGLXGetFBConfigsSGIXReq);
     return DoGetFBConfigs(cl, req->screen);
@@ -1141,8 +1173,8 @@ DoCreateGLXDrawable(ClientPtr client, __GLXscreen *pGlxScreen,
 }
 
 static int
-DoCreateGLXPixmap(ClientPtr client, __GLXscreen *pGlxScreen, __GLXconfig *config,
-		  XID drawableId, XID glxDrawableId)
+DoCreateGLXPixmap(ClientPtr client, __GLXscreen * pGlxScreen,
+                  __GLXconfig * config, XID drawableId, XID glxDrawableId)
 {
     DrawablePtr pDraw;
     int err;
@@ -1210,7 +1242,8 @@ determineTextureTarget(ClientPtr client, XID glxDrawableID,
     pGlxDraw->format = format;
 }
 
-int __glXDisp_CreateGLXPixmap(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_CreateGLXPixmap(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXCreateGLXPixmapReq *req = (xGLXCreateGLXPixmapReq *) pc;
@@ -1229,7 +1262,8 @@ int __glXDisp_CreateGLXPixmap(__GLXclientState *cl, GLbyte *pc)
 			     req->pixmap, req->glxpixmap);
 }
 
-int __glXDisp_CreatePixmap(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_CreatePixmap(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXCreatePixmapReq *req = (xGLXCreatePixmapReq *) pc;
@@ -1260,7 +1294,8 @@ int __glXDisp_CreatePixmap(__GLXclientState *cl, GLbyte *pc)
     return Success;
 }
 
-int __glXDisp_CreateGLXPixmapWithConfigSGIX(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_CreateGLXPixmapWithConfigSGIX(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXCreateGLXPixmapWithConfigSGIXReq *req = 
@@ -1280,8 +1315,8 @@ int __glXDisp_CreateGLXPixmapWithConfigSGIX(__GLXclientState *cl, GLbyte *pc)
 			     config, req->pixmap, req->glxpixmap);
 }
 
-
-static int DoDestroyDrawable(__GLXclientState *cl, XID glxdrawable, int type)
+static int
+DoDestroyDrawable(__GLXclientState * cl, XID glxdrawable, int type)
 {
     __GLXdrawable *pGlxDraw;
     int err;
@@ -1295,7 +1330,8 @@ static int DoDestroyDrawable(__GLXclientState *cl, XID glxdrawable, int type)
     return Success;
 }
 
-int __glXDisp_DestroyGLXPixmap(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_DestroyGLXPixmap(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXDestroyGLXPixmapReq *req = (xGLXDestroyGLXPixmapReq *) pc;
@@ -1305,7 +1341,8 @@ int __glXDisp_DestroyGLXPixmap(__GLXclientState *cl, GLbyte *pc)
     return DoDestroyDrawable(cl, req->glxpixmap, GLX_DRAWABLE_PIXMAP);
 }
 
-int __glXDisp_DestroyPixmap(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_DestroyPixmap(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXDestroyPixmapReq *req = (xGLXDestroyPixmapReq *) pc;
@@ -1335,7 +1372,8 @@ DoCreatePbuffer(ClientPtr client, int screenNum, XID fbconfigId,
 
     __glXenterServer(GL_FALSE);
     pPixmap = (*pGlxScreen->pScreen->CreatePixmap) (pGlxScreen->pScreen,
-						    width, height, config->rgbBits, 0);
+                                                    width, height,
+                                                    config->rgbBits, 0);
     __glXleaveServer(GL_FALSE);
 
     /* Assign the pixmap the same id as the pbuffer and add it as a
@@ -1350,7 +1388,8 @@ DoCreatePbuffer(ClientPtr client, int screenNum, XID fbconfigId,
 			       GLX_DRAWABLE_PBUFFER);
 }
 
-int __glXDisp_CreatePbuffer(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_CreatePbuffer(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXCreatePbufferReq	*req = (xGLXCreatePbufferReq *) pc;
@@ -1387,7 +1426,8 @@ int __glXDisp_CreatePbuffer(__GLXclientState *cl, GLbyte *pc)
 			   width, height, req->pbuffer);
 }
 
-int __glXDisp_CreateGLXPbufferSGIX(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_CreateGLXPbufferSGIX(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXCreateGLXPbufferSGIXReq *req = (xGLXCreateGLXPbufferSGIXReq *) pc;
@@ -1398,7 +1438,8 @@ int __glXDisp_CreateGLXPbufferSGIX(__GLXclientState *cl, GLbyte *pc)
 			   req->width, req->height, req->pbuffer);
 }
 
-int __glXDisp_DestroyPbuffer(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_DestroyPbuffer(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXDestroyPbufferReq *req = (xGLXDestroyPbufferReq *) pc;
@@ -1408,7 +1449,8 @@ int __glXDisp_DestroyPbuffer(__GLXclientState *cl, GLbyte *pc)
     return DoDestroyDrawable(cl, req->pbuffer, GLX_DRAWABLE_PBUFFER);
 }
 
-int __glXDisp_DestroyGLXPbufferSGIX(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_DestroyGLXPbufferSGIX(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXDestroyGLXPbufferSGIXReq *req = (xGLXDestroyGLXPbufferSGIXReq *) pc;
@@ -1443,7 +1485,8 @@ DoChangeDrawableAttributes(ClientPtr client, XID glxdrawable,
     return Success;
 }
 
-int __glXDisp_ChangeDrawableAttributes(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_ChangeDrawableAttributes(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXChangeDrawableAttributesReq *req =
@@ -1458,7 +1501,8 @@ int __glXDisp_ChangeDrawableAttributes(__GLXclientState *cl, GLbyte *pc)
     /* mesa sends an additional 8 bytes */
     REQUEST_FIXED_SIZE(xGLXChangeDrawableAttributesReq, req->numAttribs << 3);
 #else
-    if (((sizeof(xGLXChangeDrawableAttributesReq) + (req->numAttribs << 3)) >> 2) < client->req_len)
+    if (((sizeof(xGLXChangeDrawableAttributesReq) +
+          (req->numAttribs << 3)) >> 2) < client->req_len)
 	    return BadLength;
 #endif
 
@@ -1466,7 +1510,8 @@ int __glXDisp_ChangeDrawableAttributes(__GLXclientState *cl, GLbyte *pc)
 				      req->numAttribs, (CARD32 *) (req + 1));
 }
 
-int __glXDisp_ChangeDrawableAttributesSGIX(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_ChangeDrawableAttributesSGIX(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXChangeDrawableAttributesSGIXReq *req =
@@ -1477,13 +1522,15 @@ int __glXDisp_ChangeDrawableAttributesSGIX(__GLXclientState *cl, GLbyte *pc)
 	client->errorValue = req->numAttribs;
 	return BadValue;
     }
-    REQUEST_FIXED_SIZE(xGLXChangeDrawableAttributesSGIXReq, req->numAttribs << 3);
+    REQUEST_FIXED_SIZE(xGLXChangeDrawableAttributesSGIXReq,
+                       req->numAttribs << 3);
 
     return DoChangeDrawableAttributes(cl->client, req->drawable,
 				      req->numAttribs, (CARD32 *) (req + 1));
 }
 
-int __glXDisp_CreateWindow(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_CreateWindow(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXCreateWindowReq	*req = (xGLXCreateWindowReq *) pc;
     __GLXconfig	*config;
@@ -1520,7 +1567,8 @@ int __glXDisp_CreateWindow(__GLXclientState *cl, GLbyte *pc)
 			       req->glxwindow, GLX_DRAWABLE_WINDOW);
 }
 
-int __glXDisp_DestroyWindow(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_DestroyWindow(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXDestroyWindowReq *req = (xGLXDestroyWindowReq *) pc;
@@ -1531,7 +1579,6 @@ int __glXDisp_DestroyWindow(__GLXclientState *cl, GLbyte *pc)
     return DoDestroyDrawable(cl, req->glxwindow, GLX_DRAWABLE_WINDOW);
 }
 
-
 /*****************************************************************************/
 
 /*
@@ -1539,7 +1586,8 @@ int __glXDisp_DestroyWindow(__GLXclientState *cl, GLbyte *pc)
 ** this time that is of value.  Consequently, this code must be
 ** implemented by somebody other than SGI.
 */
-int __glXDisp_SwapBuffers(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_SwapBuffers(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXSwapBuffersReq *req = (xGLXSwapBuffersReq *) pc;
@@ -1570,7 +1618,8 @@ int __glXDisp_SwapBuffers(__GLXclientState *cl, GLbyte *pc)
 	    */
 	    CALL_Finish( GET_DISPATCH(), () );
 	    glxc->hasUnflushedCommands = GL_FALSE;
-	} else {
+        }
+        else {
 	    return error;
 	}
     }
@@ -1586,7 +1635,6 @@ int __glXDisp_SwapBuffers(__GLXclientState *cl, GLbyte *pc)
     return Success;
 }
 
-
 static int
 DoQueryContext(__GLXclientState *cl, GLXContextID gcId)
 {
@@ -1622,7 +1670,8 @@ DoQueryContext(__GLXclientState *cl, GLXContextID gcId)
 
     if (client->swapped) {
 	__glXSwapQueryContextInfoEXTReply(client, &reply, sendBuf);
-    } else {
+    }
+    else {
 	WriteToClient(client, sz_xGLXQueryContextInfoEXTReply, (char *)&reply);
 	WriteToClient(client, nReplyBytes, (char *)sendBuf);
     }
@@ -1631,7 +1680,8 @@ DoQueryContext(__GLXclientState *cl, GLXContextID gcId)
     return Success;
 }
 
-int __glXDisp_QueryContextInfoEXT(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_QueryContextInfoEXT(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXQueryContextInfoEXTReq *req = (xGLXQueryContextInfoEXTReq *) pc;
@@ -1641,7 +1691,8 @@ int __glXDisp_QueryContextInfoEXT(__GLXclientState *cl, GLbyte *pc)
     return DoQueryContext(cl, req->context);
 }
 
-int __glXDisp_QueryContext(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_QueryContext(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXQueryContextReq *req = (xGLXQueryContextReq *) pc;
@@ -1651,7 +1702,8 @@ int __glXDisp_QueryContext(__GLXclientState *cl, GLbyte *pc)
     return DoQueryContext(cl, req->context);
 }
 
-int __glXDisp_BindTexImageEXT(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_BindTexImageEXT(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq *req = (xGLXVendorPrivateReq *) pc;
     ClientPtr		 client = cl->client;
@@ -1690,12 +1742,11 @@ int __glXDisp_BindTexImageEXT(__GLXclientState *cl, GLbyte *pc)
     if (!context->textureFromPixmap)
 	return __glXError(GLXUnsupportedPrivateRequest);
 
-    return context->textureFromPixmap->bindTexImage(context,
-						    buffer,
-						    pGlxDraw);
+    return context->textureFromPixmap->bindTexImage(context, buffer, pGlxDraw);
 }
 
-int __glXDisp_ReleaseTexImageEXT(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_ReleaseTexImageEXT(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq *req = (xGLXVendorPrivateReq *) pc;
     ClientPtr		 client = cl->client;
@@ -1724,11 +1775,11 @@ int __glXDisp_ReleaseTexImageEXT(__GLXclientState *cl, GLbyte *pc)
 	return __glXError(GLXUnsupportedPrivateRequest);
 
     return context->textureFromPixmap->releaseTexImage(context,
-						       buffer,
-						       pGlxDraw);
+                                                       buffer, pGlxDraw);
 }
 
-int __glXDisp_CopySubBufferMESA(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_CopySubBufferMESA(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq *req = (xGLXVendorPrivateReq *) pc;
     GLXContextTag         tag = req->contextTag;
@@ -1769,7 +1820,8 @@ int __glXDisp_CopySubBufferMESA(__GLXclientState *cl, GLbyte *pc)
 	    */
 	    CALL_Finish( GET_DISPATCH(), () );
 	    glxc->hasUnflushedCommands = GL_FALSE;
-	} else {
+        }
+        else {
 	    return error;
 	}
     }
@@ -1820,7 +1872,8 @@ DoGetDrawableAttributes(__GLXclientState *cl, XID drawId)
 
     if (client->swapped) {
 	__glXSwapGetDrawableAttributesReply(client, &reply, attributes);
-    } else {
+    }
+    else {
 	WriteToClient(client, sz_xGLXGetDrawableAttributesReply,
 		      (char *)&reply);
 	WriteToClient(client, reply.length * sizeof (CARD32),
@@ -1830,7 +1883,8 @@ DoGetDrawableAttributes(__GLXclientState *cl, XID drawId)
     return Success;
 }
 
-int __glXDisp_GetDrawableAttributes(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_GetDrawableAttributes(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXGetDrawableAttributesReq *req = (xGLXGetDrawableAttributesReq *)pc;
@@ -1841,7 +1895,8 @@ int __glXDisp_GetDrawableAttributes(__GLXclientState *cl, GLbyte *pc)
     return DoGetDrawableAttributes(cl, req->drawable);
 }
 
-int __glXDisp_GetDrawableAttributesSGIX(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_GetDrawableAttributesSGIX(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXGetDrawableAttributesSGIXReq *req =
@@ -1862,7 +1917,8 @@ int __glXDisp_GetDrawableAttributesSGIX(__GLXclientState *cl, GLbyte *pc)
 /*
 ** Execute all the drawing commands in a request.
 */
-int __glXDisp_Render(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_Render(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXRenderReq *req;
     ClientPtr client= cl->client;
@@ -1871,6 +1927,7 @@ int __glXDisp_Render(__GLXclientState *cl, GLbyte *pc)
     CARD16 opcode;
     __GLXrenderHeader *hdr;
     __GLXcontext *glxc;
+
     __GLX_DECLARE_SWAP_VARIABLES;
 
     REQUEST_AT_LEAST_SIZE(xGLXRenderReq);
@@ -1933,7 +1990,8 @@ int __glXDisp_Render(__GLXclientState *cl, GLbyte *pc)
             if (cmdlen != __GLX_PAD(entry.bytes + extra)) {
                 return BadLength;
             }
-        } else {
+        }
+        else {
             /* constant size command */
             if (cmdlen != __GLX_PAD(entry.bytes)) {
                 return BadLength;
@@ -1959,11 +2017,11 @@ int __glXDisp_Render(__GLXclientState *cl, GLbyte *pc)
     return Success;
 }
 
-
 /*
 ** Execute a large rendering request (one that spans multiple X requests).
 */
-int __glXDisp_RenderLarge(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_RenderLarge(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXRenderLargeReq *req;
     ClientPtr client= cl->client;
@@ -1972,6 +2030,7 @@ int __glXDisp_RenderLarge(__GLXclientState *cl, GLbyte *pc)
     __GLXcontext *glxc;
     int error;
     CARD16 opcode;
+
     __GLX_DECLARE_SWAP_VARIABLES;
     
     req = (xGLXRenderLargeReq *) pc;
@@ -2049,7 +2108,8 @@ int __glXDisp_RenderLarge(__GLXclientState *cl, GLbyte *pc)
 	    if (cmdlen != __GLX_PAD(entry.bytes + 4 + extra)) {
 		return BadLength;
 	    }
-	} else {
+        }
+        else {
 	    /* constant size command */
 	    if (cmdlen != __GLX_PAD(entry.bytes + 4)) {
 		return BadLength;
@@ -2061,7 +2121,8 @@ int __glXDisp_RenderLarge(__GLXclientState *cl, GLbyte *pc)
 	if (cl->largeCmdBufSize < cmdlen) {
 	    if (!cl->largeCmdBuf) {
 		cl->largeCmdBuf = (GLbyte *) malloc(cmdlen);
-	    } else {
+            }
+            else {
 		cl->largeCmdBuf = (GLbyte *) realloc(cl->largeCmdBuf, cmdlen);
 	    }
 	    if (!cl->largeCmdBuf) {
@@ -2077,7 +2138,8 @@ int __glXDisp_RenderLarge(__GLXclientState *cl, GLbyte *pc)
 	cl->largeCmdRequestsTotal = req->requestTotal;
 	return Success;
 	
-    } else {
+    }
+    else {
 	/*
 	** We are receiving subsequent (i.e. not the first) requests of a
 	** multi request command.
@@ -2158,7 +2220,8 @@ int __glXDisp_RenderLarge(__GLXclientState *cl, GLbyte *pc)
 	    ** Reset for the next RenderLarge series.
 	    */
 	    __glXResetLargeCommandStatus(cl);
-	} else {
+        }
+        else {
 	    /*
 	    ** This is neither the first nor the last request.
 	    */
@@ -2174,7 +2237,8 @@ int __glXDisp_RenderLarge(__GLXclientState *cl, GLbyte *pc)
 ** allocating the entry points in the dispatch table.
 */
 
-int __glXDisp_VendorPrivate(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_VendorPrivate(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXVendorPrivateReq *req = (xGLXVendorPrivateReq *) pc;
@@ -2195,7 +2259,8 @@ int __glXDisp_VendorPrivate(__GLXclientState *cl, GLbyte *pc)
     return __glXError(GLXUnsupportedPrivateRequest);
 }
 
-int __glXDisp_VendorPrivateWithReply(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_VendorPrivateWithReply(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXVendorPrivateReq *req = (xGLXVendorPrivateReq *) pc;
@@ -2215,7 +2280,8 @@ int __glXDisp_VendorPrivateWithReply(__GLXclientState *cl, GLbyte *pc)
     return __glXError(GLXUnsupportedPrivateRequest);
 }
 
-int __glXDisp_QueryExtensionsString(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_QueryExtensionsString(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXQueryExtensionsStringReq *req = (xGLXQueryExtensionsStringReq *) pc;
@@ -2245,8 +2311,10 @@ int __glXDisp_QueryExtensionsString(__GLXclientState *cl, GLbyte *pc)
 
     if (client->swapped) {
         glxSwapQueryExtensionsStringReply(client, &reply, buf);
-    } else {
-        WriteToClient(client, sz_xGLXQueryExtensionsStringReply,(char *)&reply);
+    }
+    else {
+        WriteToClient(client, sz_xGLXQueryExtensionsStringReply,
+                      (char *) &reply);
         WriteToClient(client, (int)(length << 2), (char *)buf);
     }
 
@@ -2254,7 +2322,8 @@ int __glXDisp_QueryExtensionsString(__GLXclientState *cl, GLbyte *pc)
     return Success;
 }
 
-int __glXDisp_QueryServerString(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_QueryServerString(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXQueryServerStringReq *req = (xGLXQueryServerStringReq *) pc;
@@ -2304,7 +2373,8 @@ int __glXDisp_QueryServerString(__GLXclientState *cl, GLbyte *pc)
 
     if (client->swapped) {
         glxSwapQueryServerStringReply(client, &reply, buf);
-    } else {
+    }
+    else {
         WriteToClient(client, sz_xGLXQueryServerStringReply, (char *)&reply);
         WriteToClient(client, (int)(length << 2), buf);
     }
@@ -2313,7 +2383,8 @@ int __glXDisp_QueryServerString(__GLXclientState *cl, GLbyte *pc)
     return Success;
 }
 
-int __glXDisp_ClientInfo(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDisp_ClientInfo(__GLXclientState * cl, GLbyte * pc)
 {
     ClientPtr client = cl->client;
     xGLXClientInfoReq *req = (xGLXClientInfoReq *) pc;
