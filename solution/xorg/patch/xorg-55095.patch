diff --git a/dix/region.c b/dix/region.c
index 6820c1e..737d2a8 100644
--- a/dix/region.c
+++ b/dix/region.c
@@ -202,7 +202,6 @@ if (!(pReg)->data || (((pReg)->data->numRects + (n)) > (pReg)->data->size)) \
     assert(pReg->data->numRects<=pReg->data->size);			\
 }
 
-
 #define DOWNSIZE(reg,numRects)						 \
 if (((numRects) < ((reg)->data->size >> 1)) && ((reg)->data->size > 50)) \
 {									 \
@@ -215,7 +214,6 @@ if (((numRects) < ((reg)->data->size >> 1)) && ((reg)->data->size > 50)) \
     }									 \
 }
 
-
 BoxRec RegionEmptyBox = {0, 0, 0, 0};
 RegDataRec RegionEmptyData = {0, 0};
 
@@ -225,7 +223,8 @@ static RegionRec   RegionBrokenRegion = { { 0, 0, 0, 0 }, &RegionBrokenData };
 void
 InitRegions (void)
 {
-    pixman_region_set_static_pointers (&RegionEmptyBox, &RegionEmptyData, &RegionBrokenData);
+    pixman_region_set_static_pointers(&RegionEmptyBox, &RegionEmptyData,
+                                      &RegionBrokenData);
 }
 
 /*****************************************************************
@@ -291,8 +290,7 @@ RegionIsValid(RegionPtr reg)
 		(reg->data->size || (reg->data == &RegionEmptyData)));
     else if (numRects == 1)
 	return !reg->data;
-    else
-    {
+    else {
 	BoxPtr pboxP, pboxN;
 	BoxRec box;
 	
@@ -300,10 +298,8 @@ RegionIsValid(RegionPtr reg)
 	box = *pboxP;
 	box.y2 = pboxP[numRects-1].y2;
 	pboxN = pboxP + 1;
-	for (i = numRects; --i > 0; pboxP++, pboxN++)
-	{
-	    if ((pboxN->x1 >= pboxN->x2) ||
-		(pboxN->y1 >= pboxN->y2))
+        for (i = numRects; --i > 0; pboxP++, pboxN++) {
+            if ((pboxN->x1 >= pboxN->x2) || (pboxN->y1 >= pboxN->y2))
 		return FALSE;
 	    if (pboxN->x1 < box.x1)
 		box.x1 = pboxN->x1;
@@ -316,8 +312,7 @@ RegionIsValid(RegionPtr reg)
 	}
 	return ((box.x1 == reg->extents.x1) &&
 		(box.x2 == reg->extents.x2) &&
-		(box.y1 == reg->extents.y1) &&
-		(box.y2 == reg->extents.y2));
+                (box.y1 == reg->extents.y1) && (box.y2 == reg->extents.y2));
     }
 }
 #endif /* DEBUG */
@@ -336,8 +331,7 @@ RegionRectAlloc(RegionPtr pRgn, int n)
 {
     RegDataPtr	data;
     
-    if (!pRgn->data)
-    {
+    if (!pRgn->data) {
 	n++;
 	pRgn->data = xallocData(n);
 	if (!pRgn->data)
@@ -345,17 +339,14 @@ RegionRectAlloc(RegionPtr pRgn, int n)
 	pRgn->data->numRects = 1;
 	*RegionBoxptr(pRgn) = pRgn->extents;
     }
-    else if (!pRgn->data->size)
-    {
+    else if (!pRgn->data->size) {
 	pRgn->data = xallocData(n);
 	if (!pRgn->data)
 	    return RegionBreak (pRgn);
 	pRgn->data->numRects = 0;
     }
-    else
-    {
-	if (n == 1)
-	{
+    else {
+        if (n == 1) {
 	    n = pRgn->data->numRects;
 	    if (n > 500) /* XXX pick numbers out of a hat */
 		n = 250;
@@ -393,22 +384,23 @@ RegionRectAlloc(RegionPtr pRgn, int n)
  *-----------------------------------------------------------------------
  */
 _X_INLINE static int
-RegionCoalesce (
-    RegionPtr	pReg,	    	/* Region to coalesce		     */
+RegionCoalesce(RegionPtr pReg,  /* Region to coalesce                */
     int	    	  	prevStart,  	/* Index of start of previous band   */
-    int	    	  	curStart)   	/* Index of start of current band    */
-{
+               int curStart)
+{                               /* Index of start of current band    */
     BoxPtr	pPrevBox;   	/* Current box in previous band	     */
     BoxPtr	pCurBox;    	/* Current box in current band       */
     int  	numRects;	/* Number rectangles in both bands   */
     int		y2;		/* Bottom of current band	     */
+
     /*
      * Figure out how many rectangles are in the band.
      */
     numRects = curStart - prevStart;
     assert(numRects == pReg->data->numRects - curStart);
 
-    if (!numRects) return curStart;
+    if (!numRects)
+        return curStart;
 
     /*
      * The bands may only be coalesced if the bottom of the previous
@@ -416,7 +408,8 @@ RegionCoalesce (
      */
     pPrevBox = RegionBox(pReg, prevStart);
     pCurBox = RegionBox(pReg, curStart);
-    if (pPrevBox->y2 != pCurBox->y1) return curStart;
+    if (pPrevBox->y2 != pCurBox->y1)
+        return curStart;
 
     /*
      * Make sure the bands have boxes in the same places. This
@@ -449,7 +442,6 @@ RegionCoalesce (
     return prevStart;
 }
 
-
 /* Quicky macro to avoid trivial reject procedure calls to RegionCoalesce */
 
 #define Coalesce(newReg, prevBand, curBand)				\
@@ -477,12 +469,7 @@ RegionCoalesce (
  */
 
 _X_INLINE static Bool
-RegionAppendNonO (
-    RegionPtr	pReg,
-    BoxPtr	r,
-    BoxPtr  	rEnd,
-    int  	y1,
-    int  	y2)
+RegionAppendNonO(RegionPtr pReg, BoxPtr r, BoxPtr rEnd, int y1, int y2)
 {
     BoxPtr	pNextRect;
     int		newRects;
@@ -554,19 +541,15 @@ RegionAppendNonO (
  *-----------------------------------------------------------------------
  */
 
-typedef Bool (*OverlapProcPtr)(
-    RegionPtr	pReg,
+typedef Bool (*OverlapProcPtr) (RegionPtr pReg,
     BoxPtr	r1,
     BoxPtr   	r1End,
     BoxPtr	r2,
     BoxPtr   	r2End,
-    short    	y1,
-    short    	y2,
-    Bool	*pOverlap);
+                                short y1, short y2, Bool *pOverlap);
 
 static Bool
-RegionOp(
-    RegionPtr       newReg,		    /* Place to store result	     */
+RegionOp(RegionPtr newReg,      /* Place to store result         */
     RegionPtr       reg1,		    /* First region in operation     */
     RegionPtr       reg2,		    /* 2d region in operation        */
     OverlapProcPtr  overlapFunc,            /* Function to call for over-
@@ -622,8 +605,7 @@ RegionOp(
 
     oldData = NULL;
     if (((newReg == reg1) && (newSize > 1)) ||
-	((newReg == reg2) && (numRects > 1)))
-    {
+        ((newReg == reg2) && (numRects > 1))) {
 	oldData = newReg->data;
 	newReg->data = &RegionEmptyData;
     }
@@ -699,7 +681,8 @@ RegionOp(
 		}
 	    }
 	    ytop = r2y1;
-	} else if (r2y1 < r1y1) {
+        }
+        else if (r2y1 < r1y1) {
 	    if (appendNon2) {
 		top = max(r2y1, ybot);
 		bot = min(r2->y2, r1y1);
@@ -710,7 +693,8 @@ RegionOp(
 		}
 	    }
 	    ytop = r1y1;
-	} else {
+        }
+        else {
 	    ytop = r1y1;
 	}
 
@@ -730,8 +714,10 @@ RegionOp(
 	 * If we've finished with a band (y2 == ybot) we skip forward
 	 * in the region to the next band.
 	 */
-	if (r1->y2 == ybot) r1 = r1BandEnd;
-	if (r2->y2 == ybot) r2 = r2BandEnd;
+        if (r1->y2 == ybot)
+            r1 = r1BandEnd;
+        if (r2->y2 == ybot)
+            r2 = r2BandEnd;
 
     } while (r1 != r1End && r2 != r2End);
 
@@ -752,7 +738,8 @@ RegionOp(
 	/* Just append the rest of the boxes  */
 	AppendRegions(newReg, r1BandEnd, r1End);
 
-    } else if ((r2 != r2End) && appendNon2) {
+    }
+    else if ((r2 != r2End) && appendNon2) {
 	/* Do first nonOverlap2Func call, which may be able to coalesce */
 	FindBand(r2, r2BandEnd, r2End, r2y1);
 	curBand = newReg->data->numRects;
@@ -764,19 +751,16 @@ RegionOp(
 
     free(oldData);
 
-    if (!(numRects = newReg->data->numRects))
-    {
+    if (!(numRects = newReg->data->numRects)) {
 	xfreeData(newReg);
 	newReg->data = &RegionEmptyData;
     }
-    else if (numRects == 1)
-    {
+    else if (numRects == 1) {
 	newReg->extents = *RegionBoxptr(newReg);
 	xfreeData(newReg);
 	newReg->data = NULL;
     }
-    else
-    {
+    else {
 	DOWNSIZE(newReg, numRects);
     }
 
@@ -805,8 +789,7 @@ RegionSetExtents (RegionPtr pReg)
 
     if (!pReg->data)
 	return;
-    if (!pReg->data->size)
-    {
+    if (!pReg->data->size) {
 	pReg->extents.x2 = pReg->extents.x1;
 	pReg->extents.y2 = pReg->extents.y1;
 	return;
@@ -856,7 +839,6 @@ RegionSetExtents (RegionPtr pReg)
  *-----------------------------------------------------------------------
  */
 /*ARGSUSED*/
-
 #define MERGERECT(r)						\
 {								\
     if (r->x1 <= x2) {						\
@@ -871,11 +853,9 @@ RegionSetExtents (RegionPtr pReg)
     }								\
     r++;							\
 }
-
 /*======================================================================
  *	    Region Union
  *====================================================================*/
-
 /*-
  *-----------------------------------------------------------------------
  * RegionUnionO --
@@ -892,15 +872,10 @@ RegionSetExtents (RegionPtr pReg)
  *-----------------------------------------------------------------------
  */
 static Bool
-RegionUnionO (
-    RegionPtr	pReg,
+RegionUnionO(RegionPtr pReg,
     BoxPtr	r1,
     BoxPtr  	r1End,
-    BoxPtr	r2,
-    BoxPtr  	r2End,
-    short	y1,
-    short	y2,
-    Bool	*pOverlap)
+             BoxPtr r2, BoxPtr r2End, short y1, short y2, Bool *pOverlap)
 {
     BoxPtr     pNextRect;
     int        x1;     /* left and right side of current union */
@@ -912,35 +887,31 @@ RegionUnionO (
     pNextRect = RegionTop(pReg);
 
     /* Start off current rectangle */
-    if (r1->x1 < r2->x1)
-    {
+    if (r1->x1 < r2->x1) {
 	x1 = r1->x1;
 	x2 = r1->x2;
 	r1++;
     }
-    else
-    {
+    else {
 	x1 = r2->x1;
 	x2 = r2->x2;
 	r2++;
     }
-    while (r1 != r1End && r2 != r2End)
-    {
-	if (r1->x1 < r2->x1) MERGERECT(r1) else MERGERECT(r2);
+    while (r1 != r1End && r2 != r2End) {
+        if (r1->x1 < r2->x1)
+            MERGERECT(r1)
+            else
+            MERGERECT(r2);
     }
 
     /* Finish off whoever (if any) is left */
-    if (r1 != r1End)
-    {
-	do
-	{
+    if (r1 != r1End) {
+        do {
 	    MERGERECT(r1);
 	} while (r1 != r1End);
     }
-    else if (r2 != r2End)
-    {
-	do
-	{
+    else if (r2 != r2End) {
+        do {
 	    MERGERECT(r2);
 	} while (r2 != r2End);
     }
@@ -982,8 +953,7 @@ RegionAppend(RegionPtr dstrgn, RegionPtr rgn)
     if (RegionNar(rgn))
 	return RegionBreak (dstrgn);
     
-    if (!rgn->data && (dstrgn->data == &RegionEmptyData))
-    {
+    if (!rgn->data && (dstrgn->data == &RegionEmptyData)) {
 	dstrgn->extents = rgn->extents;
 	dstrgn->data = NULL;
 	return TRUE;
@@ -1001,30 +971,26 @@ RegionAppend(RegionPtr dstrgn, RegionPtr rgn)
     old = RegionRects(rgn);
     if (!dnumRects)
 	dstrgn->extents = rgn->extents;
-    else if (dstrgn->extents.x2 > dstrgn->extents.x1)
-    {
+    else if (dstrgn->extents.x2 > dstrgn->extents.x1) {
 	BoxPtr first, last;
 
 	first = old;
 	last = RegionBoxptr(dstrgn) + (dnumRects - 1);
 	if ((first->y1 > last->y2) ||
 	    ((first->y1 == last->y1) && (first->y2 == last->y2) &&
-	     (first->x1 > last->x2)))
-	{
+             (first->x1 > last->x2))) {
 	    if (rgn->extents.x1 < dstrgn->extents.x1)
 		dstrgn->extents.x1 = rgn->extents.x1;
 	    if (rgn->extents.x2 > dstrgn->extents.x2)
 		dstrgn->extents.x2 = rgn->extents.x2;
 	    dstrgn->extents.y2 = rgn->extents.y2;
 	}
-	else
-	{
+        else {
 	    first = RegionBoxptr(dstrgn);
 	    last = old + (numRects - 1);
 	    if ((first->y1 > last->y2) ||
 		((first->y1 == last->y1) && (first->y2 == last->y2) &&
-		 (first->x1 > last->x2)))
-	    {
+                 (first->x1 > last->x2))) {
 		prepend = TRUE;
 		if (rgn->extents.x1 < dstrgn->extents.x1)
 		    dstrgn->extents.x1 = rgn->extents.x1;
@@ -1036,8 +1002,7 @@ RegionAppend(RegionPtr dstrgn, RegionPtr rgn)
 		dstrgn->extents.x2 = dstrgn->extents.x1;
 	}
     }
-    if (prepend)
-    {
+    if (prepend) {
 	new = RegionBox(dstrgn, numRects);
 	if (dnumRects == 1)
 	    *new = *RegionBoxptr(dstrgn);
@@ -1056,7 +1021,6 @@ RegionAppend(RegionPtr dstrgn, RegionPtr rgn)
     return TRUE;
 }
 
-   
 #define ExchangeRects(a, b) \
 {			    \
     BoxRec     t;	    \
@@ -1066,9 +1030,7 @@ RegionAppend(RegionPtr dstrgn, RegionPtr rgn)
 }
 
 static void
-QuickSortRects(
-    BoxRec     rects[],
-    int        numRects)
+QuickSortRects(BoxRec rects[], int numRects)
 {
     int	y1;
     int	x1;
@@ -1077,10 +1039,8 @@ QuickSortRects(
 
     /* Always called with numRects > 1 */
 
-    do
-    {
-	if (numRects == 2)
-	{
+    do {
+        if (numRects == 2) {
 	    if (rects[0].y1 > rects[1].y1 ||
 		    (rects[0].y1 == rects[1].y1 && rects[0].x1 > rects[1].x1))
 		ExchangeRects(0, 1);
@@ -1095,18 +1055,15 @@ QuickSortRects(
         /* Partition array */
         i = 0;
         j = numRects;
-        do
-	{
+        do {
 	    r = &(rects[i]);
-	    do
-	    {
+            do {
 		r++;
 		i++;
             } while (i != numRects &&
 		     (r->y1 < y1 || (r->y1 == y1 && r->x1 < x1)));
 	    r = &(rects[j]);
-	    do
-	    {
+            do {
 		r--;
 		j--;
             } while (y1 < r->y1 || (y1 == r->y1 && x1 < r->x1));
@@ -1180,28 +1137,23 @@ RegionValidate(RegionPtr badreg, Bool *pOverlap)
     Bool		ret = TRUE;
 
     *pOverlap = FALSE;
-    if (!badreg->data)
-    {
+    if (!badreg->data) {
 	good(badreg);
 	return TRUE;
     }
     numRects = badreg->data->numRects;
-    if (!numRects)
-    {
+    if (!numRects) {
 	if (RegionNar(badreg))
 	    return FALSE;
 	good(badreg);
 	return TRUE;
     }
-    if (badreg->extents.x1 < badreg->extents.x2)
-    {
-	if ((numRects) == 1)
-	{
+    if (badreg->extents.x1 < badreg->extents.x2) {
+        if ((numRects) == 1) {
 	    xfreeData(badreg);
 	    badreg->data = (RegDataPtr) NULL;
 	}
-	else
-	{
+        else {
 	    DOWNSIZE(badreg, numRects);
 	}
 	good(badreg);
@@ -1233,37 +1185,35 @@ RegionValidate(RegionPtr badreg, Bool *pOverlap)
        forget it.  Try the next region.  If it doesn't fit cleanly into any
        region, make a new one. */
 
-    for (i = numRects; --i > 0;)
-    {
+    for (i = numRects; --i > 0;) {
 	box++;
 	/* Look for a region to append box to */
-	for (j = numRI, rit = ri; --j >= 0; rit++)
-	{
+        for (j = numRI, rit = ri; --j >= 0; rit++) {
 	    reg = &rit->reg;
 	    riBox = RegionEnd(reg);
 
-	    if (box->y1 == riBox->y1 && box->y2 == riBox->y2)
-	    {
+            if (box->y1 == riBox->y1 && box->y2 == riBox->y2) {
 		/* box is in same band as riBox.  Merge or append it */
-		if (box->x1 <= riBox->x2)
-		{
+                if (box->x1 <= riBox->x2) {
 		    /* Merge it with riBox */
-		    if (box->x1 < riBox->x2) *pOverlap = TRUE;
-		    if (box->x2 > riBox->x2) riBox->x2 = box->x2;
+                    if (box->x1 < riBox->x2)
+                        *pOverlap = TRUE;
+                    if (box->x2 > riBox->x2)
+                        riBox->x2 = box->x2;
 		}
-		else
-		{
+                else {
 		    RECTALLOC_BAIL(reg, 1, bail);
 		    *RegionTop(reg) = *box;
 		    reg->data->numRects++;
 		}
 		goto NextRect;   /* So sue me */
 	    }
-	    else if (box->y1 >= riBox->y2)
-	    {
+            else if (box->y1 >= riBox->y2) {
 		/* Put box into new band */
-		if (reg->extents.x2 < riBox->x2) reg->extents.x2 = riBox->x2;
-		if (reg->extents.x1 > box->x1)   reg->extents.x1 = box->x1;
+                if (reg->extents.x2 < riBox->x2)
+                    reg->extents.x2 = riBox->x2;
+                if (reg->extents.x1 > box->x1)
+                    reg->extents.x1 = box->x1;
 		Coalesce(reg, rit->prevBand, rit->curBand);
 		rit->curBand = reg->data->numRects;
 		RECTALLOC_BAIL(reg, 1, bail);
@@ -1275,8 +1225,7 @@ RegionValidate(RegionPtr badreg, Bool *pOverlap)
 	} /* for j */
 
 	/* Uh-oh.  No regions were appropriate.  Create a new one. */
-	if (sizeRI == numRI)
-	{
+        if (sizeRI == numRI) {
 	    /* Oops, allocate space for new region information */
 	    sizeRI <<= 1;
 	    rit = (RegionInfo *) realloc(ri, sizeRI * sizeof(RegionInfo));
@@ -1298,26 +1247,24 @@ NextRect: ;
     /* Make a final pass over each region in order to Coalesce and set
        extents.x2 and extents.y2 */
 
-    for (j = numRI, rit = ri; --j >= 0; rit++)
-    {
+    for (j = numRI, rit = ri; --j >= 0; rit++) {
 	reg = &rit->reg;
 	riBox = RegionEnd(reg);
 	reg->extents.y2 = riBox->y2;
-	if (reg->extents.x2 < riBox->x2) reg->extents.x2 = riBox->x2;
+        if (reg->extents.x2 < riBox->x2)
+            reg->extents.x2 = riBox->x2;
 	Coalesce(reg, rit->prevBand, rit->curBand);
-	if (reg->data->numRects == 1) /* keep unions happy below */
-	{
+        if (reg->data->numRects == 1) { /* keep unions happy below */
 	    xfreeData(reg);
 	    reg->data = NULL;
 	}
     }
 
     /* Step 3: Union all regions into a single region */
-    while (numRI > 1)
-    {
+    while (numRI > 1) {
 	int half = numRI/2;
-	for (j = numRI & 1; j < (half + (numRI & 1)); j++)
-	{
+
+        for (j = numRI & 1; j < (half + (numRI & 1)); j++) {
 	    reg = &ri[j].reg;
 	    hreg = &ri[j+half].reg;
 	    if (!RegionOp(reg, reg, hreg, RegionUnionO, TRUE, TRUE, pOverlap))
@@ -1360,16 +1307,14 @@ RegionFromRects(int nrects, xRectangle *prect, int ctype)
 	return pRgn;
     if (!nrects)
 	return pRgn;
-    if (nrects == 1)
-    {
+    if (nrects == 1) {
 	x1 = prect->x;
 	y1 = prect->y;
 	if ((x2 = x1 + (int) prect->width) > MAXSHORT)
 	    x2 = MAXSHORT;
 	if ((y2 = y1 + (int) prect->height) > MAXSHORT)
 	    y2 = MAXSHORT;
-	if (x1 != x2 && y1 != y2)
-	{
+        if (x1 != x2 && y1 != y2) {
 	    pRgn->extents.x1 = x1;
 	    pRgn->extents.y1 = y1;
 	    pRgn->extents.x2 = x2;
@@ -1379,22 +1324,19 @@ RegionFromRects(int nrects, xRectangle *prect, int ctype)
 	return pRgn;
     }
     pData = xallocData(nrects);
-    if (!pData)
-    {
+    if (!pData) {
 	RegionBreak (pRgn);
 	return pRgn;
     }
     pBox = (BoxPtr) (pData + 1);
-    for (i = nrects; --i >= 0; prect++)
-    {
+    for (i = nrects; --i >= 0; prect++) {
 	x1 = prect->x;
 	y1 = prect->y;
 	if ((x2 = x1 + (int) prect->width) > MAXSHORT)
 	    x2 = MAXSHORT;
 	if ((y2 = y1 + (int) prect->height) > MAXSHORT)
 	    y2 = MAXSHORT;
-	if (x1 != x2 && y1 != y2)
-	{
+        if (x1 != x2 && y1 != y2) {
 	    pBox->x1 = x1;
 	    pBox->y1 = y1;
 	    pBox->x2 = x2;
@@ -1402,14 +1344,13 @@ RegionFromRects(int nrects, xRectangle *prect, int ctype)
 	    pBox++;
 	}
     }
-    if (pBox != (BoxPtr) (pData + 1))
-    {
+    if (pBox != (BoxPtr) (pData + 1)) {
 	pData->size = nrects;
 	pData->numRects = pBox - (BoxPtr) (pData + 1);
     	pRgn->data = pData;
-    	if (ctype != CT_YXBANDED)
-    	{
+        if (ctype != CT_YXBANDED) {
 	    Bool overlap; /* result ignored */
+
 	    pRgn->extents.x1 = pRgn->extents.x2 = 0;
 	    RegionValidate(pRgn, &overlap);
     	}
@@ -1417,8 +1358,7 @@ RegionFromRects(int nrects, xRectangle *prect, int ctype)
 	    RegionSetExtents(pRgn);
     	good(pRgn);
     }
-    else
-    {
+    else {
 	free(pData);
     }
     return pRgn;
