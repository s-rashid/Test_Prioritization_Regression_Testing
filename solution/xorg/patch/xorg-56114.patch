diff --git a/test/xi2/protocol-eventconvert.c b/test/xi2/protocol-eventconvert.c
index bf1493c..1188e8b 100644
--- a/test/xi2/protocol-eventconvert.c
+++ b/test/xi2/protocol-eventconvert.c
@@ -33,8 +33,8 @@
 #include "inpututils.h"
 #include <X11/extensions/XI2proto.h>
 
-static void test_values_XIRawEvent(RawDeviceEvent *in, xXIRawEvent *out,
-                                   BOOL swap)
+static void
+test_values_XIRawEvent(RawDeviceEvent *in, xXIRawEvent * out, BOOL swap)
 {
     int i;
     unsigned char *ptr;
@@ -44,8 +44,7 @@ static void test_values_XIRawEvent(RawDeviceEvent *in, xXIRawEvent *out,
     int len;
     uint32_t flagmask = 0;
 
-    if (swap)
-    {
+    if (swap) {
         swaps(&out->sequenceNumber);
         swapl(&out->length);
         swaps(&out->evtype);
@@ -56,14 +55,14 @@ static void test_values_XIRawEvent(RawDeviceEvent *in, xXIRawEvent *out,
         swapl(&out->flags);
     }
 
-
     assert(out->type == GenericEvent);
     assert(out->extension == 0); /* IReqCode defaults to 0 */
     assert(out->evtype == GetXI2Type(in->type));
     assert(out->time == in->time);
     assert(out->detail == in->detail.button);
     assert(out->deviceid == in->deviceid);
-    assert(out->valuators_len >= bytes_to_int32(bits_to_bytes(sizeof(in->valuators.mask))));
+    assert(out->valuators_len >=
+           bytes_to_int32(bits_to_bytes(sizeof(in->valuators.mask))));
 
     switch (in->type) {
     case ET_RawMotion:
@@ -79,8 +78,7 @@ static void test_values_XIRawEvent(RawDeviceEvent *in, xXIRawEvent *out,
     ptr = (unsigned char*)&out[1];
     bits_set = 0;
 
-    for (i = 0; out->valuators_len && i < sizeof(in->valuators.mask) * 8; i++)
-    {
+    for (i = 0; out->valuators_len && i < sizeof(in->valuators.mask) * 8; i++) {
         if (i >= MAX_VALUATORS)
             assert (!XIMaskIsSet(in->valuators.mask, i));
         assert (XIMaskIsSet(in->valuators.mask, i) == XIMaskIsSet(ptr, i));
@@ -96,21 +94,21 @@ static void test_values_XIRawEvent(RawDeviceEvent *in, xXIRawEvent *out,
 
     nvals = 0;
 
-    for (i = 0; out->valuators_len && i < MAX_VALUATORS; i++)
-    {
+    for (i = 0; out->valuators_len && i < MAX_VALUATORS; i++) {
         assert (XIMaskIsSet(in->valuators.mask, i) == XIMaskIsSet(ptr, i));
-        if (XIMaskIsSet(in->valuators.mask, i))
-        {
+        if (XIMaskIsSet(in->valuators.mask, i)) {
             FP3232 vi, vo;
-            value = (FP3232*)(((unsigned char*)&out[1]) + out->valuators_len * 4);
+
+            value =
+                (FP3232 *) (((unsigned char *) &out[1]) +
+                            out->valuators_len * 4);
             value += nvals;
 
             vi = double_to_fp3232(in->valuators.data[i]);
 
             vo.integral = value->integral;
             vo.frac = value->frac;
-            if (swap)
-            {
+            if (swap) {
                 swapl(&vo.integral);
                 swapl(&vo.frac);
             }
@@ -124,8 +122,7 @@ static void test_values_XIRawEvent(RawDeviceEvent *in, xXIRawEvent *out,
 
             vo.integral = raw_value->integral;
             vo.frac = raw_value->frac;
-            if (swap)
-            {
+            if (swap) {
                 swapl(&vo.integral);
                 swapl(&vo.frac);
             }
@@ -138,7 +135,8 @@ static void test_values_XIRawEvent(RawDeviceEvent *in, xXIRawEvent *out,
     }
 }
 
-static void test_XIRawEvent(RawDeviceEvent *in)
+static void
+test_XIRawEvent(RawDeviceEvent *in)
 {
     xXIRawEvent *out, *swapped;
     int rc;
@@ -156,7 +154,8 @@ static void test_XIRawEvent(RawDeviceEvent *in)
     free(swapped);
 }
 
-static void test_convert_XIFocusEvent(void)
+static void
+test_convert_XIFocusEvent(void)
 {
     xEvent *out;
     DeviceEvent in;
@@ -185,8 +184,8 @@ static void test_convert_XIFocusEvent(void)
     assert(rc == BadImplementation);
 }
 
-
-static void test_convert_XIRawEvent(void)
+static void
+test_convert_XIRawEvent(void)
 {
     RawDeviceEvent in;
     int i;
@@ -244,15 +243,13 @@ static void test_convert_XIRawEvent(void)
     in.deviceid = ~0 & 0xFF;
     test_XIRawEvent(&in);
 
-    for (i = 0; i < MAX_VALUATORS; i++)
-    {
+    for (i = 0; i < MAX_VALUATORS; i++) {
         XISetMask(in.valuators.mask, i);
         test_XIRawEvent(&in);
         XIClearMask(in.valuators.mask, i);
     }
 
-    for (i = 0; i < MAX_VALUATORS; i++)
-    {
+    for (i = 0; i < MAX_VALUATORS; i++) {
         XISetMask(in.valuators.mask, i);
 
         in.valuators.data[i] = i + (i * 0.0010);
@@ -261,15 +258,14 @@ static void test_convert_XIRawEvent(void)
         XIClearMask(in.valuators.mask, i);
     }
 
-    for (i = 0; i < MAX_VALUATORS; i++)
-    {
+    for (i = 0; i < MAX_VALUATORS; i++) {
         XISetMask(in.valuators.mask, i);
         test_XIRawEvent(&in);
     }
 }
 
-static void test_values_XIDeviceEvent(DeviceEvent *in, xXIDeviceEvent *out,
-                                      BOOL swap)
+static void
+test_values_XIDeviceEvent(DeviceEvent *in, xXIDeviceEvent * out, BOOL swap)
 {
     int buttons, valuators;
     int i;
@@ -346,10 +342,8 @@ static void test_values_XIDeviceEvent(DeviceEvent *in, xXIDeviceEvent *out,
     assert(out->root_y == FP1616(in->root_y, in->root_y_frac));
 
     buttons = 0;
-    for (i = 0; i < bits_to_bytes(sizeof(in->buttons)); i++)
-    {
-        if (XIMaskIsSet(in->buttons, i))
-        {
+    for (i = 0; i < bits_to_bytes(sizeof(in->buttons)); i++) {
+        if (XIMaskIsSet(in->buttons, i)) {
             assert(out->buttons_len >= bytes_to_int32(bits_to_bytes(i)));
             buttons++;
         }
@@ -359,7 +353,6 @@ static void test_values_XIDeviceEvent(DeviceEvent *in, xXIDeviceEvent *out,
     for (i = 0; i < sizeof(in->buttons) * 8; i++)
         assert(XIMaskIsSet(in->buttons, i) == XIMaskIsSet(ptr, i));
 
-
     valuators = 0;
     for (i = 0; i < MAX_VALUATORS; i++)
         if (XIMaskIsSet(in->valuators.mask, i))
@@ -370,8 +363,7 @@ static void test_values_XIDeviceEvent(DeviceEvent *in, xXIDeviceEvent *out,
     ptr += out->buttons_len * 4;
     values = (FP3232*)(ptr + out->valuators_len * 4);
     for (i = 0; i < sizeof(in->valuators.mask) * 8 ||
-                i < (out->valuators_len * 4) * 8; i++)
-    {
+         i < (out->valuators_len * 4) * 8; i++) {
         if (i >= MAX_VALUATORS)
             assert(!XIMaskIsSet(in->valuators.mask, i) && !XIMaskIsSet(ptr, i));
         else if (i > sizeof(in->valuators.mask) * 8)
@@ -379,23 +371,19 @@ static void test_values_XIDeviceEvent(DeviceEvent *in, xXIDeviceEvent *out,
         else if (i > out->valuators_len * 4 * 8)
             assert(!XIMaskIsSet(in->valuators.mask, i));
         else {
-            assert(XIMaskIsSet(in->valuators.mask, i) ==
-                     XIMaskIsSet(ptr, i));
+            assert(XIMaskIsSet(in->valuators.mask, i) == XIMaskIsSet(ptr, i));
 
-            if (XIMaskIsSet(ptr, i))
-            {
+            if (XIMaskIsSet(ptr, i)) {
                 FP3232 vi, vo;
 
                 vi = double_to_fp3232(in->valuators.data[i]);
                 vo = *values;
 
-                if (swap)
-                {
+                if (swap) {
                     swapl(&vo.integral);
                     swapl(&vo.frac);
                 }
 
-
                 assert(vi.integral == vo.integral);
                 assert(vi.frac == vo.frac);
                 values++;
@@ -404,7 +392,8 @@ static void test_values_XIDeviceEvent(DeviceEvent *in, xXIDeviceEvent *out,
     }
 }
 
-static void test_XIDeviceEvent(DeviceEvent *in)
+static void
+test_XIDeviceEvent(DeviceEvent *in)
 {
     xXIDeviceEvent *out, *swapped;
     int rc;
@@ -422,7 +411,8 @@ static void test_XIDeviceEvent(DeviceEvent *in)
     free(swapped);
 }
 
-static void test_convert_XIDeviceEvent(void)
+static void
+test_convert_XIDeviceEvent(void)
 {
     DeviceEvent in;
     int i;
@@ -599,28 +589,24 @@ static void test_convert_XIDeviceEvent(void)
     in.mods.effective = ~0 & 0xFF;
     test_XIDeviceEvent(&in);
 
-    for (i = 0; i < sizeof(in.buttons) * 8; i++)
-    {
+    for (i = 0; i < sizeof(in.buttons) * 8; i++) {
         XISetMask(in.buttons, i);
         test_XIDeviceEvent(&in);
         XIClearMask(in.buttons, i);
     }
 
-    for (i = 0; i < sizeof(in.buttons) * 8; i++)
-    {
+    for (i = 0; i < sizeof(in.buttons) * 8; i++) {
         XISetMask(in.buttons, i);
         test_XIDeviceEvent(&in);
     }
 
-    for (i = 0; i < MAX_VALUATORS; i++)
-    {
+    for (i = 0; i < MAX_VALUATORS; i++) {
         XISetMask(in.valuators.mask, i);
         test_XIDeviceEvent(&in);
         XIClearMask(in.valuators.mask, i);
     }
 
-    for (i = 0; i < MAX_VALUATORS; i++)
-    {
+    for (i = 0; i < MAX_VALUATORS; i++) {
         XISetMask(in.valuators.mask, i);
 
         in.valuators.data[i] = i + (i * 0.0020);
@@ -628,22 +614,20 @@ static void test_convert_XIDeviceEvent(void)
         XIClearMask(in.valuators.mask, i);
     }
 
-    for (i = 0; i < MAX_VALUATORS; i++)
-    {
+    for (i = 0; i < MAX_VALUATORS; i++) {
         XISetMask(in.valuators.mask, i);
         test_XIDeviceEvent(&in);
     }
 }
 
-static void test_values_XIDeviceChangedEvent(DeviceChangedEvent *in,
-                                             xXIDeviceChangedEvent *out,
-                                             BOOL swap)
+static void
+test_values_XIDeviceChangedEvent(DeviceChangedEvent *in,
+                                 xXIDeviceChangedEvent * out, BOOL swap)
 {
     int i, j;
     unsigned char *ptr;
 
-    if (swap)
-    {
+    if (swap) {
         swaps(&out->sequenceNumber);
         swapl(&out->length);
         swaps(&out->evtype);
@@ -661,26 +645,22 @@ static void test_values_XIDeviceChangedEvent(DeviceChangedEvent *in,
     assert(out->sourceid == in->sourceid);
 
     ptr = (unsigned char*)&out[1];
-    for (i = 0; i < out->num_classes; i++)
-    {
+    for (i = 0; i < out->num_classes; i++) {
         xXIAnyInfo* any = (xXIAnyInfo*)ptr;
 
-        if (swap)
-        {
+        if (swap) {
             swaps(&any->length);
             swaps(&any->type);
             swaps(&any->sourceid);
         }
 
-        switch(any->type)
-        {
+        switch (any->type) {
             case XIButtonClass:
                 {
                     xXIButtonInfo *b = (xXIButtonInfo*)any;
                     Atom *names;
 
-                    if (swap)
-                    {
+            if (swap) {
                         swaps(&b->num_buttons);
                     }
 
@@ -692,10 +672,8 @@ static void test_values_XIDeviceChangedEvent(DeviceChangedEvent *in,
 
                     names = (Atom*)((char*)&b[1] +
                             pad_to_int32(bits_to_bytes(b->num_buttons)));
-                    for (j = 0; j < b->num_buttons; j++)
-                    {
-                        if (swap)
-                        {
+            for (j = 0; j < b->num_buttons; j++) {
+                if (swap) {
                             swapl(&names[j]);
                         }
                         assert(names[j] == in->buttons.names[j]);
@@ -707,22 +685,18 @@ static void test_values_XIDeviceChangedEvent(DeviceChangedEvent *in,
                     xXIKeyInfo *k = (xXIKeyInfo*)any;
                     uint32_t *kc;
 
-                    if (swap)
-                    {
+            if (swap) {
                         swaps(&k->num_keycodes);
                     }
 
                     assert(k->length ==
-                            bytes_to_int32(sizeof(xXIKeyInfo)) +
-                            k->num_keycodes);
+                   bytes_to_int32(sizeof(xXIKeyInfo)) + k->num_keycodes);
                     assert(k->num_keycodes == in->keys.max_keycode -
                             in->keys.min_keycode + 1);
 
                     kc = (uint32_t*)&k[1];
-                    for (j = 0; j < k->num_keycodes; j++)
-                    {
-                        if (swap)
-                        {
+            for (j = 0; j < k->num_keycodes; j++) {
+                if (swap) {
                             swapl(&kc[j]);
                         }
                         assert(kc[j] >= in->keys.min_keycode);
@@ -733,30 +707,32 @@ static void test_values_XIDeviceChangedEvent(DeviceChangedEvent *in,
             case XIValuatorClass:
                 {
                     xXIValuatorInfo *v = (xXIValuatorInfo*)any;
-                    assert(v->length ==
-                             bytes_to_int32(sizeof(xXIValuatorInfo)));
+
+            assert(v->length == bytes_to_int32(sizeof(xXIValuatorInfo)));
 
                 }
                 break;
             case XIScrollClass:
                 {
                     xXIScrollInfo *s = (xXIScrollInfo*)any;
-                    assert(s->length ==
-                             bytes_to_int32(sizeof(xXIScrollInfo)));
+
+            assert(s->length == bytes_to_int32(sizeof(xXIScrollInfo)));
 
                     assert(s->sourceid == in->sourceid);
                     assert(s->number < in->num_valuators);
-                    switch(s->type)
-                    {
+            switch (s->type) {
                         case XIScrollTypeVertical:
-                            assert(in->valuators[s->number].scroll.type == SCROLL_TYPE_VERTICAL);
+                assert(in->valuators[s->number].scroll.type ==
+                       SCROLL_TYPE_VERTICAL);
                             break;
                         case XIScrollTypeHorizontal:
-                            assert(in->valuators[s->number].scroll.type == SCROLL_TYPE_HORIZONTAL);
+                assert(in->valuators[s->number].scroll.type ==
+                       SCROLL_TYPE_HORIZONTAL);
                             break;
                     }
                     if (s->flags & XIScrollFlagPreferred)
-                        assert(in->valuators[s->number].scroll.flags & SCROLL_FLAG_PREFERRED);
+                assert(in->valuators[s->number].scroll.
+                       flags & SCROLL_FLAG_PREFERRED);
                 }
             default:
                 printf("Invalid class type.\n\n");
@@ -769,7 +745,8 @@ static void test_values_XIDeviceChangedEvent(DeviceChangedEvent *in,
 
 }
 
-static void test_XIDeviceChangedEvent(DeviceChangedEvent *in)
+static void
+test_XIDeviceChangedEvent(DeviceChangedEvent *in)
 {
     xXIDeviceChangedEvent *out, *swapped;
     int rc;
@@ -787,7 +764,8 @@ static void test_XIDeviceChangedEvent(DeviceChangedEvent *in)
     free(swapped);
 }
 
-static void test_convert_XIDeviceChangedEvent(void)
+static void
+test_convert_XIDeviceChangedEvent(void)
 {
     DeviceChangedEvent in;
     int i;
@@ -801,7 +779,9 @@ static void test_convert_XIDeviceChangedEvent(void)
     in.sourceid         = 2;
     in.masterid         = 3;
     in.num_valuators    = 4;
-    in.flags = DEVCHANGE_SLAVE_SWITCH | DEVCHANGE_POINTER_EVENT | DEVCHANGE_KEYBOARD_EVENT;
+    in.flags =
+        DEVCHANGE_SLAVE_SWITCH | DEVCHANGE_POINTER_EVENT |
+        DEVCHANGE_KEYBOARD_EVENT;
 
     for (i = 0; i < MAX_BUTTONS; i++)
         in.buttons.names[i] = i + 10;
@@ -880,8 +860,7 @@ static void test_convert_XIDeviceChangedEvent(void)
     in.num_valuators = MAX_VALUATORS;
     test_XIDeviceChangedEvent(&in);
 
-    for (i = 0; i < MAX_VALUATORS; i++)
-    {
+    for (i = 0; i < MAX_VALUATORS; i++) {
         in.valuators[i].min = 0;
         in.valuators[i].max = 0;
         test_XIDeviceChangedEvent(&in);
@@ -917,11 +896,9 @@ static void test_convert_XIDeviceChangedEvent(void)
 
 static void
 test_values_XITouchOwnershipEvent(TouchOwnershipEvent *in,
-                                  xXITouchOwnershipEvent *out,
-                                  BOOL swap)
-{
-    if (swap)
+                                  xXITouchOwnershipEvent * out, BOOL swap)
     {
+    if (swap) {
         swaps(&out->sequenceNumber);
         swapl(&out->length);
         swaps(&out->evtype);
@@ -989,20 +966,17 @@ test_convert_XITouchOwnershipEvent(void)
     in.flags            = XIRejectTouch;
     test_XITouchOwnershipEvent(&in);
 
-    for (i = 1; i <= 0xFFFF; i <<= 1)
-    {
+    for (i = 1; i <= 0xFFFF; i <<= 1) {
         in.deviceid = i;
         test_XITouchOwnershipEvent(&in);
     }
 
-    for (i = 1; i <= 0xFFFF; i <<= 1)
-    {
+    for (i = 1; i <= 0xFFFF; i <<= 1) {
         in.sourceid = i;
         test_XITouchOwnershipEvent(&in);
     }
 
-    for (i = 1; ; i <<= 1)
-    {
+    for (i = 1;; i <<= 1) {
         in.touchid = i;
         test_XITouchOwnershipEvent(&in);
 	if (i == ((long)1 << 31))
@@ -1010,7 +984,8 @@ test_convert_XITouchOwnershipEvent(void)
     }
 }
 
-int main(int argc, char** argv)
+int
+main(int argc, char **argv)
 {
     test_convert_XIRawEvent();
     test_convert_XIFocusEvent();
