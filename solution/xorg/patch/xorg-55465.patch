diff --git a/hw/xfree86/ddc/print_edid.c b/hw/xfree86/ddc/print_edid.c
index 1faae1e..4f983f9 100644
--- a/hw/xfree86/ddc/print_edid.c
+++ b/hw/xfree86/ddc/print_edid.c
@@ -73,9 +73,11 @@ print_input_features(int scrnIndex, struct disp_features *c,
 	if (v->revision == 2 || v->revision == 3) {
 	    if (DFP1(c->input_dfp))
 		xf86DrvMsg(scrnIndex, X_INFO, "DFP 1.x compatible TMDS\n");
-	} else if (v->revision >= 4) {
+        }
+        else if (v->revision >= 4) {
 	    int interface = c->input_interface;
 	    int bpc = c->input_bpc;
+
 	    if (interface > 6)
 		interface = 6; /* unknown */
 	    if (bpc == 0 || bpc == 7)
@@ -86,7 +88,8 @@ print_input_features(int scrnIndex, struct disp_features *c,
 	    xf86DrvMsg(scrnIndex, X_INFO, "Digital interface is %s\n",
 		       digital_interfaces[interface]);
 	}
-    } else {
+    }
+    else {
 	xf86DrvMsg(scrnIndex,X_INFO,"Analog Display Input,  ");
 	xf86ErrorF("Input Voltage Level: ");
 	switch (c->input_voltage){
@@ -117,7 +120,8 @@ print_input_features(int scrnIndex, struct disp_features *c,
 	if (SYNC_SERR(c->input_sync)) 
 	    xf86ErrorF("Serration on. "
 		       "V.Sync Pulse req. if CompSync or SyncOnGreen\n");
-	else xf86ErrorF("\n");
+        else
+            xf86ErrorF("\n");
     }
 }
   
@@ -127,10 +131,14 @@ print_dpms_features(int scrnIndex, struct disp_features *c,
 {
      if (c->dpms) {
 	 xf86DrvMsg(scrnIndex,X_INFO,"DPMS capabilities:");
-	 if (DPMS_STANDBY(c->dpms)) xf86ErrorF(" StandBy");
-	 if (DPMS_SUSPEND(c->dpms)) xf86ErrorF(" Suspend");
-	 if (DPMS_OFF(c->dpms)) xf86ErrorF(" Off");
-     } else 
+        if (DPMS_STANDBY(c->dpms))
+            xf86ErrorF(" StandBy");
+        if (DPMS_SUSPEND(c->dpms))
+            xf86ErrorF(" Suspend");
+        if (DPMS_OFF(c->dpms))
+            xf86ErrorF(" Off");
+    }
+    else
 	 xf86DrvMsg(scrnIndex,X_INFO,"No DPMS capabilities specified");
     if (!c->input_type) { /* analog */
 	switch (c->display_type){
@@ -147,8 +155,10 @@ print_dpms_features(int scrnIndex, struct disp_features *c,
 		xf86ErrorF("\n");
 		break;
 	}
-    } else {
+    }
+    else {
 	int enc = c->display_type;
+
 	xf86ErrorF("\n");
 	xf86DrvMsg(scrnIndex, X_INFO, "Supported color encodings: "
 		   "RGB 4:4:4 %s%s\n",
@@ -166,7 +176,8 @@ print_dpms_features(int scrnIndex, struct disp_features *c,
 	if (v->revision >= 4)
 	    xf86DrvMsg(scrnIndex, X_INFO,
 		"Preferred mode is native pixel format and refresh rate\n");
-    } else if (v->revision == 3) {
+    }
+    else if (v->revision == 3) {
 	xf86DrvMsg(scrnIndex,X_INFO,
 		   "First detailed timing not preferred "
 		   "mode in violation of standard!\n");
@@ -176,7 +187,8 @@ print_dpms_features(int scrnIndex, struct disp_features *c,
 	if (GFT_SUPPORTED(c->msc)) {
 	    xf86DrvMsg(scrnIndex, X_INFO, "Display is continuous-frequency\n");
 	}
-    } else {
+    }
+    else {
 	if (GFT_SUPPORTED(c->msc))
 	    xf86DrvMsg(scrnIndex, X_INFO, "GTF timings supported\n"); 
     }
@@ -187,24 +199,22 @@ print_whitepoint(int scrnIndex, struct disp_features *disp)
 {
     xf86DrvMsg(scrnIndex,X_INFO,"redX: %.3f redY: %.3f   ",
 	       disp->redx,disp->redy);
-    xf86ErrorF("greenX: %.3f greenY: %.3f\n",
-	       disp->greenx,disp->greeny);
+    xf86ErrorF("greenX: %.3f greenY: %.3f\n", disp->greenx, disp->greeny);
     xf86DrvMsg(scrnIndex,X_INFO,"blueX: %.3f blueY: %.3f   ",
 	       disp->bluex,disp->bluey);
-    xf86ErrorF("whiteX: %.3f whiteY: %.3f\n",
-	       disp->whitex,disp->whitey);
+    xf86ErrorF("whiteX: %.3f whiteY: %.3f\n", disp->whitex, disp->whitey);
 }
 
 static void
-print_display(int scrnIndex, struct disp_features *disp,
-	      struct edid_version *v)
+print_display(int scrnIndex, struct disp_features *disp, struct edid_version *v)
 {
     print_input_features(scrnIndex, disp, v);
     if (disp->hsize && disp->vsize) {
 	xf86DrvMsg(scrnIndex, X_INFO, "Max Image Size [cm]: ");
 	xf86ErrorF("horiz.: %i  ", disp->hsize);
 	xf86ErrorF("vert.: %i\n", disp->vsize);
-    } else if (v->revision >= 4 && (disp->hsize || disp->vsize)) {
+    }
+    else if (v->revision >= 4 && (disp->hsize || disp->vsize)) {
 	if (disp->hsize)
 	    xf86DrvMsg(scrnIndex, X_INFO, "Aspect ratio: %.2f (landscape)\n",
 		       (disp->hsize + 99) / 100.0);
@@ -212,7 +222,8 @@ print_display(int scrnIndex, struct disp_features *disp,
 	    xf86DrvMsg(scrnIndex, X_INFO, "Aspect ratio: %.2f (portrait)\n",
 		       100.0 / (float)(disp->vsize + 99));
 
-    } else {
+    }
+    else {
 	xf86DrvMsg(scrnIndex, X_INFO, "Indeterminate output size\n");
     }
 
@@ -233,25 +244,42 @@ print_established_timings(int scrnIndex, struct established_timings *t)
     if (t->t1 || t->t2 || t->t_manu)
 	xf86DrvMsg(scrnIndex,X_INFO,"Supported established timings:\n");
     c=t->t1;
-    if (c&0x80) xf86DrvMsg(scrnIndex,X_INFO,"720x400@70Hz\n");
-    if (c&0x40) xf86DrvMsg(scrnIndex,X_INFO,"720x400@88Hz\n");
-    if (c&0x20) xf86DrvMsg(scrnIndex,X_INFO,"640x480@60Hz\n");
-    if (c&0x10) xf86DrvMsg(scrnIndex,X_INFO,"640x480@67Hz\n");
-    if (c&0x08) xf86DrvMsg(scrnIndex,X_INFO,"640x480@72Hz\n");
-    if (c&0x04) xf86DrvMsg(scrnIndex,X_INFO,"640x480@75Hz\n");
-    if (c&0x02) xf86DrvMsg(scrnIndex,X_INFO,"800x600@56Hz\n");
-    if (c&0x01) xf86DrvMsg(scrnIndex,X_INFO,"800x600@60Hz\n");
+    if (c & 0x80)
+        xf86DrvMsg(scrnIndex, X_INFO, "720x400@70Hz\n");
+    if (c & 0x40)
+        xf86DrvMsg(scrnIndex, X_INFO, "720x400@88Hz\n");
+    if (c & 0x20)
+        xf86DrvMsg(scrnIndex, X_INFO, "640x480@60Hz\n");
+    if (c & 0x10)
+        xf86DrvMsg(scrnIndex, X_INFO, "640x480@67Hz\n");
+    if (c & 0x08)
+        xf86DrvMsg(scrnIndex, X_INFO, "640x480@72Hz\n");
+    if (c & 0x04)
+        xf86DrvMsg(scrnIndex, X_INFO, "640x480@75Hz\n");
+    if (c & 0x02)
+        xf86DrvMsg(scrnIndex, X_INFO, "800x600@56Hz\n");
+    if (c & 0x01)
+        xf86DrvMsg(scrnIndex, X_INFO, "800x600@60Hz\n");
     c=t->t2;
-    if (c&0x80) xf86DrvMsg(scrnIndex,X_INFO,"800x600@72Hz\n");
-    if (c&0x40) xf86DrvMsg(scrnIndex,X_INFO,"800x600@75Hz\n");
-    if (c&0x20) xf86DrvMsg(scrnIndex,X_INFO,"832x624@75Hz\n");
-    if (c&0x10) xf86DrvMsg(scrnIndex,X_INFO,"1024x768@87Hz (interlaced)\n");
-    if (c&0x08) xf86DrvMsg(scrnIndex,X_INFO,"1024x768@60Hz\n");
-    if (c&0x04) xf86DrvMsg(scrnIndex,X_INFO,"1024x768@70Hz\n");
-    if (c&0x02) xf86DrvMsg(scrnIndex,X_INFO,"1024x768@75Hz\n");
-    if (c&0x01) xf86DrvMsg(scrnIndex,X_INFO,"1280x1024@75Hz\n");
+    if (c & 0x80)
+        xf86DrvMsg(scrnIndex, X_INFO, "800x600@72Hz\n");
+    if (c & 0x40)
+        xf86DrvMsg(scrnIndex, X_INFO, "800x600@75Hz\n");
+    if (c & 0x20)
+        xf86DrvMsg(scrnIndex, X_INFO, "832x624@75Hz\n");
+    if (c & 0x10)
+        xf86DrvMsg(scrnIndex, X_INFO, "1024x768@87Hz (interlaced)\n");
+    if (c & 0x08)
+        xf86DrvMsg(scrnIndex, X_INFO, "1024x768@60Hz\n");
+    if (c & 0x04)
+        xf86DrvMsg(scrnIndex, X_INFO, "1024x768@70Hz\n");
+    if (c & 0x02)
+        xf86DrvMsg(scrnIndex, X_INFO, "1024x768@75Hz\n");
+    if (c & 0x01)
+        xf86DrvMsg(scrnIndex, X_INFO, "1280x1024@75Hz\n");
     c=t->t_manu;
-    if (c&0x80) xf86DrvMsg(scrnIndex,X_INFO,"1152x864@75Hz\n");
+    if (c & 0x80)
+        xf86DrvMsg(scrnIndex, X_INFO, "1152x864@75Hz\n");
     xf86DrvMsg(scrnIndex,X_INFO,"Manufacturer's mask: %X\n",c&0x7F);
 }
   
@@ -260,6 +288,7 @@ print_std_timings(int scrnIndex, struct std_timings *t)
 {
     int i;
     char done = 0;
+
     for (i=0;i<STD_TIMINGS;i++) {
 	if (t[i].hsize > 256) {  /* sanity check */
 	    if (!done) {
@@ -287,7 +316,9 @@ print_cvt_timings(int si, struct cvt_timings *t)
 		    t[i].rates & 0x04 ? "75," : "",
 		    t[i].rates & 0x02 ? "85," : "",
 		    t[i].rates & 0x01 ? "60RB" : "");
-	} else break;
+        }
+        else
+            break;
     }
 }
 
@@ -297,7 +328,8 @@ print_detailed_timings(int scrnIndex, struct detailed_timings *t)
 
     if (t->clock > 15000000) {  /* sanity check */
 	xf86DrvMsg(scrnIndex,X_INFO,"Supported detailed timing:\n");
-	xf86DrvMsg(scrnIndex,X_INFO,"clock: %.1f MHz   ",t->clock/1000000.0);
+        xf86DrvMsg(scrnIndex, X_INFO, "clock: %.1f MHz   ",
+                   t->clock / 1000000.0);
 	xf86ErrorF("Image Size:  %i x %i mm\n",t->h_size,t->v_size); 
 	xf86DrvMsg(scrnIndex,X_INFO,
 		   "h_active: %i  h_sync: %i  h_sync_end %i h_blank_end %i ",
@@ -318,7 +350,8 @@ print_detailed_timings(int scrnIndex, struct detailed_timings *t)
 		    xf86ErrorF("right channel on sync\n");
 		else
 		    xf86ErrorF("left channel on sync\n");
-	    } else if (IS_LEFT_STEREO(t->stereo)) {
+            }
+            else if (IS_LEFT_STEREO(t->stereo)) {
 		if (!t->stereo_1)
 		    xf86ErrorF("right channel on even line\n");
 		else 
@@ -344,8 +377,7 @@ struct det_print_parameter{
 };
 
 static void
-handle_detailed_print(struct detailed_monitor_section *det_mon,
-                      void *data)
+handle_detailed_print(struct detailed_monitor_section *det_mon, void *data)
 {
     int j, scrnIndex;
     struct det_print_parameter *p;
@@ -353,25 +385,27 @@ handle_detailed_print(struct detailed_monitor_section *det_mon,
     p = (struct det_print_parameter *)data;
     scrnIndex = p->m->scrnIndex;
     xf86DetTimingApplyQuirks(det_mon,p->quirks,
-                             p->m->features.hsize,
-                             p->m->features.vsize);
+                             p->m->features.hsize, p->m->features.vsize);
 
     switch (det_mon->type) {
     case DT:
         print_detailed_timings(scrnIndex,&det_mon->section.d_timings);
         break;
     case DS_SERIAL:
-        xf86DrvMsg(scrnIndex,X_INFO,"Serial No: %s\n",det_mon->section.serial);
+        xf86DrvMsg(scrnIndex, X_INFO, "Serial No: %s\n",
+                   det_mon->section.serial);
         break;
     case DS_ASCII_STR:
         xf86DrvMsg(scrnIndex,X_INFO," %s\n",det_mon->section.ascii_data);
         break;
     case DS_NAME:
-        xf86DrvMsg(scrnIndex,X_INFO,"Monitor name: %s\n",det_mon->section.name);
+        xf86DrvMsg(scrnIndex, X_INFO, "Monitor name: %s\n",
+                   det_mon->section.name);
         break;
     case DS_RANGES:
     {
         struct monitor_ranges *r = &det_mon->section.ranges;
+
         xf86DrvMsg(scrnIndex,X_INFO,
                    "Ranges: V min: %i V max: %i Hz, H min: %i H max: %i kHz,",
                    r->min_v, r->max_v, r->min_h, r->max_h);
@@ -383,19 +417,24 @@ handle_detailed_print(struct detailed_monitor_section *det_mon,
 	xf86DrvMsg(scrnIndex, X_INFO, "Supported aspect ratios:");
 	if (r->supported_aspect & SUPPORTED_ASPECT_4_3)
 	    xf86ErrorF(" 4:3%s",
-                       r->preferred_aspect == PREFERRED_ASPECT_4_3?"*":"");
+                           r->preferred_aspect ==
+                           PREFERRED_ASPECT_4_3 ? "*" : "");
 	if (r->supported_aspect & SUPPORTED_ASPECT_16_9)
 	    xf86ErrorF(" 16:9%s",
-                       r->preferred_aspect == PREFERRED_ASPECT_16_9?"*":"");
+                           r->preferred_aspect ==
+                           PREFERRED_ASPECT_16_9 ? "*" : "");
         if (r->supported_aspect & SUPPORTED_ASPECT_16_10)
             xf86ErrorF(" 16:10%s",
-                       r->preferred_aspect == PREFERRED_ASPECT_16_10?"*":"");
+                           r->preferred_aspect ==
+                           PREFERRED_ASPECT_16_10 ? "*" : "");
 	if (r->supported_aspect & SUPPORTED_ASPECT_5_4)
 	    xf86ErrorF(" 5:4%s",
-                       r->preferred_aspect == PREFERRED_ASPECT_5_4?"*":"");
+                           r->preferred_aspect ==
+                           PREFERRED_ASPECT_5_4 ? "*" : "");
 	if (r->supported_aspect & SUPPORTED_ASPECT_15_9)
 	    xf86ErrorF(" 15:9%s",
-                       r->preferred_aspect == PREFERRED_ASPECT_15_9?"*":"");
+                           r->preferred_aspect ==
+                           PREFERRED_ASPECT_15_9 ? "*" : "");
         xf86ErrorF("\n");
 	xf86DrvMsg(scrnIndex, X_INFO, "Supported blankings:");
 	if (r->supported_blanking & CVT_STANDARD)
@@ -419,16 +458,17 @@ handle_detailed_print(struct detailed_monitor_section *det_mon,
 	else
 	    xf86DrvMsg(scrnIndex, X_INFO, "Buggy monitor, no preferred "
 		       "refresh rate given\n");
-        } else if (r->max_clock != 0) {
+        }
+        else if (r->max_clock != 0) {
 	    xf86ErrorF(" PixClock max %i MHz\n", r->max_clock);
-        } else {
+        }
+        else {
 	    xf86ErrorF("\n");
         }
         if (r->gtf_2nd_f > 0)
             xf86DrvMsg(scrnIndex,X_INFO," 2nd GTF parameters: f: %i kHz "
                        "c: %i m: %i k %i j %i\n", r->gtf_2nd_f,
-                       r->gtf_2nd_c, r->gtf_2nd_m, r->gtf_2nd_k,
-                       r->gtf_2nd_j);
+                       r->gtf_2nd_c, r->gtf_2nd_m, r->gtf_2nd_k, r->gtf_2nd_j);
         break;
     }
     case DS_STD_TIMINGS:
@@ -445,17 +485,16 @@ handle_detailed_print(struct detailed_monitor_section *det_mon,
         if (det_mon->section.wp[j].index != 0)
             xf86DrvMsg(scrnIndex,X_INFO,
                        "White point %i: whiteX: %f, whiteY: %f; gamma: %f\n",
-                       det_mon->section.wp[j].index,det_mon->section.wp[j].white_x,
+                           det_mon->section.wp[j].index,
+                           det_mon->section.wp[j].white_x,
                        det_mon->section.wp[j].white_y,
                        det_mon->section.wp[j].white_gamma);
         break;
     case DS_CMD:
-        xf86DrvMsg(scrnIndex, X_INFO,
-                   "Color management data: (not decoded)\n");
+        xf86DrvMsg(scrnIndex, X_INFO, "Color management data: (not decoded)\n");
         break;
     case DS_CVT:
-        xf86DrvMsg(scrnIndex, X_INFO,
-                   "CVT 3-byte-code modes:\n");
+        xf86DrvMsg(scrnIndex, X_INFO, "CVT 3-byte-code modes:\n");
         print_cvt_timings(scrnIndex, det_mon->section.cvt);
         break;
     case DS_EST_III:
@@ -490,7 +529,8 @@ xf86PrintEDID(xf86MonPtr m)
     char buf[EDID_WIDTH * 2 + 1];
     struct det_print_parameter p;
 
-    if (!m) return NULL;
+    if (!m)
+        return NULL;
 
     print_vendor(m->scrnIndex, &m->vendor);
     print_version(m->scrnIndex, &m->ver);
@@ -500,9 +540,7 @@ xf86PrintEDID(xf86MonPtr m)
     p.m = m;
     p.index = 0;
     p.quirks = xf86DDCDetectQuirks(m->scrnIndex, m, FALSE);
-    xf86ForEachDetailedBlock(m,
-                             handle_detailed_print ,
-                             &p);
+    xf86ForEachDetailedBlock(m, handle_detailed_print, &p);
     print_number_sections(m->scrnIndex, m->no_sections);
 
     /* extension block section stuff */
