diff --git a/exa/exa.c b/exa/exa.c
index f7eea73..6dfde4c 100644
--- a/exa/exa.c
+++ b/exa/exa.c
@@ -67,7 +67,7 @@ ExaGetPixmapAddress(PixmapPtr p)
  * support for having multiple card-accessible offscreen, such as an AGP memory
  * pool alongside the framebuffer pool.
  */
-_X_EXPORT unsigned long
+unsigned long
 exaGetPixmapOffset(PixmapPtr pPix)
 {
     ExaScreenPriv (pPix->drawable.pScreen);
@@ -76,7 +76,7 @@ exaGetPixmapOffset(PixmapPtr pPix)
 	    (unsigned long)pExaScr->info->memoryBase);
 }
 
-_X_EXPORT void *
+void *
 exaGetPixmapDriverPrivate(PixmapPtr pPix)
 {
     ExaPixmapPriv(pPix);
@@ -90,7 +90,7 @@ exaGetPixmapDriverPrivate(PixmapPtr pPix)
  * This is a helper to make driver code more obvious, due to the rather obscure
  * naming of the pitch field in the pixmap.
  */
-_X_EXPORT unsigned long
+unsigned long
 exaGetPixmapPitch(PixmapPtr pPix)
 {
     return pPix->devKind;
@@ -100,7 +100,7 @@ exaGetPixmapPitch(PixmapPtr pPix)
  * exaGetPixmapSize() returns the size in bytes of the given pixmap in video
  * memory. Only valid when the pixmap is currently in framebuffer.
  */
-_X_EXPORT unsigned long
+unsigned long
 exaGetPixmapSize(PixmapPtr pPix)
 {
     ExaPixmapPrivPtr pExaPixmap;
@@ -463,7 +463,7 @@ exaPixmapIsOffscreen(PixmapPtr p)
 /**
  * exaDrawableIsOffscreen() is a convenience wrapper for exaPixmapIsOffscreen().
  */
-_X_EXPORT Bool
+Bool
 exaDrawableIsOffscreen (DrawablePtr pDrawable)
 {
     return exaPixmapIsOffscreen (exaGetDrawablePixmap (pDrawable));
@@ -776,7 +776,7 @@ exaCloseScreen(int i, ScreenPtr pScreen)
  *
  * @return a newly allocated, zero-filled driver structure
  */
-_X_EXPORT ExaDriverPtr
+ExaDriverPtr
 exaDriverAlloc(void)
 {
     return xcalloc(1, sizeof(ExaDriverRec));
@@ -792,7 +792,7 @@ exaDriverAlloc(void)
  *
  * @return TRUE if EXA was successfully initialized.
  */
-_X_EXPORT Bool
+Bool
 exaDriverInit (ScreenPtr		pScreen,
                ExaDriverPtr	pScreenInfo)
 {
@@ -1012,7 +1012,7 @@ exaDriverInit (ScreenPtr		pScreen,
  *
  * @param pScreen screen being torn down.
  */
-_X_EXPORT void
+void
 exaDriverFini (ScreenPtr pScreen)
 {
     /*right now does nothing*/
@@ -1029,7 +1029,7 @@ exaDriverFini (ScreenPtr pScreen)
  * driver MarkSync() callback, the return value of which may be used to do partial
  * synchronization with the hardware in the future.
  */
-_X_EXPORT void exaMarkSync(ScreenPtr pScreen)
+void exaMarkSync(ScreenPtr pScreen)
 {
     ExaScreenPriv(pScreen);
 
@@ -1048,7 +1048,7 @@ _X_EXPORT void exaMarkSync(ScreenPtr pScreen)
  * It should always be called before relying on the framebuffer contents
  * reflecting previous drawing, from a CPU perspective.
  */
-_X_EXPORT void exaWaitSync(ScreenPtr pScreen)
+void exaWaitSync(ScreenPtr pScreen)
 {
     ExaScreenPriv(pScreen);
 
