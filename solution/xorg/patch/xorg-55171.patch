diff --git a/glx/glxdri2.c b/glx/glxdri2.c
index 5e524db..aa38295 100644
--- a/glx/glxdri2.c
+++ b/glx/glxdri2.c
@@ -259,8 +259,7 @@ __glXDRIcontextMakeCurrent(__GLXcontext *baseContext)
     __GLXDRIscreen *screen = (__GLXDRIscreen *) context->base.pGlxScreen;
 
     return (*screen->core->bindContext)(context->driContext,
-					draw->driDrawable,
-					read->driDrawable);
+                                         draw->driDrawable, read->driDrawable);
 }					      
 
 static int
@@ -300,8 +299,7 @@ __glXDRIcontextWait(__GLXcontext *baseContext,
 
 static int
 __glXDRIbindTexImage(__GLXcontext *baseContext,
-		     int buffer,
-		     __GLXdrawable *glxPixmap)
+                     int buffer, __GLXdrawable * glxPixmap)
 {
     __GLXDRIdrawable *drawable = (__GLXDRIdrawable *) glxPixmap;
     const __DRItexBufferExtension *texBuffer = drawable->screen->texBuffer;
@@ -314,14 +312,13 @@ __glXDRIbindTexImage(__GLXcontext *baseContext,
     if (texBuffer->base.version >= 2 && texBuffer->setTexBuffer2 != NULL) {
 	(*texBuffer->setTexBuffer2)(context->driContext,
 				    glxPixmap->target,
-				    glxPixmap->format,
-				    drawable->driDrawable);
-    } else
+                                     glxPixmap->format, drawable->driDrawable);
+    }
+    else
 #endif
     {
 	texBuffer->setTexBuffer(context->driContext,
-				glxPixmap->target,
-				drawable->driDrawable);
+                                glxPixmap->target, drawable->driDrawable);
     }
 
     return Success;
@@ -329,8 +326,7 @@ __glXDRIbindTexImage(__GLXcontext *baseContext,
 
 static int
 __glXDRIreleaseTexImage(__GLXcontext *baseContext,
-			int buffer,
-			__GLXdrawable *pixmap)
+                        int buffer, __GLXdrawable * pixmap)
 {
     /* FIXME: Just unbind the texture? */
     return Success;
@@ -340,16 +336,14 @@ __glXDRIreleaseTexImage(__GLXcontext *baseContext,
 
 static int
 __glXDRIbindTexImage(__GLXcontext *baseContext,
-		     int buffer,
-		     __GLXdrawable *glxPixmap)
+                     int buffer, __GLXdrawable * glxPixmap)
 {
     return Success;
 }
 
 static int
 __glXDRIreleaseTexImage(__GLXcontext *baseContext,
-			int buffer,
-			__GLXdrawable *pixmap)
+                        int buffer, __GLXdrawable * pixmap)
 {
     return Success;
 }
@@ -439,9 +433,7 @@ __glXDRIscreenCreateDrawable(ClientPtr client,
 			     __GLXscreen *screen,
 			     DrawablePtr pDraw,
 			     XID drawId,
-			     int type,
-			     XID glxDrawId,
-			     __GLXconfig *glxConfig)
+                             int type, XID glxDrawId, __GLXconfig * glxConfig)
 {
     __GLXDRIscreen *driScreen = (__GLXDRIscreen *) screen;
     __GLXDRIconfig *config = (__GLXDRIconfig *) glxConfig;
@@ -645,19 +637,17 @@ initializeExtensions(__GLXDRIscreen *screen)
 
     extensions = screen->core->getExtensions(screen->driScreen);
 
-    __glXEnableExtension(screen->glx_enable_bits,
-			 "GLX_MESA_copy_sub_buffer");
+    __glXEnableExtension(screen->glx_enable_bits, "GLX_MESA_copy_sub_buffer");
     LogMessage(X_INFO, "AIGLX: enabled GLX_MESA_copy_sub_buffer\n");
 
     __glXEnableExtension(screen->glx_enable_bits, "GLX_INTEL_swap_event");
     LogMessage(X_INFO, "AIGLX: enabled GLX_INTEL_swap_event\n");
 
     if (DRI2HasSwapControl(pScreen)) {
-	__glXEnableExtension(screen->glx_enable_bits,
-			     "GLX_SGI_swap_control");
-	__glXEnableExtension(screen->glx_enable_bits,
-			     "GLX_MESA_swap_control");
-	LogMessage(X_INFO, "AIGLX: enabled GLX_SGI_swap_control and GLX_MESA_swap_control\n");
+        __glXEnableExtension(screen->glx_enable_bits, "GLX_SGI_swap_control");
+        __glXEnableExtension(screen->glx_enable_bits, "GLX_MESA_swap_control");
+        LogMessage(X_INFO,
+                   "AIGLX: enabled GLX_SGI_swap_control and GLX_MESA_swap_control\n");
     }
 
     for (i = 0; extensions[i]; i++) {
@@ -672,10 +662,10 @@ initializeExtensions(__GLXDRIscreen *screen)
 
 #ifdef __DRI_TEX_BUFFER
 	if (strcmp(extensions[i]->name, __DRI_TEX_BUFFER) == 0) {
-	    screen->texBuffer =
-		(const __DRItexBufferExtension *) extensions[i];
+            screen->texBuffer = (const __DRItexBufferExtension *) extensions[i];
 	    /* GLX_EXT_texture_from_pixmap is always enabled. */
-	    LogMessage(X_INFO, "AIGLX: GLX_EXT_texture_from_pixmap backed by buffer objects\n");
+            LogMessage(X_INFO,
+                       "AIGLX: GLX_EXT_texture_from_pixmap backed by buffer objects\n");
 	}
 #endif
 
@@ -718,7 +708,8 @@ __glXDRIscreenProbe(ScreenPtr pScreen)
 
     __glXInitExtensionEnableBits(screen->glx_enable_bits);
 
-    screen->driver = glxProbeDriver(driverName, (void **)&screen->core, __DRI_CORE, 1,
+    screen->driver =
+        glxProbeDriver(driverName, (void **) &screen->core, __DRI_CORE, 1,
 				    (void **)&screen->dri2, __DRI_DRI2, 1);
     if (screen->driver == NULL) {
         goto handle_error;
@@ -728,12 +719,10 @@ __glXDRIscreenProbe(ScreenPtr pScreen)
 	(*screen->dri2->createNewScreen)(pScreen->myNum,
 					 screen->fd,
 					 loader_extensions,
-					 &screen->driConfigs,
-					 screen);
+                                          &screen->driConfigs, screen);
 
     if (screen->driScreen == NULL) {
-	LogMessage(X_ERROR,
-		   "AIGLX error: Calling driver entry point failed\n");
+        LogMessage(X_ERROR, "AIGLX error: Calling driver entry point failed\n");
 	goto handle_error;
     }
 
@@ -776,8 +765,7 @@ __glXDRIscreenProbe(ScreenPtr pScreen)
     screen->leaveVT = pScrn->LeaveVT;
     pScrn->LeaveVT = glxDRILeaveVT;
 
-    LogMessage(X_INFO,
-	       "AIGLX: Loaded and initialized %s\n", driverName);
+    LogMessage(X_INFO, "AIGLX: Loaded and initialized %s\n", driverName);
 
     return &screen->base;
 
