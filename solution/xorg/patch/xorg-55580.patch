diff --git a/hw/xfree86/os-support/linux/lnx_video.c b/hw/xfree86/os-support/linux/lnx_video.c
index 0d91f7a..3526a21 100644
--- a/hw/xfree86/os-support/linux/lnx_video.c
+++ b/hw/xfree86/os-support/linux/lnx_video.c
@@ -81,6 +81,7 @@ extern int iopl(int __level);
 
 static pointer mapVidMem(int, unsigned long, unsigned long, int);
 static void unmapVidMem(int, pointer, unsigned long);
+
 #if defined (__alpha__) 
 extern void sethae(unsigned long hae);
 extern unsigned long _bus_base __P ((void)) __attribute__ ((const));
@@ -152,7 +153,6 @@ struct mtrr_wc_region {
 	struct mtrr_wc_region *	next;
 };
 
-
 static struct mtrr_wc_region *
 mtrr_cull_wc_region(int screenNum, unsigned long base, unsigned long size,
 		      MessageType from)
@@ -170,11 +170,9 @@ mtrr_cull_wc_region(int screenNum, unsigned long base, unsigned long size,
 		return NULL;
 
 	for (gent.regnum = 0; 
-	     ioctl(mtrr_fd, MTRRIOC_GET_ENTRY, &gent) >= 0;
-	     gent.regnum++) {
+         ioctl(mtrr_fd, MTRRIOC_GET_ENTRY, &gent) >= 0; gent.regnum++) {
 		if (gent.type != MTRR_TYPE_WRCOMB
-		    || gent.base + gent.size <= base
-		    || base + size <= gent.base)
+            || gent.base + gent.size <= base || base + size <= gent.base)
 			continue;
 
 		/* Found an overlapping region. Delete it. */
@@ -199,7 +197,8 @@ mtrr_cull_wc_region(int screenNum, unsigned long base, unsigned long size,
 			wcr->next = wcreturn;
 			wcreturn = wcr;
 			gent.regnum--;
-		} else {
+        }
+        else {
 			free(wcr);
 			xf86DrvMsgVerb(screenNum, X_WARNING, 0,
 				   "Failed to remove MMIO "
@@ -210,7 +209,6 @@ mtrr_cull_wc_region(int screenNum, unsigned long base, unsigned long size,
 	return wcreturn;
 }
 
-
 static struct mtrr_wc_region *
 mtrr_remove_offending(int screenNum, unsigned long base, unsigned long size,
 		      MessageType from)
@@ -228,7 +226,8 @@ mtrr_remove_offending(int screenNum, unsigned long base, unsigned long size,
 	    && ((gent.base >= base && gent.base + gent.size < base + size) || 
 		(gent.base >  base && gent.base + gent.size <= base + size))) {
 	    *wcr = mtrr_cull_wc_region(screenNum, gent.base, gent.size, from);
-	    if (*wcr) gent.regnum--;
+            if (*wcr)
+                gent.regnum--;
 	    while(*wcr) {
 		wcr = &((*wcr)->next);
 	    }
@@ -237,7 +236,6 @@ mtrr_remove_offending(int screenNum, unsigned long base, unsigned long size,
     return wcreturn;
 }
 
-
 static struct mtrr_wc_region *
 mtrr_add_wc_region(int screenNum, unsigned long base, unsigned long size,
 		   MessageType from)
@@ -303,8 +301,7 @@ mtrr_add_wc_region(int screenNum, unsigned long base, unsigned long size,
 		/* Avoid printing on every VT switch */
 		if (xf86ServerIsInitialising()) {
 			xf86DrvMsg(screenNum, from,
-				   "Write-combining range (0x%lx,0x%lx)\n",
-				   base, size);
+                       "Write-combining range (0x%lx,0x%lx)\n", base, size);
 		}
 		return wcreturn;
 	}
@@ -376,7 +373,8 @@ xf86OSInitVidMem(VidMemInfoPtr pVidMem)
 	  xf86Msg(X_INFO,"Machine needs sparse mapping\n");
 	  pVidMem->mapMem = mapVidMemSparse;
 	  pVidMem->unmapMem = unmapVidMemSparse;
-	} else {
+    }
+    else {
 	  xf86Msg(X_INFO,"Machine type has 8/16 bit access\n");
 	  pVidMem->mapMem = mapVidMem;
 	  pVidMem->unmapMem = unmapVidMem;
@@ -386,7 +384,6 @@ xf86OSInitVidMem(VidMemInfoPtr pVidMem)
 	pVidMem->unmapMem = unmapVidMem;
 #endif /* __alpha__ */
 
-
 #ifdef HAS_MTRR_SUPPORT
 	pVidMem->setWC = setWC;
 	pVidMem->undoWC = undoWC;
@@ -398,7 +395,8 @@ xf86OSInitVidMem(VidMemInfoPtr pVidMem)
 /* Basically, you simply cannot do this on Sparc.  You have to do something portable
  * like use /dev/fb* or mmap() on /proc/bus/pci/X/Y nodes. -DaveM
  */
-static pointer mapVidMem(int ScreenNum, unsigned long Base, unsigned long Size, int flags)
+static pointer
+mapVidMem(int ScreenNum, unsigned long Base, unsigned long Size, int flags)
 {
 	return NULL;
 }
@@ -437,8 +435,7 @@ mapVidMem(int ScreenNum, unsigned long Base, unsigned long Size, int flags)
 #else
     fd = open(DEV_MEM, (flags & VIDMEM_READONLY) ? O_RDONLY : O_RDWR);
 #endif
-    if (fd < 0)
-    {
+    if (fd < 0) {
 	FatalError("xf86MapVidMem: failed to open " DEV_MEM " (%s)\n",
 		   strerror(errno));
     }
@@ -454,8 +451,7 @@ mapVidMem(int ScreenNum, unsigned long Base, unsigned long Size, int flags)
     close(fd);
     if (base == MAP_FAILED) {
         FatalError("xf86MapVidMem: Could not mmap framebuffer"
-		   " (0x%08lx,0x%lx) (%s)\n", Base, Size,
-		   strerror(errno));
+                   " (0x%08lx,0x%lx) (%s)\n", Base, Size, strerror(errno));
     }
     DebugF("base: %lx aligned base: %lx\n",base, (char *)base + alignOff);
     return (char *)base + alignOff;
@@ -472,7 +468,6 @@ unmapVidMem(int ScreenNum, pointer Base, unsigned long Size)
     munmap((void *)((uintptr_t)Base - alignOff), (Size + alignOff));
 }
 
-
 /***************************************************************************/
 /* I/O Permissions section                                                 */
 /***************************************************************************/
@@ -503,8 +498,8 @@ xf86EnableIO(void)
 	fd = open("/dev/mem", O_RDWR);
 	if (ioBase == NULL) {
 		ioBase = (volatile unsigned char *)mmap(0, 0x20000,
-				PROT_READ | PROT_WRITE, MAP_SHARED, fd,
-				ioBase_phys);
+                                                 PROT_READ | PROT_WRITE,
+                                                 MAP_SHARED, fd, ioBase_phys);
 /* Should this be fatal or just a warning? */
 #if 0
 		if (ioBase == MAP_FAILED) {
@@ -596,7 +591,8 @@ writeSparse32(int Value, pointer Base, register unsigned long Offset);
 static unsigned long msb_set = 0;
 
 static pointer
-mapVidMemSparse(int ScreenNum, unsigned long Base, unsigned long Size, int flags)
+mapVidMemSparse(int ScreenNum, unsigned long Base, unsigned long Size,
+                int flags)
 {
     int fd, prot;
     unsigned long ret, rets = 0;
@@ -639,8 +635,7 @@ mapVidMemSparse(int ScreenNum, unsigned long Base, unsigned long Size, int flags
      * Always do DENSE mmap, since read32/write32 currently require it.
      */
     ret = (unsigned long)mmap((caddr_t)(DENSE_BASE + Base), Size,
-		   prot, MAP_SHARED, fd,
-		   (off_t) (bus_base + Base));
+                               prot, MAP_SHARED, fd, (off_t) (bus_base + Base));
 
     /*
      * Do SPARSE mmap only when MMIO and not MMIO_32BIT, or FRAMEBUFFER
@@ -650,8 +645,7 @@ mapVidMemSparse(int ScreenNum, unsigned long Base, unsigned long Size, int flags
      * bytes worth of pagetable (32 pages).
      */
     if (((flags & VIDMEM_MMIO) && !(flags & VIDMEM_MMIO_32BIT)) ||
-	((flags & VIDMEM_FRAMEBUFFER) && (flags & VIDMEM_SPARSE)))
-    {
+        ((flags & VIDMEM_FRAMEBUFFER) && (flags & VIDMEM_SPARSE))) {
         rets = (unsigned long)mmap((caddr_t)(SPARSE_BASE + (Base << 5)),
 				   Size << 5, prot, MAP_SHARED, fd,
 				   (off_t) _bus_base_sparse() + (Base << 5));
@@ -665,11 +659,9 @@ mapVidMemSparse(int ScreenNum, unsigned long Base, unsigned long Size, int flags
     }
 
     if (((flags & VIDMEM_MMIO) && !(flags & VIDMEM_MMIO_32BIT)) ||
-	((flags & VIDMEM_FRAMEBUFFER) && (flags & VIDMEM_SPARSE)))
-    {
+        ((flags & VIDMEM_FRAMEBUFFER) && (flags & VIDMEM_SPARSE))) {
         if (rets == (unsigned long)MAP_FAILED ||
-	    rets != (SPARSE_BASE + (Base << 5)))
-	{
+            rets != (SPARSE_BASE + (Base << 5))) {
 	    FatalError("mapVidMemSparse: Could not (sparse) mmap fb (%s)\n",
 		       strerror(errno));
 	}
@@ -682,8 +674,7 @@ mapVidMemSparse(int ScreenNum, unsigned long Base, unsigned long Size, int flags
 		Base, Size, ret, rets);
     else
         xf86Msg(X_INFO,"mapVidMemSparse: mapped Base 0x%lx size 0x%lx"
-		" to DENSE only at 0x%lx\n",
-		Base, Size, ret);
+                " to DENSE only at 0x%lx\n", Base, Size, ret);
 
 #endif
     return (pointer) ret;
@@ -693,6 +684,7 @@ static void
 unmapVidMemSparse(int ScreenNum, pointer Base, unsigned long Size)
 {
     unsigned long Offset = (unsigned long)Base - DENSE_BASE;
+
 #if 1
     xf86Msg(X_INFO,"unmapVidMemSparse: unmapping Base 0x%lx Size 0x%lx\n",
 	    Base, Size);
