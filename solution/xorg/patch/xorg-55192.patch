diff --git a/glx/indirect_texture_compression.c b/glx/indirect_texture_compression.c
index 5f44d7b..49d6db5 100644
--- a/glx/indirect_texture_compression.c
+++ b/glx/indirect_texture_compression.c
@@ -39,14 +39,14 @@
 #include "glthread.h"
 #include "dispatch.h"
 
-int __glXDisp_GetCompressedTexImageARB(struct __GLXclientStateRec *cl, GLbyte *pc)
+int
+__glXDisp_GetCompressedTexImageARB(struct __GLXclientStateRec *cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
     __GLXcontext * const cx = __glXForceCurrent( cl, req->contextTag, & error );
     ClientPtr client = cl->client;
 
-
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
 	const GLenum target = *(GLenum *)(pc + 0);
@@ -54,18 +54,23 @@ int __glXDisp_GetCompressedTexImageARB(struct __GLXclientStateRec *cl, GLbyte *p
 	GLint compsize = 0;
 	char *answer = NULL, answerBuffer[200];
 
-	CALL_GetTexLevelParameteriv(GET_DISPATCH(), (target, level, GL_TEXTURE_COMPRESSED_IMAGE_SIZE, &compsize));
+        CALL_GetTexLevelParameteriv(GET_DISPATCH(),
+                                    (target, level,
+                                     GL_TEXTURE_COMPRESSED_IMAGE_SIZE,
+                                     &compsize));
 
 	if ( compsize != 0 ) {
 	    __GLX_GET_ANSWER_BUFFER(answer,cl,compsize,1);
 	    __glXClearErrorOccured();
-	    CALL_GetCompressedTexImageARB(GET_DISPATCH(), (target, level, answer));
+            CALL_GetCompressedTexImageARB(GET_DISPATCH(),
+                                          (target, level, answer));
 	}
 
 	if (__glXErrorOccured()) {
 	    __GLX_BEGIN_REPLY(0);
 	    __GLX_SEND_HEADER();
-	} else {
+        }
+        else {
 	    __GLX_BEGIN_REPLY(compsize);
 	    ((xGLXGetTexImageReply *)&__glXReply)->width = compsize;
 	    __GLX_SEND_HEADER();
@@ -78,15 +83,16 @@ int __glXDisp_GetCompressedTexImageARB(struct __GLXclientStateRec *cl, GLbyte *p
     return error;
 }
 
-
-int __glXDispSwap_GetCompressedTexImageARB(struct __GLXclientStateRec *cl, GLbyte *pc)
+int
+__glXDispSwap_GetCompressedTexImageARB(struct __GLXclientStateRec *cl,
+                                       GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent( cl, bswap_32( req->contextTag ), & error );
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_32(req->contextTag), &error);
     ClientPtr client = cl->client;
 
-
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
 	const GLenum target = (GLenum) bswap_32( *(int *)(pc + 0) );
@@ -94,18 +100,23 @@ int __glXDispSwap_GetCompressedTexImageARB(struct __GLXclientStateRec *cl, GLbyt
 	GLint compsize = 0;
 	char *answer = NULL, answerBuffer[200];
 
-	CALL_GetTexLevelParameteriv(GET_DISPATCH(), (target, level, GL_TEXTURE_COMPRESSED_IMAGE_SIZE, &compsize));
+        CALL_GetTexLevelParameteriv(GET_DISPATCH(),
+                                    (target, level,
+                                     GL_TEXTURE_COMPRESSED_IMAGE_SIZE,
+                                     &compsize));
 
 	if ( compsize != 0 ) {
 	    __GLX_GET_ANSWER_BUFFER(answer,cl,compsize,1);
 	    __glXClearErrorOccured();
-	    CALL_GetCompressedTexImageARB(GET_DISPATCH(), (target, level, answer));
+            CALL_GetCompressedTexImageARB(GET_DISPATCH(),
+                                          (target, level, answer));
 	}
 
 	if (__glXErrorOccured()) {
 	    __GLX_BEGIN_REPLY(0);
 	    __GLX_SEND_HEADER();
-	} else {
+        }
+        else {
 	    __GLX_BEGIN_REPLY(compsize);
 	    ((xGLXGetTexImageReply *)&__glXReply)->width = compsize;
 	    __GLX_SEND_HEADER();
