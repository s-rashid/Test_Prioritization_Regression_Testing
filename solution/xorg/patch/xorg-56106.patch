diff --git a/test/input.c b/test/input.c
index e029141..90ab9ae 100644
--- a/test/input.c
+++ b/test/input.c
@@ -49,7 +49,8 @@
  *
  * Result: All axes set to default values (usually 0).
  */
-static void dix_init_valuators(void)
+static void
+dix_init_valuators(void)
 {
     DeviceIntRec dev;
     ValuatorClassPtr val;
@@ -58,7 +59,6 @@ static void dix_init_valuators(void)
     int i;
     Atom atoms[MAX_VALUATORS] = { 0 };
 
-
     memset(&dev, 0, sizeof(DeviceIntRec));
     dev.type = MASTER_POINTER; /* claim it's a master to stop ptracccel */
 
@@ -71,8 +71,7 @@ static void dix_init_valuators(void)
     assert(val->numMotionEvents == 0);
     assert(val->axisVal);
 
-    for (i = 0; i < num_axes; i++)
-    {
+    for (i = 0; i < num_axes; i++) {
         assert(val->axisVal[i] == 0);
         assert(val->axes->min_value == NO_AXIS_LIMITS);
         assert(val->axes->max_value == NO_AXIS_LIMITS);
@@ -82,39 +81,51 @@ static void dix_init_valuators(void)
     assert(dev.last.numValuators == num_axes);
 
     /* invalid increment */
-    assert(SetScrollValuator(&dev, 0, SCROLL_TYPE_VERTICAL, 0.0, SCROLL_FLAG_NONE) == FALSE);
+    assert(SetScrollValuator
+           (&dev, 0, SCROLL_TYPE_VERTICAL, 0.0, SCROLL_FLAG_NONE) == FALSE);
     /* invalid type */
-    assert(SetScrollValuator(&dev, 0, SCROLL_TYPE_VERTICAL - 1, 1.0, SCROLL_FLAG_NONE) == FALSE);
-    assert(SetScrollValuator(&dev, 0, SCROLL_TYPE_HORIZONTAL + 1, 1.0, SCROLL_FLAG_NONE) == FALSE);
+    assert(SetScrollValuator
+           (&dev, 0, SCROLL_TYPE_VERTICAL - 1, 1.0, SCROLL_FLAG_NONE) == FALSE);
+    assert(SetScrollValuator
+           (&dev, 0, SCROLL_TYPE_HORIZONTAL + 1, 1.0,
+            SCROLL_FLAG_NONE) == FALSE);
     /* invalid axisnum */
-    assert(SetScrollValuator(&dev, 2, SCROLL_TYPE_HORIZONTAL, 1.0, SCROLL_FLAG_NONE) == FALSE);
+    assert(SetScrollValuator
+           (&dev, 2, SCROLL_TYPE_HORIZONTAL, 1.0, SCROLL_FLAG_NONE) == FALSE);
 
     /* valid */
-    assert(SetScrollValuator(&dev, 0, SCROLL_TYPE_VERTICAL, 3.0, SCROLL_FLAG_NONE) == TRUE);
+    assert(SetScrollValuator
+           (&dev, 0, SCROLL_TYPE_VERTICAL, 3.0, SCROLL_FLAG_NONE) == TRUE);
     axis = &dev.valuator->axes[0];
     assert(axis->scroll.increment == 3.0);
     assert(axis->scroll.type == SCROLL_TYPE_VERTICAL);
     assert(axis->scroll.flags == 0);
 
     /* valid */
-    assert(SetScrollValuator(&dev, 1, SCROLL_TYPE_HORIZONTAL, 2.0, SCROLL_FLAG_NONE) == TRUE);
+    assert(SetScrollValuator
+           (&dev, 1, SCROLL_TYPE_HORIZONTAL, 2.0, SCROLL_FLAG_NONE) == TRUE);
     axis = &dev.valuator->axes[1];
     assert(axis->scroll.increment == 2.0);
     assert(axis->scroll.type == SCROLL_TYPE_HORIZONTAL);
     assert(axis->scroll.flags == 0);
 
     /* can add another non-preffered axis */
-    assert(SetScrollValuator(&dev, 1, SCROLL_TYPE_VERTICAL, 5.0, SCROLL_FLAG_NONE) == TRUE);
-    assert(SetScrollValuator(&dev, 0, SCROLL_TYPE_HORIZONTAL, 5.0, SCROLL_FLAG_NONE) == TRUE);
+    assert(SetScrollValuator
+           (&dev, 1, SCROLL_TYPE_VERTICAL, 5.0, SCROLL_FLAG_NONE) == TRUE);
+    assert(SetScrollValuator
+           (&dev, 0, SCROLL_TYPE_HORIZONTAL, 5.0, SCROLL_FLAG_NONE) == TRUE);
 
     /* can overwrite with Preferred */
-    assert(SetScrollValuator(&dev, 1, SCROLL_TYPE_VERTICAL, 5.5, SCROLL_FLAG_PREFERRED) == TRUE);
+    assert(SetScrollValuator
+           (&dev, 1, SCROLL_TYPE_VERTICAL, 5.5, SCROLL_FLAG_PREFERRED) == TRUE);
     axis = &dev.valuator->axes[1];
     assert(axis->scroll.increment == 5.5);
     assert(axis->scroll.type == SCROLL_TYPE_VERTICAL);
     assert(axis->scroll.flags == SCROLL_FLAG_PREFERRED);
 
-    assert(SetScrollValuator(&dev, 0, SCROLL_TYPE_HORIZONTAL, 8.8, SCROLL_FLAG_PREFERRED) == TRUE);
+    assert(SetScrollValuator
+           (&dev, 0, SCROLL_TYPE_HORIZONTAL, 8.8,
+            SCROLL_FLAG_PREFERRED) == TRUE);
     axis = &dev.valuator->axes[0];
     assert(axis->scroll.increment == 8.8);
     assert(axis->scroll.type == SCROLL_TYPE_HORIZONTAL);
@@ -127,12 +138,14 @@ static void dix_init_valuators(void)
     assert(axis->scroll.type == SCROLL_TYPE_NONE);
 
     /* can overwrite axis with new settings */
-    assert(SetScrollValuator(&dev, 0, SCROLL_TYPE_VERTICAL, 5.0, SCROLL_FLAG_NONE) == TRUE);
+    assert(SetScrollValuator
+           (&dev, 0, SCROLL_TYPE_VERTICAL, 5.0, SCROLL_FLAG_NONE) == TRUE);
     axis = &dev.valuator->axes[0];
     assert(axis->scroll.type == SCROLL_TYPE_VERTICAL);
     assert(axis->scroll.increment == 5.0);
     assert(axis->scroll.flags == SCROLL_FLAG_NONE);
-    assert(SetScrollValuator(&dev, 0, SCROLL_TYPE_VERTICAL, 3.0, SCROLL_FLAG_NONE) == TRUE);
+    assert(SetScrollValuator
+           (&dev, 0, SCROLL_TYPE_VERTICAL, 3.0, SCROLL_FLAG_NONE) == TRUE);
     assert(axis->scroll.type == SCROLL_TYPE_VERTICAL);
     assert(axis->scroll.increment == 3.0);
     assert(axis->scroll.flags == SCROLL_FLAG_NONE);
@@ -140,7 +153,8 @@ static void dix_init_valuators(void)
 
 /* just check the known success cases, and that error cases set the client's
  * error value correctly. */
-static void dix_check_grab_values(void)
+static void
+dix_check_grab_values(void)
 {
     ClientRec client;
     GrabParameters param;
@@ -195,7 +209,6 @@ static void dix_check_grab_values(void)
     assert(client.errorValue == param.modifiers);
     assert(client.errorValue == (1 << 13));
 
-
     param.modifiers = AnyModifier;
     param.ownerEvents = TRUE;
     rc = CheckGrabValues(&client, &param);
@@ -208,12 +221,12 @@ static void dix_check_grab_values(void)
     assert(client.errorValue == 3);
 }
 
-
 /**
  * Convert various internal events to the matching core event and verify the
  * parameters.
  */
-static void dix_event_to_core(int type)
+static void
+dix_event_to_core(int type)
 {
     DeviceEvent ev;
     xEvent *core;
@@ -333,7 +346,8 @@ static void dix_event_to_core(int type)
 #undef test_event
 }
 
-static void dix_event_to_core_fail(int evtype, int expected_rc)
+static void
+dix_event_to_core_fail(int evtype, int expected_rc)
 {
     DeviceEvent ev;
     xEvent *core;
@@ -348,7 +362,8 @@ static void dix_event_to_core_fail(int evtype, int expected_rc)
     assert(rc == expected_rc);
 }
 
-static void dix_event_to_core_conversion(void)
+static void
+dix_event_to_core_conversion(void)
 {
     dix_event_to_core_fail(0, BadImplementation);
     dix_event_to_core_fail(1, BadImplementation);
@@ -375,6 +390,7 @@ _dix_test_xi_convert(DeviceEvent *ev, int expected_rc, int expected_count)
     assert(count >= expected_count);
     if (count > 0){
         deviceKeyButtonPointer *kbp = (deviceKeyButtonPointer*)xi;
+
         assert(kbp->type == IEventBase + ev->type);
         assert(kbp->detail == ev->detail.key);
         assert(kbp->time == ev->time);
@@ -391,11 +407,11 @@ _dix_test_xi_convert(DeviceEvent *ev, int expected_rc, int expected_count)
 
         while (--count > 0) {
             deviceValuator *v = (deviceValuator*)&xi[count];
+
             assert(v->type == DeviceValuator);
             assert(v->num_valuators <= 6);
         }
 
-
         free(xi);
     }
 }
@@ -406,7 +422,8 @@ _dix_test_xi_convert(DeviceEvent *ev, int expected_rc, int expected_count)
  * - right number of events generated
  * - extra events are valuators
  */
-static void dix_event_to_xi1_conversion(void)
+static void
+dix_event_to_xi1_conversion(void)
 {
     DeviceEvent ev = {0};
     int time;
@@ -451,24 +468,38 @@ static void dix_event_to_xi1_conversion(void)
     ev.deviceid         = deviceid;
 
     /* test all types for bad match */
-    ev.type = ET_KeyPress;         _dix_test_xi_convert(&ev, Success, 1);
-    ev.type = ET_KeyRelease;       _dix_test_xi_convert(&ev, Success, 1);
-    ev.type = ET_ButtonPress;      _dix_test_xi_convert(&ev, Success, 1);
-    ev.type = ET_ButtonRelease;    _dix_test_xi_convert(&ev, Success, 1);
-    ev.type = ET_Motion;           _dix_test_xi_convert(&ev, Success, 1);
-    ev.type = ET_ProximityIn;      _dix_test_xi_convert(&ev, Success, 1);
-    ev.type = ET_ProximityOut;     _dix_test_xi_convert(&ev, Success, 1);
+    ev.type = ET_KeyPress;
+    _dix_test_xi_convert(&ev, Success, 1);
+    ev.type = ET_KeyRelease;
+    _dix_test_xi_convert(&ev, Success, 1);
+    ev.type = ET_ButtonPress;
+    _dix_test_xi_convert(&ev, Success, 1);
+    ev.type = ET_ButtonRelease;
+    _dix_test_xi_convert(&ev, Success, 1);
+    ev.type = ET_Motion;
+    _dix_test_xi_convert(&ev, Success, 1);
+    ev.type = ET_ProximityIn;
+    _dix_test_xi_convert(&ev, Success, 1);
+    ev.type = ET_ProximityOut;
+    _dix_test_xi_convert(&ev, Success, 1);
 
     /* No axes */
     ClearBit(ev.valuators.mask, 0);
     ClearBit(ev.valuators.mask, 1);
-    ev.type = ET_KeyPress;         _dix_test_xi_convert(&ev, Success, 1);
-    ev.type = ET_KeyRelease;       _dix_test_xi_convert(&ev, Success, 1);
-    ev.type = ET_ButtonPress;      _dix_test_xi_convert(&ev, Success, 1);
-    ev.type = ET_ButtonRelease;    _dix_test_xi_convert(&ev, Success, 1);
-    ev.type = ET_Motion;           _dix_test_xi_convert(&ev, BadMatch, 0);
-    ev.type = ET_ProximityIn;      _dix_test_xi_convert(&ev, BadMatch, 0);
-    ev.type = ET_ProximityOut;     _dix_test_xi_convert(&ev, BadMatch, 0);
+    ev.type = ET_KeyPress;
+    _dix_test_xi_convert(&ev, Success, 1);
+    ev.type = ET_KeyRelease;
+    _dix_test_xi_convert(&ev, Success, 1);
+    ev.type = ET_ButtonPress;
+    _dix_test_xi_convert(&ev, Success, 1);
+    ev.type = ET_ButtonRelease;
+    _dix_test_xi_convert(&ev, Success, 1);
+    ev.type = ET_Motion;
+    _dix_test_xi_convert(&ev, BadMatch, 0);
+    ev.type = ET_ProximityIn;
+    _dix_test_xi_convert(&ev, BadMatch, 0);
+    ev.type = ET_ProximityOut;
+    _dix_test_xi_convert(&ev, BadMatch, 0);
 
     /* more than 6 axes â†’ 2 valuator events */
     SetBit(ev.valuators.mask, 0);
@@ -478,14 +509,20 @@ static void dix_event_to_xi1_conversion(void)
     SetBit(ev.valuators.mask, 4);
     SetBit(ev.valuators.mask, 5);
     SetBit(ev.valuators.mask, 6);
-    ev.type = ET_KeyPress;         _dix_test_xi_convert(&ev, Success, 2);
-    ev.type = ET_KeyRelease;       _dix_test_xi_convert(&ev, Success, 2);
-    ev.type = ET_ButtonPress;      _dix_test_xi_convert(&ev, Success, 2);
-    ev.type = ET_ButtonRelease;    _dix_test_xi_convert(&ev, Success, 2);
-    ev.type = ET_Motion;           _dix_test_xi_convert(&ev, Success, 2);
-    ev.type = ET_ProximityIn;      _dix_test_xi_convert(&ev, Success, 2);
-    ev.type = ET_ProximityOut;     _dix_test_xi_convert(&ev, Success, 2);
-
+    ev.type = ET_KeyPress;
+    _dix_test_xi_convert(&ev, Success, 2);
+    ev.type = ET_KeyRelease;
+    _dix_test_xi_convert(&ev, Success, 2);
+    ev.type = ET_ButtonPress;
+    _dix_test_xi_convert(&ev, Success, 2);
+    ev.type = ET_ButtonRelease;
+    _dix_test_xi_convert(&ev, Success, 2);
+    ev.type = ET_Motion;
+    _dix_test_xi_convert(&ev, Success, 2);
+    ev.type = ET_ProximityIn;
+    _dix_test_xi_convert(&ev, Success, 2);
+    ev.type = ET_ProximityOut;
+    _dix_test_xi_convert(&ev, Success, 2);
 
     /* keycode too high */
     ev.type = ET_KeyPress;
@@ -499,8 +536,8 @@ static void dix_event_to_xi1_conversion(void)
     _dix_test_xi_convert(&ev, Success, 0);
 }
 
-
-static void xi2_struct_sizes(void)
+static void
+xi2_struct_sizes(void)
 {
 #define compare(req) \
     assert(sizeof(req) == sz_##req);
@@ -529,8 +566,8 @@ static void xi2_struct_sizes(void)
 #undef compare
 }
 
-
-static void dix_grab_matching(void)
+static void
+dix_grab_matching(void)
 {
     DeviceIntRec xi_all_devices, xi_all_master_devices, dev1, dev2;
     GrabRec a, b;
@@ -891,9 +928,11 @@ static void dix_grab_matching(void)
     assert(rc == TRUE);
 }
 
-static void test_bits_to_byte(int i)
+static void
+test_bits_to_byte(int i)
 {
         int expected_bytes;
+
         expected_bytes = (i + 7)/8;
 
         assert(bits_to_bytes(i) >= i/8);
@@ -901,9 +940,11 @@ static void test_bits_to_byte(int i)
         assert(expected_bytes == bits_to_bytes(i));
 }
 
-static void test_bytes_to_int32(int i)
+static void
+test_bytes_to_int32(int i)
 {
         int expected_4byte;
+
         expected_4byte = (i + 3)/4;
 
         assert(bytes_to_int32(i) <= i);
@@ -911,16 +952,20 @@ static void test_bytes_to_int32(int i)
         assert(expected_4byte == bytes_to_int32(i));
 }
 
-static void test_pad_to_int32(int i)
+static void
+test_pad_to_int32(int i)
 {
         int expected_bytes;
+
         expected_bytes = ((i + 3)/4) * 4;
 
         assert(pad_to_int32(i) >= i);
         assert(pad_to_int32(i) - i <= 3);
         assert(expected_bytes == pad_to_int32(i));
 }
-static void include_byte_padding_macros(void)
+
+static void
+include_byte_padding_macros(void)
 {
     printf("Testing bits_to_bytes()\n");
 
@@ -969,7 +1014,8 @@ static void include_byte_padding_macros(void)
     test_pad_to_int32(INT_MAX - 3);
 }
 
-static void xi_unregister_handlers(void)
+static void
+xi_unregister_handlers(void)
 {
     DeviceIntRec dev;
     int handler;
@@ -1022,8 +1068,8 @@ static void xi_unregister_handlers(void)
 
 }
 
-static void cmp_attr_fields(InputAttributes *attr1,
-                            InputAttributes *attr2)
+static void
+cmp_attr_fields(InputAttributes * attr1, InputAttributes * attr2)
 {
     char **tags1, **tags2;
 
@@ -1031,47 +1077,46 @@ static void cmp_attr_fields(InputAttributes *attr1,
     assert(attr1 != attr2);
     assert(attr1->flags == attr2->flags);
 
-    if (attr1->product != NULL)
-    {
+    if (attr1->product != NULL) {
         assert(attr1->product != attr2->product);
         assert(strcmp(attr1->product, attr2->product) == 0);
-    } else
+    }
+    else
         assert(attr2->product == NULL);
 
-    if (attr1->vendor != NULL)
-    {
+    if (attr1->vendor != NULL) {
         assert(attr1->vendor != attr2->vendor);
         assert(strcmp(attr1->vendor, attr2->vendor) == 0);
-    } else
+    }
+    else
         assert(attr2->vendor == NULL);
 
-    if (attr1->device != NULL)
-    {
+    if (attr1->device != NULL) {
         assert(attr1->device != attr2->device);
         assert(strcmp(attr1->device, attr2->device) == 0);
-    } else
+    }
+    else
         assert(attr2->device == NULL);
 
-    if (attr1->pnp_id != NULL)
-    {
+    if (attr1->pnp_id != NULL) {
         assert(attr1->pnp_id != attr2->pnp_id);
         assert(strcmp(attr1->pnp_id, attr2->pnp_id) == 0);
-    } else
+    }
+    else
         assert(attr2->pnp_id == NULL);
 
-    if (attr1->usb_id != NULL)
-    {
+    if (attr1->usb_id != NULL) {
         assert(attr1->usb_id != attr2->usb_id);
         assert(strcmp(attr1->usb_id, attr2->usb_id) == 0);
-    } else
+    }
+    else
         assert(attr2->usb_id == NULL);
 
     tags1 = attr1->tags;
     tags2 = attr2->tags;
 
     /* if we don't have any tags, skip the tag checking bits */
-    if (!tags1)
-    {
+    if (!tags1) {
         assert(!tags2);
         return;
     }
@@ -1081,8 +1126,7 @@ static void cmp_attr_fields(InputAttributes *attr1,
     assert(*tags2);
 
     /* check for identical content, but duplicated */
-    while (*tags1)
-    {
+    while (*tags1) {
         assert(*tags1 != *tags2);
         assert(strcmp(*tags1, *tags2) == 0);
         tags1++;
@@ -1094,8 +1138,7 @@ static void cmp_attr_fields(InputAttributes *attr1,
 
     /* check for not sharing memory */
     tags1 = attr1->tags;
-    while (*tags1)
-    {
+    while (*tags1) {
         tags2 = attr2->tags;
         while (*tags2)
             assert(*tags1 != *tags2++);
@@ -1104,7 +1147,8 @@ static void cmp_attr_fields(InputAttributes *attr1,
     }
 }
 
-static void dix_input_attributes(void)
+static void
+dix_input_attributes(void)
 {
     InputAttributes orig = {0};
     InputAttributes *new;
@@ -1152,7 +1196,8 @@ static void dix_input_attributes(void)
     FreeInputAttributes(new);
 }
 
-static void dix_input_valuator_masks(void)
+static void
+dix_input_valuator_masks(void)
 {
     ValuatorMask *mask = NULL, *copy;
     int nvaluators = MAX_VALUATORS;
@@ -1161,8 +1206,7 @@ static void dix_input_valuator_masks(void)
     int i;
     int first_val, num_vals;
 
-    for (i = 0; i < nvaluators; i++)
-    {
+    for (i = 0; i < nvaluators; i++) {
         valuators[i] = i + 0.5;
         val_ranged[i] = i;
     }
@@ -1172,8 +1216,7 @@ static void dix_input_valuator_masks(void)
     assert(valuator_mask_size(mask) == 0);
     assert(valuator_mask_num_valuators(mask) == 0);
 
-    for (i = 0; i < nvaluators; i++)
-    {
+    for (i = 0; i < nvaluators; i++) {
         assert(!valuator_mask_isset(mask, i));
         valuator_mask_set_double(mask, i, valuators[i]);
         assert(valuator_mask_isset(mask, i));
@@ -1183,8 +1226,7 @@ static void dix_input_valuator_masks(void)
         assert(valuator_mask_num_valuators(mask) == i + 1);
     }
 
-    for (i = 0; i < nvaluators; i++)
-    {
+    for (i = 0; i < nvaluators; i++) {
         assert(valuator_mask_isset(mask, i));
         valuator_mask_unset(mask, i);
         /* we're removing valuators from the front, so size should stay the
@@ -1207,15 +1249,14 @@ static void dix_input_valuator_masks(void)
     valuator_mask_set_range(mask, first_val, num_vals, val_ranged);
     assert(valuator_mask_size(mask) == first_val + num_vals);
     assert(valuator_mask_num_valuators(mask) == num_vals);
-    for (i = 0; i < nvaluators; i++)
-    {
+    for (i = 0; i < nvaluators; i++) {
         double val;
-        if (i < first_val || i >= first_val + num_vals)
-        {
+
+        if (i < first_val || i >= first_val + num_vals) {
             assert(!valuator_mask_isset(mask, i));
             assert(!valuator_mask_fetch_double(mask, i, &val));
-        } else
-        {
+        }
+        else {
             assert(valuator_mask_isset(mask, i));
             assert(valuator_mask_get(mask, i) == val_ranged[i - first_val]);
             assert(valuator_mask_get_double(mask, i) ==
@@ -1229,11 +1270,12 @@ static void dix_input_valuator_masks(void)
     valuator_mask_copy(copy, mask);
     assert(mask != copy);
     assert(valuator_mask_size(mask) == valuator_mask_size(copy));
-    assert(valuator_mask_num_valuators(mask) == valuator_mask_num_valuators(copy));
+    assert(valuator_mask_num_valuators(mask) ==
+           valuator_mask_num_valuators(copy));
 
-    for (i = 0; i < nvaluators; i++)
-    {
+    for (i = 0; i < nvaluators; i++) {
         double a, b;
+
         assert(valuator_mask_isset(mask, i) == valuator_mask_isset(copy, i));
 
         if (!valuator_mask_isset(mask, i))
@@ -1251,7 +1293,8 @@ static void dix_input_valuator_masks(void)
     assert(mask == NULL);
 }
 
-static void dix_valuator_mode(void)
+static void
+dix_valuator_mode(void)
 {
     DeviceIntRec dev;
     const int num_axes = MAX_VALUATORS;
@@ -1264,8 +1307,7 @@ static void dix_valuator_mode(void)
     assert(InitValuatorClassDeviceStruct(NULL, 0, atoms, 0, 0) == FALSE);
     assert(InitValuatorClassDeviceStruct(&dev, num_axes, atoms, 0, Absolute));
 
-    for (i = 0; i < num_axes; i++)
-    {
+    for (i = 0; i < num_axes; i++) {
         assert(valuator_get_mode(&dev, i) == Absolute);
         valuator_set_mode(&dev, i, Relative);
         assert(dev.valuator->axes[i].mode == Relative);
@@ -1281,13 +1323,13 @@ static void dix_valuator_mode(void)
         assert(valuator_get_mode(&dev, i) == Relative);
 }
 
-static void include_bit_test_macros(void)
+static void
+include_bit_test_macros(void)
 {
     uint8_t mask[9] = { 0 };
     int i;
 
-    for (i = 0; i < sizeof(mask)/sizeof(mask[0]); i++)
-    {
+    for (i = 0; i < sizeof(mask) / sizeof(mask[0]); i++) {
         assert(BitIsOn(mask, i) == 0);
         SetBit(mask, i);
         assert(BitIsOn(mask, i) == 1);
@@ -1301,13 +1343,13 @@ static void include_bit_test_macros(void)
 /**
  * Ensure that val->axisVal and val->axes are aligned on doubles.
  */
-static void dix_valuator_alloc(void)
+static void
+dix_valuator_alloc(void)
 {
     ValuatorClassPtr v = NULL;
     int num_axes = 0;
 
-    while (num_axes < 5)
-    {
+    while (num_axes < 5) {
         v = AllocValuatorClass(v, num_axes);
 
         assert(v);
@@ -1323,7 +1365,8 @@ static void dix_valuator_alloc(void)
     free(v);
 }
 
-static void dix_get_master(void)
+static void
+dix_get_master(void)
 {
     DeviceIntRec vcp, vck;
     DeviceIntRec ptr, kbd;
@@ -1396,8 +1439,8 @@ static void dix_get_master(void)
     assert(GetMaster(&floating, POINTER_OR_FLOAT) == &floating);
 }
 
-
-static void input_option_test(void)
+static void
+input_option_test(void)
 {
     InputOption *list = NULL;
     InputOption *opt;
@@ -1559,6 +1602,7 @@ static void
 dix_double_fp_conversion(void)
 {
     uint32_t i;
+
     printf("Testing double to FP1616/FP3232 conversions\n");
 
     _test_double_fp16_values(0);
@@ -1622,7 +1666,8 @@ dix_double_fp_conversion(void)
 static uint32_t mieq_test_event_last_processed;
 
 static void
-mieq_test_event_handler(int screenNum, InternalEvent *ie, DeviceIntPtr dev) {
+mieq_test_event_handler(int screenNum, InternalEvent *ie, DeviceIntPtr dev)
+{
     RawDeviceEvent *e = (RawDeviceEvent *)ie;
 
     assert(e->type == ET_RawMotion);
@@ -1630,7 +1675,9 @@ mieq_test_event_handler(int screenNum, InternalEvent *ie, DeviceIntPtr dev) {
     mieq_test_event_last_processed = e->flags;
 }
 
-static void _mieq_test_generate_events(uint32_t start, uint32_t count) {
+static void
+_mieq_test_generate_events(uint32_t start, uint32_t count)
+{
     count += start;
     while (start < count) {
         RawDeviceEvent e = {0};
@@ -1649,7 +1696,8 @@ static void _mieq_test_generate_events(uint32_t start, uint32_t count) {
 #define mieq_test_generate_events(c) { _mieq_test_generate_events(next, c); next += c; }
 
 static void
-mieq_test(void) {
+mieq_test(void)
+{
     uint32_t next = 1;
 
     mieq_test_event_last_processed = 0;
@@ -1696,7 +1744,8 @@ process_input_proc(InternalEvent *ev, DeviceIntPtr device)
 }
 
 static void
-dix_enqueue_events(void) {
+dix_enqueue_events(void)
+{
 #define NEVENTS 5
     DeviceIntRec dev;
     InternalEvent ev[NEVENTS];
@@ -1723,8 +1772,7 @@ dix_enqueue_events(void) {
     /* to reset process_input_proc */
     ev[0].any.header = 0xac;
 
-    for (i = 0; i < NEVENTS; i++)
-    {
+    for (i = 0; i < NEVENTS; i++) {
         ev[i].any.length = sizeof(*ev);
         ev[i].any.type = i;
         EnqueueEvent(&ev[i], &dev);
@@ -1740,7 +1788,6 @@ dix_enqueue_events(void) {
     PlayReleasedEvents();
     assert(!xorg_list_is_empty(&syncEvents.pending));
 
-
     dev.deviceGrab.sync.frozen = 0;
     PlayReleasedEvents();
     assert(xorg_list_is_empty(&syncEvents.pending));
@@ -1748,8 +1795,8 @@ dix_enqueue_events(void) {
     inputInfo.devices = NULL;
 }
 
-
-int main(int argc, char** argv)
+int
+main(int argc, char **argv)
 {
     dix_enqueue_events();
     dix_double_fp_conversion();
