diff --git a/dix/events.c b/dix/events.c
index 0f63ca3..bfc8494 100644
--- a/dix/events.c
+++ b/dix/events.c
@@ -4184,7 +4184,7 @@ EventSuppressForWindow(WindowPtr pWin, ClientPtr client,
  * Uses the paired keyboard to get some additional information.
  */
 void
-EnterLeaveEvent(
+CoreEnterLeaveEvent(
     DeviceIntPtr mouse,
     int type,
     int mode,
@@ -4197,12 +4197,6 @@ EnterLeaveEvent(
     DeviceIntPtr        keybd;
     GrabPtr	        grab = mouse->deviceGrab.grab;
     Mask		mask;
-    int                 inWindow; /* zero if no sprites are in window */
-    Bool                sendevent = FALSE;
-
-    deviceEnterNotify   *devEnterLeave;
-    int                 mskidx;
-    OtherInputMasks     *inputMasks;
 
     keybd = GetPairedDevice(mouse);
 
@@ -4250,44 +4244,7 @@ EnterLeaveEvent(
              IsParent(focus, pWin)))
         event.u.enterLeave.flags |= ELFlagFocus;
 
-
-    /*
-     * Sending multiple core enter/leave events to the same window confuse the
-     * client.
-     * We can send multiple events that have detail NotifyVirtual or
-     * NotifyNonlinearVirtual however. For most clients anyway.
-     *
-     * For standard events (NotifyAncestor, NotifyInferior, NotifyNonlinear)
-     * we only send an enter event for the first pointer to enter. A leave
-     * event is sent for the last pointer to leave.
-     *
-     * For events with Virtual detail, we send them only to a window that does
-     * not have a pointer inside.
-     *
-     * For a window tree in the form of
-     *
-     * A -> Bp -> C -> D
-     *  \               (where B and E have pointers)
-     *    -> Ep
-     *
-     * If the pointer moves from E into D, a LeaveNotify is sent to E, an
-     * EnterNotify is sent to D, an EnterNotify with detail
-     * NotifyNonlinearVirtual to C and nothing to B.
-     */
-
-    /* Clear bit for device, but don't worry about SDs. */
-    if (mouse->isMaster && type == LeaveNotify &&
-            (detail != NotifyVirtual && detail != NotifyNonlinearVirtual))
-        if (mode != NotifyUngrab)
-            ENTER_LEAVE_SEMAPHORE_UNSET(pWin, mouse);
-
-    inWindow = EnterLeaveSemaphoresIsset(pWin);
-
-    if(!inWindow || mode == NotifyGrab || mode == NotifyUngrab)
-        sendevent = TRUE;
-
-
-    if ((mask & filters[mouse->id][type]) && sendevent)
+    if ((mask & filters[mouse->id][type]))
     {
         if (grab)
             TryClientEvents(rClient(grab), mouse, &event, 1, mask,
@@ -4297,35 +4254,6 @@ EnterLeaveEvent(
                                   filters[mouse->id][type], NullGrab, 0);
     }
 
-    if (mouse->isMaster && type == EnterNotify &&
-            (detail != NotifyVirtual && detail != NotifyNonlinearVirtual))
-        if (mode != NotifyGrab)
-            ENTER_LEAVE_SEMAPHORE_SET(pWin, mouse);
-
-    /* we don't have enough bytes, so we squash flags and mode into
-       one byte, and use the last byte for the deviceid. */
-    devEnterLeave = (deviceEnterNotify*)&event;
-    devEnterLeave->type = (type == EnterNotify) ? DeviceEnterNotify :
-        DeviceLeaveNotify;
-    devEnterLeave->mode |= (event.u.enterLeave.flags << 4);
-    devEnterLeave->deviceid = mouse->id;
-    mskidx = mouse->id;
-    inputMasks = wOtherInputMasks(pWin);
-    if (inputMasks &&
-       (filters[mouse->id][devEnterLeave->type] &
-            inputMasks->deliverableEvents[mskidx]))
-    {
-        if (grab)
-            (void)TryClientEvents(rClient(grab), mouse,
-                                (xEvent*)devEnterLeave, 1,
-                                mask, filters[mouse->id][devEnterLeave->type],
-                                grab);
-	else
-	    (void)DeliverEventsToWindow(mouse, pWin, (xEvent*)devEnterLeave,
-                                   1, filters[mouse->id][devEnterLeave->type],
-                                   NullGrab, mouse->id);
-    }
-
     if ((type == EnterNotify) && (mask & KeymapStateMask))
     {
 	xKeymapEvent ke;
@@ -4338,14 +4266,87 @@ EnterLeaveEvent(
 
 	ke.type = KeymapNotify;
 	if (grab)
-	    (void)TryClientEvents(rClient(grab), keybd, (xEvent *)&ke, 1,
+            TryClientEvents(rClient(grab), keybd, (xEvent *)&ke, 1,
                                   mask, KeymapStateMask, grab);
 	else
-	    (void)DeliverEventsToWindow(mouse, pWin, (xEvent *)&ke, 1,
+            DeliverEventsToWindow(mouse, pWin, (xEvent *)&ke, 1,
 					KeymapStateMask, NullGrab, 0);
     }
 }
 
+void
+DeviceEnterLeaveEvent(
+    DeviceIntPtr mouse,
+    int type,
+    int mode,
+    int detail,
+    WindowPtr pWin,
+    Window child)
+{
+    xEvent              event;
+    GrabPtr             grab = mouse->deviceGrab.grab;
+    deviceEnterNotify   *devEnterLeave;
+    int                 mskidx;
+    OtherInputMasks     *inputMasks;
+    Mask                mask;
+    DeviceIntPtr        keybd = GetPairedDevice(mouse);
+    BOOL                sameScreen;
+
+    if (grab) {
+        mask = (pWin == grab->window) ? grab->eventMask : 0;
+        if (grab->ownerEvents)
+            mask |= EventMaskForClient(pWin, rClient(grab));
+    } else {
+        mask = pWin->eventMask | wOtherEventMasks(pWin);
+    }
+
+    /* we don't have enough bytes, so we squash flags and mode into
+       one byte, and use the last byte for the deviceid. */
+    devEnterLeave           = (deviceEnterNotify*)&event;
+    devEnterLeave->detail   = detail;
+    devEnterLeave->time     = currentTime.milliseconds;
+    devEnterLeave->rootX    = mouse->spriteInfo->sprite->hot.x;
+    devEnterLeave->rootY    = mouse->spriteInfo->sprite->hot.y;
+    FixUpEventFromWindow(mouse, &event, pWin, None, FALSE);
+    sameScreen = event.u.keyButtonPointer.sameScreen;
+
+    devEnterLeave->child    = child;
+    devEnterLeave->type     = type;
+    devEnterLeave->deviceid = mouse->id;
+    devEnterLeave->mode     = mode;
+    devEnterLeave->mode    |= (sameScreen ?  (ELFlagSameScreen << 4) : 0);
+
+#ifdef XKB
+    if (!noXkbExtension) {
+        devEnterLeave->state = mouse->button->state & 0x1f00;
+        if (keybd)
+            devEnterLeave->state |=
+                XkbGrabStateFromRec(&keybd->key->xkbInfo->state);
+    } else
+#endif
+    {
+        devEnterLeave->state = (keybd) ? keybd->key->state : 0;
+        devEnterLeave->state |= mouse->button->state;
+    }
+
+    mskidx = mouse->id;
+    inputMasks = wOtherInputMasks(pWin);
+    if (inputMasks &&
+       (filters[mouse->id][devEnterLeave->type] &
+            inputMasks->deliverableEvents[mskidx]))
+    {
+        if (grab)
+            TryClientEvents(rClient(grab), mouse,
+                            (xEvent*)devEnterLeave, 1, mask,
+                            filters[mouse->id][devEnterLeave->type], grab);
+        else
+            DeliverEventsToWindow(mouse, pWin, (xEvent*)devEnterLeave, 1,
+                                  filters[mouse->id][devEnterLeave->type],
+                                  NullGrab, mouse->id);
+    }
+
+}
+
 static void
 FocusEvent(DeviceIntPtr dev, int type, int mode, int detail, WindowPtr pWin)
 {
