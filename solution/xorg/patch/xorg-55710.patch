diff --git a/hw/xfree86/xaa/xaaStipple.c b/hw/xfree86/xaa/xaaStipple.c
index c1d6f8a..fc74e39 100644
--- a/hw/xfree86/xaa/xaaStipple.c
+++ b/hw/xfree86/xaa/xaaStipple.c
@@ -32,7 +32,9 @@ StippleScanlineProcPtr stipple_scanline_func[6] = {
    StippleOver32_Inverted
 };
 
-StippleScanlineProcPtr *stipple_get_scanline_func(void) {
+StippleScanlineProcPtr *
+stipple_get_scanline_func(void)
+{
    return stipple_scanline_func;
 }
 
@@ -44,7 +46,6 @@ StippleScanlineProcPtr *stipple_get_scanline_func(void) {
 # define RETURN(i)	return(dest + i)
 #endif
 
-
 /* TRIPLE_BITS pattern expansion */
 #ifdef TRIPLE_BITS
 #define EXPAND_PAT \
@@ -80,7 +81,6 @@ StippleScanlineProcPtr *stipple_get_scanline_func(void) {
 #endif
 #endif
 
-
 #if !defined(FIXEDBASE) && !defined(MSBFIRST) && !defined(TRIPLE_BITS)
 
 unsigned int XAAShiftMasks[32] = {
@@ -116,9 +116,7 @@ EXPNAME(XAAFillColorExpandRects)(
    unsigned int planemask,
    int nBox,
    BoxPtr pBox,
-   int xorg, int yorg,
-   PixmapPtr pPix
-){
+                                      int xorg, int yorg, PixmapPtr pPix) {
     XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_SCRNINFOPTR(pScrn);
     CARD32 *base;
     Bool TwoPass = FALSE, FirstPass = TRUE;
@@ -151,18 +149,20 @@ EXPNAME(XAAFillColorExpandRects)(
 	!(infoRec->CPUToScreenColorExpandFillFlags & TRANSPARENCY_ONLY)) {
 #endif
 	/* one pass */
-    } else if((rop == GXcopy) && infoRec->FillSolidRects) {
+    }
+    else if ((rop == GXcopy) && infoRec->FillSolidRects) {
 	/* one pass but we fill background rects first */
 	(*infoRec->FillSolidRects)(pScrn, bg, rop, planemask, nBox, pBox);
 	bg = -1;
-    } else {
+    }
+    else {
 	/* gotta do two passes */
 	TwoPass = TRUE;
     }
 
     if(!TwoPass)
-	(*infoRec->SetupForCPUToScreenColorExpandFill)(
-					pScrn, fg, bg, rop, planemask);
+        (*infoRec->SetupForCPUToScreenColorExpandFill) (pScrn, fg, bg, rop,
+                                                        planemask);
 
     while(nBox--) {
 #ifdef TRIPLE_BITS
@@ -174,7 +174,9 @@ EXPNAME(XAAFillColorExpandRects)(
 SECOND_PASS:
 	if(TwoPass) {
 	    (*infoRec->SetupForCPUToScreenColorExpandFill)(pScrn, 
-			(FirstPass) ? bg : fg, -1, rop, planemask);
+                                                            (FirstPass) ? bg :
+                                                            fg, -1, rop,
+                                                            planemask);
 	    StippleFunc = (FirstPass) ? FirstFunc : SecondFunc;
 	}
 
@@ -182,24 +184,28 @@ SECOND_PASS:
 	flag = (infoRec->CPUToScreenColorExpandFillFlags 
 		& CPU_TRANSFER_PAD_QWORD) && ((dwords * h) & 0x01);
 
-        (*infoRec->SubsequentCPUToScreenColorExpandFill)(
-			pScrn, pBox->x1, pBox->y1,
- 			pBox->x2 - pBox->x1, h, 0);
+        (*infoRec->SubsequentCPUToScreenColorExpandFill) (pScrn, pBox->x1,
+                                                          pBox->y1,
+                                                          pBox->x2 - pBox->x1,
+                                                          h, 0);
 
 	base = (CARD32*)infoRec->ColorExpandBase;
 
 	srcy = (pBox->y1 - yorg) % stippleheight;
-	if(srcy < 0) srcy += stippleheight;
+        if (srcy < 0)
+            srcy += stippleheight;
 	srcx = (pBox->x1 - xorg) % stipplewidth;
-	if(srcx < 0) srcx += stipplewidth;
+        if (srcx < 0)
+            srcx += stipplewidth;
 
 	srcp = (srcwidth * srcy) + src;
 	
 #ifndef FIXEDBASE
 	if((dwords * h) <= infoRec->ColorExpandRange) {
 	   while(h--) {
-		base = (*StippleFunc)(
-			base, (CARD32*)srcp, srcx, stipplewidth, dwords);
+                base =
+                    (*StippleFunc) (base, (CARD32 *) srcp, srcx, stipplewidth,
+                                    dwords);
 		srcy++;
 		srcp += srcwidth;
 		if (srcy >= stippleheight) {
@@ -207,10 +213,12 @@ SECOND_PASS:
 		   srcp = src;
 		}
 	   }
-	} else
+        }
+        else
 #endif
 	   while(h--) {
-		(*StippleFunc)(base, (CARD32*)srcp, srcx, stipplewidth, dwords);
+                (*StippleFunc) (base, (CARD32 *) srcp, srcx, stipplewidth,
+                                dwords);
 		srcy++;
 		srcp += srcwidth;
 		if (srcy >= stippleheight) {
@@ -228,7 +236,9 @@ SECOND_PASS:
 	   if(FirstPass) {
 		FirstPass = FALSE;
 		goto SECOND_PASS;
-	   } else FirstPass = TRUE;
+            }
+            else
+                FirstPass = TRUE;
 	}
 
 	pBox++;
@@ -236,11 +246,10 @@ SECOND_PASS:
 
     if(infoRec->CPUToScreenColorExpandFillFlags & SYNC_AFTER_COLOR_EXPAND) 
 	(*infoRec->Sync)(pScrn);
-    else SET_SYNC_FLAG(infoRec);
+    else
+        SET_SYNC_FLAG(infoRec);
 }
 
-
-
 void
 #ifdef TRIPLE_BITS
 EXPNAME(XAAFillColorExpandSpans3)(
@@ -254,9 +263,7 @@ EXPNAME(XAAFillColorExpandSpans)(
    DDXPointPtr ppt,
    int *pwidth,
    int fSorted,
-   int xorg, int yorg,
-   PixmapPtr pPix
-){
+                                      int xorg, int yorg, PixmapPtr pPix) {
     XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_SCRNINFOPTR(pScrn);
     CARD32 *base;
     Bool TwoPass = FALSE, FirstPass = TRUE;
@@ -286,19 +293,21 @@ EXPNAME(XAAFillColorExpandSpans)(
 	!(infoRec->CPUToScreenColorExpandFillFlags & TRANSPARENCY_ONLY)) {
 #endif
 	/* one pass */
-    } else if((rop == GXcopy) && infoRec->FillSolidSpans) {
+    }
+    else if ((rop == GXcopy) && infoRec->FillSolidSpans) {
 	/* one pass but we fill background rects first */
-	(*infoRec->FillSolidSpans)(
-		pScrn, bg, rop, planemask, n, ppt, pwidth, fSorted);
+        (*infoRec->FillSolidSpans) (pScrn, bg, rop, planemask, n, ppt, pwidth,
+                                    fSorted);
 	bg = -1;
-    } else {
+    }
+    else {
 	/* gotta do two passes */
 	TwoPass = TRUE;
     }
 
     if(!TwoPass)
-	(*infoRec->SetupForCPUToScreenColorExpandFill)(
-				pScrn, fg, bg, rop, planemask);
+        (*infoRec->SetupForCPUToScreenColorExpandFill) (pScrn, fg, bg, rop,
+                                                        planemask);
 
     while(n--) {
 #ifdef TRIPLE_BITS
@@ -308,16 +317,20 @@ EXPNAME(XAAFillColorExpandSpans)(
 #endif
 
 	srcy = (ppt->y - yorg) % stippleheight;
-	if(srcy < 0) srcy += stippleheight;
+        if (srcy < 0)
+            srcy += stippleheight;
 	srcx = (ppt->x - xorg) % stipplewidth;
-	if(srcx < 0) srcx += stipplewidth;
+        if (srcx < 0)
+            srcx += stipplewidth;
 
 	srcp = (pPix->devKind * srcy) + (unsigned char*)pPix->devPrivate.ptr;
 
 SECOND_PASS:
 	if(TwoPass) {
 	    (*infoRec->SetupForCPUToScreenColorExpandFill)(pScrn, 
-			(FirstPass) ? bg : fg, -1, rop, planemask);
+                                                            (FirstPass) ? bg :
+                                                            fg, -1, rop,
+                                                            planemask);
 	    StippleFunc = (FirstPass) ? FirstFunc : SecondFunc;
 	}
 
@@ -338,18 +351,21 @@ SECOND_PASS:
 	   if(FirstPass) {
 		FirstPass = FALSE;
 		goto SECOND_PASS;
-	   } else FirstPass = TRUE;
+            }
+            else
+                FirstPass = TRUE;
 	}
 
-	ppt++; pwidth++;
+        ppt++;
+        pwidth++;
      }
 
     if(infoRec->CPUToScreenColorExpandFillFlags & SYNC_AFTER_COLOR_EXPAND) 
 	(*infoRec->Sync)(pScrn);
-    else SET_SYNC_FLAG(infoRec);
+    else
+        SET_SYNC_FLAG(infoRec);
 }
 
-
 #ifndef FIXEDBASE
 
 void
@@ -364,8 +380,7 @@ EXPNAME(XAAFillScanlineColorExpandRects)(
    int nBox,
    BoxPtr pBox,
    int xorg, int yorg,
-   PixmapPtr pPix
-){
+                                              PixmapPtr pPix) {
     XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_SCRNINFOPTR(pScrn);
     CARD32 *base;
     Bool TwoPass = FALSE, FirstPass = TRUE;
@@ -389,26 +404,29 @@ EXPNAME(XAAFillScanlineColorExpandRects)(
 
 #ifdef TRIPLE_BITS
     if((bg == -1) || 
-      (!(infoRec->ScanlineCPUToScreenColorExpandFillFlags & TRANSPARENCY_ONLY) &&
-      (!(infoRec->ScanlineCPUToScreenColorExpandFillFlags & RGB_EQUAL) ||
+        (!(infoRec->ScanlineCPUToScreenColorExpandFillFlags & TRANSPARENCY_ONLY)
+         && (!(infoRec->ScanlineCPUToScreenColorExpandFillFlags & RGB_EQUAL) ||
       (CHECK_RGB_EQUAL(bg))))) {
 #else
     if((bg == -1) || 
-      !(infoRec->ScanlineCPUToScreenColorExpandFillFlags & TRANSPARENCY_ONLY)) {
+        !(infoRec->
+          ScanlineCPUToScreenColorExpandFillFlags & TRANSPARENCY_ONLY)) {
 #endif
 	/* one pass */
-    } else if((rop == GXcopy) && infoRec->FillSolidRects) {
+    }
+    else if ((rop == GXcopy) && infoRec->FillSolidRects) {
 	/* one pass but we fill background rects first */
 	(*infoRec->FillSolidRects)(pScrn, bg, rop, planemask, nBox, pBox);
 	bg = -1;
-    } else {
+    }
+    else {
 	/* gotta do two passes */
 	TwoPass = TRUE;
     }
 
     if(!TwoPass)
-	(*infoRec->SetupForScanlineCPUToScreenColorExpandFill)(
-				pScrn, fg, bg, rop, planemask);
+        (*infoRec->SetupForScanlineCPUToScreenColorExpandFill) (pScrn, fg, bg,
+                                                                rop, planemask);
 
     while(nBox--) {
 #ifdef TRIPLE_BITS
@@ -420,21 +438,30 @@ EXPNAME(XAAFillScanlineColorExpandRects)(
 SECOND_PASS:
 	if(TwoPass) {
 	    (*infoRec->SetupForScanlineCPUToScreenColorExpandFill)(pScrn, 
-			(FirstPass) ? bg : fg, -1, rop, planemask);
+                                                                    (FirstPass)
+                                                                    ? bg : fg,
+                                                                    -1, rop,
+                                                                    planemask);
 	    StippleFunc = (FirstPass) ? FirstFunc : SecondFunc;
 	}
 
 	h = pBox->y2 - pBox->y1;
 
-        (*infoRec->SubsequentScanlineCPUToScreenColorExpandFill)(
-		pScrn, pBox->x1, pBox->y1, pBox->x2 - pBox->x1, h, 0);
+        (*infoRec->SubsequentScanlineCPUToScreenColorExpandFill) (pScrn,
+                                                                  pBox->x1,
+                                                                  pBox->y1,
+                                                                  pBox->x2 -
+                                                                  pBox->x1, h,
+                                                                  0);
 
 	bufferNo = 0;
 
 	srcy = (pBox->y1 - yorg) % stippleheight;
-	if(srcy < 0) srcy += stippleheight;
+        if (srcy < 0)
+            srcy += stippleheight;
 	srcx = (pBox->x1 - xorg) % stipplewidth;
-	if(srcx < 0) srcx += stipplewidth;
+        if (srcx < 0)
+            srcx += stipplewidth;
 
 	srcp = (srcwidth * srcy) + src;
 
@@ -456,7 +483,9 @@ SECOND_PASS:
 	   if(FirstPass) {
 		FirstPass = FALSE;
 		goto SECOND_PASS;
-	   } else FirstPass = TRUE;
+            }
+            else
+                FirstPass = TRUE;
 	}
 
 	pBox++;
@@ -479,8 +508,7 @@ EXPNAME(XAAFillScanlineColorExpandSpans)(
    int *pwidth,
    int fSorted,
    int xorg, int yorg,
-   PixmapPtr pPix
-){
+                                              PixmapPtr pPix) {
     XAAInfoRecPtr infoRec = GET_XAAINFORECPTR_FROM_SCRNINFOPTR(pScrn);
     CARD32 *base;
     Bool TwoPass = FALSE, FirstPass = TRUE;
@@ -502,28 +530,30 @@ EXPNAME(XAAFillScanlineColorExpandSpans)(
 
 #ifdef TRIPLE_BITS
     if((bg == -1) || 
-      (!(infoRec->ScanlineCPUToScreenColorExpandFillFlags & TRANSPARENCY_ONLY) &&
-      (!(infoRec->ScanlineCPUToScreenColorExpandFillFlags & RGB_EQUAL) ||
+        (!(infoRec->ScanlineCPUToScreenColorExpandFillFlags & TRANSPARENCY_ONLY)
+         && (!(infoRec->ScanlineCPUToScreenColorExpandFillFlags & RGB_EQUAL) ||
       (CHECK_RGB_EQUAL(bg))))) {
 #else
     if((bg == -1) || 
-      !(infoRec->ScanlineCPUToScreenColorExpandFillFlags & TRANSPARENCY_ONLY)) {
+        !(infoRec->
+          ScanlineCPUToScreenColorExpandFillFlags & TRANSPARENCY_ONLY)) {
 #endif
 	/* one pass */
-    } else if((rop == GXcopy) && infoRec->FillSolidSpans) {
+    }
+    else if ((rop == GXcopy) && infoRec->FillSolidSpans) {
 	/* one pass but we fill background rects first */
-	(*infoRec->FillSolidSpans)(
-		pScrn, bg, rop, planemask, n, ppt, pwidth, fSorted);
+        (*infoRec->FillSolidSpans) (pScrn, bg, rop, planemask, n, ppt, pwidth,
+                                    fSorted);
 	bg = -1;
-    } else {
+    }
+    else {
 	/* gotta do two passes */
 	TwoPass = TRUE;
     }
 
     if(!TwoPass)
-	(*infoRec->SetupForScanlineCPUToScreenColorExpandFill)(
-				pScrn, fg, bg, rop, planemask);
-
+        (*infoRec->SetupForScanlineCPUToScreenColorExpandFill) (pScrn, fg, bg,
+                                                                rop, planemask);
 
     while(n--) {
 #ifdef TRIPLE_BITS
@@ -533,21 +563,28 @@ EXPNAME(XAAFillScanlineColorExpandSpans)(
 #endif
 
 	srcy = (ppt->y - yorg) % stippleheight;
-	if(srcy < 0) srcy += stippleheight;
+        if (srcy < 0)
+            srcy += stippleheight;
 	srcx = (ppt->x - xorg) % stipplewidth;
-	if(srcx < 0) srcx += stipplewidth;
+        if (srcx < 0)
+            srcx += stipplewidth;
 
 	srcp = (pPix->devKind * srcy) + (unsigned char*)pPix->devPrivate.ptr;
 
 SECOND_PASS:
 	if(TwoPass) {
 	    (*infoRec->SetupForScanlineCPUToScreenColorExpandFill)(pScrn, 
-			(FirstPass) ? bg : fg, -1, rop, planemask);
+                                                                    (FirstPass)
+                                                                    ? bg : fg,
+                                                                    -1, rop,
+                                                                    planemask);
 	    StippleFunc = (FirstPass) ? FirstFunc : SecondFunc;
 	}
 
-        (*infoRec->SubsequentScanlineCPUToScreenColorExpandFill)(
-				pScrn, ppt->x, ppt->y, *pwidth, 1, 0);
+        (*infoRec->SubsequentScanlineCPUToScreenColorExpandFill) (pScrn, ppt->x,
+                                                                  ppt->y,
+                                                                  *pwidth, 1,
+                                                                  0);
 
 	base = (CARD32*)infoRec->ScanlineColorExpandBuffers[0];
 
@@ -558,10 +595,13 @@ SECOND_PASS:
 	   if(FirstPass) {
 		FirstPass = FALSE;
 		goto SECOND_PASS;
-	   } else FirstPass = TRUE;
+            }
+            else
+                FirstPass = TRUE;
 	}
 
-	ppt++; pwidth++;
+        ppt++;
+        pwidth++;
      }
 
      SET_SYNC_FLAG(infoRec);
@@ -570,11 +610,10 @@ SECOND_PASS:
 #endif
 
 static CARD32 *
-StipplePowerOfTwo(
-   CARD32* dest, CARD32* src, 
-   int shift, int width, int dwords
-){
+StipplePowerOfTwo(CARD32 *dest, CARD32 *src, int shift, int width, int dwords)
+{
     CARD32 pat = *src;
+
     if(width < 32) {
 	pat &= XAAShiftMasks[width];
 	while(width < 32) {
@@ -600,7 +639,8 @@ StipplePowerOfTwo(
 	}
 	if (dwords == 2) {
 	    WRITE_PAT2;
-	} else if (dwords == 1) {
+        }
+        else if (dwords == 1) {
 	    WRITE_PAT1;
 	}
 
@@ -618,22 +658,25 @@ StipplePowerOfTwo(
 #endif
    }
    
-   if(!dwords) return dest;
+    if (!dwords)
+        return dest;
    DEST(0) = pat;
-   if(dwords == 1) RETURN(1);
+    if (dwords == 1)
+        RETURN(1);
    DEST(1) = pat;
-   if(dwords == 2) RETURN(2);
+    if (dwords == 2)
+        RETURN(2);
    DEST(2) = pat;
    RETURN(3);
 #endif /* TRIPLE_BITS */
 }
 
 static CARD32 *
-StipplePowerOfTwo_Inverted(
-   CARD32* dest, CARD32* src, 
-   int shift, int width, int dwords
-){
+StipplePowerOfTwo_Inverted(CARD32 *dest, CARD32 *src,
+                           int shift, int width, int dwords)
+{
     CARD32 pat = *src;
+
     if(width < 32) {
 	pat &= XAAShiftMasks[width];
 	while(width < 32) {
@@ -661,7 +704,8 @@ StipplePowerOfTwo_Inverted(
 	}
 	if (dwords == 2) {
 	    WRITE_PAT2;
-	} else if (dwords == 1) {
+        }
+        else if (dwords == 1) {
 	    WRITE_PAT1;
 	}
 
@@ -679,22 +723,22 @@ StipplePowerOfTwo_Inverted(
 #endif
    }
    
-   if(!dwords) return dest;
+    if (!dwords)
+        return dest;
    DEST(0) = pat;
-   if(dwords == 1) RETURN(1);
+    if (dwords == 1)
+        RETURN(1);
    DEST(1) = pat;
-   if(dwords == 2) RETURN(2);
+    if (dwords == 2)
+        RETURN(2);
    DEST(2) = pat;
    RETURN(3);
 #endif /* TRIPLE_BITS */
 }
 
-
 static CARD32 *
-StippleUpTo32(
-   CARD32* base, CARD32* src, 
-   int shift, int width, int dwords
-){
+StippleUpTo32(CARD32 *base, CARD32 *src, int shift, int width, int dwords)
+{
     CARD32 pat = *src & XAAShiftMasks[width];
 
     while(width <= 15) {
@@ -705,14 +749,17 @@ StippleUpTo32(
 
     while(dwords--) {
 	CARD32 bits = SHIFT_R(pat,shift) | SHIFT_L(pat,width-shift);
+
 #ifdef TRIPLE_BITS
 	if(dwords >= 2) {
 	    WRITE_BITS3(bits);
 	    dwords -= 2;
-	} else if(dwords > 0) {
+        }
+        else if (dwords > 0) {
 	    WRITE_BITS2(bits);
 	    dwords--;
-	} else {
+        }
+        else {
 	    WRITE_BITS1(bits);
 	}
 #else
@@ -725,12 +772,10 @@ StippleUpTo32(
     return base;
 }
 
-
 static CARD32 *
-StippleUpTo32_Inverted(
-   CARD32* base, CARD32* src, 
-   int shift, int width, int dwords
-){
+StippleUpTo32_Inverted(CARD32 *base, CARD32 *src,
+                       int shift, int width, int dwords)
+{
     CARD32 pat = *src & XAAShiftMasks[width];
 
     while(width <= 15) {
@@ -741,14 +786,17 @@ StippleUpTo32_Inverted(
 
     while(dwords--) {
 	CARD32 bits = ~(SHIFT_R(pat,shift) | SHIFT_L(pat,width-shift));
+
 #ifdef TRIPLE_BITS
 	if(dwords >= 2) {
 	    WRITE_BITS3(bits);
 	    dwords -= 2;
-	} else if(dwords > 0) {
+        }
+        else if (dwords > 0) {
 	    WRITE_BITS2(bits);
 	    dwords--;
-	} else {
+        }
+        else {
 	    WRITE_BITS1(bits);
 	}
 #else
@@ -761,12 +809,9 @@ StippleUpTo32_Inverted(
     return base;
 }
 
-
 static CARD32 *
-StippleOver32(
-   CARD32* base, CARD32* src, 
-   int offset, int width, int dwords
-){
+StippleOver32(CARD32 *base, CARD32 *src, int offset, int width, int dwords)
+{
    CARD32* srcp;
    CARD32 bits;
    int bitsleft, shift, usable;   
@@ -781,7 +826,8 @@ StippleOver32(
             if(bitsleft <= usable) {
                  bits = SHIFT_L(*src,bitsleft) | 
                        (SHIFT_R(*srcp,shift) & XAAShiftMasks[bitsleft]);
-            } else {
+            }
+            else {
                  bits = SHIFT_L(*src,bitsleft) |
                        (SHIFT_L(srcp[1],usable) & XAAShiftMasks[bitsleft]) |
                        (SHIFT_R(*srcp,shift) & XAAShiftMasks[usable]);
@@ -796,10 +842,12 @@ StippleOver32(
 	if(dwords >= 2) {
 	    WRITE_BITS3(bits);
 	    dwords -= 2;
-	} else if(dwords > 0) {
+        }
+        else if (dwords > 0) {
 	    WRITE_BITS2(bits);
 	    dwords--;
-	} else {
+        }
+        else {
 	    WRITE_BITS1(bits);
 	}
 #else
@@ -812,12 +860,10 @@ StippleOver32(
    return base;
 }
 
-
 static CARD32 *
-StippleOver32_Inverted(
-   CARD32* base, CARD32* src, 
-   int offset, int width, int dwords
-){
+StippleOver32_Inverted(CARD32 *base, CARD32 *src,
+                       int offset, int width, int dwords)
+{
    CARD32* srcp;
    CARD32 bits;
    int bitsleft, shift, usable;
@@ -832,7 +878,8 @@ StippleOver32_Inverted(
             if(bitsleft <= usable) {
                  bits = SHIFT_L(*src,bitsleft) |
                        (SHIFT_R(*srcp,shift) & XAAShiftMasks[bitsleft]);
-            } else {
+            }
+            else {
                  bits = SHIFT_L(*src,bitsleft) |
                        (SHIFT_L(srcp[1],usable) & XAAShiftMasks[bitsleft]) |
                        (SHIFT_R(*srcp,shift) & XAAShiftMasks[usable]);
@@ -849,10 +896,12 @@ StippleOver32_Inverted(
 	if(dwords >= 2) {
 	    WRITE_BITS3(bits);
 	    dwords -= 2;
-	} else if(dwords > 0) {
+        }
+        else if (dwords > 0) {
 	    WRITE_BITS2(bits);
 	    dwords--;
-	} else {
+        }
+        else {
 	    WRITE_BITS1(bits);
 	}
 #else
