diff --git a/fb/fbblt.c b/fb/fbblt.c
index 6809404..17bd698 100644
--- a/fb/fbblt.c
+++ b/fb/fbblt.c
@@ -43,20 +43,11 @@ void
 fbBlt (FbBits   *srcLine,
        FbStride	srcStride,
        int	srcX,
-       
        FbBits   *dstLine,
        FbStride dstStride,
        int	dstX,
-       
        int	width, 
-       int	height,
-       
-       int	alu,
-       FbBits	pm,
-       int	bpp,
-       
-       Bool	reverse,
-       Bool	upsidedown)
+      int height, int alu, FbBits pm, int bpp, Bool reverse, Bool upsidedown)
 {
     FbBits  *src, *dst;
     int	    leftShift, rightShift;
@@ -66,18 +57,18 @@ fbBlt (FbBits   *srcLine,
     Bool    destInvarient;
     int	    startbyte, endbyte;
     int     careful;
+
     FbDeclareMergeRop ();
 
-    if (bpp == 24 && !FbCheck24Pix (pm))
-    {
+    if (bpp == 24 && !FbCheck24Pix(pm)) {
 	fbBlt24 (srcLine, srcStride, srcX, dstLine, dstStride, dstX,
 		 width, height, alu, pm, reverse, upsidedown);
 	return;
     }
 
     careful = !((srcLine < dstLine && srcLine + width * (bpp>>3) > dstLine) ||
-                (dstLine < srcLine && dstLine + width * (bpp>>3) > srcLine)) ||
-              (bpp & 7);
+                (dstLine < srcLine && dstLine + width * (bpp >> 3) > srcLine))
+        || (bpp & 7);
 
     if (alu == GXcopy && pm == FB_ALLONES && !careful &&
             !(srcX & 7) && !(dstX & 7) && !(width & 7)) {
@@ -103,8 +94,7 @@ fbBlt (FbBits   *srcLine,
 
     FbInitializeMergeRop(alu, pm);
     destInvarient = FbDestInvarientMergeRop();
-    if (upsidedown)
-    {
+    if (upsidedown) {
 	srcLine += (height - 1) * (srcStride);
 	dstLine += (height - 1) * (dstStride);
 	srcStride = -srcStride;
@@ -112,80 +102,66 @@ fbBlt (FbBits   *srcLine,
     }
     FbMaskBitsBytes (dstX, width, destInvarient, startmask, startbyte,
 		     nmiddle, endmask, endbyte);
-    if (reverse)
-    {
+    if (reverse) {
 	srcLine += ((srcX + width - 1) >> FB_SHIFT) + 1;
 	dstLine += ((dstX + width - 1) >> FB_SHIFT) + 1;
 	srcX = (srcX + width - 1) & FB_MASK;
 	dstX = (dstX + width - 1) & FB_MASK;
     }
-    else
-    {
+    else {
 	srcLine += srcX >> FB_SHIFT;
 	dstLine += dstX >> FB_SHIFT;
 	srcX &= FB_MASK;
 	dstX &= FB_MASK;
     }
-    if (srcX == dstX)
-    {
-	while (height--)
-	{
+    if (srcX == dstX) {
+        while (height--) {
 	    src = srcLine;
 	    srcLine += srcStride;
 	    dst = dstLine;
 	    dstLine += dstStride;
-	    if (reverse)
-	    {
-		if (endmask)
-		{
+            if (reverse) {
+                if (endmask) {
 		    bits = READ(--src);
 		    --dst;
 		    FbDoRightMaskByteMergeRop(dst, bits, endbyte, endmask);
 		}
 		n = nmiddle;
-		if (destInvarient)
-		{
+                if (destInvarient) {
 		    while (n--)
 			WRITE(--dst, FbDoDestInvarientMergeRop(READ(--src)));
 		}
-		else
-		{
-		    while (n--)
-		    {
+                else {
+                    while (n--) {
 			bits = READ(--src);
 			--dst;
 			WRITE(dst, FbDoMergeRop (bits, READ(dst)));
 		    }
 		}
-		if (startmask)
-		{
+                if (startmask) {
 		    bits = READ(--src);
 		    --dst;
 		    FbDoLeftMaskByteMergeRop(dst, bits, startbyte, startmask);
 		}
 	    }
-	    else
-	    {
-		if (startmask)
-		{
+            else {
+                if (startmask) {
 		    bits = READ(src++);
 		    FbDoLeftMaskByteMergeRop(dst, bits, startbyte, startmask);
 		    dst++;
 		}
 		n = nmiddle;
-		if (destInvarient)
-		{
+                if (destInvarient) {
 #if 0
 		    /*
 		     * This provides some speedup on screen->screen blts
 		     * over the PCI bus, usually about 10%.  But fb
 		     * isn't usually used for this operation...
 		     */
-		    if (_ca2 + 1 == 0 && _cx2 == 0)
-		    {
+                    if (_ca2 + 1 == 0 && _cx2 == 0) {
 			FbBits	t1, t2, t3, t4;
-			while (n >= 4)
-			{
+
+                        while (n >= 4) {
 			    t1 = *src++;
 			    t2 = *src++;
 			    t3 = *src++;
@@ -201,52 +177,42 @@ fbBlt (FbBits   *srcLine,
 		    while (n--)
 			WRITE(dst++, FbDoDestInvarientMergeRop(READ(src++)));
 		}
-		else
-		{
-		    while (n--)
-		    {
+                else {
+                    while (n--) {
 			bits = READ(src++);
 			WRITE(dst, FbDoMergeRop (bits, READ(dst)));
 			dst++;
 		    }
 		}
-		if (endmask)
-		{
+                if (endmask) {
 		    bits = READ(src);
 		    FbDoRightMaskByteMergeRop(dst, bits, endbyte, endmask);
 		}
 	    }
 	}
     }
-    else
-    {
-	if (srcX > dstX)
-	{
+    else {
+        if (srcX > dstX) {
 	    leftShift = srcX - dstX;
 	    rightShift = FB_UNIT - leftShift;
 	}
-	else
-	{
+        else {
 	    rightShift = dstX - srcX;
 	    leftShift = FB_UNIT - rightShift;
 	}
-	while (height--)
-	{
+        while (height--) {
 	    src = srcLine;
 	    srcLine += srcStride;
 	    dst = dstLine;
 	    dstLine += dstStride;
 	    
 	    bits1 = 0;
-	    if (reverse)
-	    {
+            if (reverse) {
 		if (srcX < dstX)
 		    bits1 = READ(--src);
-		if (endmask)
-		{
+                if (endmask) {
 		    bits = FbScrRight(bits1, rightShift); 
-		    if (FbScrRight(endmask, leftShift))
-		    {
+                    if (FbScrRight(endmask, leftShift)) {
 			bits1 = READ(--src);
 			bits |= FbScrLeft(bits1, leftShift);
 		    }
@@ -254,10 +220,8 @@ fbBlt (FbBits   *srcLine,
 		    FbDoRightMaskByteMergeRop(dst, bits, endbyte, endmask);
 		}
 		n = nmiddle;
-		if (destInvarient)
-		{
-		    while (n--)
-		    {
+                if (destInvarient) {
+                    while (n--) {
 			bits = FbScrRight(bits1, rightShift); 
 			bits1 = READ(--src);
 			bits |= FbScrLeft(bits1, leftShift);
@@ -265,10 +229,8 @@ fbBlt (FbBits   *srcLine,
 			WRITE(dst, FbDoDestInvarientMergeRop(bits));
 		    }
 		}
-		else
-		{
-		    while (n--)
-		    {
+                else {
+                    while (n--) {
 			bits = FbScrRight(bits1, rightShift); 
 			bits1 = READ(--src);
 			bits |= FbScrLeft(bits1, leftShift);
@@ -276,11 +238,9 @@ fbBlt (FbBits   *srcLine,
 			WRITE(dst, FbDoMergeRop(bits, READ(dst)));
 		    }
 		}
-		if (startmask)
-		{
+                if (startmask) {
 		    bits = FbScrRight(bits1, rightShift); 
-		    if (FbScrRight(startmask, leftShift))
-		    {
+                    if (FbScrRight(startmask, leftShift)) {
 			bits1 = READ(--src);
 			bits |= FbScrLeft(bits1, leftShift);
 		    }
@@ -288,15 +248,12 @@ fbBlt (FbBits   *srcLine,
 		    FbDoLeftMaskByteMergeRop (dst, bits, startbyte, startmask);
 		}
 	    }
-	    else
-	    {
+            else {
 		if (srcX > dstX)
 		    bits1 = READ(src++);
-		if (startmask)
-		{
+                if (startmask) {
 		    bits = FbScrLeft(bits1, leftShift); 
-		    if (FbScrLeft(startmask, rightShift))
-		    {
+                    if (FbScrLeft(startmask, rightShift)) {
 			bits1 = READ(src++);
 			bits |= FbScrRight(bits1, rightShift);
 		    }
@@ -304,10 +261,8 @@ fbBlt (FbBits   *srcLine,
 		    dst++;
 		}
 		n = nmiddle;
-		if (destInvarient)
-		{
-		    while (n--)
-		    {
+                if (destInvarient) {
+                    while (n--) {
 			bits = FbScrLeft(bits1, leftShift); 
 			bits1 = READ(src++);
 			bits |= FbScrRight(bits1, rightShift);
@@ -315,10 +270,8 @@ fbBlt (FbBits   *srcLine,
 			dst++;
 		    }
 		}
-		else
-		{
-		    while (n--)
-		    {
+                else {
+                    while (n--) {
 			bits = FbScrLeft(bits1, leftShift); 
 			bits1 = READ(src++);
 			bits |= FbScrRight(bits1, rightShift);
@@ -326,11 +279,9 @@ fbBlt (FbBits   *srcLine,
 			dst++;
 		    }
 		}
-		if (endmask)
-		{
+                if (endmask) {
 		    bits = FbScrLeft(bits1, leftShift); 
-		    if (FbScrLeft(endmask, rightShift))
-		    {
+                    if (FbScrLeft(endmask, rightShift)) {
 			bits1 = READ(src);
 			bits |= FbScrRight(bits1, rightShift);
 		    }
@@ -341,7 +292,6 @@ fbBlt (FbBits   *srcLine,
     }
 }
 
-
 #undef DEBUG_BLT24
 #ifdef DEBUG_BLT24
 
@@ -359,16 +309,7 @@ getPixel (char *src, int x)
 static void
 fbBlt24Line (FbBits	    *src,
 	     int	    srcX,
-
-	     FbBits	    *dst,
-	     int	    dstX,
-
-	     int	    width,
-
-	     int	    alu,
-	     FbBits	    pm,
-	 
-	     Bool	    reverse)
+            FbBits * dst, int dstX, int width, int alu, FbBits pm, Bool reverse)
 {
 #ifdef DEBUG_BLT24
     char    *origDst = (char *) dst;
@@ -385,6 +326,7 @@ fbBlt24Line (FbBits	    *src,
     FbBits  mask;
 
     int	    rot;
+
     FbDeclareMergeRop ();
     
     FbInitializeMergeRop (alu, FB_ALLONES);
@@ -392,20 +334,19 @@ fbBlt24Line (FbBits	    *src,
 #ifdef DEBUG_BLT24
     ErrorF ("dstX %d width %d reverse %d\n", dstX, width, reverse);
 #endif
-    if (reverse)
-    {
+    if (reverse) {
 	src += ((srcX + width - 1) >> FB_SHIFT) + 1;
 	dst += ((dstX + width - 1) >> FB_SHIFT) + 1;
 	rot = FbFirst24Rot (((dstX + width - 8) & FB_MASK));
 	rot = FbPrev24Rot(rot);
 #ifdef DEBUG_BLT24
-	ErrorF ("dstX + width - 8: %d rot: %d\n", (dstX + width - 8) & FB_MASK, rot);
+        ErrorF("dstX + width - 8: %d rot: %d\n", (dstX + width - 8) & FB_MASK,
+               rot);
 #endif
 	srcX = (srcX + width - 1) & FB_MASK;
 	dstX = (dstX + width - 1) & FB_MASK;
     }
-    else
-    {
+    else {
 	src += srcX >> FB_SHIFT;
 	dst += dstX >> FB_SHIFT;
 	srcX &= FB_MASK;
@@ -419,77 +360,62 @@ fbBlt24Line (FbBits	    *src,
 #ifdef DEBUG_BLT24
     ErrorF ("pm 0x%x mask 0x%x\n", pm, mask);
 #endif
-    if (srcX == dstX)
-    {
-	if (reverse)
-	{
-	    if (endmask)
-	    {
+    if (srcX == dstX) {
+        if (reverse) {
+            if (endmask) {
 		bits = READ(--src);
 		--dst;
 		WRITE(dst, FbDoMaskMergeRop (bits, READ(dst), mask & endmask));
 		mask = FbPrev24Pix (mask);
 	    }
-	    while (n--)
-	    {
+            while (n--) {
 		bits = READ(--src);
 		--dst;
 		WRITE(dst, FbDoMaskMergeRop (bits, READ(dst), mask));
 		mask = FbPrev24Pix (mask);
 	    }
-	    if (startmask)
-	    {
+            if (startmask) {
 		bits = READ(--src);
 		--dst;
 		WRITE(dst, FbDoMaskMergeRop(bits, READ(dst), mask & startmask));
 	    }
 	}
-	else
-	{
-	    if (startmask)
-	    {
+        else {
+            if (startmask) {
 		bits = READ(src++);
 		WRITE(dst, FbDoMaskMergeRop (bits, READ(dst), mask & startmask));
 		dst++;
 		mask = FbNext24Pix(mask);
 	    }
-	    while (n--)
-	    {
+            while (n--) {
 		bits = READ(src++);
 		WRITE(dst, FbDoMaskMergeRop (bits, READ(dst), mask));
 		dst++;
 		mask = FbNext24Pix(mask);
 	    }
-	    if (endmask)
-	    {
+            if (endmask) {
 		bits = READ(src);
 		WRITE(dst, FbDoMaskMergeRop(bits, READ(dst), mask & endmask));
 	    }
 	}
     }
-    else
-    {
-	if (srcX > dstX)
-	{
+    else {
+        if (srcX > dstX) {
 	    leftShift = srcX - dstX;
 	    rightShift = FB_UNIT - leftShift;
 	}
-	else
-	{
+        else {
 	    rightShift = dstX - srcX;
 	    leftShift = FB_UNIT - rightShift;
 	}
 	
 	bits1 = 0;
-	if (reverse)
-	{
+        if (reverse) {
 	    if (srcX < dstX)
 		bits1 = READ(--src);
-	    if (endmask)
-	    {
+            if (endmask) {
 		bits = FbScrRight(bits1, rightShift); 
-		if (FbScrRight(endmask, leftShift))
-		{
+                if (FbScrRight(endmask, leftShift)) {
 		    bits1 = READ(--src);
 		    bits |= FbScrLeft(bits1, leftShift);
 		}
@@ -497,8 +423,7 @@ fbBlt24Line (FbBits	    *src,
 		WRITE(dst, FbDoMaskMergeRop (bits, READ(dst), mask & endmask));
 		mask = FbPrev24Pix(mask);
 	    }
-	    while (n--)
-	    {
+            while (n--) {
 		bits = FbScrRight(bits1, rightShift); 
 		bits1 = READ(--src);
 		bits |= FbScrLeft(bits1, leftShift);
@@ -506,11 +431,9 @@ fbBlt24Line (FbBits	    *src,
 		WRITE(dst, FbDoMaskMergeRop(bits, READ(dst), mask));
 		mask = FbPrev24Pix(mask);
 	    }
-	    if (startmask)
-	    {
+            if (startmask) {
 		bits = FbScrRight(bits1, rightShift); 
-		if (FbScrRight(startmask, leftShift))
-		{
+                if (FbScrRight(startmask, leftShift)) {
 		    bits1 = READ(--src);
 		    bits |= FbScrLeft(bits1, leftShift);
 		}
@@ -518,12 +441,10 @@ fbBlt24Line (FbBits	    *src,
 		WRITE(dst, FbDoMaskMergeRop (bits, READ(dst), mask & startmask));
 	    }
 	}
-	else
-	{
+        else {
 	    if (srcX > dstX)
 		bits1 = READ(src++);
-	    if (startmask)
-	    {
+            if (startmask) {
 		bits = FbScrLeft(bits1, leftShift); 
 		bits1 = READ(src++);
 		bits |= FbScrRight(bits1, rightShift);
@@ -531,8 +452,7 @@ fbBlt24Line (FbBits	    *src,
 		dst++;
 		mask = FbNext24Pix(mask);
 	    }
-	    while (n--)
-	    {
+            while (n--) {
 		bits = FbScrLeft(bits1, leftShift); 
 		bits1 = READ(src++);
 		bits |= FbScrRight(bits1, rightShift);
@@ -540,11 +460,9 @@ fbBlt24Line (FbBits	    *src,
 		dst++;
 		mask = FbNext24Pix(mask);
 	    }
-	    if (endmask)
-	    {
+            if (endmask) {
 		bits = FbScrLeft(bits1, leftShift); 
-		if (FbScrLeft(endmask, rightShift))
-		{
+                if (FbScrLeft(endmask, rightShift)) {
 		    bits1 = READ(src);
 		    bits |= FbScrRight(bits1, rightShift);
 		}
@@ -574,29 +492,19 @@ void
 fbBlt24 (FbBits	    *srcLine,
 	 FbStride   srcStride,
 	 int	    srcX,
-
 	 FbBits	    *dstLine,
 	 FbStride   dstStride,
 	 int	    dstX,
-
 	 int	    width, 
-	 int	    height,
-
-	 int	    alu,
-	 FbBits	    pm,
-
-	 Bool	    reverse,
-	 Bool	    upsidedown)
-{
-    if (upsidedown)
+        int height, int alu, FbBits pm, Bool reverse, Bool upsidedown)
     {
+    if (upsidedown) {
 	srcLine += (height-1) * srcStride;
 	dstLine += (height-1) * dstStride;
 	srcStride = -srcStride;
 	dstStride = -dstStride;
     }
-    while (height--)
-    {
+    while (height--) {
 	fbBlt24Line (srcLine, srcX, dstLine, dstX, width, alu, pm, reverse);
 	srcLine += srcStride;
 	dstLine += dstStride;
@@ -619,19 +527,11 @@ fbBltOdd (FbBits    *srcLine,
 	  FbStride  srcStrideOdd,
 	  int	    srcXEven,
 	  int	    srcXOdd,
-
 	  FbBits    *dstLine,
 	  FbStride  dstStrideEven,
 	  FbStride  dstStrideOdd,
 	  int	    dstXEven,
-	  int	    dstXOdd,
-
-	  int	    width,
-	  int	    height,
-
-	  int	    alu,
-	  FbBits    pm,
-	  int	    bpp)
+         int dstXOdd, int width, int height, int alu, FbBits pm, int bpp)
 {
     FbBits  *src;
     int	    leftShiftEven, rightShiftEven;
@@ -654,6 +554,7 @@ fbBltOdd (FbBits    *srcLine,
     
     Bool    destInvarient;
     Bool    even;
+
     FbDeclareMergeRop ();
 
     FbInitializeMergeRop (alu, pm);
@@ -672,12 +573,10 @@ fbBltOdd (FbBits    *srcLine,
     even = TRUE;
     InitializeShifts(srcXEven, dstXEven, leftShiftEven, rightShiftEven);
     InitializeShifts(srcXOdd, dstXOdd, leftShiftOdd, rightShiftOdd);
-    while (height--)
-    {
+    while (height--) {
 	src = srcLine;
 	dst = dstLine;
-	if (even)
-	{
+        if (even) {
 	    srcX = srcXEven;
 	    dstX = dstXEven;
 	    startmask = startmaskEven;
@@ -689,8 +588,7 @@ fbBltOdd (FbBits    *srcLine,
 	    dstLine += dstStrideEven;
 	    even = FALSE;
 	}
-	else
-	{
+        else {
 	    srcX = srcXOdd;
 	    dstX = dstXOdd;
 	    startmask = startmaskOdd;
@@ -702,46 +600,37 @@ fbBltOdd (FbBits    *srcLine,
 	    dstLine += dstStrideOdd;
 	    even = TRUE;
 	}
-	if (srcX == dstX)
-	{
-	    if (startmask)
-	    {
+        if (srcX == dstX) {
+            if (startmask) {
 		bits = READ(src++);
 		WRITE(dst, FbDoMaskMergeRop (bits, READ(dst), startmask));
 		dst++;
 	    }
 	    n = nmiddle;
-	    if (destInvarient)
-	    {
-		while (n--)
-		{
+            if (destInvarient) {
+                while (n--) {
 		    bits = READ(src++);
 		    WRITE(dst, FbDoDestInvarientMergeRop(bits));
 		    dst++;
 		}
 	    }
-	    else
-	    {
-		while (n--)
-		{
+            else {
+                while (n--) {
 		    bits = READ(src++);
 		    WRITE(dst, FbDoMergeRop (bits, READ(dst)));
 		    dst++;
 		}
 	    }
-	    if (endmask)
-	    {
+            if (endmask) {
 		bits = READ(src);
 		WRITE(dst, FbDoMaskMergeRop(bits, READ(dst), endmask));
 	    }
 	}
-	else
-	{
+        else {
 	    bits = 0;
 	    if (srcX > dstX)
 		bits = READ(src++);
-	    if (startmask)
-	    {
+            if (startmask) {
 		bits1 = FbScrLeft(bits, leftShift);
 		bits = READ(src++);
 		bits1 |= FbScrRight(bits, rightShift);
@@ -749,10 +638,8 @@ fbBltOdd (FbBits    *srcLine,
 		dst++;
 	    }
 	    n = nmiddle;
-	    if (destInvarient)
-	    {
-		while (n--)
-		{
+            if (destInvarient) {
+                while (n--) {
 		    bits1 = FbScrLeft(bits, leftShift);
 		    bits = READ(src++);
 		    bits1 |= FbScrRight(bits, rightShift);
@@ -760,10 +647,8 @@ fbBltOdd (FbBits    *srcLine,
 		    dst++;
 		}
 	    }
-	    else
-	    {
-		while (n--)
-		{
+            else {
+                while (n--) {
 		    bits1 = FbScrLeft(bits, leftShift);
 		    bits = READ(src++);
 		    bits1 |= FbScrRight(bits, rightShift);
@@ -771,11 +656,9 @@ fbBltOdd (FbBits    *srcLine,
 		    dst++;
 		}
 	    }
-	    if (endmask)
-	    {
+            if (endmask) {
 		bits1 = FbScrLeft(bits, leftShift);
-		if (FbScrLeft(endmask, rightShift))
-		{
+                if (FbScrLeft(endmask, rightShift)) {
 		    bits = READ(src);
 		    bits1 |= FbScrRight(bits, rightShift);
 		}
@@ -791,33 +674,22 @@ fbBltOdd24 (FbBits	*srcLine,
 	    FbStride	srcStrideOdd,
 	    int		srcXEven,
 	    int		srcXOdd,
-
 	    FbBits	*dstLine,
 	    FbStride	dstStrideEven,
 	    FbStride	dstStrideOdd,
-	    int		dstXEven,
-	    int		dstXOdd,
-
-	    int		width,
-	    int		height,
-
-	    int		alu,
-	    FbBits	pm)
+           int dstXEven, int dstXOdd, int width, int height, int alu, FbBits pm)
 {
     Bool    even = TRUE;
     
-    while (height--)
-    {
-	if (even)
-	{
+    while (height--) {
+        if (even) {
 	    fbBlt24Line (srcLine, srcXEven, dstLine, dstXEven,
 			 width, alu, pm, FALSE);
 	    srcLine += srcStrideEven;
 	    dstLine += dstStrideEven;
 	    even = FALSE;
 	}
-	else
-	{
+        else {
 	    fbBlt24Line (srcLine, srcXOdd, dstLine, dstXOdd,
 			 width, alu, pm, FALSE);
 	    srcLine += srcStrideOdd;
@@ -836,9 +708,7 @@ fbSetBltOdd (FbStip	*stip,
 	     int	srcX,
 	     FbBits	**bits,
 	     FbStride	*strideEven,
-	     FbStride	*strideOdd,
-	     int	*srcXEven,
-	     int	*srcXOdd)
+            FbStride * strideOdd, int *srcXEven, int *srcXOdd)
 {
     int	    srcAdjust;
     int	    strideAdjust;
@@ -853,16 +723,14 @@ fbSetBltOdd (FbStip	*stip,
     strideAdjust = stipStride & (FB_MASK >> FB_STIP_SHIFT);
 
     *bits = (FbBits *) ((char *) stip - srcAdjust);
-    if (srcAdjust)
-    {
+    if (srcAdjust) {
 	*strideEven = FbStipStrideToBitsStride (stipStride + 1);
 	*strideOdd = FbStipStrideToBitsStride (stipStride);
 
 	*srcXEven = srcX + (srcAdjust << 3);
 	*srcXOdd = srcX + (srcAdjust << 3) - (strideAdjust << FB_STIP_SHIFT);
     }
-    else
-    {
+    else {
 	*strideEven = FbStipStrideToBitsStride (stipStride);
 	*strideOdd = FbStipStrideToBitsStride (stipStride + 1);
 	
@@ -873,25 +741,13 @@ fbSetBltOdd (FbStip	*stip,
 #endif
 
 void
-fbBltStip (FbStip   *src,
-	   FbStride srcStride,	    /* in FbStip units, not FbBits units */
-	   int	    srcX,
-	   
-	   FbStip   *dst,
-	   FbStride dstStride,	    /* in FbStip units, not FbBits units */
-	   int	    dstX,
-
-	   int	    width, 
-	   int	    height,
-
-	   int	    alu,
-	   FbBits   pm,
-	   int	    bpp)
+fbBltStip(FbStip * src, FbStride srcStride,     /* in FbStip units, not FbBits units */
+          int srcX, FbStip * dst, FbStride dstStride,   /* in FbStip units, not FbBits units */
+          int dstX, int width, int height, int alu, FbBits pm, int bpp)
 {
 #if FB_STIP_SHIFT != FB_SHIFT
     if (FB_STIP_ODDSTRIDE(srcStride) || FB_STIP_ODDPTR(src) ||
-	FB_STIP_ODDSTRIDE(dstStride) || FB_STIP_ODDPTR(dst))
-    {
+        FB_STIP_ODDSTRIDE(dstStride) || FB_STIP_ODDPTR(dst)) {
 	FbStride    srcStrideEven, srcStrideOdd;
 	FbStride    dstStrideEven, dstStrideOdd;
 	int	    srcXEven, srcXOdd;
@@ -905,34 +761,22 @@ fbBltStip (FbStip   *src,
 	dstX &= FB_STIP_MASK;
 	
 	fbSetBltOdd (src, srcStride, srcX,
-		     &s,
-		     &srcStrideEven, &srcStrideOdd,
-		     &srcXEven, &srcXOdd);
+                    &s, &srcStrideEven, &srcStrideOdd, &srcXEven, &srcXOdd);
 		     
 	fbSetBltOdd (dst, dstStride, dstX,
-		     &d,
-		     &dstStrideEven, &dstStrideOdd,
-		     &dstXEven, &dstXOdd);
+                    &d, &dstStrideEven, &dstStrideOdd, &dstXEven, &dstXOdd);
 		     
-	if (bpp == 24 && !FbCheck24Pix (pm))
-	{
+        if (bpp == 24 && !FbCheck24Pix(pm)) {
 	    fbBltOdd24  (s, srcStrideEven, srcStrideOdd,
 			 srcXEven, srcXOdd,
-
 			 d, dstStrideEven, dstStrideOdd,
-			 dstXEven, dstXOdd,
-
-			 width, height, alu, pm);
+                       dstXEven, dstXOdd, width, height, alu, pm);
 	}
-	else
-	{
+        else {
 	    fbBltOdd (s, srcStrideEven, srcStrideOdd,
 		      srcXEven, srcXOdd,
-    
 		      d, dstStrideEven, dstStrideOdd,
-		      dstXEven, dstXOdd,
-    
-		      width, height, alu, pm, bpp);
+                     dstXEven, dstXOdd, width, height, alu, pm, bpp);
 	}
     }
     else
@@ -941,8 +785,6 @@ fbBltStip (FbStip   *src,
 	fbBlt ((FbBits *) src, FbStipStrideToBitsStride (srcStride), 
 	       srcX, 
 	       (FbBits *) dst, FbStipStrideToBitsStride (dstStride), 
-	       dstX, 
-	       width, height,
-	       alu, pm, bpp, FALSE, FALSE);
+              dstX, width, height, alu, pm, bpp, FALSE, FALSE);
     }
 }
