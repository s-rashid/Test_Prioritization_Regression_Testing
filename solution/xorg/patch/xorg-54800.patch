diff --git a/hw/xquartz/darwin.c b/hw/xquartz/darwin.c
index f9acf90..96c171a 100644
--- a/hw/xquartz/darwin.c
+++ b/hw/xquartz/darwin.c
@@ -2,7 +2,7 @@
  *
  * Xquartz initialization code
  *
- * Copyright (c) 2007-2008 Apple Inc.
+ * Copyright (c) 2007-2012 Apple Inc.
  * Copyright (c) 2001-2004 Torrey T. Lyons. All Rights Reserved.
  *
  * Permission is hereby granted, free of charge, to any person obtaining a
@@ -84,7 +84,8 @@ aslclient aslc;
 
 void
 xq_asl_log(int level, const char *subsystem, const char *file,
-           const char *function, int line, const char *fmt, ...)
+           const char *function, int line, const char *fmt,
+           ...)
 {
     va_list args;
     aslmsg msg = asl_new(ASL_TYPE_MSG);
@@ -119,7 +120,6 @@ DevPrivateKeyRec darwinScreenKeyRec;
 io_connect_t darwinParamConnect = 0;
 int darwinEventReadFD = -1;
 int darwinEventWriteFD = -1;
-
 // int                     darwinMouseAccelChange = 1;
 int darwinFakeButtons = 0;
 
@@ -163,7 +163,6 @@ static PixmapFormatRec formats[] = {
     {24, 32, BITMAP_SCANLINE_PAD},
     {32, 32, BITMAP_SCANLINE_PAD}
 };
-
 const int NUMFORMATS = sizeof(formats) / sizeof(formats[0]);
 
 void
@@ -182,12 +181,9 @@ static Bool
 DarwinSaveScreen(ScreenPtr pScreen, int on)
 {
     // FIXME
-    if (on == SCREEN_SAVER_FORCER) {
-    }
-    else if (on == SCREEN_SAVER_ON) {
-    }
-    else {
-    }
+    if (on == SCREEN_SAVER_FORCER) {}
+    else if (on == SCREEN_SAVER_ON) {}
+    else {}
     return TRUE;
 }
 
@@ -239,11 +235,13 @@ DarwinScreenInit(int index, ScreenPtr pScreen, int argc, char **argv)
 //        miSetVisualTypesAndMasks(8, PseudoColorMask, 8, PseudoColor, 0, 0, 0);
     if (dfb->depth > 15)
         miSetVisualTypesAndMasks(15, TrueColorMask, 5, TrueColor,
-                                 RM_ARGB(0, 5, 5, 5), GM_ARGB(0, 5, 5, 5),
+                                 RM_ARGB(0, 5, 5, 5), GM_ARGB(0, 5, 5,
+                                                              5),
                                  BM_ARGB(0, 5, 5, 5));
     if (dfb->depth > 24)
         miSetVisualTypesAndMasks(24, TrueColorMask, 8, TrueColor,
-                                 RM_ARGB(0, 8, 8, 8), GM_ARGB(0, 8, 8, 8),
+                                 RM_ARGB(0, 8, 8, 8), GM_ARGB(0, 8, 8,
+                                                              8),
                                  BM_ARGB(0, 8, 8, 8));
 
     miSetPixmapDepths();
@@ -256,12 +254,12 @@ DarwinScreenInit(int index, ScreenPtr pScreen, int argc, char **argv)
         dpi = 96;
 
     // initialize fb
-    if (!fbScreenInit(pScreen, dfb->framebuffer,        // pointer to screen bitmap
+    if (!fbScreenInit(pScreen,
+                      dfb->framebuffer,                  // pointer to screen bitmap
                       dfb->width, dfb->height,  // screen size in pixels
                       dpi, dpi, // dots per inch
                       dfb->pitch / (dfb->bitsPerPixel / 8),     // pixel width of framebuffer
-                      dfb->bitsPerPixel))       // bits per pixel for screen
-    {
+                      dfb->bitsPerPixel)) {              // bits per pixel for screen
         return FALSE;
     }
 
@@ -336,16 +334,21 @@ DarwinMouseProc(DeviceIntPtr pPointer, int what)
         InitPointerDeviceStruct((DevicePtr) pPointer, map, NBUTTONS,
                                 btn_labels,
                                 (PtrCtrlProcPtr) NoopDDA,
-                                GetMotionHistorySize(), NAXES, axes_labels);
+                                GetMotionHistorySize(), NAXES,
+                                axes_labels);
         InitValuatorAxisStruct(pPointer, 0, axes_labels[0], NO_AXIS_LIMITS,
-                               NO_AXIS_LIMITS, 1, 0, 1, Relative);
+                               NO_AXIS_LIMITS, 1, 0, 1,
+                               Relative);
         InitValuatorAxisStruct(pPointer, 1, axes_labels[1], NO_AXIS_LIMITS,
-                               NO_AXIS_LIMITS, 1, 0, 1, Relative);
+                               NO_AXIS_LIMITS, 1, 0, 1,
+                               Relative);
         break;
+
     case DEVICE_ON:
         pPointer->public.on = TRUE;
         AddEnabledDevice(darwinEventReadFD);
         return Success;
+
     case DEVICE_CLOSE:
     case DEVICE_OFF:
         pPointer->public.on = FALSE;
@@ -385,27 +388,35 @@ DarwinTabletProc(DeviceIntPtr pPointer, int what)
         InitPointerDeviceStruct((DevicePtr) pPointer, map, NBUTTONS,
                                 btn_labels,
                                 (PtrCtrlProcPtr) NoopDDA,
-                                GetMotionHistorySize(), NAXES, axes_labels);
+                                GetMotionHistorySize(), NAXES,
+                                axes_labels);
         InitProximityClassDeviceStruct(pPointer);
 
         InitValuatorAxisStruct(pPointer, 0, axes_labels[0], 0,
-                               XQUARTZ_VALUATOR_LIMIT, 1, 0, 1, Absolute);
+                               XQUARTZ_VALUATOR_LIMIT, 1, 0, 1,
+                               Absolute);
         InitValuatorAxisStruct(pPointer, 1, axes_labels[1], 0,
-                               XQUARTZ_VALUATOR_LIMIT, 1, 0, 1, Absolute);
+                               XQUARTZ_VALUATOR_LIMIT, 1, 0, 1,
+                               Absolute);
         InitValuatorAxisStruct(pPointer, 2, axes_labels[2], 0,
-                               XQUARTZ_VALUATOR_LIMIT, 1, 0, 1, Absolute);
+                               XQUARTZ_VALUATOR_LIMIT, 1, 0, 1,
+                               Absolute);
         InitValuatorAxisStruct(pPointer, 3, axes_labels[3],
-                               -XQUARTZ_VALUATOR_LIMIT, XQUARTZ_VALUATOR_LIMIT,
-                               1, 0, 1, Absolute);
+                               -XQUARTZ_VALUATOR_LIMIT,
+                               XQUARTZ_VALUATOR_LIMIT, 1, 0, 1,
+                               Absolute);
         InitValuatorAxisStruct(pPointer, 4, axes_labels[4],
-                               -XQUARTZ_VALUATOR_LIMIT, XQUARTZ_VALUATOR_LIMIT,
-                               1, 0, 1, Absolute);
+                               -XQUARTZ_VALUATOR_LIMIT,
+                               XQUARTZ_VALUATOR_LIMIT, 1, 0, 1,
+                               Absolute);
 //          pPointer->use = IsXExtensionDevice;
         break;
+
     case DEVICE_ON:
         pPointer->public.on = TRUE;
         AddEnabledDevice(darwinEventReadFD);
         return Success;
+
     case DEVICE_CLOSE:
     case DEVICE_OFF:
         pPointer->public.on = FALSE;
@@ -428,14 +439,17 @@ DarwinKeybdProc(DeviceIntPtr pDev, int onoff)
     case DEVICE_INIT:
         DarwinKeyboardInit(pDev);
         break;
+
     case DEVICE_ON:
         pDev->public.on = TRUE;
         AddEnabledDevice(darwinEventReadFD);
         break;
+
     case DEVICE_OFF:
         pDev->public.on = FALSE;
         RemoveEnabledDevice(darwinEventReadFD);
         break;
+
     case DEVICE_CLOSE:
         break;
     }
@@ -494,7 +508,8 @@ DarwinParseModifierList(const char *constmodifiers, int separatelr)
 void
 InitInput(int argc, char **argv)
 {
-    XkbRMLVOSet rmlvo = {.rules = "base",.model = "empty",.layout = "empty",
+    XkbRMLVOSet rmlvo = {
+        .rules   = "base", .model         = "empty", .layout = "empty",
         .variant = NULL,.options = NULL
     };
     /* We need to really have rules... or something... */
@@ -651,8 +666,8 @@ OsVendorInit(void)
     if (serverGeneration == 1) {
         char *lf;
         char *home = getenv("HOME");
-
         assert(home);
+        assert(0 < asprintf(&lf, "%s/Library/Logs/X11", home));
 
         /* Ignore errors.  If EEXIST, we don't care.  If anything else,
          * LogInit will handle it for us.
@@ -660,7 +675,9 @@ OsVendorInit(void)
         (void)mkdir(lf, S_IRWXU | S_IRWXG | S_IRWXO);
         free(lf);
 
-        assert(0 < asprintf(&lf, "%s/Library/Logs/X11/%s.log", home, bundle_id_prefix));
+        assert(0 <
+               asprintf(&lf, "%s/Library/Logs/X11/%s.log", home,
+                        bundle_id_prefix));
         LogInit(lf, ".old");
         free(lf);
 
@@ -668,15 +685,14 @@ OsVendorInit(void)
 #ifdef ENABLE_DEBUG_LOG
         {
             char *home_dir = NULL, *log_file_path = NULL;
-
             home_dir = getenv("HOME");
-            if (home_dir)
-                asprintf(&log_file_path, "%s/%s", home_dir, DEBUG_LOG_NAME);
+            if (home_dir) asprintf(&log_file_path, "%s/%s", home_dir,
+                                   DEBUG_LOG_NAME);
             if (log_file_path) {
                 if (!access(log_file_path, F_OK)) {
                     debug_log_fp = fopen(log_file_path, "a");
-                    if (debug_log_fp)
-                        ErrorF("Debug logging enabled to %s\n", log_file_path);
+                    if (debug_log_fp) ErrorF("Debug logging enabled to %s\n",
+                                             log_file_path);
                 }
                 free(log_file_path);
             }
@@ -764,7 +780,8 @@ ddxProcessArgument(int argc, char *argv[], int i)
         darwinDesiredDepth = atoi(argv[i + 1]);
         if (darwinDesiredDepth != -1 &&
             darwinDesiredDepth != 8 &&
-            darwinDesiredDepth != 15 && darwinDesiredDepth != 24) {
+            darwinDesiredDepth != 15 &&
+            darwinDesiredDepth != 24) {
             FatalError("Unsupported pixel depth. Use 8, 15, or 24 bits\n");
         }
 
@@ -793,15 +810,15 @@ ddxUseMsg(void)
     ErrorF("Device Dependent Usage:\n");
     ErrorF("\n");
     ErrorF("-depth <8,15,24> : use this bit depth.\n");
-    ErrorF
-        ("-fakebuttons : fake a three button mouse with Command and Option keys.\n");
+    ErrorF(
+        "-fakebuttons : fake a three button mouse with Command and Option keys.\n");
     ErrorF("-nofakebuttons : don't fake a three button mouse.\n");
-    ErrorF
-        ("-fakemouse2 <modifiers> : fake middle mouse button with modifier keys.\n");
-    ErrorF
-        ("-fakemouse3 <modifiers> : fake right mouse button with modifier keys.\n");
-    ErrorF
-        ("  ex: -fakemouse2 \"option,shift\" = option-shift-click is middle button.\n");
+    ErrorF(
+        "-fakemouse2 <modifiers> : fake middle mouse button with modifier keys.\n");
+    ErrorF(
+        "-fakemouse3 <modifiers> : fake right mouse button with modifier keys.\n");
+    ErrorF(
+        "  ex: -fakemouse2 \"option,shift\" = option-shift-click is middle button.\n");
     ErrorF("-version : show the server version.\n");
     ErrorF("\n");
 }
@@ -822,7 +839,8 @@ ddxGiveUp(enum ExitCode error)
  *      made to restore all original setting of the displays. Also all devices
  *      are closed.
  */
-_X_NORETURN void
+_X_NORETURN
+void
 AbortDDX(enum ExitCode error)
 {
     ErrorF("   AbortDDX\n");
