diff --git a/xkb/XKBAlloc.c b/xkb/XKBAlloc.c
index b70ac17..20e0459 100644
--- a/xkb/XKBAlloc.c
+++ b/xkb/XKBAlloc.c
@@ -40,8 +40,7 @@ THE USE OR PERFORMANCE OF THIS SOFTWARE.
 
 /***===================================================================***/
 
-/*ARGSUSED*/
-Status
+ /*ARGSUSED*/ Status
 XkbAllocCompatMap(XkbDescPtr xkb,unsigned which,unsigned nSI)
 {
 XkbCompatMapPtr	compat;
@@ -66,7 +65,8 @@ XkbSymInterpretRec *prev_interpret;
 	}
 	if (compat->num_si!=0) {
 	    memset(&compat->sym_interpret[compat->num_si], 0,
-		   (compat->size_si - compat->num_si) * sizeof(XkbSymInterpretRec));
+                   (compat->size_si -
+                    compat->num_si) * sizeof(XkbSymInterpretRec));
 	}
 	return Success;
     }
@@ -82,12 +82,12 @@ XkbSymInterpretRec *prev_interpret;
     }
     compat->size_si= nSI;
     compat->num_si= 0;
-    memset((char *)&compat->groups[0], 0, XkbNumKbdGroups*sizeof(XkbModsRec));
+    memset((char *) &compat->groups[0], 0,
+           XkbNumKbdGroups * sizeof(XkbModsRec));
     xkb->compat= compat;
     return Success;
 }
 
-
 void
 XkbFreeCompatMap(XkbDescPtr xkb,unsigned which,Bool freeMap)
 {
@@ -99,7 +99,8 @@ register XkbCompatMapPtr compat;
     if (freeMap)
 	which= XkbAllCompatMask;
     if (which&XkbGroupCompatMask)
-	memset((char *)&compat->groups[0], 0, XkbNumKbdGroups*sizeof(XkbModsRec));
+        memset((char *) &compat->groups[0], 0,
+               XkbNumKbdGroups * sizeof(XkbModsRec));
     if (which&XkbSymInterpMask) {
 	if ((compat->sym_interpret)&&(compat->size_si>0))
 	    free(compat->sym_interpret);
@@ -128,7 +129,8 @@ XkbNamesPtr	names;
 	    return BadAlloc;
     }
     names= xkb->names;
-    if ((which&XkbKTLevelNamesMask)&&(xkb->map!=NULL)&&(xkb->map->types!=NULL)){
+    if ((which & XkbKTLevelNamesMask) && (xkb->map != NULL) &&
+        (xkb->map->types != NULL)) {
 	register int	i;
 	XkbKeyTypePtr	type;
 
@@ -158,11 +160,14 @@ XkbNamesPtr	names;
 	    XkbKeyAliasRec *prev_aliases = names->key_aliases;
 
 	    names->key_aliases= realloc(names->key_aliases,
-					 nTotalAliases * sizeof(XkbKeyAliasRec));
+                                         nTotalAliases *
+                                         sizeof(XkbKeyAliasRec));
 	    if (names->key_aliases!=NULL) {
 		memset(&names->key_aliases[names->num_key_aliases], 0,
-			(nTotalAliases - names->num_key_aliases) * sizeof(XkbKeyAliasRec));
-	    } else {
+                       (nTotalAliases -
+                        names->num_key_aliases) * sizeof(XkbKeyAliasRec));
+            }
+            else {
 		free(prev_aliases);
 	    }
 	}
@@ -184,7 +189,8 @@ XkbNamesPtr	names;
 	    if (names->radio_groups!=NULL) {
 		memset(&names->radio_groups[names->num_rg], 0,
 			(nTotalRG - names->num_rg) * sizeof(Atom));
-	    } else {
+            }
+            else {
 		free(prev_radio_groups);
 	    }
 	}
@@ -207,9 +213,11 @@ XkbNamesPtr	names;
 	which= XkbAllNamesMask; 
     if (which&XkbKTLevelNamesMask) {
 	XkbClientMapPtr	map= xkb->map;
+
 	if ((map!=NULL)&&(map->types!=NULL)) {
 	    register int 		i;
 	    register XkbKeyTypePtr	type;
+
 	    type= map->types;
 	    for (i=0;i<map->num_types;i++,type++) {
 		free(type->level_names);
@@ -241,8 +249,7 @@ XkbNamesPtr	names;
 
 /***===================================================================***/
 
-/*ARGSUSED*/
-Status
+ /*ARGSUSED*/ Status
 XkbAllocControls(XkbDescPtr xkb,unsigned which)
 {
     if (xkb==NULL)
@@ -256,8 +263,7 @@ XkbAllocControls(XkbDescPtr xkb,unsigned which)
     return Success;
 }
 
-/*ARGSUSED*/
-static void
+ /*ARGSUSED*/ static void
 XkbFreeControls(XkbDescPtr xkb,unsigned which,Bool freeMap)
 {
     if (freeMap && (xkb!=NULL) && (xkb->ctrls!=NULL)) {
@@ -334,14 +340,12 @@ XkbFreeKeyboard(XkbDescPtr xkb,unsigned which,Bool freeAll)
     return;
 }
 
-
 /***====================================================================***/
 
 void
 XkbFreeComponentNames(XkbComponentNamesPtr names, Bool freeNames)
 {
-    if (names)
-    {
+    if (names) {
         free(names->keycodes);
         free(names->types);
         free(names->compat);
