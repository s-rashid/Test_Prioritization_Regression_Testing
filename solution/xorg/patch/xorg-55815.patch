diff --git a/hw/xquartz/xpr/xprCursor.c b/hw/xquartz/xpr/xprCursor.c
index 2b31865..b0afa8c 100644
--- a/hw/xquartz/xpr/xprCursor.c
+++ b/hw/xquartz/xpr/xprCursor.c
@@ -57,6 +57,7 @@ typedef struct {
 } QuartzCursorScreenRec, *QuartzCursorScreenPtr;
 
 static DevPrivateKeyRec darwinCursorScreenKeyRec;
+
 #define darwinCursorScreenKey (&darwinCursorScreenKeyRec)
 
 #define CURSOR_PRIV(pScreen) ((QuartzCursorScreenPtr) \
@@ -85,14 +86,14 @@ load_cursor(CursorPtr src, int screen)
     hot_y = src->bits->yhot;
 
 #ifdef ARGB_CURSOR
-    if (src->bits->argb != NULL)
-    {
+    if (src->bits->argb != NULL) {
 #if BITMAP_BIT_ORDER == MSBFirst
         rowbytes = src->bits->width * sizeof (CARD32);
         data = (uint32_t *) src->bits->argb;
 #else
         const uint32_t *be_data=(uint32_t *) src->bits->argb;
         unsigned i;
+
         rowbytes = src->bits->width * sizeof (CARD32);
         data = malloc(rowbytes * src->bits->height);
         free_data = TRUE;
@@ -127,38 +128,39 @@ load_cursor(CursorPtr src, int screen)
             FatalError("Failed to allocate memory in %s\n", __func__);
         }
         
-        if (!src->bits->emptyMask)
-        {
+        if (!src->bits->emptyMask) {
             ycount = src->bits->height;
-            srow = src->bits->source; mrow = src->bits->mask;
+            srow = src->bits->source;
+            mrow = src->bits->mask;
             drow = data;
 
-            while (ycount-- > 0)
-            {
+            while (ycount-- > 0) {
                 xcount = bits_to_bytes(src->bits->width);
-                sptr = srow; mptr = mrow;
+                sptr = srow;
+                mptr = mrow;
                 dptr = drow;
 
-                while (xcount-- > 0)
-                {
+                while (xcount-- > 0) {
                     uint8_t s, m;
                     int i;
 
-                    s = *sptr++; m = *mptr++;
-                    for (i = 0; i < 8; i++)
-                    {
+                    s = *sptr++;
+                    m = *mptr++;
+                    for (i = 0; i < 8; i++) {
 #if BITMAP_BIT_ORDER == MSBFirst
                         if (m & 128)
                             *dptr++ = (s & 128) ? fg_color : bg_color;
                         else
                             *dptr++ = 0;
-                        s <<= 1; m <<= 1;
+                        s <<= 1;
+                        m <<= 1;
 #else
                         if (m & 1)
                             *dptr++ = (s & 1) ? fg_color : bg_color;
                         else
                             *dptr++ = 0;
-                        s >>= 1; m >>= 1;
+                        s >>= 1;
+                        m >>= 1;
 #endif
                     }
                 }
@@ -168,8 +170,7 @@ load_cursor(CursorPtr src, int screen)
                 drow = (uint32_t *) ((char *) drow + rowbytes);
             }
         }
-        else
-        {
+        else {
             memset(data, 0, src->bits->height * rowbytes);
         }
     }
@@ -180,7 +181,6 @@ load_cursor(CursorPtr src, int screen)
     return err == Success;
 }
 
-
 /*
 ===========================================================================
 
@@ -204,7 +204,6 @@ QuartzRealizeCursor(DeviceIntPtr pDev, ScreenPtr pScreen, CursorPtr pCursor)
     return TRUE;
 }
 
-
 /*
  * QuartzUnrealizeCursor
  *  Free the storage space associated with a realized cursor.
@@ -215,33 +214,29 @@ QuartzUnrealizeCursor(DeviceIntPtr pDev, ScreenPtr pScreen, CursorPtr pCursor)
     return TRUE;
 }
 
-
 /*
  * QuartzSetCursor
  *  Set the cursor sprite and position.
  */
 static void
-QuartzSetCursor(DeviceIntPtr pDev, ScreenPtr pScreen, CursorPtr pCursor, int x, int y)
+QuartzSetCursor(DeviceIntPtr pDev, ScreenPtr pScreen, CursorPtr pCursor, int x,
+                int y)
 {
     QuartzCursorScreenPtr ScreenPriv = CURSOR_PRIV(pScreen);
 
     if (!XQuartzServerVisible)
         return;
 
-    if (pCursor == NULL)
-    {
-        if (ScreenPriv->cursorVisible)
-        {
+    if (pCursor == NULL) {
+        if (ScreenPriv->cursorVisible) {
             xp_hide_cursor();
             ScreenPriv->cursorVisible = FALSE;
         }
     }
-    else
-    {
+    else {
         load_cursor(pCursor, pScreen->myNum);
 
-        if (!ScreenPriv->cursorVisible)
-        {
+        if (!ScreenPriv->cursorVisible) {
             xp_show_cursor();
             ScreenPriv->cursorVisible = TRUE;
         }
@@ -274,7 +269,6 @@ QuartzCursorOffScreen(ScreenPtr *pScreen, int *x, int *y)
     return FALSE;
 }
 
-
 /*
  * QuartzCrossScreen
  */
@@ -284,7 +278,6 @@ QuartzCrossScreen(ScreenPtr pScreen, Bool entering)
     return;
 }
 
-
 /*
  * QuartzWarpCursor
  *  Change the cursor position without generating an event or motion history.
@@ -294,8 +287,7 @@ QuartzCrossScreen(ScreenPtr pScreen, Bool entering)
 static void
 QuartzWarpCursor(DeviceIntPtr pDev, ScreenPtr pScreen, int x, int y)
 {
-    if (XQuartzServerVisible)
-    {
+    if (XQuartzServerVisible) {
         int sx, sy;
 
         sx = pScreen->x + darwinMainScreenX;
@@ -308,7 +300,6 @@ QuartzWarpCursor(DeviceIntPtr pDev, ScreenPtr pScreen, int x, int y)
     miPointerUpdateSprite(pDev);
 }
 
-
 static miPointerScreenFuncRec quartzScreenFuncsRec = {
     QuartzCursorOffScreen,
     QuartzCrossScreen,
@@ -317,7 +308,6 @@ static miPointerScreenFuncRec quartzScreenFuncsRec = {
     NULL
 };
 
-
 /*
 ===========================================================================
 
@@ -336,14 +326,12 @@ QuartzCursorQueryBestSize(int class, unsigned short *width,
 {
     QuartzCursorScreenPtr ScreenPriv = CURSOR_PRIV(pScreen);
 
-    if (class == CursorShape)
-    {
+    if (class == CursorShape) {
         /* FIXME: query window server? */
         *width = 32;
         *height = 32;
     }
-    else
-    {
+    else {
         (*ScreenPriv->QueryBestSize)(class, width, height, pScreen);
     }
 }
@@ -398,7 +386,6 @@ QuartzSuspendXCursor(ScreenPtr pScreen)
 {
 }
 
-
 /*
  * QuartzResumeXCursor
  *  X server is showing. Restore the X cursor.
