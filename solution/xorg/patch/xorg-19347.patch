diff --git a/Xi/exevents.c b/Xi/exevents.c
index 4bd5798..9645934 100644
--- a/Xi/exevents.c
+++ b/Xi/exevents.c
@@ -1,4 +1,3 @@
-/* $Xorg: exevents.c,v 1.4 2001/02/09 02:04:33 xorgcvs Exp $ */
 /************************************************************
 
 Copyright 1989, 1998  The Open Group
@@ -44,7 +43,6 @@ ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
 SOFTWARE.
 
 ********************************************************/
-/* $XFree86: xc/programs/Xserver/Xi/exevents.c,v 3.10 2001/12/14 19:58:55 dawes Exp $ */
 
 /********************************************************************
  *
@@ -85,12 +83,10 @@ SOFTWARE.
 #define Motion_Filter(class) (DevicePointerMotionMask | \
 			      (class)->state | (class)->motionMask)
 
-static Bool		ShouldFreeInputMasks(
-				WindowPtr /* pWin */,
+static Bool ShouldFreeInputMasks(WindowPtr /* pWin */ ,
 				Bool /* ignoreSelectedEvents */
 				);
-static Bool		MakeInputMasks (
-				WindowPtr /* pWin */
+static Bool MakeInputMasks(WindowPtr	/* pWin */
 				);
 
 /**************************************************************************
@@ -108,8 +104,7 @@ RegisterOtherDevice (DeviceIntPtr device)
     (device)->DeactivateGrab = DeactivateKeyboardGrab;
     }
 
-/*ARGSUSED*/
-void
+ /*ARGSUSED*/ void
 ProcessOtherEvent (xEventPtr xE, register DeviceIntPtr other, int count)
     {
     register BYTE   	*kptr;
@@ -134,28 +129,30 @@ ProcessOtherEvent (xEventPtr xE, register DeviceIntPtr other, int count)
 		    inputInfo.pointer->button->state;
         bit = 1 << (key & 7);
     }
-    if (DeviceEventCallback)
-    {
+    if (DeviceEventCallback) {
 	DeviceEventInfoRec eventinfo;
+
 	eventinfo.events = (xEventPtr) xE;
 	eventinfo.count = count;
 	CallCallbacks(&DeviceEventCallback, (pointer)&eventinfo);
     }
     for (i=1; i<count; i++)
-	if ((++xV)->type == DeviceValuator)
-	    {
+	if ((++xV)->type == DeviceValuator) {
 	    int first = xV->first_valuator;
 	    int *axisvals;
 
-	    if (xV->num_valuators && (!v || (xV->num_valuators && (first + xV->num_valuators > v->numAxes))))
-		FatalError("Bad valuators reported for device %s\n",other->name);
+	    if (xV->num_valuators
+		&& (!v
+		    || (xV->num_valuators
+			&& (first + xV->num_valuators > v->numAxes))))
+		FatalError("Bad valuators reported for device %s\n",
+			   other->name);
 	    xV->device_state = 0;
 	    if (k)
 		xV->device_state |= k->state;
 	    if (b)
 	        xV->device_state |= b->state;
-	    if (v && v->axisVal)
-		{
+	    if (v && v->axisVal) {
 	        axisvals = v->axisVal;
 	        switch (xV->num_valuators) {
 		    case 6:
@@ -177,14 +174,11 @@ ProcessOtherEvent (xEventPtr xE, register DeviceIntPtr other, int count)
 		}
 	    }
     
-    if (xE->u.u.type == DeviceKeyPress)
-	{
+    if (xE->u.u.type == DeviceKeyPress) {
 	modifiers = k->modifierMap[key];
         kptr = &k->down[key >> 3];
-	if (*kptr & bit) /* allow ddx to generate multiple downs */
-	    {   
-	    if (!modifiers)
-		{
+	if (*kptr & bit) {	/* allow ddx to generate multiple downs */
+	    if (!modifiers) {
 		xE->u.u.type = DeviceKeyRelease;
 		ProcessOtherEvent(xE, other, count);
 		xE->u.u.type = DeviceKeyPress;
@@ -197,24 +191,19 @@ ProcessOtherEvent (xEventPtr xE, register DeviceIntPtr other, int count)
 	    other->valuator->motionHintWindow = NullWindow;
 	*kptr |= bit;
 	k->prev_state = k->state;
-	for (i = 0, mask = 1; modifiers; i++, mask <<= 1)
-	    {
-	    if (mask & modifiers) 
-	        {
+	for (i = 0, mask = 1; modifiers; i++, mask <<= 1) {
+	    if (mask & modifiers) {
 		/* This key affects modifier "i" */
 		k->modifierKeyCount[i]++;
 		k->state |= mask;
 		modifiers &= ~mask;
 		}
 	    }
-	if (!grab && CheckDeviceGrabs(other, xE, 0, count))
-	    {
+	if (!grab && CheckDeviceGrabs(other, xE, 0, count)) {
 	    other->activatingKey = key;
 	    return;
 	    }
-	}
-    else if (xE->u.u.type == DeviceKeyRelease)
-	{
+    } else if (xE->u.u.type == DeviceKeyRelease) {
         kptr = &k->down[key >> 3];
 	if (!(*kptr & bit)) /* guard against duplicates */
 	    return;
@@ -223,13 +212,10 @@ ProcessOtherEvent (xEventPtr xE, register DeviceIntPtr other, int count)
 	    other->valuator->motionHintWindow = NullWindow;
 	*kptr &= ~bit;
 	k->prev_state = k->state;
-	for (i = 0, mask = 1; modifiers; i++, mask <<= 1)
-	    {
-	    if (mask & modifiers) 
-	        {
+	for (i = 0, mask = 1; modifiers; i++, mask <<= 1) {
+	    if (mask & modifiers) {
 		/* This key affects modifier "i" */
-		if (--k->modifierKeyCount[i] <= 0) 
-		    {
+		if (--k->modifierKeyCount[i] <= 0) {
 		    k->modifierKeyCount[i] = 0;
 		    k->state &= ~mask;
 		    }
@@ -239,9 +225,7 @@ ProcessOtherEvent (xEventPtr xE, register DeviceIntPtr other, int count)
 
 	if (other->fromPassiveGrab && (key == other->activatingKey))
 	    deactivateDeviceGrab = TRUE;
-	}
-    else if (xE->u.u.type == DeviceButtonPress)
-	{
+    } else if (xE->u.u.type == DeviceButtonPress) {
         kptr = &b->down[key >> 3];
 	*kptr |= bit;
 	if (other->valuator)
@@ -258,9 +242,7 @@ ProcessOtherEvent (xEventPtr xE, register DeviceIntPtr other, int count)
 	    if (CheckDeviceGrabs(other, xE, 0, count))
 		return;
 
-	}
-    else if (xE->u.u.type == DeviceButtonRelease)
-	{
+    } else if (xE->u.u.type == DeviceButtonRelease) {
         kptr = &b->down[key >> 3];
 	*kptr &= ~bit;
 	if (other->valuator)
@@ -275,8 +257,7 @@ ProcessOtherEvent (xEventPtr xE, register DeviceIntPtr other, int count)
 	SetMaskForEvent(Motion_Filter(b),DeviceMotionNotify);
 	if (!b->state && other->fromPassiveGrab)
 	    deactivateDeviceGrab = TRUE;
-	}
-    else if (xE->u.u.type == ProximityIn)
+    } else if (xE->u.u.type == ProximityIn)
 	other->valuator->mode &= ~OutOfProximity;
     else if (xE->u.u.type == ProximityOut)
 	other->valuator->mode |= OutOfProximity;
@@ -334,19 +315,18 @@ FixDeviceStateNotify (DeviceIntPtr dev, deviceStateNotify *ev, KeyClassPtr k,
 	ev->classes_reported |= (1 << ButtonClass);
 	ev->num_buttons = b->numButtons;
 	memmove((char *) &ev->buttons[0], (char *) b->down, 4);
-	}
-    else if (k) {
+    } else if (k) {
 	ev->classes_reported |= (1 << KeyClass);
 	ev->num_keys = k->curKeySyms.maxKeyCode - k->curKeySyms.minKeyCode;
 	memmove((char *) &ev->keys[0], (char *) k->down, 4);
 	}
     if (v) {
 	int nval = v->numAxes - first;
+
 	ev->classes_reported |= (1 << ValuatorClass);
 	ev->classes_reported |= (dev->valuator->mode << ModeBitsShift);
 	ev->num_valuators = nval < 3 ? nval : 3;
-	switch (ev->num_valuators) 
-	    {
+	switch (ev->num_valuators) {
 	    case 3:
 		ev->valuator2 = v->axisVal[first+2];
 	    case 2:
@@ -511,25 +491,20 @@ GrabButton(ClientPtr client, DeviceIntPtr dev, BYTE this_device_mode,
     GrabPtr grab;
 
     if ((this_device_mode != GrabModeSync) &&
-	(this_device_mode != GrabModeAsync))
-    {
+	(this_device_mode != GrabModeAsync)) {
 	client->errorValue = this_device_mode;
         return BadValue;
     }
     if ((other_devices_mode != GrabModeSync) &&
-	(other_devices_mode != GrabModeAsync))
-    {
+	(other_devices_mode != GrabModeAsync)) {
 	client->errorValue = other_devices_mode;
         return BadValue;
     }
-    if ((modifiers != AnyModifier) &&
-	(modifiers & ~AllModifiersMask))
-    {
+    if ((modifiers != AnyModifier) && (modifiers & ~AllModifiersMask)) {
 	client->errorValue = modifiers;
 	return BadValue;
     }
-    if ((ownerEvents != xFalse) && (ownerEvents != xTrue))
-    {
+    if ((ownerEvents != xFalse) && (ownerEvents != xTrue)) {
 	client->errorValue = ownerEvents;
 	return BadValue;
     }
@@ -538,28 +513,25 @@ GrabButton(ClientPtr client, DeviceIntPtr dev, BYTE this_device_mode,
 	return BadWindow;
     if (rconfineTo == None)
 	confineTo = NullWindow;
-    else
-    {
+    else {
 	confineTo = LookupWindow(rconfineTo, client);
 	if (!confineTo)
 	    return BadWindow;
     }
     if (rcursor == None)
 	cursor = NullCursor;
-    else
-    {
+    else {
 	cursor = (CursorPtr)LookupIDByType(rcursor, RT_CURSOR);
-	if (!cursor)
-	{
+	if (!cursor) {
 	    client->errorValue = rcursor;
 	    return BadCursor;
 	}
     }
 
     grab = CreateGrab(client->index, dev, pWin, eventMask,
-	(Bool)ownerEvents, (Bool) this_device_mode, (Bool)other_devices_mode,
-	modifier_device, modifiers, DeviceButtonPress, button, confineTo, 
-	cursor);
+		      (Bool) ownerEvents, (Bool) this_device_mode,
+		      (Bool) other_devices_mode, modifier_device, modifiers,
+		      DeviceButtonPress, button, confineTo, cursor);
     if (!grab)
 	return BadAlloc;
     return AddPassiveGrabToList(grab);
@@ -577,32 +549,25 @@ GrabKey(ClientPtr client, DeviceIntPtr dev, BYTE this_device_mode,
     if (k==NULL)
 	return BadMatch;
     if ((other_devices_mode != GrabModeSync) &&
-	(other_devices_mode != GrabModeAsync))
-    {
+	(other_devices_mode != GrabModeAsync)) {
 	client->errorValue = other_devices_mode;
         return BadValue;
     }
     if ((this_device_mode != GrabModeSync) &&
-	(this_device_mode != GrabModeAsync))
-    {
+	(this_device_mode != GrabModeAsync)) {
 	client->errorValue = this_device_mode;
         return BadValue;
     }
-    if (((key > k->curKeySyms.maxKeyCode) || 
-	 (key < k->curKeySyms.minKeyCode))
-	&& (key != AnyKey))
-    {
+    if (((key > k->curKeySyms.maxKeyCode) || (key < k->curKeySyms.minKeyCode))
+	&& (key != AnyKey)) {
 	client->errorValue = key;
         return BadValue;
     }
-    if ((modifiers != AnyModifier) &&
-	(modifiers & ~AllModifiersMask))
-    {
+    if ((modifiers != AnyModifier) && (modifiers & ~AllModifiersMask)) {
 	client->errorValue = modifiers;
 	return BadValue;
     }
-    if ((ownerEvents != xTrue) && (ownerEvents != xFalse))
-    {
+    if ((ownerEvents != xTrue) && (ownerEvents != xFalse)) {
 	client->errorValue = ownerEvents;
         return BadValue;
     }
@@ -612,8 +577,8 @@ GrabKey(ClientPtr client, DeviceIntPtr dev, BYTE this_device_mode,
 
     grab = CreateGrab(client->index, dev, pWin, 
 	mask, ownerEvents, this_device_mode, other_devices_mode, 
-	modifier_device, modifiers, DeviceKeyPress, key, NullWindow, 
-	NullCursor);
+		      modifier_device, modifiers, DeviceKeyPress, key,
+		      NullWindow, NullCursor);
     if (!grab)
 	return BadAlloc;
     return AddPassiveGrabToList(grab);
@@ -628,43 +593,35 @@ SelectForWindow(DeviceIntPtr dev, WindowPtr pWin, ClientPtr client, Mask mask,
     Mask check;
     InputClientsPtr others;
 
-    if (mask & ~validmasks)
-    {
+    if (mask & ~validmasks) {
 	client->errorValue = mask;
 	return BadValue;
     }
     check = (mask & exclusivemasks);
-    if (wOtherInputMasks(pWin))
-	{
-	if (check & wOtherInputMasks(pWin)->inputEvents[mskidx])
-	    {			       /* It is illegal for two different
-				          clients to select on any of the
-				          events for maskcheck. However,
-				          it is OK, for some client to
-				          continue selecting on one of those
-				          events.  */
+    if (wOtherInputMasks(pWin)) {
+	if (check & wOtherInputMasks(pWin)->inputEvents[mskidx]) {	/* It is illegal for two different
+									 * clients to select on any of the
+									 * events for maskcheck. However,
+									 * it is OK, for some client to
+									 * continue selecting on one of those
+									 * events.  */
 	    for (others = wOtherInputMasks(pWin)->inputClients; others; 
-		others = others->next)
-	        {
+		 others = others->next) {
 	        if (!SameClient(others, client) && (check & 
 		    others->mask[mskidx]))
 		    return BadAccess;
 	        }
             }
 	for (others = wOtherInputMasks(pWin)->inputClients; others; 
-		others = others->next)
-	    {
-	    if (SameClient(others, client))
-	        {
+	     others = others->next) {
+	    if (SameClient(others, client)) {
 		check = others->mask[mskidx];
 		others->mask[mskidx] = mask;
-		if (mask == 0)
-		    {
+		if (mask == 0) {
 		    for (i=0; i<EMASKSIZE; i++)
 			if (i != mskidx && others->mask[i] != 0)
 			    break;
-		    if (i == EMASKSIZE)
-			{
+		    if (i == EMASKSIZE) {
 			RecalculateDeviceDeliverableEvents(pWin);
 			if (ShouldFreeInputMasks(pWin, FALSE))
 			    FreeResource(others->resource, RT_NONE);
@@ -682,8 +639,7 @@ maskSet:
     if (dev->valuator)
 	if ((dev->valuator->motionHintWindow == pWin) &&
 	    (mask & DevicePointerMotionHintMask) &&
-	    !(check & DevicePointerMotionHintMask) &&
-	    !dev->grab)
+	    !(check & DevicePointerMotionHintMask) && !dev->grab)
 	    dev->valuator->motionHintWindow = NullWindow;
     RecalculateDeviceDeliverableEvents(pWin);
     return Success;
@@ -734,13 +690,10 @@ RecalculateDeviceDeliverableEvents(WindowPtr pWin)
     int i;
 
     pChild = pWin;
-    while (1)
-	{
-	if ((inputMasks = wOtherInputMasks(pChild)) != 0)
-	    {
+    while (1) {
+	if ((inputMasks = wOtherInputMasks(pChild)) != 0) {
 	    for (others = inputMasks->inputClients; others; 
-		others = others->next)
-		{
+		 others = others->next) {
 		for (i=0; i<EMASKSIZE; i++)
 		    inputMasks->inputEvents[i] |= others->mask[i];
 		}
@@ -751,10 +704,10 @@ RecalculateDeviceDeliverableEvents(WindowPtr pWin)
 		    for (i=0; i<EMASKSIZE; i++)
 			inputMasks->deliverableEvents[i] |=
 			(wOtherInputMasks(tmp)->deliverableEvents[i] 
-			& ~inputMasks->dontPropagateMask[i] & PropagateMask[i]);
+			     & ~inputMasks->
+			     dontPropagateMask[i] & PropagateMask[i]);
 	    }
-	if (pChild->firstChild)
-	    {
+	if (pChild->firstChild) {
 	    pChild = pChild->firstChild;
 	    continue;
 	    }
@@ -770,39 +723,30 @@ int
 InputClientGone(register WindowPtr pWin, XID id)
     {
     register InputClientsPtr other, prev;
+
     if (!wOtherInputMasks(pWin))
 	return(Success);
     prev = 0;
     for (other = wOtherInputMasks(pWin)->inputClients; other; 
-	other = other->next)
-	{
-	if (other->resource == id)
-	    {
-	    if (prev)
-		{
+	 other = other->next) {
+	if (other->resource == id) {
+	    if (prev) {
 		prev->next = other->next;
 		xfree(other);
-		}
-	    else if (!(other->next))
-		{
-	        if (ShouldFreeInputMasks(pWin, TRUE))
-		    {
+	    } else if (!(other->next)) {
+		if (ShouldFreeInputMasks(pWin, TRUE)) {
 		    wOtherInputMasks(pWin)->inputClients = other->next;
 		    xfree(wOtherInputMasks(pWin));
 		    pWin->optional->inputMasks = (OtherInputMasks *) NULL;
 		    CheckWindowOptionalNeed (pWin);
 		    xfree(other);
-		    }
-		else
-		    {
+		} else {
 		    other->resource = FakeClientID(0);
 		    if (!AddResource(other->resource, RT_INPUTCLIENT, 
 			(pointer)pWin))
 			return BadAlloc;
 		    }
-		}
-	    else
-		{
+	    } else {
 		wOtherInputMasks(pWin)->inputClients = other->next;
 		xfree(other);
 		}
@@ -824,8 +768,7 @@ SendEvent(ClientPtr client, DeviceIntPtr d, Window dest, Bool propagate,
 
     if (dest == PointerWindow)
 	pWin = spriteWin;
-    else if (dest == InputFocus)
-    {
+    else if (dest == InputFocus) {
 	WindowPtr inputFocus;
 	
 	if (!d->focus)
@@ -840,32 +783,26 @@ SendEvent(ClientPtr client, DeviceIntPtr d, Window dest, Bool propagate,
 	    return Success;
 
 	/* If the input focus is PointerRootWin, send the event to where
-	the pointer is if possible, then perhaps propogate up to root. */
+	 * the pointer is if possible, then perhaps propogate up to root. */
    	if (inputFocus == PointerRootWin)
 	    inputFocus = GetCurrentRootWindow();
 
-	if (IsParent(inputFocus, spriteWin))
-	{
+	if (IsParent(inputFocus, spriteWin)) {
 	    effectiveFocus = inputFocus;
 	    pWin = spriteWin;
-	}
-	else
+	} else
 	    effectiveFocus = pWin = inputFocus;
-    }
-    else
+    } else
 	pWin = LookupWindow(dest, client);
     if (!pWin)
 	return BadWindow;
-    if ((propagate != xFalse) && (propagate != xTrue))
-    {
+    if ((propagate != xFalse) && (propagate != xTrue)) {
 	client->errorValue = propagate;
 	return BadValue;
     }
     ev->u.u.type |= 0x80;
-    if (propagate)
-    {
-	for (;pWin; pWin = pWin->parent)
-	{
+    if (propagate) {
+	for (; pWin; pWin = pWin->parent) {
 	    if (DeliverEventsToWindow( pWin, ev, count, mask, NullGrab, d->id))
 		return Success;
 	    if (pWin == effectiveFocus)
@@ -875,8 +812,7 @@ SendEvent(ClientPtr client, DeviceIntPtr d, Window dest, Bool propagate,
 	    if (!mask)
 		break;
 	}
-    }
-    else
+    } else
 	(void)(DeliverEventsToWindow( pWin, ev, count, mask, NullGrab, d->id));
     return Success;
     }
@@ -890,16 +826,14 @@ SetButtonMapping (ClientPtr client, DeviceIntPtr dev, int nElts, BYTE *map)
     if (b == NULL)
 	return BadMatch;
 
-    if (nElts != b->numButtons)
-    {
+    if (nElts != b->numButtons) {
 	client->errorValue = nElts;
 	return BadValue;
     }
     if (BadDeviceMap(&map[0], nElts, 1, 255, &client->errorValue))
 	return BadValue;
     for (i=0; i < nElts; i++)
-	if ((b->map[i + 1] != map[i]) &&
-		BitIsOn(b->down, i + 1))
+	if ((b->map[i + 1] != map[i]) && BitIsOn(b->down, i + 1))
     	    return MappingBusy;
     for (i = 0; i < nElts; i++)
 	b->map[i + 1] = map[i];
@@ -943,10 +877,11 @@ SetModifierMapping(ClientPtr client, DeviceIntPtr dev, int len, int rlen,
      *	that the DDX layer likes the choice.
      */
     if (!AllModifierKeysAreUp (dev, (*k)->modifierKeyMap, 
-	(int)(*k)->maxKeysPerModifier, inputMap, (int)numKeyPerModifier)
-	    ||
-	!AllModifierKeysAreUp(dev, inputMap, (int)numKeyPerModifier,
-	      (*k)->modifierKeyMap, (int)(*k)->maxKeysPerModifier)) {
+			      (int)(*k)->maxKeysPerModifier, inputMap,
+			      (int)numKeyPerModifier)
+	|| !AllModifierKeysAreUp(dev, inputMap, (int)numKeyPerModifier,
+				 (*k)->modifierKeyMap,
+				 (int)(*k)->maxKeysPerModifier)) {
 	return MappingBusy;
     } else {
 	for (i = 0; i < inputMapLen; i++) {
@@ -976,7 +911,8 @@ SetModifierMapping(ClientPtr client, DeviceIntPtr dev, int len, int rlen,
     (*k)->maxKeysPerModifier = numKeyPerModifier;
     for (i = 0; i < MAP_LENGTH; i++)
         (*k)->modifierMap[i] = 0;
-    for (i = 0; i < inputMapLen; i++) if (inputMap[i]) {
+    for (i = 0; i < inputMapLen; i++)
+	if (inputMap[i]) {
         (*k)->modifierMap[inputMap[i]]
           |= (1<<(i/ (*k)->maxKeysPerModifier));
     }
@@ -985,11 +921,8 @@ SetModifierMapping(ClientPtr client, DeviceIntPtr dev, int len, int rlen,
     }
 
 void
-SendDeviceMappingNotify(
-    CARD8 request,
-    KeyCode firstKeyCode,
-    CARD8 count,
-    DeviceIntPtr dev)
+SendDeviceMappingNotify(CARD8 request,
+			KeyCode firstKeyCode, CARD8 count, DeviceIntPtr dev)
 {
     xEvent event;
     deviceMappingNotify         *ev = (deviceMappingNotify *) &event;
@@ -998,8 +931,7 @@ SendDeviceMappingNotify(
     ev->request = request;
     ev->deviceid = dev->id;
     ev->time = currentTime.milliseconds;
-    if (request == MappingKeyboard)
-	{
+    if (request == MappingKeyboard) {
 	ev->firstKeyCode = firstKeyCode;
 	ev->count = count;
 	}
@@ -1008,15 +940,12 @@ SendDeviceMappingNotify(
     }
 
 int
-ChangeKeyMapping(
-    ClientPtr 	client,
+ChangeKeyMapping(ClientPtr client,
     DeviceIntPtr dev,
     unsigned 	len,
     int 	type,
     KeyCode 	firstKeyCode,
-    CARD8 	keyCodes,
-    CARD8 	keySymsPerKeyCode,
-    KeySym	*map)
+		 CARD8 keyCodes, CARD8 keySymsPerKeyCode, KeySym * map)
 {
     KeySymsRec keysyms;
     KeyClassPtr k = dev->key;
@@ -1028,13 +957,11 @@ ChangeKeyMapping(
             return BadLength;
 
     if ((firstKeyCode < k->curKeySyms.minKeyCode) ||
-	(firstKeyCode + keyCodes - 1 > k->curKeySyms.maxKeyCode))
-    {
+	(firstKeyCode + keyCodes - 1 > k->curKeySyms.maxKeyCode)) {
 	    client->errorValue = firstKeyCode;
 	    return BadValue;
     }
-    if (keySymsPerKeyCode == 0)
-    {
+    if (keySymsPerKeyCode == 0) {
 	    client->errorValue = 0;
             return BadValue;
     }
@@ -1044,8 +971,7 @@ ChangeKeyMapping(
     keysyms.map = map;
     if (!SetKeySymsMap(&k->curKeySyms, &keysyms))
 	return BadAlloc;
-    SendDeviceMappingNotify(MappingKeyboard, firstKeyCode, keyCodes,
-	dev);
+    SendDeviceMappingNotify(MappingKeyboard, firstKeyCode, keyCodes, dev);
     return client->noClientException;
     }
 
@@ -1057,10 +983,8 @@ DeleteWindowFromAnyExtEvents(WindowPtr pWin, Bool freeResources)
     InputClientsPtr	ic;
     struct _OtherInputMasks *inputMasks;
 
-    for (dev=inputInfo.devices; dev; dev=dev->next)
-	{
-	if (dev == inputInfo.pointer ||
-	    dev == inputInfo.keyboard)
+    for (dev = inputInfo.devices; dev; dev = dev->next) {
+	if (dev == inputInfo.pointer || dev == inputInfo.keyboard)
 	    continue;
 	DeleteDeviceFromAnyExtEvents(pWin, dev);
 	}
@@ -1069,8 +993,7 @@ DeleteWindowFromAnyExtEvents(WindowPtr pWin, Bool freeResources)
 	DeleteDeviceFromAnyExtEvents(pWin, dev);
 
     if (freeResources)
-	while ((inputMasks = wOtherInputMasks(pWin)) != 0)
-	    {
+	while ((inputMasks = wOtherInputMasks(pWin)) != 0) {
 	    ic = inputMasks->inputClients;
 	    for (i=0; i<EMASKSIZE; i++)
 		inputMasks->dontPropagateMask[i] = 0;
@@ -1084,17 +1007,16 @@ DeleteDeviceFromAnyExtEvents(WindowPtr pWin, DeviceIntPtr dev)
     WindowPtr		parent;
 
     /* Deactivate any grabs performed on this window, before making
-	any input focus changes.
-        Deactivating a device grab should cause focus events. */
+     * any input focus changes.
+     * Deactivating a device grab should cause focus events. */
 
     if (dev->grab && (dev->grab->window == pWin))
 	(*dev->DeactivateGrab)(dev);
 
     /* If the focus window is a root window (ie. has no parent) 
-	then don't delete the focus from it. */
+     * then don't delete the focus from it. */
     
-    if (dev->focus && (pWin==dev->focus->win) && (pWin->parent != NullWindow))
-	{
+    if (dev->focus && (pWin == dev->focus->win) && (pWin->parent != NullWindow)) {
 	int focusEventMode = NotifyNormal;
 
  	/* If a grab is in progress, then alter the mode of focus events. */
@@ -1102,8 +1024,7 @@ DeleteDeviceFromAnyExtEvents(WindowPtr pWin, DeviceIntPtr dev)
 	if (dev->grab)
 	    focusEventMode = NotifyWhileGrabbed;
 
-	switch (dev->focus->revert)
-	    {
+	switch (dev->focus->revert) {
 	    case RevertToNone:
 		DoFocusEvents(dev, pWin, NoneWin, focusEventMode);
 		dev->focus->win = NoneWin;
@@ -1111,8 +1032,7 @@ DeleteDeviceFromAnyExtEvents(WindowPtr pWin, DeviceIntPtr dev)
 		break;
 	    case RevertToParent:
 		parent = pWin;
-		do
-		    {
+	    do {
 		    parent = parent->parent;
 		    dev->focus->traceGood--;
 		    } while (!parent->realized);
@@ -1151,18 +1071,13 @@ MaybeSendDeviceMotionNotifyHint (deviceKeyButtonPointer *pEvents, Mask mask)
     DeviceIntPtr dev;
 
     dev = LookupDeviceIntRec (pEvents->deviceid & DEVICE_BITS);
-    if (pEvents->type == DeviceMotionNotify)
-	{
-	if (mask & DevicePointerMotionHintMask)
-	    {
-	    if (WID(dev->valuator->motionHintWindow) == pEvents->event)
-		{
+    if (pEvents->type == DeviceMotionNotify) {
+	if (mask & DevicePointerMotionHintMask) {
+	    if (WID(dev->valuator->motionHintWindow) == pEvents->event) {
 		return 1; /* don't send, but pretend we did */
 		}
 	    pEvents->detail = NotifyHint;
-	    }
-	 else
-	    {
+	} else {
 	    pEvents->detail = NotifyNormal;
 	    }
 	}
@@ -1180,14 +1095,14 @@ CheckDeviceGrabAndHintWindow (WindowPtr pWin, int type,
     if (type == DeviceMotionNotify)
 	dev->valuator->motionHintWindow = pWin;
     else if ((type == DeviceButtonPress) && (!grab) && 
-	(deliveryMask & DeviceButtonGrabMask))
-        {
+	     (deliveryMask & DeviceButtonGrabMask)) {
 	GrabRec tempGrab;
 
 	tempGrab.device = dev;
 	tempGrab.resource = client->clientAsMask;
 	tempGrab.window = pWin;
-	tempGrab.ownerEvents = (deliveryMask & DeviceOwnerGrabButtonMask) ? TRUE : FALSE;
+	tempGrab.ownerEvents =
+	    (deliveryMask & DeviceOwnerGrabButtonMask) ? TRUE : FALSE;
 	tempGrab.eventMask = deliveryMask;
 	tempGrab.keyboardMode = GrabModeAsync;
 	tempGrab.pointerMode = GrabModeAsync;
@@ -1205,8 +1120,7 @@ DeviceEventMaskForClient(DeviceIntPtr dev, WindowPtr pWin, ClientPtr client)
     if (!wOtherInputMasks(pWin))
 	return 0;
     for (other = wOtherInputMasks(pWin)->inputClients; other; 
-	other = other->next)
-	{
+	 other = other->next) {
 	if (SameClient(other, client))
 	    return other->mask[dev->id];
 	}
@@ -1218,6 +1132,7 @@ MaybeStopDeviceHint(register DeviceIntPtr dev, ClientPtr client)
 {
     WindowPtr pWin;
     GrabPtr grab = dev->grab;
+
     pWin = dev->valuator->motionHintWindow;
 
     if ((grab && SameClient(grab, client) &&
@@ -1232,23 +1147,20 @@ MaybeStopDeviceHint(register DeviceIntPtr dev, ClientPtr client)
 }
 
 int
-DeviceEventSuppressForWindow(WindowPtr pWin, ClientPtr client, Mask mask, int maskndx)
+DeviceEventSuppressForWindow(WindowPtr pWin, ClientPtr client, Mask mask,
+			     int maskndx)
     {
     struct _OtherInputMasks *inputMasks = wOtherInputMasks (pWin);
 
-    if (mask & ~PropagateMask[maskndx])
-	{
+    if (mask & ~PropagateMask[maskndx]) {
 	client->errorValue = mask;
 	return BadValue;
 	}
 
-    if (mask == 0) 
-	{
+    if (mask == 0) {
 	if (inputMasks)
 	    inputMasks->dontPropagateMask[maskndx] = mask;
-	} 
-    else 
-	{
+    } else {
 	if (!inputMasks)
 	    AddExtensionClient (pWin, client, 0, 0);
 	inputMasks = wOtherInputMasks(pWin);
