diff --git a/GL/glx/render2.c b/GL/glx/render2.c
index 39d0c13..b126638 100644
--- a/GL/glx/render2.c
+++ b/GL/glx/render2.c
@@ -41,8 +41,12 @@
 
 #include <glxserver.h>
 #include "unpack.h"
-#include "g_disptab.h"
-#include "g_disptab_EXT.h"
+#include "indirect_size.h"
+#include "indirect_dispatch.h"
+#include "glapitable.h"
+#include "glapi.h"
+#include "glthread.h"
+#include "dispatch.h"
 
 
 void __glXDisp_Map1f(GLbyte *pc)
@@ -58,7 +62,7 @@ void __glXDisp_Map1f(GLbyte *pc)
     points = (GLfloat *)(pc + 16);
     k = __glMap1f_size(target);
 
-    glMap1f(target, u1, u2, k, order, points);
+    CALL_Map1f( GET_DISPATCH(), (target, u1, u2, k, order, points) );
 }
 
 void __glXDisp_Map2f(GLbyte *pc)
@@ -80,7 +84,7 @@ void __glXDisp_Map2f(GLbyte *pc)
     ustride = vorder * k;
     vstride = k;
 
-    glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
+   CALL_Map2f( GET_DISPATCH(), (target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) );
 }
 
 void __glXDisp_Map1d(GLbyte *pc)
@@ -122,7 +126,7 @@ void __glXDisp_Map1d(GLbyte *pc)
 #else
     points = (GLdouble*) pc;
 #endif
-    glMap1d(target, u1, u2, k, order, points);
+    CALL_Map1d( GET_DISPATCH(), (target, u1, u2, k, order, points) );
 }
 
 void __glXDisp_Map2d(GLbyte *pc)
@@ -170,17 +174,7 @@ void __glXDisp_Map2d(GLbyte *pc)
 #else
     points = (GLdouble*) pc;
 #endif
-    glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
-}
-
-void __glXDisp_CallLists(GLbyte *pc)
-{
-    GLenum type;
-    GLsizei n;
-
-    type = *(GLenum *)(pc + 4);
-    n = *(GLsizei *)(pc + 0);
-    glCallLists(n, type, pc + 8);
+    CALL_Map2d( GET_DISPATCH(), (target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) );
 }
 
 void __glXDisp_DrawArrays(GLbyte *pc)
@@ -214,36 +208,36 @@ void __glXDisp_DrawArrays(GLbyte *pc)
 
 	switch (component) {
 	  case GL_VERTEX_ARRAY:
-	    glEnableClientState(GL_VERTEX_ARRAY);
-	    glVertexPointer(numVals, datatype, stride, pc);
+	    CALL_EnableClientState( GET_DISPATCH(), (GL_VERTEX_ARRAY) );
+	    CALL_VertexPointer( GET_DISPATCH(), (numVals, datatype, stride, pc) );
 	    break;
 	  case GL_NORMAL_ARRAY:
-	    glEnableClientState(GL_NORMAL_ARRAY);
-	    glNormalPointer(datatype, stride, pc);
+	    CALL_EnableClientState( GET_DISPATCH(), (GL_NORMAL_ARRAY) );
+	    CALL_NormalPointer( GET_DISPATCH(), (datatype, stride, pc) );
 	    break;
 	  case GL_COLOR_ARRAY:
-	    glEnableClientState(GL_COLOR_ARRAY);
-	    glColorPointer(numVals, datatype, stride, pc);
+	    CALL_EnableClientState( GET_DISPATCH(), (GL_COLOR_ARRAY) );
+	    CALL_ColorPointer( GET_DISPATCH(), (numVals, datatype, stride, pc) );
 	    break;
 	  case GL_INDEX_ARRAY:
-	    glEnableClientState(GL_INDEX_ARRAY);
-	    glIndexPointer(datatype, stride, pc);
+	    CALL_EnableClientState( GET_DISPATCH(), (GL_INDEX_ARRAY) );
+	    CALL_IndexPointer( GET_DISPATCH(), (datatype, stride, pc) );
 	    break;
 	  case GL_TEXTURE_COORD_ARRAY:
-	    glEnableClientState(GL_TEXTURE_COORD_ARRAY);
-	    glTexCoordPointer(numVals, datatype, stride, pc);
+	    CALL_EnableClientState( GET_DISPATCH(), (GL_TEXTURE_COORD_ARRAY) );
+	    CALL_TexCoordPointer( GET_DISPATCH(), (numVals, datatype, stride, pc) );
 	    break;
 	  case GL_EDGE_FLAG_ARRAY:
-	    glEnableClientState(GL_EDGE_FLAG_ARRAY);
-	    glEdgeFlagPointer(stride, (const GLboolean *)pc);
+	    CALL_EnableClientState( GET_DISPATCH(), (GL_EDGE_FLAG_ARRAY) );
+	    CALL_EdgeFlagPointer( GET_DISPATCH(), (stride, (const GLboolean *)pc) );
 	    break;
 	  case GL_SECONDARY_COLOR_ARRAY:
-	    glEnableClientState(GL_SECONDARY_COLOR_ARRAY);
-	    glSecondaryColorPointer(numVals, datatype, stride, pc);
+	    CALL_EnableClientState( GET_DISPATCH(), (GL_SECONDARY_COLOR_ARRAY) );
+	    CALL_SecondaryColorPointerEXT( GET_DISPATCH(), (numVals, datatype, stride, pc) );
 	    break;
 	  case GL_FOG_COORD_ARRAY:
-	    glEnableClientState(GL_FOG_COORD_ARRAY);
-	    glFogCoordPointer(datatype, stride, pc);
+	    CALL_EnableClientState( GET_DISPATCH(), (GL_FOG_COORD_ARRAY) );
+	    CALL_FogCoordPointerEXT( GET_DISPATCH(), (datatype, stride, pc) );
 	    break;
 	  default:
 	    break;
@@ -252,17 +246,17 @@ void __glXDisp_DrawArrays(GLbyte *pc)
 	pc += __GLX_PAD(numVals * __glXTypeSize(datatype));
     }
 
-    glDrawArrays(primType, 0, numVertexes);
+    CALL_DrawArrays( GET_DISPATCH(), (primType, 0, numVertexes) );
 
     /* turn off anything we might have turned on */
-    glDisableClientState(GL_VERTEX_ARRAY);
-    glDisableClientState(GL_NORMAL_ARRAY);
-    glDisableClientState(GL_COLOR_ARRAY);
-    glDisableClientState(GL_INDEX_ARRAY);
-    glDisableClientState(GL_TEXTURE_COORD_ARRAY);
-    glDisableClientState(GL_EDGE_FLAG_ARRAY);
-    glDisableClientState(GL_SECONDARY_COLOR_ARRAY);
-    glDisableClientState(GL_FOG_COORD_ARRAY);
+    CALL_DisableClientState( GET_DISPATCH(), (GL_VERTEX_ARRAY) );
+    CALL_DisableClientState( GET_DISPATCH(), (GL_NORMAL_ARRAY) );
+    CALL_DisableClientState( GET_DISPATCH(), (GL_COLOR_ARRAY) );
+    CALL_DisableClientState( GET_DISPATCH(), (GL_INDEX_ARRAY) );
+    CALL_DisableClientState( GET_DISPATCH(), (GL_TEXTURE_COORD_ARRAY) );
+    CALL_DisableClientState( GET_DISPATCH(), (GL_EDGE_FLAG_ARRAY) );
+    CALL_DisableClientState( GET_DISPATCH(), (GL_SECONDARY_COLOR_ARRAY) );
+    CALL_DisableClientState( GET_DISPATCH(), (GL_FOG_COORD_ARRAY) );
 }
 
 void __glXDisp_DrawArraysEXT(GLbyte *pc)
