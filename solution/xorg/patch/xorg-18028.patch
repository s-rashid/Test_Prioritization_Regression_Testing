diff --git a/hw/xgl/egl/xegl.h b/hw/xgl/egl/xegl.h
index e75f233..cf21fca 100644
--- a/hw/xgl/egl/xegl.h
+++ b/hw/xgl/egl/xegl.h
@@ -1,3 +1,33 @@
+/*
+ * Copyright Â© 2005 Novell, Inc.
+ *
+ * Permission to use, copy, modify, distribute, and sell this software
+ * and its documentation for any purpose is hereby granted without
+ * fee, provided that the above copyright notice appear in all copies
+ * and that both that copyright notice and this permission notice
+ * appear in supporting documentation, and that the name of
+ * Novell, Inc. not be used in advertising or publicity pertaining to
+ * distribution of the software without specific, written prior permission.
+ * Novell, Inc. makes no representations about the suitability of this
+ * software for any purpose. It is provided "as is" without express or
+ * implied warranty.
+ *
+ * NOVELL, INC. DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
+ * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN
+ * NO EVENT SHALL NOVELL, INC. BE LIABLE FOR ANY SPECIAL, INDIRECT OR
+ * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
+ * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
+ * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
+ * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ *
+ * Author: David Reveman <davidr@novell.com>
+ */
+
+#ifndef _XEGL_H_
+#define _XEGL_H_
+
+#include "xgl.h"
+
 #include "randrstr.h"
 
 #define KD_BUTTON_1     0x01
@@ -34,7 +64,7 @@ typedef struct _KdMouseMatrix {
     int     matrix[2][3];
 } KdMouseMatrix;
 
-typedef enum _kdMouseState {
+typedef enum _KdMouseState {
     start,
     button_1_pend,
     button_1_down,
@@ -69,63 +99,116 @@ typedef struct _KdMouseInfo {
     Bool                transformCoordinates;
 } KdMouseInfo;
 
-typedef struct _KdScreenInfo {
-    struct _KdScreenInfo    *next;
-    ScreenPtr   pScreen;
-    void        *driver;
-    Rotation    randr;  /* rotation and reflection */
-    int         width;
-    int         height;
-    int         rate;
-    int         width_mm;
-    int         height_mm;
-    int         subpixel_order;
-    Bool        dumb;
-    Bool        softCursor;
-    int         mynum;
-    DDXPointRec origin;
-} KdScreenInfo;
-
-#define KD_MAX_FB 2
-#define KD_MAX_PSEUDO_DEPTH 8
-#define KD_MAX_PSEUDO_SIZE           (1 << KD_MAX_PSEUDO_DEPTH)
-
 typedef struct _xeglScreen {
-    Window             win;
-    Colormap           colormap;
     CloseScreenProcPtr CloseScreen;
-    KdScreenInfo       *screen;
-    ColormapPtr     pInstalledmap[KD_MAX_FB];         /* current colormap */
+    ScreenPtr	       pScreen;
+    DDXPointRec	       origin;
 } xeglScreenRec, *xeglScreenPtr;
 
 extern KdMouseInfo *kdMouseInfo;
 extern KdOsFuncs *kdOsFuncs;
 extern Bool kdDontZap;
 extern Bool kdDisableZaphod;
-extern int kdScreenPrivateIndex;
+extern int	       xeglScreenPrivateIndex;
 extern KdMouseFuncs LinuxEvdevMouseFuncs;
 extern KdKeyboardFuncs LinuxEvdevKeyboardFuncs;
 
-#define RR_Rotate_All   (RR_Rotate_0|RR_Rotate_90|RR_Rotate_180|RR_Rotate_270)
+#define RR_Rotate_All						 \
+    (RR_Rotate_0 | RR_Rotate_90 | RR_Rotate_180 | RR_Rotate_270)
 #define RR_Reflect_All  (RR_Reflect_X|RR_Reflect_Y)
 
-#define KdGetScreenPriv(pScreen) ((xeglScreenPtr) \
-                                  (pScreen)->devPrivates[kdScreenPrivateIndex].ptr)
-#define KdScreenPriv(pScreen) xeglScreenPtr pScreenPriv = KdGetScreenPriv(pScreen)
-
-extern void eglInitInput(KdMouseFuncs *pMouseFuncs, KdKeyboardFuncs *pKeyboardFuncs);
-extern void KdParseMouse(char *arg);
-extern KdMouseInfo *KdMouseInfoAdd(void);
-extern void KdMouseInfoDispose(KdMouseInfo *mi);
-extern int KdAllocInputType(void);
-extern char *KdSaveString (char *str);
-extern Bool KdRegisterFd(int type, int fd, void (*read) (int fd, void *closure), void *closure);
-extern void KdUnregisterFds(int type, Bool do_close);
-extern void KdEnqueueKeyboardEvent(unsigned char scan_code, unsigned char is_up);
-extern void KdEnqueueMouseEvent(KdMouseInfo *mi, unsigned long flags, int rx, int ry);
-extern void KdRegisterFdEnableDisable(int fd,
+#define KdGetScreenPriv(pScreen)					   \
+    ((xeglScreenPtr) ((pScreen)->devPrivates[xeglScreenPrivateIndex].ptr))
+#define KdScreenPriv(pScreen)				  \
+    xeglScreenPtr pScreenPriv = KdGetScreenPriv (pScreen)
+
+void
+eglInitInput (KdMouseFuncs    *pMouseFuncs,
+	      KdKeyboardFuncs *pKeyboardFuncs);
+
+void
+KdParseMouse (char *arg);
+
+KdMouseInfo *
+KdMouseInfoAdd (void);
+
+void
+KdMouseInfoDispose (KdMouseInfo *mi);
+
+int
+KdAllocInputType (void);
+
+char *
+KdSaveString (char *str);
+
+Bool
+KdRegisterFd (int  type,
+	      int  fd,
+	      void (*read) (int fd, void *closure),
+	      void *closure);
+
+void
+KdUnregisterFds (int  type,
+		 Bool do_close);
+
+void
+KdEnqueueKeyboardEvent (unsigned char scan_code,
+			unsigned char is_up);
+
+void
+KdEnqueueMouseEvent (KdMouseInfo   *mi,
+		     unsigned long flags,
+		     int	   rx,
+		     int	   ry);
+
+void
+KdRegisterFdEnableDisable (int  fd,
                                 int (*enable)(int fd, void *closure),
                                 void (*disable)(int fd, void *closure));
-extern void KdWakeupHandler(int screen, pointer data, unsigned long lresult, pointer readmask);
 
+void
+KdWakeupHandler (pointer data,
+		 int	 result,
+		 pointer readmask);
+
+Bool
+KdLegalModifier (unsigned int key, 
+		 DevicePtr    pDev);
+
+void
+KdProcessInputEvents (void);
+
+void
+xeglInitOutput (ScreenInfo *pScreenInfo,
+		int	   argc,
+		char       **argv);
+
+Bool
+xeglLegalModifier (unsigned int key,
+		   DevicePtr    pDev);
+
+void
+xeglProcessInputEvents (void);
+
+void
+xeglInitInput (int  argc,
+	       char **argv);
+
+void
+xeglUseMsg (void);
+
+int
+xeglProcessArgument (int  argc,
+		     char **argv,
+		     int  i);
+
+void
+xeglAbort (void);
+
+void
+xeglGiveUp (void);
+
+void
+xeglOsVendorInit (void);
 
+#endif /* _XEGL_H_ */
