diff --git a/xkb/xkb.c b/xkb/xkb.c
index ac0b427..867a992 100644
--- a/xkb/xkb.c
+++ b/xkb/xkb.c
@@ -166,7 +166,8 @@ ProcXkbUseExtension(ClientPtr client)
 	supported= ((SERVER_XKB_MAJOR_VERSION==1)&&
 		    (stuff->wantedMajor==0)&&(stuff->wantedMinor==65));
     }
-    else supported = 1;
+    else
+        supported = 1;
 
     if ((supported) && (!(client->xkbClientFlags&_XkbClientInitialized))) {
 	client->xkbClientFlags= _XkbClientInitialized;
@@ -174,11 +175,11 @@ ProcXkbUseExtension(ClientPtr client)
 	client->vMinor= stuff->wantedMinor;
     }
     else if (xkbDebugFlags&0x1) {
-	ErrorF("[xkb] Rejecting client %d (0x%lx) (wants %d.%02d, have %d.%02d)\n",
-					client->index,
-					(long)client->clientAsMask,
-					stuff->wantedMajor,stuff->wantedMinor,
-					SERVER_XKB_MAJOR_VERSION,SERVER_XKB_MINOR_VERSION);
+        ErrorF
+            ("[xkb] Rejecting client %d (0x%lx) (wants %d.%02d, have %d.%02d)\n",
+             client->index, (long) client->clientAsMask, stuff->wantedMajor,
+             stuff->wantedMinor, SERVER_XKB_MAJOR_VERSION,
+             SERVER_XKB_MINOR_VERSION);
     }
     memset(&rep, 0, sizeof(xkbUseExtensionReply));
     rep.type = X_Reply;
@@ -204,6 +205,7 @@ ProcXkbSelectEvents(ClientPtr client)
     unsigned		legal;
     DeviceIntPtr 	dev;
     XkbInterestPtr	masks;
+
     REQUEST(xkbSelectEventsReq);
 
     REQUEST_AT_LEAST_SIZE(xkbSelectEventsReq);
@@ -223,6 +225,7 @@ ProcXkbSelectEvents(ClientPtr client)
     masks = XkbFindClientResource((DevicePtr)dev,client);
     if (!masks){
 	XID id = FakeClientID(client->index);
+
 	if (!AddResource(id,RT_XKBCLIENT,dev))
 	    return BadAlloc;
 	masks= XkbAddClientResource((DevicePtr)dev,client,id);
@@ -304,14 +307,20 @@ ProcXkbSelectEvents(ClientPtr client)
 	    }
 
 	    if (stuff->clear&bit) {
-		if (size==2)		to.c16[0]= 0;
-		else if (size==4)	to.c32[0]= 0;
-		else			to.c8[0]=  0;
+                if (size == 2)
+                    to.c16[0] = 0;
+                else if (size == 4)
+                    to.c32[0] = 0;
+                else
+                    to.c8[0] = 0;
 	    }
 	    else if (stuff->selectAll&bit) {
-		if (size==2)		to.c16[0]= ~0;
-		else if (size==4)	to.c32[0]= ~0;
-		else			to.c8[0]=  ~0;
+                if (size == 2)
+                    to.c16[0] = ~0;
+                else if (size == 4)
+                    to.c32[0] = ~0;
+                else
+                    to.c8[0] = ~0;
 	    }
 	    else {
 		if (dataLeft<(size*2))
@@ -340,7 +349,8 @@ ProcXkbSelectEvents(ClientPtr client)
 	    }
 	}
 	if (dataLeft>2) {
-	    ErrorF("[xkb] Extra data (%d bytes) after SelectEvents\n",dataLeft);
+            ErrorF("[xkb] Extra data (%d bytes) after SelectEvents\n",
+                   dataLeft);
 	    return BadLength;
 	}
 	return Success;
@@ -364,6 +374,7 @@ _XkbBell(ClientPtr client, DeviceIntPtr dev, WindowPtr pWin,
 
     if (bellClass == KbdFeedbackClass) {
         KbdFeedbackPtr	k;
+
         if (bellID==XkbDfltXIId)
             k= dev->kbdfeed;
         else {
@@ -383,16 +394,19 @@ _XkbBell(ClientPtr client, DeviceIntPtr dev, WindowPtr pWin,
         if (pitch!=0) {
             if (pitch==-1)
                 k->ctrl.bell_pitch= defaultKeyboardControl.bell_pitch;
-            else k->ctrl.bell_pitch= pitch;
+            else
+                k->ctrl.bell_pitch = pitch;
         }
         if (duration!=0) {
             if (duration==-1)
                 k->ctrl.bell_duration= defaultKeyboardControl.bell_duration;
-            else k->ctrl.bell_duration= duration;
+            else
+                k->ctrl.bell_duration = duration;
         }
     }
     else if (bellClass == BellFeedbackClass) {
         BellFeedbackPtr	b;
+
         if (bellID==XkbDfltXIId)
             b= dev->bell;
         else {
@@ -412,12 +426,14 @@ _XkbBell(ClientPtr client, DeviceIntPtr dev, WindowPtr pWin,
         if (pitch!=0) {
             if (pitch==-1)
                 b->ctrl.pitch= defaultKeyboardControl.bell_pitch;
-            else b->ctrl.pitch= pitch;
+            else
+                b->ctrl.pitch = pitch;
         }
         if (duration!=0) {
             if (duration==-1)
                 b->ctrl.duration= defaultKeyboardControl.bell_duration;
-            else b->ctrl.duration= duration;
+            else
+                b->ctrl.duration = duration;
         }
     }
     else {
@@ -428,14 +444,15 @@ _XkbBell(ClientPtr client, DeviceIntPtr dev, WindowPtr pWin,
     newPercent = (base * percent)/100;
     if (percent < 0)
          newPercent = base + newPercent;
-    else newPercent = base - newPercent + percent;
+    else
+        newPercent = base - newPercent + percent;
 
     XkbHandleBell(forceSound, eventOnly,
-                  dev, newPercent, ctrl, bellClass,
-                  name, pWin, client);
+                  dev, newPercent, ctrl, bellClass, name, pWin, client);
     if ((pitch!=0)||(duration!=0)) {
         if (bellClass == KbdFeedbackClass) {
             KbdFeedbackPtr      k;
+
             k= (KbdFeedbackPtr)ctrl;
             if (pitch!=0)
                 k->ctrl.bell_pitch= oldPitch;
@@ -444,6 +461,7 @@ _XkbBell(ClientPtr client, DeviceIntPtr dev, WindowPtr pWin,
         }
         else {
             BellFeedbackPtr     b;
+
             b= (BellFeedbackPtr)ctrl;
             if (pitch!=0)
                 b->ctrl.pitch= oldPitch;
@@ -473,7 +491,8 @@ ProcXkbBell(ClientPtr client)
 
     /* device-independent checks request for sane values */
     if ((stuff->forceSound)&&(stuff->eventOnly)) {
-	client->errorValue=_XkbErrCode3(0x1,stuff->forceSound,stuff->eventOnly);
+        client->errorValue =
+            _XkbErrCode3(0x1, stuff->forceSound, stuff->eventOnly);
 	return BadMatch;
     }
     if (stuff->percent < -100 || stuff->percent > 100) {
@@ -492,7 +511,8 @@ ProcXkbBell(ClientPtr client)
     if (stuff->bellClass == XkbDfltXIClass) {
 	if (dev->kbdfeed!=NULL)
 	     stuff->bellClass= KbdFeedbackClass;
-	else stuff->bellClass= BellFeedbackClass;
+        else
+            stuff->bellClass = BellFeedbackClass;
     }
 
     if (stuff->window!=None) {
@@ -502,7 +522,8 @@ ProcXkbBell(ClientPtr client)
 	    return rc;
 	}
     }
-    else pWin= NULL;
+    else
+        pWin = NULL;
 
     /* Client wants to ring a bell on the core keyboard?
        Ring the bell on the core keyboard (which does nothing, but if that
@@ -518,13 +539,12 @@ ProcXkbBell(ClientPtr client)
                   stuff->forceSound, stuff->eventOnly, stuff->name);
 
     if ((rc == Success) && ((stuff->deviceSpec == XkbUseCoreKbd) ||
-                            (stuff->deviceSpec == XkbUseCorePtr)))
-    {
+                            (stuff->deviceSpec == XkbUseCorePtr))) {
         DeviceIntPtr other;
-        for (other = inputInfo.devices; other; other = other->next)
-        {
-            if ((other != dev) && other->key && !IsMaster(other) && GetMaster(other, MASTER_KEYBOARD) == dev)
-            {
+
+        for (other = inputInfo.devices; other; other = other->next) {
+            if ((other != dev) && other->key && !IsMaster(other) &&
+                GetMaster(other, MASTER_KEYBOARD) == dev) {
                 rc = XaceHook(XACE_DEVICE_ACCESS, client, other, DixBellAccess);
                 if (rc == Success)
                     _XkbBell(client, other, pWin, stuff->bellClass,
@@ -605,7 +625,8 @@ ProcXkbLatchLockState(ClientPtr client)
     status = Success;
 
     for (tmpd = inputInfo.devices; tmpd; tmpd = tmpd->next) {
-        if ((tmpd == dev) || (!IsMaster(tmpd) && GetMaster(tmpd, MASTER_KEYBOARD) == dev)) {
+        if ((tmpd == dev) ||
+            (!IsMaster(tmpd) && GetMaster(tmpd, MASTER_KEYBOARD) == dev)) {
             if (!tmpd->key || !tmpd->key->xkbInfo)
                 continue;
 
@@ -613,7 +634,8 @@ ProcXkbLatchLockState(ClientPtr client)
             newState = &tmpd->key->xkbInfo->state;
             if (stuff->affectModLocks) {
                 newState->locked_mods &= ~stuff->affectModLocks;
-                newState->locked_mods |= (stuff->affectModLocks & stuff->modLocks);
+                newState->locked_mods |=
+                    (stuff->affectModLocks & stuff->modLocks);
             }
             if (status == Success && stuff->lockGroup)
                 newState->locked_group = stuff->groupLock;
@@ -746,7 +768,8 @@ ProcXkbSetControls(ClientPtr client)
     for (tmpd = inputInfo.devices; tmpd; tmpd = tmpd->next) {
         if (!tmpd->key || !tmpd->key->xkbInfo)
             continue;
-        if ((tmpd == dev) || (!IsMaster(tmpd) && GetMaster(tmpd, MASTER_KEYBOARD) == dev)) {
+        if ((tmpd == dev) ||
+            (!IsMaster(tmpd) && GetMaster(tmpd, MASTER_KEYBOARD) == dev)) {
             xkbi = tmpd->key->xkbInfo;
             ctrl = xkbi->desc->ctrls;
             new = *ctrl;
@@ -765,8 +788,7 @@ ProcXkbSetControls(ClientPtr client)
                 new.internal.vmods |= (stuff->affectInternalVMods &
                                        stuff->internalVMods);
                 new.internal.mask = new.internal.real_mods |
-                                    XkbMaskForVMask(xkbi->desc,
-                                                    new.internal.vmods);
+                    XkbMaskForVMask(xkbi->desc, new.internal.vmods);
             }
 
             if (stuff->changeCtrls & XkbIgnoreLockModsMask) {
@@ -782,8 +804,7 @@ ProcXkbSetControls(ClientPtr client)
                 new.ignore_lock.vmods |= (stuff->affectIgnoreLockVMods &
                                           stuff->ignoreLockVMods);
                 new.ignore_lock.mask = new.ignore_lock.real_mods |
-                                       XkbMaskForVMask(xkbi->desc,
-                                                       new.ignore_lock.vmods);
+                    XkbMaskForVMask(xkbi->desc, new.ignore_lock.vmods);
             }
 
             CHK_MASK_MATCH(0x06, stuff->affectEnabledCtrls,
@@ -977,9 +998,7 @@ XkbSizeKeyTypes(XkbDescPtr xkb,xkbGetMapReply *rep)
 
 static char *
 XkbWriteKeyTypes(	XkbDescPtr		xkb,
-			xkbGetMapReply *	rep,
-			char *			buf,
-			ClientPtr 		client)
+                 xkbGetMapReply * rep, char *buf, ClientPtr client)
 {
     XkbKeyTypePtr	type;
     unsigned		i;
@@ -988,6 +1007,7 @@ XkbWriteKeyTypes(	XkbDescPtr		xkb,
     type= &xkb->map->types[rep->firstType];
     for (i=0;i<rep->nTypes;i++,type++) {
 	register unsigned n;
+
 	wire= (xkbKeyTypeWireDesc *)buf;
 	wire->mask = type->mods.mask;
 	wire->realMods = type->mods.real_mods;
@@ -1003,6 +1023,7 @@ XkbWriteKeyTypes(	XkbDescPtr		xkb,
 	if (wire->nMapEntries>0) {
 	    xkbKTMapEntryWireDesc *	wire;
 	    XkbKTMapEntryPtr		entry;
+
 	    wire= (xkbKTMapEntryWireDesc *)buf;
 	    entry= type->map;
 	    for (n=0;n<type->map_count;n++,wire++,entry++) {
@@ -1019,6 +1040,7 @@ XkbWriteKeyTypes(	XkbDescPtr		xkb,
 	    if (type->preserve!=NULL) {
 		xkbModsWireDesc *	pwire;
 		XkbModsPtr		preserve;
+
 		pwire= (xkbModsWireDesc *)buf;
 		preserve= type->preserve;
 		for (n=0;n<type->map_count;n++,pwire++,preserve++) {
@@ -1082,7 +1104,8 @@ register unsigned i,nMods,bit;
 }
 
 static char *
-XkbWriteKeySyms(XkbDescPtr xkb,xkbGetMapReply *rep,char *buf,ClientPtr client)
+XkbWriteKeySyms(XkbDescPtr xkb, xkbGetMapReply * rep, char *buf,
+                ClientPtr client)
 {
 register KeySym *	pSym;
 XkbSymMapPtr		symMap;
@@ -1107,13 +1130,15 @@ register unsigned	i;
 	memcpy((char *)buf,(char *)pSym,outMap->nSyms*4);
 	if (client->swapped) {
 	    register int nSyms= outMap->nSyms;
+
 	    swaps(&outMap->nSyms);
 	    while (nSyms-->0) {
 		swapl((int *)buf);
 		buf+= 4;
 	    }
 	}
-	else buf+= outMap->nSyms*4;
+        else
+            buf += outMap->nSyms * 4;
     }
     return buf;
 }
@@ -1153,7 +1178,8 @@ XkbWriteKeyActions(XkbDescPtr xkb,xkbGetMapReply *rep,char *buf,
     for (i=0;i<rep->nKeyActs;i++) {
 	if (xkb->server->key_acts[i+rep->firstKeyAct]==0)
 	     numDesc[i] = 0;
-	else numDesc[i] = XkbKeyNumActions(xkb,(i+rep->firstKeyAct));
+        else
+            numDesc[i] = XkbKeyNumActions(xkb, (i + rep->firstKeyAct));
     }
     buf+= XkbPaddedSize(rep->nKeyActs);
 
@@ -1161,6 +1187,7 @@ XkbWriteKeyActions(XkbDescPtr xkb,xkbGetMapReply *rep,char *buf,
     for (i=0;i<rep->nKeyActs;i++) {
 	if (xkb->server->key_acts[i+rep->firstKeyAct]!=0) {
 	    unsigned int num;
+
 	    num = XkbKeyNumActions(xkb,(i+rep->firstKeyAct));
 	    memcpy((char *)actDesc,
 		   (char*)XkbKeyActionsPtr(xkb,(i+rep->firstKeyAct)),
@@ -1178,8 +1205,8 @@ XkbSizeKeyBehaviors(XkbDescPtr xkb,xkbGetMapReply *rep)
     unsigned		i,len,nBhvr;
     XkbBehavior *	bhv;
 
-    if (((rep->present&XkbKeyBehaviorsMask)==0)||(rep->nKeyBehaviors<1)||
-	(!xkb)||(!xkb->server)||(!xkb->server->behaviors)) {
+    if (((rep->present & XkbKeyBehaviorsMask) == 0) || (rep->nKeyBehaviors < 1)
+        || (!xkb) || (!xkb->server) || (!xkb->server->behaviors)) {
 	rep->present&= ~XkbKeyBehaviorsMask;
 	rep->firstKeyBehavior= rep->nKeyBehaviors= 0;
 	rep->totalKeyBehaviors= 0;
@@ -1222,8 +1249,9 @@ XkbSizeExplicit(XkbDescPtr xkb,xkbGetMapReply *rep)
 {
     unsigned	i,len,nRtrn;
 
-    if (((rep->present&XkbExplicitComponentsMask)==0)||(rep->nKeyExplicit<1)||
-	(!xkb)||(!xkb->server)||(!xkb->server->explicit)) {
+    if (((rep->present & XkbExplicitComponentsMask) == 0) ||
+        (rep->nKeyExplicit < 1) || (!xkb) || (!xkb->server) ||
+        (!xkb->server->explicit)) {
 	rep->present&= ~XkbExplicitComponentsMask;
 	rep->firstKeyExplicit= rep->nKeyExplicit= 0;
 	rep->totalKeyExplicit= 0;
@@ -1239,7 +1267,8 @@ XkbSizeExplicit(XkbDescPtr xkb,xkbGetMapReply *rep)
 }
 
 static char *
-XkbWriteExplicit(XkbDescPtr xkb,xkbGetMapReply *rep,char *buf,ClientPtr client)
+XkbWriteExplicit(XkbDescPtr xkb, xkbGetMapReply * rep, char *buf,
+                 ClientPtr client)
 {
 unsigned	i;
 char *		start;
@@ -1303,8 +1332,8 @@ XkbSizeVirtualModMap(XkbDescPtr xkb,xkbGetMapReply *rep)
 {
     unsigned	i,len,nRtrn;
 
-    if (((rep->present&XkbVirtualModMapMask)==0)||(rep->nVModMapKeys<1)||
-	(!xkb)||(!xkb->server)||(!xkb->server->vmodmap)) {
+    if (((rep->present & XkbVirtualModMapMask) == 0) || (rep->nVModMapKeys < 1)
+        || (!xkb) || (!xkb->server) || (!xkb->server->vmodmap)) {
 	rep->present&= ~XkbVirtualModMapMask;
 	rep->firstVModMapKey= rep->nVModMapKeys= 0;
 	rep->totalVModMapKeys= 0;
@@ -1378,6 +1407,7 @@ char		*desc,*start;
 	desc = XkbWriteKeyBehaviors(xkb,rep,desc,client);
     if ( rep->virtualMods ) {
 	register int sz,bit;
+
 	for (i=sz=0,bit=1;i<XkbNumVirtualMods;i++,bit<<=1) {
 	    if (rep->virtualMods&bit) {
 		desc[sz++]= xkb->server->vmods[i];
@@ -1392,7 +1422,8 @@ char		*desc,*start;
     if ( rep->totalVModMapKeys>0 )
 	desc= XkbWriteVirtualModMap(xkb,rep,desc,client);
     if ((desc-start)!=(len)) {
-	ErrorF("[xkb] BOGUS LENGTH in write keyboard desc, expected %d, got %ld\n",
+        ErrorF
+            ("[xkb] BOGUS LENGTH in write keyboard desc, expected %d, got %ld\n",
 					len, (unsigned long)(desc-start));
     }
     if (client->swapped) {
@@ -1449,7 +1480,8 @@ ProcXkbGetMap(ClientPtr client)
 	rep.firstType = stuff->firstType;
 	rep.nTypes = stuff->nTypes;
     }
-    else rep.nTypes = 0;
+    else
+        rep.nTypes = 0;
     rep.totalTypes = xkb->map->num_types;
 
     n= XkbNumKeys(xkb);
@@ -1462,7 +1494,8 @@ ProcXkbGetMap(ClientPtr client)
 	rep.firstKeySym = stuff->firstKeySym;
 	rep.nKeySyms = stuff->nKeySyms;
     }
-    else rep.nKeySyms = 0;
+    else
+        rep.nKeySyms = 0;
     rep.totalSyms= 0;
 
     if ( stuff->full&XkbKeyActionsMask ) {
@@ -1474,7 +1507,8 @@ ProcXkbGetMap(ClientPtr client)
 	rep.firstKeyAct= stuff->firstKeyAct;
 	rep.nKeyActs= stuff->nKeyActs;
     }
-    else rep.nKeyActs= 0;
+    else
+        rep.nKeyActs = 0;
     rep.totalActs= 0;
 
     if ( stuff->full&XkbKeyBehaviorsMask ) {
@@ -1486,7 +1520,8 @@ ProcXkbGetMap(ClientPtr client)
 	rep.firstKeyBehavior= stuff->firstKeyBehavior;
 	rep.nKeyBehaviors= stuff->nKeyBehaviors;
     }
-    else rep.nKeyBehaviors = 0;
+    else
+        rep.nKeyBehaviors = 0;
     rep.totalKeyBehaviors= 0;
 
     if (stuff->full&XkbVirtualModsMask)
@@ -1503,7 +1538,8 @@ ProcXkbGetMap(ClientPtr client)
 	rep.firstKeyExplicit= stuff->firstKeyExplicit;
 	rep.nKeyExplicit= stuff->nKeyExplicit;
     }
-    else rep.nKeyExplicit = 0;
+    else
+        rep.nKeyExplicit = 0;
     rep.totalKeyExplicit=  0;
 
     if (stuff->full&XkbModifierMapMask) {
@@ -1515,7 +1551,8 @@ ProcXkbGetMap(ClientPtr client)
 	rep.firstModMapKey= stuff->firstModMapKey;
 	rep.nModMapKeys= stuff->nModMapKeys;
     }
-    else rep.nModMapKeys = 0;
+    else
+        rep.nModMapKeys = 0;
     rep.totalModMapKeys= 0;
 
     if (stuff->full&XkbVirtualModMapMask) {
@@ -1527,7 +1564,8 @@ ProcXkbGetMap(ClientPtr client)
 	rep.firstVModMapKey= stuff->firstVModMapKey;
 	rep.nVModMapKeys= stuff->nVModMapKeys;
     }
-    else rep.nVModMapKeys = 0;
+    else
+        rep.nVModMapKeys = 0;
     rep.totalVModMapKeys= 0;
 
     if ((status=XkbComputeGetMapReplySize(xkb,&rep))!=Success)
@@ -1542,8 +1580,7 @@ CheckKeyTypes(	ClientPtr	client,
 		XkbDescPtr	xkb,
 		xkbSetMapReq *	req,
 		xkbKeyTypeWireDesc **wireRtrn,
-		int	 *	nMapsRtrn,
-		CARD8 *		mapWidthRtrn)
+              int *nMapsRtrn, CARD8 *mapWidthRtrn)
 {
 unsigned		nMaps;
 register unsigned	i,n;
@@ -1581,6 +1618,7 @@ register xkbKeyTypeWireDesc	*wire = *wireRtrn;
     }
     for (i=0;i<req->nTypes;i++) {
 	unsigned	width;
+
 	if (client->swapped) {
 	    swaps(&wire->virtualMods);
 	}
@@ -1604,6 +1642,7 @@ register xkbKeyTypeWireDesc	*wire = *wireRtrn;
 	if (wire->nMapEntries>0) {
 	    xkbKTSetMapEntryWireDesc *	mapWire;
 	    xkbModsWireDesc *		preWire;
+
 	    mapWire= (xkbKTSetMapEntryWireDesc *)&wire[1];
 	    preWire= (xkbModsWireDesc *)&mapWire[wire->nMapEntries];
 	    for (n=0;n<wire->nMapEntries;n++) {
@@ -1634,16 +1673,19 @@ register xkbKeyTypeWireDesc	*wire = *wireRtrn;
 			return 0;
 		    }
 		    if (preWire[n].virtualMods&(~mapWire[n].virtualMods)) {
-			*nMapsRtrn=_XkbErrCode3(0x0a,n,preWire[n].virtualMods);
+                        *nMapsRtrn =
+                            _XkbErrCode3(0x0a, n, preWire[n].virtualMods);
 			return 0;
 		    }
 		}
 	    }
 	    if (wire->preserve)
 		 map= (CARD8 *)&preWire[wire->nMapEntries];
-	    else map= (CARD8 *)&mapWire[wire->nMapEntries];
+            else
+                map = (CARD8 *) &mapWire[wire->nMapEntries];
 	}
-	else map= (CARD8 *)&wire[1];
+        else
+            map = (CARD8 *) &wire[1];
 	mapWidthRtrn[i+req->firstType] = wire->numLevels;
 	wire= (xkbKeyTypeWireDesc *)map;
     }
@@ -1661,9 +1703,7 @@ CheckKeySyms(	ClientPtr		client,
 		xkbSetMapReq *		req,
 		int			nTypes,
 		CARD8 *	 		mapWidths,
-		CARD16 *	 	symsPerKey,
-		xkbSymMapWireDesc **	wireRtrn,
-		int *			errorRtrn)
+             CARD16 *symsPerKey, xkbSymMapWireDesc ** wireRtrn, int *errorRtrn)
 {
 register unsigned	i;
 XkbSymMapPtr		map;
@@ -1671,10 +1711,12 @@ xkbSymMapWireDesc*	wire = *wireRtrn;
 
     if (!(XkbKeySymsMask&req->present))
 	return 1;
-    CHK_REQ_KEY_RANGE2(0x11,req->firstKeySym,req->nKeySyms,req,(*errorRtrn),0);
+    CHK_REQ_KEY_RANGE2(0x11, req->firstKeySym, req->nKeySyms, req, (*errorRtrn),
+                       0);
     for (i=0;i<req->nKeySyms;i++) {
 	KeySym *pSyms;
 	register unsigned nG;
+
 	if (client->swapped) {
 	    swaps(&wire->nSyms);
 	}
@@ -1685,6 +1727,7 @@ xkbSymMapWireDesc*	wire = *wireRtrn;
 	}
 	if (nG>0) {
 	    register int g,w;
+
 	    for (g=w=0;g<nG;g++) {
 		if (wire->ktIndex[g]>=(unsigned)nTypes) {
 		    *errorRtrn= _XkbErrCode4(0x15,i+req->firstKeySym,g,
@@ -1695,13 +1738,15 @@ xkbSymMapWireDesc*	wire = *wireRtrn;
 		    w= mapWidths[wire->ktIndex[g]];
 	    }
 	    if (wire->width!=w) {
-		*errorRtrn= _XkbErrCode3(0x16,i+req->firstKeySym,wire->width);
+                *errorRtrn =
+                    _XkbErrCode3(0x16, i + req->firstKeySym, wire->width);
 		return 0;
 	    }
 	    w*= nG;
 	    symsPerKey[i+req->firstKeySym] = w;
 	    if (w!=wire->nSyms) {
-		*errorRtrn=_XkbErrCode4(0x16,i+req->firstKeySym,wire->nSyms,w);
+                *errorRtrn =
+                    _XkbErrCode4(0x16, i + req->firstKeySym, wire->nSyms, w);
 		return 0;
 	    }
 	}
@@ -1716,6 +1761,7 @@ xkbSymMapWireDesc*	wire = *wireRtrn;
     map = &xkb->map->key_sym_map[i];
     for (;i<=(unsigned)xkb->max_key_code;i++,map++) {
 	register int g,nG,w;
+
 	nG= XkbKeyNumGroups(xkb,i);
 	for (w=g=0;g<nG;g++)  {
 	    if (map->kt_index[g]>=(unsigned)nTypes) {
@@ -1736,9 +1782,7 @@ CheckKeyActions(	XkbDescPtr	xkb,
 			xkbSetMapReq *	req,
 			int		nTypes,
 			CARD8 *		mapWidths,
-			CARD16 *	symsPerKey,
-			CARD8 **	wireRtrn,
-			int *		nActsRtrn)
+                CARD16 *symsPerKey, CARD8 **wireRtrn, int *nActsRtrn)
 {
 int			 nActs;
 CARD8 *			 wire = *wireRtrn;
@@ -1746,7 +1790,8 @@ register unsigned	 i;
 
     if (!(XkbKeyActionsMask&req->present))
 	return 1;
-    CHK_REQ_KEY_RANGE2(0x21,req->firstKeyAct,req->nKeyActs,req,(*nActsRtrn),0);
+    CHK_REQ_KEY_RANGE2(0x21, req->firstKeyAct, req->nKeyActs, req, (*nActsRtrn),
+                       0);
     for (nActs=i=0;i<req->nKeyActs;i++) {
 	if (wire[0]!=0) {
 	    if (wire[0]==symsPerKey[i+req->firstKeyAct])
@@ -1768,8 +1813,7 @@ register unsigned	 i;
 static int
 CheckKeyBehaviors(	XkbDescPtr 		xkb,
 			xkbSetMapReq *		req,
-			xkbBehaviorWireDesc **	wireRtrn,
-			int *			errorRtrn)
+                  xkbBehaviorWireDesc ** wireRtrn, int *errorRtrn)
 {
 register xkbBehaviorWireDesc *	wire = *wireRtrn;
 register XkbServerMapPtr	server = xkb->server;
@@ -1819,9 +1863,7 @@ unsigned			first,last;
 
 static int
 CheckVirtualMods(	XkbDescRec *	xkb,
-			xkbSetMapReq *	req,
-			CARD8 **	wireRtrn,
-			int *		errorRtrn)
+                 xkbSetMapReq * req, CARD8 **wireRtrn, int *errorRtrn)
 {
 register CARD8		*wire = *wireRtrn;
 register unsigned 	 i,nMods,bit;
@@ -1838,16 +1880,15 @@ register unsigned 	 i,nMods,bit;
 
 static int
 CheckKeyExplicit(	XkbDescPtr	xkb,
-			xkbSetMapReq *	req,
-			CARD8 **	wireRtrn,
-			int	*	errorRtrn)
+                 xkbSetMapReq * req, CARD8 **wireRtrn, int *errorRtrn)
 {
 register CARD8 *	wire = *wireRtrn;
 CARD8	*		start;
 register unsigned 	i;
 int			first,last;
 
-    if (((req->present&XkbExplicitComponentsMask)==0)||(req->nKeyExplicit<1)) {
+    if (((req->present & XkbExplicitComponentsMask) == 0) ||
+        (req->nKeyExplicit < 1)) {
 	req->present&= ~XkbExplicitComponentsMask;
 	req->nKeyExplicit= 0;
 	return 1;
@@ -1879,7 +1920,8 @@ int			first,last;
 }
 
 static int
-CheckModifierMap(XkbDescPtr xkb,xkbSetMapReq *req,CARD8 **wireRtrn,int *errRtrn)
+CheckModifierMap(XkbDescPtr xkb, xkbSetMapReq * req, CARD8 **wireRtrn,
+                 int *errRtrn)
 {
 register CARD8 *	wire = *wireRtrn;
 CARD8	*		start;
@@ -1916,8 +1958,7 @@ int			first,last;
 static int
 CheckVirtualModMap(	XkbDescPtr xkb,
 			xkbSetMapReq *req,
-			xkbVModMapWireDesc **wireRtrn,
-			int *errRtrn)
+                   xkbVModMapWireDesc ** wireRtrn, int *errRtrn)
 {
 register xkbVModMapWireDesc *	wire = *wireRtrn;
 register unsigned 		i;
@@ -1951,8 +1992,7 @@ int				first,last;
 static char *
 SetKeyTypes(	XkbDescPtr		xkb,
 		xkbSetMapReq *		req,
-		xkbKeyTypeWireDesc *	wire,
-		XkbChangesPtr		changes)
+            xkbKeyTypeWireDesc * wire, XkbChangesPtr changes)
 {
 register unsigned	i;
 unsigned		first,last;
@@ -1990,6 +2030,7 @@ CARD8			*map;
 	    xkbKTSetMapEntryWireDesc *mapWire;
 	    xkbModsWireDesc *preWire;
 	    unsigned tmp;
+
 	    mapWire= (xkbKTSetMapEntryWireDesc *)map;
 	    preWire= (xkbModsWireDesc *)&mapWire[wire->nMapEntries];
 	    for (n=0;n<wire->nMapEntries;n++) {
@@ -2012,15 +2053,18 @@ CARD8			*map;
 	    }
 	    if (wire->preserve)
 		 map= (CARD8 *)&preWire[wire->nMapEntries];
-	    else map= (CARD8 *)&mapWire[wire->nMapEntries];
+            else
+                map = (CARD8 *) &mapWire[wire->nMapEntries];
 	}
-	else map= (CARD8 *)&wire[1];
+        else
+            map = (CARD8 *) &wire[1];
 	wire = (xkbKeyTypeWireDesc *)map;
     }
     first= req->firstType;
     last= first+req->nTypes-1; /* last changed type */
     if (changes->map.changed&XkbKeyTypesMask) {
 	int oldLast;
+
 	oldLast= changes->map.first_type+changes->map.num_types-1;
 	if (changes->map.first_type<first)
 	    first= changes->map.first_type;
@@ -2037,9 +2081,7 @@ static char *
 SetKeySyms(	ClientPtr		client,
 		XkbDescPtr		xkb,
 		xkbSetMapReq *		req,
-		xkbSymMapWireDesc *	wire,
-		XkbChangesPtr 		changes,
-		DeviceIntPtr		dev)
+           xkbSymMapWireDesc * wire, XkbChangesPtr changes, DeviceIntPtr dev)
 {
 register unsigned 	i,s;
 XkbSymMapPtr		oldMap;
@@ -2072,7 +2114,8 @@ unsigned		first,last;
     first= req->firstKeySym;
     last= first+req->nKeySyms-1;
     if (changes->map.changed&XkbKeySymsMask) {
-	int oldLast= (changes->map.first_key_sym+changes->map.num_key_syms-1);
+        int oldLast =
+            (changes->map.first_key_sym + changes->map.num_key_syms - 1);
 	if (changes->map.first_key_sym<first)
 	    first= changes->map.first_key_sym;
 	if (oldLast>last)
@@ -2090,6 +2133,7 @@ unsigned		first,last;
     if (s!=xkb->ctrls->num_groups) {
 	xkbControlsNotify	cn;
 	XkbControlsRec		old;
+
 	cn.keycode= 0;
 	cn.eventType= 0;
 	cn.requestMajor= XkbReqCode;
@@ -2104,9 +2148,7 @@ unsigned		first,last;
 
 static char *
 SetKeyActions(	XkbDescPtr	xkb,
-		xkbSetMapReq *	req,
-		CARD8 *		wire,
-		XkbChangesPtr	changes)
+              xkbSetMapReq * req, CARD8 *wire, XkbChangesPtr changes)
 {
 register unsigned	i,first,last;
 CARD8 *			nActs = wire;
@@ -2127,6 +2169,7 @@ XkbAction *		newActs;
     last= (first+req->nKeyActs-1);
     if (changes->map.changed&XkbKeyActionsMask) {
 	int oldLast;
+
 	oldLast= changes->map.first_key_act+changes->map.num_key_acts-1;
 	if (changes->map.first_key_act<first)
 	    first= changes->map.first_key_act;
@@ -2142,8 +2185,7 @@ XkbAction *		newActs;
 static char *
 SetKeyBehaviors(	XkbSrvInfoPtr	 xkbi,
     			xkbSetMapReq	*req,
-    			xkbBehaviorWireDesc	*wire,
-    			XkbChangesPtr	 changes)
+                xkbBehaviorWireDesc * wire, XkbChangesPtr changes)
 {
 register unsigned i;
 int maxRG = -1;
@@ -2153,12 +2195,14 @@ unsigned	 first,last;
 
     first= req->firstKeyBehavior;
     last= req->firstKeyBehavior+req->nKeyBehaviors-1;
-    memset(&server->behaviors[first], 0, req->nKeyBehaviors*sizeof(XkbBehavior));
+    memset(&server->behaviors[first], 0,
+           req->nKeyBehaviors * sizeof(XkbBehavior));
     for (i=0;i<req->totalKeyBehaviors;i++) {
 	if ((server->behaviors[wire->key].type&XkbKB_Permanent)==0) {
 	    server->behaviors[wire->key].type= wire->type;
 	    server->behaviors[wire->key].data= wire->data;
-	    if ((wire->type==XkbKB_RadioGroup)&&(((int)wire->data)>maxRG))
+            if ((wire->type == XkbKB_RadioGroup) &&
+                (((int) wire->data) > maxRG))
 		maxRG= wire->data + 1;
 	}
 	wire++;
@@ -2166,20 +2210,24 @@ unsigned	 first,last;
 
     if (maxRG>(int)xkbi->nRadioGroups) {
         int sz = maxRG*sizeof(XkbRadioGroupRec);
+
         if (xkbi->radioGroups)
              xkbi->radioGroups= realloc(xkbi->radioGroups,sz);
-        else xkbi->radioGroups= calloc(1, sz);
+        else
+            xkbi->radioGroups = calloc(1, sz);
         if (xkbi->radioGroups) {
              if (xkbi->nRadioGroups)
                  memset(&xkbi->radioGroups[xkbi->nRadioGroups], 0,
                         (maxRG-xkbi->nRadioGroups)*sizeof(XkbRadioGroupRec));
              xkbi->nRadioGroups= maxRG;
         }
-        else xkbi->nRadioGroups= 0;
+        else
+            xkbi->nRadioGroups = 0;
         /* should compute members here */
     }
     if (changes->map.changed&XkbKeyBehaviorsMask) {
 	unsigned oldLast;
+
 	oldLast= changes->map.first_key_behavior+
 					changes->map.num_key_behaviors-1;
         if (changes->map.first_key_behavior<req->firstKeyBehavior)
@@ -2233,6 +2281,7 @@ CARD8 *			start;
     if (first>0) {
 	if (changes->map.changed&XkbExplicitComponentsMask) {
 	    int oldLast;
+
 	    oldLast= changes->map.first_key_explicit+
 					changes->map.num_key_explicit-1;
 	    if (changes->map.first_key_explicit<first)
@@ -2249,9 +2298,7 @@ CARD8 *			start;
 
 static char *
 SetModifierMap(	XkbSrvInfoPtr	xkbi,
-		xkbSetMapReq *	req,
-		CARD8 *		wire,
-		XkbChangesPtr	changes)
+               xkbSetMapReq * req, CARD8 *wire, XkbChangesPtr changes)
 {
 register unsigned	i,first,last;
 XkbClientMapPtr		xkb = xkbi->desc->map;
@@ -2267,6 +2314,7 @@ CARD8 *			start;
     if (first>0) {
 	if (changes->map.changed&XkbModifierMapMask) {
 	    int oldLast;
+
 	    oldLast= changes->map.first_modmap_key+
 						changes->map.num_modmap_keys-1;
 	    if (changes->map.first_modmap_key<first)
@@ -2284,8 +2332,7 @@ CARD8 *			start;
 static char *
 SetVirtualModMap(	XkbSrvInfoPtr		xkbi,
 			xkbSetMapReq *		req,
-			xkbVModMapWireDesc *	wire,
-			XkbChangesPtr 		changes)
+                 xkbVModMapWireDesc * wire, XkbChangesPtr changes)
 {
 register unsigned	i,first,last;
 XkbServerMapPtr		srv = xkbi->desc->server;
@@ -2299,6 +2346,7 @@ XkbServerMapPtr		srv = xkbi->desc->server;
     if (first>0) {
 	if (changes->map.changed&XkbVirtualModMapMask) {
 	    int oldLast;
+
 	    oldLast= changes->map.first_vmodmap_key+
 					changes->map.num_vmodmap_keys-1;
 	    if (changes->map.first_vmodmap_key<first)
@@ -2317,7 +2365,8 @@ XkbServerMapPtr		srv = xkbi->desc->server;
  * actually do anything..
  */
 static int
-_XkbSetMapChecks(ClientPtr client, DeviceIntPtr dev, xkbSetMapReq *req, char* values)
+_XkbSetMapChecks(ClientPtr client, DeviceIntPtr dev, xkbSetMapReq * req,
+                 char *values)
 {
     XkbSrvInfoPtr       xkbi;
     XkbDescPtr          xkb;
@@ -2339,11 +2388,13 @@ _XkbSetMapChecks(ClientPtr client, DeviceIntPtr dev, xkbSetMapReq *req, char* va
 	}
 	else {
 	    if (!XkbIsLegalKeycode(req->minKeyCode)) {
-		client->errorValue = _XkbErrCode3(2, req->minKeyCode, req->maxKeyCode);
+                client->errorValue =
+                    _XkbErrCode3(2, req->minKeyCode, req->maxKeyCode);
 		return BadValue;
 	    }
 	    if (req->minKeyCode > req->maxKeyCode) {
-		client->errorValue = _XkbErrCode3(3, req->minKeyCode, req->maxKeyCode);
+                client->errorValue =
+                    _XkbErrCode3(3, req->minKeyCode, req->maxKeyCode);
 		return BadMatch;
 	    }
 	}
@@ -2360,6 +2411,7 @@ _XkbSetMapChecks(ClientPtr client, DeviceIntPtr dev, xkbSetMapReq *req, char* va
     map = &xkb->map->key_sym_map[xkb->min_key_code];
     for (i=xkb->min_key_code;i<xkb->max_key_code;i++,map++) {
 	register int g,ng,w;
+
 	ng= XkbNumGroups(map->group_info);
 	for (w=g=0;g<ng;g++) {
 	    if (map->kt_index[g]>=(unsigned)nTypes) {
@@ -2387,7 +2439,8 @@ _XkbSetMapChecks(ClientPtr client, DeviceIntPtr dev, xkbSetMapReq *req, char* va
     }
 
     if ((req->present & XkbKeyBehaviorsMask) &&
-	(!CheckKeyBehaviors(xkb,req,(xkbBehaviorWireDesc**)&values,&error))) {
+        (!CheckKeyBehaviors
+         (xkb, req, (xkbBehaviorWireDesc **) & values, &error))) {
 	client->errorValue = error;
 	return BadValue;
     }
@@ -2408,7 +2461,8 @@ _XkbSetMapChecks(ClientPtr client, DeviceIntPtr dev, xkbSetMapReq *req, char* va
 	return BadValue;
     }
     if ((req->present&XkbVirtualModMapMask) &&
-	(!CheckVirtualModMap(xkb,req,(xkbVModMapWireDesc **)&values,&error))) {
+        (!CheckVirtualModMap
+         (xkb, req, (xkbVModMapWireDesc **) & values, &error))) {
 	client->errorValue= error;
 	return BadValue;
     }
@@ -2444,6 +2498,7 @@ _XkbSetMap(ClientPtr client, DeviceIntPtr dev, xkbSetMapReq *req, char *values)
         (xkb->max_key_code!=req->maxKeyCode)) {
 	Status			status;
 	xkbNewKeyboardNotify	nkn;
+
 	nkn.deviceID = nkn.oldDeviceID = dev->id;
 	nkn.oldMinKeyCode = xkb->min_key_code;
 	nkn.oldMaxKeyCode = xkb->max_key_code;
@@ -2462,19 +2517,26 @@ _XkbSetMap(ClientPtr client, DeviceIntPtr dev, xkbSetMapReq *req, char *values)
 
     if (req->present&XkbKeyTypesMask) {
 	values = SetKeyTypes(xkb,req,(xkbKeyTypeWireDesc *)values,&change);
-	if (!values)	goto allocFailure;
+        if (!values)
+            goto allocFailure;
     }
     if (req->present&XkbKeySymsMask) {
-	values = SetKeySyms(client,xkb,req,(xkbSymMapWireDesc *)values,&change,dev);
-	if (!values)	goto allocFailure;
+        values =
+            SetKeySyms(client, xkb, req, (xkbSymMapWireDesc *) values, &change,
+                       dev);
+        if (!values)
+            goto allocFailure;
     }
     if (req->present&XkbKeyActionsMask) {
 	values = SetKeyActions(xkb,req,(CARD8 *)values,&change);
-	if (!values)	goto allocFailure;
+        if (!values)
+            goto allocFailure;
     }
     if (req->present&XkbKeyBehaviorsMask) {
-	values= SetKeyBehaviors(xkbi,req,(xkbBehaviorWireDesc *)values,&change);
-	if (!values)	goto allocFailure;
+        values =
+            SetKeyBehaviors(xkbi, req, (xkbBehaviorWireDesc *) values, &change);
+        if (!values)
+            goto allocFailure;
     }
     if (req->present&XkbVirtualModsMask)
 	values= SetVirtualMods(xkbi,req,(CARD8 *)values,&change);
@@ -2483,7 +2545,8 @@ _XkbSetMap(ClientPtr client, DeviceIntPtr dev, xkbSetMapReq *req, char *values)
     if (req->present&XkbModifierMapMask)
 	values= SetModifierMap(xkbi,req,(CARD8 *)values,&change);
     if (req->present&XkbVirtualModMapMask)
-	values= SetVirtualModMap(xkbi,req,(xkbVModMapWireDesc *)values,&change);
+        values =
+            SetVirtualModMap(xkbi, req, (xkbVModMapWireDesc *) values, &change);
     if (((values-((char *)req))/4)!=req->length) {
 	ErrorF("[xkb] Internal error! Bad length in XkbSetMap (after set)\n");
 	client->errorValue = values-((char *)&req[1]);
@@ -2491,16 +2554,19 @@ _XkbSetMap(ClientPtr client, DeviceIntPtr dev, xkbSetMapReq *req, char *values)
     }
     if (req->flags&XkbSetMapRecomputeActions) {
 	KeyCode		first,last,firstMM,lastMM;
+
 	if (change.map.num_key_syms>0) {
 	    first= change.map.first_key_sym;
 	    last= first+change.map.num_key_syms-1;
 	}
-	else first= last= 0;
+        else
+            first = last = 0;
 	if (change.map.num_modmap_keys>0) {
 	    firstMM= change.map.first_modmap_key;
 	    lastMM= first+change.map.num_modmap_keys-1;
 	}
-	else firstMM= lastMM= 0;
+        else
+            firstMM = lastMM = 0;
 	if ((last>0) && (lastMM>0)) {
 	    if (firstMM<first)
 		first= firstMM;
@@ -2513,7 +2579,9 @@ _XkbSetMap(ClientPtr client, DeviceIntPtr dev, xkbSetMapReq *req, char *values)
 	}
 	if (last>0) {
 	    unsigned check= 0;
-	    XkbUpdateActions(dev,first,(last-first+1),&change,&check,&cause);
+
+            XkbUpdateActions(dev, first, (last - first + 1), &change, &check,
+                             &cause);
 	    if (check)
 		XkbCheckSecondaryEffects(xkbi,check,&change,&cause);
 	}
@@ -2526,7 +2594,6 @@ allocFailure:
     return BadAlloc;
 }
 
-
 int
 ProcXkbSetMap(ClientPtr client)
 {
@@ -2553,16 +2620,15 @@ ProcXkbSetMap(ClientPtr client)
     if (rc != Success)
         return rc;
 
-    if (stuff->deviceSpec == XkbUseCoreKbd)
-    {
+    if (stuff->deviceSpec == XkbUseCoreKbd) {
         DeviceIntPtr other;
-        for (other = inputInfo.devices; other; other = other->next)
-        {
-            if ((other != dev) && other->key && !IsMaster(other) && GetMaster(other, MASTER_KEYBOARD) == dev)
-            {
-                rc = XaceHook(XACE_DEVICE_ACCESS, client, other, DixManageAccess);
-                if (rc == Success)
-                {
+
+        for (other = inputInfo.devices; other; other = other->next) {
+            if ((other != dev) && other->key && !IsMaster(other) &&
+                GetMaster(other, MASTER_KEYBOARD) == dev) {
+                rc = XaceHook(XACE_DEVICE_ACCESS, client, other,
+                              DixManageAccess);
+                if (rc == Success) {
                     rc = _XkbSetMapChecks(client, other, stuff, tmp);
                     if (rc != Success)
                         return rc;
@@ -2576,14 +2642,14 @@ ProcXkbSetMap(ClientPtr client)
     if (rc != Success)
         return rc;
 
-    if (stuff->deviceSpec == XkbUseCoreKbd)
-    {
+    if (stuff->deviceSpec == XkbUseCoreKbd) {
         DeviceIntPtr other;
-        for (other = inputInfo.devices; other; other = other->next)
-        {
-            if ((other != dev) && other->key && !IsMaster(other) && GetMaster(other, MASTER_KEYBOARD) == dev)
-            {
-                rc = XaceHook(XACE_DEVICE_ACCESS, client, other, DixManageAccess);
+
+        for (other = inputInfo.devices; other; other = other->next) {
+            if ((other != dev) && other->key && !IsMaster(other) &&
+                GetMaster(other, MASTER_KEYBOARD) == dev) {
+                rc = XaceHook(XACE_DEVICE_ACCESS, client, other,
+                              DixManageAccess);
                 if (rc == Success)
                     _XkbSetMap(client, other, stuff, tmp);
                 /* ignore rc. if the SetMap failed although the check above
@@ -2608,6 +2674,7 @@ unsigned	 size,nGroups;
     nGroups= 0;
     if (rep->groups!=0) {
 	register int i,bit;
+
 	for (i=0,bit=1;i<XkbNumKbdGroups;i++,bit<<=1) {
 	    if (rep->groups&bit)
 		nGroups++;
@@ -2621,8 +2688,7 @@ unsigned	 size,nGroups;
 
 static int
 XkbSendCompatMap(	ClientPtr 		client,
-			XkbCompatMapPtr 	compat,
-			xkbGetCompatMapReply *	rep)
+                 XkbCompatMapPtr compat, xkbGetCompatMapReply * rep)
 {
 char	*	data;
 int		size;
@@ -2635,13 +2701,15 @@ int		size;
 	    xkbModsWireDesc *	grp;
 	    XkbSymInterpretPtr	sym= &compat->sym_interpret[rep->firstSI];
 	    xkbSymInterpretWireDesc *wire = (xkbSymInterpretWireDesc *)data;
+
 	    for (i=0;i<rep->nSI;i++,sym++,wire++) {
 		wire->sym= sym->sym;
 		wire->mods= sym->mods;
 		wire->match= sym->match;
 		wire->virtualMod= sym->virtual_mod;
 		wire->flags= sym->flags;
-		memcpy((char*)&wire->act,(char*)&sym->act,sz_xkbActionWireDesc);
+                memcpy((char *) &wire->act, (char *) &sym->act,
+                       sz_xkbActionWireDesc);
 		if (client->swapped) {
 		    swapl(&wire->sym);
 		}
@@ -2662,9 +2730,11 @@ int		size;
 		wire= (xkbSymInterpretWireDesc*)grp;
 	    }
 	}
-	else return BadAlloc;
+        else
+            return BadAlloc;
     }
-    else data= NULL;
+    else
+        data = NULL;
 
     if (client->swapped) {
 	swaps(&rep->sequenceNumber);
@@ -2743,6 +2813,7 @@ _XkbSetCompatMap(ClientPtr client, DeviceIntPtr dev,
 
     if ((req->nSI>0)||(req->truncateSI)) {
 	xkbSymInterpretWireDesc *wire;
+
 	if (req->firstSI>compat->num_si) {
 	    client->errorValue = _XkbErrCode2(0x02,compat->num_si);
 	    return BadValue;
@@ -2773,10 +2844,12 @@ _XkbSetCompatMap(ClientPtr client, DeviceIntPtr dev,
 	xkbSymInterpretWireDesc *wire = (xkbSymInterpretWireDesc *)data;
 	XkbSymInterpretPtr	sym;
 	unsigned int		skipped = 0;
+
 	if ((unsigned)(req->firstSI+req->nSI)>compat->num_si) {
 	    compat->num_si= req->firstSI+req->nSI;
 	    compat->sym_interpret= realloc(compat->sym_interpret,
-					    compat->num_si * sizeof(XkbSymInterpretRec));
+                                            compat->num_si *
+                                            sizeof(XkbSymInterpretRec));
 	    if (!compat->sym_interpret) {
 		compat->num_si= 0;
 		return BadAlloc;
@@ -2823,6 +2896,7 @@ _XkbSetCompatMap(ClientPtr client, DeviceIntPtr dev,
     if (req->groups!=0) {
 	unsigned i, bit;
 	xkbModsWireDesc *wire = (xkbModsWireDesc *)data;
+
 	for (i = 0, bit = 1; i < XkbNumKbdGroups; i++, bit <<= 1) {
 	    if (req->groups & bit) {
 		if (client->swapped) {
@@ -2833,6 +2907,7 @@ _XkbSetCompatMap(ClientPtr client, DeviceIntPtr dev,
 		compat->groups[i].vmods= wire->virtualMods;
 		if (wire->virtualMods!=0) {
 		    unsigned tmp;
+
 		    tmp= XkbMaskForVMask(xkb,wire->virtualMods);
 		    compat->groups[i].mask|= tmp;
 		}
@@ -2849,6 +2924,7 @@ _XkbSetCompatMap(ClientPtr client, DeviceIntPtr dev,
 
     if (dev->xkb_interest) {
 	xkbCompatMapNotify ev;
+
 	ev.deviceID = dev->id;
 	ev.changedGroups = req->groups;
 	ev.firstSI = req->firstSI;
@@ -2864,8 +2940,8 @@ _XkbSetCompatMap(ClientPtr client, DeviceIntPtr dev,
 
 	XkbSetCauseXkbReq(&cause,X_kbSetCompatMap,client);
 	memset(&change, 0, sizeof(XkbChangesRec));
-	XkbUpdateActions(dev,xkb->min_key_code,XkbNumKeys(xkb),&change,&check,
-									&cause);
+        XkbUpdateActions(dev, xkb->min_key_code, XkbNumKeys(xkb), &change,
+                         &check, &cause);
 	if (check)
 	    XkbCheckSecondaryEffects(xkbi,check,&change,&cause);
 	XkbSendNotification(dev,&change,&cause);
@@ -2894,16 +2970,15 @@ ProcXkbSetCompatMap(ClientPtr client)
     rc = _XkbSetCompatMap(client, dev, stuff, data, TRUE);
     if (rc != Success)
         return rc;
-    if (stuff->deviceSpec == XkbUseCoreKbd)
-    {
+    if (stuff->deviceSpec == XkbUseCoreKbd) {
         DeviceIntPtr other;
-        for (other = inputInfo.devices; other; other = other->next)
-        {
-            if ((other != dev) && other->key && !IsMaster(other) && GetMaster(other, MASTER_KEYBOARD) == dev)
-            {
-                rc = XaceHook(XACE_DEVICE_ACCESS, client, other, DixManageAccess);
-                if (rc == Success)
-                {
+
+        for (other = inputInfo.devices; other; other = other->next) {
+            if ((other != dev) && other->key && !IsMaster(other) &&
+                GetMaster(other, MASTER_KEYBOARD) == dev) {
+                rc = XaceHook(XACE_DEVICE_ACCESS, client, other,
+                              DixManageAccess);
+                if (rc == Success) {
                     /* dry-run */
                     rc = _XkbSetCompatMap(client, other, stuff, data, TRUE);
                     if (rc != Success)
@@ -2917,16 +2992,15 @@ ProcXkbSetCompatMap(ClientPtr client)
     rc = _XkbSetCompatMap(client, dev, stuff, data, FALSE);
     if (rc != Success)
         return rc;
-    if (stuff->deviceSpec == XkbUseCoreKbd)
-    {
+    if (stuff->deviceSpec == XkbUseCoreKbd) {
         DeviceIntPtr other;
-        for (other = inputInfo.devices; other; other = other->next)
-        {
-            if ((other != dev) && other->key && !IsMaster(other) && GetMaster(other, MASTER_KEYBOARD) == dev)
-            {
-                rc = XaceHook(XACE_DEVICE_ACCESS, client, other, DixManageAccess);
-                if (rc == Success)
-                {
+
+        for (other = inputInfo.devices; other; other = other->next) {
+            if ((other != dev) && other->key && !IsMaster(other) &&
+                GetMaster(other, MASTER_KEYBOARD) == dev) {
+                rc = XaceHook(XACE_DEVICE_ACCESS, client, other,
+                              DixManageAccess);
+                if (rc == Success) {
                     rc = _XkbSetCompatMap(client, other, stuff, data, FALSE);
                     if (rc != Success)
                         return rc;
@@ -2977,8 +3051,7 @@ ProcXkbGetIndicatorState(ClientPtr client)
 /***====================================================================***/
 
 static Status
-XkbComputeGetIndicatorMapReplySize(
-    XkbIndicatorPtr		indicators,
+XkbComputeGetIndicatorMapReplySize(XkbIndicatorPtr indicators,
     xkbGetIndicatorMapReply	*rep)
 {
 register int 	i,bit;
@@ -2995,8 +3068,7 @@ int		nIndicators;
 
 static int
 XkbSendIndicatorMap(	ClientPtr			client,
-			XkbIndicatorPtr			indicators,
-			xkbGetIndicatorMapReply *	rep)
+                    XkbIndicatorPtr indicators, xkbGetIndicatorMapReply * rep)
 {
 int 			length;
 CARD8 *			map;
@@ -3006,9 +3078,11 @@ register unsigned	bit;
     length = rep->length*4;
     if (length>0) {
 	CARD8 *to;
+
 	to= map= malloc(length);
 	if (map) {
 	    xkbIndicatorMapWireDesc  *wire = (xkbIndicatorMapWireDesc *)to;
+
 	    for (i=0,bit=1;i<XkbNumIndicators;i++,bit<<=1) {
 		if (rep->which&bit) {
 		    wire->flags= indicators->maps[i].flags;
@@ -3033,9 +3107,11 @@ register unsigned	bit;
 		return BadLength;
 	    }
 	}
-	else return BadAlloc;
+        else
+            return BadAlloc;
     }
-    else map = NULL;
+    else
+        map = NULL;
     if (client->swapped) {
 	swaps(&rep->sequenceNumber);
 	swapl(&rep->length);
@@ -3110,6 +3186,7 @@ _XkbSetIndicatorMap(ClientPtr client, DeviceIntPtr dev,
 	    sli->maps[i].ctrls = desc->ctrls;
 	    if (desc->virtualMods!=0) {
 		unsigned tmp;
+
 		tmp= XkbMaskForVMask(xkbi->desc,desc->virtualMods);
 		sli->maps[i].mods.mask= desc->mods|tmp;
 	    }
@@ -3148,7 +3225,8 @@ ProcXkbSetIndicatorMap(ClientPtr client)
 	    nIndicators++;
     }
     if (stuff->length!=((SIZEOF(xkbSetIndicatorMapReq)+
-			(nIndicators*SIZEOF(xkbIndicatorMapWireDesc)))/4)) {
+                           (nIndicators * SIZEOF(xkbIndicatorMapWireDesc))) /
+                          4)) {
 	return BadLength;
     }
 
@@ -3170,14 +3248,14 @@ ProcXkbSetIndicatorMap(ClientPtr client)
     if (rc != Success)
         return rc;
 
-    if (stuff->deviceSpec == XkbUseCoreKbd)
-    {
+    if (stuff->deviceSpec == XkbUseCoreKbd) {
         DeviceIntPtr other;
-        for (other = inputInfo.devices; other; other = other->next)
-        {
-            if ((other != dev) && other->key && !IsMaster(other) && GetMaster(other, MASTER_KEYBOARD) == dev)
-            {
-                rc = XaceHook(XACE_DEVICE_ACCESS, client, other, DixSetAttrAccess);
+
+        for (other = inputInfo.devices; other; other = other->next) {
+            if ((other != dev) && other->key && !IsMaster(other) &&
+                GetMaster(other, MASTER_KEYBOARD) == dev) {
+                rc = XaceHook(XACE_DEVICE_ACCESS, client, other,
+                              DixSetAttrAccess);
                 if (rc == Success)
                     _XkbSetIndicatorMap(client, other, stuff->which, from);
             }
@@ -3269,7 +3347,6 @@ ProcXkbGetNamedIndicator(ClientPtr client)
     return Success;
 }
 
-
 /**
  * Find the IM on the device.
  * Returns the map, or NULL if the map doesn't exist.
@@ -3277,8 +3354,7 @@ ProcXkbGetNamedIndicator(ClientPtr client)
  * is set to the led index of the map.
  */
 static XkbIndicatorMapPtr
-_XkbFindNamedIndicatorMap(XkbSrvLedInfoPtr sli, Atom indicator,
-                          int *led_return)
+_XkbFindNamedIndicatorMap(XkbSrvLedInfoPtr sli, Atom indicator, int *led_return)
 {
     XkbIndicatorMapPtr  map;
 
@@ -3319,13 +3395,12 @@ _XkbCreateIndicatorMap(DeviceIntPtr dev, Atom indicator,
 
     map = _XkbFindNamedIndicatorMap(sli, indicator, &led);
 
-    if (!map)
-    {
+    if (!map) {
         /* find first unused indicator maps and assign the name to it */
-        for (led = 0, map = NULL; (led < XkbNumIndicators) && (map == NULL); led++) {
+        for (led = 0, map = NULL; (led < XkbNumIndicators) && (map == NULL);
+             led++) {
             if ((sli->names) && (sli->maps) && (sli->names[led] == None) &&
-                    (!XkbIM_InUse(&sli->maps[led])))
-            {
+                (!XkbIM_InUse(&sli->maps[led]))) {
                 map = &sli->maps[led];
                 if (!dryRun)
                     sli->names[led] = indicator;
@@ -3386,10 +3461,11 @@ _XkbSetNamedIndicator(ClientPtr client, DeviceIntPtr dev,
         mapc|= (1<<led);
     }
 
-    if ((stuff->setState) && ((map->flags & XkbIM_NoExplicit) == 0))
-    {
-        if (stuff->on)	sli->explicitState |=  (1<<led);
-        else		sli->explicitState &= ~(1<<led);
+    if ((stuff->setState) && ((map->flags & XkbIM_NoExplicit) == 0)) {
+        if (stuff->on)
+            sli->explicitState |= (1 << led);
+        else
+            sli->explicitState &= ~(1 << led);
         statec |= ((sli->effectiveState ^ sli->explicitState) & (1 << led));
     }
 
@@ -3438,18 +3514,18 @@ ProcXkbSetNamedIndicator(ClientPtr client)
         return rc;
 
     if (stuff->deviceSpec == XkbUseCoreKbd ||
-        stuff->deviceSpec == XkbUseCorePtr)
-    {
+        stuff->deviceSpec == XkbUseCorePtr) {
         DeviceIntPtr other;
-        for (other = inputInfo.devices; other; other = other->next)
-        {
-            if ((other != dev) && !IsMaster(other) && GetMaster(other, MASTER_KEYBOARD) == dev &&
-                (other->kbdfeed || other->leds) &&
-                (XaceHook(XACE_DEVICE_ACCESS, client, other, DixSetAttrAccess) == Success))
-            {
+
+        for (other = inputInfo.devices; other; other = other->next) {
+            if ((other != dev) && !IsMaster(other) &&
+                GetMaster(other, MASTER_KEYBOARD) == dev && (other->kbdfeed ||
+                                                             other->leds) &&
+                (XaceHook(XACE_DEVICE_ACCESS, client, other, DixSetAttrAccess)
+                 == Success)) {
                 rc = _XkbCreateIndicatorMap(other, stuff->indicator,
-                                            stuff->ledClass, stuff->ledID,
-                                            &map, &led, TRUE);
+                                            stuff->ledClass, stuff->ledID, &map,
+                                            &led, TRUE);
                 if (rc != Success || !map)
                     return rc;
             }
@@ -3462,15 +3538,15 @@ ProcXkbSetNamedIndicator(ClientPtr client)
         return rc;
 
     if (stuff->deviceSpec == XkbUseCoreKbd ||
-        stuff->deviceSpec == XkbUseCorePtr)
-    {
+        stuff->deviceSpec == XkbUseCorePtr) {
         DeviceIntPtr other;
-        for (other = inputInfo.devices; other; other = other->next)
-        {
-            if ((other != dev) && !IsMaster(other) && GetMaster(other, MASTER_KEYBOARD) == dev &&
-                (other->kbdfeed || other->leds) &&
-                (XaceHook(XACE_DEVICE_ACCESS, client, other, DixSetAttrAccess) == Success))
-            {
+
+        for (other = inputInfo.devices; other; other = other->next) {
+            if ((other != dev) && !IsMaster(other) &&
+                GetMaster(other, MASTER_KEYBOARD) == dev && (other->kbdfeed ||
+                                                             other->leds) &&
+                (XaceHook(XACE_DEVICE_ACCESS, client, other, DixSetAttrAccess)
+                 == Success)) {
                 _XkbSetNamedIndicator(client, other, stuff);
             }
         }
@@ -3528,14 +3604,21 @@ register int		i;
     which= rep->which;
     length= 0;
     if (xkb->names!=NULL) {
-	 if (which&XkbKeycodesNameMask)		length++;
-	 if (which&XkbGeometryNameMask)		length++;
-	 if (which&XkbSymbolsNameMask)		length++;
-	 if (which&XkbPhysSymbolsNameMask)	length++;
-	 if (which&XkbTypesNameMask)		length++;
-	 if (which&XkbCompatNameMask)		length++;
-    }
-    else which&= ~XkbComponentNamesMask;
+        if (which & XkbKeycodesNameMask)
+            length++;
+        if (which & XkbGeometryNameMask)
+            length++;
+        if (which & XkbSymbolsNameMask)
+            length++;
+        if (which & XkbPhysSymbolsNameMask)
+            length++;
+        if (which & XkbTypesNameMask)
+            length++;
+        if (which & XkbCompatNameMask)
+            length++;
+    }
+    else
+        which &= ~XkbComponentNamesMask;
 
     if (xkb->map!=NULL) {
 	if (which&XkbKeyTypeNamesMask)
@@ -3568,8 +3651,10 @@ register int		i;
     if (xkb->names!=NULL) {
 	if (which&XkbIndicatorNamesMask) {
 	    int nLeds;
+
 	    rep->indicators= 
-		_XkbCountAtoms(xkb->names->indicators,XkbNumIndicators,&nLeds);
+                _XkbCountAtoms(xkb->names->indicators, XkbNumIndicators,
+                               &nLeds);
 	    length+= nLeds;
 	    if (nLeds==0)
 		which&= ~XkbIndicatorNamesMask;
@@ -3577,6 +3662,7 @@ register int		i;
 
 	if (which&XkbVirtualModNamesMask) {
 	    int nVMods;
+
 	    rep->virtualMods= 
 		_XkbCountAtoms(xkb->names->vmods,XkbNumVirtualMods,&nVMods);
 	    length+= nVMods;
@@ -3586,6 +3672,7 @@ register int		i;
 
 	if (which&XkbGroupNamesMask) {
 	    int nGroups;
+
 	    rep->groupNames=
 		_XkbCountAtoms(xkb->names->groups,XkbNumKbdGroups,&nGroups);
 	    length+= nGroups;
@@ -3595,7 +3682,8 @@ register int		i;
 
 	if ((which&XkbKeyNamesMask)&&(xkb->names->keys))
 	     length+= rep->nKeys;
-	else which&= ~XkbKeyNamesMask;
+        else
+            which &= ~XkbKeyNamesMask;
 
 	if ((which&XkbKeyAliasesMask)&&
 	    (xkb->names->key_aliases)&&(xkb->names->num_key_aliases>0)) {
@@ -3609,7 +3697,8 @@ register int		i;
 
 	if ((which&XkbRGNamesMask)&&(xkb->names->num_rg>0))
 	     length+= xkb->names->num_rg;
-	else which&= ~XkbRGNamesMask;
+        else
+            which &= ~XkbRGNamesMask;
     }
     else {
 	which&= ~(XkbIndicatorNamesMask|XkbVirtualModNamesMask);
@@ -3666,6 +3755,7 @@ char *			desc;
         }
         if (which&XkbPhysSymbolsNameMask) {
             register CARD32 *atm= (CARD32 *)desc;
+
             atm[0]= (CARD32)xkb->names->phys_symbols;
             if (client->swapped) {
                 swapl(&atm[0]);
@@ -3701,6 +3791,7 @@ char *			desc;
         if (which&XkbKTLevelNamesMask && xkb->map) {
             XkbKeyTypePtr type = xkb->map->types;
             register CARD32 *atm;
+
             for (i=0;i<rep->nTypes;i++,type++) {
                 *desc++ = type->num_levels;
             }
@@ -3710,6 +3801,7 @@ char *			desc;
             type = xkb->map->types;
             for (i=0;i<xkb->map->num_types;i++,type++) {
                 register unsigned l;
+
                 if (type->level_names) {
                     for (l=0;l<type->num_levels;l++,atm++) {
                         *atm= type->level_names[l];
@@ -3722,7 +3814,8 @@ char *			desc;
             }
         }
         if (which&XkbIndicatorNamesMask) {
-            desc= _XkbWriteAtoms(desc,xkb->names->indicators,XkbNumIndicators,
+            desc =
+                _XkbWriteAtoms(desc, xkb->names->indicators, XkbNumIndicators,
                                  client->swapped);
         }
         if (which&XkbVirtualModNamesMask) {
@@ -3740,13 +3833,16 @@ char *			desc;
         }
         if (which&XkbKeyAliasesMask) {
             XkbKeyAliasPtr	pAl;
+
             pAl= xkb->names->key_aliases;
-            for (i=0;i<rep->nKeyAliases;i++,pAl++,desc+=2*XkbKeyNameLength) {
+            for (i = 0; i < rep->nKeyAliases;
+                 i++, pAl++, desc += 2 * XkbKeyNameLength) {
                 *((XkbKeyAliasPtr)desc)= *pAl;
             }
         }
         if ((which&XkbRGNamesMask)&&(rep->nRadioGroups>0)) {
             register CARD32	*atm= (CARD32 *)desc;
+
             for (i=0;i<rep->nRadioGroups;i++,atm++) {
                 *atm= (CARD32)xkb->names->radio_groups[i];
                 if (client->swapped) {
@@ -3845,10 +3941,7 @@ register unsigned i,bit;
 }
 
 static Atom *
-_XkbCopyMaskedAtoms(	Atom	*wire,
-    			Atom	*dest,
-			int   	 nAtoms,
-			CARD32	 present)
+_XkbCopyMaskedAtoms(Atom *wire, Atom *dest, int nAtoms, CARD32 present)
 {
 register int i,bit;
 
@@ -3889,17 +3982,18 @@ _XkbSetNamesCheck(ClientPtr client, DeviceIntPtr dev,
     xkb = dev->key->xkbInfo->desc;
     names = xkb->names;
 
-
     if (stuff->which & XkbKeyTypeNamesMask) {
         int i;
         CARD32	*old;
+
         if ( stuff->nTypes<1 ) {
             client->errorValue = _XkbErrCode2(0x02,stuff->nTypes);
             return BadValue;
         }
-        if ((unsigned)(stuff->firstType+stuff->nTypes-1)>=xkb->map->num_types) {
-            client->errorValue = _XkbErrCode4(0x03,stuff->firstType,
-                    stuff->nTypes,
+        if ((unsigned) (stuff->firstType + stuff->nTypes - 1) >=
+            xkb->map->num_types) {
+            client->errorValue =
+                _XkbErrCode4(0x03, stuff->firstType, stuff->nTypes,
                     xkb->map->num_types);
             return BadValue;
         }
@@ -3922,6 +4016,7 @@ _XkbSetNamesCheck(ClientPtr client, DeviceIntPtr dev,
         unsigned i;
         XkbKeyTypePtr	type;
         CARD8 *		width;
+
         if ( stuff->nKTLevels<1 ) {
             client->errorValue = _XkbErrCode2(0x05,stuff->nKTLevels);
             return BadValue;
@@ -3929,7 +4024,8 @@ _XkbSetNamesCheck(ClientPtr client, DeviceIntPtr dev,
         if ((unsigned)(stuff->firstKTLevel+stuff->nKTLevels-1)>=
                 xkb->map->num_types) {
             client->errorValue = _XkbErrCode4(0x06,stuff->firstKTLevel,
-                    stuff->nKTLevels,xkb->map->num_types);
+                                              stuff->nKTLevels,
+                                              xkb->map->num_types);
             return BadValue;
         }
         width = (CARD8 *)tmp;
@@ -3994,10 +4090,11 @@ _XkbSetNamesCheck(ClientPtr client, DeviceIntPtr dev,
                     stuff->firstKey);
             return BadValue;
         }
-        if (((unsigned)(stuff->firstKey+stuff->nKeys-1)>xkb->max_key_code)||
-                (stuff->nKeys<1)) {
-            client->errorValue= _XkbErrCode4(0x0c,xkb->max_key_code,
-                    stuff->firstKey,stuff->nKeys);
+        if (((unsigned) (stuff->firstKey + stuff->nKeys - 1) >
+             xkb->max_key_code) || (stuff->nKeys < 1)) {
+            client->errorValue =
+                _XkbErrCode4(0x0c, xkb->max_key_code, stuff->firstKey,
+                             stuff->nKeys);
             return BadValue;
         }
         tmp+= stuff->nKeys;
@@ -4021,8 +4118,6 @@ _XkbSetNamesCheck(ClientPtr client, DeviceIntPtr dev,
         return BadLength;
     }
 
-
-
     return Success;
 }
 
@@ -4081,6 +4176,7 @@ _XkbSetNames(ClientPtr client, DeviceIntPtr dev, xkbSetNamesReq *stuff)
             if (width[i]>0) {
                 if (type->level_names) {
                     register unsigned n;
+
                     for (n=0;n<width[i];n++) {
                         type->level_names[n]= tmp[n];
                     }
@@ -4116,6 +4212,7 @@ _XkbSetNames(ClientPtr client, DeviceIntPtr dev, xkbSetNamesReq *stuff)
     if (stuff->which&XkbKeyAliasesMask) {
         if (stuff->nKeyAliases>0) {
             register int na= stuff->nKeyAliases;	
+
             if (XkbAllocNames(xkb,XkbKeyAliasesMask,0,na)!=Success)
                 return BadAlloc;
             memcpy((char *)names->key_aliases,(char *)tmp,
@@ -4132,6 +4229,7 @@ _XkbSetNames(ClientPtr client, DeviceIntPtr dev, xkbSetNamesReq *stuff)
     if (stuff->which&XkbRGNamesMask) {
         if (stuff->nRadioGroups>0) {
             register unsigned i,nrg;
+
             nrg= stuff->nRadioGroups;
             if (XkbAllocNames(xkb,XkbRGNamesMask,nrg,0)!=Success)
                 return BadAlloc;
@@ -4150,6 +4248,7 @@ _XkbSetNames(ClientPtr client, DeviceIntPtr dev, xkbSetNamesReq *stuff)
     }
     if (nn.changed) {
         Bool needExtEvent;
+
         needExtEvent= (nn.changed&XkbIndicatorNamesMask)!=0;
         XkbSendNamesNotify(dev,&nn);
         if (needExtEvent) {
@@ -4249,17 +4348,16 @@ ProcXkbSetNames(ClientPtr client)
     if (rc != Success)
         return rc;
 
-    if (stuff->deviceSpec == XkbUseCoreKbd)
-    {
+    if (stuff->deviceSpec == XkbUseCoreKbd) {
         DeviceIntPtr other;
-        for (other = inputInfo.devices; other; other = other->next)
-        {
-            if ((other != dev) && other->key && !IsMaster(other) && GetMaster(other, MASTER_KEYBOARD) == dev)
-            {
 
-                rc = XaceHook(XACE_DEVICE_ACCESS, client, other, DixManageAccess);
-                if (rc == Success)
-                {
+        for (other = inputInfo.devices; other; other = other->next) {
+            if ((other != dev) && other->key && !IsMaster(other) &&
+                GetMaster(other, MASTER_KEYBOARD) == dev) {
+
+                rc = XaceHook(XACE_DEVICE_ACCESS, client, other,
+                              DixManageAccess);
+                if (rc == Success) {
                     rc = _XkbSetNamesCheck(client, other, stuff, tmp);
                     if (rc != Success)
                         return rc;
@@ -4274,15 +4372,15 @@ ProcXkbSetNames(ClientPtr client)
     if (rc != Success)
         return rc;
 
-    if (stuff->deviceSpec == XkbUseCoreKbd)
-    {
+    if (stuff->deviceSpec == XkbUseCoreKbd) {
         DeviceIntPtr other;
-        for (other = inputInfo.devices; other; other = other->next)
-        {
-            if ((other != dev) && other->key && !IsMaster(other) && GetMaster(other, MASTER_KEYBOARD) == dev)
-            {
 
-                rc = XaceHook(XACE_DEVICE_ACCESS, client, other, DixManageAccess);
+        for (other = inputInfo.devices; other; other = other->next) {
+            if ((other != dev) && other->key && !IsMaster(other) &&
+                GetMaster(other, MASTER_KEYBOARD) == dev) {
+
+                rc = XaceHook(XACE_DEVICE_ACCESS, client, other,
+                              DixManageAccess);
                 if (rc == Success)
                     _XkbSetNames(client, other, stuff);
             }
@@ -4337,7 +4435,8 @@ XkbSizeGeomProperties(XkbGeometryPtr geom)
 register int 	i,size;
 XkbPropertyPtr	prop;
     
-    for (size=i=0,prop=geom->properties;i<geom->num_properties;i++,prop++) {
+    for (size = i = 0, prop = geom->properties; i < geom->num_properties;
+         i++, prop++) {
 	size+= XkbSizeCountedString(prop->name);
 	size+= XkbSizeCountedString(prop->value);
     }
@@ -4409,6 +4508,7 @@ register XkbShapePtr	shape;
     for (i=size=0,shape=geom->shapes;i<geom->num_shapes;i++,shape++) {
 	register int		n;
 	register XkbOutlinePtr	ol;
+
 	size+= SIZEOF(xkbShapeWireDesc);
 	for (n=0,ol=shape->outlines;n<shape->num_outlines;n++,ol++) {
 	    size+= SIZEOF(xkbOutlineWireDesc);
@@ -4429,15 +4529,18 @@ xkbShapeWireDesc *	shapeWire;
 	register int 		o;
 	XkbOutlinePtr		ol;
 	xkbOutlineWireDesc *	olWire;
+
 	shapeWire= (xkbShapeWireDesc *)wire;
 	shapeWire->name= shape->name;
 	shapeWire->nOutlines= shape->num_outlines;
 	if (shape->primary!=NULL)
 	     shapeWire->primaryNdx= XkbOutlineIndex(shape,shape->primary);
-	else shapeWire->primaryNdx= XkbNoShape;
+        else
+            shapeWire->primaryNdx = XkbNoShape;
 	if (shape->approx!=NULL)
 	     shapeWire->approxNdx= XkbOutlineIndex(shape,shape->approx);
-	else shapeWire->approxNdx= XkbNoShape;
+        else
+            shapeWire->approxNdx = XkbNoShape;
 	shapeWire->pad= 0;
 	if (swap) {
 	    swapl(&shapeWire->name);
@@ -4447,6 +4550,7 @@ xkbShapeWireDesc *	shapeWire;
 	    register int	p;
 	    XkbPointPtr		pt;
 	    xkbPointWireDesc *	ptWire;
+
 	    olWire= (xkbOutlineWireDesc *)wire;
 	    olWire->nPoints= ol->num_points;
 	    olWire->cornerRadius= ol->corner_radius;
@@ -4531,8 +4635,7 @@ xkbDoodadWireDesc *	doodadWire;
 	    case XkbIndicatorDoodad:
 		doodadWire->indicator.shapeNdx= doodad->indicator.shape_ndx;
 		doodadWire->indicator.onColorNdx=doodad->indicator.on_color_ndx;
-		doodadWire->indicator.offColorNdx=
-						doodad->indicator.off_color_ndx;
+            doodadWire->indicator.offColorNdx = doodad->indicator.off_color_ndx;
 		break;
 	    case XkbLogoDoodad:
 		doodadWire->logo.angle= doodad->logo.angle;
@@ -4570,6 +4673,7 @@ xkbOverlayWireDesc *	olWire;
    	unsigned int		k;
 	XkbOverlayKeyPtr	key;
 	xkbOverlayRowWireDesc *	rowWire;
+
 	rowWire= (xkbOverlayRowWireDesc *)wire;
 	rowWire->rowUnder= row->row_under;
 	rowWire->nKeys= row->num_keys;
@@ -4577,6 +4681,7 @@ xkbOverlayWireDesc *	olWire;
 	wire= (char *)&rowWire[1];
 	for (k=0,key=row->keys;k<row->num_keys;k++,key++) {
 	    xkbOverlayKeyWireDesc *	keyWire;
+
 	    keyWire= (xkbOverlayKeyWireDesc *)wire;
 	    memcpy(keyWire->over,key->over.name,XkbKeyNameLength);
 	    memcpy(keyWire->under,key->under.name,XkbKeyNameLength);
@@ -4592,11 +4697,13 @@ XkbSizeGeomSections(XkbGeometryPtr geom)
 register int 	i,size;
 XkbSectionPtr	section;
 
-    for (i=size=0,section=geom->sections;i<geom->num_sections;i++,section++) {
+    for (i = size = 0, section = geom->sections; i < geom->num_sections;
+         i++, section++) {
 	size+= SIZEOF(xkbSectionWireDesc);
 	if (section->rows) {
 	    int		r;
 	    XkbRowPtr	row;
+
 	    for (r=0,row=section->rows;r<section->num_rows;row++,r++) {
 		size+= SIZEOF(xkbRowWireDesc);
 		size+= row->num_keys*SIZEOF(xkbKeyWireDesc);
@@ -4607,9 +4714,12 @@ XkbSectionPtr	section;
 	if (section->overlays) {
 	    int			o;
 	    XkbOverlayPtr	ol;
-	    for (o=0,ol=section->overlays;o<section->num_overlays;o++,ol++) {
+
+            for (o = 0, ol = section->overlays; o < section->num_overlays;
+                 o++, ol++) {
 		int			r;
 		XkbOverlayRowPtr	row;
+
 		size+= SIZEOF(xkbOverlayWireDesc);
 		for (r=0,row=ol->rows;r<ol->num_rows;r++,row++) {
 		   size+= SIZEOF(xkbOverlayRowWireDesc);
@@ -4628,7 +4738,8 @@ register int		i;
 XkbSectionPtr		section;
 xkbSectionWireDesc *	sectionWire;
 
-    for (i=0,section=geom->sections;i<geom->num_sections;i++,section++) {
+    for (i = 0, section = geom->sections; i < geom->num_sections;
+         i++, section++) {
 	sectionWire= (xkbSectionWireDesc *)wire;
 	sectionWire->name= section->name;
 	sectionWire->top= section->top;
@@ -4654,6 +4765,7 @@ xkbSectionWireDesc *	sectionWire;
 	    int			r;
 	    XkbRowPtr		row;
 	    xkbRowWireDesc *	rowWire;
+
 	    for (r=0,row=section->rows;r<section->num_rows;r++,row++) {
 		rowWire= (xkbRowWireDesc *)wire;
 		rowWire->top= row->top;
@@ -4670,9 +4782,11 @@ xkbSectionWireDesc *	sectionWire;
 		    int			k;
 		    XkbKeyPtr		key;
 		    xkbKeyWireDesc *	keyWire;
+
 		    keyWire= (xkbKeyWireDesc *)wire;
 		    for (k=0,key=row->keys;k<row->num_keys;k++,key++) {
-			memcpy(keyWire[k].name,key->name.name,XkbKeyNameLength);
+                        memcpy(keyWire[k].name, key->name.name,
+                               XkbKeyNameLength);
 			keyWire[k].gap= key->gap;
 			keyWire[k].shapeNdx= key->shape_ndx;
 			keyWire[k].colorNdx= key->color_ndx;
@@ -4691,6 +4805,7 @@ xkbSectionWireDesc *	sectionWire;
 	}
 	if (section->overlays) {
 	    register int o;
+
 	    for (o=0;o<section->num_overlays;o++) {
 		wire= XkbWriteGeomOverlay(wire,&section->overlays[o],swap);
 	    }
@@ -4701,8 +4816,7 @@ xkbSectionWireDesc *	sectionWire;
 
 static Status
 XkbComputeGetGeometryReplySize(	XkbGeometryPtr		geom,
-				xkbGetGeometryReply *	rep,
-				Atom			name)
+                               xkbGetGeometryReply * rep, Atom name)
 {
 int	len;
 
@@ -4743,9 +4857,7 @@ int	len;
 
 static int
 XkbSendGeometry(	ClientPtr		client,
-			XkbGeometryPtr		geom,
-			xkbGetGeometryReply *	rep,
-			Bool			freeGeom)
+                XkbGeometryPtr geom, xkbGetGeometryReply * rep, Bool freeGeom)
 {
     char	*desc,*start;
     int		 len;
@@ -4770,7 +4882,8 @@ XkbSendGeometry(	ClientPtr		client,
 	if ( rep->nKeyAliases>0 )
 	    desc = XkbWriteGeomKeyAliases(desc,geom,client->swapped);
 	if ((desc-start)!=(len)) {
-	    ErrorF("[xkb] BOGUS LENGTH in XkbSendGeometry, expected %d, got %ld\n",
+            ErrorF
+                ("[xkb] BOGUS LENGTH in XkbSendGeometry, expected %d, got %ld\n",
 			len, (unsigned long)(desc-start));
 	}
     }
@@ -4827,7 +4940,8 @@ ProcXkbGetGeometry(ClientPtr client)
     status= XkbComputeGetGeometryReplySize(geom,&rep,stuff->name);
     if (status!=Success)
 	 return status;
-    else return XkbSendGeometry(client,geom,&rep,shouldFree);
+    else
+        return XkbSendGeometry(client, geom, &rep, shouldFree);
 }
 
 /***====================================================================***/
@@ -4856,9 +4970,7 @@ CARD16	len,*plen;
 
 static Status
 _CheckSetDoodad(	char **		wire_inout,
-			XkbGeometryPtr	geom,
-			XkbSectionPtr	section,
-			ClientPtr	client)
+                XkbGeometryPtr geom, XkbSectionPtr section, ClientPtr client)
 {
 char *			wire;
 xkbDoodadWireDesc *	dWire;
@@ -4958,9 +5070,7 @@ XkbDoodadPtr		doodad;
 
 static Status
 _CheckSetOverlay(	char **		wire_inout,
-			XkbGeometryPtr	geom,
-			XkbSectionPtr	section,
-			ClientPtr	client)
+                 XkbGeometryPtr geom, XkbSectionPtr section, ClientPtr client)
 {
 register int		r;
 char *			wire;
@@ -4990,7 +5100,8 @@ xkbOverlayRowWireDesc *	rWire;
 	kWire= (xkbOverlayKeyWireDesc *)&rWire[1];
 	for (k=0;k<rWire->nKeys;k++,kWire++) {
 	    if (XkbAddGeomOverlayKey(ol,row,
-	    		(char *)kWire->over,(char *)kWire->under)==NULL) {
+                                     (char *) kWire->over,
+                                     (char *) kWire->under) == NULL) {
 		client->errorValue= _XkbErrCode3(0x21,r,k);
 		return BadMatch;
 	    }	
@@ -5005,9 +5116,7 @@ xkbOverlayRowWireDesc *	rWire;
 
 static Status
 _CheckSetSections( 	XkbGeometryPtr		geom,
-			xkbSetGeometryReq *	req,
-			char **			wire_inout,
-			ClientPtr		client)
+                  xkbSetGeometryReq * req, char **wire_inout, ClientPtr client)
 {
 Status			status;
 register int		s;
@@ -5022,6 +5131,7 @@ XkbSectionPtr		section;
     for (s=0;s<req->nSections;s++) {
 	register int		r;
 	xkbRowWireDesc *	rWire;
+
 	if (client->swapped) {
 	    swapl(&sWire->name);
 	    swaps(&sWire->top);
@@ -5046,6 +5156,7 @@ XkbSectionPtr		section;
 	    register int	k;
 	    XkbRowPtr		row;
 	    xkbKeyWireDesc *	kWire;
+
 	    if (client->swapped) {
 		swaps(&rWire->top);
 		swaps(&rWire->left);
@@ -5059,6 +5170,7 @@ XkbSectionPtr		section;
 	    kWire= (xkbKeyWireDesc *)&rWire[1];
 	    for (k=0;k<rWire->nKeys;k++) {
 		XkbKeyPtr	key;
+
 		key= XkbAddGeomKey(row);
 		if (!key)
 		    return BadAlloc;
@@ -5082,6 +5194,7 @@ XkbSectionPtr		section;
 	wire= (char *)rWire;
 	if (sWire->nDoodads>0) {
 	    register int d;
+
 	    for (d=0;d<sWire->nDoodads;d++) {
 		status=_CheckSetDoodad(&wire,geom,section,client);
 		if (status!=Success)
@@ -5090,6 +5203,7 @@ XkbSectionPtr		section;
 	}
 	if (sWire->nOverlays>0) {
 	    register int o;
+
 	    for (o=0;o<sWire->nOverlays;o++) {
 		status= _CheckSetOverlay(&wire,geom,section,client);
 		if (status!=Success)
@@ -5105,9 +5219,7 @@ XkbSectionPtr		section;
 
 static Status
 _CheckSetShapes( 	XkbGeometryPtr		geom,
-			xkbSetGeometryReq *	req,
-			char **			wire_inout,
-			ClientPtr		client)
+                xkbSetGeometryReq * req, char **wire_inout, ClientPtr client)
 {
 register int	i;
 char *		wire;
@@ -5121,11 +5233,14 @@ char *		wire;
 	xkbShapeWireDesc *	shapeWire;
 	XkbShapePtr		shape;
 	register int		o;
+
 	shapeWire= (xkbShapeWireDesc *)wire;
 	for (i=0;i<req->nShapes;i++) {
 	    xkbOutlineWireDesc *	olWire;
 	    XkbOutlinePtr		ol;
-	    shape= XkbAddGeomShape(geom,shapeWire->name,shapeWire->nOutlines);
+
+            shape =
+                XkbAddGeomShape(geom, shapeWire->name, shapeWire->nOutlines);
 	    if (!shape)
 		return BadAlloc;
 	    olWire= (xkbOutlineWireDesc *)(&shapeWire[1]);
@@ -5168,9 +5283,7 @@ char *		wire;
 }
 
 static Status
-_CheckSetGeom(	XkbGeometryPtr		geom,
-		xkbSetGeometryReq *	req,
-		ClientPtr 		client)
+_CheckSetGeom(XkbGeometryPtr geom, xkbSetGeometryReq * req, ClientPtr client)
 {
 register int	i;
 Status		status;
@@ -5181,6 +5294,7 @@ char *		wire;
 
     for (i=0;i<req->nProperties;i++) {
 	char *name,*val;
+
 	name= _GetCountedString(&wire,client->swapped);
         if (!name)
             return BadAlloc;
@@ -5203,11 +5317,13 @@ char *		wire;
 	return BadValue;
     }
     if (req->baseColorNdx>req->nColors) {
-	client->errorValue=_XkbErrCode3(0x03,req->nColors,req->baseColorNdx);
+        client->errorValue =
+            _XkbErrCode3(0x03, req->nColors, req->baseColorNdx);
 	return BadMatch;
     }
     if (req->labelColorNdx>req->nColors) {
-	client->errorValue= _XkbErrCode3(0x03,req->nColors,req->labelColorNdx);
+        client->errorValue =
+            _XkbErrCode3(0x03, req->nColors, req->labelColorNdx);
 	return BadMatch;
     }
     if (req->labelColorNdx==req->baseColorNdx) {
@@ -5218,6 +5334,7 @@ char *		wire;
 
     for (i=0;i<req->nColors;i++) {
 	char *name;
+
 	name= _GetCountedString(&wire,client->swapped);
 	if (!name)
             return BadAlloc;
@@ -5294,6 +5411,7 @@ _XkbSetGeometry(ClientPtr client, DeviceIntPtr dev, xkbSetGeometryReq *stuff)
         XkbFreeGeometry(old,XkbGeomAllMask,TRUE);
     if (new_name) {
         xkbNamesNotify	nn;
+
         memset(&nn, 0, sizeof(xkbNamesNotify));
         nn.changed= XkbGeometryNameMask;
         XkbSendNamesNotify(dev,&nn);
@@ -5327,14 +5445,14 @@ ProcXkbSetGeometry(ClientPtr client)
     if (rc != Success)
         return rc;
 
-    if (stuff->deviceSpec == XkbUseCoreKbd)
-    {
+    if (stuff->deviceSpec == XkbUseCoreKbd) {
         DeviceIntPtr other;
-        for (other = inputInfo.devices; other; other = other->next)
-        {
-            if ((other != dev) && other->key && !IsMaster(other) && GetMaster(other, MASTER_KEYBOARD) == dev)
-            {
-                rc = XaceHook(XACE_DEVICE_ACCESS, client, other, DixManageAccess);
+
+        for (other = inputInfo.devices; other; other = other->next) {
+            if ((other != dev) && other->key && !IsMaster(other) &&
+                GetMaster(other, MASTER_KEYBOARD) == dev) {
+                rc = XaceHook(XACE_DEVICE_ACCESS, client, other,
+                              DixManageAccess);
                 if (rc == Success)
                     _XkbSetGeometry(client, other, stuff);
             }
@@ -5375,12 +5493,14 @@ ProcXkbPerClientFlags(ClientPtr client)
     }
     if (stuff->change&XkbPCF_AutoResetControlsMask) {
 	Bool	want;
+
 	want= stuff->value&XkbPCF_AutoResetControlsMask;
 	if (interest && !want) {
 	    interest->autoCtrls= interest->autoCtrlValues= 0;
 	}
 	else if (want && (!interest)) {
 	    XID id = FakeClientID(client->index);
+
 	    if (!AddResource(id,RT_XKBCLIENT,dev))
 		return BadAlloc;
 	    interest= XkbAddClientResource((DevicePtr)dev,client,id);
@@ -5389,6 +5509,7 @@ ProcXkbPerClientFlags(ClientPtr client)
 	}
 	if (interest && want ) {
 	    register unsigned affect;
+
 	    affect= stuff->ctrlsToChange;
 
 	    CHK_MASK_LEGAL(0x03,affect,XkbAllBooleanCtrlsMask);
@@ -5447,8 +5568,10 @@ int		len;
 register int	i;
 unsigned char	*wire,*str,*tmp,*legal;
 
-    if (allowExpr)	legal= &componentExprLegal[0];
-    else		legal= &componentSpecLegal[0];
+    if (allowExpr)
+        legal = &componentExprLegal[0];
+    else
+        legal = &componentSpecLegal[0];
 
     wire= *pWire;
     len= (*(unsigned char *)wire++);
@@ -5459,7 +5582,8 @@ unsigned char	*wire,*str,*tmp,*legal;
 	    for (i=0;i<len;i++) {
 		if (legal[(*wire)/8]&(1<<((*wire)%8)))
 		    *tmp++= *wire++;
-		else wire++;
+                else
+                    wire++;
 	    }
 	    if (tmp!=str)
 		*tmp++= '\0';
@@ -5608,7 +5732,8 @@ ProcXkbGetKbdByName(ClientPtr client)
     
     if (stuff->load)
 	 fwant= XkbGBN_AllComponentsMask;
-    else fwant= stuff->want|stuff->need;
+    else
+        fwant = stuff->want | stuff->need;
     if ((!names.compat)&&
         (fwant&(XkbGBN_CompatMapMask|XkbGBN_IndicatorMapMask))) {
         names.compat= Xstrdup("%");
@@ -5619,7 +5744,8 @@ ProcXkbGetKbdByName(ClientPtr client)
     if ((!names.symbols)&&(fwant&XkbGBN_SymbolsMask)) {
         names.symbols= Xstrdup("%");
     }
-    geom_changed= ((names.geometry!=NULL)&&(strcmp(names.geometry,"%")!=0));
+    geom_changed = ((names.geometry != NULL) &&
+                    (strcmp(names.geometry, "%") != 0));
     if ((!names.geometry)&&(fwant&XkbGBN_GeometryMask)) {
         names.geometry= Xstrdup("%");
         geom_changed= FALSE;
@@ -5633,7 +5759,8 @@ ProcXkbGetKbdByName(ClientPtr client)
     rep.minKeyCode = xkb->min_key_code;
     rep.maxKeyCode = xkb->max_key_code;
     rep.loaded=	FALSE;
-    fwant= XkbConvertGetByNameComponents(TRUE,stuff->want)|XkmVirtualModsMask;
+    fwant =
+        XkbConvertGetByNameComponents(TRUE, stuff->want) | XkmVirtualModsMask;
     fneed= XkbConvertGetByNameComponents(TRUE,stuff->need);
     rep.reported= XkbConvertGetByNameComponents(FALSE,fwant|fneed);
     if (stuff->load) {
@@ -5660,10 +5787,10 @@ ProcXkbGetKbdByName(ClientPtr client)
 	if (stuff->load || 
 		((rep.reported&XkbGBN_SymbolsMask) && (new->compat))) {
 	    XkbChangesRec changes;
+
 	    memset(&changes, 0, sizeof(changes));
 	    XkbUpdateDescActions(new,
-			new->min_key_code,XkbNumKeys(new),
-			&changes);
+                                 new->min_key_code, XkbNumKeys(new), &changes);
 	}
 
 	if (new->map==NULL)
@@ -5672,7 +5799,8 @@ ProcXkbGetKbdByName(ClientPtr client)
 	    mrep.type= X_Reply;
 	    mrep.deviceID = dev->id;
 	    mrep.sequenceNumber= client->sequence;
-	    mrep.length = ((SIZEOF(xkbGetMapReply)-SIZEOF(xGenericReply))>>2);
+            mrep.length =
+                ((SIZEOF(xkbGetMapReply) - SIZEOF(xGenericReply)) >> 2);
 	    mrep.minKeyCode = new->min_key_code;
 	    mrep.maxKeyCode = new->max_key_code;
 	    mrep.present = 0;
@@ -5753,7 +5881,8 @@ ProcXkbGetKbdByName(ClientPtr client)
 		nrep.which= XkbAllNamesMask;
 		if (new->map!=NULL)
 		     nrep.nTypes= new->map->num_types;
-		else nrep.nTypes= 0;
+                else
+                    nrep.nTypes = 0;
 		nrep.nKTLevels= 0;
 		nrep.groupNames= XkbAllGroupsMask;
 		nrep.virtualMods= XkbAllVirtualModsMask;
@@ -5825,6 +5954,7 @@ ProcXkbGetKbdByName(ClientPtr client)
 	XkbDescPtr		old_xkb;
 	xkbNewKeyboardNotify 	nkn;
 	int 			i,nG,nTG;
+
 	old_xkb= xkb;
 	xkb= new;
 	dev->key->xkbInfo->desc= xkb;
@@ -5891,8 +6021,7 @@ ProcXkbGetKbdByName(ClientPtr client)
 
 static int
 ComputeDeviceLedInfoSize(	DeviceIntPtr		dev,
-				unsigned int		what,
-				XkbSrvLedInfoPtr	sli)
+                         unsigned int what, XkbSrvLedInfoPtr sli)
 {
 int			nNames,nMaps;
 register unsigned 	n,bit;
@@ -5921,28 +6050,31 @@ register unsigned 	n,bit;
 static int 
 CheckDeviceLedFBs(	DeviceIntPtr			dev,
 			int				class,
-			int				id,
-			xkbGetDeviceInfoReply *		rep,
-			ClientPtr			client)
+                  int id, xkbGetDeviceInfoReply * rep, ClientPtr client)
 {
 int			nFBs= 0;
 int			length= 0;
 Bool			classOk;
 
     if (class==XkbDfltXIClass) {
-	if (dev->kbdfeed)	class= KbdFeedbackClass;
-	else if (dev->leds)	class= LedFeedbackClass;
+        if (dev->kbdfeed)
+            class = KbdFeedbackClass;
+        else if (dev->leds)
+            class = LedFeedbackClass;
 	else {
 	    client->errorValue= _XkbErrCode2(XkbErr_BadClass,class);
 	    return XkbKeyboardErrorCode;
 	}
     }
     classOk= FALSE;
-    if ((dev->kbdfeed)&&((class==KbdFeedbackClass)||(class==XkbAllXIClasses))) {
+    if ((dev->kbdfeed) &&
+        ((class == KbdFeedbackClass) || (class == XkbAllXIClasses))) {
 	KbdFeedbackPtr kf;
+
 	classOk= TRUE;
 	for (kf= dev->kbdfeed;(kf);kf=kf->next) {
-	    if ((id!=XkbAllXIIds)&&(id!=XkbDfltXIId)&&(id!=kf->ctrl.id))
+            if ((id != XkbAllXIIds) && (id != XkbDfltXIId) &&
+                (id != kf->ctrl.id))
 		continue;
 	    nFBs++;
 	    length+= SIZEOF(xkbDeviceLedsWireDesc);
@@ -5953,11 +6085,14 @@ Bool			classOk;
 		break;
 	}
     }
-    if ((dev->leds)&&((class==LedFeedbackClass)||(class==XkbAllXIClasses))) {
+    if ((dev->leds) &&
+        ((class == LedFeedbackClass) || (class == XkbAllXIClasses))) {
 	LedFeedbackPtr lf;
+
 	classOk= TRUE;
 	for (lf= dev->leds;(lf);lf=lf->next) {
-	    if ((id!=XkbAllXIIds)&&(id!=XkbDfltXIId)&&(id!=lf->ctrl.id))
+            if ((id != XkbAllXIIds) && (id != XkbDfltXIId) &&
+                (id != lf->ctrl.id))
 		continue;
 	    nFBs++;
 	    length+= SIZEOF(xkbDeviceLedsWireDesc);
@@ -5973,14 +6108,15 @@ Bool			classOk;
         rep->length+= (length/4);
 	return Success;
     }
-    if (classOk) client->errorValue= _XkbErrCode2(XkbErr_BadId,id);
-    else	 client->errorValue= _XkbErrCode2(XkbErr_BadClass,class);
+    if (classOk)
+        client->errorValue = _XkbErrCode2(XkbErr_BadId, id);
+    else
+        client->errorValue = _XkbErrCode2(XkbErr_BadClass, class);
     return XkbKeyboardErrorCode;
 }
 
 static int
-SendDeviceLedInfo(	XkbSrvLedInfoPtr	sli,
-			ClientPtr		client)
+SendDeviceLedInfo(XkbSrvLedInfoPtr sli, ClientPtr client)
 {
 xkbDeviceLedsWireDesc	wire;
 int			length;
@@ -6004,8 +6140,10 @@ int			length;
     length+= SIZEOF(xkbDeviceLedsWireDesc);
     if (sli->namesPresent|sli->mapsPresent) {
 	register unsigned i,bit;
+
 	if (sli->namesPresent) {
 	    CARD32	awire;
+
 	    for (i=0,bit=1;i<XkbNumIndicators;i++,bit<<=1) {
 		if (sli->namesPresent&bit) {
 		    awire= (CARD32)sli->names[i];
@@ -6020,6 +6158,7 @@ int			length;
 	if (sli->mapsPresent) {
 	    for (i=0,bit=1;i<XkbNumIndicators;i++,bit<<=1) {
 		xkbIndicatorMapWireDesc	iwire;
+
 		if (sli->mapsPresent&bit) {
 		    iwire.flags= 	sli->maps[i].flags;
 		    iwire.whichGroups=	sli->maps[i].which_groups;
@@ -6045,22 +6184,23 @@ int			length;
 
 static int
 SendDeviceLedFBs(	DeviceIntPtr	dev,
-			int		class,
-			int		id,
-			unsigned	wantLength,
-			ClientPtr	client)
+                 int class, int id, unsigned wantLength, ClientPtr client)
 {
 int			length= 0;
 
     if (class==XkbDfltXIClass) {
-	if (dev->kbdfeed)	class= KbdFeedbackClass;
-	else if (dev->leds)	class= LedFeedbackClass;
+        if (dev->kbdfeed)
+            class = KbdFeedbackClass;
+        else if (dev->leds)
+            class = LedFeedbackClass;
     }
     if ((dev->kbdfeed)&&
 	((class==KbdFeedbackClass)||(class==XkbAllXIClasses))) {
 	KbdFeedbackPtr kf;
+
 	for (kf= dev->kbdfeed;(kf);kf=kf->next) {
-	    if ((id==XkbAllXIIds)||(id==XkbDfltXIId)||(id==kf->ctrl.id)) {
+            if ((id == XkbAllXIIds) || (id == XkbDfltXIId) ||
+                (id == kf->ctrl.id)) {
 		length+= SendDeviceLedInfo(kf->xkb_sli,client);
 		if (id!=XkbAllXIIds)
 		    break;
@@ -6070,8 +6210,10 @@ int			length= 0;
     if ((dev->leds)&&
 	((class==LedFeedbackClass)||(class==XkbAllXIClasses))) {
 	LedFeedbackPtr lf;
+
 	for (lf= dev->leds;(lf);lf=lf->next) {
-	    if ((id==XkbAllXIIds)||(id==XkbDfltXIId)||(id==lf->ctrl.id)) {
+            if ((id == XkbAllXIIds) || (id == XkbDfltXIId) ||
+                (id == lf->ctrl.id)) {
 		length+= SendDeviceLedInfo(lf->xkb_sli,client);
 		if (id!=XkbAllXIIds)
 		    break;
@@ -6080,7 +6222,8 @@ int			length= 0;
     }
     if (length==wantLength)
 	 return Success;
-    else return BadLength;
+    else
+        return BadLength;
 }
 
 int
@@ -6123,14 +6266,19 @@ char *			str;
     rep.firstBtnRtrn = rep.nBtnsRtrn = 0;
     if (dev->button)
 	 rep.totalBtns= dev->button->numButtons;
-    else rep.totalBtns= 0;
+    else
+        rep.totalBtns = 0;
     rep.devType=	dev->xinput_type;
     rep.hasOwnState=	(dev->key && dev->key->xkbInfo);
     rep.nDeviceLedFBs = 0;
-    if (dev->kbdfeed)	rep.dfltKbdFB= dev->kbdfeed->ctrl.id;
-    else		rep.dfltKbdFB= XkbXINone;
-    if (dev->leds)	rep.dfltLedFB= dev->leds->ctrl.id;
-    else		rep.dfltLedFB= XkbXINone;
+    if (dev->kbdfeed)
+        rep.dfltKbdFB = dev->kbdfeed->ctrl.id;
+    else
+        rep.dfltKbdFB = XkbXINone;
+    if (dev->leds)
+        rep.dfltLedFB = dev->leds->ctrl.id;
+    else
+        rep.dfltLedFB = XkbXINone;
 
     ledClass= stuff->ledClass;
     ledID= stuff->ledID;
@@ -6145,8 +6293,7 @@ char *			str;
 
 	if ((stuff->firstBtn+stuff->nBtns)>dev->button->numButtons) {
 	    client->errorValue = _XkbErrCode4(0x02,dev->button->numButtons,
-							stuff->firstBtn,
-							stuff->nBtns);
+                                              stuff->firstBtn, stuff->nBtns);
 	    return BadValue;
 	}
 	else {
@@ -6165,7 +6312,9 @@ char *			str;
 		}
 		rep.firstBtnRtrn+=	i;
 		rep.nBtnsRtrn-=		i;
-		act= &dev->button->xkb_acts[rep.firstBtnRtrn+rep.nBtnsRtrn-1];
+                act =
+                    &dev->button->xkb_acts[rep.firstBtnRtrn + rep.nBtnsRtrn -
+                                           1];
 		for (i=0;i<rep.nBtnsRtrn;i++,act--) {
 		    if (act->type!=XkbSA_NoAction)
 			break;
@@ -6207,6 +6356,7 @@ char *			str;
     if (rep.nBtnsRtrn>0) {
 	int			sz;
 	xkbActionWireDesc *	awire;
+
 	sz= rep.nBtnsRtrn*SIZEOF(xkbActionWireDesc);
 	awire= (xkbActionWireDesc *)&dev->button->xkb_acts[rep.firstBtnRtrn];
 	WriteToClient(client,sz,(char *)awire);
@@ -6219,7 +6369,8 @@ char *			str;
     }
     else if (length!=0)  {
 	ErrorF("[xkb] Internal Error!  BadLength in ProcXkbGetDeviceInfo\n");
-	ErrorF("[xkb]                  Wrote %d fewer bytes than expected\n",length);
+        ErrorF("[xkb]                  Wrote %d fewer bytes than expected\n",
+               length);
 	return BadLength;
     }
     return Success;
@@ -6228,9 +6379,7 @@ char *			str;
 static char *
 CheckSetDeviceIndicators(	char *		wire,
 				DeviceIntPtr	dev,
-				int		num,
-				int *		status_rtrn,
-				ClientPtr	client)
+                         int num, int *status_rtrn, ClientPtr client)
 {
 xkbDeviceLedsWireDesc *	ledWire;
 int			i;
@@ -6282,11 +6431,9 @@ XkbSrvLedInfoPtr 	sli;
 		    }
 		    CHK_MASK_LEGAL3(0x21,mapWire->whichGroups,
 						XkbIM_UseAnyGroup,
-						client->errorValue,
-						*status_rtrn,NULL);
+                                    client->errorValue, *status_rtrn, NULL);
 		    CHK_MASK_LEGAL3(0x22,mapWire->whichMods,XkbIM_UseAnyMods,
-						client->errorValue,
-						*status_rtrn,NULL);
+                                    client->errorValue, *status_rtrn, NULL);
 		    mapWire++;
 		}
 	    }
@@ -6306,8 +6453,7 @@ SetDeviceIndicators(	char *			wire,
 			unsigned		changed,
 			int			num,
 			int *			status_rtrn,
-			ClientPtr		client,
-			xkbExtensionDeviceNotify *ev)
+                    ClientPtr client, xkbExtensionDeviceNotify * ev)
 {
 xkbDeviceLedsWireDesc *		ledWire;
 int				i;
@@ -6357,7 +6503,8 @@ DeviceIntPtr			kbd;
 	if (changed&XkbXI_IndicatorMapsMask) {
 	    mapc= sli->mapsPresent|ledWire->mapsPresent;
 	    sli->mapsPresent= ledWire->mapsPresent;
-	    memset((char*)sli->maps, 0, XkbNumIndicators*sizeof(XkbIndicatorMapRec));
+            memset((char *) sli->maps, 0,
+                   XkbNumIndicators * sizeof(XkbIndicatorMapRec));
 	}
 	if (ledWire->mapsPresent) {
 	    for (n=0,bit=1;n<XkbNumIndicators;n++,bit<<=1) {
@@ -6396,7 +6543,6 @@ DeviceIntPtr			kbd;
     return (char *)ledWire;
 }
 
-
 static int
 _XkbSetDeviceInfo(ClientPtr client, DeviceIntPtr dev,
                   xkbSetDeviceInfoReq *stuff)
@@ -6410,7 +6556,8 @@ _XkbSetDeviceInfo(ClientPtr client, DeviceIntPtr dev,
 	    return XkbKeyboardErrorCode;
 	}
 	if ((stuff->firstBtn+stuff->nBtns)>dev->button->numButtons) {
-	    client->errorValue= _XkbErrCode4(0x02,stuff->firstBtn,stuff->nBtns,
+            client->errorValue =
+                _XkbErrCode4(0x02, stuff->firstBtn, stuff->nBtns,
 						dev->button->numButtons);
 	    return BadMatch;
 	}
@@ -6418,6 +6565,7 @@ _XkbSetDeviceInfo(ClientPtr client, DeviceIntPtr dev,
     }
     if (stuff->change&XkbXI_IndicatorsMask) {
 	int status= Success;
+
 	wire= CheckSetDeviceIndicators(wire,dev,stuff->nDeviceLedFBs,
 							&status,client);
 	if (status!=Success)
@@ -6459,8 +6607,10 @@ _XkbSetDeviceInfoCheck(ClientPtr client, DeviceIntPtr dev,
 	ed.firstBtn=	stuff->firstBtn;
 	ed.nBtns=	stuff->nBtns;
 
-	if (dev->key)	kbd= dev;
-	else		kbd= inputInfo.keyboard;
+        if (dev->key)
+            kbd = dev;
+        else
+            kbd = inputInfo.keyboard;
 	acts= &dev->button->xkb_acts[stuff->firstBtn];
 	for (i=0;i<stuff->nBtns;i++,acts++) {
 	    if (acts->type!=XkbSA_NoAction)
@@ -6469,6 +6619,7 @@ _XkbSetDeviceInfoCheck(ClientPtr client, DeviceIntPtr dev,
     }
     if (stuff->change&XkbXI_IndicatorsMask) {
 	int status= Success;
+
 	wire= SetDeviceIndicators(wire,dev,stuff->change,
 				  stuff->nDeviceLedFBs, &status,client,&ed);
 	if (status!=Success)
@@ -6499,18 +6650,18 @@ ProcXkbSetDeviceInfo(ClientPtr client)
     if (rc != Success)
         return rc;
 
-    if (stuff->deviceSpec == XkbUseCoreKbd || stuff->deviceSpec == XkbUseCorePtr)
-    {
+    if (stuff->deviceSpec == XkbUseCoreKbd ||
+        stuff->deviceSpec == XkbUseCorePtr) {
         DeviceIntPtr other;
-        for (other = inputInfo.devices; other; other = other->next)
-        {
-            if (((other != dev) && !IsMaster(other) && GetMaster(other, MASTER_KEYBOARD) == dev) &&
+
+        for (other = inputInfo.devices; other; other = other->next) {
+            if (((other != dev) && !IsMaster(other) &&
+                 GetMaster(other, MASTER_KEYBOARD) == dev) &&
                 ((stuff->deviceSpec == XkbUseCoreKbd && other->key) ||
-                (stuff->deviceSpec == XkbUseCorePtr && other->button)))
-            {
-                rc = XaceHook(XACE_DEVICE_ACCESS, client, other, DixManageAccess);
-                if (rc == Success)
-                {
+                 (stuff->deviceSpec == XkbUseCorePtr && other->button))) {
+                rc = XaceHook(XACE_DEVICE_ACCESS, client, other,
+                              DixManageAccess);
+                if (rc == Success) {
                     rc = _XkbSetDeviceInfoCheck(client, other, stuff);
                     if (rc != Success)
                         return rc;
@@ -6524,18 +6675,18 @@ ProcXkbSetDeviceInfo(ClientPtr client)
     if (rc != Success)
         return rc;
 
-    if (stuff->deviceSpec == XkbUseCoreKbd || stuff->deviceSpec == XkbUseCorePtr)
-    {
+    if (stuff->deviceSpec == XkbUseCoreKbd ||
+        stuff->deviceSpec == XkbUseCorePtr) {
         DeviceIntPtr other;
-        for (other = inputInfo.devices; other; other = other->next)
-        {
-            if (((other != dev) && !IsMaster(other) && GetMaster(other, MASTER_KEYBOARD) == dev) &&
+
+        for (other = inputInfo.devices; other; other = other->next) {
+            if (((other != dev) && !IsMaster(other) &&
+                 GetMaster(other, MASTER_KEYBOARD) == dev) &&
                 ((stuff->deviceSpec == XkbUseCoreKbd && other->key) ||
-                (stuff->deviceSpec == XkbUseCorePtr && other->button)))
-            {
-                rc = XaceHook(XACE_DEVICE_ACCESS, client, other, DixManageAccess);
-                if (rc == Success)
-                {
+                 (stuff->deviceSpec == XkbUseCorePtr && other->button))) {
+                rc = XaceHook(XACE_DEVICE_ACCESS, client, other,
+                              DixManageAccess);
+                if (rc == Success) {
                     rc = _XkbSetDeviceInfo(client, other, stuff);
                     if (rc != Success)
                         return rc;
@@ -6568,15 +6719,19 @@ int rc;
     newCtrls=  xkbDebugCtrls&(~stuff->affectCtrls);
     newCtrls|= (stuff->ctrls&stuff->affectCtrls);
     if (xkbDebugFlags || newFlags || stuff->msgLength) {
-	ErrorF("[xkb] XkbDebug: Setting debug flags to 0x%lx\n",(long)newFlags);
+        ErrorF("[xkb] XkbDebug: Setting debug flags to 0x%lx\n",
+               (long) newFlags);
 	if (newCtrls!=xkbDebugCtrls)
-	    ErrorF("[xkb] XkbDebug: Setting debug controls to 0x%lx\n",(long)newCtrls);
+            ErrorF("[xkb] XkbDebug: Setting debug controls to 0x%lx\n",
+                   (long) newCtrls);
     }
     extraLength= (stuff->length<<2)-sz_xkbSetDebuggingFlagsReq;
     if (stuff->msgLength>0) {
 	char *msg;
+
 	if (extraLength<XkbPaddedSize(stuff->msgLength)) {
-	    ErrorF("[xkb] XkbDebug: msgLength= %d, length= %ld (should be %d)\n",
+            ErrorF
+                ("[xkb] XkbDebug: msgLength= %d, length= %ld (should be %d)\n",
 			stuff->msgLength,(long)extraLength,
 			XkbPaddedSize(stuff->msgLength));
 	    return BadLength;
@@ -6615,8 +6770,7 @@ static int
 ProcXkbDispatch (ClientPtr client)
 {
     REQUEST(xReq);
-    switch (stuff->data)
-    {
+    switch (stuff->data) {
     case X_kbUseExtension:
 	return ProcXkbUseExtension(client);
     case X_kbSelectEvents:
@@ -6680,7 +6834,8 @@ XkbClientGone(pointer data,XID id)
     DevicePtr	pXDev = (DevicePtr)data;
 
     if (!XkbRemoveResourceClient(pXDev,id)) {
-	ErrorF("[xkb] Internal Error! bad RemoveResourceClient in XkbClientGone\n");
+        ErrorF
+            ("[xkb] Internal Error! bad RemoveResourceClient in XkbClientGone\n");
     }
     return 1;
 }
@@ -6707,5 +6862,3 @@ XkbExtensionInit(void)
     }
     return;
 }
-
-
