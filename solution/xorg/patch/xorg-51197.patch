diff --git a/hw/xfree86/modes/xf86RandR12.c b/hw/xfree86/modes/xf86RandR12.c
index ac58135..e3330f4 100644
--- a/hw/xfree86/modes/xf86RandR12.c
+++ b/hw/xfree86/modes/xf86RandR12.c
@@ -1747,6 +1747,112 @@ xf86RandR14SetCrtcSpriteTransform(ScreenPtr		pScreen,
 }
 
 static Bool
+xf86RRConvertCrtcConfig(xf86CrtcSetConfigPtr	xf86_config,
+			RRCrtcConfigPtr		rr_config)
+{
+    RRCrtcPtr		rr_crtc = rr_config->crtc;
+    xf86CrtcPtr		crtc = rr_crtc->devPrivate;
+    ScrnInfoPtr		scrn = xf86Screens[rr_crtc->pScreen->myNum];
+    int			o;
+
+    xf86_config->crtc = crtc;
+    xf86_config->x = rr_config->x;
+    xf86_config->y = rr_config->y;
+    xf86RandRModeConvert(scrn, rr_config->mode, &xf86_config->mode);
+    xf86_config->rotation = rr_config->rotation;
+    xf86_config->numOutputs = rr_config->numOutputs;
+    xf86_config->outputs = calloc(rr_config->numOutputs, sizeof (xf86OutputPtr));
+    if (!xf86_config->outputs)
+	return FALSE;
+    for (o = 0; o < rr_config->numOutputs; o++)
+	xf86_config->outputs[o] = rr_config->outputs[o]->devPrivate;
+    xf86_config->sprite_position_transform = rr_config->sprite_position_transform;
+    xf86_config->sprite_image_transform = rr_config->sprite_image_transform;
+    xf86_config->pixmap = rr_config->pixmap;
+    xf86_config->pixmap_x = rr_config->pixmap_x;
+    xf86_config->pixmap_y = rr_config->pixmap_y;
+    return TRUE;
+}
+
+static void
+xf86FreeCrtcSetConfigs(xf86CrtcSetConfigPtr xf86_crtc_configs, int num_configs)
+{
+    int	i;
+
+    for (i = 0; i < num_configs; i++)
+	free(xf86_crtc_configs[i].outputs);
+    free(xf86_crtc_configs);
+}
+
+static Bool
+xf86RRSetCrtcConfigs(ScreenPtr screen,
+		     RRScreenConfigPtr screen_config,
+		     RRCrtcConfigPtr crtc_configs,
+		     int num_configs)
+{
+    ScrnInfoPtr	     		scrn = xf86Screens[screen->myNum];
+    xf86CrtcConfigPtr		config = XF86_CRTC_CONFIG_PTR(scrn);
+
+    if (config->funcs->set_config) {
+	xf86CrtcSetConfigPtr	xf86_crtc_configs;
+	int			i;
+	xf86SetConfigResponse	response;
+
+	/*
+	 * Convert RRCrtcConfigRecs to xf86CrtcSetConfigs
+	 */
+	xf86_crtc_configs = calloc(num_configs, sizeof (xf86CrtcSetConfigRec));
+	if (!xf86_crtc_configs)
+	    return FALSE;
+	for (i = 0; i < num_configs; i++)
+	    if (!xf86RRConvertCrtcConfig(&xf86_crtc_configs[i], &crtc_configs[i])) {
+		xf86FreeCrtcSetConfigs(xf86_crtc_configs, num_configs);
+		return FALSE;
+	    }
+
+	/*
+	 * Ask the driver to set the configuration
+	 */
+	response = (*config->funcs->set_config)(scrn,
+						screen_config,
+						xf86_crtc_configs,
+						num_configs);
+	xf86FreeCrtcSetConfigs(xf86_crtc_configs, num_configs);
+
+	/*
+	 * The driver is allowed to answer with one of three
+	 * responses:
+	 */
+	switch (response) {
+	case xf86SetConfigFailed:
+
+	    /* The configuration isn't usable, or some error
+	     * occurred while setting it. Everything has been
+	     * cleaned up and we're ready to return an error
+	     * back to the client
+	     */
+	    return FALSE;
+	case xf86SetConfigDone:
+
+	    /* The configuration was acceptable, and the whole
+	     * mode setting experience is over. Nothing more to do
+	     * here.
+	     */
+	    return TRUE;
+	case xf86SetConfigChecked:
+
+	    /* The configuration was acceptable, but the driver
+	     * didn't actually do anything. Go ask the DIX code
+	     * to do the mode setting operation using the simpler
+	     * interfaces
+	     */
+	    break;
+	}
+    }
+    return miRRSetCrtcConfigs(screen, screen_config, crtc_configs, num_configs);
+}
+
+static Bool
 xf86RandR12EnterVT (int screen_index, int flags)
 {
     ScreenPtr        pScreen = screenInfo.screens[screen_index];
@@ -1797,7 +1903,7 @@ xf86RandR12Init12 (ScreenPtr pScreen)
     pScrn->PointerMoved = xf86RandR12PointerMoved;
     pScrn->ChangeGamma = xf86RandR12ChangeGamma;
     rp->rrSetCrtcSpriteTransform = xf86RandR14SetCrtcSpriteTransform;
-    rp->rrSetCrtcConfigs = miRRSetCrtcConfigs;
+    rp->rrSetCrtcConfigs = xf86RRSetCrtcConfigs;
 
     randrp->orig_EnterVT = pScrn->EnterVT;
     pScrn->EnterVT = xf86RandR12EnterVT;
