diff --git a/hw/kdrive/ephyr/hostx.c b/hw/kdrive/ephyr/hostx.c
index ebe4e52..6988f16 100644
--- a/hw/kdrive/ephyr/hostx.c
+++ b/hw/kdrive/ephyr/hostx.c
@@ -38,7 +38,6 @@
 #undef _XSERVER64
 #endif
 
-
 #include "hostx.h"
 
 #include <stdlib.h>
@@ -65,8 +64,7 @@
 
 #ifdef XF86DRI
 extern Bool XF86DRIQueryExtension (Display *dpy,
-                                   int *event_basep,
-                                   int *error_basep);
+                                  int *event_basep, int *error_basep);
 #endif
 
 /*  
@@ -75,8 +73,7 @@ extern Bool XF86DRIQueryExtension (Display *dpy,
  * to get clobbered. 
  */
 
-struct EphyrHostScreen
-{
+struct EphyrHostScreen {
   Window          win;
   Window          win_pre_existing; 	/* Set via -parent option like xnest */
   Window          peer_win;          /* Used for GL; should be at most one */
@@ -90,8 +87,7 @@ struct EphyrHostScreen
   int             mynum;  /* Screen number */
 };
 
-struct EphyrHostXVars
-{
+struct EphyrHostXVars {
   char           *server_dpy_name;
   Display        *dpy;
   int             screen;
@@ -140,10 +136,8 @@ host_screen_from_screen_info (EphyrScreenInfo *screen)
 {
   int i;
 
-  for (i = 0 ; i < HostX.n_screens ; i++)
-    {
-      if ( HostX.screens[i].info == screen)
-        {
+    for (i = 0; i < HostX.n_screens; i++) {
+        if (HostX.screens[i].info == screen) {
           return &HostX.screens[i];
         }
     }
@@ -151,8 +145,7 @@ host_screen_from_screen_info (EphyrScreenInfo *screen)
 }
 
 static int
-error_handler(Display     *display,
-              XErrorEvent *error)
+error_handler(Display * display, XErrorEvent * error)
 {
   trapped_error_code = error->error_code;
   return 0;
@@ -179,8 +172,7 @@ hostx_want_screen_size (EphyrScreenInfo screen, int *width, int *height )
 
   if (host_screen &&
        (host_screen->win_pre_existing != None ||
-         HostX.use_fullscreen == True))
-    {
+         HostX.use_fullscreen == True)) {
       *width  = host_screen->win_width;
       *height = host_screen->win_height;
       return 1;
@@ -190,9 +182,7 @@ hostx_want_screen_size (EphyrScreenInfo screen, int *width, int *height )
 }
 
 void
-hostx_add_screen (EphyrScreenInfo screen,
-                  unsigned long win_id,
-                  int screen_num)
+hostx_add_screen(EphyrScreenInfo screen, unsigned long win_id, int screen_num)
 {
   int index = HostX.n_screens;
 
@@ -205,7 +195,6 @@ hostx_add_screen (EphyrScreenInfo screen,
   HostX.screens[index].win_pre_existing = win_id;
 }
 
-
 void
 hostx_set_display_name (char *name)
 {
@@ -216,10 +205,12 @@ void
 hostx_set_screen_number(EphyrScreenInfo screen, int number)
 {
   struct EphyrHostScreen *host_screen = host_screen_from_screen_info (screen);
+
   if (host_screen) {
     host_screen->mynum = number;
     hostx_set_win_title (host_screen->info, "") ;
-  }}
+    }
+}
 
 void
 hostx_set_win_title (EphyrScreenInfo screen, char *extra_text)
@@ -231,15 +222,15 @@ hostx_set_win_title (EphyrScreenInfo screen, char *extra_text)
 
     if (ephyrTitle) {
       XStoreName(HostX.dpy, host_screen->win, ephyrTitle);
-    } else {
+    }
+    else {
 #define BUF_LEN 256
       char buf[BUF_LEN+1];
 
       memset (buf, 0, BUF_LEN+1) ;
       snprintf (buf, BUF_LEN, "Xephyr on %s.%d %s", 
 		HostX.server_dpy_name, 
-		host_screen->mynum,
-		(extra_text != NULL) ? extra_text : "");
+                 host_screen->mynum, (extra_text != NULL) ? extra_text : "");
 
       XStoreName (HostX.dpy, host_screen->win, buf);
     }
@@ -262,12 +253,10 @@ hostx_want_preexisting_window (EphyrScreenInfo screen)
 {
   struct EphyrHostScreen *host_screen = host_screen_from_screen_info (screen);
 
-  if (host_screen && host_screen->win_pre_existing)
-    {
+    if (host_screen && host_screen->win_pre_existing) {
       return 1;
     }
-  else
-    {
+    else {
     return 0;
     }
 }
@@ -290,13 +279,11 @@ hostx_set_fullscreen_hint (void)
   Atom atom_WINDOW_STATE, atom_WINDOW_STATE_FULLSCREEN;
   int index;
 
-  atom_WINDOW_STATE 
-    = XInternAtom(HostX.dpy, "_NET_WM_STATE", False);
+    atom_WINDOW_STATE = XInternAtom(HostX.dpy, "_NET_WM_STATE", False);
   atom_WINDOW_STATE_FULLSCREEN 
     = XInternAtom(HostX.dpy, "_NET_WM_STATE_FULLSCREEN",False);
 
-  for (index = 0 ; index < HostX.n_screens ; index++)
-    {
+    for (index = 0; index < HostX.n_screens; index++) {
       XChangeProperty (HostX.dpy, HostX.screens[index].win,
                        atom_WINDOW_STATE, XA_ATOM, 32,
                        PropModeReplace,
@@ -304,7 +291,6 @@ hostx_set_fullscreen_hint (void)
     }
 }
 
-
 static void
 hostx_toggle_damage_debug (void)
 {
@@ -315,8 +301,7 @@ void
 hostx_handle_signal (int signum)
 {
   hostx_toggle_damage_debug();
-  EPHYR_DBG ("Signal caught. Damage Debug:%i\n",
-              HostXWantDamageDebug);
+    EPHYR_DBG("Signal caught. Damage Debug:%i\n", HostXWantDamageDebug);
 }
 
 void
@@ -338,7 +323,8 @@ hostx_set_title (char *title)
 #endif
 
 static int _X_NORETURN
-x_io_error_handler (Display *dpy) {
+x_io_error_handler(Display * dpy)
+{
     ErrorF("Lost connection to X server: %s\n", strerror(errno));
     CloseWellKnownConnections();
     OsCleanup(1);
@@ -359,15 +345,11 @@ hostx_init (void)
   attr.event_mask =
     ButtonPressMask
     |ButtonReleaseMask
-    |PointerMotionMask
-    |KeyPressMask
-    |KeyReleaseMask
-    |ExposureMask;
+        | PointerMotionMask | KeyPressMask | KeyReleaseMask | ExposureMask;
 
   EPHYR_DBG("mark");
 
-  if ((HostX.dpy = XOpenDisplay(getenv("DISPLAY"))) == NULL)
-    {
+    if ((HostX.dpy = XOpenDisplay(getenv("DISPLAY"))) == NULL) {
       fprintf(stderr, "\nXephyr cannot open host display. Is DISPLAY set?\n");
       exit(1);
     }
@@ -382,13 +364,11 @@ hostx_init (void)
 
   class_hint = XAllocClassHint();
 
-  for (index = 0 ; index < HostX.n_screens ; index++)
-    {
+    for (index = 0; index < HostX.n_screens; index++) {
       struct EphyrHostScreen *host_screen = &HostX.screens[index];
 
       host_screen->server_depth = HostX.depth;
-      if (host_screen->win_pre_existing != None)
-        {
+        if (host_screen->win_pre_existing != None) {
           Status            result;
           XWindowAttributes prewin_attr;
 
@@ -400,9 +380,7 @@ hostx_init (void)
                                          host_screen->win_pre_existing,
                                          &prewin_attr);
 
-
-          if (hostx_errors_untrap() || !result)
-          {
+            if (hostx_errors_untrap() || !result) {
               fprintf (stderr, "\nXephyr -parent window' does not exist!\n");
               exit (1);
           }
@@ -419,40 +397,35 @@ hostx_init (void)
                                             CopyFromParent,
                                             CopyFromParent,
                                             CopyFromParent,
-                                            CWEventMask,
-                                            &attr);
+                                             CWEventMask, &attr);
         }
-      else
-        {
-          host_screen->win = XCreateWindow (HostX.dpy,
-                                            HostX.winroot,
-                                            0,0,100,100, /* will resize */
+        else {
+            host_screen->win = XCreateWindow(HostX.dpy, HostX.winroot, 0, 0, 100, 100,  /* will resize */
                                             0,
                                             CopyFromParent,
                                             CopyFromParent,
                                             CopyFromParent,
-                                            CWEventMask,
-                                            &attr);
+                                             CWEventMask, &attr);
 
           hostx_set_win_title (host_screen->info,
                                "(ctrl+shift grabs mouse and keyboard)");
 
-          if (HostX.use_fullscreen)
-            {
+            if (HostX.use_fullscreen) {
               host_screen->win_width  = DisplayWidth(HostX.dpy, HostX.screen);
-              host_screen->win_height = DisplayHeight(HostX.dpy, HostX.screen);
+                host_screen->win_height =
+                    DisplayHeight(HostX.dpy, HostX.screen);
 
               hostx_set_fullscreen_hint();
             }
 
-          if (class_hint) 
-            {
+            if (class_hint) {
               tmpstr = getenv("RESOURCE_NAME");
               if (tmpstr && (!ephyrResNameFromCmd))
                 ephyrResName = tmpstr;
               class_hint->res_name = ephyrResName;
               class_hint->res_class = "Xephyr";
-              XSetClassHint(hostx_get_display(), host_screen->win, class_hint);
+                XSetClassHint(hostx_get_display(), host_screen->win,
+                              class_hint);
 
             }
 
@@ -464,40 +437,32 @@ hostx_init (void)
 
   XParseColor (HostX.dpy, DefaultColormap (HostX.dpy,HostX.screen),
                "red", &col);
-  XAllocColor (HostX.dpy, DefaultColormap (HostX.dpy, HostX.screen),
-               &col);
+    XAllocColor(HostX.dpy, DefaultColormap(HostX.dpy, HostX.screen), &col);
   XSetForeground (HostX.dpy, HostX.gc, col.pixel);
 
-  if (!hostx_want_host_cursor ())
-    {
+    if (!hostx_want_host_cursor()) {
       /* Ditch the cursor, we provide our 'own' */
       cursor_pxm = XCreatePixmap (HostX.dpy, HostX.winroot, 1, 1, 1);
       memset (&col, 0, sizeof (col));
       empty_cursor = XCreatePixmapCursor (HostX.dpy,
                                           cursor_pxm, cursor_pxm, 
                                           &col, &col, 1, 1);
-      for ( index = 0 ; index < HostX.n_screens ; index++ )
-        {
-          XDefineCursor (HostX.dpy,
-                         HostX.screens[index].win,
-                         empty_cursor);
+        for (index = 0; index < HostX.n_screens; index++) {
+            XDefineCursor(HostX.dpy, HostX.screens[index].win, empty_cursor);
         }
       XFreePixmap (HostX.dpy, cursor_pxm);
     }
 
-  for (index = 0 ; index < HostX.n_screens ; index++)
-    {
+    for (index = 0; index < HostX.n_screens; index++) {
       HostX.screens[index].ximg   = NULL;
     }
   /* Try to get share memory ximages for a little bit more speed */
 
-  if (!XShmQueryExtension(HostX.dpy) || getenv("XEPHYR_NO_SHM"))
-    {
+    if (!XShmQueryExtension(HostX.dpy) || getenv("XEPHYR_NO_SHM")) {
       fprintf(stderr, "\nXephyr unable to use SHM XImages\n");
       HostX.have_shm = False;
     }
-  else
-    {
+    else {
       /* Really really check we have shm - better way ?*/
       XShmSegmentInfo shminfo;
 
@@ -512,8 +477,7 @@ hostx_init (void)
         XShmAttach(HostX.dpy, &shminfo);
         XSync(HostX.dpy, False);
 
-        if (hostx_errors_untrap())
-          {
+        if (hostx_errors_untrap()) {
             fprintf(stderr, "\nXephyr unable to use SHM XImages\n");
             HostX.have_shm = False;
           }
@@ -528,8 +492,7 @@ hostx_init (void)
 
   HostX.damage_debug_msec = 20000; /* 1/50 th of a second */
 
-  if (getenv ("XEPHYR_PAUSE"))
-    {
+    if (getenv("XEPHYR_PAUSE")) {
       HostX.damage_debug_msec = strtol (getenv ("XEPHYR_PAUSE"), NULL, 0);
       EPHYR_DBG ("pause is %li\n", HostX.damage_debug_msec);
     }
@@ -576,30 +539,25 @@ hostx_get_bpp (EphyrScreenInfo screen)
 
 void
 hostx_get_visual_masks (EphyrScreenInfo screen,
-			CARD32 *rmsk,
-			CARD32 *gmsk,
-			CARD32 *bmsk)
+                       CARD32 *rmsk, CARD32 *gmsk, CARD32 *bmsk)
 {
   struct EphyrHostScreen *host_screen = host_screen_from_screen_info (screen);
 
   if (!host_screen)
     return;
 
-  if (host_depth_matches_server(host_screen))
-    {
+    if (host_depth_matches_server(host_screen)) {
       *rmsk = HostX.visual->red_mask;
       *gmsk = HostX.visual->green_mask;
       *bmsk = HostX.visual->blue_mask;
     }
-  else if (host_screen->server_depth == 16)
-    {
+    else if (host_screen->server_depth == 16) {
       /* Assume 16bpp 565 */
       *rmsk = 0xf800;
       *gmsk = 0x07e0;
       *bmsk = 0x001f;
     }
-  else
-    {
+    else {
       *rmsk = 0x0;
       *gmsk = 0x0;
       *bmsk = 0x0;
@@ -610,24 +568,26 @@ static int
 hostx_calculate_color_shift(unsigned long mask)
 {
     int shift = 1;
+
     /* count # of bits in mask */
-    while ((mask = (mask >> 1))) shift++;
+    while ((mask = (mask >> 1)))
+        shift++;
     /* cmap entry is an unsigned char so adjust it by size of that */
     shift = shift - sizeof(unsigned char) * 8;
-    if (shift < 0) shift = 0;
+    if (shift < 0)
+        shift = 0;
     return shift;
 }
 
 void
 hostx_set_cmap_entry(unsigned char idx,
-		     unsigned char r,
-		     unsigned char g,
-		     unsigned char b)
+                     unsigned char r, unsigned char g, unsigned char b)
 {
 /* need to calculate the shifts for RGB because server could be BGR. */
 /* XXX Not sure if this is correct for 8 on 16, but this works for 8 on 24.*/
     static int rshift, bshift, gshift = 0;
     static int first_time = 1;
+
     if (first_time) {
 	first_time = 0;
 	rshift = hostx_calculate_color_shift(HostX.visual->red_mask);
@@ -653,16 +613,15 @@ hostx_set_cmap_entry(unsigned char idx,
  */
 void*
 hostx_screen_init (EphyrScreenInfo screen,
-                   int width, int height,
-                   int buffer_height)
+                  int width, int height, int buffer_height)
 {
   int         bitmap_pad;
   Bool        shm_success = False;
   XSizeHints *size_hints;
 
   struct EphyrHostScreen *host_screen = host_screen_from_screen_info (screen);
-  if (!host_screen)
-    {
+
+    if (!host_screen) {
       fprintf (stderr, "%s: Error in accessing hostx data\n", __func__ );
       exit(1);
     }
@@ -670,21 +629,18 @@ hostx_screen_init (EphyrScreenInfo screen,
   EPHYR_DBG ("host_screen=%p wxh=%dx%d, buffer_height=%d",
              host_screen, width, height, buffer_height);
 
-  if (host_screen->ximg != NULL)
-    {
+    if (host_screen->ximg != NULL) {
       /* Free up the image data if previously used
        * i.ie called by server reset
        */
 
-      if (HostX.have_shm)
-	{
+        if (HostX.have_shm) {
 	  XShmDetach(HostX.dpy, &host_screen->shminfo);
 	  XDestroyImage (host_screen->ximg);
 	  shmdt(host_screen->shminfo.shmaddr);
 	  shmctl(host_screen->shminfo.shmid, IPC_RMID, 0);
 	}
-      else
-	{
+        else {
 	  free(host_screen->ximg->data);
 	  host_screen->ximg->data = NULL;
 
@@ -692,11 +648,10 @@ hostx_screen_init (EphyrScreenInfo screen,
 	}
     }
 
-  if (HostX.have_shm)
-    {
-      host_screen->ximg = XShmCreateImage (HostX.dpy, HostX.visual, HostX.depth,
-                                           ZPixmap, NULL, &host_screen->shminfo,
-                                           width, buffer_height );
+    if (HostX.have_shm) {
+        host_screen->ximg =
+            XShmCreateImage(HostX.dpy, HostX.visual, HostX.depth, ZPixmap, NULL,
+                            &host_screen->shminfo, width, buffer_height);
 
       host_screen->shminfo.shmid =
                       shmget(IPC_PRIVATE,
@@ -705,15 +660,14 @@ hostx_screen_init (EphyrScreenInfo screen,
       host_screen->ximg->data = shmat(host_screen->shminfo.shmid, 0, 0);
       host_screen->shminfo.shmaddr = host_screen->ximg->data;
 
-      if (host_screen->ximg->data == (char *)-1)
-	{
-	  EPHYR_DBG("Can't attach SHM Segment, falling back to plain XImages");
+        if (host_screen->ximg->data == (char *) -1) {
+            EPHYR_DBG
+                ("Can't attach SHM Segment, falling back to plain XImages");
 	  HostX.have_shm = False;
 	  XDestroyImage(host_screen->ximg);
 	  shmctl(host_screen->shminfo.shmid, IPC_RMID, 0);
 	}
-      else
-	{
+        else {
 	  EPHYR_DBG("SHM segment attached %p", host_screen->shminfo.shmaddr);
 	  host_screen->shminfo.readOnly = False;
 	  XShmAttach(HostX.dpy, &host_screen->shminfo);
@@ -721,8 +675,7 @@ hostx_screen_init (EphyrScreenInfo screen,
 	}
     }
 
-  if (!shm_success)
-    {
+    if (!shm_success) {
       bitmap_pad = ( HostX.depth > 16 )? 32 : (( HostX.depth > 8 )? 16 : 8 );
 
       EPHYR_DBG("Creating image %dx%d for screen host_screen=%p\n",
@@ -731,10 +684,7 @@ hostx_screen_init (EphyrScreenInfo screen,
                                         HostX.visual,
                                         HostX.depth,
                                         ZPixmap, 0, 0,
-                                        width,
-                                        buffer_height,
-                                        bitmap_pad,
-                                        0);
+                                         width, buffer_height, bitmap_pad, 0);
 
       host_screen->ximg->data =
               malloc (host_screen->ximg->bytes_per_line * buffer_height);
@@ -757,28 +707,24 @@ hostx_screen_init (EphyrScreenInfo screen,
   host_screen->win_width  = width;
   host_screen->win_height = height;
 
-  if (host_depth_matches_server(host_screen))
-    {
+    if (host_depth_matches_server(host_screen)) {
       EPHYR_DBG("Host matches server");
       return host_screen->ximg->data;
     }
-  else
-    {
+    else {
       EPHYR_DBG("server bpp %i", host_screen->server_depth>>3);
-      host_screen->fb_data = malloc(width*buffer_height*(host_screen->server_depth>>3));
+        host_screen->fb_data =
+            malloc(width * buffer_height * (host_screen->server_depth >> 3));
       return host_screen->fb_data;
     }
 }
 
 static void hostx_paint_debug_rect (struct EphyrHostScreen *host_screen,
-                                    int x,     int y,
-                                    int width, int height);
+                                   int x, int y, int width, int height);
 
 void
 hostx_paint_rect (EphyrScreenInfo screen,
-                  int sx,    int sy,
-                  int dx,    int dy,
-                  int width, int height)
+                 int sx, int sy, int dx, int dy, int width, int height)
 {
   struct EphyrHostScreen *host_screen = host_screen_from_screen_info (screen);
 
@@ -789,8 +735,7 @@ hostx_paint_rect (EphyrScreenInfo screen,
    *  on to the window
    */
 
-  if (HostXWantDamageDebug)
-    {
+    if (HostXWantDamageDebug) {
       hostx_paint_debug_rect(host_screen, dx, dy, width, height);
     }
 
@@ -806,23 +751,23 @@ hostx_paint_rect (EphyrScreenInfo screen,
    *       ... and it will be slower than the matching depth case.
    */
 
-  if (!host_depth_matches_server(host_screen))
-    {
+    if (!host_depth_matches_server(host_screen)) {
       int            x,y,idx, bytes_per_pixel = (host_screen->server_depth>>3);
       unsigned char  r,g,b;
       unsigned long  host_pixel;
 
       EPHYR_DBG("Unmatched host depth host_screen=%p\n", host_screen);
       for (y=sy; y<sy+height; y++)
-	for (x=sx; x<sx+width; x++)
-	  {
-	    idx = (host_screen->win_width*y*bytes_per_pixel)+(x*bytes_per_pixel);
+            for (x = sx; x < sx + width; x++) {
+                idx =
+                    (host_screen->win_width * y * bytes_per_pixel) +
+                    (x * bytes_per_pixel);
 
-	    switch (host_screen->server_depth)
-	      {
+                switch (host_screen->server_depth) {
 	      case 16:
 		{
-		  unsigned short pixel = *(unsigned short*)(host_screen->fb_data+idx);
+                    unsigned short pixel =
+                        *(unsigned short *) (host_screen->fb_data + idx);
 
 		  r = ((pixel & 0xf800) >> 8);
 		  g = ((pixel & 0x07e0) >> 3);
@@ -835,7 +780,8 @@ hostx_paint_rect (EphyrScreenInfo screen,
 		}
 	      case 8:
 		{
-		  unsigned char pixel = *(unsigned char*)(host_screen->fb_data+idx);
+                    unsigned char pixel =
+                        *(unsigned char *) (host_screen->fb_data + idx);
 		  XPutPixel(host_screen->ximg, x, y, HostX.cmap[pixel]);
 		  break;
 		}
@@ -845,14 +791,12 @@ hostx_paint_rect (EphyrScreenInfo screen,
 	  }
     }
 
-  if (HostX.have_shm)
-    {
+    if (HostX.have_shm) {
       XShmPutImage (HostX.dpy, host_screen->win,
                     HostX.gc, host_screen->ximg,
                     sx, sy, dx, dy, width, height, False);
     }
-  else
-    {
+    else {
       XPutImage (HostX.dpy, host_screen->win, HostX.gc, host_screen->ximg, 
                  sx, sy, dx, dy, width, height);
     }
@@ -862,8 +806,7 @@ hostx_paint_rect (EphyrScreenInfo screen,
 
 static void
 hostx_paint_debug_rect (struct EphyrHostScreen *host_screen,
-                        int x,     int y,
-                        int width, int height)
+                       int x, int y, int width, int height)
 {
   struct timespec tspec;
 
@@ -895,8 +838,7 @@ hostx_load_keymap(void)
 
   keymap = XGetKeyboardMapping (HostX.dpy,
 			        min_keycode,
-			        max_keycode - min_keycode + 1,
-			        &host_width);
+                                 max_keycode - min_keycode + 1, &host_width);
 
   /* Try and copy the hosts keymap into our keymap to avoid loads
    * of messing around.
@@ -914,7 +856,8 @@ hostx_load_keymap(void)
 
   for (i=0; i<(max_keycode - min_keycode+1); i++)
     for (j=0; j<width; j++)
-      ephyrKeySyms.map[(i*width)+j] = (CARD32) keymap[(i*host_width) + j];
+            ephyrKeySyms.map[(i * width) + j] =
+                (CARD32) keymap[(i * host_width) + j];
 
   EPHYR_DBG("keymap width, host:%d kdrive:%d", host_width, width);
 
@@ -931,10 +874,8 @@ host_screen_from_window (Window w)
   int index = 0;
   struct EphyrHostScreen *result  = NULL;
 
-  for (index = 0 ; index < HostX.n_screens ; index++)
-    {
-      if (HostX.screens[index].win == w || HostX.screens[index].peer_win == w)
-        {
+    for (index = 0; index < HostX.n_screens; index++) {
+        if (HostX.screens[index].win == w || HostX.screens[index].peer_win == w) {
           result = &HostX.screens[index];
           goto out;
         }
@@ -950,12 +891,10 @@ hostx_get_event(EphyrHostXEvent *ev)
   XEvent      xev;
   static int  grabbed_screen = -1;
 
-  if (XPending(HostX.dpy))
-    {
+    if (XPending(HostX.dpy)) {
       XNextEvent(HostX.dpy, &xev);
 
-      switch (xev.type) 
-	{
+        switch (xev.type) {
 	case Expose:
 	  /* Not so great event compression, but works ok */
 	  while (XCheckTypedWindowEvent(HostX.dpy, xev.xexpose.window,
@@ -963,14 +902,12 @@ hostx_get_event(EphyrHostXEvent *ev)
 	  {
 	    struct EphyrHostScreen *host_screen =
                 host_screen_from_window (xev.xexpose.window);
-            if (host_screen)
-              {
+                if (host_screen) {
                 hostx_paint_rect (host_screen->info, 0, 0, 0, 0,
                                   host_screen->win_width,
                                   host_screen->win_height);
               }
-            else
-              {
+                else {
                 EPHYR_LOG_ERROR ("failed to get host screen\n");
                 ev->type = EPHYR_EV_EXPOSE;
                 ev->data.expose.window = xev.xexpose.window;
@@ -988,7 +925,8 @@ hostx_get_event(EphyrHostXEvent *ev)
 	    ev->data.mouse_motion.x = xev.xmotion.x;
 	    ev->data.mouse_motion.y = xev.xmotion.y;
 	    ev->data.mouse_motion.window = xev.xmotion.window;
-	    ev->data.mouse_motion.screen = (host_screen ? host_screen->mynum : -1);
+            ev->data.mouse_motion.screen =
+                (host_screen ? host_screen->mynum : -1);
 	  }
 	  return 1;
 
@@ -1018,34 +956,30 @@ hostx_get_event(EphyrHostXEvent *ev)
 	case KeyRelease:
 
 	  if ((XKeycodeToKeysym(HostX.dpy,xev.xkey.keycode,0) == XK_Shift_L
-	       || XKeycodeToKeysym(HostX.dpy,xev.xkey.keycode,0) == XK_Shift_R)
-	      && (xev.xkey.state & ControlMask))
-	    {
+                 || XKeycodeToKeysym(HostX.dpy, xev.xkey.keycode,
+                                     0) == XK_Shift_R)
+                && (xev.xkey.state & ControlMask)) {
 	      struct EphyrHostScreen *host_screen =
                   host_screen_from_window (xev.xexpose.window);
 
-	      if (grabbed_screen != -1)
-		{
+                if (grabbed_screen != -1) {
 		  XUngrabKeyboard (HostX.dpy, CurrentTime);
 		  XUngrabPointer (HostX.dpy, CurrentTime);
 		  grabbed_screen = -1;
 		  hostx_set_win_title (host_screen->info,
                                        "(ctrl+shift grabs mouse and keyboard)");
 		}
-	      else
-		{
+                else {
 		  /* Attempt grab */
 		  if (XGrabKeyboard (HostX.dpy, host_screen->win, True, 
 				     GrabModeAsync, 
-				     GrabModeAsync, 
-				     CurrentTime) == 0)
-		    {
+                                      GrabModeAsync, CurrentTime) == 0) {
 		      if (XGrabPointer (HostX.dpy, host_screen->win, True, 
 					NoEventMask, 
 					GrabModeAsync, 
 					GrabModeAsync, 
-					host_screen->win, None, CurrentTime) == 0)
-			{
+                                         host_screen->win, None,
+                                         CurrentTime) == 0) {
 			  grabbed_screen = host_screen->mynum;
 			  hostx_set_win_title
                                   (host_screen->info,
@@ -1098,9 +1032,7 @@ hostx_get_window_attributes (int a_window, EphyrHostWindowAttributes *a_attrs)
 
     memset (&attrs, 0, sizeof (attrs)) ;
 
-    if (!XGetWindowAttributes (hostx_get_display (),
-                               a_window,
-                               &attrs)) {
+    if (!XGetWindowAttributes(hostx_get_display(), a_window, &attrs)) {
         return FALSE ;
     }
     a_attrs->x = attrs.x ;
@@ -1115,25 +1047,20 @@ hostx_get_window_attributes (int a_window, EphyrHostWindowAttributes *a_attrs)
 int
 hostx_get_extension_info (const char *a_ext_name,
                           int *a_major_opcode,
-                          int *a_first_event,
-                          int *a_first_error)
+                         int *a_first_event, int *a_first_error)
 {
     if (!a_ext_name || !a_major_opcode || !a_first_event || !a_first_error)
       return 0 ;
    if (!XQueryExtension (HostX.dpy,
                          a_ext_name,
-                         a_major_opcode,
-                         a_first_event,
-                         a_first_error))
-     {
+                         a_major_opcode, a_first_event, a_first_error)) {
        return 0 ;
      }
    return 1 ;
 }
 
 int
-hostx_get_visuals_info (EphyrHostVisualInfo **a_visuals,
-                        int *a_num_entries)
+hostx_get_visuals_info(EphyrHostVisualInfo ** a_visuals, int *a_num_entries)
 {
     Display *dpy=hostx_get_display () ;
     Bool is_ok=False ;
@@ -1141,8 +1068,7 @@ hostx_get_visuals_info (EphyrHostVisualInfo **a_visuals,
     EphyrHostVisualInfo *host_visuals=NULL ;
     int nb_items=0, i=0;
 
-    EPHYR_RETURN_VAL_IF_FAIL (a_visuals && a_num_entries && dpy,
-                              False) ;
+    EPHYR_RETURN_VAL_IF_FAIL(a_visuals && a_num_entries && dpy, False);
     EPHYR_LOG ("enter\n") ;
     memset (&templ, 0, sizeof (templ)) ;
     visuals = XGetVisualInfo (dpy, VisualNoMask, &templ, &nb_items) ;
@@ -1183,8 +1109,7 @@ out:
 int
 hostx_create_window (int a_screen_number,
                      EphyrBox *a_geometry,
-                     int a_visual_id,
-                     int *a_host_peer /*out parameter*/)
+                    int a_visual_id, int *a_host_peer /*out parameter */ )
 {
     Bool is_ok=FALSE ;
     Display *dpy=hostx_get_display () ;
@@ -1202,8 +1127,7 @@ hostx_create_window (int a_screen_number,
     memset (&visual_info, 0, sizeof (visual_info)) ;
     visual_info_templ.visualid = a_visual_id ;
     visual_info = XGetVisualInfo (dpy, visual_mask,
-                                  &visual_info_templ,
-                                  &nb_visuals) ;
+                                 &visual_info_templ, &nb_visuals);
     if (!visual_info) {
         EPHYR_LOG_ERROR ("argh, could not find a remote visual with id:%d\n",
                          a_visual_id) ;
@@ -1213,14 +1137,10 @@ hostx_create_window (int a_screen_number,
     attrs.colormap = XCreateColormap (dpy,
                                       RootWindow (dpy,
                                                   visual_info->screen),
-                                      visual_info->visual,
-                                      AllocNone) ;
+                                     visual_info->visual, AllocNone);
     attrs.event_mask = ButtonPressMask
                        |ButtonReleaseMask
-                       |PointerMotionMask
-                       |KeyPressMask
-                       |KeyReleaseMask
-                       |ExposureMask;
+        | PointerMotionMask | KeyPressMask | KeyReleaseMask | ExposureMask;
     winmask = CWColormap|CWEventMask;
 
     win = XCreateWindow (dpy, hostx_get_window (a_screen_number),
@@ -1234,7 +1154,8 @@ hostx_create_window (int a_screen_number,
     }
     if (HostX.screens[a_screen_number].peer_win == None) {
 	HostX.screens[a_screen_number].peer_win = win;
-    } else {
+    }
+    else {
         EPHYR_LOG_ERROR ("multiple peer windows created for same screen\n") ;
     }
     XFlush (dpy) ;
@@ -1265,8 +1186,7 @@ hostx_set_window_geometry (int a_win, EphyrBox *a_geo)
     EPHYR_RETURN_VAL_IF_FAIL (dpy && a_geo, FALSE) ;
 
     EPHYR_LOG ("enter. x,y,w,h:(%d,%d,%d,%d)\n",
-               a_geo->x, a_geo->y,
-               a_geo->width, a_geo->height) ;
+              a_geo->x, a_geo->y, a_geo->width, a_geo->height);
 
     XMoveWindow (dpy, a_win, a_geo->x, a_geo->y) ;
     XResizeWindow (dpy, a_win, a_geo->width, a_geo->height) ;
@@ -1276,8 +1196,7 @@ hostx_set_window_geometry (int a_win, EphyrBox *a_geo)
 
 int
 hostx_set_window_bounding_rectangles (int a_window,
-                                      EphyrRect *a_rects,
-                                      int a_num_rects)
+                                     EphyrRect * a_rects, int a_num_rects)
 {
     Bool is_ok=FALSE;
     Display *dpy=hostx_get_display () ;
@@ -1295,8 +1214,7 @@ hostx_set_window_bounding_rectangles (int a_window,
         rects[i].width = abs (a_rects[i].x2 - a_rects[i].x1);
         rects[i].height = abs (a_rects[i].y2 - a_rects[i].y1) ;
         EPHYR_LOG ("borders clipped to rect[x:%d,y:%d,w:%d,h:%d]\n",
-                   rects[i].x, rects[i].y,
-                   rects[i].width, rects[i].height) ;
+                  rects[i].x, rects[i].y, rects[i].width, rects[i].height);
     }
     /*this aways returns 1*/
     XShapeCombineRectangles (dpy, a_window, ShapeBounding, 0, 0,
@@ -1311,8 +1229,7 @@ hostx_set_window_bounding_rectangles (int a_window,
 
 int
 hostx_set_window_clipping_rectangles (int a_window,
-                                      EphyrRect *a_rects,
-                                      int a_num_rects)
+                                     EphyrRect * a_rects, int a_num_rects)
 {
     Bool is_ok=FALSE;
     Display *dpy=hostx_get_display () ;
@@ -1330,8 +1247,7 @@ hostx_set_window_clipping_rectangles (int a_window,
         rects[i].width = abs (a_rects[i].x2 - a_rects[i].x1);
         rects[i].height = abs (a_rects[i].y2 - a_rects[i].y1) ;
         EPHYR_LOG ("clipped to rect[x:%d,y:%d,w:%d,h:%d]\n",
-                   rects[i].x, rects[i].y,
-                   rects[i].width, rects[i].height) ;
+                  rects[i].x, rects[i].y, rects[i].width, rects[i].height);
     }
     /*this aways returns 1*/
     XShapeCombineRectangles (dpy, a_window, ShapeClip, 0, 0,
@@ -1349,9 +1265,8 @@ hostx_has_xshape (void)
 {
     int event_base=0, error_base=0 ;
     Display *dpy=hostx_get_display () ;
-    if (!XShapeQueryExtension (dpy,
-                               &event_base,
-                               &error_base)) {
+
+    if (!XShapeQueryExtension(dpy, &event_base, &error_base)) {
         return FALSE ;
     }
     return TRUE;
@@ -1367,7 +1282,6 @@ typedef struct {
 #define RESOURCE_PEERS_SIZE 1024*10
 static ResourcePair resource_peers[RESOURCE_PEERS_SIZE] ;
 
-
 int
 hostx_allocate_resource_id_peer (int a_local_resource_id,
                                  int *a_remote_resource_id)
@@ -1412,11 +1326,11 @@ hostx_allocate_resource_id_peer (int a_local_resource_id,
 }
 
 int
-hostx_get_resource_id_peer (int a_local_resource_id,
-                            int *a_remote_resource_id)
+hostx_get_resource_id_peer(int a_local_resource_id, int *a_remote_resource_id)
 {
     int i=0 ;
     ResourcePair *peer=NULL ;
+
     for (i=0; i<RESOURCE_PEERS_SIZE; i++) {
         if (resource_peers[i].is_valid
             && resource_peers[i].local_id == a_local_resource_id) {
@@ -1440,9 +1354,7 @@ hostx_has_dri (void)
     if (!dpy)
         return FALSE ;
 
-    if (!XF86DRIQueryExtension (dpy,
-                                &event_base,
-                                &error_base)) {
+    if (!XF86DRIQueryExtension(dpy, &event_base, &error_base)) {
         return FALSE ;
     }
     return TRUE ;
