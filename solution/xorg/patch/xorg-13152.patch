diff --git a/Xprint/ps/PsArea.c b/Xprint/ps/PsArea.c
index d01ccd2..7850da0 100644
--- a/Xprint/ps/PsArea.c
+++ b/Xprint/ps/PsArea.c
@@ -78,6 +78,7 @@ in this Software without prior written authorization from The Open Group.
 #include "gcstruct.h"
 #include "windowstr.h"
 
+
 void
 PsPutScaledImage(DrawablePtr pDrawable, GCPtr pGC, int depth, int x, int y,
            int w, int h, int leftPad, int format, int imageRes, char *pImage)
@@ -113,7 +114,6 @@ PsPutScaledImage(DrawablePtr pDrawable, GCPtr pGC, int depth, int x, int y,
   {
     int          i, j;
     int          r, c;
-    int          swap;
     char        *pt;
     PsOutPtr     psOut;
     ColormapPtr  cMap;
@@ -129,112 +129,38 @@ PsPutScaledImage(DrawablePtr pDrawable, GCPtr pGC, int depth, int x, int y,
 	sh = (float)h * (float)pageRes / (float)imageRes + 0.5;
     }
     PsOut_Offset(psOut, pDrawable->x, pDrawable->y);
-    pt = (char *)(&i); i = 1; if( pt[0]=='\001' ) swap = 1; else swap = 0;
 
-#ifdef PSOUT_USE_DEEPCOLOR
-    if( depth==30 )
-    {
-      ErrorF("PsPutScaledImage: Not implemented yet for 30bit\m");
-    }
-    else
-#endif /* PSOUT_USE_DEEPCOLOR */
-    if( depth==24 )
+    if( depth!=1 )
     {
       PsOut_BeginImage(psOut, 0, 0, x, y, w, h, sw, sh, 3);
-      if( format==XYPixmap )
-      {
-        int   rowsiz = PixmapBytePad(w, depth);
-        char *planes[3];
-        planes[0] = pImage;
-        planes[1] = &pImage[rowsiz*h];
-        planes[2] = &pImage[rowsiz*h*2];
+
         for( r=0 ; r<h ; r++ )
         {
-          char *pt[3];
-          for( i=0 ; i<3 ;  i++ ) pt[i] = &planes[i][rowsiz*r];
           for( c=0 ; c<w ; c++ )
           {
-            for( i=0 ; i<3 ; i++ )
-              { PsOut_OutImageBytes(psOut, 1, &pt[i][c]); pt[i]++; }
-          }
-        }
-      }
-      else if( format==ZPixmap )
-      {
-        int  rowsiz = PixmapBytePad(w, depth);
-        for( r=0 ; r<h ; r++ )
-        {
-          char *pt = &pImage[rowsiz*r];
-          for( c=0 ; c<w ; c++,pt+=4 )
-          {
-            if( swap )
-            {
-              char tmp[4];
-              tmp[0] = pt[3]; tmp[1] = pt[2]; tmp[2] = pt[1]; tmp[3] = pt[0];
-              PsOut_OutImageBytes(psOut, 3, &tmp[1]);
-            }
-            else
-              PsOut_OutImageBytes(psOut, 3, &pt[1]);
-          }
-        }
-      }
-      else goto error;
-      PsOut_EndImage(psOut);
-    }
-#ifdef PSOUT_USE_DEEPCOLOR
-    else if( (depth > 8) && (depth < 16) )
-    {
-      int  rowsiz = PixmapBytePad(w, depth);
-      PsOut_BeginImage(psOut, 0, 0, x, y, w, h, sw, sh, 3);
-      for( r=0 ; r<h ; r++ )
-      {
-        short *pt = (short *)&pImage[rowsiz*r];
-        for( c=0 ; c<w ; c++,pt++ )
-        {
-          PsOutColor clr = PsGetPixelColor(cMap, (int)(*pt)&0xFFFF);
+          unsigned long pv = PsGetImagePixel(pImage, depth, w, h, leftPad, format, c, r);
+          PsOutColor clr = PsGetPixelColor(cMap, pv);
           /* XXX: This needs to be fixed for endian swapping and to support
            * depths deeper than 8bit per R-,G-,B-gun... */
-          int        val = PSOUTCOLOR_TO_RGB24BIT(clr);
+          unsigned long val = PSOUTCOLOR_TO_RGB24BIT(clr);
           char      *ipt = (char *)&val;
-          if( swap )
+/* XXX: Is this the right way to detect the platform endianess ? */
+#if IMAGE_BYTE_ORDER == LSBFirst
           {
-            char tmp[4];
-            tmp[0] = ipt[3]; tmp[1] = ipt[2]; tmp[2] = ipt[1]; tmp[3] = ipt[0];
-            PsOut_OutImageBytes(psOut, 3, &tmp[1]);
+            long l;
+            swapl(&val, l);
           }
-          else
+#elif IMAGE_BYTE_ORDER == MSBFirst
+#else
+#error Unsupported byte order
+#endif
             PsOut_OutImageBytes(psOut, 3, &ipt[1]);
         }
       }
+
       PsOut_EndImage(psOut);
     }
-#endif /* PSOUT_USE_DEEPCOLOR */
-    else if( depth==8 )
-    {
-      int  rowsiz = PixmapBytePad(w, depth);
-      PsOut_BeginImage(psOut, 0, 0, x, y, w, h, sw, sh, 3);
-      for( r=0 ; r<h ; r++ )
-      {
-        char *pt = &pImage[rowsiz*r];
-        for( c=0 ; c<w ; c++,pt++ )
-        {
-          PsOutColor clr = PsGetPixelColor(cMap, (int)(*pt)&0xFF);
-          int        val = PSOUTCOLOR_TO_RGB24BIT(clr);
-          char      *ipt = (char *)&val;
-          if( swap )
-          {
-            char tmp[4];
-            tmp[0] = ipt[3]; tmp[1] = ipt[2]; tmp[2] = ipt[1]; tmp[3] = ipt[0];
-            PsOut_OutImageBytes(psOut, 3, &tmp[1]);
-          }
           else
-            PsOut_OutImageBytes(psOut, 3, &ipt[1]);
-        }
-      }
-      PsOut_EndImage(psOut);
-    }
-    else if( depth==1 )
-    {
       {
         int  rowsiz = BitmapBytePad(w);
         int  psrsiz = (w+7)/8;
@@ -248,10 +174,14 @@ PsPutScaledImage(DrawablePtr pDrawable, GCPtr pGC, int depth, int x, int y,
           {
             int  iv_, iv = (int)pt[i]&0xFF;
             char c;
-            if( swap )
+/* XXX: Is this the right way to detect the platform endianess ? */
+#if IMAGE_BYTE_ORDER == LSBFirst
               { for( j=0,iv_=0 ; j<8 ; j++ ) iv_ |= (((iv>>j)&1)<<(7-j)); }
-            else
+#elif IMAGE_BYTE_ORDER == MSBFirst
               iv_ = iv;
+#else
+#error Unsupported byte order
+#endif
             c = iv_;
             PsOut_OutImageBytes(psOut, 1, &c);
           }
@@ -260,9 +190,6 @@ PsPutScaledImage(DrawablePtr pDrawable, GCPtr pGC, int depth, int x, int y,
       }
     }
   }
-error:
-  return;
-}
 
 void
 PsPutScaledImageIM(DrawablePtr pDrawable, GCPtr pGC, int depth, int x, int y,
@@ -299,7 +226,6 @@ PsPutScaledImageIM(DrawablePtr pDrawable, GCPtr pGC, int depth, int x, int y,
   {
     int          i, j;
     int          r, c;
-    int          swap;
     char        *pt;
     PsOutPtr     psOut;
     ColormapPtr  cMap;
@@ -318,7 +244,6 @@ PsPutScaledImageIM(DrawablePtr pDrawable, GCPtr pGC, int depth, int x, int y,
         sh = (float)h * (float)pageRes / (float)imageRes + 0.5;
     }
     PsOut_Offset(psOut, pDrawable->x, pDrawable->y);
-    pt = (char *)(&i); i = 1; if( pt[0]=='\001' ) swap = 1; else swap = 0;
 
 #ifdef BM_CACHE
     cache_id = PsBmIsImageCached(w, h, pImage);
@@ -332,111 +257,37 @@ PsPutScaledImageIM(DrawablePtr pDrawable, GCPtr pGC, int depth, int x, int y,
 
       PsOut_BeginImageCache(psOut, cache_id);
 #endif
-
-#ifdef PSOUT_USE_DEEPCOLOR
-      if( depth==30 )
-      {
-        ErrorF("PsPutScaledImageIM: Not implemented yet for 30bit\m");
-      }
-      else
-#endif /* PSOUT_USE_DEEPCOLOR */
-      if( depth==24 )
+      if( depth!=1 )
       {
         PsOut_BeginImageIM(psOut, 0, 0, x, y, w, h, sw, sh, 3);
-        if( format==XYPixmap )
-        {
-          int   rowsiz = PixmapBytePad(w, depth);
-          char *planes[3];
-          planes[0] = pImage;
-          planes[1] = &pImage[rowsiz*h];
-          planes[2] = &pImage[rowsiz*h*2];
+
           for( r=0 ; r<h ; r++ )
           {
-            char *pt[3];
-            for( i=0 ; i<3 ;  i++ ) pt[i] = &planes[i][rowsiz*r];
             for( c=0 ; c<w ; c++ )
             {
-              for( i=0 ; i<3 ; i++ )
-                { PsOut_OutImageBytes(psOut, 1, &pt[i][c]); pt[i]++; }
-            }
-          }
-        }
-        else if( format==ZPixmap )
-        {
-          int  rowsiz = PixmapBytePad(w, depth);
-          for( r=0 ; r<h ; r++ )
-          {
-            char *pt = &pImage[rowsiz*r];
-            for( c=0 ; c<w ; c++,pt+=4 )
-            {
-              if( swap )
-              {
-                char tmp[4];
-                tmp[0] = pt[3]; tmp[1] = pt[2]; tmp[2] = pt[1]; tmp[3] = pt[0];
-                PsOut_OutImageBytes(psOut, 3, &tmp[1]);
-              }
-              else
-                PsOut_OutImageBytes(psOut, 3, &pt[1]);
-            }
-          }
-        }
-        else goto error;
-        PsOut_EndImage(psOut);
-      }
-#ifdef PSOUT_USE_DEEPCOLOR
-      else if( (depth > 8) && (depth < 16) )
-      {
-        int  rowsiz = PixmapBytePad(w, depth);
-        PsOut_BeginImageIM(psOut, 0, 0, x, y, w, h, sw, sh, 3);
-        for( r=0 ; r<h ; r++ )
-        {
-          short *pt = (short *)&pImage[rowsiz*r];
-          for( c=0 ; c<w ; c++,pt++ )
-          {
-            PsOutColor clr = PsGetPixelColor(cMap, (int)(*pt)&0xFFFF);
-            int        val = PSOUTCOLOR_TO_RGB24BIT(clr);
-            char      *ipt = (char *)&val;
-            if( swap )
-            {
-              char tmp[4];
-              tmp[0] = ipt[3]; tmp[1] = ipt[2]; tmp[2] = ipt[1]; tmp[3] = ipt[0];
-              PsOut_OutImageBytes(psOut, 3, &tmp[1]);
-            }
-            else
-              PsOut_OutImageBytes(psOut, 3, &ipt[1]);
-          }
-        }
-        PsOut_EndImage(psOut);
-      }
-#endif /* PSOUT_USE_DEEPCOLOR */
-      else if( depth==8 )
-      {
-        int  rowsiz = PixmapBytePad(w, depth);
-        PsOut_BeginImageIM(psOut, 0, 0, x, y, w, h, sw, sh, 3);
-        for( r=0 ; r<h ; r++ )
-        {
-          char *pt = &pImage[rowsiz*r];
-          for( c=0 ; c<w ; c++,pt++ )
-          {
-            PsOutColor clr = PsGetPixelColor(cMap, (int)(*pt)&0xFF);
+            unsigned long pv = PsGetImagePixel(pImage, depth, w, h, leftPad, format, c, r);
+            PsOutColor clr = PsGetPixelColor(cMap, pv);
             /* XXX: This needs to be fixed for endian swapping and to support
              * depths deeper than 8bit per R-,G-,B-gun... */
-            int        val = PSOUTCOLOR_TO_RGB24BIT(clr);
+            unsigned long val = PSOUTCOLOR_TO_RGB24BIT(clr);
             char      *ipt = (char *)&val;
-            if( swap )
+/* XXX: Is this the right way to detect the platform endianess ? */
+#if IMAGE_BYTE_ORDER == LSBFirst
             {
-              char tmp[4];
-              tmp[0] = ipt[3]; tmp[1] = ipt[2]; tmp[2] = ipt[1]; tmp[3] = ipt[0];
-              PsOut_OutImageBytes(psOut, 3, &tmp[1]);
+            long l;
+            swapl(&val, l);
             }
-            else
+#elif IMAGE_BYTE_ORDER == MSBFirst
+#else
+#error Unsupported byte order
+#endif
               PsOut_OutImageBytes(psOut, 3, &ipt[1]);
           }
         }
+
         PsOut_EndImage(psOut);
       }
-      else if( depth==1 )
-      {
+      else
         {
           int  rowsiz = BitmapBytePad(w);
           int  psrsiz = (w+7)/8;
@@ -450,17 +301,20 @@ PsPutScaledImageIM(DrawablePtr pDrawable, GCPtr pGC, int depth, int x, int y,
             {
               int  iv_, iv = (int)pt[i]&0xFF;
               char c;
-              if( swap )
+/* XXX: Is this the right way to detect the platform endianess ? */
+#if IMAGE_BYTE_ORDER == LSBFirst
                 { for( j=0,iv_=0 ; j<8 ; j++ ) iv_ |= (((iv>>j)&1)<<(7-j)); }
-              else
+#elif IMAGE_BYTE_ORDER == MSBFirst
                 iv_ = iv;
+#else
+#error Unsupported byte order
+#endif
               c = iv_;
               PsOut_OutImageBytes(psOut, 1, &c);
             }
           }
           PsOut_EndImage(psOut);
         }
-      }
 #ifdef BM_CACHE
       PsOut_EndImageCache(psOut);
     }
@@ -468,8 +322,6 @@ PsPutScaledImageIM(DrawablePtr pDrawable, GCPtr pGC, int depth, int x, int y,
                            PsGetPixelColor(cMap, pGC->fgPixel));
 #endif
   }
-error:
-  return;
 }
 void
 PsPutImage(DrawablePtr pDrawable, GCPtr pGC, int depth, int x, int y,
