diff --git a/glx/indirect_dispatch_swap.c b/glx/indirect_dispatch_swap.c
index a7c59fc..80010b3 100644
--- a/glx/indirect_dispatch_swap.c
+++ b/glx/indirect_dispatch_swap.c
@@ -55,7 +55,11 @@ static const unsigned dummy_answer[2] = {0, 0};
 static GLsizei
 bswap_CARD32( const void * src )
 {
-    union { uint32_t dst; GLsizei ret; } x;
+    union {
+        uint32_t dst;
+        GLsizei ret;
+    } x;
+
     x.dst = bswap_32( *(uint32_t *) src );
     return x.ret;
 }
@@ -63,7 +67,11 @@ bswap_CARD32( const void * src )
 static GLshort
 bswap_CARD16( const void * src )
 {
-    union { uint16_t dst; GLshort ret; } x;
+    union {
+        uint16_t dst;
+        GLshort ret;
+    } x;
+
     x.dst = bswap_16( *(uint16_t *) src );
     return x.ret;
 }
@@ -71,7 +79,11 @@ bswap_CARD16( const void * src )
 static GLenum
 bswap_ENUM( const void * src )
 {
-    union { uint32_t dst; GLenum ret; } x;
+    union {
+        uint32_t dst;
+        GLenum ret;
+    } x;
+
     x.dst = bswap_32( *(uint32_t *) src );
     return x.ret;
 }
@@ -79,7 +91,11 @@ bswap_ENUM( const void * src )
 static GLsync
 bswap_CARD64( const void * src )
 {
-    union { uint64_t dst; GLsync ret; } x;
+    union {
+        uint64_t dst;
+        GLsync ret;
+    } x;
+
     x.dst = bswap_64( *(uint64_t *) src );
     return x.ret;
 }
@@ -87,7 +103,11 @@ bswap_CARD64( const void * src )
 static GLdouble
 bswap_FLOAT64( const void * src )
 {
-    union { uint64_t dst; GLdouble ret; } x;
+    union {
+        uint64_t dst;
+        GLdouble ret;
+    } x;
+
     x.dst = bswap_64( *(uint64_t *) src );
     return x.ret;
 }
@@ -95,7 +115,11 @@ bswap_FLOAT64( const void * src )
 static GLfloat
 bswap_FLOAT32( const void * src )
 {
-    union { uint32_t dst; GLfloat ret; } x;
+    union {
+        uint32_t dst;
+        GLfloat ret;
+    } x;
+
     x.dst = bswap_32( *(uint32_t *) src );
     return x.ret;
 }
@@ -107,6 +131,7 @@ bswap_16_array( uint16_t * src, unsigned count )
 
     for ( i = 0 ; i < count ; i++ ) {
         uint16_t temp = bswap_16( src[i] );
+
         src[i] = temp;
     }
 
@@ -120,6 +145,7 @@ bswap_32_array( uint32_t * src, unsigned count )
 
     for ( i = 0 ; i < count ; i++ ) {
         uint32_t temp = bswap_32( src[i] );
+
         src[i] = temp;
     }
 
@@ -133,22 +159,24 @@ bswap_64_array( uint64_t * src, unsigned count )
 
     for ( i = 0 ; i < count ; i++ ) {
         uint64_t temp = bswap_64( src[i] );
+
         src[i] = temp;
     }
 
     return src;
 }
 
-int __glXDispSwap_NewList(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_NewList(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
-        CALL_NewList( GET_DISPATCH(), (
-             (GLuint  )bswap_CARD32 ( pc +  0 ),
+        CALL_NewList(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
              (GLenum  )bswap_ENUM   ( pc +  4 )
         ) );
         error = Success;
@@ -157,11 +185,13 @@ int __glXDispSwap_NewList(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_EndList(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_EndList(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -172,14 +202,15 @@ int __glXDispSwap_EndList(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-void __glXDispSwap_CallList(GLbyte * pc)
+void
+__glXDispSwap_CallList(GLbyte * pc)
 {
-    CALL_CallList( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 )
+    CALL_CallList(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0)
     ) );
 }
 
-void __glXDispSwap_CallLists(GLbyte * pc)
+void
+__glXDispSwap_CallLists(GLbyte * pc)
 {
     const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
     const GLenum type =  (GLenum  )bswap_ENUM   ( pc +  4 );
@@ -191,35 +222,35 @@ void __glXDispSwap_CallLists(GLbyte * pc)
     case GL_2_BYTES:
     case GL_3_BYTES:
     case GL_4_BYTES:
-        lists = (const GLvoid *) (pc + 8); break;
+        lists = (const GLvoid *) (pc + 8);
+        break;
     case GL_SHORT:
     case GL_UNSIGNED_SHORT:
-        lists = (const GLvoid *) bswap_16_array( (uint16_t *) (pc + 8), n ); break;
+        lists = (const GLvoid *) bswap_16_array((uint16_t *) (pc + 8), n);
+        break;
     case GL_INT:
     case GL_UNSIGNED_INT:
     case GL_FLOAT:
-        lists = (const GLvoid *) bswap_32_array( (uint32_t *) (pc + 8), n ); break;
+        lists = (const GLvoid *) bswap_32_array((uint32_t *) (pc + 8), n);
+        break;
     default:
         return;
     }
 
-    CALL_CallLists( GET_DISPATCH(), (
-        n,
-        type,
-        lists
-    ) );
+    CALL_CallLists(GET_DISPATCH(), (n, type, lists));
 }
 
-int __glXDispSwap_DeleteLists(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_DeleteLists(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
-        CALL_DeleteLists( GET_DISPATCH(), (
-             (GLuint  )bswap_CARD32 ( pc +  0 ),
+        CALL_DeleteLists(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
              (GLsizei )bswap_CARD32 ( pc +  4 )
         ) );
         error = Success;
@@ -228,17 +259,19 @@ int __glXDispSwap_DeleteLists(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GenLists(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GenLists(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
         GLuint retval;
-        retval = CALL_GenLists( GET_DISPATCH(), (
-             (GLsizei )bswap_CARD32 ( pc +  0 )
+
+        retval = CALL_GenLists(GET_DISPATCH(), ((GLsizei) bswap_CARD32(pc + 0)
         ) );
         __glXSendReplySwap(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
         error = Success;
@@ -247,50 +280,57 @@ int __glXDispSwap_GenLists(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-void __glXDispSwap_ListBase(GLbyte * pc)
+void
+__glXDispSwap_ListBase(GLbyte * pc)
 {
-    CALL_ListBase( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 )
+    CALL_ListBase(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0)
     ) );
 }
 
-void __glXDispSwap_Begin(GLbyte * pc)
+void
+__glXDispSwap_Begin(GLbyte * pc)
 {
-    CALL_Begin( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 )
+    CALL_Begin(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
     ) );
 }
 
-void __glXDispSwap_Bitmap(GLbyte * pc)
+void
+__glXDispSwap_Bitmap(GLbyte * pc)
 {
     const GLubyte * const bitmap = (const GLubyte *) ((pc + 44));
     __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);
 
     CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) bswap_CARD32( & hdr->rowLength )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) bswap_CARD32( & hdr->skipRows )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) bswap_CARD32( & hdr->skipPixels )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) bswap_CARD32( & hdr->alignment )) );
-
-    CALL_Bitmap( GET_DISPATCH(), (
-         (GLsizei )bswap_CARD32 ( pc + 20 ),
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_ROW_LENGTH,
+                      (GLint) bswap_CARD32(&hdr->rowLength)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_ROWS,
+                      (GLint) bswap_CARD32(&hdr->skipRows)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_PIXELS,
+                      (GLint) bswap_CARD32(&hdr->skipPixels)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_ALIGNMENT,
+                      (GLint) bswap_CARD32(&hdr->alignment)));
+
+    CALL_Bitmap(GET_DISPATCH(), ((GLsizei) bswap_CARD32(pc + 20),
          (GLsizei )bswap_CARD32 ( pc + 24 ),
          (GLfloat )bswap_FLOAT32( pc + 28 ),
          (GLfloat )bswap_FLOAT32( pc + 32 ),
          (GLfloat )bswap_FLOAT32( pc + 36 ),
-         (GLfloat )bswap_FLOAT32( pc + 40 ),
-        bitmap
-    ) );
+                                 (GLfloat) bswap_FLOAT32(pc + 40), bitmap));
 }
 
-void __glXDispSwap_Color3bv(GLbyte * pc)
+void
+__glXDispSwap_Color3bv(GLbyte * pc)
 {
-    CALL_Color3bv( GET_DISPATCH(), (
-         (const GLbyte *)(pc +  0)
+    CALL_Color3bv(GET_DISPATCH(), ((const GLbyte *) (pc + 0)
     ) );
 }
 
-void __glXDispSwap_Color3dv(GLbyte * pc)
+void
+__glXDispSwap_Color3dv(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -299,61 +339,67 @@ void __glXDispSwap_Color3dv(GLbyte * pc)
     }
 #endif
 
-    CALL_Color3dv( GET_DISPATCH(), (
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 3 )
+    CALL_Color3dv(GET_DISPATCH(), ((const GLdouble *)
+                                   bswap_64_array((uint64_t *) (pc + 0), 3)
     ) );
 }
 
-void __glXDispSwap_Color3fv(GLbyte * pc)
+void
+__glXDispSwap_Color3fv(GLbyte * pc)
 {
-    CALL_Color3fv( GET_DISPATCH(), (
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
+    CALL_Color3fv(GET_DISPATCH(), ((const GLfloat *)
+                                   bswap_32_array((uint32_t *) (pc + 0), 3)
     ) );
 }
 
-void __glXDispSwap_Color3iv(GLbyte * pc)
+void
+__glXDispSwap_Color3iv(GLbyte * pc)
 {
-    CALL_Color3iv( GET_DISPATCH(), (
-         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
+    CALL_Color3iv(GET_DISPATCH(), ((const GLint *)
+                                   bswap_32_array((uint32_t *) (pc + 0), 3)
     ) );
 }
 
-void __glXDispSwap_Color3sv(GLbyte * pc)
+void
+__glXDispSwap_Color3sv(GLbyte * pc)
 {
-    CALL_Color3sv( GET_DISPATCH(), (
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 3 )
+    CALL_Color3sv(GET_DISPATCH(), ((const GLshort *)
+                                   bswap_16_array((uint16_t *) (pc + 0), 3)
     ) );
 }
 
-void __glXDispSwap_Color3ubv(GLbyte * pc)
+void
+__glXDispSwap_Color3ubv(GLbyte * pc)
 {
-    CALL_Color3ubv( GET_DISPATCH(), (
-         (const GLubyte *)(pc +  0)
+    CALL_Color3ubv(GET_DISPATCH(), ((const GLubyte *) (pc + 0)
     ) );
 }
 
-void __glXDispSwap_Color3uiv(GLbyte * pc)
+void
+__glXDispSwap_Color3uiv(GLbyte * pc)
 {
-    CALL_Color3uiv( GET_DISPATCH(), (
-         (const GLuint *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
+    CALL_Color3uiv(GET_DISPATCH(), ((const GLuint *)
+                                    bswap_32_array((uint32_t *) (pc + 0), 3)
     ) );
 }
 
-void __glXDispSwap_Color3usv(GLbyte * pc)
+void
+__glXDispSwap_Color3usv(GLbyte * pc)
 {
-    CALL_Color3usv( GET_DISPATCH(), (
-         (const GLushort *)bswap_16_array( (uint16_t *) (pc +  0), 3 )
+    CALL_Color3usv(GET_DISPATCH(), ((const GLushort *)
+                                    bswap_16_array((uint16_t *) (pc + 0), 3)
     ) );
 }
 
-void __glXDispSwap_Color4bv(GLbyte * pc)
+void
+__glXDispSwap_Color4bv(GLbyte * pc)
 {
-    CALL_Color4bv( GET_DISPATCH(), (
-         (const GLbyte *)(pc +  0)
+    CALL_Color4bv(GET_DISPATCH(), ((const GLbyte *) (pc + 0)
     ) );
 }
 
-void __glXDispSwap_Color4dv(GLbyte * pc)
+void
+__glXDispSwap_Color4dv(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -362,66 +408,73 @@ void __glXDispSwap_Color4dv(GLbyte * pc)
     }
 #endif
 
-    CALL_Color4dv( GET_DISPATCH(), (
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 4 )
+    CALL_Color4dv(GET_DISPATCH(), ((const GLdouble *)
+                                   bswap_64_array((uint64_t *) (pc + 0), 4)
     ) );
 }
 
-void __glXDispSwap_Color4fv(GLbyte * pc)
+void
+__glXDispSwap_Color4fv(GLbyte * pc)
 {
-    CALL_Color4fv( GET_DISPATCH(), (
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 4 )
+    CALL_Color4fv(GET_DISPATCH(), ((const GLfloat *)
+                                   bswap_32_array((uint32_t *) (pc + 0), 4)
     ) );
 }
 
-void __glXDispSwap_Color4iv(GLbyte * pc)
+void
+__glXDispSwap_Color4iv(GLbyte * pc)
 {
-    CALL_Color4iv( GET_DISPATCH(), (
-         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 4 )
+    CALL_Color4iv(GET_DISPATCH(), ((const GLint *)
+                                   bswap_32_array((uint32_t *) (pc + 0), 4)
     ) );
 }
 
-void __glXDispSwap_Color4sv(GLbyte * pc)
+void
+__glXDispSwap_Color4sv(GLbyte * pc)
 {
-    CALL_Color4sv( GET_DISPATCH(), (
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 4 )
+    CALL_Color4sv(GET_DISPATCH(), ((const GLshort *)
+                                   bswap_16_array((uint16_t *) (pc + 0), 4)
     ) );
 }
 
-void __glXDispSwap_Color4ubv(GLbyte * pc)
+void
+__glXDispSwap_Color4ubv(GLbyte * pc)
 {
-    CALL_Color4ubv( GET_DISPATCH(), (
-         (const GLubyte *)(pc +  0)
+    CALL_Color4ubv(GET_DISPATCH(), ((const GLubyte *) (pc + 0)
     ) );
 }
 
-void __glXDispSwap_Color4uiv(GLbyte * pc)
+void
+__glXDispSwap_Color4uiv(GLbyte * pc)
 {
-    CALL_Color4uiv( GET_DISPATCH(), (
-         (const GLuint *)bswap_32_array( (uint32_t *) (pc +  0), 4 )
+    CALL_Color4uiv(GET_DISPATCH(), ((const GLuint *)
+                                    bswap_32_array((uint32_t *) (pc + 0), 4)
     ) );
 }
 
-void __glXDispSwap_Color4usv(GLbyte * pc)
+void
+__glXDispSwap_Color4usv(GLbyte * pc)
 {
-    CALL_Color4usv( GET_DISPATCH(), (
-         (const GLushort *)bswap_16_array( (uint16_t *) (pc +  0), 4 )
+    CALL_Color4usv(GET_DISPATCH(), ((const GLushort *)
+                                    bswap_16_array((uint16_t *) (pc + 0), 4)
     ) );
 }
 
-void __glXDispSwap_EdgeFlagv(GLbyte * pc)
+void
+__glXDispSwap_EdgeFlagv(GLbyte * pc)
 {
-    CALL_EdgeFlagv( GET_DISPATCH(), (
-         (const GLboolean *)(pc +  0)
+    CALL_EdgeFlagv(GET_DISPATCH(), ((const GLboolean *) (pc + 0)
     ) );
 }
 
-void __glXDispSwap_End(GLbyte * pc)
+void
+__glXDispSwap_End(GLbyte * pc)
 {
     CALL_End( GET_DISPATCH(), () );
 }
 
-void __glXDispSwap_Indexdv(GLbyte * pc)
+void
+__glXDispSwap_Indexdv(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -430,40 +483,44 @@ void __glXDispSwap_Indexdv(GLbyte * pc)
     }
 #endif
 
-    CALL_Indexdv( GET_DISPATCH(), (
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 1 )
+    CALL_Indexdv(GET_DISPATCH(), ((const GLdouble *)
+                                  bswap_64_array((uint64_t *) (pc + 0), 1)
     ) );
 }
 
-void __glXDispSwap_Indexfv(GLbyte * pc)
+void
+__glXDispSwap_Indexfv(GLbyte * pc)
 {
-    CALL_Indexfv( GET_DISPATCH(), (
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 1 )
+    CALL_Indexfv(GET_DISPATCH(), ((const GLfloat *)
+                                  bswap_32_array((uint32_t *) (pc + 0), 1)
     ) );
 }
 
-void __glXDispSwap_Indexiv(GLbyte * pc)
+void
+__glXDispSwap_Indexiv(GLbyte * pc)
 {
-    CALL_Indexiv( GET_DISPATCH(), (
-         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 1 )
+    CALL_Indexiv(GET_DISPATCH(), ((const GLint *)
+                                  bswap_32_array((uint32_t *) (pc + 0), 1)
     ) );
 }
 
-void __glXDispSwap_Indexsv(GLbyte * pc)
+void
+__glXDispSwap_Indexsv(GLbyte * pc)
 {
-    CALL_Indexsv( GET_DISPATCH(), (
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 1 )
+    CALL_Indexsv(GET_DISPATCH(), ((const GLshort *)
+                                  bswap_16_array((uint16_t *) (pc + 0), 1)
     ) );
 }
 
-void __glXDispSwap_Normal3bv(GLbyte * pc)
+void
+__glXDispSwap_Normal3bv(GLbyte * pc)
 {
-    CALL_Normal3bv( GET_DISPATCH(), (
-         (const GLbyte *)(pc +  0)
+    CALL_Normal3bv(GET_DISPATCH(), ((const GLbyte *) (pc + 0)
     ) );
 }
 
-void __glXDispSwap_Normal3dv(GLbyte * pc)
+void
+__glXDispSwap_Normal3dv(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -472,33 +529,37 @@ void __glXDispSwap_Normal3dv(GLbyte * pc)
     }
 #endif
 
-    CALL_Normal3dv( GET_DISPATCH(), (
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 3 )
+    CALL_Normal3dv(GET_DISPATCH(), ((const GLdouble *)
+                                    bswap_64_array((uint64_t *) (pc + 0), 3)
     ) );
 }
 
-void __glXDispSwap_Normal3fv(GLbyte * pc)
+void
+__glXDispSwap_Normal3fv(GLbyte * pc)
 {
-    CALL_Normal3fv( GET_DISPATCH(), (
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
+    CALL_Normal3fv(GET_DISPATCH(), ((const GLfloat *)
+                                    bswap_32_array((uint32_t *) (pc + 0), 3)
     ) );
 }
 
-void __glXDispSwap_Normal3iv(GLbyte * pc)
+void
+__glXDispSwap_Normal3iv(GLbyte * pc)
 {
-    CALL_Normal3iv( GET_DISPATCH(), (
-         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
+    CALL_Normal3iv(GET_DISPATCH(), ((const GLint *)
+                                    bswap_32_array((uint32_t *) (pc + 0), 3)
     ) );
 }
 
-void __glXDispSwap_Normal3sv(GLbyte * pc)
+void
+__glXDispSwap_Normal3sv(GLbyte * pc)
 {
-    CALL_Normal3sv( GET_DISPATCH(), (
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 3 )
+    CALL_Normal3sv(GET_DISPATCH(), ((const GLshort *)
+                                    bswap_16_array((uint16_t *) (pc + 0), 3)
     ) );
 }
 
-void __glXDispSwap_RasterPos2dv(GLbyte * pc)
+void
+__glXDispSwap_RasterPos2dv(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -507,33 +568,37 @@ void __glXDispSwap_RasterPos2dv(GLbyte * pc)
     }
 #endif
 
-    CALL_RasterPos2dv( GET_DISPATCH(), (
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 2 )
+    CALL_RasterPos2dv(GET_DISPATCH(), ((const GLdouble *)
+                                       bswap_64_array((uint64_t *) (pc + 0), 2)
     ) );
 }
 
-void __glXDispSwap_RasterPos2fv(GLbyte * pc)
+void
+__glXDispSwap_RasterPos2fv(GLbyte * pc)
 {
-    CALL_RasterPos2fv( GET_DISPATCH(), (
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 2 )
+    CALL_RasterPos2fv(GET_DISPATCH(), ((const GLfloat *)
+                                       bswap_32_array((uint32_t *) (pc + 0), 2)
     ) );
 }
 
-void __glXDispSwap_RasterPos2iv(GLbyte * pc)
+void
+__glXDispSwap_RasterPos2iv(GLbyte * pc)
 {
-    CALL_RasterPos2iv( GET_DISPATCH(), (
-         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 2 )
+    CALL_RasterPos2iv(GET_DISPATCH(), ((const GLint *)
+                                       bswap_32_array((uint32_t *) (pc + 0), 2)
     ) );
 }
 
-void __glXDispSwap_RasterPos2sv(GLbyte * pc)
+void
+__glXDispSwap_RasterPos2sv(GLbyte * pc)
 {
-    CALL_RasterPos2sv( GET_DISPATCH(), (
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 2 )
+    CALL_RasterPos2sv(GET_DISPATCH(), ((const GLshort *)
+                                       bswap_16_array((uint16_t *) (pc + 0), 2)
     ) );
 }
 
-void __glXDispSwap_RasterPos3dv(GLbyte * pc)
+void
+__glXDispSwap_RasterPos3dv(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -542,33 +607,37 @@ void __glXDispSwap_RasterPos3dv(GLbyte * pc)
     }
 #endif
 
-    CALL_RasterPos3dv( GET_DISPATCH(), (
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 3 )
+    CALL_RasterPos3dv(GET_DISPATCH(), ((const GLdouble *)
+                                       bswap_64_array((uint64_t *) (pc + 0), 3)
     ) );
 }
 
-void __glXDispSwap_RasterPos3fv(GLbyte * pc)
+void
+__glXDispSwap_RasterPos3fv(GLbyte * pc)
 {
-    CALL_RasterPos3fv( GET_DISPATCH(), (
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
+    CALL_RasterPos3fv(GET_DISPATCH(), ((const GLfloat *)
+                                       bswap_32_array((uint32_t *) (pc + 0), 3)
     ) );
 }
 
-void __glXDispSwap_RasterPos3iv(GLbyte * pc)
+void
+__glXDispSwap_RasterPos3iv(GLbyte * pc)
 {
-    CALL_RasterPos3iv( GET_DISPATCH(), (
-         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
+    CALL_RasterPos3iv(GET_DISPATCH(), ((const GLint *)
+                                       bswap_32_array((uint32_t *) (pc + 0), 3)
     ) );
 }
 
-void __glXDispSwap_RasterPos3sv(GLbyte * pc)
+void
+__glXDispSwap_RasterPos3sv(GLbyte * pc)
 {
-    CALL_RasterPos3sv( GET_DISPATCH(), (
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 3 )
+    CALL_RasterPos3sv(GET_DISPATCH(), ((const GLshort *)
+                                       bswap_16_array((uint16_t *) (pc + 0), 3)
     ) );
 }
 
-void __glXDispSwap_RasterPos4dv(GLbyte * pc)
+void
+__glXDispSwap_RasterPos4dv(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -577,33 +646,37 @@ void __glXDispSwap_RasterPos4dv(GLbyte * pc)
     }
 #endif
 
-    CALL_RasterPos4dv( GET_DISPATCH(), (
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 4 )
+    CALL_RasterPos4dv(GET_DISPATCH(), ((const GLdouble *)
+                                       bswap_64_array((uint64_t *) (pc + 0), 4)
     ) );
 }
 
-void __glXDispSwap_RasterPos4fv(GLbyte * pc)
+void
+__glXDispSwap_RasterPos4fv(GLbyte * pc)
 {
-    CALL_RasterPos4fv( GET_DISPATCH(), (
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 4 )
+    CALL_RasterPos4fv(GET_DISPATCH(), ((const GLfloat *)
+                                       bswap_32_array((uint32_t *) (pc + 0), 4)
     ) );
 }
 
-void __glXDispSwap_RasterPos4iv(GLbyte * pc)
+void
+__glXDispSwap_RasterPos4iv(GLbyte * pc)
 {
-    CALL_RasterPos4iv( GET_DISPATCH(), (
-         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 4 )
+    CALL_RasterPos4iv(GET_DISPATCH(), ((const GLint *)
+                                       bswap_32_array((uint32_t *) (pc + 0), 4)
     ) );
 }
 
-void __glXDispSwap_RasterPos4sv(GLbyte * pc)
+void
+__glXDispSwap_RasterPos4sv(GLbyte * pc)
 {
-    CALL_RasterPos4sv( GET_DISPATCH(), (
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 4 )
+    CALL_RasterPos4sv(GET_DISPATCH(), ((const GLshort *)
+                                       bswap_16_array((uint16_t *) (pc + 0), 4)
     ) );
 }
 
-void __glXDispSwap_Rectdv(GLbyte * pc)
+void
+__glXDispSwap_Rectdv(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -612,37 +685,45 @@ void __glXDispSwap_Rectdv(GLbyte * pc)
     }
 #endif
 
-    CALL_Rectdv( GET_DISPATCH(), (
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 2 ),
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc + 16), 2 )
+    CALL_Rectdv(GET_DISPATCH(), ((const GLdouble *)
+                                 bswap_64_array((uint64_t *) (pc + 0), 2),
+                                 (const GLdouble *)
+                                 bswap_64_array((uint64_t *) (pc + 16), 2)
     ) );
 }
 
-void __glXDispSwap_Rectfv(GLbyte * pc)
+void
+__glXDispSwap_Rectfv(GLbyte * pc)
 {
-    CALL_Rectfv( GET_DISPATCH(), (
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 2 ),
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  8), 2 )
+    CALL_Rectfv(GET_DISPATCH(), ((const GLfloat *)
+                                 bswap_32_array((uint32_t *) (pc + 0), 2),
+                                 (const GLfloat *)
+                                 bswap_32_array((uint32_t *) (pc + 8), 2)
     ) );
 }
 
-void __glXDispSwap_Rectiv(GLbyte * pc)
+void
+__glXDispSwap_Rectiv(GLbyte * pc)
 {
-    CALL_Rectiv( GET_DISPATCH(), (
-         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 2 ),
-         (const GLint *)bswap_32_array( (uint32_t *) (pc +  8), 2 )
+    CALL_Rectiv(GET_DISPATCH(), ((const GLint *)
+                                 bswap_32_array((uint32_t *) (pc + 0), 2),
+                                 (const GLint *)
+                                 bswap_32_array((uint32_t *) (pc + 8), 2)
     ) );
 }
 
-void __glXDispSwap_Rectsv(GLbyte * pc)
+void
+__glXDispSwap_Rectsv(GLbyte * pc)
 {
-    CALL_Rectsv( GET_DISPATCH(), (
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 2 ),
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 2 )
+    CALL_Rectsv(GET_DISPATCH(), ((const GLshort *)
+                                 bswap_16_array((uint16_t *) (pc + 0), 2),
+                                 (const GLshort *)
+                                 bswap_16_array((uint16_t *) (pc + 4), 2)
     ) );
 }
 
-void __glXDispSwap_TexCoord1dv(GLbyte * pc)
+void
+__glXDispSwap_TexCoord1dv(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -651,33 +732,37 @@ void __glXDispSwap_TexCoord1dv(GLbyte * pc)
     }
 #endif
 
-    CALL_TexCoord1dv( GET_DISPATCH(), (
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 1 )
+    CALL_TexCoord1dv(GET_DISPATCH(), ((const GLdouble *)
+                                      bswap_64_array((uint64_t *) (pc + 0), 1)
     ) );
 }
 
-void __glXDispSwap_TexCoord1fv(GLbyte * pc)
+void
+__glXDispSwap_TexCoord1fv(GLbyte * pc)
 {
-    CALL_TexCoord1fv( GET_DISPATCH(), (
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 1 )
+    CALL_TexCoord1fv(GET_DISPATCH(), ((const GLfloat *)
+                                      bswap_32_array((uint32_t *) (pc + 0), 1)
     ) );
 }
 
-void __glXDispSwap_TexCoord1iv(GLbyte * pc)
+void
+__glXDispSwap_TexCoord1iv(GLbyte * pc)
 {
-    CALL_TexCoord1iv( GET_DISPATCH(), (
-         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 1 )
+    CALL_TexCoord1iv(GET_DISPATCH(), ((const GLint *)
+                                      bswap_32_array((uint32_t *) (pc + 0), 1)
     ) );
 }
 
-void __glXDispSwap_TexCoord1sv(GLbyte * pc)
+void
+__glXDispSwap_TexCoord1sv(GLbyte * pc)
 {
-    CALL_TexCoord1sv( GET_DISPATCH(), (
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 1 )
+    CALL_TexCoord1sv(GET_DISPATCH(), ((const GLshort *)
+                                      bswap_16_array((uint16_t *) (pc + 0), 1)
     ) );
 }
 
-void __glXDispSwap_TexCoord2dv(GLbyte * pc)
+void
+__glXDispSwap_TexCoord2dv(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -686,33 +771,37 @@ void __glXDispSwap_TexCoord2dv(GLbyte * pc)
     }
 #endif
 
-    CALL_TexCoord2dv( GET_DISPATCH(), (
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 2 )
+    CALL_TexCoord2dv(GET_DISPATCH(), ((const GLdouble *)
+                                      bswap_64_array((uint64_t *) (pc + 0), 2)
     ) );
 }
 
-void __glXDispSwap_TexCoord2fv(GLbyte * pc)
+void
+__glXDispSwap_TexCoord2fv(GLbyte * pc)
 {
-    CALL_TexCoord2fv( GET_DISPATCH(), (
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 2 )
+    CALL_TexCoord2fv(GET_DISPATCH(), ((const GLfloat *)
+                                      bswap_32_array((uint32_t *) (pc + 0), 2)
     ) );
 }
 
-void __glXDispSwap_TexCoord2iv(GLbyte * pc)
+void
+__glXDispSwap_TexCoord2iv(GLbyte * pc)
 {
-    CALL_TexCoord2iv( GET_DISPATCH(), (
-         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 2 )
+    CALL_TexCoord2iv(GET_DISPATCH(), ((const GLint *)
+                                      bswap_32_array((uint32_t *) (pc + 0), 2)
     ) );
 }
 
-void __glXDispSwap_TexCoord2sv(GLbyte * pc)
+void
+__glXDispSwap_TexCoord2sv(GLbyte * pc)
 {
-    CALL_TexCoord2sv( GET_DISPATCH(), (
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 2 )
+    CALL_TexCoord2sv(GET_DISPATCH(), ((const GLshort *)
+                                      bswap_16_array((uint16_t *) (pc + 0), 2)
     ) );
 }
 
-void __glXDispSwap_TexCoord3dv(GLbyte * pc)
+void
+__glXDispSwap_TexCoord3dv(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -721,33 +810,37 @@ void __glXDispSwap_TexCoord3dv(GLbyte * pc)
     }
 #endif
 
-    CALL_TexCoord3dv( GET_DISPATCH(), (
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 3 )
+    CALL_TexCoord3dv(GET_DISPATCH(), ((const GLdouble *)
+                                      bswap_64_array((uint64_t *) (pc + 0), 3)
     ) );
 }
 
-void __glXDispSwap_TexCoord3fv(GLbyte * pc)
+void
+__glXDispSwap_TexCoord3fv(GLbyte * pc)
 {
-    CALL_TexCoord3fv( GET_DISPATCH(), (
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
+    CALL_TexCoord3fv(GET_DISPATCH(), ((const GLfloat *)
+                                      bswap_32_array((uint32_t *) (pc + 0), 3)
     ) );
 }
 
-void __glXDispSwap_TexCoord3iv(GLbyte * pc)
+void
+__glXDispSwap_TexCoord3iv(GLbyte * pc)
 {
-    CALL_TexCoord3iv( GET_DISPATCH(), (
-         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
+    CALL_TexCoord3iv(GET_DISPATCH(), ((const GLint *)
+                                      bswap_32_array((uint32_t *) (pc + 0), 3)
     ) );
 }
 
-void __glXDispSwap_TexCoord3sv(GLbyte * pc)
+void
+__glXDispSwap_TexCoord3sv(GLbyte * pc)
 {
-    CALL_TexCoord3sv( GET_DISPATCH(), (
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 3 )
+    CALL_TexCoord3sv(GET_DISPATCH(), ((const GLshort *)
+                                      bswap_16_array((uint16_t *) (pc + 0), 3)
     ) );
 }
 
-void __glXDispSwap_TexCoord4dv(GLbyte * pc)
+void
+__glXDispSwap_TexCoord4dv(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -756,33 +849,37 @@ void __glXDispSwap_TexCoord4dv(GLbyte * pc)
     }
 #endif
 
-    CALL_TexCoord4dv( GET_DISPATCH(), (
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 4 )
+    CALL_TexCoord4dv(GET_DISPATCH(), ((const GLdouble *)
+                                      bswap_64_array((uint64_t *) (pc + 0), 4)
     ) );
 }
 
-void __glXDispSwap_TexCoord4fv(GLbyte * pc)
+void
+__glXDispSwap_TexCoord4fv(GLbyte * pc)
 {
-    CALL_TexCoord4fv( GET_DISPATCH(), (
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 4 )
+    CALL_TexCoord4fv(GET_DISPATCH(), ((const GLfloat *)
+                                      bswap_32_array((uint32_t *) (pc + 0), 4)
     ) );
 }
 
-void __glXDispSwap_TexCoord4iv(GLbyte * pc)
+void
+__glXDispSwap_TexCoord4iv(GLbyte * pc)
 {
-    CALL_TexCoord4iv( GET_DISPATCH(), (
-         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 4 )
+    CALL_TexCoord4iv(GET_DISPATCH(), ((const GLint *)
+                                      bswap_32_array((uint32_t *) (pc + 0), 4)
     ) );
 }
 
-void __glXDispSwap_TexCoord4sv(GLbyte * pc)
+void
+__glXDispSwap_TexCoord4sv(GLbyte * pc)
 {
-    CALL_TexCoord4sv( GET_DISPATCH(), (
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 4 )
+    CALL_TexCoord4sv(GET_DISPATCH(), ((const GLshort *)
+                                      bswap_16_array((uint16_t *) (pc + 0), 4)
     ) );
 }
 
-void __glXDispSwap_Vertex2dv(GLbyte * pc)
+void
+__glXDispSwap_Vertex2dv(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -791,33 +888,37 @@ void __glXDispSwap_Vertex2dv(GLbyte * pc)
     }
 #endif
 
-    CALL_Vertex2dv( GET_DISPATCH(), (
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 2 )
+    CALL_Vertex2dv(GET_DISPATCH(), ((const GLdouble *)
+                                    bswap_64_array((uint64_t *) (pc + 0), 2)
     ) );
 }
 
-void __glXDispSwap_Vertex2fv(GLbyte * pc)
+void
+__glXDispSwap_Vertex2fv(GLbyte * pc)
 {
-    CALL_Vertex2fv( GET_DISPATCH(), (
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 2 )
+    CALL_Vertex2fv(GET_DISPATCH(), ((const GLfloat *)
+                                    bswap_32_array((uint32_t *) (pc + 0), 2)
     ) );
 }
 
-void __glXDispSwap_Vertex2iv(GLbyte * pc)
+void
+__glXDispSwap_Vertex2iv(GLbyte * pc)
 {
-    CALL_Vertex2iv( GET_DISPATCH(), (
-         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 2 )
+    CALL_Vertex2iv(GET_DISPATCH(), ((const GLint *)
+                                    bswap_32_array((uint32_t *) (pc + 0), 2)
     ) );
 }
 
-void __glXDispSwap_Vertex2sv(GLbyte * pc)
+void
+__glXDispSwap_Vertex2sv(GLbyte * pc)
 {
-    CALL_Vertex2sv( GET_DISPATCH(), (
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 2 )
+    CALL_Vertex2sv(GET_DISPATCH(), ((const GLshort *)
+                                    bswap_16_array((uint16_t *) (pc + 0), 2)
     ) );
 }
 
-void __glXDispSwap_Vertex3dv(GLbyte * pc)
+void
+__glXDispSwap_Vertex3dv(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -826,33 +927,37 @@ void __glXDispSwap_Vertex3dv(GLbyte * pc)
     }
 #endif
 
-    CALL_Vertex3dv( GET_DISPATCH(), (
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 3 )
+    CALL_Vertex3dv(GET_DISPATCH(), ((const GLdouble *)
+                                    bswap_64_array((uint64_t *) (pc + 0), 3)
     ) );
 }
 
-void __glXDispSwap_Vertex3fv(GLbyte * pc)
+void
+__glXDispSwap_Vertex3fv(GLbyte * pc)
 {
-    CALL_Vertex3fv( GET_DISPATCH(), (
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
+    CALL_Vertex3fv(GET_DISPATCH(), ((const GLfloat *)
+                                    bswap_32_array((uint32_t *) (pc + 0), 3)
     ) );
 }
 
-void __glXDispSwap_Vertex3iv(GLbyte * pc)
+void
+__glXDispSwap_Vertex3iv(GLbyte * pc)
 {
-    CALL_Vertex3iv( GET_DISPATCH(), (
-         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
+    CALL_Vertex3iv(GET_DISPATCH(), ((const GLint *)
+                                    bswap_32_array((uint32_t *) (pc + 0), 3)
     ) );
 }
 
-void __glXDispSwap_Vertex3sv(GLbyte * pc)
+void
+__glXDispSwap_Vertex3sv(GLbyte * pc)
 {
-    CALL_Vertex3sv( GET_DISPATCH(), (
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 3 )
+    CALL_Vertex3sv(GET_DISPATCH(), ((const GLshort *)
+                                    bswap_16_array((uint16_t *) (pc + 0), 3)
     ) );
 }
 
-void __glXDispSwap_Vertex4dv(GLbyte * pc)
+void
+__glXDispSwap_Vertex4dv(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -861,33 +966,37 @@ void __glXDispSwap_Vertex4dv(GLbyte * pc)
     }
 #endif
 
-    CALL_Vertex4dv( GET_DISPATCH(), (
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 4 )
+    CALL_Vertex4dv(GET_DISPATCH(), ((const GLdouble *)
+                                    bswap_64_array((uint64_t *) (pc + 0), 4)
     ) );
 }
 
-void __glXDispSwap_Vertex4fv(GLbyte * pc)
+void
+__glXDispSwap_Vertex4fv(GLbyte * pc)
 {
-    CALL_Vertex4fv( GET_DISPATCH(), (
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 4 )
+    CALL_Vertex4fv(GET_DISPATCH(), ((const GLfloat *)
+                                    bswap_32_array((uint32_t *) (pc + 0), 4)
     ) );
 }
 
-void __glXDispSwap_Vertex4iv(GLbyte * pc)
+void
+__glXDispSwap_Vertex4iv(GLbyte * pc)
 {
-    CALL_Vertex4iv( GET_DISPATCH(), (
-         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 4 )
+    CALL_Vertex4iv(GET_DISPATCH(), ((const GLint *)
+                                    bswap_32_array((uint32_t *) (pc + 0), 4)
     ) );
 }
 
-void __glXDispSwap_Vertex4sv(GLbyte * pc)
+void
+__glXDispSwap_Vertex4sv(GLbyte * pc)
 {
-    CALL_Vertex4sv( GET_DISPATCH(), (
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 4 )
+    CALL_Vertex4sv(GET_DISPATCH(), ((const GLshort *)
+                                    bswap_16_array((uint16_t *) (pc + 0), 4)
     ) );
 }
 
-void __glXDispSwap_ClipPlane(GLbyte * pc)
+void
+__glXDispSwap_ClipPlane(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -896,423 +1005,439 @@ void __glXDispSwap_ClipPlane(GLbyte * pc)
     }
 #endif
 
-    CALL_ClipPlane( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc + 32 ),
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 4 )
+    CALL_ClipPlane(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 32),
+                                    (const GLdouble *)
+                                    bswap_64_array((uint64_t *) (pc + 0), 4)
     ) );
 }
 
-void __glXDispSwap_ColorMaterial(GLbyte * pc)
+void
+__glXDispSwap_ColorMaterial(GLbyte * pc)
 {
-    CALL_ColorMaterial( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_ColorMaterial(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 )
     ) );
 }
 
-void __glXDispSwap_CullFace(GLbyte * pc)
+void
+__glXDispSwap_CullFace(GLbyte * pc)
 {
-    CALL_CullFace( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 )
+    CALL_CullFace(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
     ) );
 }
 
-void __glXDispSwap_Fogf(GLbyte * pc)
+void
+__glXDispSwap_Fogf(GLbyte * pc)
 {
-    CALL_Fogf( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_Fogf(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLfloat )bswap_FLOAT32( pc +  4 )
     ) );
 }
 
-void __glXDispSwap_Fogfv(GLbyte * pc)
+void
+__glXDispSwap_Fogfv(GLbyte * pc)
 {
     const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  0 );
     const GLfloat * params;
 
-    params = (const GLfloat *) bswap_32_array( (uint32_t *) (pc + 4), __glFogfv_size(pname) );
+    params =
+        (const GLfloat *) bswap_32_array((uint32_t *) (pc + 4),
+                                         __glFogfv_size(pname));
 
-    CALL_Fogfv( GET_DISPATCH(), (
-        pname,
-        params
-    ) );
+    CALL_Fogfv(GET_DISPATCH(), (pname, params));
 }
 
-void __glXDispSwap_Fogi(GLbyte * pc)
+void
+__glXDispSwap_Fogi(GLbyte * pc)
 {
-    CALL_Fogi( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_Fogi(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLint   )bswap_CARD32 ( pc +  4 )
     ) );
 }
 
-void __glXDispSwap_Fogiv(GLbyte * pc)
+void
+__glXDispSwap_Fogiv(GLbyte * pc)
 {
     const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  0 );
     const GLint * params;
 
-    params = (const GLint *) bswap_32_array( (uint32_t *) (pc + 4), __glFogiv_size(pname) );
+    params =
+        (const GLint *) bswap_32_array((uint32_t *) (pc + 4),
+                                       __glFogiv_size(pname));
 
-    CALL_Fogiv( GET_DISPATCH(), (
-        pname,
-        params
-    ) );
+    CALL_Fogiv(GET_DISPATCH(), (pname, params));
 }
 
-void __glXDispSwap_FrontFace(GLbyte * pc)
+void
+__glXDispSwap_FrontFace(GLbyte * pc)
 {
-    CALL_FrontFace( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 )
+    CALL_FrontFace(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
     ) );
 }
 
-void __glXDispSwap_Hint(GLbyte * pc)
+void
+__glXDispSwap_Hint(GLbyte * pc)
 {
-    CALL_Hint( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_Hint(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 )
     ) );
 }
 
-void __glXDispSwap_Lightf(GLbyte * pc)
+void
+__glXDispSwap_Lightf(GLbyte * pc)
 {
-    CALL_Lightf( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_Lightf(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 ),
          (GLfloat )bswap_FLOAT32( pc +  8 )
     ) );
 }
 
-void __glXDispSwap_Lightfv(GLbyte * pc)
+void
+__glXDispSwap_Lightfv(GLbyte * pc)
 {
     const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
     const GLfloat * params;
 
-    params = (const GLfloat *) bswap_32_array( (uint32_t *) (pc + 8), __glLightfv_size(pname) );
+    params =
+        (const GLfloat *) bswap_32_array((uint32_t *) (pc + 8),
+                                         __glLightfv_size(pname));
 
-    CALL_Lightfv( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-        pname,
-        params
-    ) );
+    CALL_Lightfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0), pname, params));
 }
 
-void __glXDispSwap_Lighti(GLbyte * pc)
+void
+__glXDispSwap_Lighti(GLbyte * pc)
 {
-    CALL_Lighti( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_Lighti(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 ),
          (GLint   )bswap_CARD32 ( pc +  8 )
     ) );
 }
 
-void __glXDispSwap_Lightiv(GLbyte * pc)
+void
+__glXDispSwap_Lightiv(GLbyte * pc)
 {
     const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
     const GLint * params;
 
-    params = (const GLint *) bswap_32_array( (uint32_t *) (pc + 8), __glLightiv_size(pname) );
+    params =
+        (const GLint *) bswap_32_array((uint32_t *) (pc + 8),
+                                       __glLightiv_size(pname));
 
-    CALL_Lightiv( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-        pname,
-        params
-    ) );
+    CALL_Lightiv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0), pname, params));
 }
 
-void __glXDispSwap_LightModelf(GLbyte * pc)
+void
+__glXDispSwap_LightModelf(GLbyte * pc)
 {
-    CALL_LightModelf( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_LightModelf(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLfloat )bswap_FLOAT32( pc +  4 )
     ) );
 }
 
-void __glXDispSwap_LightModelfv(GLbyte * pc)
+void
+__glXDispSwap_LightModelfv(GLbyte * pc)
 {
     const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  0 );
     const GLfloat * params;
 
-    params = (const GLfloat *) bswap_32_array( (uint32_t *) (pc + 4), __glLightModelfv_size(pname) );
+    params =
+        (const GLfloat *) bswap_32_array((uint32_t *) (pc + 4),
+                                         __glLightModelfv_size(pname));
 
-    CALL_LightModelfv( GET_DISPATCH(), (
-        pname,
-        params
-    ) );
+    CALL_LightModelfv(GET_DISPATCH(), (pname, params));
 }
 
-void __glXDispSwap_LightModeli(GLbyte * pc)
+void
+__glXDispSwap_LightModeli(GLbyte * pc)
 {
-    CALL_LightModeli( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_LightModeli(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLint   )bswap_CARD32 ( pc +  4 )
     ) );
 }
 
-void __glXDispSwap_LightModeliv(GLbyte * pc)
+void
+__glXDispSwap_LightModeliv(GLbyte * pc)
 {
     const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  0 );
     const GLint * params;
 
-    params = (const GLint *) bswap_32_array( (uint32_t *) (pc + 4), __glLightModeliv_size(pname) );
+    params =
+        (const GLint *) bswap_32_array((uint32_t *) (pc + 4),
+                                       __glLightModeliv_size(pname));
 
-    CALL_LightModeliv( GET_DISPATCH(), (
-        pname,
-        params
-    ) );
+    CALL_LightModeliv(GET_DISPATCH(), (pname, params));
 }
 
-void __glXDispSwap_LineStipple(GLbyte * pc)
+void
+__glXDispSwap_LineStipple(GLbyte * pc)
 {
-    CALL_LineStipple( GET_DISPATCH(), (
-         (GLint   )bswap_CARD32 ( pc +  0 ),
+    CALL_LineStipple(GET_DISPATCH(), ((GLint) bswap_CARD32(pc + 0),
          (GLushort)bswap_CARD16 ( pc +  4 )
     ) );
 }
 
-void __glXDispSwap_LineWidth(GLbyte * pc)
+void
+__glXDispSwap_LineWidth(GLbyte * pc)
 {
-    CALL_LineWidth( GET_DISPATCH(), (
-         (GLfloat )bswap_FLOAT32( pc +  0 )
+    CALL_LineWidth(GET_DISPATCH(), ((GLfloat) bswap_FLOAT32(pc + 0)
     ) );
 }
 
-void __glXDispSwap_Materialf(GLbyte * pc)
+void
+__glXDispSwap_Materialf(GLbyte * pc)
 {
-    CALL_Materialf( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_Materialf(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 ),
          (GLfloat )bswap_FLOAT32( pc +  8 )
     ) );
 }
 
-void __glXDispSwap_Materialfv(GLbyte * pc)
+void
+__glXDispSwap_Materialfv(GLbyte * pc)
 {
     const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
     const GLfloat * params;
 
-    params = (const GLfloat *) bswap_32_array( (uint32_t *) (pc + 8), __glMaterialfv_size(pname) );
+    params =
+        (const GLfloat *) bswap_32_array((uint32_t *) (pc + 8),
+                                         __glMaterialfv_size(pname));
 
-    CALL_Materialfv( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-        pname,
-        params
-    ) );
+    CALL_Materialfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                     pname, params));
 }
 
-void __glXDispSwap_Materiali(GLbyte * pc)
+void
+__glXDispSwap_Materiali(GLbyte * pc)
 {
-    CALL_Materiali( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_Materiali(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 ),
          (GLint   )bswap_CARD32 ( pc +  8 )
     ) );
 }
 
-void __glXDispSwap_Materialiv(GLbyte * pc)
+void
+__glXDispSwap_Materialiv(GLbyte * pc)
 {
     const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
     const GLint * params;
 
-    params = (const GLint *) bswap_32_array( (uint32_t *) (pc + 8), __glMaterialiv_size(pname) );
+    params =
+        (const GLint *) bswap_32_array((uint32_t *) (pc + 8),
+                                       __glMaterialiv_size(pname));
 
-    CALL_Materialiv( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-        pname,
-        params
-    ) );
+    CALL_Materialiv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                     pname, params));
 }
 
-void __glXDispSwap_PointSize(GLbyte * pc)
+void
+__glXDispSwap_PointSize(GLbyte * pc)
 {
-    CALL_PointSize( GET_DISPATCH(), (
-         (GLfloat )bswap_FLOAT32( pc +  0 )
+    CALL_PointSize(GET_DISPATCH(), ((GLfloat) bswap_FLOAT32(pc + 0)
     ) );
 }
 
-void __glXDispSwap_PolygonMode(GLbyte * pc)
+void
+__glXDispSwap_PolygonMode(GLbyte * pc)
 {
-    CALL_PolygonMode( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_PolygonMode(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 )
     ) );
 }
 
-void __glXDispSwap_PolygonStipple(GLbyte * pc)
+void
+__glXDispSwap_PolygonStipple(GLbyte * pc)
 {
     const GLubyte * const mask = (const GLubyte *) ((pc + 20));
     __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);
 
     CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) bswap_CARD32( & hdr->rowLength )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) bswap_CARD32( & hdr->skipRows )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) bswap_CARD32( & hdr->skipPixels )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) bswap_CARD32( & hdr->alignment )) );
-
-    CALL_PolygonStipple( GET_DISPATCH(), (
-        mask
-    ) );
-}
-
-void __glXDispSwap_Scissor(GLbyte * pc)
-{
-    CALL_Scissor( GET_DISPATCH(), (
-         (GLint   )bswap_CARD32 ( pc +  0 ),
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_ROW_LENGTH,
+                      (GLint) bswap_CARD32(&hdr->rowLength)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_ROWS,
+                      (GLint) bswap_CARD32(&hdr->skipRows)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_PIXELS,
+                      (GLint) bswap_CARD32(&hdr->skipPixels)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_ALIGNMENT,
+                      (GLint) bswap_CARD32(&hdr->alignment)));
+
+    CALL_PolygonStipple(GET_DISPATCH(), (mask));
+}
+
+void
+__glXDispSwap_Scissor(GLbyte * pc)
+{
+    CALL_Scissor(GET_DISPATCH(), ((GLint) bswap_CARD32(pc + 0),
          (GLint   )bswap_CARD32 ( pc +  4 ),
          (GLsizei )bswap_CARD32 ( pc +  8 ),
          (GLsizei )bswap_CARD32 ( pc + 12 )
     ) );
 }
 
-void __glXDispSwap_ShadeModel(GLbyte * pc)
+void
+__glXDispSwap_ShadeModel(GLbyte * pc)
 {
-    CALL_ShadeModel( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 )
+    CALL_ShadeModel(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
     ) );
 }
 
-void __glXDispSwap_TexParameterf(GLbyte * pc)
+void
+__glXDispSwap_TexParameterf(GLbyte * pc)
 {
-    CALL_TexParameterf( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_TexParameterf(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 ),
          (GLfloat )bswap_FLOAT32( pc +  8 )
     ) );
 }
 
-void __glXDispSwap_TexParameterfv(GLbyte * pc)
+void
+__glXDispSwap_TexParameterfv(GLbyte * pc)
 {
     const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
     const GLfloat * params;
 
-    params = (const GLfloat *) bswap_32_array( (uint32_t *) (pc + 8), __glTexParameterfv_size(pname) );
+    params =
+        (const GLfloat *) bswap_32_array((uint32_t *) (pc + 8),
+                                         __glTexParameterfv_size(pname));
 
-    CALL_TexParameterfv( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-        pname,
-        params
-    ) );
+    CALL_TexParameterfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                         pname, params));
 }
 
-void __glXDispSwap_TexParameteri(GLbyte * pc)
+void
+__glXDispSwap_TexParameteri(GLbyte * pc)
 {
-    CALL_TexParameteri( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_TexParameteri(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 ),
          (GLint   )bswap_CARD32 ( pc +  8 )
     ) );
 }
 
-void __glXDispSwap_TexParameteriv(GLbyte * pc)
+void
+__glXDispSwap_TexParameteriv(GLbyte * pc)
 {
     const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
     const GLint * params;
 
-    params = (const GLint *) bswap_32_array( (uint32_t *) (pc + 8), __glTexParameteriv_size(pname) );
+    params =
+        (const GLint *) bswap_32_array((uint32_t *) (pc + 8),
+                                       __glTexParameteriv_size(pname));
 
-    CALL_TexParameteriv( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-        pname,
-        params
-    ) );
+    CALL_TexParameteriv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                         pname, params));
 }
 
-void __glXDispSwap_TexImage1D(GLbyte * pc)
+void
+__glXDispSwap_TexImage1D(GLbyte * pc)
 {
     const GLvoid * const pixels = (const GLvoid *) ((pc + 52));
     __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);
 
     CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
     CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) bswap_CARD32( & hdr->rowLength )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) bswap_CARD32( & hdr->skipRows )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) bswap_CARD32( & hdr->skipPixels )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) bswap_CARD32( & hdr->alignment )) );
-
-    CALL_TexImage1D( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc + 20 ),
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_ROW_LENGTH,
+                      (GLint) bswap_CARD32(&hdr->rowLength)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_ROWS,
+                      (GLint) bswap_CARD32(&hdr->skipRows)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_PIXELS,
+                      (GLint) bswap_CARD32(&hdr->skipPixels)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_ALIGNMENT,
+                      (GLint) bswap_CARD32(&hdr->alignment)));
+
+    CALL_TexImage1D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 20),
          (GLint   )bswap_CARD32 ( pc + 24 ),
          (GLint   )bswap_CARD32 ( pc + 28 ),
          (GLsizei )bswap_CARD32 ( pc + 32 ),
          (GLint   )bswap_CARD32 ( pc + 40 ),
          (GLenum  )bswap_ENUM   ( pc + 44 ),
-         (GLenum  )bswap_ENUM   ( pc + 48 ),
-        pixels
-    ) );
+                                     (GLenum) bswap_ENUM(pc + 48), pixels));
 }
 
-void __glXDispSwap_TexImage2D(GLbyte * pc)
+void
+__glXDispSwap_TexImage2D(GLbyte * pc)
 {
     const GLvoid * const pixels = (const GLvoid *) ((pc + 52));
     __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);
 
     CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
     CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) bswap_CARD32( & hdr->rowLength )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) bswap_CARD32( & hdr->skipRows )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) bswap_CARD32( & hdr->skipPixels )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) bswap_CARD32( & hdr->alignment )) );
-
-    CALL_TexImage2D( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc + 20 ),
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_ROW_LENGTH,
+                      (GLint) bswap_CARD32(&hdr->rowLength)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_ROWS,
+                      (GLint) bswap_CARD32(&hdr->skipRows)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_PIXELS,
+                      (GLint) bswap_CARD32(&hdr->skipPixels)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_ALIGNMENT,
+                      (GLint) bswap_CARD32(&hdr->alignment)));
+
+    CALL_TexImage2D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 20),
          (GLint   )bswap_CARD32 ( pc + 24 ),
          (GLint   )bswap_CARD32 ( pc + 28 ),
          (GLsizei )bswap_CARD32 ( pc + 32 ),
          (GLsizei )bswap_CARD32 ( pc + 36 ),
          (GLint   )bswap_CARD32 ( pc + 40 ),
          (GLenum  )bswap_ENUM   ( pc + 44 ),
-         (GLenum  )bswap_ENUM   ( pc + 48 ),
-        pixels
-    ) );
+                                     (GLenum) bswap_ENUM(pc + 48), pixels));
 }
 
-void __glXDispSwap_TexEnvf(GLbyte * pc)
+void
+__glXDispSwap_TexEnvf(GLbyte * pc)
 {
-    CALL_TexEnvf( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_TexEnvf(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 ),
          (GLfloat )bswap_FLOAT32( pc +  8 )
     ) );
 }
 
-void __glXDispSwap_TexEnvfv(GLbyte * pc)
+void
+__glXDispSwap_TexEnvfv(GLbyte * pc)
 {
     const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
     const GLfloat * params;
 
-    params = (const GLfloat *) bswap_32_array( (uint32_t *) (pc + 8), __glTexEnvfv_size(pname) );
+    params =
+        (const GLfloat *) bswap_32_array((uint32_t *) (pc + 8),
+                                         __glTexEnvfv_size(pname));
 
-    CALL_TexEnvfv( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-        pname,
-        params
-    ) );
+    CALL_TexEnvfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0), pname, params));
 }
 
-void __glXDispSwap_TexEnvi(GLbyte * pc)
+void
+__glXDispSwap_TexEnvi(GLbyte * pc)
 {
-    CALL_TexEnvi( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_TexEnvi(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 ),
          (GLint   )bswap_CARD32 ( pc +  8 )
     ) );
 }
 
-void __glXDispSwap_TexEnviv(GLbyte * pc)
+void
+__glXDispSwap_TexEnviv(GLbyte * pc)
 {
     const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
     const GLint * params;
 
-    params = (const GLint *) bswap_32_array( (uint32_t *) (pc + 8), __glTexEnviv_size(pname) );
+    params =
+        (const GLint *) bswap_32_array((uint32_t *) (pc + 8),
+                                       __glTexEnviv_size(pname));
 
-    CALL_TexEnviv( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-        pname,
-        params
-    ) );
+    CALL_TexEnviv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0), pname, params));
 }
 
-void __glXDispSwap_TexGend(GLbyte * pc)
+void
+__glXDispSwap_TexGend(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -1321,14 +1446,14 @@ void __glXDispSwap_TexGend(GLbyte * pc)
     }
 #endif
 
-    CALL_TexGend( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  8 ),
+    CALL_TexGend(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 8),
          (GLenum  )bswap_ENUM   ( pc + 12 ),
          (GLdouble)bswap_FLOAT64( pc +  0 )
     ) );
 }
 
-void __glXDispSwap_TexGendv(GLbyte * pc)
+void
+__glXDispSwap_TexGendv(GLbyte * pc)
 {
     const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
     const GLdouble * params;
@@ -1336,147 +1461,147 @@ void __glXDispSwap_TexGendv(GLbyte * pc)
 #ifdef __GLX_ALIGN64
     const GLuint compsize = __glTexGendv_size(pname);
     const GLuint cmdlen = 12 + __GLX_PAD((compsize * 8)) - 4;
+
     if ((unsigned long)(pc) & 7) {
         (void) memmove(pc-4, pc, cmdlen);
         pc -= 4;
     }
 #endif
 
-    params = (const GLdouble *) bswap_64_array( (uint64_t *) (pc + 8), __glTexGendv_size(pname) );
+    params =
+        (const GLdouble *) bswap_64_array((uint64_t *) (pc + 8),
+                                          __glTexGendv_size(pname));
 
-    CALL_TexGendv( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-        pname,
-        params
-    ) );
+    CALL_TexGendv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0), pname, params));
 }
 
-void __glXDispSwap_TexGenf(GLbyte * pc)
+void
+__glXDispSwap_TexGenf(GLbyte * pc)
 {
-    CALL_TexGenf( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_TexGenf(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 ),
          (GLfloat )bswap_FLOAT32( pc +  8 )
     ) );
 }
 
-void __glXDispSwap_TexGenfv(GLbyte * pc)
+void
+__glXDispSwap_TexGenfv(GLbyte * pc)
 {
     const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
     const GLfloat * params;
 
-    params = (const GLfloat *) bswap_32_array( (uint32_t *) (pc + 8), __glTexGenfv_size(pname) );
+    params =
+        (const GLfloat *) bswap_32_array((uint32_t *) (pc + 8),
+                                         __glTexGenfv_size(pname));
 
-    CALL_TexGenfv( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-        pname,
-        params
-    ) );
+    CALL_TexGenfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0), pname, params));
 }
 
-void __glXDispSwap_TexGeni(GLbyte * pc)
+void
+__glXDispSwap_TexGeni(GLbyte * pc)
 {
-    CALL_TexGeni( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_TexGeni(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 ),
          (GLint   )bswap_CARD32 ( pc +  8 )
     ) );
 }
 
-void __glXDispSwap_TexGeniv(GLbyte * pc)
+void
+__glXDispSwap_TexGeniv(GLbyte * pc)
 {
     const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
     const GLint * params;
 
-    params = (const GLint *) bswap_32_array( (uint32_t *) (pc + 8), __glTexGeniv_size(pname) );
+    params =
+        (const GLint *) bswap_32_array((uint32_t *) (pc + 8),
+                                       __glTexGeniv_size(pname));
 
-    CALL_TexGeniv( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-        pname,
-        params
-    ) );
+    CALL_TexGeniv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0), pname, params));
 }
 
-void __glXDispSwap_InitNames(GLbyte * pc)
+void
+__glXDispSwap_InitNames(GLbyte * pc)
 {
     CALL_InitNames( GET_DISPATCH(), () );
 }
 
-void __glXDispSwap_LoadName(GLbyte * pc)
+void
+__glXDispSwap_LoadName(GLbyte * pc)
 {
-    CALL_LoadName( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 )
+    CALL_LoadName(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0)
     ) );
 }
 
-void __glXDispSwap_PassThrough(GLbyte * pc)
+void
+__glXDispSwap_PassThrough(GLbyte * pc)
 {
-    CALL_PassThrough( GET_DISPATCH(), (
-         (GLfloat )bswap_FLOAT32( pc +  0 )
+    CALL_PassThrough(GET_DISPATCH(), ((GLfloat) bswap_FLOAT32(pc + 0)
     ) );
 }
 
-void __glXDispSwap_PopName(GLbyte * pc)
+void
+__glXDispSwap_PopName(GLbyte * pc)
 {
     CALL_PopName( GET_DISPATCH(), () );
 }
 
-void __glXDispSwap_PushName(GLbyte * pc)
+void
+__glXDispSwap_PushName(GLbyte * pc)
 {
-    CALL_PushName( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 )
+    CALL_PushName(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0)
     ) );
 }
 
-void __glXDispSwap_DrawBuffer(GLbyte * pc)
+void
+__glXDispSwap_DrawBuffer(GLbyte * pc)
 {
-    CALL_DrawBuffer( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 )
+    CALL_DrawBuffer(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
     ) );
 }
 
-void __glXDispSwap_Clear(GLbyte * pc)
+void
+__glXDispSwap_Clear(GLbyte * pc)
 {
-    CALL_Clear( GET_DISPATCH(), (
-         (GLbitfield)bswap_CARD32 ( pc +  0 )
+    CALL_Clear(GET_DISPATCH(), ((GLbitfield) bswap_CARD32(pc + 0)
     ) );
 }
 
-void __glXDispSwap_ClearAccum(GLbyte * pc)
+void
+__glXDispSwap_ClearAccum(GLbyte * pc)
 {
-    CALL_ClearAccum( GET_DISPATCH(), (
-         (GLfloat )bswap_FLOAT32( pc +  0 ),
+    CALL_ClearAccum(GET_DISPATCH(), ((GLfloat) bswap_FLOAT32(pc + 0),
          (GLfloat )bswap_FLOAT32( pc +  4 ),
          (GLfloat )bswap_FLOAT32( pc +  8 ),
          (GLfloat )bswap_FLOAT32( pc + 12 )
     ) );
 }
 
-void __glXDispSwap_ClearIndex(GLbyte * pc)
+void
+__glXDispSwap_ClearIndex(GLbyte * pc)
 {
-    CALL_ClearIndex( GET_DISPATCH(), (
-         (GLfloat )bswap_FLOAT32( pc +  0 )
+    CALL_ClearIndex(GET_DISPATCH(), ((GLfloat) bswap_FLOAT32(pc + 0)
     ) );
 }
 
-void __glXDispSwap_ClearColor(GLbyte * pc)
+void
+__glXDispSwap_ClearColor(GLbyte * pc)
 {
-    CALL_ClearColor( GET_DISPATCH(), (
-         (GLclampf)bswap_FLOAT32( pc +  0 ),
+    CALL_ClearColor(GET_DISPATCH(), ((GLclampf) bswap_FLOAT32(pc + 0),
          (GLclampf)bswap_FLOAT32( pc +  4 ),
          (GLclampf)bswap_FLOAT32( pc +  8 ),
          (GLclampf)bswap_FLOAT32( pc + 12 )
     ) );
 }
 
-void __glXDispSwap_ClearStencil(GLbyte * pc)
+void
+__glXDispSwap_ClearStencil(GLbyte * pc)
 {
-    CALL_ClearStencil( GET_DISPATCH(), (
-         (GLint   )bswap_CARD32 ( pc +  0 )
+    CALL_ClearStencil(GET_DISPATCH(), ((GLint) bswap_CARD32(pc + 0)
     ) );
 }
 
-void __glXDispSwap_ClearDepth(GLbyte * pc)
+void
+__glXDispSwap_ClearDepth(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -1485,77 +1610,78 @@ void __glXDispSwap_ClearDepth(GLbyte * pc)
     }
 #endif
 
-    CALL_ClearDepth( GET_DISPATCH(), (
-         (GLclampd)bswap_FLOAT64( pc +  0 )
+    CALL_ClearDepth(GET_DISPATCH(), ((GLclampd) bswap_FLOAT64(pc + 0)
     ) );
 }
 
-void __glXDispSwap_StencilMask(GLbyte * pc)
+void
+__glXDispSwap_StencilMask(GLbyte * pc)
 {
-    CALL_StencilMask( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 )
+    CALL_StencilMask(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0)
     ) );
 }
 
-void __glXDispSwap_ColorMask(GLbyte * pc)
+void
+__glXDispSwap_ColorMask(GLbyte * pc)
 {
-    CALL_ColorMask( GET_DISPATCH(), (
-        *(GLboolean *)(pc +  0),
+    CALL_ColorMask(GET_DISPATCH(), (*(GLboolean *) (pc + 0),
         *(GLboolean *)(pc +  1),
         *(GLboolean *)(pc +  2),
         *(GLboolean *)(pc +  3)
     ) );
 }
 
-void __glXDispSwap_DepthMask(GLbyte * pc)
+void
+__glXDispSwap_DepthMask(GLbyte * pc)
 {
-    CALL_DepthMask( GET_DISPATCH(), (
-        *(GLboolean *)(pc +  0)
+    CALL_DepthMask(GET_DISPATCH(), (*(GLboolean *) (pc + 0)
     ) );
 }
 
-void __glXDispSwap_IndexMask(GLbyte * pc)
+void
+__glXDispSwap_IndexMask(GLbyte * pc)
 {
-    CALL_IndexMask( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 )
+    CALL_IndexMask(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0)
     ) );
 }
 
-void __glXDispSwap_Accum(GLbyte * pc)
+void
+__glXDispSwap_Accum(GLbyte * pc)
 {
-    CALL_Accum( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_Accum(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLfloat )bswap_FLOAT32( pc +  4 )
     ) );
 }
 
-void __glXDispSwap_Disable(GLbyte * pc)
+void
+__glXDispSwap_Disable(GLbyte * pc)
 {
-    CALL_Disable( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 )
+    CALL_Disable(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
     ) );
 }
 
-void __glXDispSwap_Enable(GLbyte * pc)
+void
+__glXDispSwap_Enable(GLbyte * pc)
 {
-    CALL_Enable( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 )
+    CALL_Enable(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
     ) );
 }
 
-void __glXDispSwap_PopAttrib(GLbyte * pc)
+void
+__glXDispSwap_PopAttrib(GLbyte * pc)
 {
     CALL_PopAttrib( GET_DISPATCH(), () );
 }
 
-void __glXDispSwap_PushAttrib(GLbyte * pc)
+void
+__glXDispSwap_PushAttrib(GLbyte * pc)
 {
-    CALL_PushAttrib( GET_DISPATCH(), (
-         (GLbitfield)bswap_CARD32 ( pc +  0 )
+    CALL_PushAttrib(GET_DISPATCH(), ((GLbitfield) bswap_CARD32(pc + 0)
     ) );
 }
 
-void __glXDispSwap_MapGrid1d(GLbyte * pc)
+void
+__glXDispSwap_MapGrid1d(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -1564,23 +1690,23 @@ void __glXDispSwap_MapGrid1d(GLbyte * pc)
     }
 #endif
 
-    CALL_MapGrid1d( GET_DISPATCH(), (
-         (GLint   )bswap_CARD32 ( pc + 16 ),
+    CALL_MapGrid1d(GET_DISPATCH(), ((GLint) bswap_CARD32(pc + 16),
          (GLdouble)bswap_FLOAT64( pc +  0 ),
          (GLdouble)bswap_FLOAT64( pc +  8 )
     ) );
 }
 
-void __glXDispSwap_MapGrid1f(GLbyte * pc)
+void
+__glXDispSwap_MapGrid1f(GLbyte * pc)
 {
-    CALL_MapGrid1f( GET_DISPATCH(), (
-         (GLint   )bswap_CARD32 ( pc +  0 ),
+    CALL_MapGrid1f(GET_DISPATCH(), ((GLint) bswap_CARD32(pc + 0),
          (GLfloat )bswap_FLOAT32( pc +  4 ),
          (GLfloat )bswap_FLOAT32( pc +  8 )
     ) );
 }
 
-void __glXDispSwap_MapGrid2d(GLbyte * pc)
+void
+__glXDispSwap_MapGrid2d(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -1589,8 +1715,7 @@ void __glXDispSwap_MapGrid2d(GLbyte * pc)
     }
 #endif
 
-    CALL_MapGrid2d( GET_DISPATCH(), (
-         (GLint   )bswap_CARD32 ( pc + 32 ),
+    CALL_MapGrid2d(GET_DISPATCH(), ((GLint) bswap_CARD32(pc + 32),
          (GLdouble)bswap_FLOAT64( pc +  0 ),
          (GLdouble)bswap_FLOAT64( pc +  8 ),
          (GLint   )bswap_CARD32 ( pc + 36 ),
@@ -1599,10 +1724,10 @@ void __glXDispSwap_MapGrid2d(GLbyte * pc)
     ) );
 }
 
-void __glXDispSwap_MapGrid2f(GLbyte * pc)
+void
+__glXDispSwap_MapGrid2f(GLbyte * pc)
 {
-    CALL_MapGrid2f( GET_DISPATCH(), (
-         (GLint   )bswap_CARD32 ( pc +  0 ),
+    CALL_MapGrid2f(GET_DISPATCH(), ((GLint) bswap_CARD32(pc + 0),
          (GLfloat )bswap_FLOAT32( pc +  4 ),
          (GLfloat )bswap_FLOAT32( pc +  8 ),
          (GLint   )bswap_CARD32 ( pc + 12 ),
@@ -1611,7 +1736,8 @@ void __glXDispSwap_MapGrid2f(GLbyte * pc)
     ) );
 }
 
-void __glXDispSwap_EvalCoord1dv(GLbyte * pc)
+void
+__glXDispSwap_EvalCoord1dv(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -1620,19 +1746,21 @@ void __glXDispSwap_EvalCoord1dv(GLbyte * pc)
     }
 #endif
 
-    CALL_EvalCoord1dv( GET_DISPATCH(), (
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 1 )
+    CALL_EvalCoord1dv(GET_DISPATCH(), ((const GLdouble *)
+                                       bswap_64_array((uint64_t *) (pc + 0), 1)
     ) );
 }
 
-void __glXDispSwap_EvalCoord1fv(GLbyte * pc)
+void
+__glXDispSwap_EvalCoord1fv(GLbyte * pc)
 {
-    CALL_EvalCoord1fv( GET_DISPATCH(), (
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 1 )
+    CALL_EvalCoord1fv(GET_DISPATCH(), ((const GLfloat *)
+                                       bswap_32_array((uint32_t *) (pc + 0), 1)
     ) );
 }
 
-void __glXDispSwap_EvalCoord2dv(GLbyte * pc)
+void
+__glXDispSwap_EvalCoord2dv(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -1641,38 +1769,39 @@ void __glXDispSwap_EvalCoord2dv(GLbyte * pc)
     }
 #endif
 
-    CALL_EvalCoord2dv( GET_DISPATCH(), (
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 2 )
+    CALL_EvalCoord2dv(GET_DISPATCH(), ((const GLdouble *)
+                                       bswap_64_array((uint64_t *) (pc + 0), 2)
     ) );
 }
 
-void __glXDispSwap_EvalCoord2fv(GLbyte * pc)
+void
+__glXDispSwap_EvalCoord2fv(GLbyte * pc)
 {
-    CALL_EvalCoord2fv( GET_DISPATCH(), (
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 2 )
+    CALL_EvalCoord2fv(GET_DISPATCH(), ((const GLfloat *)
+                                       bswap_32_array((uint32_t *) (pc + 0), 2)
     ) );
 }
 
-void __glXDispSwap_EvalMesh1(GLbyte * pc)
+void
+__glXDispSwap_EvalMesh1(GLbyte * pc)
 {
-    CALL_EvalMesh1( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_EvalMesh1(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLint   )bswap_CARD32 ( pc +  4 ),
          (GLint   )bswap_CARD32 ( pc +  8 )
     ) );
 }
 
-void __glXDispSwap_EvalPoint1(GLbyte * pc)
+void
+__glXDispSwap_EvalPoint1(GLbyte * pc)
 {
-    CALL_EvalPoint1( GET_DISPATCH(), (
-         (GLint   )bswap_CARD32 ( pc +  0 )
+    CALL_EvalPoint1(GET_DISPATCH(), ((GLint) bswap_CARD32(pc + 0)
     ) );
 }
 
-void __glXDispSwap_EvalMesh2(GLbyte * pc)
+void
+__glXDispSwap_EvalMesh2(GLbyte * pc)
 {
-    CALL_EvalMesh2( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_EvalMesh2(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLint   )bswap_CARD32 ( pc +  4 ),
          (GLint   )bswap_CARD32 ( pc +  8 ),
          (GLint   )bswap_CARD32 ( pc + 12 ),
@@ -1680,96 +1809,97 @@ void __glXDispSwap_EvalMesh2(GLbyte * pc)
     ) );
 }
 
-void __glXDispSwap_EvalPoint2(GLbyte * pc)
+void
+__glXDispSwap_EvalPoint2(GLbyte * pc)
 {
-    CALL_EvalPoint2( GET_DISPATCH(), (
-         (GLint   )bswap_CARD32 ( pc +  0 ),
+    CALL_EvalPoint2(GET_DISPATCH(), ((GLint) bswap_CARD32(pc + 0),
          (GLint   )bswap_CARD32 ( pc +  4 )
     ) );
 }
 
-void __glXDispSwap_AlphaFunc(GLbyte * pc)
+void
+__glXDispSwap_AlphaFunc(GLbyte * pc)
 {
-    CALL_AlphaFunc( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_AlphaFunc(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLclampf)bswap_FLOAT32( pc +  4 )
     ) );
 }
 
-void __glXDispSwap_BlendFunc(GLbyte * pc)
+void
+__glXDispSwap_BlendFunc(GLbyte * pc)
 {
-    CALL_BlendFunc( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_BlendFunc(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 )
     ) );
 }
 
-void __glXDispSwap_LogicOp(GLbyte * pc)
+void
+__glXDispSwap_LogicOp(GLbyte * pc)
 {
-    CALL_LogicOp( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 )
+    CALL_LogicOp(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
     ) );
 }
 
-void __glXDispSwap_StencilFunc(GLbyte * pc)
+void
+__glXDispSwap_StencilFunc(GLbyte * pc)
 {
-    CALL_StencilFunc( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_StencilFunc(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLint   )bswap_CARD32 ( pc +  4 ),
          (GLuint  )bswap_CARD32 ( pc +  8 )
     ) );
 }
 
-void __glXDispSwap_StencilOp(GLbyte * pc)
+void
+__glXDispSwap_StencilOp(GLbyte * pc)
 {
-    CALL_StencilOp( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_StencilOp(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 ),
          (GLenum  )bswap_ENUM   ( pc +  8 )
     ) );
 }
 
-void __glXDispSwap_DepthFunc(GLbyte * pc)
+void
+__glXDispSwap_DepthFunc(GLbyte * pc)
 {
-    CALL_DepthFunc( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 )
+    CALL_DepthFunc(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
     ) );
 }
 
-void __glXDispSwap_PixelZoom(GLbyte * pc)
+void
+__glXDispSwap_PixelZoom(GLbyte * pc)
 {
-    CALL_PixelZoom( GET_DISPATCH(), (
-         (GLfloat )bswap_FLOAT32( pc +  0 ),
+    CALL_PixelZoom(GET_DISPATCH(), ((GLfloat) bswap_FLOAT32(pc + 0),
          (GLfloat )bswap_FLOAT32( pc +  4 )
     ) );
 }
 
-void __glXDispSwap_PixelTransferf(GLbyte * pc)
+void
+__glXDispSwap_PixelTransferf(GLbyte * pc)
 {
-    CALL_PixelTransferf( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_PixelTransferf(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLfloat )bswap_FLOAT32( pc +  4 )
     ) );
 }
 
-void __glXDispSwap_PixelTransferi(GLbyte * pc)
+void
+__glXDispSwap_PixelTransferi(GLbyte * pc)
 {
-    CALL_PixelTransferi( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_PixelTransferi(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLint   )bswap_CARD32 ( pc +  4 )
     ) );
 }
 
-int __glXDispSwap_PixelStoref(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_PixelStoref(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
-        CALL_PixelStoref( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
+        CALL_PixelStoref(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
              (GLfloat )bswap_FLOAT32( pc +  4 )
         ) );
         error = Success;
@@ -1778,16 +1908,17 @@ int __glXDispSwap_PixelStoref(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_PixelStorei(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_PixelStorei(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
-        CALL_PixelStorei( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
+        CALL_PixelStorei(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
              (GLint   )bswap_CARD32 ( pc +  4 )
         ) );
         error = Success;
@@ -1796,50 +1927,53 @@ int __glXDispSwap_PixelStorei(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-void __glXDispSwap_PixelMapfv(GLbyte * pc)
+void
+__glXDispSwap_PixelMapfv(GLbyte * pc)
 {
     const GLsizei mapsize =  (GLsizei )bswap_CARD32 ( pc +  4 );
 
-    CALL_PixelMapfv( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_PixelMapfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
         mapsize,
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  8), 0 )
+                                     (const GLfloat *)
+                                     bswap_32_array((uint32_t *) (pc + 8), 0)
     ) );
 }
 
-void __glXDispSwap_PixelMapuiv(GLbyte * pc)
+void
+__glXDispSwap_PixelMapuiv(GLbyte * pc)
 {
     const GLsizei mapsize =  (GLsizei )bswap_CARD32 ( pc +  4 );
 
-    CALL_PixelMapuiv( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_PixelMapuiv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
         mapsize,
-         (const GLuint *)bswap_32_array( (uint32_t *) (pc +  8), 0 )
+                                      (const GLuint *)
+                                      bswap_32_array((uint32_t *) (pc + 8), 0)
     ) );
 }
 
-void __glXDispSwap_PixelMapusv(GLbyte * pc)
+void
+__glXDispSwap_PixelMapusv(GLbyte * pc)
 {
     const GLsizei mapsize =  (GLsizei )bswap_CARD32 ( pc +  4 );
 
-    CALL_PixelMapusv( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_PixelMapusv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
         mapsize,
-         (const GLushort *)bswap_16_array( (uint16_t *) (pc +  8), 0 )
+                                      (const GLushort *)
+                                      bswap_16_array((uint16_t *) (pc + 8), 0)
     ) );
 }
 
-void __glXDispSwap_ReadBuffer(GLbyte * pc)
+void
+__glXDispSwap_ReadBuffer(GLbyte * pc)
 {
-    CALL_ReadBuffer( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 )
+    CALL_ReadBuffer(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
     ) );
 }
 
-void __glXDispSwap_CopyPixels(GLbyte * pc)
+void
+__glXDispSwap_CopyPixels(GLbyte * pc)
 {
-    CALL_CopyPixels( GET_DISPATCH(), (
-         (GLint   )bswap_CARD32 ( pc +  0 ),
+    CALL_CopyPixels(GET_DISPATCH(), ((GLint) bswap_CARD32(pc + 0),
          (GLint   )bswap_CARD32 ( pc +  4 ),
          (GLsizei )bswap_CARD32 ( pc +  8 ),
          (GLsizei )bswap_CARD32 ( pc + 12 ),
@@ -1847,32 +1981,40 @@ void __glXDispSwap_CopyPixels(GLbyte * pc)
     ) );
 }
 
-void __glXDispSwap_DrawPixels(GLbyte * pc)
+void
+__glXDispSwap_DrawPixels(GLbyte * pc)
 {
     const GLvoid * const pixels = (const GLvoid *) ((pc + 36));
     __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);
 
     CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
     CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) bswap_CARD32( & hdr->rowLength )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) bswap_CARD32( & hdr->skipRows )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) bswap_CARD32( & hdr->skipPixels )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) bswap_CARD32( & hdr->alignment )) );
-
-    CALL_DrawPixels( GET_DISPATCH(), (
-         (GLsizei )bswap_CARD32 ( pc + 20 ),
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_ROW_LENGTH,
+                      (GLint) bswap_CARD32(&hdr->rowLength)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_ROWS,
+                      (GLint) bswap_CARD32(&hdr->skipRows)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_PIXELS,
+                      (GLint) bswap_CARD32(&hdr->skipPixels)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_ALIGNMENT,
+                      (GLint) bswap_CARD32(&hdr->alignment)));
+
+    CALL_DrawPixels(GET_DISPATCH(), ((GLsizei) bswap_CARD32(pc + 20),
          (GLsizei )bswap_CARD32 ( pc + 24 ),
          (GLenum  )bswap_ENUM   ( pc + 28 ),
-         (GLenum  )bswap_ENUM   ( pc + 32 ),
-        pixels
-    ) );
+                                     (GLenum) bswap_ENUM(pc + 32), pixels));
 }
 
-int __glXDispSwap_GetBooleanv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetBooleanv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -1880,15 +2022,15 @@ int __glXDispSwap_GetBooleanv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetBooleanv_size(pname);
         GLboolean answerBuffer[200];
-        GLboolean * params = __glXGetAnswerBuffer(cl, compsize, answerBuffer, sizeof(answerBuffer), 1);
+        GLboolean *params =
+            __glXGetAnswerBuffer(cl, compsize, answerBuffer,
+                                 sizeof(answerBuffer), 1);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetBooleanv( GET_DISPATCH(), (
-            pname,
-            params
-        ) );
+        CALL_GetBooleanv(GET_DISPATCH(), (pname, params));
         __glXSendReplySwap(cl->client, params, compsize, 1, GL_FALSE, 0);
         error = Success;
     }
@@ -1896,19 +2038,20 @@ int __glXDispSwap_GetBooleanv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetClipPlane(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetClipPlane(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
         GLdouble equation[4];
-        CALL_GetClipPlane( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            equation
-        ) );
+
+        CALL_GetClipPlane(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                           equation));
         (void) bswap_64_array( (uint64_t *) equation, 4 );
         __glXSendReplySwap(cl->client, equation, 4, 8, GL_TRUE, 0);
         error = Success;
@@ -1917,11 +2060,13 @@ int __glXDispSwap_GetClipPlane(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetDoublev(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetDoublev(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -1929,15 +2074,15 @@ int __glXDispSwap_GetDoublev(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetDoublev_size(pname);
         GLdouble answerBuffer[200];
-        GLdouble * params = __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer, sizeof(answerBuffer), 8);
+        GLdouble *params =
+            __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer,
+                                 sizeof(answerBuffer), 8);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetDoublev( GET_DISPATCH(), (
-            pname,
-            params
-        ) );
+        CALL_GetDoublev(GET_DISPATCH(), (pname, params));
         (void) bswap_64_array( (uint64_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 8, GL_FALSE, 0);
         error = Success;
@@ -1946,15 +2091,18 @@ int __glXDispSwap_GetDoublev(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetError(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetError(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
         GLenum retval;
+
         retval = CALL_GetError( GET_DISPATCH(), () );
         __glXSendReplySwap(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
         error = Success;
@@ -1963,11 +2111,13 @@ int __glXDispSwap_GetError(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetFloatv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetFloatv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -1975,15 +2125,15 @@ int __glXDispSwap_GetFloatv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetFloatv_size(pname);
         GLfloat answerBuffer[200];
-        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLfloat *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetFloatv( GET_DISPATCH(), (
-            pname,
-            params
-        ) );
+        CALL_GetFloatv(GET_DISPATCH(), (pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -1992,11 +2142,13 @@ int __glXDispSwap_GetFloatv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetIntegerv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetIntegerv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -2004,15 +2156,15 @@ int __glXDispSwap_GetIntegerv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetIntegerv_size(pname);
         GLint answerBuffer[200];
-        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLint *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetIntegerv( GET_DISPATCH(), (
-            pname,
-            params
-        ) );
+        CALL_GetIntegerv(GET_DISPATCH(), (pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -2021,11 +2173,13 @@ int __glXDispSwap_GetIntegerv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetLightfv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetLightfv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -2033,16 +2187,16 @@ int __glXDispSwap_GetLightfv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetLightfv_size(pname);
         GLfloat answerBuffer[200];
-        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLfloat *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetLightfv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetLightfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                         pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -2051,11 +2205,13 @@ int __glXDispSwap_GetLightfv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetLightiv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetLightiv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -2063,16 +2219,16 @@ int __glXDispSwap_GetLightiv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetLightiv_size(pname);
         GLint answerBuffer[200];
-        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLint *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetLightiv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetLightiv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                         pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -2081,11 +2237,13 @@ int __glXDispSwap_GetLightiv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetMapdv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetMapdv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -2094,16 +2252,15 @@ int __glXDispSwap_GetMapdv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetMapdv_size(target,query);
         GLdouble answerBuffer[200];
-        GLdouble * v = __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer, sizeof(answerBuffer), 8);
+        GLdouble *v =
+            __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer,
+                                 sizeof(answerBuffer), 8);
 
-        if (v == NULL) return BadAlloc;
+        if (v == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetMapdv( GET_DISPATCH(), (
-            target,
-            query,
-            v
-        ) );
+        CALL_GetMapdv(GET_DISPATCH(), (target, query, v));
         (void) bswap_64_array( (uint64_t *) v, compsize );
         __glXSendReplySwap(cl->client, v, compsize, 8, GL_FALSE, 0);
         error = Success;
@@ -2112,11 +2269,13 @@ int __glXDispSwap_GetMapdv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetMapfv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetMapfv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -2125,16 +2284,15 @@ int __glXDispSwap_GetMapfv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetMapfv_size(target,query);
         GLfloat answerBuffer[200];
-        GLfloat * v = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLfloat *v =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (v == NULL) return BadAlloc;
+        if (v == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetMapfv( GET_DISPATCH(), (
-            target,
-            query,
-            v
-        ) );
+        CALL_GetMapfv(GET_DISPATCH(), (target, query, v));
         (void) bswap_32_array( (uint32_t *) v, compsize );
         __glXSendReplySwap(cl->client, v, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -2143,11 +2301,13 @@ int __glXDispSwap_GetMapfv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetMapiv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetMapiv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -2156,16 +2316,15 @@ int __glXDispSwap_GetMapiv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetMapiv_size(target,query);
         GLint answerBuffer[200];
-        GLint * v = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLint *v =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (v == NULL) return BadAlloc;
+        if (v == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetMapiv( GET_DISPATCH(), (
-            target,
-            query,
-            v
-        ) );
+        CALL_GetMapiv(GET_DISPATCH(), (target, query, v));
         (void) bswap_32_array( (uint32_t *) v, compsize );
         __glXSendReplySwap(cl->client, v, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -2174,11 +2333,13 @@ int __glXDispSwap_GetMapiv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetMaterialfv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetMaterialfv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -2186,16 +2347,16 @@ int __glXDispSwap_GetMaterialfv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetMaterialfv_size(pname);
         GLfloat answerBuffer[200];
-        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLfloat *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetMaterialfv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetMaterialfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                            pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -2204,11 +2365,13 @@ int __glXDispSwap_GetMaterialfv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetMaterialiv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetMaterialiv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -2216,16 +2379,16 @@ int __glXDispSwap_GetMaterialiv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetMaterialiv_size(pname);
         GLint answerBuffer[200];
-        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLint *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetMaterialiv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetMaterialiv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                            pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -2234,11 +2397,13 @@ int __glXDispSwap_GetMaterialiv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetPixelMapfv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetPixelMapfv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -2246,15 +2411,15 @@ int __glXDispSwap_GetPixelMapfv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetPixelMapfv_size(map);
         GLfloat answerBuffer[200];
-        GLfloat * values = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLfloat *values =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (values == NULL) return BadAlloc;
+        if (values == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetPixelMapfv( GET_DISPATCH(), (
-            map,
-            values
-        ) );
+        CALL_GetPixelMapfv(GET_DISPATCH(), (map, values));
         (void) bswap_32_array( (uint32_t *) values, compsize );
         __glXSendReplySwap(cl->client, values, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -2263,11 +2428,13 @@ int __glXDispSwap_GetPixelMapfv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetPixelMapuiv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetPixelMapuiv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -2275,15 +2442,15 @@ int __glXDispSwap_GetPixelMapuiv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetPixelMapuiv_size(map);
         GLuint answerBuffer[200];
-        GLuint * values = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLuint *values =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (values == NULL) return BadAlloc;
+        if (values == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetPixelMapuiv( GET_DISPATCH(), (
-            map,
-            values
-        ) );
+        CALL_GetPixelMapuiv(GET_DISPATCH(), (map, values));
         (void) bswap_32_array( (uint32_t *) values, compsize );
         __glXSendReplySwap(cl->client, values, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -2292,11 +2459,13 @@ int __glXDispSwap_GetPixelMapuiv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetPixelMapusv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetPixelMapusv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -2304,15 +2473,15 @@ int __glXDispSwap_GetPixelMapusv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetPixelMapusv_size(map);
         GLushort answerBuffer[200];
-        GLushort * values = __glXGetAnswerBuffer(cl, compsize * 2, answerBuffer, sizeof(answerBuffer), 2);
+        GLushort *values =
+            __glXGetAnswerBuffer(cl, compsize * 2, answerBuffer,
+                                 sizeof(answerBuffer), 2);
 
-        if (values == NULL) return BadAlloc;
+        if (values == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetPixelMapusv( GET_DISPATCH(), (
-            map,
-            values
-        ) );
+        CALL_GetPixelMapusv(GET_DISPATCH(), (map, values));
         (void) bswap_16_array( (uint16_t *) values, compsize );
         __glXSendReplySwap(cl->client, values, compsize, 2, GL_FALSE, 0);
         error = Success;
@@ -2321,11 +2490,13 @@ int __glXDispSwap_GetPixelMapusv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetTexEnvfv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetTexEnvfv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -2333,16 +2504,16 @@ int __glXDispSwap_GetTexEnvfv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetTexEnvfv_size(pname);
         GLfloat answerBuffer[200];
-        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLfloat *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetTexEnvfv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetTexEnvfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                          pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -2351,11 +2522,13 @@ int __glXDispSwap_GetTexEnvfv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetTexEnviv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetTexEnviv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -2363,16 +2536,16 @@ int __glXDispSwap_GetTexEnviv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetTexEnviv_size(pname);
         GLint answerBuffer[200];
-        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLint *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetTexEnviv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetTexEnviv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                          pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -2381,11 +2554,13 @@ int __glXDispSwap_GetTexEnviv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetTexGendv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetTexGendv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -2393,16 +2568,16 @@ int __glXDispSwap_GetTexGendv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetTexGendv_size(pname);
         GLdouble answerBuffer[200];
-        GLdouble * params = __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer, sizeof(answerBuffer), 8);
+        GLdouble *params =
+            __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer,
+                                 sizeof(answerBuffer), 8);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetTexGendv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetTexGendv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                          pname, params));
         (void) bswap_64_array( (uint64_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 8, GL_FALSE, 0);
         error = Success;
@@ -2411,11 +2586,13 @@ int __glXDispSwap_GetTexGendv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetTexGenfv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetTexGenfv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -2423,16 +2600,16 @@ int __glXDispSwap_GetTexGenfv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetTexGenfv_size(pname);
         GLfloat answerBuffer[200];
-        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLfloat *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetTexGenfv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetTexGenfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                          pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -2441,11 +2618,13 @@ int __glXDispSwap_GetTexGenfv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetTexGeniv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetTexGeniv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -2453,16 +2632,16 @@ int __glXDispSwap_GetTexGeniv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetTexGeniv_size(pname);
         GLint answerBuffer[200];
-        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLint *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetTexGeniv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetTexGeniv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                          pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -2471,11 +2650,13 @@ int __glXDispSwap_GetTexGeniv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetTexParameterfv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetTexParameterfv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -2483,16 +2664,16 @@ int __glXDispSwap_GetTexParameterfv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetTexParameterfv_size(pname);
         GLfloat answerBuffer[200];
-        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLfloat *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetTexParameterfv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetTexParameterfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                                pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -2501,11 +2682,13 @@ int __glXDispSwap_GetTexParameterfv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetTexParameteriv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetTexParameteriv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -2513,16 +2696,16 @@ int __glXDispSwap_GetTexParameteriv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetTexParameteriv_size(pname);
         GLint answerBuffer[200];
-        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLint *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetTexParameteriv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetTexParameteriv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                                pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -2531,11 +2714,13 @@ int __glXDispSwap_GetTexParameteriv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetTexLevelParameterfv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetTexLevelParameterfv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -2543,17 +2728,19 @@ int __glXDispSwap_GetTexLevelParameterfv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetTexLevelParameterfv_size(pname);
         GLfloat answerBuffer[200];
-        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLfloat *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetTexLevelParameterfv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-             (GLint   )bswap_CARD32 ( pc +  4 ),
-            pname,
-            params
-        ) );
+        CALL_GetTexLevelParameterfv(GET_DISPATCH(), ((GLenum)
+                                                     bswap_ENUM(pc + 0),
+                                                     (GLint) bswap_CARD32(pc +
+                                                                          4),
+                                                     pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -2562,11 +2749,13 @@ int __glXDispSwap_GetTexLevelParameterfv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetTexLevelParameteriv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetTexLevelParameteriv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -2574,17 +2763,19 @@ int __glXDispSwap_GetTexLevelParameteriv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetTexLevelParameteriv_size(pname);
         GLint answerBuffer[200];
-        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLint *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetTexLevelParameteriv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-             (GLint   )bswap_CARD32 ( pc +  4 ),
-            pname,
-            params
-        ) );
+        CALL_GetTexLevelParameteriv(GET_DISPATCH(), ((GLenum)
+                                                     bswap_ENUM(pc + 0),
+                                                     (GLint) bswap_CARD32(pc +
+                                                                          4),
+                                                     pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -2593,17 +2784,19 @@ int __glXDispSwap_GetTexLevelParameteriv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_IsEnabled(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_IsEnabled(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
         GLboolean retval;
-        retval = CALL_IsEnabled( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 )
+
+        retval = CALL_IsEnabled(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
         ) );
         __glXSendReplySwap(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
         error = Success;
@@ -2612,17 +2805,19 @@ int __glXDispSwap_IsEnabled(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_IsList(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_IsList(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
         GLboolean retval;
-        retval = CALL_IsList( GET_DISPATCH(), (
-             (GLuint  )bswap_CARD32 ( pc +  0 )
+
+        retval = CALL_IsList(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0)
         ) );
         __glXSendReplySwap(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
         error = Success;
@@ -2631,7 +2826,8 @@ int __glXDispSwap_IsList(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-void __glXDispSwap_DepthRange(GLbyte * pc)
+void
+__glXDispSwap_DepthRange(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -2640,13 +2836,13 @@ void __glXDispSwap_DepthRange(GLbyte * pc)
     }
 #endif
 
-    CALL_DepthRange( GET_DISPATCH(), (
-         (GLclampd)bswap_FLOAT64( pc +  0 ),
+    CALL_DepthRange(GET_DISPATCH(), ((GLclampd) bswap_FLOAT64(pc + 0),
          (GLclampd)bswap_FLOAT64( pc +  8 )
     ) );
 }
 
-void __glXDispSwap_Frustum(GLbyte * pc)
+void
+__glXDispSwap_Frustum(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -2655,8 +2851,7 @@ void __glXDispSwap_Frustum(GLbyte * pc)
     }
 #endif
 
-    CALL_Frustum( GET_DISPATCH(), (
-         (GLdouble)bswap_FLOAT64( pc +  0 ),
+    CALL_Frustum(GET_DISPATCH(), ((GLdouble) bswap_FLOAT64(pc + 0),
          (GLdouble)bswap_FLOAT64( pc +  8 ),
          (GLdouble)bswap_FLOAT64( pc + 16 ),
          (GLdouble)bswap_FLOAT64( pc + 24 ),
@@ -2665,19 +2860,22 @@ void __glXDispSwap_Frustum(GLbyte * pc)
     ) );
 }
 
-void __glXDispSwap_LoadIdentity(GLbyte * pc)
+void
+__glXDispSwap_LoadIdentity(GLbyte * pc)
 {
     CALL_LoadIdentity( GET_DISPATCH(), () );
 }
 
-void __glXDispSwap_LoadMatrixf(GLbyte * pc)
+void
+__glXDispSwap_LoadMatrixf(GLbyte * pc)
 {
-    CALL_LoadMatrixf( GET_DISPATCH(), (
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 16 )
+    CALL_LoadMatrixf(GET_DISPATCH(), ((const GLfloat *)
+                                      bswap_32_array((uint32_t *) (pc + 0), 16)
     ) );
 }
 
-void __glXDispSwap_LoadMatrixd(GLbyte * pc)
+void
+__glXDispSwap_LoadMatrixd(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -2686,26 +2884,28 @@ void __glXDispSwap_LoadMatrixd(GLbyte * pc)
     }
 #endif
 
-    CALL_LoadMatrixd( GET_DISPATCH(), (
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 16 )
+    CALL_LoadMatrixd(GET_DISPATCH(), ((const GLdouble *)
+                                      bswap_64_array((uint64_t *) (pc + 0), 16)
     ) );
 }
 
-void __glXDispSwap_MatrixMode(GLbyte * pc)
+void
+__glXDispSwap_MatrixMode(GLbyte * pc)
 {
-    CALL_MatrixMode( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 )
+    CALL_MatrixMode(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
     ) );
 }
 
-void __glXDispSwap_MultMatrixf(GLbyte * pc)
+void
+__glXDispSwap_MultMatrixf(GLbyte * pc)
 {
-    CALL_MultMatrixf( GET_DISPATCH(), (
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 16 )
+    CALL_MultMatrixf(GET_DISPATCH(), ((const GLfloat *)
+                                      bswap_32_array((uint32_t *) (pc + 0), 16)
     ) );
 }
 
-void __glXDispSwap_MultMatrixd(GLbyte * pc)
+void
+__glXDispSwap_MultMatrixd(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -2714,12 +2914,13 @@ void __glXDispSwap_MultMatrixd(GLbyte * pc)
     }
 #endif
 
-    CALL_MultMatrixd( GET_DISPATCH(), (
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 16 )
+    CALL_MultMatrixd(GET_DISPATCH(), ((const GLdouble *)
+                                      bswap_64_array((uint64_t *) (pc + 0), 16)
     ) );
 }
 
-void __glXDispSwap_Ortho(GLbyte * pc)
+void
+__glXDispSwap_Ortho(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -2728,8 +2929,7 @@ void __glXDispSwap_Ortho(GLbyte * pc)
     }
 #endif
 
-    CALL_Ortho( GET_DISPATCH(), (
-         (GLdouble)bswap_FLOAT64( pc +  0 ),
+    CALL_Ortho(GET_DISPATCH(), ((GLdouble) bswap_FLOAT64(pc + 0),
          (GLdouble)bswap_FLOAT64( pc +  8 ),
          (GLdouble)bswap_FLOAT64( pc + 16 ),
          (GLdouble)bswap_FLOAT64( pc + 24 ),
@@ -2738,17 +2938,20 @@ void __glXDispSwap_Ortho(GLbyte * pc)
     ) );
 }
 
-void __glXDispSwap_PopMatrix(GLbyte * pc)
+void
+__glXDispSwap_PopMatrix(GLbyte * pc)
 {
     CALL_PopMatrix( GET_DISPATCH(), () );
 }
 
-void __glXDispSwap_PushMatrix(GLbyte * pc)
+void
+__glXDispSwap_PushMatrix(GLbyte * pc)
 {
     CALL_PushMatrix( GET_DISPATCH(), () );
 }
 
-void __glXDispSwap_Rotated(GLbyte * pc)
+void
+__glXDispSwap_Rotated(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -2757,25 +2960,25 @@ void __glXDispSwap_Rotated(GLbyte * pc)
     }
 #endif
 
-    CALL_Rotated( GET_DISPATCH(), (
-         (GLdouble)bswap_FLOAT64( pc +  0 ),
+    CALL_Rotated(GET_DISPATCH(), ((GLdouble) bswap_FLOAT64(pc + 0),
          (GLdouble)bswap_FLOAT64( pc +  8 ),
          (GLdouble)bswap_FLOAT64( pc + 16 ),
          (GLdouble)bswap_FLOAT64( pc + 24 )
     ) );
 }
 
-void __glXDispSwap_Rotatef(GLbyte * pc)
+void
+__glXDispSwap_Rotatef(GLbyte * pc)
 {
-    CALL_Rotatef( GET_DISPATCH(), (
-         (GLfloat )bswap_FLOAT32( pc +  0 ),
+    CALL_Rotatef(GET_DISPATCH(), ((GLfloat) bswap_FLOAT32(pc + 0),
          (GLfloat )bswap_FLOAT32( pc +  4 ),
          (GLfloat )bswap_FLOAT32( pc +  8 ),
          (GLfloat )bswap_FLOAT32( pc + 12 )
     ) );
 }
 
-void __glXDispSwap_Scaled(GLbyte * pc)
+void
+__glXDispSwap_Scaled(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -2784,23 +2987,23 @@ void __glXDispSwap_Scaled(GLbyte * pc)
     }
 #endif
 
-    CALL_Scaled( GET_DISPATCH(), (
-         (GLdouble)bswap_FLOAT64( pc +  0 ),
+    CALL_Scaled(GET_DISPATCH(), ((GLdouble) bswap_FLOAT64(pc + 0),
          (GLdouble)bswap_FLOAT64( pc +  8 ),
          (GLdouble)bswap_FLOAT64( pc + 16 )
     ) );
 }
 
-void __glXDispSwap_Scalef(GLbyte * pc)
+void
+__glXDispSwap_Scalef(GLbyte * pc)
 {
-    CALL_Scalef( GET_DISPATCH(), (
-         (GLfloat )bswap_FLOAT32( pc +  0 ),
+    CALL_Scalef(GET_DISPATCH(), ((GLfloat) bswap_FLOAT32(pc + 0),
          (GLfloat )bswap_FLOAT32( pc +  4 ),
          (GLfloat )bswap_FLOAT32( pc +  8 )
     ) );
 }
 
-void __glXDispSwap_Translated(GLbyte * pc)
+void
+__glXDispSwap_Translated(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -2809,60 +3012,61 @@ void __glXDispSwap_Translated(GLbyte * pc)
     }
 #endif
 
-    CALL_Translated( GET_DISPATCH(), (
-         (GLdouble)bswap_FLOAT64( pc +  0 ),
+    CALL_Translated(GET_DISPATCH(), ((GLdouble) bswap_FLOAT64(pc + 0),
          (GLdouble)bswap_FLOAT64( pc +  8 ),
          (GLdouble)bswap_FLOAT64( pc + 16 )
     ) );
 }
 
-void __glXDispSwap_Translatef(GLbyte * pc)
+void
+__glXDispSwap_Translatef(GLbyte * pc)
 {
-    CALL_Translatef( GET_DISPATCH(), (
-         (GLfloat )bswap_FLOAT32( pc +  0 ),
+    CALL_Translatef(GET_DISPATCH(), ((GLfloat) bswap_FLOAT32(pc + 0),
          (GLfloat )bswap_FLOAT32( pc +  4 ),
          (GLfloat )bswap_FLOAT32( pc +  8 )
     ) );
 }
 
-void __glXDispSwap_Viewport(GLbyte * pc)
+void
+__glXDispSwap_Viewport(GLbyte * pc)
 {
-    CALL_Viewport( GET_DISPATCH(), (
-         (GLint   )bswap_CARD32 ( pc +  0 ),
+    CALL_Viewport(GET_DISPATCH(), ((GLint) bswap_CARD32(pc + 0),
          (GLint   )bswap_CARD32 ( pc +  4 ),
          (GLsizei )bswap_CARD32 ( pc +  8 ),
          (GLsizei )bswap_CARD32 ( pc + 12 )
     ) );
 }
 
-void __glXDispSwap_BindTexture(GLbyte * pc)
+void
+__glXDispSwap_BindTexture(GLbyte * pc)
 {
-    CALL_BindTexture( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_BindTexture(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLuint  )bswap_CARD32 ( pc +  4 )
     ) );
 }
 
-void __glXDispSwap_Indexubv(GLbyte * pc)
+void
+__glXDispSwap_Indexubv(GLbyte * pc)
 {
-    CALL_Indexubv( GET_DISPATCH(), (
-         (const GLubyte *)(pc +  0)
+    CALL_Indexubv(GET_DISPATCH(), ((const GLubyte *) (pc + 0)
     ) );
 }
 
-void __glXDispSwap_PolygonOffset(GLbyte * pc)
+void
+__glXDispSwap_PolygonOffset(GLbyte * pc)
 {
-    CALL_PolygonOffset( GET_DISPATCH(), (
-         (GLfloat )bswap_FLOAT32( pc +  0 ),
+    CALL_PolygonOffset(GET_DISPATCH(), ((GLfloat) bswap_FLOAT32(pc + 0),
          (GLfloat )bswap_FLOAT32( pc +  4 )
     ) );
 }
 
-int __glXDispSwap_AreTexturesResident(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_AreTexturesResident(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -2870,12 +3074,14 @@ int __glXDispSwap_AreTexturesResident(__GLXclientState *cl, GLbyte *pc)
 
         GLboolean retval;
         GLboolean answerBuffer[200];
-        GLboolean * residences = __glXGetAnswerBuffer(cl, n, answerBuffer, sizeof(answerBuffer), 1);
-        retval = CALL_AreTexturesResident( GET_DISPATCH(), (
-            n,
-             (const GLuint *)bswap_32_array( (uint32_t *) (pc +  4), 0 ),
-            residences
-        ) );
+        GLboolean *residences =
+            __glXGetAnswerBuffer(cl, n, answerBuffer, sizeof(answerBuffer), 1);
+        retval =
+            CALL_AreTexturesResident(GET_DISPATCH(),
+                                     (n,
+                                      (const GLuint *)
+                                      bswap_32_array((uint32_t *) (pc + 4), 0),
+                                      residences));
         __glXSendReplySwap(cl->client, residences, n, 1, GL_TRUE, retval);
         error = Success;
     }
@@ -2883,11 +3089,13 @@ int __glXDispSwap_AreTexturesResident(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_AreTexturesResidentEXT(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_AreTexturesResidentEXT(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
@@ -2895,12 +3103,14 @@ int __glXDispSwap_AreTexturesResidentEXT(__GLXclientState *cl, GLbyte *pc)
 
         GLboolean retval;
         GLboolean answerBuffer[200];
-        GLboolean * residences = __glXGetAnswerBuffer(cl, n, answerBuffer, sizeof(answerBuffer), 1);
-        retval = CALL_AreTexturesResident( GET_DISPATCH(), (
-            n,
-             (const GLuint *)bswap_32_array( (uint32_t *) (pc +  4), 0 ),
-            residences
-        ) );
+        GLboolean *residences =
+            __glXGetAnswerBuffer(cl, n, answerBuffer, sizeof(answerBuffer), 1);
+        retval =
+            CALL_AreTexturesResident(GET_DISPATCH(),
+                                     (n,
+                                      (const GLuint *)
+                                      bswap_32_array((uint32_t *) (pc + 4), 0),
+                                      residences));
         __glXSendReplySwap(cl->client, residences, n, 1, GL_TRUE, retval);
         error = Success;
     }
@@ -2908,10 +3118,10 @@ int __glXDispSwap_AreTexturesResidentEXT(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-void __glXDispSwap_CopyTexImage1D(GLbyte * pc)
+void
+__glXDispSwap_CopyTexImage1D(GLbyte * pc)
 {
-    CALL_CopyTexImage1D( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_CopyTexImage1D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLint   )bswap_CARD32 ( pc +  4 ),
          (GLenum  )bswap_ENUM   ( pc +  8 ),
          (GLint   )bswap_CARD32 ( pc + 12 ),
@@ -2921,10 +3131,10 @@ void __glXDispSwap_CopyTexImage1D(GLbyte * pc)
     ) );
 }
 
-void __glXDispSwap_CopyTexImage2D(GLbyte * pc)
+void
+__glXDispSwap_CopyTexImage2D(GLbyte * pc)
 {
-    CALL_CopyTexImage2D( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_CopyTexImage2D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLint   )bswap_CARD32 ( pc +  4 ),
          (GLenum  )bswap_ENUM   ( pc +  8 ),
          (GLint   )bswap_CARD32 ( pc + 12 ),
@@ -2935,10 +3145,10 @@ void __glXDispSwap_CopyTexImage2D(GLbyte * pc)
     ) );
 }
 
-void __glXDispSwap_CopyTexSubImage1D(GLbyte * pc)
+void
+__glXDispSwap_CopyTexSubImage1D(GLbyte * pc)
 {
-    CALL_CopyTexSubImage1D( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_CopyTexSubImage1D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLint   )bswap_CARD32 ( pc +  4 ),
          (GLint   )bswap_CARD32 ( pc +  8 ),
          (GLint   )bswap_CARD32 ( pc + 12 ),
@@ -2947,10 +3157,10 @@ void __glXDispSwap_CopyTexSubImage1D(GLbyte * pc)
     ) );
 }
 
-void __glXDispSwap_CopyTexSubImage2D(GLbyte * pc)
+void
+__glXDispSwap_CopyTexSubImage2D(GLbyte * pc)
 {
-    CALL_CopyTexSubImage2D( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_CopyTexSubImage2D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLint   )bswap_CARD32 ( pc +  4 ),
          (GLint   )bswap_CARD32 ( pc +  8 ),
          (GLint   )bswap_CARD32 ( pc + 12 ),
@@ -2961,19 +3171,22 @@ void __glXDispSwap_CopyTexSubImage2D(GLbyte * pc)
     ) );
 }
 
-int __glXDispSwap_DeleteTextures(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_DeleteTextures(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
         const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
 
-        CALL_DeleteTextures( GET_DISPATCH(), (
-            n,
-             (const GLuint *)bswap_32_array( (uint32_t *) (pc +  4), 0 )
+        CALL_DeleteTextures(GET_DISPATCH(), (n,
+                                             (const GLuint *)
+                                             bswap_32_array((uint32_t *) (pc +
+                                                                          4), 0)
         ) );
         error = Success;
     }
@@ -2981,19 +3194,22 @@ int __glXDispSwap_DeleteTextures(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_DeleteTexturesEXT(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_DeleteTexturesEXT(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
         const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
 
-        CALL_DeleteTextures( GET_DISPATCH(), (
-            n,
-             (const GLuint *)bswap_32_array( (uint32_t *) (pc +  4), 0 )
+        CALL_DeleteTextures(GET_DISPATCH(), (n,
+                                             (const GLuint *)
+                                             bswap_32_array((uint32_t *) (pc +
+                                                                          4), 0)
         ) );
         error = Success;
     }
@@ -3001,22 +3217,23 @@ int __glXDispSwap_DeleteTexturesEXT(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GenTextures(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GenTextures(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
         const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
 
         GLuint answerBuffer[200];
-        GLuint * textures = __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer), 4);
-        CALL_GenTextures( GET_DISPATCH(), (
-            n,
-            textures
-        ) );
+        GLuint *textures =
+            __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer),
+                                 4);
+        CALL_GenTextures(GET_DISPATCH(), (n, textures));
         (void) bswap_32_array( (uint32_t *) textures, n );
         __glXSendReplySwap(cl->client, textures, n, 4, GL_TRUE, 0);
         error = Success;
@@ -3025,22 +3242,23 @@ int __glXDispSwap_GenTextures(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GenTexturesEXT(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GenTexturesEXT(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
         const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
 
         GLuint answerBuffer[200];
-        GLuint * textures = __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer), 4);
-        CALL_GenTextures( GET_DISPATCH(), (
-            n,
-            textures
-        ) );
+        GLuint *textures =
+            __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer),
+                                 4);
+        CALL_GenTextures(GET_DISPATCH(), (n, textures));
         (void) bswap_32_array( (uint32_t *) textures, n );
         __glXSendReplySwap(cl->client, textures, n, 4, GL_TRUE, 0);
         error = Success;
@@ -3049,17 +3267,19 @@ int __glXDispSwap_GenTexturesEXT(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_IsTexture(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_IsTexture(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
         GLboolean retval;
-        retval = CALL_IsTexture( GET_DISPATCH(), (
-             (GLuint  )bswap_CARD32 ( pc +  0 )
+
+        retval = CALL_IsTexture(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0)
         ) );
         __glXSendReplySwap(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
         error = Success;
@@ -3068,17 +3288,19 @@ int __glXDispSwap_IsTexture(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_IsTextureEXT(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_IsTextureEXT(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
         GLboolean retval;
-        retval = CALL_IsTexture( GET_DISPATCH(), (
-             (GLuint  )bswap_CARD32 ( pc +  0 )
+
+        retval = CALL_IsTexture(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0)
         ) );
         __glXSendReplySwap(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
         error = Success;
@@ -3087,136 +3309,159 @@ int __glXDispSwap_IsTextureEXT(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-void __glXDispSwap_PrioritizeTextures(GLbyte * pc)
+void
+__glXDispSwap_PrioritizeTextures(GLbyte * pc)
 {
     const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
 
-    CALL_PrioritizeTextures( GET_DISPATCH(), (
-        n,
-         (const GLuint *)bswap_32_array( (uint32_t *) (pc +  4), 0 ),
-         (const GLclampf *)bswap_32_array( (uint32_t *) (pc +  4), 0 )
+    CALL_PrioritizeTextures(GET_DISPATCH(), (n,
+                                             (const GLuint *)
+                                             bswap_32_array((uint32_t *) (pc +
+                                                                          4),
+                                                            0),
+                                             (const GLclampf *)
+                                             bswap_32_array((uint32_t *) (pc +
+                                                                          4), 0)
     ) );
 }
 
-void __glXDispSwap_TexSubImage1D(GLbyte * pc)
+void
+__glXDispSwap_TexSubImage1D(GLbyte * pc)
 {
     const GLvoid * const pixels = (const GLvoid *) ((pc + 56));
     __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);
 
     CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
     CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) bswap_CARD32( & hdr->rowLength )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) bswap_CARD32( & hdr->skipRows )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) bswap_CARD32( & hdr->skipPixels )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) bswap_CARD32( & hdr->alignment )) );
-
-    CALL_TexSubImage1D( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc + 20 ),
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_ROW_LENGTH,
+                      (GLint) bswap_CARD32(&hdr->rowLength)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_ROWS,
+                      (GLint) bswap_CARD32(&hdr->skipRows)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_PIXELS,
+                      (GLint) bswap_CARD32(&hdr->skipPixels)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_ALIGNMENT,
+                      (GLint) bswap_CARD32(&hdr->alignment)));
+
+    CALL_TexSubImage1D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 20),
          (GLint   )bswap_CARD32 ( pc + 24 ),
          (GLint   )bswap_CARD32 ( pc + 28 ),
          (GLsizei )bswap_CARD32 ( pc + 36 ),
          (GLenum  )bswap_ENUM   ( pc + 44 ),
-         (GLenum  )bswap_ENUM   ( pc + 48 ),
-        pixels
-    ) );
+                                        (GLenum) bswap_ENUM(pc + 48), pixels));
 }
 
-void __glXDispSwap_TexSubImage2D(GLbyte * pc)
+void
+__glXDispSwap_TexSubImage2D(GLbyte * pc)
 {
     const GLvoid * const pixels = (const GLvoid *) ((pc + 56));
     __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);
 
     CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
     CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) bswap_CARD32( & hdr->rowLength )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) bswap_CARD32( & hdr->skipRows )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) bswap_CARD32( & hdr->skipPixels )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) bswap_CARD32( & hdr->alignment )) );
-
-    CALL_TexSubImage2D( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc + 20 ),
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_ROW_LENGTH,
+                      (GLint) bswap_CARD32(&hdr->rowLength)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_ROWS,
+                      (GLint) bswap_CARD32(&hdr->skipRows)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_PIXELS,
+                      (GLint) bswap_CARD32(&hdr->skipPixels)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_ALIGNMENT,
+                      (GLint) bswap_CARD32(&hdr->alignment)));
+
+    CALL_TexSubImage2D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 20),
          (GLint   )bswap_CARD32 ( pc + 24 ),
          (GLint   )bswap_CARD32 ( pc + 28 ),
          (GLint   )bswap_CARD32 ( pc + 32 ),
          (GLsizei )bswap_CARD32 ( pc + 36 ),
          (GLsizei )bswap_CARD32 ( pc + 40 ),
          (GLenum  )bswap_ENUM   ( pc + 44 ),
-         (GLenum  )bswap_ENUM   ( pc + 48 ),
-        pixels
-    ) );
+                                        (GLenum) bswap_ENUM(pc + 48), pixels));
 }
 
-void __glXDispSwap_BlendColor(GLbyte * pc)
+void
+__glXDispSwap_BlendColor(GLbyte * pc)
 {
-    CALL_BlendColor( GET_DISPATCH(), (
-         (GLclampf)bswap_FLOAT32( pc +  0 ),
+    CALL_BlendColor(GET_DISPATCH(), ((GLclampf) bswap_FLOAT32(pc + 0),
          (GLclampf)bswap_FLOAT32( pc +  4 ),
          (GLclampf)bswap_FLOAT32( pc +  8 ),
          (GLclampf)bswap_FLOAT32( pc + 12 )
     ) );
 }
 
-void __glXDispSwap_BlendEquation(GLbyte * pc)
+void
+__glXDispSwap_BlendEquation(GLbyte * pc)
 {
-    CALL_BlendEquation( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 )
+    CALL_BlendEquation(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
     ) );
 }
 
-void __glXDispSwap_ColorTable(GLbyte * pc)
+void
+__glXDispSwap_ColorTable(GLbyte * pc)
 {
     const GLvoid * const table = (const GLvoid *) ((pc + 40));
     __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);
 
     CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
     CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) bswap_CARD32( & hdr->rowLength )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) bswap_CARD32( & hdr->skipRows )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) bswap_CARD32( & hdr->skipPixels )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) bswap_CARD32( & hdr->alignment )) );
-
-    CALL_ColorTable( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc + 20 ),
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_ROW_LENGTH,
+                      (GLint) bswap_CARD32(&hdr->rowLength)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_ROWS,
+                      (GLint) bswap_CARD32(&hdr->skipRows)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_PIXELS,
+                      (GLint) bswap_CARD32(&hdr->skipPixels)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_ALIGNMENT,
+                      (GLint) bswap_CARD32(&hdr->alignment)));
+
+    CALL_ColorTable(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 20),
          (GLenum  )bswap_ENUM   ( pc + 24 ),
          (GLsizei )bswap_CARD32 ( pc + 28 ),
          (GLenum  )bswap_ENUM   ( pc + 32 ),
-         (GLenum  )bswap_ENUM   ( pc + 36 ),
-        table
-    ) );
+                                     (GLenum) bswap_ENUM(pc + 36), table));
 }
 
-void __glXDispSwap_ColorTableParameterfv(GLbyte * pc)
+void
+__glXDispSwap_ColorTableParameterfv(GLbyte * pc)
 {
     const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
     const GLfloat * params;
 
-    params = (const GLfloat *) bswap_32_array( (uint32_t *) (pc + 8), __glColorTableParameterfv_size(pname) );
+    params =
+        (const GLfloat *) bswap_32_array((uint32_t *) (pc + 8),
+                                         __glColorTableParameterfv_size(pname));
 
-    CALL_ColorTableParameterfv( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-        pname,
-        params
-    ) );
+    CALL_ColorTableParameterfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                                pname, params));
 }
 
-void __glXDispSwap_ColorTableParameteriv(GLbyte * pc)
+void
+__glXDispSwap_ColorTableParameteriv(GLbyte * pc)
 {
     const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
     const GLint * params;
 
-    params = (const GLint *) bswap_32_array( (uint32_t *) (pc + 8), __glColorTableParameteriv_size(pname) );
+    params =
+        (const GLint *) bswap_32_array((uint32_t *) (pc + 8),
+                                       __glColorTableParameteriv_size(pname));
 
-    CALL_ColorTableParameteriv( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-        pname,
-        params
-    ) );
+    CALL_ColorTableParameteriv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                                pname, params));
 }
 
-void __glXDispSwap_CopyColorTable(GLbyte * pc)
+void
+__glXDispSwap_CopyColorTable(GLbyte * pc)
 {
-    CALL_CopyColorTable( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_CopyColorTable(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 ),
          (GLint   )bswap_CARD32 ( pc +  8 ),
          (GLint   )bswap_CARD32 ( pc + 12 ),
@@ -3224,11 +3469,13 @@ void __glXDispSwap_CopyColorTable(GLbyte * pc)
     ) );
 }
 
-int __glXDispSwap_GetColorTableParameterfv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetColorTableParameterfv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -3236,16 +3483,17 @@ int __glXDispSwap_GetColorTableParameterfv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetColorTableParameterfv_size(pname);
         GLfloat answerBuffer[200];
-        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLfloat *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetColorTableParameterfv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetColorTableParameterfv(GET_DISPATCH(), ((GLenum)
+                                                       bswap_ENUM(pc + 0),
+                                                       pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -3254,11 +3502,13 @@ int __glXDispSwap_GetColorTableParameterfv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetColorTableParameterfvSGI(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetColorTableParameterfvSGI(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
@@ -3266,16 +3516,17 @@ int __glXDispSwap_GetColorTableParameterfvSGI(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetColorTableParameterfv_size(pname);
         GLfloat answerBuffer[200];
-        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLfloat *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetColorTableParameterfv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetColorTableParameterfv(GET_DISPATCH(), ((GLenum)
+                                                       bswap_ENUM(pc + 0),
+                                                       pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -3284,11 +3535,13 @@ int __glXDispSwap_GetColorTableParameterfvSGI(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetColorTableParameteriv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetColorTableParameteriv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -3296,16 +3549,17 @@ int __glXDispSwap_GetColorTableParameteriv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetColorTableParameteriv_size(pname);
         GLint answerBuffer[200];
-        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLint *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetColorTableParameteriv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetColorTableParameteriv(GET_DISPATCH(), ((GLenum)
+                                                       bswap_ENUM(pc + 0),
+                                                       pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -3314,11 +3568,13 @@ int __glXDispSwap_GetColorTableParameteriv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetColorTableParameterivSGI(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetColorTableParameterivSGI(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
@@ -3326,16 +3582,17 @@ int __glXDispSwap_GetColorTableParameterivSGI(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetColorTableParameteriv_size(pname);
         GLint answerBuffer[200];
-        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLint *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetColorTableParameteriv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetColorTableParameteriv(GET_DISPATCH(), ((GLenum)
+                                                       bswap_ENUM(pc + 0),
+                                                       pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -3344,32 +3601,38 @@ int __glXDispSwap_GetColorTableParameterivSGI(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-void __glXDispSwap_ColorSubTable(GLbyte * pc)
+void
+__glXDispSwap_ColorSubTable(GLbyte * pc)
 {
     const GLvoid * const data = (const GLvoid *) ((pc + 40));
     __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);
 
     CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
     CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) bswap_CARD32( & hdr->rowLength )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) bswap_CARD32( & hdr->skipRows )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) bswap_CARD32( & hdr->skipPixels )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) bswap_CARD32( & hdr->alignment )) );
-
-    CALL_ColorSubTable( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc + 20 ),
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_ROW_LENGTH,
+                      (GLint) bswap_CARD32(&hdr->rowLength)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_ROWS,
+                      (GLint) bswap_CARD32(&hdr->skipRows)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_PIXELS,
+                      (GLint) bswap_CARD32(&hdr->skipPixels)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_ALIGNMENT,
+                      (GLint) bswap_CARD32(&hdr->alignment)));
+
+    CALL_ColorSubTable(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 20),
          (GLsizei )bswap_CARD32 ( pc + 24 ),
          (GLsizei )bswap_CARD32 ( pc + 28 ),
          (GLenum  )bswap_ENUM   ( pc + 32 ),
-         (GLenum  )bswap_ENUM   ( pc + 36 ),
-        data
-    ) );
+                                        (GLenum) bswap_ENUM(pc + 36), data));
 }
 
-void __glXDispSwap_CopyColorSubTable(GLbyte * pc)
+void
+__glXDispSwap_CopyColorSubTable(GLbyte * pc)
 {
-    CALL_CopyColorSubTable( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_CopyColorSubTable(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLsizei )bswap_CARD32 ( pc +  4 ),
          (GLint   )bswap_CARD32 ( pc +  8 ),
          (GLint   )bswap_CARD32 ( pc + 12 ),
@@ -3377,125 +3640,145 @@ void __glXDispSwap_CopyColorSubTable(GLbyte * pc)
     ) );
 }
 
-void __glXDispSwap_ConvolutionFilter1D(GLbyte * pc)
+void
+__glXDispSwap_ConvolutionFilter1D(GLbyte * pc)
 {
     const GLvoid * const image = (const GLvoid *) ((pc + 44));
     __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);
 
     CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
     CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) bswap_CARD32( & hdr->rowLength )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) bswap_CARD32( & hdr->skipRows )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) bswap_CARD32( & hdr->skipPixels )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) bswap_CARD32( & hdr->alignment )) );
-
-    CALL_ConvolutionFilter1D( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc + 20 ),
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_ROW_LENGTH,
+                      (GLint) bswap_CARD32(&hdr->rowLength)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_ROWS,
+                      (GLint) bswap_CARD32(&hdr->skipRows)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_PIXELS,
+                      (GLint) bswap_CARD32(&hdr->skipPixels)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_ALIGNMENT,
+                      (GLint) bswap_CARD32(&hdr->alignment)));
+
+    CALL_ConvolutionFilter1D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 20),
          (GLenum  )bswap_ENUM   ( pc + 24 ),
          (GLsizei )bswap_CARD32 ( pc + 28 ),
          (GLenum  )bswap_ENUM   ( pc + 36 ),
          (GLenum  )bswap_ENUM   ( pc + 40 ),
-        image
-    ) );
+                                              image));
 }
 
-void __glXDispSwap_ConvolutionFilter2D(GLbyte * pc)
+void
+__glXDispSwap_ConvolutionFilter2D(GLbyte * pc)
 {
     const GLvoid * const image = (const GLvoid *) ((pc + 44));
     __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);
 
     CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
     CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) bswap_CARD32( & hdr->rowLength )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) bswap_CARD32( & hdr->skipRows )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) bswap_CARD32( & hdr->skipPixels )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) bswap_CARD32( & hdr->alignment )) );
-
-    CALL_ConvolutionFilter2D( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc + 20 ),
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_ROW_LENGTH,
+                      (GLint) bswap_CARD32(&hdr->rowLength)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_ROWS,
+                      (GLint) bswap_CARD32(&hdr->skipRows)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_PIXELS,
+                      (GLint) bswap_CARD32(&hdr->skipPixels)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_ALIGNMENT,
+                      (GLint) bswap_CARD32(&hdr->alignment)));
+
+    CALL_ConvolutionFilter2D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 20),
          (GLenum  )bswap_ENUM   ( pc + 24 ),
          (GLsizei )bswap_CARD32 ( pc + 28 ),
          (GLsizei )bswap_CARD32 ( pc + 32 ),
          (GLenum  )bswap_ENUM   ( pc + 36 ),
          (GLenum  )bswap_ENUM   ( pc + 40 ),
-        image
-    ) );
+                                              image));
 }
 
-void __glXDispSwap_ConvolutionParameterf(GLbyte * pc)
+void
+__glXDispSwap_ConvolutionParameterf(GLbyte * pc)
 {
-    CALL_ConvolutionParameterf( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_ConvolutionParameterf(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 ),
          (GLfloat )bswap_FLOAT32( pc +  8 )
     ) );
 }
 
-void __glXDispSwap_ConvolutionParameterfv(GLbyte * pc)
+void
+__glXDispSwap_ConvolutionParameterfv(GLbyte * pc)
 {
     const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
     const GLfloat * params;
 
-    params = (const GLfloat *) bswap_32_array( (uint32_t *) (pc + 8), __glConvolutionParameterfv_size(pname) );
+    params =
+        (const GLfloat *) bswap_32_array((uint32_t *) (pc + 8),
+                                         __glConvolutionParameterfv_size
+                                         (pname));
 
-    CALL_ConvolutionParameterfv( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-        pname,
-        params
-    ) );
+    CALL_ConvolutionParameterfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                                 pname, params));
 }
 
-void __glXDispSwap_ConvolutionParameteri(GLbyte * pc)
+void
+__glXDispSwap_ConvolutionParameteri(GLbyte * pc)
 {
-    CALL_ConvolutionParameteri( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_ConvolutionParameteri(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 ),
          (GLint   )bswap_CARD32 ( pc +  8 )
     ) );
 }
 
-void __glXDispSwap_ConvolutionParameteriv(GLbyte * pc)
+void
+__glXDispSwap_ConvolutionParameteriv(GLbyte * pc)
 {
     const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
     const GLint * params;
 
-    params = (const GLint *) bswap_32_array( (uint32_t *) (pc + 8), __glConvolutionParameteriv_size(pname) );
+    params =
+        (const GLint *) bswap_32_array((uint32_t *) (pc + 8),
+                                       __glConvolutionParameteriv_size(pname));
 
-    CALL_ConvolutionParameteriv( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-        pname,
-        params
-    ) );
+    CALL_ConvolutionParameteriv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                                 pname, params));
 }
 
-void __glXDispSwap_CopyConvolutionFilter1D(GLbyte * pc)
+void
+__glXDispSwap_CopyConvolutionFilter1D(GLbyte * pc)
 {
-    CALL_CopyConvolutionFilter1D( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_CopyConvolutionFilter1D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 ),
          (GLint   )bswap_CARD32 ( pc +  8 ),
          (GLint   )bswap_CARD32 ( pc + 12 ),
-         (GLsizei )bswap_CARD32 ( pc + 16 )
+                                                  (GLsizei) bswap_CARD32(pc +
+                                                                         16)
     ) );
 }
 
-void __glXDispSwap_CopyConvolutionFilter2D(GLbyte * pc)
+void
+__glXDispSwap_CopyConvolutionFilter2D(GLbyte * pc)
 {
-    CALL_CopyConvolutionFilter2D( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_CopyConvolutionFilter2D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 ),
          (GLint   )bswap_CARD32 ( pc +  8 ),
          (GLint   )bswap_CARD32 ( pc + 12 ),
-         (GLsizei )bswap_CARD32 ( pc + 16 ),
-         (GLsizei )bswap_CARD32 ( pc + 20 )
+                                                  (GLsizei) bswap_CARD32(pc +
+                                                                         16),
+                                                  (GLsizei) bswap_CARD32(pc +
+                                                                         20)
     ) );
 }
 
-int __glXDispSwap_GetConvolutionParameterfv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetConvolutionParameterfv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -3503,16 +3786,17 @@ int __glXDispSwap_GetConvolutionParameterfv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetConvolutionParameterfv_size(pname);
         GLfloat answerBuffer[200];
-        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLfloat *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetConvolutionParameterfv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetConvolutionParameterfv(GET_DISPATCH(), ((GLenum)
+                                                        bswap_ENUM(pc + 0),
+                                                        pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -3521,11 +3805,13 @@ int __glXDispSwap_GetConvolutionParameterfv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetConvolutionParameterfvEXT(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetConvolutionParameterfvEXT(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
@@ -3533,16 +3819,17 @@ int __glXDispSwap_GetConvolutionParameterfvEXT(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetConvolutionParameterfv_size(pname);
         GLfloat answerBuffer[200];
-        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLfloat *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetConvolutionParameterfv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetConvolutionParameterfv(GET_DISPATCH(), ((GLenum)
+                                                        bswap_ENUM(pc + 0),
+                                                        pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -3551,11 +3838,13 @@ int __glXDispSwap_GetConvolutionParameterfvEXT(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetConvolutionParameteriv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetConvolutionParameteriv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -3563,16 +3852,17 @@ int __glXDispSwap_GetConvolutionParameteriv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetConvolutionParameteriv_size(pname);
         GLint answerBuffer[200];
-        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLint *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetConvolutionParameteriv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetConvolutionParameteriv(GET_DISPATCH(), ((GLenum)
+                                                        bswap_ENUM(pc + 0),
+                                                        pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -3581,11 +3871,13 @@ int __glXDispSwap_GetConvolutionParameteriv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetConvolutionParameterivEXT(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetConvolutionParameterivEXT(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
@@ -3593,16 +3885,17 @@ int __glXDispSwap_GetConvolutionParameterivEXT(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetConvolutionParameteriv_size(pname);
         GLint answerBuffer[200];
-        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLint *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetConvolutionParameteriv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetConvolutionParameteriv(GET_DISPATCH(), ((GLenum)
+                                                        bswap_ENUM(pc + 0),
+                                                        pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -3611,11 +3904,13 @@ int __glXDispSwap_GetConvolutionParameterivEXT(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetHistogramParameterfv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetHistogramParameterfv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -3623,16 +3918,17 @@ int __glXDispSwap_GetHistogramParameterfv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetHistogramParameterfv_size(pname);
         GLfloat answerBuffer[200];
-        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLfloat *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetHistogramParameterfv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetHistogramParameterfv(GET_DISPATCH(), ((GLenum)
+                                                      bswap_ENUM(pc + 0), pname,
+                                                      params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -3641,11 +3937,13 @@ int __glXDispSwap_GetHistogramParameterfv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetHistogramParameterfvEXT(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetHistogramParameterfvEXT(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
@@ -3653,16 +3951,17 @@ int __glXDispSwap_GetHistogramParameterfvEXT(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetHistogramParameterfv_size(pname);
         GLfloat answerBuffer[200];
-        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLfloat *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetHistogramParameterfv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetHistogramParameterfv(GET_DISPATCH(), ((GLenum)
+                                                      bswap_ENUM(pc + 0), pname,
+                                                      params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -3671,11 +3970,13 @@ int __glXDispSwap_GetHistogramParameterfvEXT(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetHistogramParameteriv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetHistogramParameteriv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -3683,16 +3984,17 @@ int __glXDispSwap_GetHistogramParameteriv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetHistogramParameteriv_size(pname);
         GLint answerBuffer[200];
-        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLint *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetHistogramParameteriv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetHistogramParameteriv(GET_DISPATCH(), ((GLenum)
+                                                      bswap_ENUM(pc + 0), pname,
+                                                      params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -3701,11 +4003,13 @@ int __glXDispSwap_GetHistogramParameteriv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetHistogramParameterivEXT(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetHistogramParameterivEXT(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
@@ -3713,16 +4017,17 @@ int __glXDispSwap_GetHistogramParameterivEXT(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetHistogramParameteriv_size(pname);
         GLint answerBuffer[200];
-        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLint *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetHistogramParameteriv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetHistogramParameteriv(GET_DISPATCH(), ((GLenum)
+                                                      bswap_ENUM(pc + 0), pname,
+                                                      params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -3731,11 +4036,13 @@ int __glXDispSwap_GetHistogramParameterivEXT(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetMinmaxParameterfv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetMinmaxParameterfv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -3743,16 +4050,16 @@ int __glXDispSwap_GetMinmaxParameterfv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetMinmaxParameterfv_size(pname);
         GLfloat answerBuffer[200];
-        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLfloat *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetMinmaxParameterfv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetMinmaxParameterfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                                   pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -3761,11 +4068,13 @@ int __glXDispSwap_GetMinmaxParameterfv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetMinmaxParameterfvEXT(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetMinmaxParameterfvEXT(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
@@ -3773,16 +4082,16 @@ int __glXDispSwap_GetMinmaxParameterfvEXT(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetMinmaxParameterfv_size(pname);
         GLfloat answerBuffer[200];
-        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLfloat *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetMinmaxParameterfv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetMinmaxParameterfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                                   pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -3791,11 +4100,13 @@ int __glXDispSwap_GetMinmaxParameterfvEXT(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetMinmaxParameteriv(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetMinmaxParameteriv(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -3803,16 +4114,16 @@ int __glXDispSwap_GetMinmaxParameteriv(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetMinmaxParameteriv_size(pname);
         GLint answerBuffer[200];
-        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLint *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetMinmaxParameteriv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetMinmaxParameteriv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                                   pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -3821,11 +4132,13 @@ int __glXDispSwap_GetMinmaxParameteriv(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetMinmaxParameterivEXT(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetMinmaxParameterivEXT(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
@@ -3833,16 +4146,16 @@ int __glXDispSwap_GetMinmaxParameterivEXT(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetMinmaxParameteriv_size(pname);
         GLint answerBuffer[200];
-        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLint *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetMinmaxParameteriv( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetMinmaxParameteriv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                                   pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -3851,56 +4164,69 @@ int __glXDispSwap_GetMinmaxParameterivEXT(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-void __glXDispSwap_Histogram(GLbyte * pc)
+void
+__glXDispSwap_Histogram(GLbyte * pc)
 {
-    CALL_Histogram( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_Histogram(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLsizei )bswap_CARD32 ( pc +  4 ),
          (GLenum  )bswap_ENUM   ( pc +  8 ),
         *(GLboolean *)(pc + 12)
     ) );
 }
 
-void __glXDispSwap_Minmax(GLbyte * pc)
+void
+__glXDispSwap_Minmax(GLbyte * pc)
 {
-    CALL_Minmax( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_Minmax(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 ),
         *(GLboolean *)(pc +  8)
     ) );
 }
 
-void __glXDispSwap_ResetHistogram(GLbyte * pc)
+void
+__glXDispSwap_ResetHistogram(GLbyte * pc)
 {
-    CALL_ResetHistogram( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 )
+    CALL_ResetHistogram(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
     ) );
 }
 
-void __glXDispSwap_ResetMinmax(GLbyte * pc)
+void
+__glXDispSwap_ResetMinmax(GLbyte * pc)
 {
-    CALL_ResetMinmax( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 )
+    CALL_ResetMinmax(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
     ) );
 }
 
-void __glXDispSwap_TexImage3D(GLbyte * pc)
+void
+__glXDispSwap_TexImage3D(GLbyte * pc)
 {
     const CARD32 ptr_is_null = *(CARD32 *)(pc + 76);
-    const GLvoid * const pixels = (const GLvoid *) ((ptr_is_null != 0) ? NULL : (pc + 80));
+    const GLvoid *const pixels =
+        (const GLvoid *) ((ptr_is_null != 0) ? NULL : (pc + 80));
     __GLXpixel3DHeader * const hdr = (__GLXpixel3DHeader *)(pc);
 
     CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
     CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) bswap_CARD32( & hdr->rowLength )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_IMAGE_HEIGHT, (GLint) bswap_CARD32( & hdr->imageHeight )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) bswap_CARD32( & hdr->skipRows )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_IMAGES,  (GLint) bswap_CARD32( & hdr->skipImages )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) bswap_CARD32( & hdr->skipPixels )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) bswap_CARD32( & hdr->alignment )) );
-
-    CALL_TexImage3D( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc + 36 ),
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_ROW_LENGTH,
+                      (GLint) bswap_CARD32(&hdr->rowLength)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_IMAGE_HEIGHT,
+                      (GLint) bswap_CARD32(&hdr->imageHeight)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_ROWS,
+                      (GLint) bswap_CARD32(&hdr->skipRows)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_IMAGES,
+                      (GLint) bswap_CARD32(&hdr->skipImages)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_PIXELS,
+                      (GLint) bswap_CARD32(&hdr->skipPixels)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_ALIGNMENT,
+                      (GLint) bswap_CARD32(&hdr->alignment)));
+
+    CALL_TexImage3D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 36),
          (GLint   )bswap_CARD32 ( pc + 40 ),
          (GLint   )bswap_CARD32 ( pc + 44 ),
          (GLsizei )bswap_CARD32 ( pc + 48 ),
@@ -3908,27 +4234,37 @@ void __glXDispSwap_TexImage3D(GLbyte * pc)
          (GLsizei )bswap_CARD32 ( pc + 56 ),
          (GLint   )bswap_CARD32 ( pc + 64 ),
          (GLenum  )bswap_ENUM   ( pc + 68 ),
-         (GLenum  )bswap_ENUM   ( pc + 72 ),
-        pixels
-    ) );
+                                     (GLenum) bswap_ENUM(pc + 72), pixels));
 }
 
-void __glXDispSwap_TexSubImage3D(GLbyte * pc)
+void
+__glXDispSwap_TexSubImage3D(GLbyte * pc)
 {
     const GLvoid * const pixels = (const GLvoid *) ((pc + 88));
     __GLXpixel3DHeader * const hdr = (__GLXpixel3DHeader *)(pc);
 
     CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
     CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) bswap_CARD32( & hdr->rowLength )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_IMAGE_HEIGHT, (GLint) bswap_CARD32( & hdr->imageHeight )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) bswap_CARD32( & hdr->skipRows )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_IMAGES,  (GLint) bswap_CARD32( & hdr->skipImages )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) bswap_CARD32( & hdr->skipPixels )) );
-    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) bswap_CARD32( & hdr->alignment )) );
-
-    CALL_TexSubImage3D( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc + 36 ),
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_ROW_LENGTH,
+                      (GLint) bswap_CARD32(&hdr->rowLength)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_IMAGE_HEIGHT,
+                      (GLint) bswap_CARD32(&hdr->imageHeight)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_ROWS,
+                      (GLint) bswap_CARD32(&hdr->skipRows)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_IMAGES,
+                      (GLint) bswap_CARD32(&hdr->skipImages)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_SKIP_PIXELS,
+                      (GLint) bswap_CARD32(&hdr->skipPixels)));
+    CALL_PixelStorei(GET_DISPATCH(),
+                     (GL_UNPACK_ALIGNMENT,
+                      (GLint) bswap_CARD32(&hdr->alignment)));
+
+    CALL_TexSubImage3D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 36),
          (GLint   )bswap_CARD32 ( pc + 40 ),
          (GLint   )bswap_CARD32 ( pc + 44 ),
          (GLint   )bswap_CARD32 ( pc + 48 ),
@@ -3937,15 +4273,13 @@ void __glXDispSwap_TexSubImage3D(GLbyte * pc)
          (GLsizei )bswap_CARD32 ( pc + 64 ),
          (GLsizei )bswap_CARD32 ( pc + 68 ),
          (GLenum  )bswap_ENUM   ( pc + 76 ),
-         (GLenum  )bswap_ENUM   ( pc + 80 ),
-        pixels
-    ) );
+                                        (GLenum) bswap_ENUM(pc + 80), pixels));
 }
 
-void __glXDispSwap_CopyTexSubImage3D(GLbyte * pc)
+void
+__glXDispSwap_CopyTexSubImage3D(GLbyte * pc)
 {
-    CALL_CopyTexSubImage3D( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_CopyTexSubImage3D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLint   )bswap_CARD32 ( pc +  4 ),
          (GLint   )bswap_CARD32 ( pc +  8 ),
          (GLint   )bswap_CARD32 ( pc + 12 ),
@@ -3957,14 +4291,15 @@ void __glXDispSwap_CopyTexSubImage3D(GLbyte * pc)
     ) );
 }
 
-void __glXDispSwap_ActiveTextureARB(GLbyte * pc)
+void
+__glXDispSwap_ActiveTextureARB(GLbyte * pc)
 {
-    CALL_ActiveTextureARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 )
+    CALL_ActiveTextureARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
     ) );
 }
 
-void __glXDispSwap_MultiTexCoord1dvARB(GLbyte * pc)
+void
+__glXDispSwap_MultiTexCoord1dvARB(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -3973,37 +4308,49 @@ void __glXDispSwap_MultiTexCoord1dvARB(GLbyte * pc)
     }
 #endif
 
-    CALL_MultiTexCoord1dvARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  8 ),
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 1 )
+    CALL_MultiTexCoord1dvARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 8),
+                                              (const GLdouble *)
+                                              bswap_64_array((uint64_t *) (pc +
+                                                                           0),
+                                                             1)
     ) );
 }
 
-void __glXDispSwap_MultiTexCoord1fvARB(GLbyte * pc)
+void
+__glXDispSwap_MultiTexCoord1fvARB(GLbyte * pc)
 {
-    CALL_MultiTexCoord1fvARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  4), 1 )
+    CALL_MultiTexCoord1fvARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                              (const GLfloat *)
+                                              bswap_32_array((uint32_t *) (pc +
+                                                                           4),
+                                                             1)
     ) );
 }
 
-void __glXDispSwap_MultiTexCoord1ivARB(GLbyte * pc)
+void
+__glXDispSwap_MultiTexCoord1ivARB(GLbyte * pc)
 {
-    CALL_MultiTexCoord1ivARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-         (const GLint *)bswap_32_array( (uint32_t *) (pc +  4), 1 )
+    CALL_MultiTexCoord1ivARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                              (const GLint *)
+                                              bswap_32_array((uint32_t *) (pc +
+                                                                           4),
+                                                             1)
     ) );
 }
 
-void __glXDispSwap_MultiTexCoord1svARB(GLbyte * pc)
+void
+__glXDispSwap_MultiTexCoord1svARB(GLbyte * pc)
 {
-    CALL_MultiTexCoord1svARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 1 )
+    CALL_MultiTexCoord1svARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                              (const GLshort *)
+                                              bswap_16_array((uint16_t *) (pc +
+                                                                           4),
+                                                             1)
     ) );
 }
 
-void __glXDispSwap_MultiTexCoord2dvARB(GLbyte * pc)
+void
+__glXDispSwap_MultiTexCoord2dvARB(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -4012,37 +4359,49 @@ void __glXDispSwap_MultiTexCoord2dvARB(GLbyte * pc)
     }
 #endif
 
-    CALL_MultiTexCoord2dvARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc + 16 ),
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 2 )
+    CALL_MultiTexCoord2dvARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 16),
+                                              (const GLdouble *)
+                                              bswap_64_array((uint64_t *) (pc +
+                                                                           0),
+                                                             2)
     ) );
 }
 
-void __glXDispSwap_MultiTexCoord2fvARB(GLbyte * pc)
+void
+__glXDispSwap_MultiTexCoord2fvARB(GLbyte * pc)
 {
-    CALL_MultiTexCoord2fvARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  4), 2 )
+    CALL_MultiTexCoord2fvARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                              (const GLfloat *)
+                                              bswap_32_array((uint32_t *) (pc +
+                                                                           4),
+                                                             2)
     ) );
 }
 
-void __glXDispSwap_MultiTexCoord2ivARB(GLbyte * pc)
+void
+__glXDispSwap_MultiTexCoord2ivARB(GLbyte * pc)
 {
-    CALL_MultiTexCoord2ivARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-         (const GLint *)bswap_32_array( (uint32_t *) (pc +  4), 2 )
+    CALL_MultiTexCoord2ivARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                              (const GLint *)
+                                              bswap_32_array((uint32_t *) (pc +
+                                                                           4),
+                                                             2)
     ) );
 }
 
-void __glXDispSwap_MultiTexCoord2svARB(GLbyte * pc)
+void
+__glXDispSwap_MultiTexCoord2svARB(GLbyte * pc)
 {
-    CALL_MultiTexCoord2svARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 2 )
+    CALL_MultiTexCoord2svARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                              (const GLshort *)
+                                              bswap_16_array((uint16_t *) (pc +
+                                                                           4),
+                                                             2)
     ) );
 }
 
-void __glXDispSwap_MultiTexCoord3dvARB(GLbyte * pc)
+void
+__glXDispSwap_MultiTexCoord3dvARB(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -4051,37 +4410,49 @@ void __glXDispSwap_MultiTexCoord3dvARB(GLbyte * pc)
     }
 #endif
 
-    CALL_MultiTexCoord3dvARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc + 24 ),
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 3 )
+    CALL_MultiTexCoord3dvARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 24),
+                                              (const GLdouble *)
+                                              bswap_64_array((uint64_t *) (pc +
+                                                                           0),
+                                                             3)
     ) );
 }
 
-void __glXDispSwap_MultiTexCoord3fvARB(GLbyte * pc)
+void
+__glXDispSwap_MultiTexCoord3fvARB(GLbyte * pc)
 {
-    CALL_MultiTexCoord3fvARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  4), 3 )
+    CALL_MultiTexCoord3fvARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                              (const GLfloat *)
+                                              bswap_32_array((uint32_t *) (pc +
+                                                                           4),
+                                                             3)
     ) );
 }
 
-void __glXDispSwap_MultiTexCoord3ivARB(GLbyte * pc)
+void
+__glXDispSwap_MultiTexCoord3ivARB(GLbyte * pc)
 {
-    CALL_MultiTexCoord3ivARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-         (const GLint *)bswap_32_array( (uint32_t *) (pc +  4), 3 )
+    CALL_MultiTexCoord3ivARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                              (const GLint *)
+                                              bswap_32_array((uint32_t *) (pc +
+                                                                           4),
+                                                             3)
     ) );
 }
 
-void __glXDispSwap_MultiTexCoord3svARB(GLbyte * pc)
+void
+__glXDispSwap_MultiTexCoord3svARB(GLbyte * pc)
 {
-    CALL_MultiTexCoord3svARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 3 )
+    CALL_MultiTexCoord3svARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                              (const GLshort *)
+                                              bswap_16_array((uint16_t *) (pc +
+                                                                           4),
+                                                             3)
     ) );
 }
 
-void __glXDispSwap_MultiTexCoord4dvARB(GLbyte * pc)
+void
+__glXDispSwap_MultiTexCoord4dvARB(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -4090,157 +4461,198 @@ void __glXDispSwap_MultiTexCoord4dvARB(GLbyte * pc)
     }
 #endif
 
-    CALL_MultiTexCoord4dvARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc + 32 ),
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 4 )
+    CALL_MultiTexCoord4dvARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 32),
+                                              (const GLdouble *)
+                                              bswap_64_array((uint64_t *) (pc +
+                                                                           0),
+                                                             4)
     ) );
 }
 
-void __glXDispSwap_MultiTexCoord4fvARB(GLbyte * pc)
+void
+__glXDispSwap_MultiTexCoord4fvARB(GLbyte * pc)
 {
-    CALL_MultiTexCoord4fvARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  4), 4 )
+    CALL_MultiTexCoord4fvARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                              (const GLfloat *)
+                                              bswap_32_array((uint32_t *) (pc +
+                                                                           4),
+                                                             4)
     ) );
 }
 
-void __glXDispSwap_MultiTexCoord4ivARB(GLbyte * pc)
+void
+__glXDispSwap_MultiTexCoord4ivARB(GLbyte * pc)
 {
-    CALL_MultiTexCoord4ivARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-         (const GLint *)bswap_32_array( (uint32_t *) (pc +  4), 4 )
+    CALL_MultiTexCoord4ivARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                              (const GLint *)
+                                              bswap_32_array((uint32_t *) (pc +
+                                                                           4),
+                                                             4)
     ) );
 }
 
-void __glXDispSwap_MultiTexCoord4svARB(GLbyte * pc)
+void
+__glXDispSwap_MultiTexCoord4svARB(GLbyte * pc)
 {
-    CALL_MultiTexCoord4svARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 4 )
+    CALL_MultiTexCoord4svARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                              (const GLshort *)
+                                              bswap_16_array((uint16_t *) (pc +
+                                                                           4),
+                                                             4)
     ) );
 }
 
-void __glXDispSwap_SampleCoverageARB(GLbyte * pc)
+void
+__glXDispSwap_SampleCoverageARB(GLbyte * pc)
 {
-    CALL_SampleCoverageARB( GET_DISPATCH(), (
-         (GLclampf)bswap_FLOAT32( pc +  0 ),
+    CALL_SampleCoverageARB(GET_DISPATCH(), ((GLclampf) bswap_FLOAT32(pc + 0),
         *(GLboolean *)(pc +  4)
     ) );
 }
 
-void __glXDispSwap_CompressedTexImage1DARB(GLbyte * pc)
+void
+__glXDispSwap_CompressedTexImage1DARB(GLbyte * pc)
 {
     const GLsizei imageSize =  (GLsizei )bswap_CARD32 ( pc + 20 );
 
-    CALL_CompressedTexImage1DARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_CompressedTexImage1DARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLint   )bswap_CARD32 ( pc +  4 ),
          (GLenum  )bswap_ENUM   ( pc +  8 ),
-         (GLsizei )bswap_CARD32 ( pc + 12 ),
+                                                  (GLsizei) bswap_CARD32(pc +
+                                                                         12),
          (GLint   )bswap_CARD32 ( pc + 16 ),
         imageSize,
          (const GLvoid *)(pc + 24)
     ) );
 }
 
-void __glXDispSwap_CompressedTexImage2DARB(GLbyte * pc)
+void
+__glXDispSwap_CompressedTexImage2DARB(GLbyte * pc)
 {
     const GLsizei imageSize =  (GLsizei )bswap_CARD32 ( pc + 24 );
 
-    CALL_CompressedTexImage2DARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_CompressedTexImage2DARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLint   )bswap_CARD32 ( pc +  4 ),
          (GLenum  )bswap_ENUM   ( pc +  8 ),
-         (GLsizei )bswap_CARD32 ( pc + 12 ),
-         (GLsizei )bswap_CARD32 ( pc + 16 ),
+                                                  (GLsizei) bswap_CARD32(pc +
+                                                                         12),
+                                                  (GLsizei) bswap_CARD32(pc +
+                                                                         16),
          (GLint   )bswap_CARD32 ( pc + 20 ),
         imageSize,
          (const GLvoid *)(pc + 28)
     ) );
 }
 
-void __glXDispSwap_CompressedTexImage3DARB(GLbyte * pc)
+void
+__glXDispSwap_CompressedTexImage3DARB(GLbyte * pc)
 {
     const GLsizei imageSize =  (GLsizei )bswap_CARD32 ( pc + 28 );
 
-    CALL_CompressedTexImage3DARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_CompressedTexImage3DARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLint   )bswap_CARD32 ( pc +  4 ),
          (GLenum  )bswap_ENUM   ( pc +  8 ),
-         (GLsizei )bswap_CARD32 ( pc + 12 ),
-         (GLsizei )bswap_CARD32 ( pc + 16 ),
-         (GLsizei )bswap_CARD32 ( pc + 20 ),
+                                                  (GLsizei) bswap_CARD32(pc +
+                                                                         12),
+                                                  (GLsizei) bswap_CARD32(pc +
+                                                                         16),
+                                                  (GLsizei) bswap_CARD32(pc +
+                                                                         20),
          (GLint   )bswap_CARD32 ( pc + 24 ),
         imageSize,
          (const GLvoid *)(pc + 32)
     ) );
 }
 
-void __glXDispSwap_CompressedTexSubImage1DARB(GLbyte * pc)
+void
+__glXDispSwap_CompressedTexSubImage1DARB(GLbyte * pc)
 {
     const GLsizei imageSize =  (GLsizei )bswap_CARD32 ( pc + 20 );
 
-    CALL_CompressedTexSubImage1DARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-         (GLint   )bswap_CARD32 ( pc +  4 ),
-         (GLint   )bswap_CARD32 ( pc +  8 ),
-         (GLsizei )bswap_CARD32 ( pc + 12 ),
-         (GLenum  )bswap_ENUM   ( pc + 16 ),
+    CALL_CompressedTexSubImage1DARB(GET_DISPATCH(), ((GLenum)
+                                                     bswap_ENUM(pc + 0),
+                                                     (GLint) bswap_CARD32(pc +
+                                                                          4),
+                                                     (GLint) bswap_CARD32(pc +
+                                                                          8),
+                                                     (GLsizei) bswap_CARD32(pc +
+                                                                            12),
+                                                     (GLenum) bswap_ENUM(pc +
+                                                                         16),
         imageSize,
          (const GLvoid *)(pc + 24)
     ) );
 }
 
-void __glXDispSwap_CompressedTexSubImage2DARB(GLbyte * pc)
+void
+__glXDispSwap_CompressedTexSubImage2DARB(GLbyte * pc)
 {
     const GLsizei imageSize =  (GLsizei )bswap_CARD32 ( pc + 28 );
 
-    CALL_CompressedTexSubImage2DARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-         (GLint   )bswap_CARD32 ( pc +  4 ),
-         (GLint   )bswap_CARD32 ( pc +  8 ),
-         (GLint   )bswap_CARD32 ( pc + 12 ),
-         (GLsizei )bswap_CARD32 ( pc + 16 ),
-         (GLsizei )bswap_CARD32 ( pc + 20 ),
-         (GLenum  )bswap_ENUM   ( pc + 24 ),
+    CALL_CompressedTexSubImage2DARB(GET_DISPATCH(), ((GLenum)
+                                                     bswap_ENUM(pc + 0),
+                                                     (GLint) bswap_CARD32(pc +
+                                                                          4),
+                                                     (GLint) bswap_CARD32(pc +
+                                                                          8),
+                                                     (GLint) bswap_CARD32(pc +
+                                                                          12),
+                                                     (GLsizei) bswap_CARD32(pc +
+                                                                            16),
+                                                     (GLsizei) bswap_CARD32(pc +
+                                                                            20),
+                                                     (GLenum) bswap_ENUM(pc +
+                                                                         24),
         imageSize,
          (const GLvoid *)(pc + 32)
     ) );
 }
 
-void __glXDispSwap_CompressedTexSubImage3DARB(GLbyte * pc)
+void
+__glXDispSwap_CompressedTexSubImage3DARB(GLbyte * pc)
 {
     const GLsizei imageSize =  (GLsizei )bswap_CARD32 ( pc + 36 );
 
-    CALL_CompressedTexSubImage3DARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-         (GLint   )bswap_CARD32 ( pc +  4 ),
-         (GLint   )bswap_CARD32 ( pc +  8 ),
-         (GLint   )bswap_CARD32 ( pc + 12 ),
-         (GLint   )bswap_CARD32 ( pc + 16 ),
-         (GLsizei )bswap_CARD32 ( pc + 20 ),
-         (GLsizei )bswap_CARD32 ( pc + 24 ),
-         (GLsizei )bswap_CARD32 ( pc + 28 ),
-         (GLenum  )bswap_ENUM   ( pc + 32 ),
+    CALL_CompressedTexSubImage3DARB(GET_DISPATCH(), ((GLenum)
+                                                     bswap_ENUM(pc + 0),
+                                                     (GLint) bswap_CARD32(pc +
+                                                                          4),
+                                                     (GLint) bswap_CARD32(pc +
+                                                                          8),
+                                                     (GLint) bswap_CARD32(pc +
+                                                                          12),
+                                                     (GLint) bswap_CARD32(pc +
+                                                                          16),
+                                                     (GLsizei) bswap_CARD32(pc +
+                                                                            20),
+                                                     (GLsizei) bswap_CARD32(pc +
+                                                                            24),
+                                                     (GLsizei) bswap_CARD32(pc +
+                                                                            28),
+                                                     (GLenum) bswap_ENUM(pc +
+                                                                         32),
         imageSize,
          (const GLvoid *)(pc + 40)
     ) );
 }
 
-int __glXDispSwap_GetProgramEnvParameterdvARB(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetProgramEnvParameterdvARB(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
         GLdouble params[4];
-        CALL_GetProgramEnvParameterdvARB( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-             (GLuint  )bswap_CARD32 ( pc +  4 ),
-            params
-        ) );
+
+        CALL_GetProgramEnvParameterdvARB(GET_DISPATCH(), ((GLenum)
+                                                          bswap_ENUM(pc + 0),
+                                                          (GLuint)
+                                                          bswap_CARD32(pc + 4),
+                                                          params));
         (void) bswap_64_array( (uint64_t *) params, 4 );
         __glXSendReplySwap(cl->client, params, 4, 8, GL_FALSE, 0);
         error = Success;
@@ -4249,20 +4661,23 @@ int __glXDispSwap_GetProgramEnvParameterdvARB(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetProgramEnvParameterfvARB(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetProgramEnvParameterfvARB(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
         GLfloat params[4];
-        CALL_GetProgramEnvParameterfvARB( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-             (GLuint  )bswap_CARD32 ( pc +  4 ),
-            params
-        ) );
+
+        CALL_GetProgramEnvParameterfvARB(GET_DISPATCH(), ((GLenum)
+                                                          bswap_ENUM(pc + 0),
+                                                          (GLuint)
+                                                          bswap_CARD32(pc + 4),
+                                                          params));
         (void) bswap_32_array( (uint32_t *) params, 4 );
         __glXSendReplySwap(cl->client, params, 4, 4, GL_FALSE, 0);
         error = Success;
@@ -4271,20 +4686,24 @@ int __glXDispSwap_GetProgramEnvParameterfvARB(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetProgramLocalParameterdvARB(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetProgramLocalParameterdvARB(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
         GLdouble params[4];
-        CALL_GetProgramLocalParameterdvARB( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-             (GLuint  )bswap_CARD32 ( pc +  4 ),
-            params
-        ) );
+
+        CALL_GetProgramLocalParameterdvARB(GET_DISPATCH(), ((GLenum)
+                                                            bswap_ENUM(pc + 0),
+                                                            (GLuint)
+                                                            bswap_CARD32(pc +
+                                                                         4),
+                                                            params));
         (void) bswap_64_array( (uint64_t *) params, 4 );
         __glXSendReplySwap(cl->client, params, 4, 8, GL_FALSE, 0);
         error = Success;
@@ -4293,20 +4712,24 @@ int __glXDispSwap_GetProgramLocalParameterdvARB(__GLXclientState *cl, GLbyte *pc
     return error;
 }
 
-int __glXDispSwap_GetProgramLocalParameterfvARB(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetProgramLocalParameterfvARB(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
         GLfloat params[4];
-        CALL_GetProgramLocalParameterfvARB( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-             (GLuint  )bswap_CARD32 ( pc +  4 ),
-            params
-        ) );
+
+        CALL_GetProgramLocalParameterfvARB(GET_DISPATCH(), ((GLenum)
+                                                            bswap_ENUM(pc + 0),
+                                                            (GLuint)
+                                                            bswap_CARD32(pc +
+                                                                         4),
+                                                            params));
         (void) bswap_32_array( (uint32_t *) params, 4 );
         __glXSendReplySwap(cl->client, params, 4, 4, GL_FALSE, 0);
         error = Success;
@@ -4315,11 +4738,13 @@ int __glXDispSwap_GetProgramLocalParameterfvARB(__GLXclientState *cl, GLbyte *pc
     return error;
 }
 
-int __glXDispSwap_GetProgramivARB(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetProgramivARB(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
@@ -4327,16 +4752,16 @@ int __glXDispSwap_GetProgramivARB(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetProgramivARB_size(pname);
         GLint answerBuffer[200];
-        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLint *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetProgramivARB( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetProgramivARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                              pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -4345,11 +4770,13 @@ int __glXDispSwap_GetProgramivARB(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetVertexAttribdvARB(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetVertexAttribdvARB(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
@@ -4357,16 +4784,17 @@ int __glXDispSwap_GetVertexAttribdvARB(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetVertexAttribdvARB_size(pname);
         GLdouble answerBuffer[200];
-        GLdouble * params = __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer, sizeof(answerBuffer), 8);
+        GLdouble *params =
+            __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer,
+                                 sizeof(answerBuffer), 8);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetVertexAttribdvARB( GET_DISPATCH(), (
-             (GLuint  )bswap_CARD32 ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetVertexAttribdvARB(GET_DISPATCH(), ((GLuint)
+                                                   bswap_CARD32(pc + 0), pname,
+                                                   params));
         (void) bswap_64_array( (uint64_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 8, GL_FALSE, 0);
         error = Success;
@@ -4375,11 +4803,13 @@ int __glXDispSwap_GetVertexAttribdvARB(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetVertexAttribfvARB(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetVertexAttribfvARB(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
@@ -4387,16 +4817,17 @@ int __glXDispSwap_GetVertexAttribfvARB(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetVertexAttribfvARB_size(pname);
         GLfloat answerBuffer[200];
-        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLfloat *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetVertexAttribfvARB( GET_DISPATCH(), (
-             (GLuint  )bswap_CARD32 ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetVertexAttribfvARB(GET_DISPATCH(), ((GLuint)
+                                                   bswap_CARD32(pc + 0), pname,
+                                                   params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -4405,11 +4836,13 @@ int __glXDispSwap_GetVertexAttribfvARB(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetVertexAttribivARB(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetVertexAttribivARB(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
@@ -4417,16 +4850,17 @@ int __glXDispSwap_GetVertexAttribivARB(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetVertexAttribivARB_size(pname);
         GLint answerBuffer[200];
-        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLint *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetVertexAttribivARB( GET_DISPATCH(), (
-             (GLuint  )bswap_CARD32 ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetVertexAttribivARB(GET_DISPATCH(), ((GLuint)
+                                                   bswap_CARD32(pc + 0), pname,
+                                                   params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -4435,7 +4869,8 @@ int __glXDispSwap_GetVertexAttribivARB(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-void __glXDispSwap_ProgramEnvParameter4dvARB(GLbyte * pc)
+void
+__glXDispSwap_ProgramEnvParameter4dvARB(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -4444,23 +4879,31 @@ void __glXDispSwap_ProgramEnvParameter4dvARB(GLbyte * pc)
     }
 #endif
 
-    CALL_ProgramEnvParameter4dvARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-         (GLuint  )bswap_CARD32 ( pc +  4 ),
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  8), 4 )
+    CALL_ProgramEnvParameter4dvARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                                    (GLuint) bswap_CARD32(pc +
+                                                                          4),
+                                                    (const GLdouble *)
+                                                    bswap_64_array((uint64_t
+                                                                    *) (pc + 8),
+                                                                   4)
     ) );
 }
 
-void __glXDispSwap_ProgramEnvParameter4fvARB(GLbyte * pc)
+void
+__glXDispSwap_ProgramEnvParameter4fvARB(GLbyte * pc)
 {
-    CALL_ProgramEnvParameter4fvARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-         (GLuint  )bswap_CARD32 ( pc +  4 ),
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  8), 4 )
+    CALL_ProgramEnvParameter4fvARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                                    (GLuint) bswap_CARD32(pc +
+                                                                          4),
+                                                    (const GLfloat *)
+                                                    bswap_32_array((uint32_t
+                                                                    *) (pc + 8),
+                                                                   4)
     ) );
 }
 
-void __glXDispSwap_ProgramLocalParameter4dvARB(GLbyte * pc)
+void
+__glXDispSwap_ProgramLocalParameter4dvARB(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -4469,35 +4912,44 @@ void __glXDispSwap_ProgramLocalParameter4dvARB(GLbyte * pc)
     }
 #endif
 
-    CALL_ProgramLocalParameter4dvARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-         (GLuint  )bswap_CARD32 ( pc +  4 ),
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  8), 4 )
+    CALL_ProgramLocalParameter4dvARB(GET_DISPATCH(), ((GLenum)
+                                                      bswap_ENUM(pc + 0),
+                                                      (GLuint) bswap_CARD32(pc +
+                                                                            4),
+                                                      (const GLdouble *)
+                                                      bswap_64_array((uint64_t
+                                                                      *) (pc +
+                                                                          8), 4)
     ) );
 }
 
-void __glXDispSwap_ProgramLocalParameter4fvARB(GLbyte * pc)
+void
+__glXDispSwap_ProgramLocalParameter4fvARB(GLbyte * pc)
 {
-    CALL_ProgramLocalParameter4fvARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-         (GLuint  )bswap_CARD32 ( pc +  4 ),
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  8), 4 )
+    CALL_ProgramLocalParameter4fvARB(GET_DISPATCH(), ((GLenum)
+                                                      bswap_ENUM(pc + 0),
+                                                      (GLuint) bswap_CARD32(pc +
+                                                                            4),
+                                                      (const GLfloat *)
+                                                      bswap_32_array((uint32_t
+                                                                      *) (pc +
+                                                                          8), 4)
     ) );
 }
 
-void __glXDispSwap_ProgramStringARB(GLbyte * pc)
+void
+__glXDispSwap_ProgramStringARB(GLbyte * pc)
 {
     const GLsizei len =  (GLsizei )bswap_CARD32 ( pc +  8 );
 
-    CALL_ProgramStringARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_ProgramStringARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 ),
-        len,
-         (const GLvoid *)(pc + 12)
+                                           len, (const GLvoid *) (pc + 12)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib1dvARB(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib1dvARB(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -4506,29 +4958,35 @@ void __glXDispSwap_VertexAttrib1dvARB(GLbyte * pc)
     }
 #endif
 
-    CALL_VertexAttrib1dvARB( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  4), 1 )
+    CALL_VertexAttrib1dvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                             (const GLdouble *)
+                                             bswap_64_array((uint64_t *) (pc +
+                                                                          4), 1)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib1fvARB(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib1fvARB(GLbyte * pc)
 {
-    CALL_VertexAttrib1fvARB( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  4), 1 )
+    CALL_VertexAttrib1fvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                             (const GLfloat *)
+                                             bswap_32_array((uint32_t *) (pc +
+                                                                          4), 1)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib1svARB(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib1svARB(GLbyte * pc)
 {
-    CALL_VertexAttrib1svARB( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 1 )
+    CALL_VertexAttrib1svARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                             (const GLshort *)
+                                             bswap_16_array((uint16_t *) (pc +
+                                                                          4), 1)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib2dvARB(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib2dvARB(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -4537,29 +4995,35 @@ void __glXDispSwap_VertexAttrib2dvARB(GLbyte * pc)
     }
 #endif
 
-    CALL_VertexAttrib2dvARB( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  4), 2 )
+    CALL_VertexAttrib2dvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                             (const GLdouble *)
+                                             bswap_64_array((uint64_t *) (pc +
+                                                                          4), 2)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib2fvARB(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib2fvARB(GLbyte * pc)
 {
-    CALL_VertexAttrib2fvARB( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  4), 2 )
+    CALL_VertexAttrib2fvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                             (const GLfloat *)
+                                             bswap_32_array((uint32_t *) (pc +
+                                                                          4), 2)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib2svARB(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib2svARB(GLbyte * pc)
 {
-    CALL_VertexAttrib2svARB( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 2 )
+    CALL_VertexAttrib2svARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                             (const GLshort *)
+                                             bswap_16_array((uint16_t *) (pc +
+                                                                          4), 2)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib3dvARB(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib3dvARB(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -4568,85 +5032,103 @@ void __glXDispSwap_VertexAttrib3dvARB(GLbyte * pc)
     }
 #endif
 
-    CALL_VertexAttrib3dvARB( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  4), 3 )
+    CALL_VertexAttrib3dvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                             (const GLdouble *)
+                                             bswap_64_array((uint64_t *) (pc +
+                                                                          4), 3)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib3fvARB(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib3fvARB(GLbyte * pc)
 {
-    CALL_VertexAttrib3fvARB( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  4), 3 )
+    CALL_VertexAttrib3fvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                             (const GLfloat *)
+                                             bswap_32_array((uint32_t *) (pc +
+                                                                          4), 3)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib3svARB(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib3svARB(GLbyte * pc)
 {
-    CALL_VertexAttrib3svARB( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 3 )
+    CALL_VertexAttrib3svARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                             (const GLshort *)
+                                             bswap_16_array((uint16_t *) (pc +
+                                                                          4), 3)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib4NbvARB(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib4NbvARB(GLbyte * pc)
 {
-    CALL_VertexAttrib4NbvARB( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
+    CALL_VertexAttrib4NbvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
          (const GLbyte *)(pc +  4)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib4NivARB(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib4NivARB(GLbyte * pc)
 {
-    CALL_VertexAttrib4NivARB( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLint *)bswap_32_array( (uint32_t *) (pc +  4), 4 )
+    CALL_VertexAttrib4NivARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                              (const GLint *)
+                                              bswap_32_array((uint32_t *) (pc +
+                                                                           4),
+                                                             4)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib4NsvARB(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib4NsvARB(GLbyte * pc)
 {
-    CALL_VertexAttrib4NsvARB( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 4 )
+    CALL_VertexAttrib4NsvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                              (const GLshort *)
+                                              bswap_16_array((uint16_t *) (pc +
+                                                                           4),
+                                                             4)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib4NubvARB(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib4NubvARB(GLbyte * pc)
 {
-    CALL_VertexAttrib4NubvARB( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
+    CALL_VertexAttrib4NubvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
          (const GLubyte *)(pc +  4)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib4NuivARB(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib4NuivARB(GLbyte * pc)
 {
-    CALL_VertexAttrib4NuivARB( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLuint *)bswap_32_array( (uint32_t *) (pc +  4), 4 )
+    CALL_VertexAttrib4NuivARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                               (const GLuint *)
+                                               bswap_32_array((uint32_t *) (pc +
+                                                                            4),
+                                                              4)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib4NusvARB(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib4NusvARB(GLbyte * pc)
 {
-    CALL_VertexAttrib4NusvARB( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLushort *)bswap_16_array( (uint16_t *) (pc +  4), 4 )
+    CALL_VertexAttrib4NusvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                               (const GLushort *)
+                                               bswap_16_array((uint16_t *) (pc +
+                                                                            4),
+                                                              4)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib4bvARB(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib4bvARB(GLbyte * pc)
 {
-    CALL_VertexAttrib4bvARB( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
+    CALL_VertexAttrib4bvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
          (const GLbyte *)(pc +  4)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib4dvARB(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib4dvARB(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -4655,81 +5137,98 @@ void __glXDispSwap_VertexAttrib4dvARB(GLbyte * pc)
     }
 #endif
 
-    CALL_VertexAttrib4dvARB( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  4), 4 )
+    CALL_VertexAttrib4dvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                             (const GLdouble *)
+                                             bswap_64_array((uint64_t *) (pc +
+                                                                          4), 4)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib4fvARB(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib4fvARB(GLbyte * pc)
 {
-    CALL_VertexAttrib4fvARB( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  4), 4 )
+    CALL_VertexAttrib4fvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                             (const GLfloat *)
+                                             bswap_32_array((uint32_t *) (pc +
+                                                                          4), 4)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib4ivARB(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib4ivARB(GLbyte * pc)
 {
-    CALL_VertexAttrib4ivARB( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLint *)bswap_32_array( (uint32_t *) (pc +  4), 4 )
+    CALL_VertexAttrib4ivARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                             (const GLint *)
+                                             bswap_32_array((uint32_t *) (pc +
+                                                                          4), 4)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib4svARB(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib4svARB(GLbyte * pc)
 {
-    CALL_VertexAttrib4svARB( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 4 )
+    CALL_VertexAttrib4svARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                             (const GLshort *)
+                                             bswap_16_array((uint16_t *) (pc +
+                                                                          4), 4)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib4ubvARB(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib4ubvARB(GLbyte * pc)
 {
-    CALL_VertexAttrib4ubvARB( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
+    CALL_VertexAttrib4ubvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
          (const GLubyte *)(pc +  4)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib4uivARB(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib4uivARB(GLbyte * pc)
 {
-    CALL_VertexAttrib4uivARB( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLuint *)bswap_32_array( (uint32_t *) (pc +  4), 4 )
+    CALL_VertexAttrib4uivARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                              (const GLuint *)
+                                              bswap_32_array((uint32_t *) (pc +
+                                                                           4),
+                                                             4)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib4usvARB(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib4usvARB(GLbyte * pc)
 {
-    CALL_VertexAttrib4usvARB( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLushort *)bswap_16_array( (uint16_t *) (pc +  4), 4 )
+    CALL_VertexAttrib4usvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                              (const GLushort *)
+                                              bswap_16_array((uint16_t *) (pc +
+                                                                           4),
+                                                             4)
     ) );
 }
 
-void __glXDispSwap_BeginQueryARB(GLbyte * pc)
+void
+__glXDispSwap_BeginQueryARB(GLbyte * pc)
 {
-    CALL_BeginQueryARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_BeginQueryARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLuint  )bswap_CARD32 ( pc +  4 )
     ) );
 }
 
-int __glXDispSwap_DeleteQueriesARB(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_DeleteQueriesARB(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
         const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
 
-        CALL_DeleteQueriesARB( GET_DISPATCH(), (
-            n,
-             (const GLuint *)bswap_32_array( (uint32_t *) (pc +  4), 0 )
+        CALL_DeleteQueriesARB(GET_DISPATCH(), (n,
+                                               (const GLuint *)
+                                               bswap_32_array((uint32_t *) (pc +
+                                                                            4),
+                                                              0)
         ) );
         error = Success;
     }
@@ -4737,29 +5236,30 @@ int __glXDispSwap_DeleteQueriesARB(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-void __glXDispSwap_EndQueryARB(GLbyte * pc)
+void
+__glXDispSwap_EndQueryARB(GLbyte * pc)
 {
-    CALL_EndQueryARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 )
+    CALL_EndQueryARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
     ) );
 }
 
-int __glXDispSwap_GenQueriesARB(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GenQueriesARB(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
         const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
 
         GLuint answerBuffer[200];
-        GLuint * ids = __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer), 4);
-        CALL_GenQueriesARB( GET_DISPATCH(), (
-            n,
-            ids
-        ) );
+        GLuint *ids =
+            __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer),
+                                 4);
+        CALL_GenQueriesARB(GET_DISPATCH(), (n, ids));
         (void) bswap_32_array( (uint32_t *) ids, n );
         __glXSendReplySwap(cl->client, ids, n, 4, GL_TRUE, 0);
         error = Success;
@@ -4768,11 +5268,13 @@ int __glXDispSwap_GenQueriesARB(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetQueryObjectivARB(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetQueryObjectivARB(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -4780,16 +5282,16 @@ int __glXDispSwap_GetQueryObjectivARB(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetQueryObjectivARB_size(pname);
         GLint answerBuffer[200];
-        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLint *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetQueryObjectivARB( GET_DISPATCH(), (
-             (GLuint  )bswap_CARD32 ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetQueryObjectivARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                                  pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -4798,11 +5300,13 @@ int __glXDispSwap_GetQueryObjectivARB(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetQueryObjectuivARB(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetQueryObjectuivARB(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -4810,16 +5314,17 @@ int __glXDispSwap_GetQueryObjectuivARB(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetQueryObjectuivARB_size(pname);
         GLuint answerBuffer[200];
-        GLuint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLuint *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetQueryObjectuivARB( GET_DISPATCH(), (
-             (GLuint  )bswap_CARD32 ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetQueryObjectuivARB(GET_DISPATCH(), ((GLuint)
+                                                   bswap_CARD32(pc + 0), pname,
+                                                   params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -4828,11 +5333,13 @@ int __glXDispSwap_GetQueryObjectuivARB(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetQueryivARB(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetQueryivARB(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
@@ -4840,16 +5347,16 @@ int __glXDispSwap_GetQueryivARB(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetQueryivARB_size(pname);
         GLint answerBuffer[200];
-        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLint *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetQueryivARB( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetQueryivARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
+                                            pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -4858,17 +5365,19 @@ int __glXDispSwap_GetQueryivARB(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_IsQueryARB(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_IsQueryARB(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXSingleReq * const req = (xGLXSingleReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_SINGLE_HDR_SIZE;
     if ( cx != NULL ) {
         GLboolean retval;
-        retval = CALL_IsQueryARB( GET_DISPATCH(), (
-             (GLuint  )bswap_CARD32 ( pc +  0 )
+
+        retval = CALL_IsQueryARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0)
         ) );
         __glXSendReplySwap(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
         error = Success;
@@ -4877,79 +5386,88 @@ int __glXDispSwap_IsQueryARB(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-void __glXDispSwap_DrawBuffersARB(GLbyte * pc)
+void
+__glXDispSwap_DrawBuffersARB(GLbyte * pc)
 {
     const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
 
-    CALL_DrawBuffersARB( GET_DISPATCH(), (
-        n,
-         (const GLenum *)bswap_32_array( (uint32_t *) (pc +  4), 0 )
+    CALL_DrawBuffersARB(GET_DISPATCH(), (n,
+                                         (const GLenum *)
+                                         bswap_32_array((uint32_t *) (pc + 4),
+                                                        0)
     ) );
 }
 
-void __glXDispSwap_ClampColorARB(GLbyte * pc)
+void
+__glXDispSwap_ClampColorARB(GLbyte * pc)
 {
-    CALL_ClampColorARB( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_ClampColorARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 )
     ) );
 }
 
-void __glXDispSwap_RenderbufferStorageMultisample(GLbyte * pc)
+void
+__glXDispSwap_RenderbufferStorageMultisample(GLbyte * pc)
 {
-    CALL_RenderbufferStorageMultisample( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-         (GLsizei )bswap_CARD32 ( pc +  4 ),
-         (GLenum  )bswap_ENUM   ( pc +  8 ),
-         (GLsizei )bswap_CARD32 ( pc + 12 ),
-         (GLsizei )bswap_CARD32 ( pc + 16 )
+    CALL_RenderbufferStorageMultisample(GET_DISPATCH(), ((GLenum)
+                                                         bswap_ENUM(pc + 0),
+                                                         (GLsizei)
+                                                         bswap_CARD32(pc + 4),
+                                                         (GLenum) bswap_ENUM(pc
+                                                                             +
+                                                                             8),
+                                                         (GLsizei)
+                                                         bswap_CARD32(pc + 12),
+                                                         (GLsizei)
+                                                         bswap_CARD32(pc + 16)
     ) );
 }
 
-void __glXDispSwap_SampleMaskSGIS(GLbyte * pc)
+void
+__glXDispSwap_SampleMaskSGIS(GLbyte * pc)
 {
-    CALL_SampleMaskSGIS( GET_DISPATCH(), (
-         (GLclampf)bswap_FLOAT32( pc +  0 ),
+    CALL_SampleMaskSGIS(GET_DISPATCH(), ((GLclampf) bswap_FLOAT32(pc + 0),
         *(GLboolean *)(pc +  4)
     ) );
 }
 
-void __glXDispSwap_SamplePatternSGIS(GLbyte * pc)
+void
+__glXDispSwap_SamplePatternSGIS(GLbyte * pc)
 {
-    CALL_SamplePatternSGIS( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 )
+    CALL_SamplePatternSGIS(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
     ) );
 }
 
-void __glXDispSwap_PointParameterfEXT(GLbyte * pc)
+void
+__glXDispSwap_PointParameterfEXT(GLbyte * pc)
 {
-    CALL_PointParameterfEXT( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_PointParameterfEXT(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLfloat )bswap_FLOAT32( pc +  4 )
     ) );
 }
 
-void __glXDispSwap_PointParameterfvEXT(GLbyte * pc)
+void
+__glXDispSwap_PointParameterfvEXT(GLbyte * pc)
 {
     const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  0 );
     const GLfloat * params;
 
-    params = (const GLfloat *) bswap_32_array( (uint32_t *) (pc + 4), __glPointParameterfvEXT_size(pname) );
+    params =
+        (const GLfloat *) bswap_32_array((uint32_t *) (pc + 4),
+                                         __glPointParameterfvEXT_size(pname));
 
-    CALL_PointParameterfvEXT( GET_DISPATCH(), (
-        pname,
-        params
-    ) );
+    CALL_PointParameterfvEXT(GET_DISPATCH(), (pname, params));
 }
 
-void __glXDispSwap_SecondaryColor3bvEXT(GLbyte * pc)
+void
+__glXDispSwap_SecondaryColor3bvEXT(GLbyte * pc)
 {
-    CALL_SecondaryColor3bvEXT( GET_DISPATCH(), (
-         (const GLbyte *)(pc +  0)
+    CALL_SecondaryColor3bvEXT(GET_DISPATCH(), ((const GLbyte *) (pc + 0)
     ) );
 }
 
-void __glXDispSwap_SecondaryColor3dvEXT(GLbyte * pc)
+void
+__glXDispSwap_SecondaryColor3dvEXT(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -4958,54 +5476,74 @@ void __glXDispSwap_SecondaryColor3dvEXT(GLbyte * pc)
     }
 #endif
 
-    CALL_SecondaryColor3dvEXT( GET_DISPATCH(), (
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 3 )
+    CALL_SecondaryColor3dvEXT(GET_DISPATCH(), ((const GLdouble *)
+                                               bswap_64_array((uint64_t *) (pc +
+                                                                            0),
+                                                              3)
     ) );
 }
 
-void __glXDispSwap_SecondaryColor3fvEXT(GLbyte * pc)
+void
+__glXDispSwap_SecondaryColor3fvEXT(GLbyte * pc)
 {
-    CALL_SecondaryColor3fvEXT( GET_DISPATCH(), (
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
+    CALL_SecondaryColor3fvEXT(GET_DISPATCH(), ((const GLfloat *)
+                                               bswap_32_array((uint32_t *) (pc +
+                                                                            0),
+                                                              3)
     ) );
 }
 
-void __glXDispSwap_SecondaryColor3ivEXT(GLbyte * pc)
+void
+__glXDispSwap_SecondaryColor3ivEXT(GLbyte * pc)
 {
-    CALL_SecondaryColor3ivEXT( GET_DISPATCH(), (
-         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
+    CALL_SecondaryColor3ivEXT(GET_DISPATCH(), ((const GLint *)
+                                               bswap_32_array((uint32_t *) (pc +
+                                                                            0),
+                                                              3)
     ) );
 }
 
-void __glXDispSwap_SecondaryColor3svEXT(GLbyte * pc)
+void
+__glXDispSwap_SecondaryColor3svEXT(GLbyte * pc)
 {
-    CALL_SecondaryColor3svEXT( GET_DISPATCH(), (
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 3 )
+    CALL_SecondaryColor3svEXT(GET_DISPATCH(), ((const GLshort *)
+                                               bswap_16_array((uint16_t *) (pc +
+                                                                            0),
+                                                              3)
     ) );
 }
 
-void __glXDispSwap_SecondaryColor3ubvEXT(GLbyte * pc)
+void
+__glXDispSwap_SecondaryColor3ubvEXT(GLbyte * pc)
 {
-    CALL_SecondaryColor3ubvEXT( GET_DISPATCH(), (
-         (const GLubyte *)(pc +  0)
+    CALL_SecondaryColor3ubvEXT(GET_DISPATCH(), ((const GLubyte *) (pc + 0)
     ) );
 }
 
-void __glXDispSwap_SecondaryColor3uivEXT(GLbyte * pc)
+void
+__glXDispSwap_SecondaryColor3uivEXT(GLbyte * pc)
 {
-    CALL_SecondaryColor3uivEXT( GET_DISPATCH(), (
-         (const GLuint *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
+    CALL_SecondaryColor3uivEXT(GET_DISPATCH(), ((const GLuint *)
+                                                bswap_32_array((uint32_t *) (pc
+                                                                             +
+                                                                             0),
+                                                               3)
     ) );
 }
 
-void __glXDispSwap_SecondaryColor3usvEXT(GLbyte * pc)
+void
+__glXDispSwap_SecondaryColor3usvEXT(GLbyte * pc)
 {
-    CALL_SecondaryColor3usvEXT( GET_DISPATCH(), (
-         (const GLushort *)bswap_16_array( (uint16_t *) (pc +  0), 3 )
+    CALL_SecondaryColor3usvEXT(GET_DISPATCH(), ((const GLushort *)
+                                                bswap_16_array((uint16_t *) (pc
+                                                                             +
+                                                                             0),
+                                                               3)
     ) );
 }
 
-void __glXDispSwap_FogCoorddvEXT(GLbyte * pc)
+void
+__glXDispSwap_FogCoorddvEXT(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -5014,40 +5552,45 @@ void __glXDispSwap_FogCoorddvEXT(GLbyte * pc)
     }
 #endif
 
-    CALL_FogCoorddvEXT( GET_DISPATCH(), (
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 1 )
+    CALL_FogCoorddvEXT(GET_DISPATCH(), ((const GLdouble *)
+                                        bswap_64_array((uint64_t *) (pc + 0), 1)
     ) );
 }
 
-void __glXDispSwap_FogCoordfvEXT(GLbyte * pc)
+void
+__glXDispSwap_FogCoordfvEXT(GLbyte * pc)
 {
-    CALL_FogCoordfvEXT( GET_DISPATCH(), (
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 1 )
+    CALL_FogCoordfvEXT(GET_DISPATCH(), ((const GLfloat *)
+                                        bswap_32_array((uint32_t *) (pc + 0), 1)
     ) );
 }
 
-void __glXDispSwap_BlendFuncSeparateEXT(GLbyte * pc)
+void
+__glXDispSwap_BlendFuncSeparateEXT(GLbyte * pc)
 {
-    CALL_BlendFuncSeparateEXT( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_BlendFuncSeparateEXT(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 ),
          (GLenum  )bswap_ENUM   ( pc +  8 ),
          (GLenum  )bswap_ENUM   ( pc + 12 )
     ) );
 }
 
-void __glXDispSwap_WindowPos3fvMESA(GLbyte * pc)
+void
+__glXDispSwap_WindowPos3fvMESA(GLbyte * pc)
 {
-    CALL_WindowPos3fvMESA( GET_DISPATCH(), (
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
+    CALL_WindowPos3fvMESA(GET_DISPATCH(), ((const GLfloat *)
+                                           bswap_32_array((uint32_t *) (pc + 0),
+                                                          3)
     ) );
 }
 
-int __glXDispSwap_AreProgramsResidentNV(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_AreProgramsResidentNV(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
@@ -5055,12 +5598,14 @@ int __glXDispSwap_AreProgramsResidentNV(__GLXclientState *cl, GLbyte *pc)
 
         GLboolean retval;
         GLboolean answerBuffer[200];
-        GLboolean * residences = __glXGetAnswerBuffer(cl, n, answerBuffer, sizeof(answerBuffer), 1);
-        retval = CALL_AreProgramsResidentNV( GET_DISPATCH(), (
-            n,
-             (const GLuint *)bswap_32_array( (uint32_t *) (pc +  4), 0 ),
-            residences
-        ) );
+        GLboolean *residences =
+            __glXGetAnswerBuffer(cl, n, answerBuffer, sizeof(answerBuffer), 1);
+        retval =
+            CALL_AreProgramsResidentNV(GET_DISPATCH(),
+                                       (n,
+                                        (const GLuint *)
+                                        bswap_32_array((uint32_t *) (pc + 4),
+                                                       0), residences));
         __glXSendReplySwap(cl->client, residences, n, 1, GL_FALSE, retval);
         error = Success;
     }
@@ -5068,27 +5613,31 @@ int __glXDispSwap_AreProgramsResidentNV(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-void __glXDispSwap_BindProgramNV(GLbyte * pc)
+void
+__glXDispSwap_BindProgramNV(GLbyte * pc)
 {
-    CALL_BindProgramNV( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_BindProgramNV(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLuint  )bswap_CARD32 ( pc +  4 )
     ) );
 }
 
-int __glXDispSwap_DeleteProgramsNV(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_DeleteProgramsNV(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
         const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
 
-        CALL_DeleteProgramsNV( GET_DISPATCH(), (
-            n,
-             (const GLuint *)bswap_32_array( (uint32_t *) (pc +  4), 0 )
+        CALL_DeleteProgramsNV(GET_DISPATCH(), (n,
+                                               (const GLuint *)
+                                               bswap_32_array((uint32_t *) (pc +
+                                                                            4),
+                                                              0)
         ) );
         error = Success;
     }
@@ -5096,31 +5645,34 @@ int __glXDispSwap_DeleteProgramsNV(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-void __glXDispSwap_ExecuteProgramNV(GLbyte * pc)
+void
+__glXDispSwap_ExecuteProgramNV(GLbyte * pc)
 {
-    CALL_ExecuteProgramNV( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_ExecuteProgramNV(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLuint  )bswap_CARD32 ( pc +  4 ),
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  8), 4 )
+                                           (const GLfloat *)
+                                           bswap_32_array((uint32_t *) (pc + 8),
+                                                          4)
     ) );
 }
 
-int __glXDispSwap_GenProgramsNV(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GenProgramsNV(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
         const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
 
         GLuint answerBuffer[200];
-        GLuint * programs = __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer), 4);
-        CALL_GenProgramsNV( GET_DISPATCH(), (
-            n,
-            programs
-        ) );
+        GLuint *programs =
+            __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer),
+                                 4);
+        CALL_GenProgramsNV(GET_DISPATCH(), (n, programs));
         (void) bswap_32_array( (uint32_t *) programs, n );
         __glXSendReplySwap(cl->client, programs, n, 4, GL_TRUE, 0);
         error = Success;
@@ -5129,21 +5681,25 @@ int __glXDispSwap_GenProgramsNV(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetProgramParameterdvNV(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetProgramParameterdvNV(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
         GLdouble params[4];
-        CALL_GetProgramParameterdvNV( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-             (GLuint  )bswap_CARD32 ( pc +  4 ),
-             (GLenum  )bswap_ENUM   ( pc +  8 ),
-            params
-        ) );
+
+        CALL_GetProgramParameterdvNV(GET_DISPATCH(), ((GLenum)
+                                                      bswap_ENUM(pc + 0),
+                                                      (GLuint) bswap_CARD32(pc +
+                                                                            4),
+                                                      (GLenum) bswap_ENUM(pc +
+                                                                          8),
+                                                      params));
         (void) bswap_64_array( (uint64_t *) params, 4 );
         __glXSendReplySwap(cl->client, params, 4, 8, GL_FALSE, 0);
         error = Success;
@@ -5152,21 +5708,25 @@ int __glXDispSwap_GetProgramParameterdvNV(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetProgramParameterfvNV(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetProgramParameterfvNV(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
         GLfloat params[4];
-        CALL_GetProgramParameterfvNV( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-             (GLuint  )bswap_CARD32 ( pc +  4 ),
-             (GLenum  )bswap_ENUM   ( pc +  8 ),
-            params
-        ) );
+
+        CALL_GetProgramParameterfvNV(GET_DISPATCH(), ((GLenum)
+                                                      bswap_ENUM(pc + 0),
+                                                      (GLuint) bswap_CARD32(pc +
+                                                                            4),
+                                                      (GLenum) bswap_ENUM(pc +
+                                                                          8),
+                                                      params));
         (void) bswap_32_array( (uint32_t *) params, 4 );
         __glXSendReplySwap(cl->client, params, 4, 4, GL_FALSE, 0);
         error = Success;
@@ -5175,11 +5735,13 @@ int __glXDispSwap_GetProgramParameterfvNV(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetProgramivNV(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetProgramivNV(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
@@ -5187,16 +5749,16 @@ int __glXDispSwap_GetProgramivNV(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetProgramivNV_size(pname);
         GLint answerBuffer[200];
-        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLint *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetProgramivNV( GET_DISPATCH(), (
-             (GLuint  )bswap_CARD32 ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetProgramivNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                             pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -5205,21 +5767,22 @@ int __glXDispSwap_GetProgramivNV(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetTrackMatrixivNV(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetTrackMatrixivNV(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
         GLint params[1];
-        CALL_GetTrackMatrixivNV( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
+
+        CALL_GetTrackMatrixivNV(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
              (GLuint  )bswap_CARD32 ( pc +  4 ),
              (GLenum  )bswap_ENUM   ( pc +  8 ),
-            params
-        ) );
+                                                 params));
         (void) bswap_32_array( (uint32_t *) params, 1 );
         __glXSendReplySwap(cl->client, params, 1, 4, GL_FALSE, 0);
         error = Success;
@@ -5228,11 +5791,13 @@ int __glXDispSwap_GetTrackMatrixivNV(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetVertexAttribdvNV(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetVertexAttribdvNV(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
@@ -5240,16 +5805,16 @@ int __glXDispSwap_GetVertexAttribdvNV(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetVertexAttribdvNV_size(pname);
         GLdouble answerBuffer[200];
-        GLdouble * params = __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer, sizeof(answerBuffer), 8);
+        GLdouble *params =
+            __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer,
+                                 sizeof(answerBuffer), 8);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetVertexAttribdvNV( GET_DISPATCH(), (
-             (GLuint  )bswap_CARD32 ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetVertexAttribdvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                                  pname, params));
         (void) bswap_64_array( (uint64_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 8, GL_FALSE, 0);
         error = Success;
@@ -5258,11 +5823,13 @@ int __glXDispSwap_GetVertexAttribdvNV(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetVertexAttribfvNV(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetVertexAttribfvNV(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
@@ -5270,16 +5837,16 @@ int __glXDispSwap_GetVertexAttribfvNV(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetVertexAttribfvNV_size(pname);
         GLfloat answerBuffer[200];
-        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLfloat *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetVertexAttribfvNV( GET_DISPATCH(), (
-             (GLuint  )bswap_CARD32 ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetVertexAttribfvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                                  pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -5288,11 +5855,13 @@ int __glXDispSwap_GetVertexAttribfvNV(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetVertexAttribivNV(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetVertexAttribivNV(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
@@ -5300,16 +5869,16 @@ int __glXDispSwap_GetVertexAttribivNV(__GLXclientState *cl, GLbyte *pc)
 
         const GLuint compsize = __glGetVertexAttribivNV_size(pname);
         GLint answerBuffer[200];
-        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
+        GLint *params =
+            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
+                                 sizeof(answerBuffer), 4);
 
-        if (params == NULL) return BadAlloc;
+        if (params == NULL)
+            return BadAlloc;
         __glXClearErrorOccured();
 
-        CALL_GetVertexAttribivNV( GET_DISPATCH(), (
-             (GLuint  )bswap_CARD32 ( pc +  0 ),
-            pname,
-            params
-        ) );
+        CALL_GetVertexAttribivNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                                  pname, params));
         (void) bswap_32_array( (uint32_t *) params, compsize );
         __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
         error = Success;
@@ -5318,17 +5887,19 @@ int __glXDispSwap_GetVertexAttribivNV(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_IsProgramNV(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_IsProgramNV(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
         GLboolean retval;
-        retval = CALL_IsProgramNV( GET_DISPATCH(), (
-             (GLuint  )bswap_CARD32 ( pc +  0 )
+
+        retval = CALL_IsProgramNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0)
         ) );
         __glXSendReplySwap(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
         error = Success;
@@ -5337,71 +5908,83 @@ int __glXDispSwap_IsProgramNV(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-void __glXDispSwap_LoadProgramNV(GLbyte * pc)
+void
+__glXDispSwap_LoadProgramNV(GLbyte * pc)
 {
     const GLsizei len =  (GLsizei )bswap_CARD32 ( pc +  8 );
 
-    CALL_LoadProgramNV( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_LoadProgramNV(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLuint  )bswap_CARD32 ( pc +  4 ),
-        len,
-         (const GLubyte *)(pc + 12)
+                                        len, (const GLubyte *) (pc + 12)
     ) );
 }
 
-void __glXDispSwap_ProgramParameters4dvNV(GLbyte * pc)
+void
+__glXDispSwap_ProgramParameters4dvNV(GLbyte * pc)
 {
     const GLsizei num =  (GLsizei )bswap_CARD32 ( pc +  8 );
 
 #ifdef __GLX_ALIGN64
     const GLuint cmdlen = 16 + __GLX_PAD((num * 32)) - 4;
+
     if ((unsigned long)(pc) & 7) {
         (void) memmove(pc-4, pc, cmdlen);
         pc -= 4;
     }
 #endif
 
-    CALL_ProgramParameters4dvNV( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_ProgramParameters4dvNV(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLuint  )bswap_CARD32 ( pc +  4 ),
         num,
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc + 12), 0 )
+                                                 (const GLdouble *)
+                                                 bswap_64_array((uint64_t *) (pc
+                                                                              +
+                                                                              12),
+                                                                0)
     ) );
 }
 
-void __glXDispSwap_ProgramParameters4fvNV(GLbyte * pc)
+void
+__glXDispSwap_ProgramParameters4fvNV(GLbyte * pc)
 {
     const GLsizei num =  (GLsizei )bswap_CARD32 ( pc +  8 );
 
-    CALL_ProgramParameters4fvNV( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_ProgramParameters4fvNV(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLuint  )bswap_CARD32 ( pc +  4 ),
         num,
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc + 12), 0 )
+                                                 (const GLfloat *)
+                                                 bswap_32_array((uint32_t *) (pc
+                                                                              +
+                                                                              12),
+                                                                0)
     ) );
 }
 
-void __glXDispSwap_RequestResidentProgramsNV(GLbyte * pc)
+void
+__glXDispSwap_RequestResidentProgramsNV(GLbyte * pc)
 {
     const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
 
-    CALL_RequestResidentProgramsNV( GET_DISPATCH(), (
-        n,
-         (const GLuint *)bswap_32_array( (uint32_t *) (pc +  4), 0 )
+    CALL_RequestResidentProgramsNV(GET_DISPATCH(), (n,
+                                                    (const GLuint *)
+                                                    bswap_32_array((uint32_t
+                                                                    *) (pc + 4),
+                                                                   0)
     ) );
 }
 
-void __glXDispSwap_TrackMatrixNV(GLbyte * pc)
+void
+__glXDispSwap_TrackMatrixNV(GLbyte * pc)
 {
-    CALL_TrackMatrixNV( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_TrackMatrixNV(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLuint  )bswap_CARD32 ( pc +  4 ),
          (GLenum  )bswap_ENUM   ( pc +  8 ),
          (GLenum  )bswap_ENUM   ( pc + 12 )
     ) );
 }
 
-void __glXDispSwap_VertexAttrib1dvNV(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib1dvNV(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -5410,29 +5993,35 @@ void __glXDispSwap_VertexAttrib1dvNV(GLbyte * pc)
     }
 #endif
 
-    CALL_VertexAttrib1dvNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  4), 1 )
+    CALL_VertexAttrib1dvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                            (const GLdouble *)
+                                            bswap_64_array((uint64_t *) (pc +
+                                                                         4), 1)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib1fvNV(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib1fvNV(GLbyte * pc)
 {
-    CALL_VertexAttrib1fvNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  4), 1 )
+    CALL_VertexAttrib1fvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                            (const GLfloat *)
+                                            bswap_32_array((uint32_t *) (pc +
+                                                                         4), 1)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib1svNV(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib1svNV(GLbyte * pc)
 {
-    CALL_VertexAttrib1svNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 1 )
+    CALL_VertexAttrib1svNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                            (const GLshort *)
+                                            bswap_16_array((uint16_t *) (pc +
+                                                                         4), 1)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib2dvNV(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib2dvNV(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -5441,29 +6030,35 @@ void __glXDispSwap_VertexAttrib2dvNV(GLbyte * pc)
     }
 #endif
 
-    CALL_VertexAttrib2dvNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  4), 2 )
+    CALL_VertexAttrib2dvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                            (const GLdouble *)
+                                            bswap_64_array((uint64_t *) (pc +
+                                                                         4), 2)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib2fvNV(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib2fvNV(GLbyte * pc)
 {
-    CALL_VertexAttrib2fvNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  4), 2 )
+    CALL_VertexAttrib2fvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                            (const GLfloat *)
+                                            bswap_32_array((uint32_t *) (pc +
+                                                                         4), 2)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib2svNV(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib2svNV(GLbyte * pc)
 {
-    CALL_VertexAttrib2svNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 2 )
+    CALL_VertexAttrib2svNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                            (const GLshort *)
+                                            bswap_16_array((uint16_t *) (pc +
+                                                                         4), 2)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib3dvNV(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib3dvNV(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -5472,29 +6067,35 @@ void __glXDispSwap_VertexAttrib3dvNV(GLbyte * pc)
     }
 #endif
 
-    CALL_VertexAttrib3dvNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  4), 3 )
+    CALL_VertexAttrib3dvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                            (const GLdouble *)
+                                            bswap_64_array((uint64_t *) (pc +
+                                                                         4), 3)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib3fvNV(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib3fvNV(GLbyte * pc)
 {
-    CALL_VertexAttrib3fvNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  4), 3 )
+    CALL_VertexAttrib3fvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                            (const GLfloat *)
+                                            bswap_32_array((uint32_t *) (pc +
+                                                                         4), 3)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib3svNV(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib3svNV(GLbyte * pc)
 {
-    CALL_VertexAttrib3svNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 3 )
+    CALL_VertexAttrib3svNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                            (const GLshort *)
+                                            bswap_16_array((uint16_t *) (pc +
+                                                                         4), 3)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib4dvNV(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib4dvNV(GLbyte * pc)
 {
 #ifdef __GLX_ALIGN64
     if ((unsigned long)(pc) & 7) {
@@ -5503,256 +6104,292 @@ void __glXDispSwap_VertexAttrib4dvNV(GLbyte * pc)
     }
 #endif
 
-    CALL_VertexAttrib4dvNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  4), 4 )
+    CALL_VertexAttrib4dvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                            (const GLdouble *)
+                                            bswap_64_array((uint64_t *) (pc +
+                                                                         4), 4)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib4fvNV(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib4fvNV(GLbyte * pc)
 {
-    CALL_VertexAttrib4fvNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  4), 4 )
+    CALL_VertexAttrib4fvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                            (const GLfloat *)
+                                            bswap_32_array((uint32_t *) (pc +
+                                                                         4), 4)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib4svNV(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib4svNV(GLbyte * pc)
 {
-    CALL_VertexAttrib4svNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 4 )
+    CALL_VertexAttrib4svNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                            (const GLshort *)
+                                            bswap_16_array((uint16_t *) (pc +
+                                                                         4), 4)
     ) );
 }
 
-void __glXDispSwap_VertexAttrib4ubvNV(GLbyte * pc)
+void
+__glXDispSwap_VertexAttrib4ubvNV(GLbyte * pc)
 {
-    CALL_VertexAttrib4ubvNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
+    CALL_VertexAttrib4ubvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
          (const GLubyte *)(pc +  4)
     ) );
 }
 
-void __glXDispSwap_VertexAttribs1dvNV(GLbyte * pc)
+void
+__glXDispSwap_VertexAttribs1dvNV(GLbyte * pc)
 {
     const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  4 );
 
 #ifdef __GLX_ALIGN64
     const GLuint cmdlen = 12 + __GLX_PAD((n * 8)) - 4;
+
     if ((unsigned long)(pc) & 7) {
         (void) memmove(pc-4, pc, cmdlen);
         pc -= 4;
     }
 #endif
 
-    CALL_VertexAttribs1dvNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
+    CALL_VertexAttribs1dvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
         n,
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  8), 0 )
+                                             (const GLdouble *)
+                                             bswap_64_array((uint64_t *) (pc +
+                                                                          8), 0)
     ) );
 }
 
-void __glXDispSwap_VertexAttribs1fvNV(GLbyte * pc)
+void
+__glXDispSwap_VertexAttribs1fvNV(GLbyte * pc)
 {
     const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  4 );
 
-    CALL_VertexAttribs1fvNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
+    CALL_VertexAttribs1fvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
         n,
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  8), 0 )
+                                             (const GLfloat *)
+                                             bswap_32_array((uint32_t *) (pc +
+                                                                          8), 0)
     ) );
 }
 
-void __glXDispSwap_VertexAttribs1svNV(GLbyte * pc)
+void
+__glXDispSwap_VertexAttribs1svNV(GLbyte * pc)
 {
     const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  4 );
 
-    CALL_VertexAttribs1svNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
+    CALL_VertexAttribs1svNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
         n,
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  8), 0 )
+                                             (const GLshort *)
+                                             bswap_16_array((uint16_t *) (pc +
+                                                                          8), 0)
     ) );
 }
 
-void __glXDispSwap_VertexAttribs2dvNV(GLbyte * pc)
+void
+__glXDispSwap_VertexAttribs2dvNV(GLbyte * pc)
 {
     const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  4 );
 
 #ifdef __GLX_ALIGN64
     const GLuint cmdlen = 12 + __GLX_PAD((n * 16)) - 4;
+
     if ((unsigned long)(pc) & 7) {
         (void) memmove(pc-4, pc, cmdlen);
         pc -= 4;
     }
 #endif
 
-    CALL_VertexAttribs2dvNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
+    CALL_VertexAttribs2dvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
         n,
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  8), 0 )
+                                             (const GLdouble *)
+                                             bswap_64_array((uint64_t *) (pc +
+                                                                          8), 0)
     ) );
 }
 
-void __glXDispSwap_VertexAttribs2fvNV(GLbyte * pc)
+void
+__glXDispSwap_VertexAttribs2fvNV(GLbyte * pc)
 {
     const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  4 );
 
-    CALL_VertexAttribs2fvNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
+    CALL_VertexAttribs2fvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
         n,
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  8), 0 )
+                                             (const GLfloat *)
+                                             bswap_32_array((uint32_t *) (pc +
+                                                                          8), 0)
     ) );
 }
 
-void __glXDispSwap_VertexAttribs2svNV(GLbyte * pc)
+void
+__glXDispSwap_VertexAttribs2svNV(GLbyte * pc)
 {
     const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  4 );
 
-    CALL_VertexAttribs2svNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
+    CALL_VertexAttribs2svNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
         n,
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  8), 0 )
+                                             (const GLshort *)
+                                             bswap_16_array((uint16_t *) (pc +
+                                                                          8), 0)
     ) );
 }
 
-void __glXDispSwap_VertexAttribs3dvNV(GLbyte * pc)
+void
+__glXDispSwap_VertexAttribs3dvNV(GLbyte * pc)
 {
     const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  4 );
 
 #ifdef __GLX_ALIGN64
     const GLuint cmdlen = 12 + __GLX_PAD((n * 24)) - 4;
+
     if ((unsigned long)(pc) & 7) {
         (void) memmove(pc-4, pc, cmdlen);
         pc -= 4;
     }
 #endif
 
-    CALL_VertexAttribs3dvNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
+    CALL_VertexAttribs3dvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
         n,
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  8), 0 )
+                                             (const GLdouble *)
+                                             bswap_64_array((uint64_t *) (pc +
+                                                                          8), 0)
     ) );
 }
 
-void __glXDispSwap_VertexAttribs3fvNV(GLbyte * pc)
+void
+__glXDispSwap_VertexAttribs3fvNV(GLbyte * pc)
 {
     const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  4 );
 
-    CALL_VertexAttribs3fvNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
+    CALL_VertexAttribs3fvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
         n,
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  8), 0 )
+                                             (const GLfloat *)
+                                             bswap_32_array((uint32_t *) (pc +
+                                                                          8), 0)
     ) );
 }
 
-void __glXDispSwap_VertexAttribs3svNV(GLbyte * pc)
+void
+__glXDispSwap_VertexAttribs3svNV(GLbyte * pc)
 {
     const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  4 );
 
-    CALL_VertexAttribs3svNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
+    CALL_VertexAttribs3svNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
         n,
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  8), 0 )
+                                             (const GLshort *)
+                                             bswap_16_array((uint16_t *) (pc +
+                                                                          8), 0)
     ) );
 }
 
-void __glXDispSwap_VertexAttribs4dvNV(GLbyte * pc)
+void
+__glXDispSwap_VertexAttribs4dvNV(GLbyte * pc)
 {
     const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  4 );
 
 #ifdef __GLX_ALIGN64
     const GLuint cmdlen = 12 + __GLX_PAD((n * 32)) - 4;
+
     if ((unsigned long)(pc) & 7) {
         (void) memmove(pc-4, pc, cmdlen);
         pc -= 4;
     }
 #endif
 
-    CALL_VertexAttribs4dvNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
+    CALL_VertexAttribs4dvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
         n,
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  8), 0 )
+                                             (const GLdouble *)
+                                             bswap_64_array((uint64_t *) (pc +
+                                                                          8), 0)
     ) );
 }
 
-void __glXDispSwap_VertexAttribs4fvNV(GLbyte * pc)
+void
+__glXDispSwap_VertexAttribs4fvNV(GLbyte * pc)
 {
     const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  4 );
 
-    CALL_VertexAttribs4fvNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
+    CALL_VertexAttribs4fvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
         n,
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  8), 0 )
+                                             (const GLfloat *)
+                                             bswap_32_array((uint32_t *) (pc +
+                                                                          8), 0)
     ) );
 }
 
-void __glXDispSwap_VertexAttribs4svNV(GLbyte * pc)
+void
+__glXDispSwap_VertexAttribs4svNV(GLbyte * pc)
 {
     const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  4 );
 
-    CALL_VertexAttribs4svNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
+    CALL_VertexAttribs4svNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
         n,
-         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  8), 0 )
+                                             (const GLshort *)
+                                             bswap_16_array((uint16_t *) (pc +
+                                                                          8), 0)
     ) );
 }
 
-void __glXDispSwap_VertexAttribs4ubvNV(GLbyte * pc)
+void
+__glXDispSwap_VertexAttribs4ubvNV(GLbyte * pc)
 {
     const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  4 );
 
-    CALL_VertexAttribs4ubvNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-        n,
-         (const GLubyte *)(pc +  8)
+    CALL_VertexAttribs4ubvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
+                                              n, (const GLubyte *) (pc + 8)
     ) );
 }
 
-void __glXDispSwap_PointParameteriNV(GLbyte * pc)
+void
+__glXDispSwap_PointParameteriNV(GLbyte * pc)
 {
-    CALL_PointParameteriNV( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_PointParameteriNV(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLint   )bswap_CARD32 ( pc +  4 )
     ) );
 }
 
-void __glXDispSwap_PointParameterivNV(GLbyte * pc)
+void
+__glXDispSwap_PointParameterivNV(GLbyte * pc)
 {
     const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  0 );
     const GLint * params;
 
-    params = (const GLint *) bswap_32_array( (uint32_t *) (pc + 4), __glPointParameterivNV_size(pname) );
+    params =
+        (const GLint *) bswap_32_array((uint32_t *) (pc + 4),
+                                       __glPointParameterivNV_size(pname));
 
-    CALL_PointParameterivNV( GET_DISPATCH(), (
-        pname,
-        params
-    ) );
+    CALL_PointParameterivNV(GET_DISPATCH(), (pname, params));
 }
 
-void __glXDispSwap_ActiveStencilFaceEXT(GLbyte * pc)
+void
+__glXDispSwap_ActiveStencilFaceEXT(GLbyte * pc)
 {
-    CALL_ActiveStencilFaceEXT( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 )
+    CALL_ActiveStencilFaceEXT(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
     ) );
 }
 
-int __glXDispSwap_GetProgramNamedParameterdvNV(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetProgramNamedParameterdvNV(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
         const GLsizei len =  (GLsizei )bswap_CARD32 ( pc +  4 );
 
         GLdouble params[4];
-        CALL_GetProgramNamedParameterdvNV( GET_DISPATCH(), (
-             (GLuint  )bswap_CARD32 ( pc +  0 ),
+
+        CALL_GetProgramNamedParameterdvNV(GET_DISPATCH(), ((GLuint)
+                                                           bswap_CARD32(pc + 0),
             len,
-             (const GLubyte *)(pc +  8),
-            params
-        ) );
+                                                           (const GLubyte *) (pc
+                                                                              +
+                                                                              8),
+                                                           params));
         (void) bswap_64_array( (uint64_t *) params, 4 );
         __glXSendReplySwap(cl->client, params, 4, 8, GL_TRUE, 0);
         error = Success;
@@ -5761,23 +6398,27 @@ int __glXDispSwap_GetProgramNamedParameterdvNV(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GetProgramNamedParameterfvNV(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetProgramNamedParameterfvNV(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
         const GLsizei len =  (GLsizei )bswap_CARD32 ( pc +  4 );
 
         GLfloat params[4];
-        CALL_GetProgramNamedParameterfvNV( GET_DISPATCH(), (
-             (GLuint  )bswap_CARD32 ( pc +  0 ),
+
+        CALL_GetProgramNamedParameterfvNV(GET_DISPATCH(), ((GLuint)
+                                                           bswap_CARD32(pc + 0),
             len,
-             (const GLubyte *)(pc +  8),
-            params
-        ) );
+                                                           (const GLubyte *) (pc
+                                                                              +
+                                                                              8),
+                                                           params));
         (void) bswap_32_array( (uint32_t *) params, 4 );
         __glXSendReplySwap(cl->client, params, 4, 4, GL_TRUE, 0);
         error = Success;
@@ -5786,73 +6427,86 @@ int __glXDispSwap_GetProgramNamedParameterfvNV(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-void __glXDispSwap_ProgramNamedParameter4dvNV(GLbyte * pc)
+void
+__glXDispSwap_ProgramNamedParameter4dvNV(GLbyte * pc)
 {
     const GLsizei len =  (GLsizei )bswap_CARD32 ( pc + 36 );
 
 #ifdef __GLX_ALIGN64
     const GLuint cmdlen = 44 + __GLX_PAD(len) - 4;
+
     if ((unsigned long)(pc) & 7) {
         (void) memmove(pc-4, pc, cmdlen);
         pc -= 4;
     }
 #endif
 
-    CALL_ProgramNamedParameter4dvNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc + 32 ),
-        len,
-         (const GLubyte *)(pc + 40),
-         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 4 )
+    CALL_ProgramNamedParameter4dvNV(GET_DISPATCH(), ((GLuint)
+                                                     bswap_CARD32(pc + 32), len,
+                                                     (const GLubyte *) (pc +
+                                                                        40),
+                                                     (const GLdouble *)
+                                                     bswap_64_array((uint64_t
+                                                                     *) (pc +
+                                                                         0), 4)
     ) );
 }
 
-void __glXDispSwap_ProgramNamedParameter4fvNV(GLbyte * pc)
+void
+__glXDispSwap_ProgramNamedParameter4fvNV(GLbyte * pc)
 {
     const GLsizei len =  (GLsizei )bswap_CARD32 ( pc +  4 );
 
-    CALL_ProgramNamedParameter4fvNV( GET_DISPATCH(), (
-         (GLuint  )bswap_CARD32 ( pc +  0 ),
-        len,
-         (const GLubyte *)(pc + 24),
-         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  8), 4 )
+    CALL_ProgramNamedParameter4fvNV(GET_DISPATCH(), ((GLuint)
+                                                     bswap_CARD32(pc + 0), len,
+                                                     (const GLubyte *) (pc +
+                                                                        24),
+                                                     (const GLfloat *)
+                                                     bswap_32_array((uint32_t
+                                                                     *) (pc +
+                                                                         8), 4)
     ) );
 }
 
-void __glXDispSwap_BlendEquationSeparateEXT(GLbyte * pc)
+void
+__glXDispSwap_BlendEquationSeparateEXT(GLbyte * pc)
 {
-    CALL_BlendEquationSeparateEXT( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_BlendEquationSeparateEXT(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 )
     ) );
 }
 
-void __glXDispSwap_BindFramebufferEXT(GLbyte * pc)
+void
+__glXDispSwap_BindFramebufferEXT(GLbyte * pc)
 {
-    CALL_BindFramebufferEXT( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_BindFramebufferEXT(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLuint  )bswap_CARD32 ( pc +  4 )
     ) );
 }
 
-void __glXDispSwap_BindRenderbufferEXT(GLbyte * pc)
+void
+__glXDispSwap_BindRenderbufferEXT(GLbyte * pc)
 {
-    CALL_BindRenderbufferEXT( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_BindRenderbufferEXT(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLuint  )bswap_CARD32 ( pc +  4 )
     ) );
 }
 
-int __glXDispSwap_CheckFramebufferStatusEXT(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_CheckFramebufferStatusEXT(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
         GLenum retval;
-        retval = CALL_CheckFramebufferStatusEXT( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 )
+
+        retval = CALL_CheckFramebufferStatusEXT(GET_DISPATCH(), ((GLenum)
+                                                                 bswap_ENUM(pc +
+                                                                            0)
         ) );
         __glXSendReplySwap(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
         error = Success;
@@ -5861,86 +6515,102 @@ int __glXDispSwap_CheckFramebufferStatusEXT(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-void __glXDispSwap_DeleteFramebuffersEXT(GLbyte * pc)
+void
+__glXDispSwap_DeleteFramebuffersEXT(GLbyte * pc)
 {
     const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
 
-    CALL_DeleteFramebuffersEXT( GET_DISPATCH(), (
-        n,
-         (const GLuint *)bswap_32_array( (uint32_t *) (pc +  4), 0 )
+    CALL_DeleteFramebuffersEXT(GET_DISPATCH(), (n,
+                                                (const GLuint *)
+                                                bswap_32_array((uint32_t *) (pc
+                                                                             +
+                                                                             4),
+                                                               0)
     ) );
 }
 
-void __glXDispSwap_DeleteRenderbuffersEXT(GLbyte * pc)
+void
+__glXDispSwap_DeleteRenderbuffersEXT(GLbyte * pc)
 {
     const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
 
-    CALL_DeleteRenderbuffersEXT( GET_DISPATCH(), (
-        n,
-         (const GLuint *)bswap_32_array( (uint32_t *) (pc +  4), 0 )
+    CALL_DeleteRenderbuffersEXT(GET_DISPATCH(), (n,
+                                                 (const GLuint *)
+                                                 bswap_32_array((uint32_t *) (pc
+                                                                              +
+                                                                              4),
+                                                                0)
     ) );
 }
 
-void __glXDispSwap_FramebufferRenderbufferEXT(GLbyte * pc)
+void
+__glXDispSwap_FramebufferRenderbufferEXT(GLbyte * pc)
 {
-    CALL_FramebufferRenderbufferEXT( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-         (GLenum  )bswap_ENUM   ( pc +  4 ),
-         (GLenum  )bswap_ENUM   ( pc +  8 ),
-         (GLuint  )bswap_CARD32 ( pc + 12 )
+    CALL_FramebufferRenderbufferEXT(GET_DISPATCH(), ((GLenum)
+                                                     bswap_ENUM(pc + 0),
+                                                     (GLenum) bswap_ENUM(pc +
+                                                                         4),
+                                                     (GLenum) bswap_ENUM(pc +
+                                                                         8),
+                                                     (GLuint) bswap_CARD32(pc +
+                                                                           12)
     ) );
 }
 
-void __glXDispSwap_FramebufferTexture1DEXT(GLbyte * pc)
+void
+__glXDispSwap_FramebufferTexture1DEXT(GLbyte * pc)
 {
-    CALL_FramebufferTexture1DEXT( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_FramebufferTexture1DEXT(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 ),
          (GLenum  )bswap_ENUM   ( pc +  8 ),
-         (GLuint  )bswap_CARD32 ( pc + 12 ),
+                                                  (GLuint) bswap_CARD32(pc +
+                                                                        12),
          (GLint   )bswap_CARD32 ( pc + 16 )
     ) );
 }
 
-void __glXDispSwap_FramebufferTexture2DEXT(GLbyte * pc)
+void
+__glXDispSwap_FramebufferTexture2DEXT(GLbyte * pc)
 {
-    CALL_FramebufferTexture2DEXT( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_FramebufferTexture2DEXT(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 ),
          (GLenum  )bswap_ENUM   ( pc +  8 ),
-         (GLuint  )bswap_CARD32 ( pc + 12 ),
+                                                  (GLuint) bswap_CARD32(pc +
+                                                                        12),
          (GLint   )bswap_CARD32 ( pc + 16 )
     ) );
 }
 
-void __glXDispSwap_FramebufferTexture3DEXT(GLbyte * pc)
+void
+__glXDispSwap_FramebufferTexture3DEXT(GLbyte * pc)
 {
-    CALL_FramebufferTexture3DEXT( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_FramebufferTexture3DEXT(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 ),
          (GLenum  )bswap_ENUM   ( pc +  8 ),
-         (GLuint  )bswap_CARD32 ( pc + 12 ),
+                                                  (GLuint) bswap_CARD32(pc +
+                                                                        12),
          (GLint   )bswap_CARD32 ( pc + 16 ),
          (GLint   )bswap_CARD32 ( pc + 20 )
     ) );
 }
 
-int __glXDispSwap_GenFramebuffersEXT(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GenFramebuffersEXT(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
         const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
 
         GLuint answerBuffer[200];
-        GLuint * framebuffers = __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer), 4);
-        CALL_GenFramebuffersEXT( GET_DISPATCH(), (
-            n,
-            framebuffers
-        ) );
+        GLuint *framebuffers =
+            __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer),
+                                 4);
+        CALL_GenFramebuffersEXT(GET_DISPATCH(), (n, framebuffers));
         (void) bswap_32_array( (uint32_t *) framebuffers, n );
         __glXSendReplySwap(cl->client, framebuffers, n, 4, GL_TRUE, 0);
         error = Success;
@@ -5949,22 +6619,23 @@ int __glXDispSwap_GenFramebuffersEXT(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_GenRenderbuffersEXT(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GenRenderbuffersEXT(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
         const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
 
         GLuint answerBuffer[200];
-        GLuint * renderbuffers = __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer), 4);
-        CALL_GenRenderbuffersEXT( GET_DISPATCH(), (
-            n,
-            renderbuffers
-        ) );
+        GLuint *renderbuffers =
+            __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer),
+                                 4);
+        CALL_GenRenderbuffersEXT(GET_DISPATCH(), (n, renderbuffers));
         (void) bswap_32_array( (uint32_t *) renderbuffers, n );
         __glXSendReplySwap(cl->client, renderbuffers, n, 4, GL_TRUE, 0);
         error = Success;
@@ -5973,28 +6644,36 @@ int __glXDispSwap_GenRenderbuffersEXT(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-void __glXDispSwap_GenerateMipmapEXT(GLbyte * pc)
+void
+__glXDispSwap_GenerateMipmapEXT(GLbyte * pc)
 {
-    CALL_GenerateMipmapEXT( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 )
+    CALL_GenerateMipmapEXT(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
     ) );
 }
 
-int __glXDispSwap_GetFramebufferAttachmentParameterivEXT(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetFramebufferAttachmentParameterivEXT(__GLXclientState * cl,
+                                                     GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
         GLint params[1];
-        CALL_GetFramebufferAttachmentParameterivEXT( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-             (GLenum  )bswap_ENUM   ( pc +  4 ),
-             (GLenum  )bswap_ENUM   ( pc +  8 ),
-            params
-        ) );
+
+        CALL_GetFramebufferAttachmentParameterivEXT(GET_DISPATCH(), ((GLenum)
+                                                                     bswap_ENUM
+                                                                     (pc + 0),
+                                                                     (GLenum)
+                                                                     bswap_ENUM
+                                                                     (pc + 4),
+                                                                     (GLenum)
+                                                                     bswap_ENUM
+                                                                     (pc + 8),
+                                                                     params));
         (void) bswap_32_array( (uint32_t *) params, 1 );
         __glXSendReplySwap(cl->client, params, 1, 4, GL_FALSE, 0);
         error = Success;
@@ -6003,20 +6682,23 @@ int __glXDispSwap_GetFramebufferAttachmentParameterivEXT(__GLXclientState *cl, G
     return error;
 }
 
-int __glXDispSwap_GetRenderbufferParameterivEXT(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_GetRenderbufferParameterivEXT(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
         GLint params[1];
-        CALL_GetRenderbufferParameterivEXT( GET_DISPATCH(), (
-             (GLenum  )bswap_ENUM   ( pc +  0 ),
-             (GLenum  )bswap_ENUM   ( pc +  4 ),
-            params
-        ) );
+
+        CALL_GetRenderbufferParameterivEXT(GET_DISPATCH(), ((GLenum)
+                                                            bswap_ENUM(pc + 0),
+                                                            (GLenum)
+                                                            bswap_ENUM(pc + 4),
+                                                            params));
         (void) bswap_32_array( (uint32_t *) params, 1 );
         __glXSendReplySwap(cl->client, params, 1, 4, GL_FALSE, 0);
         error = Success;
@@ -6025,17 +6707,20 @@ int __glXDispSwap_GetRenderbufferParameterivEXT(__GLXclientState *cl, GLbyte *pc
     return error;
 }
 
-int __glXDispSwap_IsFramebufferEXT(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_IsFramebufferEXT(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
         GLboolean retval;
-        retval = CALL_IsFramebufferEXT( GET_DISPATCH(), (
-             (GLuint  )bswap_CARD32 ( pc +  0 )
+
+        retval = CALL_IsFramebufferEXT(GET_DISPATCH(), ((GLuint)
+                                                        bswap_CARD32(pc + 0)
         ) );
         __glXSendReplySwap(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
         error = Success;
@@ -6044,17 +6729,20 @@ int __glXDispSwap_IsFramebufferEXT(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-int __glXDispSwap_IsRenderbufferEXT(__GLXclientState *cl, GLbyte *pc)
+int
+__glXDispSwap_IsRenderbufferEXT(__GLXclientState * cl, GLbyte * pc)
 {
     xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
     int error;
-    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
+    __GLXcontext *const cx =
+        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
 
     pc += __GLX_VENDPRIV_HDR_SIZE;
     if ( cx != NULL ) {
         GLboolean retval;
-        retval = CALL_IsRenderbufferEXT( GET_DISPATCH(), (
-             (GLuint  )bswap_CARD32 ( pc +  0 )
+
+        retval = CALL_IsRenderbufferEXT(GET_DISPATCH(), ((GLuint)
+                                                         bswap_CARD32(pc + 0)
         ) );
         __glXSendReplySwap(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
         error = Success;
@@ -6063,20 +6751,20 @@ int __glXDispSwap_IsRenderbufferEXT(__GLXclientState *cl, GLbyte *pc)
     return error;
 }
 
-void __glXDispSwap_RenderbufferStorageEXT(GLbyte * pc)
+void
+__glXDispSwap_RenderbufferStorageEXT(GLbyte * pc)
 {
-    CALL_RenderbufferStorageEXT( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
+    CALL_RenderbufferStorageEXT(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
          (GLenum  )bswap_ENUM   ( pc +  4 ),
          (GLsizei )bswap_CARD32 ( pc +  8 ),
          (GLsizei )bswap_CARD32 ( pc + 12 )
     ) );
 }
 
-void __glXDispSwap_BlitFramebufferEXT(GLbyte * pc)
+void
+__glXDispSwap_BlitFramebufferEXT(GLbyte * pc)
 {
-    CALL_BlitFramebufferEXT( GET_DISPATCH(), (
-         (GLint   )bswap_CARD32 ( pc +  0 ),
+    CALL_BlitFramebufferEXT(GET_DISPATCH(), ((GLint) bswap_CARD32(pc + 0),
          (GLint   )bswap_CARD32 ( pc +  4 ),
          (GLint   )bswap_CARD32 ( pc +  8 ),
          (GLint   )bswap_CARD32 ( pc + 12 ),
@@ -6089,14 +6777,18 @@ void __glXDispSwap_BlitFramebufferEXT(GLbyte * pc)
     ) );
 }
 
-void __glXDispSwap_FramebufferTextureLayerEXT(GLbyte * pc)
+void
+__glXDispSwap_FramebufferTextureLayerEXT(GLbyte * pc)
 {
-    CALL_FramebufferTextureLayerEXT( GET_DISPATCH(), (
-         (GLenum  )bswap_ENUM   ( pc +  0 ),
-         (GLenum  )bswap_ENUM   ( pc +  4 ),
-         (GLuint  )bswap_CARD32 ( pc +  8 ),
-         (GLint   )bswap_CARD32 ( pc + 12 ),
-         (GLint   )bswap_CARD32 ( pc + 16 )
+    CALL_FramebufferTextureLayerEXT(GET_DISPATCH(), ((GLenum)
+                                                     bswap_ENUM(pc + 0),
+                                                     (GLenum) bswap_ENUM(pc +
+                                                                         4),
+                                                     (GLuint) bswap_CARD32(pc +
+                                                                           8),
+                                                     (GLint) bswap_CARD32(pc +
+                                                                          12),
+                                                     (GLint) bswap_CARD32(pc +
+                                                                          16)
     ) );
 }
-
