diff --git a/hw/xfree86/os-support/solaris/sun_init.c b/hw/xfree86/os-support/solaris/sun_init.c
index 800fc1c..4b75a98 100644
--- a/hw/xfree86/os-support/solaris/sun_init.c
+++ b/hw/xfree86/os-support/solaris/sun_init.c
@@ -48,6 +48,7 @@
 static Bool KeepTty = FALSE;
 static Bool Protect0 = FALSE;
 static Bool UseConsole = FALSE;
+
 #ifdef HAS_USL_VTS
 static int VTnum = -1;
 static int xf86StartVT = -1;
@@ -83,6 +84,7 @@ void
 xf86OpenConsole(void)
 {
     int i;
+
 #ifdef HAS_USL_VTS
     int fd;
     struct vt_mode VT;
@@ -90,26 +92,22 @@ xf86OpenConsole(void)
     MessageType from = X_PROBED;
 #endif
 
-    if (serverGeneration == 1)
-    {
+    if (serverGeneration == 1) {
 	/* Check if we're run with euid==0 */
 	if (geteuid() != 0)
 	    FatalError("xf86OpenConsole: Server must be suid root\n");
 
 	/* Protect page 0 to help find NULL dereferencing */
 	/* mprotect() doesn't seem to work */
-	if (Protect0)
-	{
+        if (Protect0) {
 	    int fd = -1;
 
-	    if ((fd = open("/dev/zero", O_RDONLY, 0)) < 0)
-	    {
+            if ((fd = open("/dev/zero", O_RDONLY, 0)) < 0) {
 		xf86Msg(X_WARNING,
 			"xf86OpenConsole: cannot open /dev/zero (%s)\n",
 			strerror(errno));
 	    }
-	    else
-	    {
+            else {
 		if (mmap(0, 0x1000, PROT_NONE,
 			 MAP_FIXED | MAP_SHARED, fd, 0) == MAP_FAILED)
 		    xf86Msg(X_WARNING,
@@ -125,16 +123,13 @@ xf86OpenConsole(void)
 	/*
 	 * Setup the virtual terminal manager
 	 */
-	if ((fd = open("/dev/vt/0",O_RDWR,0)) == -1)
-	{
+        if ((fd = open("/dev/vt/0", O_RDWR, 0)) == -1) {
 	    xf86ErrorF("xf86OpenConsole: Cannot open /dev/vt/0 (%s)\n",
 		       strerror(errno));
 	    vtEnabled = 0;
 	}
-	else
-	{
-	    if (ioctl(fd, VT_ENABLED, &vtEnabled) < 0)
-	    {
+        else {
+            if (ioctl(fd, VT_ENABLED, &vtEnabled) < 0) {
 		xf86ErrorF("xf86OpenConsole: VT_ENABLED failed (%s)\n",
 			   strerror(errno));
 		vtEnabled = 0;
@@ -142,21 +137,19 @@ xf86OpenConsole(void)
 	}
 #endif /*  HAS_USL_VTS */
 
-	if (UseConsole)
-	{
+        if (UseConsole) {
 	    strlcpy(consoleDev, SOL_CONSOLE_DEV, sizeof(consoleDev));
 
 #ifdef HAS_USL_VTS
 	    xf86Info.vtno = CONSOLE_VTNO;
 
-	    if (vtEnabled == 0)
-	    {
+            if (vtEnabled == 0) {
 		xf86StartVT = 0;
 	    }
-	    else
-	    {
+            else {
 		if (ioctl(fd, VT_GETSTATE, &vtinfo) < 0)
-		    FatalError("xf86OpenConsole: Cannot determine current VT\n");
+                    FatalError
+                        ("xf86OpenConsole: Cannot determine current VT\n");
 		xf86StartVT = vtinfo.v_active;
 	    }
 #endif /*  HAS_USL_VTS */
@@ -164,8 +157,7 @@ xf86OpenConsole(void)
 	}
 
 #ifdef HAS_USL_VTS
-	if (vtEnabled == 0)
-	{
+        if (vtEnabled == 0) {
 	    /* VT not enabled - kernel too old or Sparc platforms
 	       without visual_io support */
 	    xf86Msg(from, "VT infrastructure is not available\n");
@@ -181,21 +173,17 @@ xf86OpenConsole(void)
 
 	xf86StartVT = vtinfo.v_active;
 
-	if (VTnum != -1)
-	{
+        if (VTnum != -1) {
 	    xf86Info.vtno = VTnum;
 	    from = X_CMDLINE;
 	}
-	else if (xf86Info.ShareVTs)
-	{
+        else if (xf86Info.ShareVTs) {
 	    xf86Info.vtno = vtinfo.v_active;
 	    from = X_CMDLINE;
 	}
-	else
-	{
+        else {
 	    if ((ioctl(fd, VT_OPENQRY, &xf86Info.vtno) < 0) ||
-		(xf86Info.vtno == -1))
-	    {
+                (xf86Info.vtno == -1)) {
 		FatalError("xf86OpenConsole: Cannot find a free VT\n");
 	    }
 	}
@@ -203,8 +191,7 @@ xf86OpenConsole(void)
 	xf86Msg(from, "using VT number %d\n\n", xf86Info.vtno);
 	snprintf(consoleDev, PATH_MAX, "/dev/vt/%d", xf86Info.vtno);
 
-	if (fd != -1)
-	{
+        if (fd != -1) {
 	    close(fd);
 	}
 
@@ -225,8 +212,7 @@ OPENCONSOLE:
 	if (xf86Info.ShareVTs)
 	    return;
 
-	if (vtEnabled)
-	{
+        if (vtEnabled) {
 	    /*
 	     * Now get the VT
 	     */
@@ -266,11 +252,10 @@ OPENCONSOLE:
 	}
 #endif
     }
-    else /* serverGeneration != 1 */
-    {
+    else {                      /* serverGeneration != 1 */
+
 #ifdef HAS_USL_VTS
-	if (vtEnabled && !xf86Info.ShareVTs)
-	{
+        if (vtEnabled && !xf86Info.ShareVTs) {
 	    /*
 	     * Now re-get the VT
 	     */
@@ -320,7 +305,8 @@ xf86CloseConsole(void)
 	    xf86Msg(X_WARNING,
 		    "xf86CloseConsole():  unable to open framebuffer (%s)\n",
 		    strerror(errno));
-	} else {
+        }
+        else {
 	    struct fbgattr fbattr;
 
 	    if ((ioctl(fd, FBIOGATTR, &fbattr) < 0) &&
@@ -328,7 +314,8 @@ xf86CloseConsole(void)
 		xf86Msg(X_WARNING,
 			"xf86CloseConsole():  unable to retrieve framebuffer"
 			" attributes (%s)\n", strerror(errno));
-	    } else {
+            }
+            else {
 		pointer fbdata;
 
 		fbdata = mmap(NULL, fbattr.fbtype.fb_size,
@@ -337,7 +324,8 @@ xf86CloseConsole(void)
 		    xf86Msg(X_WARNING,
 			    "xf86CloseConsole():  unable to mmap framebuffer"
 			    " (%s)\n", strerror(errno));
-		} else {
+                }
+                else {
 		    memset(fbdata, 0, fbattr.fbtype.fb_size);
 		    munmap(fbdata, fbattr.fbtype.fb_size);
 		}
@@ -355,10 +343,8 @@ xf86CloseConsole(void)
 #endif
 
 #ifdef HAS_USL_VTS
-    if (vtEnabled)
-    {
-	if (ioctl(xf86Info.consoleFd, VT_GETMODE, &VT) != -1)
-	{
+    if (vtEnabled) {
+        if (ioctl(xf86Info.consoleFd, VT_GETMODE, &VT) != -1) {
 	    VT.mode = VT_AUTO;		/* Set default vt handling */
 	    ioctl(xf86Info.consoleFd, VT_SETMODE, &VT);
 	}
@@ -379,8 +365,7 @@ xf86ProcessArgument(int argc, char **argv, int i)
      * Keep server from detaching from controlling tty.  This is useful when
      * debugging, so the server can receive keyboard signals.
      */
-    if (!strcmp(argv[i], "-keeptty"))
-    {
+    if (!strcmp(argv[i], "-keeptty")) {
 	KeepTty = TRUE;
 	return 1;
     }
@@ -389,8 +374,7 @@ xf86ProcessArgument(int argc, char **argv, int i)
      * Undocumented flag to protect page 0 from read/write to help catch NULL
      * pointer dereferences.  This is purely a debugging flag.
      */
-    if (!strcmp(argv[i], "-protect0"))
-    {
+    if (!strcmp(argv[i], "-protect0")) {
 	Protect0 = TRUE;
 	return 1;
     }
@@ -398,18 +382,15 @@ xf86ProcessArgument(int argc, char **argv, int i)
     /*
      * Use /dev/console as the console device.
      */
-    if (!strcmp(argv[i], "-C"))
-    {
+    if (!strcmp(argv[i], "-C")) {
 	UseConsole = TRUE;
 	return 1;
     }
 
 #ifdef HAS_USL_VTS
 
-    if ((argv[i][0] == 'v') && (argv[i][1] == 't'))
-    {
-	if (sscanf(argv[i], "vt%d", &VTnum) == 0)
-	{
+    if ((argv[i][0] == 'v') && (argv[i][1] == 't')) {
+        if (sscanf(argv[i], "vt%d", &VTnum) == 0) {
 	    UseMsg();
 	    VTnum = -1;
 	    return 0;
@@ -430,7 +411,8 @@ xf86ProcessArgument(int argc, char **argv, int i)
     return 0;
 }
 
-void xf86UseMsg(void)
+void
+xf86UseMsg(void)
 {
 #ifdef HAS_USL_VTS
     ErrorF("vtX                    Use the specified VT number\n");
