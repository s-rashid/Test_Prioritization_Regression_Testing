diff --git a/mi/miregion.c b/mi/miregion.c
index c03a68c..d9c6fb2 100644
--- a/mi/miregion.c
+++ b/mi/miregion.c
@@ -218,13 +218,13 @@ if (((numRects) < ((reg)->data->size >> 1)) && ((reg)->data->size > 50)) \
 }
 
 
-_X_EXPORT BoxRec miEmptyBox = {0, 0, 0, 0};
-_X_EXPORT RegDataRec miEmptyData = {0, 0};
+BoxRec miEmptyBox = {0, 0, 0, 0};
+RegDataRec miEmptyData = {0, 0};
 
-_X_EXPORT RegDataRec  miBrokenData = {0, 0};
+RegDataRec  miBrokenData = {0, 0};
 static RegionRec   miBrokenRegion = { { 0, 0, 0, 0 }, &miBrokenData };
 
-_X_EXPORT void
+void
 InitRegions (void)
 {
     pixman_region_set_static_pointers (&miEmptyBox, &miEmptyData, &miBrokenData);
@@ -236,7 +236,7 @@ InitRegions (void)
  *     REGION of "size" number of rectangles.
  *****************************************************************/
 
-_X_EXPORT RegionPtr
+RegionPtr
 miRegionCreate(BoxPtr rect, int size)
 {
     RegionPtr pReg;
@@ -250,7 +250,7 @@ miRegionCreate(BoxPtr rect, int size)
     return(pReg);
 }
 
-_X_EXPORT void
+void
 miRegionDestroy(RegionPtr pReg)
 {
     pixman_region_fini (pReg);
@@ -258,7 +258,7 @@ miRegionDestroy(RegionPtr pReg)
 	xfree(pReg);
 }
 
-_X_EXPORT void
+void
 miPrintRegion(RegionPtr rgn)
 {
     int num, size;
@@ -277,14 +277,14 @@ miPrintRegion(RegionPtr rgn)
     ErrorF("[mi] \n");
 }
 
-_X_EXPORT Bool
+Bool
 miRegionEqual(RegionPtr reg1, RegionPtr reg2)
 {
     return pixman_region_equal (reg1, reg2);
 }
 
 #ifdef DEBUG
-_X_EXPORT Bool
+Bool
 miValidRegion(RegionPtr reg)
 {
     int i, numRects;
@@ -335,7 +335,7 @@ miValidRegion(RegionPtr reg)
  *     Outer region rect is statically allocated.
  *****************************************************************/
 
-_X_EXPORT void
+void
 miRegionInit(RegionPtr pReg, BoxPtr rect, int size)
 {
     if (rect)
@@ -344,13 +344,13 @@ miRegionInit(RegionPtr pReg, BoxPtr rect, int size)
 	pixman_region_init (pReg);
 }
 
-_X_EXPORT void
+void
 miRegionUninit(RegionPtr pReg)
 {
     pixman_region_fini (pReg);
 }
 
-_X_EXPORT Bool
+Bool
 miRegionBreak (RegionPtr pReg)
 {
     xfreeData (pReg);
@@ -359,7 +359,7 @@ miRegionBreak (RegionPtr pReg)
     return FALSE;
 }
 
-_X_EXPORT Bool
+Bool
 miRectAlloc(RegionPtr pRgn, int n)
 {
     RegDataPtr	data;
@@ -398,7 +398,7 @@ miRectAlloc(RegionPtr pRgn, int n)
     return TRUE;
 }
 
-_X_EXPORT Bool
+Bool
 miRegionCopy(RegionPtr dst, RegionPtr src)
 {
     return pixman_region_copy (dst, src);
@@ -891,7 +891,7 @@ miSetExtents (RegionPtr pReg)
  *-----------------------------------------------------------------------
  */
 /*ARGSUSED*/
-_X_EXPORT Bool
+Bool
 miIntersect(
     RegionPtr	newReg,     /* destination Region */
     RegionPtr	reg1,
@@ -995,7 +995,7 @@ miUnionO (
     return TRUE;
 }
 
-_X_EXPORT Bool
+Bool
 miUnion(
     RegionPtr	newReg,          /* destination Region */
     RegionPtr	reg1,
@@ -1026,7 +1026,7 @@ miUnion(
  *      dstrgn is modified if rgn has rectangles.
  *
  */
-_X_EXPORT Bool
+Bool
 miRegionAppend(RegionPtr dstrgn, RegionPtr rgn)
 {
     int numRects, dnumRects, size;
@@ -1210,7 +1210,7 @@ QuickSortRects(
  *-----------------------------------------------------------------------
  */
 
-_X_EXPORT Bool
+Bool
 miRegionValidate(RegionPtr badreg, Bool *pOverlap)
 {
     /* Descriptor for regions under construction  in Step 2. */
@@ -1399,7 +1399,7 @@ bail:
     return miRegionBreak (badreg);
 }
 
-_X_EXPORT RegionPtr
+RegionPtr
 miRectsToRegion(int nrects, xRectangle *prect, int ctype)
 {
     
@@ -1513,7 +1513,7 @@ miRectsToRegion(int nrects, xRectangle *prect, int ctype)
  *
  *-----------------------------------------------------------------------
  */
-_X_EXPORT Bool
+Bool
 miSubtract(RegionPtr regD, RegionPtr regM, RegionPtr regS)
 {
     return pixman_region_subtract (regD, regM, regS);
@@ -1538,7 +1538,7 @@ miSubtract(RegionPtr regD, RegionPtr regM, RegionPtr regS)
  *
  *-----------------------------------------------------------------------
  */
-_X_EXPORT Bool
+Bool
 miInverse(
     RegionPtr	  newReg,       /* Destination region */
     RegionPtr	  reg1,         /* Region to invert */
@@ -1547,7 +1547,7 @@ miInverse(
 {
     return pixman_region_inverse (newReg, reg1, invRect);
 }
-_X_EXPORT int
+int
 miRectIn(RegionPtr region, BoxPtr prect)
 {
     return pixman_region_contains_rectangle (region, prect);
@@ -1557,19 +1557,19 @@ miRectIn(RegionPtr region, BoxPtr prect)
    translates in place
 */
 
-_X_EXPORT void
+void
 miTranslateRegion(RegionPtr pReg, int x, int y)
 {
     pixman_region_translate (pReg, x, y);
 }
 
-_X_EXPORT void
+void
 miRegionReset(RegionPtr pReg, BoxPtr pBox)
 {
     pixman_region_reset (pReg, pBox);
 }
 
-_X_EXPORT Bool
+Bool
 miPointInRegion(
     RegionPtr pReg,
     int x,
@@ -1580,20 +1580,20 @@ miPointInRegion(
     return pixman_region_contains_point (pReg, x, y, box);
 }
 
-_X_EXPORT Bool
+Bool
 miRegionNotEmpty(RegionPtr pReg)
 {
     return pixman_region_not_empty (pReg);
 }
 
-_X_EXPORT Bool
+Bool
 miRegionBroken(RegionPtr pReg)
 {
     good(pReg);
     return (REGION_NAR(pReg));
 }
 
-_X_EXPORT void
+void
 miRegionEmpty(RegionPtr pReg)
 {
     good(pReg);
@@ -1603,7 +1603,7 @@ miRegionEmpty(RegionPtr pReg)
     pReg->data = &miEmptyData;
 }
 
-_X_EXPORT BoxPtr
+BoxPtr
 miRegionExtents(RegionPtr pReg)
 {
     good(pReg);
@@ -1728,7 +1728,7 @@ static void QuickSortSpans(
     returns the number of new, clipped scanlines.
 */
 
-_X_EXPORT int
+int
 miClipSpans(
     RegionPtr	prgnDst,
     DDXPointPtr ppt,
