diff --git a/os/utils.c b/os/utils.c
index 7ab7cc3..3dffbd8 100644
--- a/os/utils.c
+++ b/os/utils.c
@@ -1024,32 +1024,30 @@ set_font_authorizations(char **authorizations, int *authlen, pointer client)
 void *
 Xalloc(unsigned long amount)
 {
-    void *ptr;
+    /*
+     * Xalloc used to return NULL when large amount of memory is requested. In
+     * order to catch the buggy callers this warning has been added, slated to
+     * removal by anyone who touches this code (or just looks at it) in 2011.
+     *
+     * -- Mikhail Gusarov
+     */
+    if ((long)amount <= 0)
+	ErrorF("Warning: Xalloc: "
+	       "requesting unpleasantly large amount of memory: %lu bytes.\n",
+               amount);
 
-    if ((long)amount <= 0) {
-	return NULL;
-    }
-    /* aligned extra on long word boundary */
-    amount = (amount + (sizeof(long) - 1)) & ~(sizeof(long) - 1);
-    ptr = malloc(amount);
-    return ptr;
+    return malloc(amount);
 }
 
 /*****************
  * XNFalloc 
- * "no failure" realloc
+ * "no failure" alloc
  *****************/
 
 void *
 XNFalloc(unsigned long amount)
 {
-    void *ptr;
-
-    if ((long)amount <= 0)
-        return NULL;
-    /* aligned extra on long word boundary */
-    amount = (amount + (sizeof(long) - 1)) & ~(sizeof(long) - 1);
-    ptr = malloc(amount);
+    void *ptr = malloc(amount);
     if (!ptr)
         FatalError("Out of memory");
     return ptr;
@@ -1062,12 +1060,7 @@ XNFalloc(unsigned long amount)
 void *
 Xcalloc(unsigned long amount)
 {
-    void *ret;
-
-    ret = Xalloc (amount);
-    if (ret)
-	bzero (ret, (int) amount);
-    return ret;
+    return calloc(1, amount);
 }
 
 /*****************
@@ -1077,13 +1070,9 @@ Xcalloc(unsigned long amount)
 void *
 XNFcalloc(unsigned long amount)
 {
-    void *ret;
-
-    ret = Xalloc (amount);
-    if (ret)
-	bzero (ret, (int) amount);
-    else if ((long)amount > 0)
-        FatalError("Out of memory");
+    void *ret = calloc(1, amount);
+    if (!ret)
+        FatalError("XNFcalloc: Out of memory");
     return ret;
 }
 
@@ -1092,21 +1081,21 @@ XNFcalloc(unsigned long amount)
  *****************/
 
 void *
-Xrealloc(pointer ptr, unsigned long amount)
+Xrealloc(void *ptr, unsigned long amount)
 {
+    /*
+     * Xrealloc used to return NULL when large amount of memory is requested. In
+     * order to catch the buggy callers this warning has been added, slated to
+     * removal by anyone who touches this code (or just looks at it) in 2011.
+     *
+     * -- Mikhail Gusarov
+     */
     if ((long)amount <= 0)
-    {
-	if (ptr && !amount)
-	    free(ptr);
-	return NULL;
-    }
-    amount = (amount + (sizeof(long) - 1)) & ~(sizeof(long) - 1);
-    if (ptr)
-        ptr = realloc(ptr, amount);
-    else
-	ptr = malloc(amount);
+	ErrorF("Warning: Xrealloc: "
+	       "requesting unpleasantly large amount of memory: %lu bytes.\n",
+               amount);
 
-    return ptr;
+    return realloc(ptr, amount);
 }
                     
 /*****************
@@ -1115,14 +1104,12 @@ Xrealloc(pointer ptr, unsigned long amount)
  *****************/
 
 void *
-XNFrealloc(pointer ptr, unsigned long amount)
-{
-    if ((ptr = Xrealloc(ptr, amount)) == NULL)
+XNFrealloc(void *ptr, unsigned long amount)
     {
-	if ((long)amount > 0)
-            FatalError( "Out of memory" );
-    }
-    return ptr;
+    void *ret = realloc(ptr, amount);
+    if (!ret)
+	FatalError("XNFrealloc: Out of memory");
+    return ret;
 }
 
 /*****************
@@ -1131,9 +1118,8 @@ XNFrealloc(pointer ptr, unsigned long amount)
  *****************/    
 
 void
-Xfree(pointer ptr)
+Xfree(void *ptr)
 {
-    if (ptr)
 	free(ptr); 
 }
 
@@ -1141,29 +1127,23 @@ Xfree(pointer ptr)
 char *
 Xstrdup(const char *s)
 {
-    char *sd;
-
     if (s == NULL)
 	return NULL;
-
-    sd = Xalloc(strlen(s) + 1);
-    if (sd != NULL)
-	strcpy(sd, s);
-    return sd;
+    return strdup(s);
 }
 
-
 char *
 XNFstrdup(const char *s)
 {
-    char *sd;
+    char *ret;
 
     if (s == NULL)
 	return NULL;
 
-    sd = XNFalloc(strlen(s) + 1);
-    strcpy(sd, s);
-    return sd;
+    ret = strdup(s);
+    if (!ret)
+	FatalError("XNFstrdup: Out of memory");
+    return ret;
 }
 
 
