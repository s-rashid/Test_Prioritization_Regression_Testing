diff --git a/hw/xfree86/dri2/dri2.c b/hw/xfree86/dri2/dri2.c
index 75a99c1..4c52757 100644
--- a/hw/xfree86/dri2/dri2.c
+++ b/hw/xfree86/dri2/dri2.c
@@ -55,14 +55,21 @@ typedef struct _DRI2Drawable {
     int			 height;
     DRI2BufferPtr	 buffers;
     int			 bufferCount;
+    unsigned int	 pendingSequence;
 } DRI2DrawableRec, *DRI2DrawablePtr;
 
 typedef struct _DRI2Screen {
     const char			*driverName;
+    const char			*deviceName;
     int				 fd;
+    unsigned int		 lastSequence;
     DRI2CreateBuffersProcPtr	 CreateBuffers;
     DRI2DestroyBuffersProcPtr	 DestroyBuffers;
-    DRI2SwapBuffersProcPtr	 SwapBuffers;
+    DRI2CopyRegionProcPtr	 CopyRegion;
+    DRI2WaitProcPtr		 Wait;
+
+    ClipNotifyProcPtr            ClipNotify;
+    HandleExposuresProcPtr       HandleExposures;
 } DRI2ScreenRec, *DRI2ScreenPtr;
 
 static DRI2ScreenPtr
@@ -153,28 +160,34 @@ DRI2GetBuffers(DrawablePtr pDraw, int *width, int *height,
     return pPriv->buffers;
 }
 
-void
-DRI2SwapBuffers(DrawablePtr pDraw, int x, int y, int width, int height)
+int
+DRI2CopyRegion(DrawablePtr pDraw, RegionPtr pRegion,
+	       unsigned int dest, unsigned int src)
 {
     DRI2ScreenPtr   ds = DRI2GetScreen(pDraw->pScreen);
     DRI2DrawablePtr pPriv;
-    DRI2BufferPtr   pSrcBuffer;
+    DRI2BufferPtr   pDestBuffer, pSrcBuffer;
     int		    i;
 
     pPriv = DRI2GetDrawable(pDraw);
     if (pPriv == NULL)
-	return;
+	return BadDrawable;
 
+    pDestBuffer = NULL;
     pSrcBuffer = NULL;
     for (i = 0; i < pPriv->bufferCount; i++)
     {
-	if (pPriv->buffers[i].attachment == DRI2_BUFFER_BACK_LEFT)
+	if (pPriv->buffers[i].attachment == dest)
+	    pDestBuffer = &pPriv->buffers[i];
+	if (pPriv->buffers[i].attachment == src)
 	    pSrcBuffer = &pPriv->buffers[i];
     }
-    if (pSrcBuffer == NULL)
-	return;
+    if (pSrcBuffer == NULL || pDestBuffer == NULL)
+	return BadValue;
+		
+    (*ds->CopyRegion)(pDraw, pRegion, pDestBuffer, pSrcBuffer);
 		
-    (*ds->SwapBuffers)(pDraw, pSrcBuffer, x, y, width, height);
+    return Success;
 }
 
 void
@@ -209,21 +222,26 @@ DRI2DestroyDrawable(DrawablePtr pDraw)
 }
 
 Bool
-DRI2Connect(ScreenPtr pScreen, int *fd, const char **driverName)
+DRI2Connect(ScreenPtr pScreen, unsigned int driverType, int *fd,
+	    const char **driverName, const char **deviceName)
 {
     DRI2ScreenPtr ds = DRI2GetScreen(pScreen);
 
     if (ds == NULL)
 	return FALSE;
 
+    if (driverType != DRI2DriverDRI)
+	return BadValue;
+
     *fd = ds->fd;
     *driverName = ds->driverName;
+    *deviceName = ds->deviceName;
 
     return TRUE;
 }
 
 Bool
-DRI2AuthConnection(ScreenPtr pScreen, drm_magic_t magic)
+DRI2Authenticate(ScreenPtr pScreen, drm_magic_t magic)
 {
     DRI2ScreenPtr ds = DRI2GetScreen(pScreen);
 
@@ -233,6 +251,23 @@ DRI2AuthConnection(ScreenPtr pScreen, drm_magic_t magic)
     return TRUE;
 }
 
+static void
+DRI2ClipNotify(WindowPtr pWin, int dx, int dy)
+{
+    ScreenPtr           pScreen = pWin->drawable.pScreen;
+    DRI2ScreenPtr       ds = DRI2GetScreen(pScreen);
+    DRI2DrawablePtr     dd = DRI2GetDrawable(&pWin->drawable);
+
+    if (ds->lastSequence < dd->pendingSequence && ds->Wait)
+	ds->Wait(pWin, dd->pendingSequence);
+
+    if (ds->ClipNotify) {
+	pScreen->ClipNotify = ds->ClipNotify;
+	pScreen->ClipNotify(pWin, dx, dy);
+	pScreen->ClipNotify = DRI2ClipNotify;
+    }
+}
+
 Bool
 DRI2ScreenInit(ScreenPtr pScreen, DRI2InfoPtr info)
 {
@@ -244,9 +279,14 @@ DRI2ScreenInit(ScreenPtr pScreen, DRI2InfoPtr info)
 
     ds->fd	       = info->fd;
     ds->driverName     = info->driverName;
+    ds->deviceName     = info->deviceName;
     ds->CreateBuffers  = info->CreateBuffers;
     ds->DestroyBuffers = info->DestroyBuffers;
-    ds->SwapBuffers    = info->SwapBuffers;
+    ds->CopyRegion     = info->CopyRegion;
+    ds->Wait           = info->Wait;
+
+    ds->ClipNotify              = pScreen->ClipNotify;
+    pScreen->ClipNotify         = DRI2ClipNotify;
 
     dixSetPrivate(&pScreen->devPrivates, dri2ScreenPrivateKey, ds);
 
@@ -260,6 +300,7 @@ DRI2CloseScreen(ScreenPtr pScreen)
 {
     DRI2ScreenPtr ds = DRI2GetScreen(pScreen);
 
+    pScreen->ClipNotify = ds->ClipNotify;
     xfree(ds);
     dixSetPrivate(&pScreen->devPrivates, dri2ScreenPrivateKey, NULL);
 }
