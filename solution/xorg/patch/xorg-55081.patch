diff --git a/dix/extension.c b/dix/extension.c
index af9ba31..3cdfb51 100644
--- a/dix/extension.c
+++ b/dix/extension.c
@@ -22,7 +22,6 @@ Except as contained in this notice, the name of The Open Group shall not be
 used in advertising or otherwise to promote the sale, use or other dealings
 in this Software without prior written authorization from The Open Group.
 
-
 Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts.
 
                         All Rights Reserved
@@ -98,8 +97,7 @@ AddExtension(const char *name, int NumEvents, int NumErrors,
     ext->name = strdup(name);
     ext->num_aliases = 0;
     ext->aliases = (char **)NULL;
-    if (!ext->name)
-    {
+    if (!ext->name) {
 	dixFreePrivates(ext->devPrivates, PRIVATE_EXTENSION);
 	free(ext);
 	return((ExtensionEntry *) NULL);
@@ -107,8 +105,7 @@ AddExtension(const char *name, int NumEvents, int NumErrors,
     i = NumExtensions;
     newexts = (ExtensionEntry **) realloc(extensions,
 					   (i + 1) * sizeof(ExtensionEntry *));
-    if (!newexts)
-    {
+    if (!newexts) {
 	free(ext->name);
 	dixFreePrivates(ext->devPrivates, PRIVATE_EXTENSION);
 	free(ext);
@@ -123,25 +120,21 @@ AddExtension(const char *name, int NumEvents, int NumErrors,
     ext->MinorOpcode = MinorOpcodeProc;
     ProcVector[i + EXTENSION_BASE] = MainProc;
     SwappedProcVector[i + EXTENSION_BASE] = SwappedMainProc;
-    if (NumEvents)
-    {
+    if (NumEvents) {
         ext->eventBase = lastEvent;
 	ext->eventLast = lastEvent + NumEvents;
 	lastEvent += NumEvents;
     }
-    else
-    {
+    else {
         ext->eventBase = 0;
         ext->eventLast = 0;
     }
-    if (NumErrors)
-    {
+    if (NumErrors) {
         ext->errorBase = lastError;
 	ext->errorLast = lastError + NumErrors;
 	lastError += NumErrors;
     }
-    else
-    {
+    else {
         ext->errorBase = 0;
         ext->errorLast = 0;
     }
@@ -150,7 +143,8 @@ AddExtension(const char *name, int NumEvents, int NumErrors,
     return ext;
 }
 
-Bool AddExtensionAlias(const char *alias, ExtensionEntry *ext)
+Bool
+AddExtensionAlias(const char *alias, ExtensionEntry * ext)
 {
     char *name;
     char **aliases;
@@ -175,18 +169,17 @@ FindExtension(const char *extname, int len)
 {
     int i, j;
 
-    for (i=0; i<NumExtensions; i++)
-    {
+    for (i = 0; i < NumExtensions; i++) {
 	if ((strlen(extensions[i]->name) == len) &&
 	    !strncmp(extname, extensions[i]->name, len))
 	    break;
-	for (j = extensions[i]->num_aliases; --j >= 0;)
-	{
+        for (j = extensions[i]->num_aliases; --j >= 0;) {
 	    if ((strlen(extensions[i]->aliases[j]) == len) &&
 		!strncmp(extname, extensions[i]->aliases[j], len))
 		break;
 	}
-	if (j >= 0) break;
+        if (j >= 0)
+            break;
     }
     return ((i == NumExtensions) ? -1 : i);
 }
@@ -232,8 +225,7 @@ CloseDownExtensions(void)
 {
     int i,j;
 
-    for (i = NumExtensions - 1; i >= 0; i--)
-    {
+    for (i = NumExtensions - 1; i >= 0; i--) {
 	if (extensions[i]->CloseDown)
 	    extensions[i]->CloseDown(extensions[i]);
 	NumExtensions = i;
@@ -255,6 +247,7 @@ ProcQueryExtension(ClientPtr client)
 {
     xQueryExtensionReply reply;
     int i;
+
     REQUEST(xQueryExtensionReq);
 
     REQUEST_FIXED_SIZE(xQueryExtensionReq, stuff->nbytes);
@@ -267,13 +260,11 @@ ProcQueryExtension(ClientPtr client)
 
     if ( ! NumExtensions )
         reply.present = xFalse;
-    else
-    {
+    else {
 	i = FindExtension((char *)&stuff[1], stuff->nbytes);
         if (i < 0 || XaceHook(XACE_EXT_ACCESS, client, extensions[i]))
             reply.present = xFalse;
-        else
-        {            
+        else {
             reply.present = xTrue;
 	    reply.major_opcode = extensions[i]->base;
 	    reply.first_event = extensions[i]->eventBase;
@@ -300,12 +291,10 @@ ProcListExtensions(ClientPtr client)
     reply.sequenceNumber = client->sequence;
     buffer = NULL;
 
-    if ( NumExtensions )
-    {
+    if (NumExtensions) {
         int i, j;
 
-        for (i=0;  i<NumExtensions; i++)
-	{
+        for (i = 0; i < NumExtensions; i++) {
 	    /* call callbacks to find out whether to show extension */
 	    if (XaceHook(XACE_EXT_ACCESS, client, extensions[i]) != Success)
 		continue;
@@ -319,17 +308,16 @@ ProcListExtensions(ClientPtr client)
 	buffer = bufptr = malloc(total_length);
 	if (!buffer)
 	    return BadAlloc;
-        for (i=0;  i<NumExtensions; i++)
-        {
+        for (i = 0; i < NumExtensions; i++) {
 	    int len;
+
 	    if (XaceHook(XACE_EXT_ACCESS, client, extensions[i]) != Success)
 		continue;
 
             *bufptr++ = len = strlen(extensions[i]->name);
 	    memmove(bufptr, extensions[i]->name,  len);
 	    bufptr += len;
-	    for (j = extensions[i]->num_aliases; --j >= 0;)
-	    {
+            for (j = extensions[i]->num_aliases; --j >= 0;) {
 		*bufptr++ = len = strlen(extensions[i]->aliases[j]);
 		memmove(bufptr, extensions[i]->aliases[j],  len);
 		bufptr += len;
