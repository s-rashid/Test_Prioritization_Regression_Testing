diff --git a/xkb/XKBMisc.c b/xkb/XKBMisc.c
index 96688be..6abd1d1 100644
--- a/xkb/XKBMisc.c
+++ b/xkb/XKBMisc.c
@@ -49,8 +49,7 @@ XkbKeyTypesForCoreSymbols(	XkbDescPtr	xkb,
 				int		map_width,
 				KeySym *	core_syms,
 				unsigned int 	protected,
-    				int *		types_inout,
-				KeySym *	xkb_syms_rtrn)
+                          int *types_inout, KeySym * xkb_syms_rtrn)
 {
 register int	i;
 unsigned int	empty;
@@ -93,8 +92,7 @@ BOOL		replicated = FALSE;
 
     /* Special case: if only the first group is explicit, and the symbols
      * replicate across all groups, then we have a Section 12.4 replication */
-    if ((protected & ~XkbExplicitKeyType1Mask) == 0)
-    {
+    if ((protected & ~XkbExplicitKeyType1Mask) == 0) {
         int j, width = nSyms[XkbGroup1Index];
 
         replicated = TRUE;
@@ -105,41 +103,37 @@ BOOL		replicated = FALSE;
             replicated = FALSE;
 
         /* Check CDECDE in ABABCDECDEABCDE */
-        for (i = 2; i < width && replicated; i++)
-        {
+        for (i = 2; i < width && replicated; i++) {
             if (CORE_SYM(2 + i) != CORE_SYM(i + width))
                 replicated = FALSE;
         }
 
         /* Check ABCDE in ABABCDECDEABCDE */
         for (j = 2; replicated &&
-                    j < XkbNumKbdGroups &&
-                    map_width >= width * (j + 1); j++)
-        {
-            for (i = 0; i < width && replicated; i++)
-            {
+             j < XkbNumKbdGroups && map_width >= width * (j + 1); j++) {
+            for (i = 0; i < width && replicated; i++) {
                 if (CORE_SYM(((i < 2) ? i : 2 + i)) != CORE_SYM(i + width * j))
                     replicated = FALSE;
             }
         }
     }
 
-    if (replicated)
-    {
+    if (replicated) {
 	nSyms[XkbGroup2Index]= 0;
 	nSyms[XkbGroup3Index]= 0;
 	nSyms[XkbGroup4Index]= 0;
 	nGroups= 1;
-    } else
-    {
+    }
+    else {
         tmp= nSyms[XkbGroup1Index]+nSyms[XkbGroup2Index];
         if ((tmp>=map_width)&&
-                ((protected&(XkbExplicitKeyType3Mask|XkbExplicitKeyType4Mask))==0)) {
+            ((protected & (XkbExplicitKeyType3Mask | XkbExplicitKeyType4Mask))
+             == 0)) {
             nSyms[XkbGroup3Index]= 0;
             nSyms[XkbGroup4Index]= 0;
             nGroups= 2;
-        } else
-        {
+        }
+        else {
             nGroups= 3;
             for (i=0;i<nSyms[XkbGroup3Index];i++,tmp++) {
                 xkb_syms_rtrn[XKB_OFFSET(XkbGroup3Index,i)]= CORE_SYM(tmp);
@@ -147,7 +141,8 @@ BOOL		replicated = FALSE;
             if ((tmp<map_width)||(protected&XkbExplicitKeyType4Mask)) {
                 nGroups= 4;
                 for (i=0;i<nSyms[XkbGroup4Index];i++,tmp++) {
-                    xkb_syms_rtrn[XKB_OFFSET(XkbGroup4Index,i)]= CORE_SYM(tmp);
+                    xkb_syms_rtrn[XKB_OFFSET(XkbGroup4Index, i)] =
+                        CORE_SYM(tmp);
                 }
             }
             else {
@@ -159,9 +154,11 @@ BOOL		replicated = FALSE;
     empty= 0;
     for (i=0;i<nGroups;i++) {
 	KeySym *syms;
+
 	syms= &xkb_syms_rtrn[XKB_OFFSET(i,0)];
 	if ((nSyms[i]>1)&&(syms[1]==NoSymbol)&&(syms[0]!=NoSymbol)) {
 	    KeySym upper,lower;
+
 	    XkbConvertCase(syms[0],&lower,&upper);
 	    if (upper!=lower) {
 		xkb_syms_rtrn[XKB_OFFSET(i,0)]= lower;
@@ -174,11 +171,13 @@ BOOL		replicated = FALSE;
 	/*	nSyms[i]=	1;*/
 	    }
 	}
-	if (((protected&(1<<i))==0)&&(types_inout[i]==XkbTwoLevelIndex)) {
+        if (((protected & (1 << i)) == 0) &&
+            (types_inout[i] == XkbTwoLevelIndex)) {
 	    if (XkbKSIsKeypad(syms[0])||XkbKSIsKeypad(syms[1]))
 		types_inout[i]= XkbKeypadIndex;
 	    else {
 		KeySym upper,lower;
+
 		XkbConvertCase(syms[0],&lower,&upper);
 		if ((syms[0]==lower)&&(syms[1]==upper))
 		    types_inout[i]= XkbAlphabeticIndex;
@@ -187,6 +186,7 @@ BOOL		replicated = FALSE;
 	if (syms[0]==NoSymbol) {
 	    register int n;
 	    Bool	found;
+
 	    for (n=1,found=FALSE;(!found)&&(n<nSyms[i]);n++) {
 		found= (syms[n]!=NoSymbol);
 	    }
@@ -206,8 +206,10 @@ BOOL		replicated = FALSE;
 	return 0;
 
     /* step 6: replicate group 1 into group two, if necessary */
-    if ((nGroups>1)&&((empty&(XkbGroup1Mask|XkbGroup2Mask))==XkbGroup2Mask)) {
-	if ((protected&(XkbExplicitKeyType1Mask|XkbExplicitKeyType2Mask))==0) {
+    if ((nGroups > 1) &&
+        ((empty & (XkbGroup1Mask | XkbGroup2Mask)) == XkbGroup2Mask)) {
+        if ((protected & (XkbExplicitKeyType1Mask | XkbExplicitKeyType2Mask)) ==
+            0) {
 	    nSyms[XkbGroup2Index]= nSyms[XkbGroup1Index];
 	    types_inout[XkbGroup2Index]= types_inout[XkbGroup1Index];
 	    memcpy((char *)&xkb_syms_rtrn[2],(char *)xkb_syms_rtrn,
@@ -228,20 +230,26 @@ BOOL		replicated = FALSE;
      */
     if (nGroups>1) {
 	Bool sameType,allOneLevel, canonical = TRUE;
+
 	allOneLevel= (xkb->map->types[types_inout[0]].num_levels==1);
-	for (i=1,sameType=TRUE;(allOneLevel||sameType)&&(i<nGroups);i++) {
-	    sameType=(sameType&&(types_inout[i]==types_inout[XkbGroup1Index]));
+        for (i = 1, sameType = TRUE; (allOneLevel || sameType) && (i < nGroups);
+             i++) {
+            sameType = (sameType &&
+                        (types_inout[i] == types_inout[XkbGroup1Index]));
 	    if (allOneLevel)
 		allOneLevel= (xkb->map->types[types_inout[i]].num_levels==1);
 	    if (types_inout[i] > XkbLastRequiredType)
 		canonical = FALSE;
 	}
 	if (((sameType) || canonical)&&
-	    (!(protected&(XkbExplicitKeyTypesMask&~XkbExplicitKeyType1Mask)))){
+            (!(protected &
+               (XkbExplicitKeyTypesMask & ~XkbExplicitKeyType1Mask)))) {
 	    register int s;
 	    Bool	identical;
+
 	    for (i=1,identical=TRUE;identical&&(i<nGroups);i++) {
 		KeySym *syms;
+
                 if (nSyms[i] != nSyms[XkbGroup1Index])
                     identical = FALSE;
 		syms= &xkb_syms_rtrn[XKB_OFFSET(i,0)];
@@ -255,6 +263,7 @@ BOOL		replicated = FALSE;
 	}
 	if (allOneLevel && (nGroups>1)) {
 	    KeySym *syms;
+
 	    syms= &xkb_syms_rtrn[nSyms[XkbGroup1Index]];
 	    nSyms[XkbGroup1Index]= 1;
 	    for (i=1;i<nGroups;i++) {
@@ -269,9 +278,7 @@ BOOL		replicated = FALSE;
 
 static XkbSymInterpretPtr
 _XkbFindMatchingInterp(	XkbDescPtr	xkb,
-			KeySym 		sym,
-			unsigned int	real_mods,
-			unsigned int	level)
+                       KeySym sym, unsigned int real_mods, unsigned int level)
 {
 register unsigned	 i;
 XkbSymInterpretPtr	 interp,rtrn;
@@ -282,9 +289,11 @@ CARD8			 mods;
     for (i=0;i<xkb->compat->num_si;i++,interp++) {
 	if ((interp->sym==NoSymbol)||(sym==interp->sym)) {
 	    int match;
+
 	    if ((level==0)||((interp->match&XkbSI_LevelOneOnly)==0))
 		 mods= real_mods;
-	    else mods= 0;
+            else
+                mods = 0;
 	    switch (interp->match&XkbSI_OpMask) {
 		case XkbSI_NoneOf:
 		    match= ((interp->mods&mods)==0);
@@ -340,7 +349,9 @@ _XkbSetActionKeyMods(XkbDescPtr xkb,XkbAction *act,unsigned mods)
 unsigned	tmp;
 
     switch (act->type) {
-	case XkbSA_SetMods: case XkbSA_LatchMods: case XkbSA_LockMods:
+    case XkbSA_SetMods:
+    case XkbSA_LatchMods:
+    case XkbSA_LockMods:
 	    if (act->mods.flags&XkbSA_UseModMapMods)
 		act->mods.real_mods= act->mods.mask= mods;
 	    if ((tmp= XkbModActionVMods(&act->mods))!=0) {
@@ -400,12 +411,14 @@ unsigned		changed,tmp;
     found= 0;
     for (n=0;n<nSyms;n++) {
 	unsigned level= (n%XkbKeyGroupsWidth(xkb,key));
+
 	interps[n]= NULL;
 	if (syms[n]!=NoSymbol) {
 	    interps[n]= _XkbFindMatchingInterp(xkb,syms[n],mods,level);
 	    if (interps[n]&&interps[n]->act.type!=XkbSA_NoAction)
 		found++;
-	    else interps[n]= NULL;
+            else
+                interps[n] = NULL;
 	}
     }
     /* 1/28/96 (ef) -- XXX! WORKING HERE */
@@ -418,6 +431,7 @@ unsigned		changed,tmp;
     else {
 	XkbAction *pActs;
 	unsigned int	new_vmodmask;
+
 	changed|= XkbKeyActionsMask;
 	pActs= XkbResizeKeyActions(xkb,key,nSyms);
 	if (!pActs) {
@@ -436,10 +450,12 @@ unsigned		changed,tmp;
 		     if (interps[n]->virtual_mod!=XkbNoModifier)
 			new_vmodmask|= (1<<interps[n]->virtual_mod);
 		}
-		else effMods= 0;
+                else
+                    effMods = 0;
 		_XkbSetActionKeyMods(xkb,&pActs[n],effMods);
 	    }
-	    else pActs[n].type= XkbSA_NoAction;
+            else
+                pActs[n].type = XkbSA_NoAction;
 	}
 	if (((explicit&XkbExplicitVModMapMask)==0)&&
 				(xkb->server->vmodmap[key]!=new_vmodmask)) {
@@ -454,6 +470,7 @@ unsigned		changed,tmp;
 	    }
 	    if (((explicit&XkbExplicitAutoRepeatMask)==0)&&(xkb->ctrls)) {
 		CARD8 old;
+
 		old= BitIsOn(xkb->ctrls->per_key_repeat, key);
 		if (interps[0]->flags&XkbSI_AutoRepeat)
 		    SetBit(xkb->ctrls->per_key_repeat, key);
@@ -467,6 +484,7 @@ unsigned		changed,tmp;
     if ((!found)||(interps[0]==NULL)) {
 	if (((explicit&XkbExplicitAutoRepeatMask)==0)&&(xkb->ctrls)) {
 	    CARD8 old;
+
 	    old = BitIsOn(xkb->ctrls->per_key_repeat, key);
 	    SetBit(xkb->ctrls->per_key_repeat, key);
 	    if (changes && (old != BitIsOn(xkb->ctrls->per_key_repeat, key)))
@@ -480,6 +498,7 @@ unsigned		changed,tmp;
     }
     if (changes) {
 	XkbMapChangesPtr	mc;
+
 	mc= &changes->map;
 	tmp= (changed&mc->changed);
 	if (tmp&XkbKeyActionsMask)
@@ -499,7 +518,8 @@ unsigned		changed,tmp;
 	    mc->num_key_behaviors= 1;
 	}
 	if (tmp&XkbVirtualModMapMask)
-	    _XkbAddKeyChange(&mc->first_vmodmap_key,&mc->num_vmodmap_keys,key);
+            _XkbAddKeyChange(&mc->first_vmodmap_key, &mc->num_vmodmap_keys,
+                             key);
 	else if (changed&XkbVirtualModMapMask) {
 	    mc->changed|= XkbVirtualModMapMask;
 	    mc->first_vmodmap_key= key;
@@ -516,17 +536,15 @@ Status
 XkbChangeTypesOfKey(	XkbDescPtr		 xkb,
 			int		 	 key,
 			int			 nGroups,
-			unsigned	 	 groups,
-			int	* 	 	 newTypesIn,
-			XkbMapChangesPtr	 changes)
+                    unsigned groups, int *newTypesIn, XkbMapChangesPtr changes)
 {
 XkbKeyTypePtr	pOldType,pNewType;
 register int	i;
 int		width,nOldGroups,oldWidth,newTypes[XkbNumKbdGroups];
 
     if ((!xkb) || (!XkbKeycodeInRange(xkb,key)) || (!xkb->map) ||
-	(!xkb->map->types)||(!newTypesIn)||((groups&XkbAllGroupsMask)==0)||
-	(nGroups>XkbNumKbdGroups)) {
+        (!xkb->map->types) || (!newTypesIn) ||
+        ((groups & XkbAllGroupsMask) == 0) || (nGroups > XkbNumKbdGroups)) {
 	return BadMatch;
     }
     if (nGroups==0) {
@@ -549,7 +567,8 @@ int		width,nOldGroups,oldWidth,newTypes[XkbNumKbdGroups];
 	     newTypes[i]= XkbKeyKeyTypeIndex(xkb,key,i);
 	else if (nOldGroups>0)
 	     newTypes[i]= XkbKeyKeyTypeIndex(xkb,key,XkbGroup1Index);
-	else newTypes[i]= XkbTwoLevelIndex;
+        else
+            newTypes[i] = XkbTwoLevelIndex;
 	if (newTypes[i]>xkb->map->num_types)
 	    return BadMatch;
 	pNewType= &xkb->map->types[newTypes[i]];
@@ -587,11 +606,14 @@ int		width,nOldGroups,oldWidth,newTypes[XkbNumKbdGroups];
 	    pNewType= &xkb->map->types[newTypes[i]];
 	    if (pNewType->num_levels>pOldType->num_levels)
 		 nCopy= pOldType->num_levels;
-	    else nCopy= pNewType->num_levels;
-	    memcpy(&pSyms[i*width],&oldSyms[i*oldWidth],nCopy*sizeof(KeySym));
+            else
+                nCopy = pNewType->num_levels;
+            memcpy(&pSyms[i * width], &oldSyms[i * oldWidth],
+                   nCopy * sizeof(KeySym));
 	}
 	if (XkbKeyHasActions(xkb,key)) {
 	    XkbAction	oldActs[XkbMaxSymsPerKey],*pActs;
+
 	    pActs= XkbKeyActionsPtr(xkb,key);
 	    memcpy(oldActs,pActs,XkbKeyNumSyms(xkb,key)*sizeof(XkbAction));
 	    pActs= XkbResizeKeyActions(xkb,key,width*nGroups);
@@ -603,7 +625,8 @@ int		width,nOldGroups,oldWidth,newTypes[XkbNumKbdGroups];
 		pNewType= &xkb->map->types[newTypes[i]];
 		if (pNewType->num_levels>pOldType->num_levels)
 		     nCopy= pOldType->num_levels;
-		else nCopy= pNewType->num_levels;
+                else
+                    nCopy = pNewType->num_levels;
 		memcpy(&pActs[i*width],&oldActs[i*oldWidth],
 						nCopy*sizeof(XkbAction));
 	    }
@@ -666,7 +689,9 @@ XkbUpdateActionVirtualMods(XkbDescPtr xkb,XkbAction *act,unsigned changed)
 unsigned int	tmp;
 
     switch (act->type) {
-	case XkbSA_SetMods: case XkbSA_LatchMods: case XkbSA_LockMods:
+    case XkbSA_SetMods:
+    case XkbSA_LatchMods:
+    case XkbSA_LockMods:
 	    if (((tmp= XkbModActionVMods(&act->mods))&changed)!=0) {
 		XkbVirtualModsToReal(xkb,tmp,&tmp);
 		act->mods.mask= act->mods.real_mods;
@@ -689,8 +714,7 @@ unsigned int	tmp;
 static void
 XkbUpdateKeyTypeVirtualMods(	XkbDescPtr	xkb,
 				XkbKeyTypePtr	type,
-				unsigned int	changed,
-				XkbChangesPtr 	changes)
+                            unsigned int changed, XkbChangesPtr changes)
 {
 register unsigned int	i;
 unsigned int		mask;
@@ -699,6 +723,7 @@ unsigned int		mask;
     type->mods.mask= type->mods.real_mods|mask;
     if ((type->map_count>0)&&(type->mods.vmods!=0)) {
 	XkbKTMapEntryPtr entry;
+
 	for (i=0,entry=type->map;i<type->map_count;i++,entry++) {
 	    if (entry->mods.vmods!=0) {
 		XkbVirtualModsToReal(xkb,entry->mods.vmods,&mask);
@@ -706,23 +731,27 @@ unsigned int		mask;
 		/* entry is active if vmods are bound*/
 	    	entry->active= (mask!=0);
 	    }
-	    else entry->active= 1;
+            else
+                entry->active = 1;
 	}
     }
     if (changes) {
 	int	type_ndx;
+
 	type_ndx= type-xkb->map->types;
 	if ((type_ndx<0)||(type_ndx>xkb->map->num_types))
 	    return;
 	if (changes->map.changed&XkbKeyTypesMask) {
 	    int last;
+
 	    last= changes->map.first_type+changes->map.num_types-1;
 	    if (type_ndx<changes->map.first_type) {
 		changes->map.first_type= type_ndx;
 		changes->map.num_types= (last-type_ndx)+1;
 	    }
 	    else if (type_ndx>last) {
-		changes->map.num_types= (type_ndx-changes->map.first_type)+1;
+                changes->map.num_types =
+                    (type_ndx - changes->map.first_type) + 1;
 	    }
 	}
 	else {
@@ -735,7 +764,8 @@ unsigned int		mask;
 }
 
 Bool
-XkbApplyVirtualModChanges(XkbDescPtr xkb,unsigned changed,XkbChangesPtr changes)
+XkbApplyVirtualModChanges(XkbDescPtr xkb, unsigned changed,
+                          XkbChangesPtr changes)
 {
 register int	i;
 unsigned int	checkState = 0;
@@ -744,10 +774,12 @@ unsigned int	checkState = 0;
 	return FALSE;
     for (i=0;i<xkb->map->num_types;i++) {
 	if (xkb->map->types[i].mods.vmods & changed)
-	XkbUpdateKeyTypeVirtualMods(xkb,&xkb->map->types[i],changed,changes);
+            XkbUpdateKeyTypeVirtualMods(xkb, &xkb->map->types[i], changed,
+                                        changes);
     }
     if (changed&xkb->ctrls->internal.vmods) {
 	unsigned int	newMask;
+
 	XkbVirtualModsToReal(xkb,xkb->ctrls->internal.vmods,&newMask);
 	newMask|= xkb->ctrls->internal.real_mods;
 	if (xkb->ctrls->internal.mask!=newMask) {
@@ -760,6 +792,7 @@ unsigned int	checkState = 0;
     }
     if (changed&xkb->ctrls->ignore_lock.vmods) {
 	unsigned int	newMask;
+
 	XkbVirtualModsToReal(xkb,xkb->ctrls->ignore_lock.vmods,&newMask);
 	newMask|= xkb->ctrls->ignore_lock.real_mods;
 	if (xkb->ctrls->ignore_lock.mask!=newMask) {
@@ -772,10 +805,12 @@ unsigned int	checkState = 0;
     }
     if (xkb->indicators!=NULL) {
 	XkbIndicatorMapPtr map;
+
 	map= &xkb->indicators->maps[0];
 	for (i=0;i<XkbNumIndicators;i++,map++) {
 	    if (map->mods.vmods&changed) {
 		unsigned int newMask;
+
 		XkbVirtualModsToReal(xkb,map->mods.vmods,&newMask);
 		newMask|= map->mods.real_mods;
 		if (newMask!=map->mods.mask) {
@@ -790,9 +825,11 @@ unsigned int	checkState = 0;
     }
     if (xkb->compat!=NULL) {
 	XkbCompatMapPtr	compat;
+
 	compat= xkb->compat;
 	for (i=0;i<XkbNumKbdGroups;i++) {
 	    unsigned int newMask;
+
 	    XkbVirtualModsToReal(xkb,compat->groups[i].vmods,&newMask);
 	    newMask|= compat->groups[i].real_mods;
 	    if (compat->groups[i].mask!=newMask) {
@@ -806,6 +843,7 @@ unsigned int	checkState = 0;
     }
     if (xkb->map && xkb->server) {
 	int highChange = 0, lowChange = -1;
+
 	for (i=xkb->min_key_code;i<=xkb->max_key_code;i++) {
 	    if (XkbKeyHasActions(xkb,i)) {
 		register XkbAction *pAct;
@@ -825,9 +863,11 @@ unsigned int	checkState = 0;
 	if (changes && (lowChange>0)) { /* something changed */
 	    if (changes->map.changed&XkbKeyActionsMask) {
 		int last;
+
 		if (changes->map.first_key_act<lowChange)
 		    lowChange= changes->map.first_key_act;
-		last= changes->map.first_key_act+changes->map.num_key_acts-1;
+                last =
+                    changes->map.first_key_act + changes->map.num_key_acts - 1;
 		if (last>highChange)
 		    highChange= last;
 	    }
