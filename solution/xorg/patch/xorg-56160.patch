diff --git a/xkb/xkbtext.c b/xkb/xkbtext.c
index 8ef2b05..f66a08f 100644
--- a/xkb/xkbtext.c
+++ b/xkb/xkbtext.c
@@ -77,6 +77,7 @@ char	*rtrn,*tmp;
     atmstr = NameForAtom(atm);
     if (atmstr != NULL) {
 	int	len;
+
 	len= strlen(atmstr)+1;
 	if (len>BUFFER_SIZE)
 	    len= BUFFER_SIZE-2;
@@ -111,7 +112,8 @@ char  numBuf[20];
 
     if (xkb && xkb->names)
 	 vmodNames= xkb->names->vmods;
-    else vmodNames= NULL;
+    else
+        vmodNames = NULL;
 
     tmp= NULL;
     if (ndx>=XkbNumVirtualMods)
@@ -133,15 +135,14 @@ char  numBuf[20];
 	 strcpy(rtrn,"vmod_");
 	 strncpy(&rtrn[5],tmp,len-4);
     }
-    else strncpy(rtrn,tmp,len);
+    else
+        strncpy(rtrn, tmp, len);
     return rtrn;
 }
 
 char *
 XkbVModMaskText(        XkbDescPtr	xkb,
-			unsigned	modMask,
-			unsigned	mask,
-			unsigned	format)
+                unsigned modMask, unsigned mask, unsigned format)
 {
 register int i,bit;
 int	 len;
@@ -152,17 +153,20 @@ char *str,buf[BUFFER_SIZE];
 	rtrn= tbGetBuffer(5);
 	if (format==XkbCFile)
 	     sprintf(rtrn,"0");
-	else sprintf(rtrn,"none");
+        else
+            sprintf(rtrn, "none");
 	return rtrn;
     }
     if (modMask!=0)
 	 mm= XkbModMaskText(modMask,format);
-    else mm= NULL;
+    else
+        mm = NULL;
 
     str= buf;
     buf[0]= '\0';
     if (mask) {
 	char *tmp;
+
 	for (i=0,bit=1;i<XkbNumVirtualMods;i++,bit<<=1) {
 	    if (mask&bit) {
 		tmp= XkbVModIndexText(xkb,i,format);
@@ -171,23 +175,28 @@ char *str,buf[BUFFER_SIZE];
 		    len+= 4;
 		if ((str-(buf+len))<=BUFFER_SIZE) {
 		    if (str!=buf) {
-			if (format==XkbCFile)	*str++= '|';
-			else			*str++= '+';
+                        if (format == XkbCFile)
+                            *str++ = '|';
+                        else
+                            *str++ = '+';
 			len--;
 		    }
 		}
 		if (format==XkbCFile)
 		     sprintf(str,"%sMask",tmp);
-		else strcpy(str,tmp);
+                else
+                    strcpy(str, tmp);
 		str= &str[len-1];
 	    }
 	}
 	str= buf;
     }
-    else str= NULL;
+    else
+        str = NULL;
     if (mm)	
 	len= strlen(mm);
-    else	len= 0;
+    else
+        len = 0;
     if (str)
 	len+= strlen(str)+(mm==NULL?0:1);
     if (len>=BUFFER_SIZE)
@@ -206,8 +215,10 @@ char *str,buf[BUFFER_SIZE];
     }
     if (str!=NULL) {
 	if (mm!=NULL) {
-	    if (format==XkbCFile)	strcat(rtrn,"|");
-	    else			strcat(rtrn,"+");
+            if (format == XkbCFile)
+                strcat(rtrn, "|");
+            else
+                strcat(rtrn, "+");
 	}
 	strncat(rtrn,str,len-i);
     }
@@ -230,14 +241,16 @@ char	buf[100];
 	    snprintf(buf,sizeof(buf),"%sMapIndex",modNames[ndx]);
 	else if (ndx==XkbNoModifier)
 	     snprintf(buf,sizeof(buf),"XkbNoModifier");
-	else snprintf(buf,sizeof(buf),"0x%02x",ndx);
+        else
+            snprintf(buf, sizeof(buf), "0x%02x", ndx);
     }
     else {
 	if (ndx<XkbNumModifiers)
 	     strcpy(buf,modNames[ndx]);
 	else if (ndx==XkbNoModifier)
 	     strcpy(buf,"none");
-	else snprintf(buf,sizeof(buf),"ILLEGAL_%02x",ndx);
+        else
+            snprintf(buf, sizeof(buf), "ILLEGAL_%02x", ndx);
     }
     rtrn= tbGetBuffer(strlen(buf)+1);
     strcpy(rtrn,buf);
@@ -251,21 +264,28 @@ register int i,bit;
 char buf[64],*rtrn;
 
     if ((mask&0xff)==0xff) {
-	if (format==XkbCFile) 		strcpy(buf,"0xff");
-	else				strcpy(buf,"all");
+        if (format == XkbCFile)
+            strcpy(buf, "0xff");
+        else
+            strcpy(buf, "all");
     }
     else if ((mask&0xff)==0) {
-	if (format==XkbCFile)		strcpy(buf,"0");
-	else				strcpy(buf,"none");
+        if (format == XkbCFile)
+            strcpy(buf, "0");
+        else
+            strcpy(buf, "none");
     }
     else {
 	char *str= buf;
+
 	buf[0]= '\0';
 	for (i=0,bit=1;i<XkbNumModifiers;i++,bit<<=1) {
 	    if (mask&bit) {
 		if (str!=buf) {
-		    if (format==XkbCFile)	*str++= '|';
-		    else			*str++= '+';
+                    if (format == XkbCFile)
+                        *str++ = '|';
+                    else
+                        *str++ = '+';
 		}
 		strcpy(str,modNames[i]);
 		str= &str[strlen(str)];
@@ -283,8 +303,7 @@ char buf[64],*rtrn;
 
 /***====================================================================***/
 
-/*ARGSUSED*/
-char *
+ /*ARGSUSED*/ char *
 XkbConfigText(unsigned config,unsigned format)
 {
 static char *buf;
@@ -338,7 +357,8 @@ static char buf[32];
 
     if (sym==NoSymbol)
 	 strcpy(buf,"NoSymbol");
-    else snprintf(buf, sizeof(buf), "0x%lx", (long)sym);
+    else
+        snprintf(buf, sizeof(buf), "0x%lx", (long) sym);
     return buf;
 }
 
@@ -354,6 +374,7 @@ char *buf;
     }
     else {
 	int len;
+
 	buf= tbGetBuffer(7);
 	buf[0]= '<';
 	memcpy(&buf[1],name,4);
@@ -378,18 +399,30 @@ static char buf[40];
 const char *rtrn;
 
     switch (type&XkbSI_OpMask) {
-	case XkbSI_NoneOf:	rtrn= siMatchText[0]; break;
-	case XkbSI_AnyOfOrNone:	rtrn= siMatchText[1]; break;
-	case XkbSI_AnyOf:	rtrn= siMatchText[2]; break;
-	case XkbSI_AllOf:	rtrn= siMatchText[3]; break;
-	case XkbSI_Exactly:	rtrn= siMatchText[4]; break;
-	default:		snprintf(buf,sizeof(buf),"0x%x",type&XkbSI_OpMask);
+    case XkbSI_NoneOf:
+        rtrn = siMatchText[0];
+        break;
+    case XkbSI_AnyOfOrNone:
+        rtrn = siMatchText[1];
+        break;
+    case XkbSI_AnyOf:
+        rtrn = siMatchText[2];
+        break;
+    case XkbSI_AllOf:
+        rtrn = siMatchText[3];
+        break;
+    case XkbSI_Exactly:
+        rtrn = siMatchText[4];
+        break;
+    default:
+        snprintf(buf, sizeof(buf), "0x%x", type & XkbSI_OpMask);
 				return buf;
     }
     if (format==XkbCFile) {
 	if (type&XkbSI_LevelOneOnly)
 	     snprintf(buf,sizeof(buf),"XkbSI_LevelOneOnly|XkbSI_%s",rtrn);
-	else snprintf(buf,sizeof(buf),"XkbSI_%s",rtrn);
+        else
+            snprintf(buf, sizeof(buf), "XkbSI_%s", rtrn);
 	rtrn= buf;
     }
     return rtrn;
@@ -475,7 +508,8 @@ char *		buf;
 	buf= tbGetBuffer(5);
 	if (format==XkbCFile)
 	     strcpy(buf,"0");
-	else strcpy(buf,"none");
+        else
+            strcpy(buf, "none");
 	return buf;
     }
     tmp= ctrls&XkbAllBooleanCtrlsMask;
@@ -530,8 +564,12 @@ Bool	ok;
 	if (!isprint(*in)) {
 	    ok= FALSE;
 	    switch (*in) {
-		case '\n': case '\t': case '\v':
-		case '\b': case '\r': case '\f':
+            case '\n':
+            case '\t':
+            case '\v':
+            case '\b':
+            case '\r':
+            case '\f':
 		    len++;
 		    break;
 		default:
@@ -548,12 +586,18 @@ Bool	ok;
 	    *out++= *in;
 	else {
 	    *out++= '\\';
-	    if (*in=='\n')	*out++= 'n';
-	    else if (*in=='\t')	*out++= 't';
-	    else if (*in=='\v')	*out++= 'v';
-	    else if (*in=='\b')	*out++= 'b';
-	    else if (*in=='\r')	*out++= 'r';
-	    else if (*in=='\f')	*out++= 'f';
+            if (*in == '\n')
+                *out++ = 'n';
+            else if (*in == '\t')
+                *out++ = 't';
+            else if (*in == '\v')
+                *out++ = 'v';
+            else if (*in == '\b')
+                *out++ = 'b';
+            else if (*in == '\r')
+                *out++ = 'r';
+            else if (*in == '\f')
+                *out++ = 'f';
 	    else if ((*in=='\033')&&(format==XkbXKMFile)) {
 		*out++= 'e';
 	    }
@@ -586,7 +630,8 @@ char *	buf;
 	frac= val%XkbGeomPtsPerMM;
 	if (frac!=0)
 	     sprintf(buf,"%d.%d",whole,frac);
-	else sprintf(buf,"%d",whole);
+        else
+            sprintf(buf, "%d", whole);
     }
     return buf;
 }
@@ -595,23 +640,36 @@ char *
 XkbDoodadTypeText(unsigned type,unsigned format)
 {
 char *	buf;
+
     if (format==XkbCFile) {
 	buf= tbGetBuffer(24);
-	if (type==XkbOutlineDoodad)	   strcpy(buf,"XkbOutlineDoodad");
-	else if (type==XkbSolidDoodad)	   strcpy(buf,"XkbSolidDoodad");
-	else if (type==XkbTextDoodad)	   strcpy(buf,"XkbTextDoodad");
-	else if (type==XkbIndicatorDoodad) strcpy(buf,"XkbIndicatorDoodad");
-	else if (type==XkbLogoDoodad)	   strcpy(buf,"XkbLogoDoodad");
-	else				   sprintf(buf,"UnknownDoodad%d",type);
+        if (type == XkbOutlineDoodad)
+            strcpy(buf, "XkbOutlineDoodad");
+        else if (type == XkbSolidDoodad)
+            strcpy(buf, "XkbSolidDoodad");
+        else if (type == XkbTextDoodad)
+            strcpy(buf, "XkbTextDoodad");
+        else if (type == XkbIndicatorDoodad)
+            strcpy(buf, "XkbIndicatorDoodad");
+        else if (type == XkbLogoDoodad)
+            strcpy(buf, "XkbLogoDoodad");
+        else
+            sprintf(buf, "UnknownDoodad%d", type);
     }
     else {
 	buf= tbGetBuffer(12);
-	if (type==XkbOutlineDoodad)	   strcpy(buf,"outline");
-	else if (type==XkbSolidDoodad)	   strcpy(buf,"solid");
-	else if (type==XkbTextDoodad)	   strcpy(buf,"text");
-	else if (type==XkbIndicatorDoodad) strcpy(buf,"indicator");
-	else if (type==XkbLogoDoodad)	   strcpy(buf,"logo");
-	else				   sprintf(buf,"unknown%d",type);
+        if (type == XkbOutlineDoodad)
+            strcpy(buf, "outline");
+        else if (type == XkbSolidDoodad)
+            strcpy(buf, "solid");
+        else if (type == XkbTextDoodad)
+            strcpy(buf, "text");
+        else if (type == XkbIndicatorDoodad)
+            strcpy(buf, "indicator");
+        else if (type == XkbLogoDoodad)
+            strcpy(buf, "logo");
+        else
+            sprintf(buf, "unknown%d", type);
     }
     return buf;
 }
@@ -655,6 +713,7 @@ static int
 TryCopyStr(char *to,const char *from,int *pLeft)
 {
 register int len;
+
     if (*pLeft>0) {
 	len= strlen(from);
 	if (len<((*pLeft)-3)) {
@@ -667,16 +726,14 @@ register int len;
     return FALSE;
 }
 
-/*ARGSUSED*/
-static Bool
+ /*ARGSUSED*/ static Bool
 CopyNoActionArgs(XkbDescPtr xkb,XkbAction *action,char *buf,int*sz)
 {
     return TRUE;
 }
 
 static Bool
-CopyModActionArgs(XkbDescPtr xkb,XkbAction *action,char *buf,
-								int* sz)
+CopyModActionArgs(XkbDescPtr xkb, XkbAction *action, char *buf, int *sz)
 {
 XkbModAction *	act;
 unsigned	tmp;
@@ -688,10 +745,10 @@ unsigned	tmp;
 	  TryCopyStr(buf,"modMapMods",sz);
     else if (act->real_mods || tmp) {
 	 TryCopyStr(buf,
-		     XkbVModMaskText(xkb,act->real_mods,tmp,XkbXKBFile),
-		     sz);
+                   XkbVModMaskText(xkb, act->real_mods, tmp, XkbXKBFile), sz);
     }
-    else TryCopyStr(buf,"none",sz);
+    else
+        TryCopyStr(buf, "none", sz);
     if (act->type==XkbSA_LockMods)
 	return TRUE;
     if (act->flags&XkbSA_ClearLocks)
@@ -701,10 +758,8 @@ unsigned	tmp;
     return TRUE;
 }
 
-/*ARGSUSED*/
-static Bool
-CopyGroupActionArgs(XkbDescPtr xkb,XkbAction *action,char *buf,
-								int *sz)
+ /*ARGSUSED*/ static Bool
+CopyGroupActionArgs(XkbDescPtr xkb, XkbAction *action, char *buf, int *sz)
 {
 XkbGroupAction *	act;
 char			tbuf[32];
@@ -715,7 +770,8 @@ char			tbuf[32];
 	 snprintf(tbuf,sizeof(tbuf),"%d",XkbSAGroup(act)+1);
     else if (XkbSAGroup(act)<0)
 	 snprintf(tbuf,sizeof(tbuf),"%d",XkbSAGroup(act));
-    else snprintf(tbuf,sizeof(tbuf),"+%d",XkbSAGroup(act));
+    else
+        snprintf(tbuf, sizeof(tbuf), "+%d", XkbSAGroup(act));
     TryCopyStr(buf,tbuf,sz);
     if (act->type==XkbSA_LockGroup)
 	return TRUE;
@@ -726,8 +782,7 @@ char			tbuf[32];
     return TRUE;
 }
 
-/*ARGSUSED*/
-static Bool
+ /*ARGSUSED*/ static Bool
 CopyMovePtrArgs(XkbDescPtr xkb,XkbAction *action,char *buf,int *sz)
 {
 XkbPtrAction *	act;
@@ -739,20 +794,21 @@ char		tbuf[32];
     y= XkbPtrActionY(act);
     if ((act->flags&XkbSA_MoveAbsoluteX)||(x<0))
 	 snprintf(tbuf,sizeof(tbuf),"x=%d",x);
-    else snprintf(tbuf,sizeof(tbuf),"x=+%d",x);
+    else
+        snprintf(tbuf, sizeof(tbuf), "x=+%d", x);
     TryCopyStr(buf,tbuf,sz);
 
     if ((act->flags&XkbSA_MoveAbsoluteY)||(y<0))
 	 snprintf(tbuf,sizeof(tbuf),",y=%d",y);
-    else snprintf(tbuf,sizeof(tbuf),",y=+%d",y);
+    else
+        snprintf(tbuf, sizeof(tbuf), ",y=+%d", y);
     TryCopyStr(buf,tbuf,sz);
     if (act->flags&XkbSA_NoAcceleration)
 	TryCopyStr(buf,",!accel",sz);
     return TRUE;
 }
 
-/*ARGSUSED*/
-static Bool
+ /*ARGSUSED*/ static Bool
 CopyPtrBtnArgs(XkbDescPtr xkb,XkbAction *action,char *buf,int *sz)
 {
 XkbPtrBtnAction *	act;
@@ -764,7 +820,8 @@ char			tbuf[32];
 	 snprintf(tbuf,sizeof(tbuf),"%d",act->button);
 	 TryCopyStr(buf,tbuf,sz);
     }
-    else TryCopyStr(buf,"default",sz);
+    else
+        TryCopyStr(buf, "default", sz);
     if (act->count>0) {
 	snprintf(tbuf,sizeof(tbuf),",count=%d",act->count);
 	TryCopyStr(buf,tbuf,sz);
@@ -772,22 +829,24 @@ char			tbuf[32];
     if (action->type==XkbSA_LockPtrBtn) {
 	switch (act->flags&(XkbSA_LockNoUnlock|XkbSA_LockNoLock)) {
 	    case XkbSA_LockNoLock:
-		TryCopyStr(buf,",affect=unlock",sz); break;
+            TryCopyStr(buf, ",affect=unlock", sz);
+            break;
 	    case XkbSA_LockNoUnlock:
-		TryCopyStr(buf,",affect=lock",sz); break;
+            TryCopyStr(buf, ",affect=lock", sz);
+            break;
 	    case XkbSA_LockNoUnlock|XkbSA_LockNoLock:
-		TryCopyStr(buf,",affect=neither",sz); break;
+            TryCopyStr(buf, ",affect=neither", sz);
+            break;
 	    default:
-		TryCopyStr(buf,",affect=both",sz); break;
+            TryCopyStr(buf, ",affect=both", sz);
+            break;
 	}
     }
     return TRUE;
 }
 
-/*ARGSUSED*/
-static Bool
-CopySetPtrDfltArgs(XkbDescPtr xkb,XkbAction *action,char *buf,
-								int *sz)
+ /*ARGSUSED*/ static Bool
+CopySetPtrDfltArgs(XkbDescPtr xkb, XkbAction *action, char *buf, int *sz)
 {
 XkbPtrDfltAction *	act;
 char			tbuf[32];
@@ -795,9 +854,11 @@ char			tbuf[32];
     act= &action->dflt;
     if (act->affect==XkbSA_AffectDfltBtn) {
 	TryCopyStr(buf,"affect=button,button=",sz);
-	if ((act->flags&XkbSA_DfltBtnAbsolute)||(XkbSAPtrDfltValue(act)<0))
+        if ((act->flags & XkbSA_DfltBtnAbsolute) ||
+            (XkbSAPtrDfltValue(act) < 0))
 	     snprintf(tbuf,sizeof(tbuf),"%d",XkbSAPtrDfltValue(act));
-	else snprintf(tbuf,sizeof(tbuf),"+%d",XkbSAPtrDfltValue(act));
+        else
+            snprintf(tbuf, sizeof(tbuf), "+%d", XkbSAPtrDfltValue(act));
 	TryCopyStr(buf,tbuf,sz);
     }
     return TRUE;
@@ -816,11 +877,13 @@ char		tbuf[64];
 	     snprintf(tbuf,sizeof(tbuf),"%d",XkbSAGroup(act)+1);
 	else if (XkbSAGroup(act)<0)
 	     snprintf(tbuf,sizeof(tbuf),"%d",XkbSAGroup(act));
-	else snprintf(tbuf,sizeof(tbuf),"+%d",XkbSAGroup(act));
+        else
+            snprintf(tbuf, sizeof(tbuf), "+%d", XkbSAGroup(act));
 	TryCopyStr(buf,tbuf,sz);
     }
     else {
 	unsigned tmp;
+
 	tmp= XkbModActionVMods(act);
 	TryCopyStr(buf,"modifiers=",sz);
 	if (act->flags&XkbSA_UseModMapMods)
@@ -834,13 +897,15 @@ char		tbuf[64];
 	    if (tmp)
 		TryCopyStr(buf,XkbVModMaskText(xkb,0,tmp,XkbXKBFile),sz);
 	}
-	else TryCopyStr(buf,"none",sz);
+        else
+            TryCopyStr(buf, "none", sz);
     }
     TryCopyStr(buf,",affect=",sz);
     if ((act->affect&XkbSA_ISOAffectMask)==0)
 	TryCopyStr(buf,"all",sz);
     else {
 	int nOut= 0;
+
 	if ((act->affect&XkbSA_ISONoAffectMods)==0) {
 	    TryCopyStr(buf,"mods",sz);
 	    nOut++;
@@ -864,10 +929,8 @@ char		tbuf[64];
     return TRUE;
 }
 
-/*ARGSUSED*/
-static Bool
-CopySwitchScreenArgs(XkbDescPtr xkb,XkbAction *action,char *buf,
-								int *sz)
+ /*ARGSUSED*/ static Bool
+CopySwitchScreenArgs(XkbDescPtr xkb, XkbAction *action, char *buf, int *sz)
 {
 XkbSwitchScreenAction *	act;
 char			tbuf[32];
@@ -875,18 +938,18 @@ char			tbuf[32];
     act= &action->screen;
     if ((act->flags&XkbSA_SwitchAbsolute)||(XkbSAScreen(act)<0))
 	 snprintf(tbuf,sizeof(tbuf),"screen=%d",XkbSAScreen(act));
-    else snprintf(tbuf,sizeof(tbuf),"screen=+%d",XkbSAScreen(act));
+    else
+        snprintf(tbuf, sizeof(tbuf), "screen=+%d", XkbSAScreen(act));
     TryCopyStr(buf,tbuf,sz);
     if (act->flags&XkbSA_SwitchApplication)
 	 TryCopyStr(buf,",!same",sz);
-    else TryCopyStr(buf,",same",sz);
+    else
+        TryCopyStr(buf, ",same", sz);
     return TRUE;
 }
 
-/*ARGSUSED*/
-static Bool
-CopySetLockControlsArgs(XkbDescPtr xkb,XkbAction *action,
-							char *buf,int *sz)
+ /*ARGSUSED*/ static Bool
+CopySetLockControlsArgs(XkbDescPtr xkb, XkbAction *action, char *buf, int *sz)
 {
 XkbCtrlsAction *	act;
 unsigned		tmp;
@@ -901,6 +964,7 @@ char			tbuf[32];
 	TryCopyStr(buf,"all",sz);
     else {
 	int nOut= 0;
+
 	if (tmp&XkbRepeatKeysMask) {
 	    snprintf(tbuf,sizeof(tbuf),"%sRepeatKeys",(nOut>0?"+":""));
 	    TryCopyStr(buf,tbuf,sz);
@@ -927,27 +991,32 @@ char			tbuf[32];
 	    nOut++;
 	}
 	if (tmp&XkbMouseKeysAccelMask) {
-	    snprintf(tbuf,sizeof(tbuf),"%sMouseKeysAccel",(nOut>0?"+":""));
+            snprintf(tbuf, sizeof(tbuf), "%sMouseKeysAccel",
+                     (nOut > 0 ? "+" : ""));
 	    TryCopyStr(buf,tbuf,sz);
 	    nOut++;
 	}
 	if (tmp&XkbAccessXKeysMask) {
-	    snprintf(tbuf,sizeof(tbuf),"%sAccessXKeys",(nOut>0?"+":""));
+            snprintf(tbuf, sizeof(tbuf), "%sAccessXKeys",
+                     (nOut > 0 ? "+" : ""));
 	    TryCopyStr(buf,tbuf,sz);
 	    nOut++;
 	}
 	if (tmp&XkbAccessXTimeoutMask) {
-	    snprintf(tbuf,sizeof(tbuf),"%sAccessXTimeout",(nOut>0?"+":""));
+            snprintf(tbuf, sizeof(tbuf), "%sAccessXTimeout",
+                     (nOut > 0 ? "+" : ""));
 	    TryCopyStr(buf,tbuf,sz);
 	    nOut++;
 	}
 	if (tmp&XkbAccessXFeedbackMask) {
-	    snprintf(tbuf,sizeof(tbuf),"%sAccessXFeedback",(nOut>0?"+":""));
+            snprintf(tbuf, sizeof(tbuf), "%sAccessXFeedback",
+                     (nOut > 0 ? "+" : ""));
 	    TryCopyStr(buf,tbuf,sz);
 	    nOut++;
 	}
 	if (tmp&XkbAudibleBellMask) {
-	    snprintf(tbuf,sizeof(tbuf),"%sAudibleBell",(nOut>0?"+":""));
+            snprintf(tbuf, sizeof(tbuf), "%sAudibleBell",
+                     (nOut > 0 ? "+" : ""));
 	    TryCopyStr(buf,tbuf,sz);
 	    nOut++;
 	}
@@ -962,7 +1031,8 @@ char			tbuf[32];
 	    nOut++;
 	}
 	if (tmp&XkbIgnoreGroupLockMask) {
-	    snprintf(tbuf,sizeof(tbuf),"%sIgnoreGroupLock",(nOut>0?"+":""));
+            snprintf(tbuf, sizeof(tbuf), "%sIgnoreGroupLock",
+                     (nOut > 0 ? "+" : ""));
 	    TryCopyStr(buf,tbuf,sz);
 	    nOut++;
 	}
@@ -970,10 +1040,8 @@ char			tbuf[32];
     return TRUE;
 }
 
-/*ARGSUSED*/
-static Bool
-CopyActionMessageArgs(XkbDescPtr xkb,XkbAction *action,char *buf,
-								int *sz)
+ /*ARGSUSED*/ static Bool
+CopyActionMessageArgs(XkbDescPtr xkb, XkbAction *action, char *buf, int *sz)
 {
 XkbMessageAction *	act;
 unsigned		all;
@@ -988,19 +1056,25 @@ char			tbuf[32];
 	TryCopyStr(buf,"all",sz);
     else if (act->flags&XkbSA_MessageOnPress)
 	 TryCopyStr(buf,"KeyPress",sz);
-    else TryCopyStr(buf,"KeyRelease",sz);
-    snprintf(tbuf,sizeof(tbuf),",data[0]=0x%02x",act->message[0]); TryCopyStr(buf,tbuf,sz);
-    snprintf(tbuf,sizeof(tbuf),",data[1]=0x%02x",act->message[1]); TryCopyStr(buf,tbuf,sz);
-    snprintf(tbuf,sizeof(tbuf),",data[2]=0x%02x",act->message[2]); TryCopyStr(buf,tbuf,sz);
-    snprintf(tbuf,sizeof(tbuf),",data[3]=0x%02x",act->message[3]); TryCopyStr(buf,tbuf,sz);
-    snprintf(tbuf,sizeof(tbuf),",data[4]=0x%02x",act->message[4]); TryCopyStr(buf,tbuf,sz);
-    snprintf(tbuf,sizeof(tbuf),",data[5]=0x%02x",act->message[5]); TryCopyStr(buf,tbuf,sz);
+    else
+        TryCopyStr(buf, "KeyRelease", sz);
+    snprintf(tbuf, sizeof(tbuf), ",data[0]=0x%02x", act->message[0]);
+    TryCopyStr(buf, tbuf, sz);
+    snprintf(tbuf, sizeof(tbuf), ",data[1]=0x%02x", act->message[1]);
+    TryCopyStr(buf, tbuf, sz);
+    snprintf(tbuf, sizeof(tbuf), ",data[2]=0x%02x", act->message[2]);
+    TryCopyStr(buf, tbuf, sz);
+    snprintf(tbuf, sizeof(tbuf), ",data[3]=0x%02x", act->message[3]);
+    TryCopyStr(buf, tbuf, sz);
+    snprintf(tbuf, sizeof(tbuf), ",data[4]=0x%02x", act->message[4]);
+    TryCopyStr(buf, tbuf, sz);
+    snprintf(tbuf, sizeof(tbuf), ",data[5]=0x%02x", act->message[5]);
+    TryCopyStr(buf, tbuf, sz);
     return TRUE;
 }
 
 static Bool
-CopyRedirectKeyArgs(XkbDescPtr xkb,XkbAction *action,char *buf,
-								int *sz)
+CopyRedirectKeyArgs(XkbDescPtr xkb, XkbAction *action, char *buf, int *sz)
 {
 XkbRedirectKeyAction *	act;
 char			tbuf[32],*tmp;
@@ -1014,10 +1088,12 @@ unsigned		vmods,vmods_mask;
     if (xkb && xkb->names && xkb->names->keys && (kc<=xkb->max_key_code) &&
 				(xkb->names->keys[kc].name[0]!='\0')) {
 	char *kn;
+
 	kn= XkbKeyNameText(xkb->names->keys[kc].name,XkbXKBFile);
 	snprintf(tbuf,sizeof(tbuf),"key=%s",kn);
     }
-    else snprintf(tbuf,sizeof(tbuf),"key=%d",kc);
+    else
+        snprintf(tbuf, sizeof(tbuf), "key=%d", kc);
     TryCopyStr(buf,tbuf,sz);
     if ((act->mods_mask==0)&&(vmods_mask==0))
 	return TRUE;
@@ -1044,16 +1120,15 @@ unsigned		vmods,vmods_mask;
     return TRUE;
 }
 
-/*ARGSUSED*/
-static Bool
-CopyDeviceBtnArgs(XkbDescPtr xkb,XkbAction *action,char *buf,
-								int *sz)
+ /*ARGSUSED*/ static Bool
+CopyDeviceBtnArgs(XkbDescPtr xkb, XkbAction *action, char *buf, int *sz)
 {
 XkbDeviceBtnAction *	act;
 char			tbuf[32];
 
     act= &action->devbtn;
-    snprintf(tbuf,sizeof(tbuf),"device= %d",act->device); TryCopyStr(buf,tbuf,sz);
+    snprintf(tbuf, sizeof(tbuf), "device= %d", act->device);
+    TryCopyStr(buf, tbuf, sz);
     TryCopyStr(buf,",button=",sz);
     snprintf(tbuf,sizeof(tbuf),"%d",act->button);
     TryCopyStr(buf,tbuf,sz);
@@ -1064,43 +1139,54 @@ char			tbuf[32];
     if (action->type==XkbSA_LockDeviceBtn) {
 	switch (act->flags&(XkbSA_LockNoUnlock|XkbSA_LockNoLock)) {
 	    case XkbSA_LockNoLock:
-		TryCopyStr(buf,",affect=unlock",sz); break;
+            TryCopyStr(buf, ",affect=unlock", sz);
+            break;
 	    case XkbSA_LockNoUnlock:
-		TryCopyStr(buf,",affect=lock",sz); break;
+            TryCopyStr(buf, ",affect=lock", sz);
+            break;
 	    case XkbSA_LockNoUnlock|XkbSA_LockNoLock:
-		TryCopyStr(buf,",affect=neither",sz); break;
+            TryCopyStr(buf, ",affect=neither", sz);
+            break;
 	    default:
-		TryCopyStr(buf,",affect=both",sz); break;
+            TryCopyStr(buf, ",affect=both", sz);
+            break;
 	}
     }
     return TRUE;
 }
 
-/*ARGSUSED*/
-static Bool
+ /*ARGSUSED*/ static Bool
 CopyOtherArgs(XkbDescPtr xkb,XkbAction *action,char *buf,int *sz)
 {
 XkbAnyAction *	act;
 char		tbuf[32];
 
     act= &action->any;
-    snprintf(tbuf,sizeof(tbuf),"type=0x%02x",act->type); TryCopyStr(buf,tbuf,sz);
-    snprintf(tbuf,sizeof(tbuf),",data[0]=0x%02x",act->data[0]); TryCopyStr(buf,tbuf,sz);
-    snprintf(tbuf,sizeof(tbuf),",data[1]=0x%02x",act->data[1]); TryCopyStr(buf,tbuf,sz);
-    snprintf(tbuf,sizeof(tbuf),",data[2]=0x%02x",act->data[2]); TryCopyStr(buf,tbuf,sz);
-    snprintf(tbuf,sizeof(tbuf),",data[3]=0x%02x",act->data[3]); TryCopyStr(buf,tbuf,sz);
-    snprintf(tbuf,sizeof(tbuf),",data[4]=0x%02x",act->data[4]); TryCopyStr(buf,tbuf,sz);
-    snprintf(tbuf,sizeof(tbuf),",data[5]=0x%02x",act->data[5]); TryCopyStr(buf,tbuf,sz);
-    snprintf(tbuf,sizeof(tbuf),",data[6]=0x%02x",act->data[6]); TryCopyStr(buf,tbuf,sz);
+    snprintf(tbuf, sizeof(tbuf), "type=0x%02x", act->type);
+    TryCopyStr(buf, tbuf, sz);
+    snprintf(tbuf, sizeof(tbuf), ",data[0]=0x%02x", act->data[0]);
+    TryCopyStr(buf, tbuf, sz);
+    snprintf(tbuf, sizeof(tbuf), ",data[1]=0x%02x", act->data[1]);
+    TryCopyStr(buf, tbuf, sz);
+    snprintf(tbuf, sizeof(tbuf), ",data[2]=0x%02x", act->data[2]);
+    TryCopyStr(buf, tbuf, sz);
+    snprintf(tbuf, sizeof(tbuf), ",data[3]=0x%02x", act->data[3]);
+    TryCopyStr(buf, tbuf, sz);
+    snprintf(tbuf, sizeof(tbuf), ",data[4]=0x%02x", act->data[4]);
+    TryCopyStr(buf, tbuf, sz);
+    snprintf(tbuf, sizeof(tbuf), ",data[5]=0x%02x", act->data[5]);
+    TryCopyStr(buf, tbuf, sz);
+    snprintf(tbuf, sizeof(tbuf), ",data[6]=0x%02x", act->data[6]);
+    TryCopyStr(buf, tbuf, sz);
     return TRUE;
 }
 
-typedef	Bool	(*actionCopy)(
-	XkbDescPtr 	/* xkb */,
+typedef Bool (*actionCopy) (XkbDescPtr /* xkb */ ,
 	XkbAction *	/* action */,
 	char *		/* buf */,
 	int*		/* sz */
 );
+
 static actionCopy	copyActionArgs[XkbSA_NumActions] = {
 	CopyNoActionArgs		/* NoAction	*/,
 	CopyModActionArgs		/* SetMods	*/,
@@ -1141,11 +1227,13 @@ int	sz;
 	    action->any.data[6]);
     }
     else {
-	snprintf(buf,sizeof(buf),"%s(",XkbActionTypeText(action->type,XkbXKBFile));
+        snprintf(buf, sizeof(buf), "%s(",
+                 XkbActionTypeText(action->type, XkbXKBFile));
 	sz= ACTION_SZ-strlen(buf)+2; /* room for close paren and NULL */
 	if (action->type<(unsigned)XkbSA_NumActions)
 	     (*copyActionArgs[action->type])(xkb,action,buf,&sz);
-	else CopyOtherArgs(xkb,action,buf,&sz);
+        else
+            CopyOtherArgs(xkb, action, buf, &sz);
 	TryCopyStr(buf,")",&sz);
     }
     tmp= tbGetBuffer(strlen(buf)+1);
@@ -1162,28 +1250,35 @@ char	buf[256],*tmp;
     if (format==XkbCFile) {
 	if (behavior->type==XkbKB_Default)
 	     snprintf(buf,sizeof(buf),"{   0,    0 }");
-	else snprintf(buf,sizeof(buf),"{ %3d, 0x%02x }",behavior->type,behavior->data);
+        else
+            snprintf(buf, sizeof(buf), "{ %3d, 0x%02x }", behavior->type,
+                     behavior->data);
     }
     else {
 	unsigned 	type,permanent;
+
 	type= behavior->type&XkbKB_OpMask;
 	permanent=((behavior->type&XkbKB_Permanent)!=0);
 
 	if (type==XkbKB_Lock) {
-	    snprintf(buf,sizeof(buf),"lock= %s",(permanent?"Permanent":"TRUE"));
+            snprintf(buf, sizeof(buf), "lock= %s",
+                     (permanent ? "Permanent" : "TRUE"));
 	}
 	else if (type==XkbKB_RadioGroup) {
 	    int 	g;
 	    char	*tmp;
+
 	    g= ((behavior->data)&(~XkbKB_RGAllowNone))+1;
 	    if (XkbKB_RGAllowNone&behavior->data) {
 		snprintf(buf,sizeof(buf),"allowNone,");
 		tmp= &buf[strlen(buf)];
 	    }
-	    else tmp= buf;
+            else
+                tmp = buf;
 	    if (permanent)
 		 sprintf(tmp,"permanentRadioGroup= %d",g);
-	    else sprintf(tmp,"radioGroup= %d",g);
+            else
+                sprintf(tmp, "radioGroup= %d", g);
 	}
 	else if ((type==XkbKB_Overlay1)||(type==XkbKB_Overlay2)) {
 	    int ndx,kc;
@@ -1195,12 +1290,14 @@ char	buf[256],*tmp;
 		kn= XkbKeyNameText(xkb->names->keys[kc].name,XkbXKBFile);
 	    else {
 		static char tbuf[8];
+
 		snprintf(tbuf,sizeof(tbuf),"%d",kc);
 		kn= tbuf;
 	    }
 	    if (permanent)
 		 snprintf(buf,sizeof(buf),"permanentOverlay%d= %s",ndx,kn);
-	    else snprintf(buf,sizeof(buf),"overlay%d= %s",ndx,kn);
+            else
+                snprintf(buf, sizeof(buf), "overlay%d= %s", ndx, kn);
 	}
     }
     tmp= tbGetBuffer(strlen(buf)+1);
