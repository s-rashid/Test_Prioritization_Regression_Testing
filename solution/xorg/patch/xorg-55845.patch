diff --git a/hw/xwin/wincursor.c b/hw/xwin/wincursor.c
index 0ed1d13..b56104f 100644
--- a/hw/xwin/wincursor.c
+++ b/hw/xwin/wincursor.c
@@ -62,14 +62,12 @@ winCursorOffScreen (ScreenPtr *ppScreen, int *x, int *y);
 static void
 winCrossScreen (ScreenPtr pScreen, Bool fEntering);
 
-miPointerScreenFuncRec g_winPointerCursorFuncs =
-{
+miPointerScreenFuncRec g_winPointerCursorFuncs = {
   winCursorOffScreen,
   winCrossScreen,
   winPointerWarpCursor
 };
 
-
 static void
 winPointerWarpCursor (DeviceIntPtr pDev, ScreenPtr pScreen, int x, int y)
 {
@@ -78,14 +76,14 @@ winPointerWarpCursor (DeviceIntPtr pDev, ScreenPtr pScreen, int x, int y)
   static Bool		s_fInitialWarp = TRUE;
 
   /* Discard first warp call */
-  if (s_fInitialWarp)
-    {
+    if (s_fInitialWarp) {
       /* First warp moves mouse to center of window, just ignore it */
 
       /* Don't ignore subsequent warps */
       s_fInitialWarp = FALSE;
 
-      winErrorFVerb (2, "winPointerWarpCursor - Discarding first warp: %d %d\n",
+        winErrorFVerb(2,
+                      "winPointerWarpCursor - Discarding first warp: %d %d\n",
 	      x, y);
       
       return;
@@ -100,16 +98,13 @@ winPointerWarpCursor (DeviceIntPtr pDev, ScreenPtr pScreen, int x, int y)
 #ifdef XWIN_MULTIWINDOW
       || pScreenPriv->pScreenInfo->fMultiWindow
 #endif
-      )
-    {
+        ) {
       /* Get the client area coordinates */
       GetClientRect (pScreenPriv->hwndScreen, &rcClient);
       
       /* Translate the client area coords to screen coords */
       MapWindowPoints (pScreenPriv->hwndScreen,
-		       HWND_DESKTOP,
-		       (LPPOINT)&rcClient,
-		       2);
+                        HWND_DESKTOP, (LPPOINT) & rcClient, 2);
       
       /* 
        * Update the Windows cursor position so that we don't
@@ -138,8 +133,8 @@ reverse(unsigned char c)
 {
   int i;
   unsigned char ret = 0;
-  for (i = 0; i < 8; ++i)
-    {
+
+    for (i = 0; i < 8; ++i) {
       ret |= ((c >> i)&1) << (7 - i);
     }
   return ret;
@@ -173,8 +168,7 @@ winLoadCursor (ScreenPtr pScreen, CursorPtr pCursor, int screen)
   WIN_DEBUG_MSG("winLoadCursor: Win32: %dx%d X11: %dx%d hotspot: %d,%d\n", 
           pScreenPriv->cursor.sm_cx, pScreenPriv->cursor.sm_cy,
           pCursor->bits->width, pCursor->bits->height,
-          pCursor->bits->xhot, pCursor->bits->yhot
-          );
+                  pCursor->bits->xhot, pCursor->bits->yhot);
 
   /* We can use only White and Black, so calc brightness of color 
    * Also check if the cursor is inverted */  
@@ -184,9 +178,9 @@ winLoadCursor (ScreenPtr pScreen, CursorPtr pCursor, int screen)
  
   /* Check wether the X11 cursor is bigger than the win32 cursor */
   if (pScreenPriv->cursor.sm_cx < pCursor->bits->width || 
-      pScreenPriv->cursor.sm_cy < pCursor->bits->height)
-    {
-      winErrorFVerb (3, "winLoadCursor - Windows requires %dx%d cursor but X requires %dx%d\n",
+        pScreenPriv->cursor.sm_cy < pCursor->bits->height) {
+        winErrorFVerb(3,
+                      "winLoadCursor - Windows requires %dx%d cursor but X requires %dx%d\n",
 	      pScreenPriv->cursor.sm_cx, pScreenPriv->cursor.sm_cy,
 	      pCursor->bits->width, pCursor->bits->height);
     }
@@ -194,7 +188,8 @@ winLoadCursor (ScreenPtr pScreen, CursorPtr pCursor, int screen)
   /* Get the number of bytes required to store the whole cursor image 
    * This is roughly (sm_cx * sm_cy) / 8 
    * round up to 8 pixel boundary so we can convert whole bytes */
-  nBytes = bits_to_bytes(pScreenPriv->cursor.sm_cx) * pScreenPriv->cursor.sm_cy;
+    nBytes =
+        bits_to_bytes(pScreenPriv->cursor.sm_cx) * pScreenPriv->cursor.sm_cy;
 
   /* Get the effective width and height */
   nCX = min(pScreenPriv->cursor.sm_cx, pCursor->bits->width);
@@ -207,12 +202,11 @@ winLoadCursor (ScreenPtr pScreen, CursorPtr pCursor, int screen)
 
   /* Convert the X11 bitmap to a win32 bitmap 
    * The first is for an empty mask */
-  if (pCursor->bits->emptyMask)
-    {
+    if (pCursor->bits->emptyMask) {
       int x, y, xmax = bits_to_bytes(nCX);
+
       for (y = 0; y < nCY; ++y)
-	for (x = 0; x < xmax; ++x)
-	  {
+            for (x = 0; x < xmax; ++x) {
 	    int nWinPix = bits_to_bytes(pScreenPriv->cursor.sm_cx) * y + x;
 	    int nXPix = BitmapBytePad(pCursor->bits->width) * y + x;
 
@@ -223,21 +217,23 @@ winLoadCursor (ScreenPtr pScreen, CursorPtr pCursor, int screen)
 	      pXor[nWinPix] = reverse (pCursor->bits->source[nXPix]);
 	  }
     }
-  else
-    {
+    else {
       int x, y, xmax = bits_to_bytes(nCX);
+
       for (y = 0; y < nCY; ++y)
-	for (x = 0; x < xmax; ++x)
-	  {
+            for (x = 0; x < xmax; ++x) {
 	    int nWinPix = bits_to_bytes(pScreenPriv->cursor.sm_cx) * y + x;
 	    int nXPix = BitmapBytePad(pCursor->bits->width) * y + x;
 
 	    unsigned char mask = pCursor->bits->mask[nXPix];
+
 	    pAnd[nWinPix] = reverse (~mask);
 	    if (fReverse)
-	      pXor[nWinPix] = reverse (~pCursor->bits->source[nXPix] & mask);
+                    pXor[nWinPix] =
+                        reverse(~pCursor->bits->source[nXPix] & mask);
 	    else
-	      pXor[nWinPix] = reverse (pCursor->bits->source[nXPix] & mask);
+                    pXor[nWinPix] =
+                        reverse(pCursor->bits->source[nXPix] & mask);
 	  }
     }
 
@@ -246,8 +242,7 @@ winLoadCursor (ScreenPtr pScreen, CursorPtr pCursor, int screen)
   lpBits = NULL;
 
   /* We have a truecolor alpha-blended cursor and can use it! */
-  if (pCursor->bits->argb) 
-    {
+    if (pCursor->bits->argb) {
       WIN_DEBUG_MSG("winLoadCursor: Trying truecolor alphablended cursor\n"); 
       memset (&bi, 0, sizeof (BITMAPV4HEADER));
       bi.bV4Size = sizeof(BITMAPV4HEADER);
@@ -261,14 +256,15 @@ winLoadCursor (ScreenPtr pScreen, CursorPtr pCursor, int screen)
       bi.bV4BlueMask = 0x000000FF;
       bi.bV4AlphaMask = 0xFF000000; 
       
-      lpBits = (unsigned long *) calloc (pScreenPriv->cursor.sm_cx*pScreenPriv->cursor.sm_cy,
+        lpBits =
+            (unsigned long *) calloc(pScreenPriv->cursor.sm_cx *
+                                     pScreenPriv->cursor.sm_cy,
 					 sizeof (unsigned long));
       
-      if (lpBits)
-	{
-	  for (y=0; y<nCY; y++)
-	    {
+        if (lpBits) {
+            for (y = 0; y < nCY; y++) {
 	      unsigned long *src, *dst;
+
 	      src = &(pCursor->bits->argb[y * pCursor->bits->width]);
 	      dst = &(lpBits[y * pScreenPriv->cursor.sm_cx]);
 	      memcpy (dst, src, 4*nCX);
@@ -276,8 +272,7 @@ winLoadCursor (ScreenPtr pScreen, CursorPtr pCursor, int screen)
 	}
     } /* End if-truecolor-icon */
   
-  if (!lpBits)
-    {
+    if (!lpBits) {
       /* Bicolor, use a palettized DIB */
       WIN_DEBUG_MSG("winLoadCursor: Trying two color cursor\n"); 
       pbmi = (BITMAPINFO*)&bi;
@@ -304,28 +299,32 @@ winLoadCursor (ScreenPtr pScreen, CursorPtr pCursor, int screen)
       pbmi->bmiColors[2].rgbBlue = pCursor->foreBlue>>8;
       pbmi->bmiColors[2].rgbReserved = 0;
       
-      lpBits = (unsigned long *) calloc (pScreenPriv->cursor.sm_cx*pScreenPriv->cursor.sm_cy,
-					 sizeof (char));
+        lpBits =
+            (unsigned long *) calloc(pScreenPriv->cursor.sm_cx *
+                                     pScreenPriv->cursor.sm_cy, sizeof(char));
       
       pCur = (unsigned char *)lpBits;
-      if (lpBits)
-	{
-	  for (y=0; y<pScreenPriv->cursor.sm_cy; y++)
-	    {
-	      for (x=0; x<pScreenPriv->cursor.sm_cx; x++)
-		{
+        if (lpBits) {
+            for (y = 0; y < pScreenPriv->cursor.sm_cy; y++) {
+                for (x = 0; x < pScreenPriv->cursor.sm_cx; x++) {
 		  if (x>=nCX || y>=nCY) /* Outside of X11 icon bounds */
 		    (*pCur++) = 0;
-		  else /* Within X11 icon bounds */
-		    {
-		      int nWinPix = bits_to_bytes(pScreenPriv->cursor.sm_cx) * y + (x/8);
+                    else {      /* Within X11 icon bounds */
+
+                        int nWinPix =
+                            bits_to_bytes(pScreenPriv->cursor.sm_cx) * y +
+                            (x / 8);
 
 		      bit = pAnd[nWinPix];
 		      bit = bit & (1<<(7-(x&7)));
-		      if (!bit) /* Within the cursor mask? */
-			{
-			  int nXPix = BitmapBytePad(pCursor->bits->width) * y + (x/8);
-			  bit = ~reverse(~pCursor->bits->source[nXPix] & pCursor->bits->mask[nXPix]);
+                        if (!bit) {     /* Within the cursor mask? */
+                            int nXPix =
+                                BitmapBytePad(pCursor->bits->width) * y +
+                                (x / 8);
+                            bit =
+                                ~reverse(~pCursor->bits->
+                                         source[nXPix] & pCursor->bits->
+                                         mask[nXPix]);
 			  bit = bit & (1<<(7-(x&7)));
 			  if (bit) /* Draw foreground */
 			    (*pCur++) = 2;
@@ -341,28 +340,29 @@ winLoadCursor (ScreenPtr pScreen, CursorPtr pCursor, int screen)
     }
 
   /* If one of the previous two methods gave us the bitmap we need, make a cursor */
-  if (lpBits)
-    {
+    if (lpBits) {
       WIN_DEBUG_MSG("winLoadCursor: Creating bitmap cursor: hotspot %d,%d\n",
               pCursor->bits->xhot, pCursor->bits->yhot);
 
       hAnd = NULL;
       hXor = NULL;
 
-      hAnd = CreateBitmap (pScreenPriv->cursor.sm_cx, pScreenPriv->cursor.sm_cy, 1, 1, pAnd);
+        hAnd =
+            CreateBitmap(pScreenPriv->cursor.sm_cx, pScreenPriv->cursor.sm_cy,
+                         1, 1, pAnd);
 
       hDC = GetDC (NULL);
-      if (hDC)
-	{
-	  hXor = CreateCompatibleBitmap (hDC, pScreenPriv->cursor.sm_cx, pScreenPriv->cursor.sm_cy);
-	  SetDIBits (hDC, hXor, 0, pScreenPriv->cursor.sm_cy, lpBits, (BITMAPINFO*)&bi, DIB_RGB_COLORS);
+        if (hDC) {
+            hXor =
+                CreateCompatibleBitmap(hDC, pScreenPriv->cursor.sm_cx,
+                                       pScreenPriv->cursor.sm_cy);
+            SetDIBits(hDC, hXor, 0, pScreenPriv->cursor.sm_cy, lpBits,
+                      (BITMAPINFO *) & bi, DIB_RGB_COLORS);
 	  ReleaseDC (NULL, hDC);
 	}
       free (lpBits);
       
-      
-      if (hAnd && hXor)
-	{
+        if (hAnd && hXor) {
 	  ii.fIcon = FALSE;
 	  ii.xHotspot = pCursor->bits->xhot;
 	  ii.yHotspot = pCursor->bits->yhot;
@@ -372,13 +372,11 @@ winLoadCursor (ScreenPtr pScreen, CursorPtr pCursor, int screen)
 
 	  if (hCursor == NULL)
 	    winW32Error(2, "winLoadCursor - CreateIconIndirect failed:");
-	  else 
-	    {
-	      if (GetIconInfo(hCursor, &ii))
-		{
-		  if (ii.fIcon)
-		    {
-		      WIN_DEBUG_MSG("winLoadCursor: CreateIconIndirect returned  no cursor. Trying again.\n");
+            else {
+                if (GetIconInfo(hCursor, &ii)) {
+                    if (ii.fIcon) {
+                        WIN_DEBUG_MSG
+                            ("winLoadCursor: CreateIconIndirect returned  no cursor. Trying again.\n");
 		      
 		      DestroyCursor(hCursor);
 		      
@@ -388,7 +386,8 @@ winLoadCursor (ScreenPtr pScreen, CursorPtr pCursor, int screen)
 		      hCursor = (HCURSOR) CreateIconIndirect( &ii );
 		      
 		      if (hCursor == NULL)
-			winW32Error(2, "winLoadCursor - CreateIconIndirect failed:");
+                            winW32Error(2,
+                                        "winLoadCursor - CreateIconIndirect failed:");
 		    }
 		  /* GetIconInfo creates new bitmaps. Destroy them again */
 		  if (ii.hbmMask)
@@ -405,14 +404,13 @@ winLoadCursor (ScreenPtr pScreen, CursorPtr pCursor, int screen)
 	DeleteObject (hXor);
     }
 
-  if (!hCursor)
-    {
+    if (!hCursor) {
       /* We couldn't make a color cursor for this screen, use
 	 black and white instead */
       hCursor = CreateCursor (g_hInstance,
 			      pCursor->bits->xhot, pCursor->bits->yhot,
-			      pScreenPriv->cursor.sm_cx, pScreenPriv->cursor.sm_cy,
-			      pAnd, pXor);
+                               pScreenPriv->cursor.sm_cx,
+                               pScreenPriv->cursor.sm_cy, pAnd, pXor);
       if (hCursor == NULL)
 	winW32Error(2, "winLoadCursor - CreateCursor failed:");
     }
@@ -445,7 +443,6 @@ winRealizeCursor (DeviceIntPtr pDev, ScreenPtr pScreen, CursorPtr pCursor)
   return TRUE;
 }
 
-
 /*
  * winUnrealizeCursor
  *  Free the storage space associated with a realized cursor.
@@ -456,40 +453,36 @@ winUnrealizeCursor(DeviceIntPtr pDev, ScreenPtr pScreen, CursorPtr pCursor)
   return TRUE;
 }
 
-
 /*
  * winSetCursor
  *  Set the cursor sprite and position.
  */
 static void
-winSetCursor (DeviceIntPtr pDev, ScreenPtr pScreen, CursorPtr pCursor, int x, int y)
+winSetCursor(DeviceIntPtr pDev, ScreenPtr pScreen, CursorPtr pCursor, int x,
+             int y)
 {
   POINT ptCurPos, ptTemp;
   HWND  hwnd;
   RECT  rcClient;
   BOOL  bInhibit;
+
   winScreenPriv(pScreen);
   WIN_DEBUG_MSG("winSetCursor: cursor=%p\n", pCursor); 
   
   /* Inhibit changing the cursor if the mouse is not in a client area */
   bInhibit = FALSE;
-  if (GetCursorPos (&ptCurPos))
-    {
+    if (GetCursorPos(&ptCurPos)) {
       hwnd = WindowFromPoint (ptCurPos);
-      if (hwnd)
-	{
-	  if (GetClientRect (hwnd, &rcClient))
-	    {
+        if (hwnd) {
+            if (GetClientRect(hwnd, &rcClient)) {
 	      ptTemp.x = rcClient.left;
 	      ptTemp.y = rcClient.top;
-	      if (ClientToScreen (hwnd, &ptTemp))
-		{
+                if (ClientToScreen(hwnd, &ptTemp)) {
 		  rcClient.left = ptTemp.x;
 		  rcClient.top = ptTemp.y;
 		  ptTemp.x = rcClient.right;
 		  ptTemp.y = rcClient.bottom;
-		  if (ClientToScreen (hwnd, &ptTemp))
-		    {
+                    if (ClientToScreen(hwnd, &ptTemp)) {
 		      rcClient.right = ptTemp.x;
 		      rcClient.bottom = ptTemp.y;
 		      if (!PtInRect (&rcClient, ptCurPos))
@@ -500,19 +493,15 @@ winSetCursor (DeviceIntPtr pDev, ScreenPtr pScreen, CursorPtr pCursor, int x, in
 	}
     }
 
-  if (pCursor == NULL)
-    {
-      if (pScreenPriv->cursor.visible)
-	{
+    if (pCursor == NULL) {
+        if (pScreenPriv->cursor.visible) {
 	  if (!bInhibit && g_fSoftwareCursor)
 	    ShowCursor (FALSE);
 	  pScreenPriv->cursor.visible = FALSE;
 	}
     }
-  else
-    {
-      if (pScreenPriv->cursor.handle)
-	{
+    else {
+        if (pScreenPriv->cursor.handle) {
 	  if (!bInhibit)
 	    SetCursor (NULL);
 	  DestroyCursor (pScreenPriv->cursor.handle);
@@ -525,8 +514,7 @@ winSetCursor (DeviceIntPtr pDev, ScreenPtr pScreen, CursorPtr pCursor, int x, in
       if (!bInhibit)
 	SetCursor (pScreenPriv->cursor.handle);
 
-      if (!pScreenPriv->cursor.visible)
-	{
+        if (!pScreenPriv->cursor.visible) {
 	  if (!bInhibit && g_fSoftwareCursor)
 	    ShowCursor (TRUE);
 	  pScreenPriv->cursor.visible = TRUE;
@@ -534,7 +522,6 @@ winSetCursor (DeviceIntPtr pDev, ScreenPtr pScreen, CursorPtr pCursor, int x, in
     }
 }
 
-
 /*
  * winMoveCursor
  *  Move the cursor. This is a noop for us.
@@ -567,7 +554,6 @@ static miPointerSpriteFuncRec winSpriteFuncsRec = {
   winDeviceCursorCleanup
 };
 
-
 /*
 ===========================================================================
 
@@ -586,15 +572,14 @@ winCursorQueryBestSize (int class, unsigned short *width,
 {
   winScreenPriv(pScreen);
   
-  if (class == CursorShape)
-    {
+    if (class == CursorShape) {
       *width = pScreenPriv->cursor.sm_cx;
       *height = pScreenPriv->cursor.sm_cy;
     }
-  else
-    {
+    else {
       if (pScreenPriv->cursor.QueryBestSize)
-        (*pScreenPriv->cursor.QueryBestSize)(class, width, height, pScreen);
+            (*pScreenPriv->cursor.QueryBestSize) (class, width, height,
+                                                  pScreen);
     }
 }
 
@@ -607,6 +592,7 @@ winInitCursor (ScreenPtr pScreen)
 {
   winScreenPriv(pScreen);
   miPointerScreenPtr pPointPriv;
+
   /* override some screen procedures */
   pScreenPriv->cursor.QueryBestSize = pScreen->QueryBestSize;
   pScreen->QueryBestSize = winCursorQueryBestSize;
