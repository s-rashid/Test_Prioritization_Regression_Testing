diff --git a/hw/xfree86/vbe/vbe.h b/hw/xfree86/vbe/vbe.h
index 7f05e6b..b1ec5a9 100644
--- a/hw/xfree86/vbe/vbe.h
+++ b/hw/xfree86/vbe/vbe.h
@@ -37,10 +37,10 @@ typedef struct {
 #define VBE_VERSION_MAJOR(x) *((CARD8*)(&x) + 1)
 #define VBE_VERSION_MINOR(x) (CARD8)(x)
 
-vbeInfoPtr VBEInit(xf86Int10InfoPtr pInt, int entityIndex);
-vbeInfoPtr VBEExtendedInit(xf86Int10InfoPtr pInt, int entityIndex, int Flags);
-void vbeFree(vbeInfoPtr pVbe);
-xf86MonPtr vbeDoEDID(vbeInfoPtr pVbe, pointer pDDCModule);
+extern _X_EXPORT vbeInfoPtr VBEInit(xf86Int10InfoPtr pInt, int entityIndex);
+extern _X_EXPORT vbeInfoPtr VBEExtendedInit(xf86Int10InfoPtr pInt, int entityIndex, int Flags);
+extern _X_EXPORT void vbeFree(vbeInfoPtr pVbe);
+extern _X_EXPORT xf86MonPtr vbeDoEDID(vbeInfoPtr pVbe, pointer pDDCModule);
 
 #pragma pack(1)
 
@@ -99,8 +99,8 @@ struct _VbeInfoBlock {
 } __attribute__((packed));
 
 /* Return Super VGA Information */
-VbeInfoBlock *VBEGetVBEInfo(vbeInfoPtr pVbe);
-void VBEFreeVBEInfo(VbeInfoBlock *block);
+extern _X_EXPORT VbeInfoBlock *VBEGetVBEInfo(vbeInfoPtr pVbe);
+extern _X_EXPORT void VBEFreeVBEInfo(VbeInfoBlock *block);
 
 /*
  * INT 1
@@ -163,8 +163,8 @@ struct _VbeModeInfoBlock {
 } __attribute__((packed));
 
 /* Return VBE Mode Information */
-VbeModeInfoBlock *VBEGetModeInfo(vbeInfoPtr pVbe, int mode);
-void VBEFreeModeInfo(VbeModeInfoBlock *block);
+extern _X_EXPORT VbeModeInfoBlock *VBEGetModeInfo(vbeInfoPtr pVbe, int mode);
+extern _X_EXPORT void VBEFreeModeInfo(VbeModeInfoBlock *block);
 
 /*
  * INT2
@@ -189,13 +189,13 @@ struct _VbeCRTCInfoBlock {
 } __attribute__((packed));
 /* VbeCRTCInfoBlock is in the VESA 3.0 specs */
 
-Bool VBESetVBEMode(vbeInfoPtr pVbe, int mode, VbeCRTCInfoBlock *crtc);
+extern _X_EXPORT Bool VBESetVBEMode(vbeInfoPtr pVbe, int mode, VbeCRTCInfoBlock *crtc);
 
 /*
  * INT 3
  */
 
-Bool VBEGetVBEMode(vbeInfoPtr pVbe, int *mode);
+extern _X_EXPORT Bool VBEGetVBEMode(vbeInfoPtr pVbe, int *mode);
 
 /*
  * INT 4
@@ -217,7 +217,7 @@ typedef enum {
   MODE_RESTORE
 } vbeSaveRestoreFunction;
 
-Bool
+extern _X_EXPORT Bool
 VBESaveRestore(vbeInfoPtr pVbe, vbeSaveRestoreFunction fuction, 
 	       pointer *memory, int *size, int *real_mode_pages);
 
@@ -225,7 +225,7 @@ VBESaveRestore(vbeInfoPtr pVbe, vbeSaveRestoreFunction fuction,
  * INT 5
  */
 
-Bool
+extern _X_EXPORT Bool
 VBEBankSwitch(vbeInfoPtr pVbe, unsigned int iBank, int window);
 
 /*
@@ -251,7 +251,7 @@ typedef enum {
 #define VBEGetMaxLogicalScanline(pVbe, pixels, bytes, max)	\
 	VBESetGetLogicalScanlineLength(pVbe, SCANWID_GET_MAX, 0, \
 					pixels, bytes, max)
-Bool VBESetGetLogicalScanlineLength(vbeInfoPtr pVbe, 
+extern _X_EXPORT Bool VBESetGetLogicalScanlineLength(vbeInfoPtr pVbe,
 				    vbeScanwidthCommand command, int width,
 				     int *pixels, int *bytes, int *max);
 
@@ -260,15 +260,15 @@ Bool VBESetGetLogicalScanlineLength(vbeInfoPtr pVbe,
  */
 
 /* 16 bit code */
-Bool VBESetDisplayStart(vbeInfoPtr pVbe, int x, int y, Bool wait_retrace);
-Bool VBEGetDisplayStart(vbeInfoPtr pVbe, int *x, int *y);
+extern _X_EXPORT Bool VBESetDisplayStart(vbeInfoPtr pVbe, int x, int y, Bool wait_retrace);
+extern _X_EXPORT Bool VBEGetDisplayStart(vbeInfoPtr pVbe, int *x, int *y);
 
 /*
  * INT 8
  */
 
 /* if bits is 0, then it is a GET */
-int VBESetGetDACPaletteFormat(vbeInfoPtr pVbe, int bits);
+extern _X_EXPORT int VBESetGetDACPaletteFormat(vbeInfoPtr pVbe, int bits);
 
 /*
  * INT 9
@@ -280,7 +280,7 @@ int VBESetGetDACPaletteFormat(vbeInfoPtr pVbe, int bits);
  *  If setting a palette, it will return the pointer received on success,
  * NULL on failure.
  */
-CARD32 *VBESetGetPaletteData(vbeInfoPtr pVbe, Bool set, int first, int num,
+extern _X_EXPORT CARD32 *VBESetGetPaletteData(vbeInfoPtr pVbe, Bool set, int first, int num,
 			     CARD32 *data, Bool secondary, Bool wait_retrace);
 #define VBEFreePaletteData(data)	xfree(data)
 
@@ -294,7 +294,7 @@ typedef struct _VBEpmi {
     int tbl_len;
 } VBEpmi;
 
-VBEpmi *VBEGetVBEpmi(vbeInfoPtr pVbe);
+extern _X_EXPORT VBEpmi *VBEGetVBEpmi(vbeInfoPtr pVbe);
 #define VESAFreeVBEpmi(pmi)	xfree(pmi)
 
 /* high level helper functions */
@@ -315,12 +315,12 @@ typedef struct {
     int stateMode;
 } vbeSaveRestoreRec, *vbeSaveRestorePtr;
 
-void
+extern _X_EXPORT void
 VBEVesaSaveRestore(vbeInfoPtr pVbe, vbeSaveRestorePtr vbe_sr,
 		   vbeSaveRestoreFunction function);
 
-int VBEGetPixelClock(vbeInfoPtr pVbe, int mode, int Clock);
-Bool VBEDPMSSet(vbeInfoPtr pVbe, int mode);
+extern _X_EXPORT int VBEGetPixelClock(vbeInfoPtr pVbe, int mode, int Clock);
+extern _X_EXPORT Bool VBEDPMSSet(vbeInfoPtr pVbe, int mode);
 
 struct vbePanelID {
     short hsize;
@@ -335,7 +335,7 @@ struct vbePanelID {
     char reserved[14];
 };
 
-void VBEInterpretPanelID(int scrnIndex, struct vbePanelID *data);
-struct vbePanelID *VBEReadPanelID(vbeInfoPtr pVbe);
+extern _X_EXPORT void VBEInterpretPanelID(int scrnIndex, struct vbePanelID *data);
+extern _X_EXPORT struct vbePanelID *VBEReadPanelID(vbeInfoPtr pVbe);
 
 #endif
