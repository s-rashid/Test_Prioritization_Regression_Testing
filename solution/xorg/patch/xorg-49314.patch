diff --git a/randr/rrproperty.c b/randr/rrproperty.c
index a4402e1..481eb86 100644
--- a/randr/rrproperty.c
+++ b/randr/rrproperty.c
@@ -53,25 +53,39 @@ static void RRDeliverPropertyEvent(ScreenPtr pScreen, xEvent *event)
 	WalkTree(pScreen, DeliverPropertyEvent, event);
 }
 
-void
-RRDeleteAllOutputProperties (RROutputPtr output)
+static void
+RRDestroyOutputProperty (RRPropertyPtr prop)
 {
-    RRPropertyPtr prop, next;
-    xRROutputPropertyNotifyEvent    event;
+    free(prop->valid_values);
+    free(prop->current.data);
+    free(prop->pending.data);
+    free(prop);
+}
 
-    for (prop = output->properties; prop; prop = next)
+static void
+RRDeleteProperty(RROutputRec *output, RRPropertyRec *prop)
     {
-	next = prop->next;
+    xRROutputPropertyNotifyEvent event;
 	event.type = RREventBase + RRNotify;
 	event.subCode = RRNotify_OutputProperty;
 	event.output = output->id;
 	event.state = PropertyDelete;
 	event.atom = prop->propertyName;
 	event.timestamp = currentTime.milliseconds;
+
 	RRDeliverPropertyEvent (output->pScreen, (xEvent *)&event);
-	free(prop->current.data);
-	free(prop->pending.data);
-	free(prop);
+
+    RRDestroyOutputProperty(prop);
+}
+
+void
+RRDeleteAllOutputProperties(RROutputPtr output)
+{
+    RRPropertyPtr prop, next;
+
+    for (prop = output->properties; prop; prop = next) {
+	next = prop->next;
+        RRDeleteProperty(output, prop);
     }
 }
 
@@ -104,36 +118,16 @@ RRCreateOutputProperty (Atom property)
     return prop;
 }
 
-static void
-RRDestroyOutputProperty (RRPropertyPtr prop)
-{
-    free(prop->valid_values);
-    free(prop->current.data);
-    free(prop->pending.data);
-    free(prop->valid_values);
-    free(prop);
-}
-
 void
 RRDeleteOutputProperty (RROutputPtr output, Atom property)
 {
-    RRPropertyPtr	prop, *prev;
-    xRROutputPropertyNotifyEvent    event;
+    RRPropertyRec *prop, **prev;
 
     for (prev = &output->properties; (prop = *prev); prev = &(prop->next))
-	if (prop->propertyName == property)
-	    break;
-    if (prop)
-    {
+	if (prop->propertyName == property) {
 	*prev = prop->next;
-	event.type = RREventBase + RRNotify;
-	event.subCode = RRNotify_OutputProperty;
-	event.output = output->id;
-	event.state = PropertyDelete;
-	event.atom = prop->propertyName;
-	event.timestamp = currentTime.milliseconds;
-	RRDeliverPropertyEvent (output->pScreen, (xEvent *)&event);
-	RRDestroyOutputProperty (prop);
+            RRDeleteProperty(output, prop);
+            return;
     }
 }
 
