diff --git a/exa/exa_migration_mixed.c b/exa/exa_migration_mixed.c
index 4b22619..445c4fc 100644
--- a/exa/exa_migration_mixed.c
+++ b/exa/exa_migration_mixed.c
@@ -35,6 +35,7 @@ void
 exaCreateDriverPixmap_mixed(PixmapPtr pPixmap)
 {
     ScreenPtr pScreen = pPixmap->drawable.pScreen;
+
     ExaScreenPriv(pScreen);
     ExaPixmapPriv(pPixmap);
     int w = pPixmap->drawable.width, h = pPixmap->drawable.height;
@@ -55,19 +56,23 @@ exaCreateDriverPixmap_mixed(PixmapPtr pPixmap)
 
     if (pExaScr->info->CreatePixmap2) {
 	int new_pitch = 0;
-        pExaPixmap->driverPriv = pExaScr->info->CreatePixmap2(pScreen, w, h, depth, usage_hint, bpp, &new_pitch);
+
+        pExaPixmap->driverPriv =
+            pExaScr->info->CreatePixmap2(pScreen, w, h, depth, usage_hint, bpp,
+                                         &new_pitch);
 	paddedWidth = pExaPixmap->fb_pitch = new_pitch;
-    } else {
+    }
+    else {
 	if (paddedWidth < pExaPixmap->fb_pitch)
 	    paddedWidth = pExaPixmap->fb_pitch;
-	pExaPixmap->driverPriv = pExaScr->info->CreatePixmap(pScreen, paddedWidth*h, 0);
+        pExaPixmap->driverPriv =
+            pExaScr->info->CreatePixmap(pScreen, paddedWidth * h, 0);
     }
 
     if (!pExaPixmap->driverPriv)
 	return;
 
-    (*pScreen->ModifyPixmapHeader)(pPixmap, w, h, 0, 0,
-				paddedWidth, NULL);
+    (*pScreen->ModifyPixmapHeader) (pPixmap, w, h, 0, 0, paddedWidth, NULL);
 }
 
 void
@@ -80,8 +85,7 @@ exaDoMigration_mixed(ExaMigrationPtr pixmaps, int npixmaps, Bool can_accel)
      */
     for (i = 0; i < npixmaps; i++) {
 	if (exaPixmapIsPinned (pixmaps[i].pPix) &&
-	    !exaPixmapHasGpuCopy (pixmaps[i].pPix))
-	{
+            !exaPixmapHasGpuCopy(pixmaps[i].pPix)) {
 	    can_accel = FALSE;
 	    break;
 	}
@@ -93,6 +97,7 @@ exaDoMigration_mixed(ExaMigrationPtr pixmaps, int npixmaps, Bool can_accel)
 
     for (i = 0; i < npixmaps; i++) {
 	PixmapPtr pPixmap = pixmaps[i].pPix;
+
 	ExaPixmapPriv(pPixmap);
 
 	if (!pExaPixmap->driverPriv)
@@ -138,6 +143,7 @@ void
 exaDamageReport_mixed(DamagePtr pDamage, RegionPtr pRegion, void *closure)
 {
     PixmapPtr pPixmap = closure;
+
     ExaPixmapPriv(pPixmap);
 
     /* Move back results of software rendering on system memory copy of mixed driver
@@ -210,7 +216,8 @@ exaPrepareAccessReg_mixed(PixmapPtr pPixmap, int index, RegionPtr pReg)
 	if (index == EXA_PREPARE_DEST || index == EXA_PREPARE_AUX_DEST) {
 	    pixmaps[0].as_dst = TRUE;
 	    pixmaps[0].as_src = FALSE;
-	} else {
+        }
+        else {
 	    pixmaps[0].as_dst = FALSE;
 	    pixmaps[0].as_src = TRUE;
 	}
@@ -250,7 +257,8 @@ exaPrepareAccessReg_mixed(PixmapPtr pPixmap, int index, RegionPtr pReg)
 	    if (as_dst)
 		exaPixmapDirty(pPixmap, 0, 0, pPixmap->drawable.width,
 			       pPixmap->drawable.height);
-	} else if (has_gpu_copy)
+        }
+        else if (has_gpu_copy)
 	    exaCopyDirtyToSys(pixmaps);
 
 	pPixmap->devPrivate.ptr = pExaPixmap->sys_ptr;
@@ -258,4 +266,3 @@ exaPrepareAccessReg_mixed(PixmapPtr pPixmap, int index, RegionPtr pReg)
 	pExaPixmap->use_gpu_copy = FALSE;
     }
 }
-
