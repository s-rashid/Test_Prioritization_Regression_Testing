diff --git a/hw/xquartz/darwinEvents.c b/hw/xquartz/darwinEvents.c
index 3438da1..cf29a7b 100644
--- a/hw/xquartz/darwinEvents.c
+++ b/hw/xquartz/darwinEvents.c
@@ -75,7 +75,8 @@ in this Software without prior written authorization from The Open Group.
 #include "applewmExt.h"
 
 /* FIXME: Abstract this better */
-extern Bool QuartzModeEventHandler(int screenNum, XQuartzEvent *e, DeviceIntPtr dev);
+extern Bool QuartzModeEventHandler(int screenNum, XQuartzEvent * e,
+                                   DeviceIntPtr dev);
 
 int darwin_all_modifier_flags = 0;  // last known modifier state
 int darwin_all_modifier_mask = 0;
@@ -94,7 +95,9 @@ static pthread_mutex_t mieq_lock = PTHREAD_MUTEX_INITIALIZER;
 static pthread_cond_t mieq_ready_cond = PTHREAD_COND_INITIALIZER;
 
 /*** Pthread Magics ***/
-static pthread_t create_thread(void *(*func)(void *), void *arg) {
+static pthread_t
+create_thread(void *(*func) (void *), void *arg)
+{
     pthread_attr_t attr;
     pthread_t tid;
 
@@ -108,8 +111,11 @@ static pthread_t create_thread(void *(*func)(void *), void *arg) {
 }
 
 void darwinEvents_lock(void);
-void darwinEvents_lock(void) {
+void
+darwinEvents_lock(void)
+{
     int err;
+
     if((err = pthread_mutex_lock(&mieq_lock))) {
         ErrorF("%s:%s:%d: Failed to lock mieq_lock: %d\n",
                __FILE__, __FUNCTION__, __LINE__, err);
@@ -121,8 +127,11 @@ void darwinEvents_lock(void) {
 }
 
 void darwinEvents_unlock(void);
-void darwinEvents_unlock(void) {
+void
+darwinEvents_unlock(void)
+{
     int err;
+
     if((err = pthread_mutex_unlock(&mieq_lock))) {
         ErrorF("%s:%s:%d: Failed to unlock mieq_lock: %d\n",
                __FILE__, __FUNCTION__, __LINE__, err);
@@ -134,7 +143,9 @@ void darwinEvents_unlock(void) {
  * DarwinPressModifierKey
  * Press or release the given modifier key (one of NX_MODIFIERKEY_* constants)
  */
-static void DarwinPressModifierKey(int pressed, int key) {
+static void
+DarwinPressModifierKey(int pressed, int key)
+{
     int keycode = DarwinModifierNXKeyToNXKeycode(key, 0);
 
     if (keycode == 0) {
@@ -165,8 +176,8 @@ static int darwin_x11_modifier_mask_list[] = {
 
 static int darwin_all_modifier_mask_additions[] = { NX_SECONDARYFNMASK, };
 
-static void DarwinUpdateModifiers(
-    int pressed,        // KeyPress or KeyRelease
+static void
+DarwinUpdateModifiers(int pressed,      // KeyPress or KeyRelease
     int flags )         // modifier flags that have changed
 {
     int *f;
@@ -194,39 +205,35 @@ static void DarwinUpdateModifiers(
    be moved into their own individual functions and set as handlers using
    mieqSetHandler. */
 
-static void DarwinEventHandler(int screenNum, InternalEvent *ie, DeviceIntPtr dev) {
+static void
+DarwinEventHandler(int screenNum, InternalEvent *ie, DeviceIntPtr dev)
+{
     XQuartzEvent *e = &(ie->xquartz_event);
 
     switch(e->subtype) {
         case kXquartzControllerNotify:
             DEBUG_LOG("kXquartzControllerNotify\n");
             AppleWMSendEvent(AppleWMControllerNotify,
-                             AppleWMControllerNotifyMask,
-                             e->data[0],
-                             e->data[1]);
+                         AppleWMControllerNotifyMask, e->data[0], e->data[1]);
             break;
             
         case kXquartzPasteboardNotify:
             DEBUG_LOG("kXquartzPasteboardNotify\n");
             AppleWMSendEvent(AppleWMPasteboardNotify,
-                             AppleWMPasteboardNotifyMask,
-                             e->data[0],
-                             e->data[1]);
+                         AppleWMPasteboardNotifyMask, e->data[0], e->data[1]);
             break;
             
         case kXquartzActivate:
             DEBUG_LOG("kXquartzActivate\n");
             QuartzShow();
             AppleWMSendEvent(AppleWMActivationNotify,
-                             AppleWMActivationNotifyMask,
-                             AppleWMIsActive, 0);
+                         AppleWMActivationNotifyMask, AppleWMIsActive, 0);
             break;
             
         case kXquartzDeactivate:
             DEBUG_LOG("kXquartzDeactivate\n");
             AppleWMSendEvent(AppleWMActivationNotify,
-                             AppleWMActivationNotifyMask,
-                             AppleWMIsInactive, 0);
+                         AppleWMActivationNotifyMask, AppleWMIsInactive, 0);
             QuartzHide();
             break;
 
@@ -240,7 +247,8 @@ static void DarwinEventHandler(int screenNum, InternalEvent *ie, DeviceIntPtr de
         case kXquartzToggleFullscreen:
             DEBUG_LOG("kXquartzToggleFullscreen\n");
             if(XQuartzIsRootless)
-                ErrorF("Ignoring kXquartzToggleFullscreen because of rootless mode.");
+            ErrorF
+                ("Ignoring kXquartzToggleFullscreen because of rootless mode.");
             else 
                 QuartzRandRToggleFullscreen();
             break;
@@ -249,7 +257,8 @@ static void DarwinEventHandler(int screenNum, InternalEvent *ie, DeviceIntPtr de
             DEBUG_LOG("kXquartzSetRootless\n");
             if(e->data[0]) {
                 QuartzRandRSetFakeRootless();
-            } else {
+        }
+        else {
                 QuartzRandRSetFakeFullscreen(FALSE);
             }
             break;
@@ -290,7 +299,9 @@ static void DarwinEventHandler(int screenNum, InternalEvent *ie, DeviceIntPtr de
     }	
 }
 
-void DarwinListenOnOpenFD(int fd) {
+void
+DarwinListenOnOpenFD(int fd)
+{
     ErrorF("DarwinListenOnOpenFD: %d\n", fd);
     
     pthread_mutex_lock(&fd_add_lock);
@@ -303,7 +314,9 @@ void DarwinListenOnOpenFD(int fd) {
     pthread_mutex_unlock(&fd_add_lock);
 }
 
-static void *DarwinProcessFDAdditionQueue_thread(void *args) {
+static void *
+DarwinProcessFDAdditionQueue_thread(void *args)
+{
     /* TODO: Possibly adjust this to no longer be a race... maybe trigger this
      *       once a client connects and claims to be the WM.
      *
@@ -320,7 +333,8 @@ static void *DarwinProcessFDAdditionQueue_thread(void *args) {
     sleep_for.tv_sec = 3;
     sleep_for.tv_nsec = 0;
 
-    ErrorF("X11.app: DarwinProcessFDAdditionQueue_thread: Sleeping to allow xinitrc to catchup.\n");
+    ErrorF
+        ("X11.app: DarwinProcessFDAdditionQueue_thread: Sleeping to allow xinitrc to catchup.\n");
     while(nanosleep(&sleep_for, &sleep_remaining) != 0) {
         sleep_for = sleep_remaining;
     }
@@ -328,7 +342,8 @@ static void *DarwinProcessFDAdditionQueue_thread(void *args) {
     pthread_mutex_lock(&fd_add_lock);
     while(true) {
         while(fd_add_count) {
-            DarwinSendDDXEvent(kXquartzListenOnOpenFD, 1, fd_add[--fd_add_count]);
+            DarwinSendDDXEvent(kXquartzListenOnOpenFD, 1,
+                               fd_add[--fd_add_count]);
         }
         pthread_cond_wait(&fd_add_ready_cond, &fd_add_lock);
     }
@@ -336,14 +351,18 @@ static void *DarwinProcessFDAdditionQueue_thread(void *args) {
     return NULL;
 }
 
-Bool DarwinEQInit(void) { 
+Bool
+DarwinEQInit(void)
+{
     int *p;
 
-    for(p=darwin_x11_modifier_mask_list, darwin_all_modifier_mask=0; *p; p++) {
+    for (p = darwin_x11_modifier_mask_list, darwin_all_modifier_mask = 0; *p;
+         p++) {
         darwin_x11_modifier_mask |= *p;
     }
     
-    for(p=darwin_all_modifier_mask_additions, darwin_all_modifier_mask= darwin_x11_modifier_mask; *p; p++) {
+    for (p = darwin_all_modifier_mask_additions, darwin_all_modifier_mask =
+         darwin_x11_modifier_mask; *p; p++) {
         darwin_all_modifier_mask |= *p;
     }
     
@@ -371,7 +390,9 @@ Bool DarwinEQInit(void) {
     return TRUE;
 }
 
-void DarwinEQFini(void) {
+void
+DarwinEQFini(void)
+{
     mieqFini();
 }
 
@@ -379,7 +400,9 @@ void DarwinEQFini(void) {
  * ProcessInputEvents
  *  Read and process events from the event queue until it is empty.
  */
-void ProcessInputEvents(void) {
+void
+ProcessInputEvents(void)
+{
     char nullbyte;
 	int x = sizeof(nullbyte);
     
@@ -393,8 +416,11 @@ void ProcessInputEvents(void) {
 
 /* Sends a null byte down darwinEventWriteFD, which will cause the
    Dispatch() event loop to check out event queue */
-static void DarwinPokeEQ(void) {
+static void
+DarwinPokeEQ(void)
+{
 	char nullbyte=0;
+
 	//  <daniels> oh, i ... er ... christ.
 	write(darwinEventWriteFD, &nullbyte, sizeof(nullbyte));
 }
@@ -403,9 +429,11 @@ static void DarwinPokeEQ(void) {
  * Note: pointer_x and pointer_y are relative to the upper-left of primary
  *       display.
  */
-static void DarwinPrepareValuators(DeviceIntPtr pDev, int *valuators, ScreenPtr screen,
+static void
+DarwinPrepareValuators(DeviceIntPtr pDev, int *valuators, ScreenPtr screen,
                                    float pointer_x, float pointer_y, 
-                                   float pressure, float tilt_x, float tilt_y) {
+                       float pressure, float tilt_x, float tilt_y)
+{
     /* Fix offset between darwin and X screens */
     pointer_x -= darwinMainScreenX + screen->x;
     pointer_y -= darwinMainScreenY + screen->y;
@@ -422,10 +450,15 @@ static void DarwinPrepareValuators(DeviceIntPtr pDev, int *valuators, ScreenPtr
         valuators[2] = 0;
         valuators[3] = 0;
         valuators[4] = 0;
-    } else {
+    }
+    else {
         /* Setup our array of values */
-        valuators[0] = XQUARTZ_VALUATOR_LIMIT * (pointer_x / (float)screenInfo.screens[0]->width);
-        valuators[1] = XQUARTZ_VALUATOR_LIMIT * (pointer_y / (float)screenInfo.screens[0]->height);
+        valuators[0] =
+            XQUARTZ_VALUATOR_LIMIT * (pointer_x /
+                                      (float) screenInfo.screens[0]->width);
+        valuators[1] =
+            XQUARTZ_VALUATOR_LIMIT * (pointer_y /
+                                      (float) screenInfo.screens[0]->height);
         valuators[2] = XQUARTZ_VALUATOR_LIMIT * pressure;
         valuators[3] = XQUARTZ_VALUATOR_LIMIT * tilt_x;
         valuators[4] = XQUARTZ_VALUATOR_LIMIT * tilt_y;
@@ -434,13 +467,17 @@ static void DarwinPrepareValuators(DeviceIntPtr pDev, int *valuators, ScreenPtr
     //          valuators[0], valuators[1], valuators[2], valuators[3], valuators[4]);
 }
 
-void DarwinInputReleaseButtonsAndKeys(DeviceIntPtr pDev) {
+void
+DarwinInputReleaseButtonsAndKeys(DeviceIntPtr pDev)
+{
     darwinEvents_lock(); {
         int i;
+
         if (pDev->button) {
             for (i = 0; i < pDev->button->numButtons; i++) {
                 if (BitIsOn(pDev->button->down, i)) {
-                    QueuePointerEvents(pDev, ButtonRelease, i, POINTER_ABSOLUTE, NULL);
+                    QueuePointerEvents(pDev, ButtonRelease, i, POINTER_ABSOLUTE,
+                                       NULL);
                 }
             }
         }
@@ -448,16 +485,21 @@ void DarwinInputReleaseButtonsAndKeys(DeviceIntPtr pDev) {
         if (pDev->key) {
             for (i = 0; i < NUM_KEYCODES; i++) {
                 if (BitIsOn(pDev->key->down, i + MIN_KEYCODE)) {
-                    QueueKeyboardEvents(pDev, KeyRelease, i + MIN_KEYCODE, NULL);
+                    QueueKeyboardEvents(pDev, KeyRelease, i + MIN_KEYCODE,
+                                        NULL);
                 }
             }
         }
         DarwinPokeEQ();
-    } darwinEvents_unlock();
+    }
+    darwinEvents_unlock();
 }
 
-void DarwinSendPointerEvents(DeviceIntPtr pDev, int ev_type, int ev_button, float pointer_x, float pointer_y, 
-			     float pressure, float tilt_x, float tilt_y) {
+void
+DarwinSendPointerEvents(DeviceIntPtr pDev, int ev_type, int ev_button,
+                        float pointer_x, float pointer_y, float pressure,
+                        float tilt_x, float tilt_y)
+{
 	static int darwinFakeMouseButtonDown = 0;
     ScreenPtr screen;
     int valuators[5];
@@ -465,13 +507,15 @@ void DarwinSendPointerEvents(DeviceIntPtr pDev, int ev_type, int ev_button, floa
     //DEBUG_LOG("x=%f, y=%f, p=%f, tx=%f, ty=%f\n", pointer_x, pointer_y, pressure, tilt_x, tilt_y);
     
 	if(!darwinEvents) {
-		DEBUG_LOG("DarwinSendPointerEvents called before darwinEvents was initialized\n");
+        DEBUG_LOG
+            ("DarwinSendPointerEvents called before darwinEvents was initialized\n");
 		return;
 	}
 
     screen = miPointerGetScreen(pDev);
     if(!screen) {
-        DEBUG_LOG("DarwinSendPointerEvents called before screen was initialized\n");
+        DEBUG_LOG
+            ("DarwinSendPointerEvents called before screen was initialized\n");
         return;
     }
 
@@ -479,17 +523,22 @@ void DarwinSendPointerEvents(DeviceIntPtr pDev, int ev_type, int ev_button, floa
 	if (ev_type == ButtonPress && darwinFakeButtons && ev_button == 1) {
         if(darwinFakeMouseButtonDown != 0) {
             /* We're currently "down" with another button, so release it first */
-            DarwinSendPointerEvents(pDev, ButtonRelease, darwinFakeMouseButtonDown, pointer_x, pointer_y, pressure, tilt_x, tilt_y);
+            DarwinSendPointerEvents(pDev, ButtonRelease,
+                                    darwinFakeMouseButtonDown, pointer_x,
+                                    pointer_y, pressure, tilt_x, tilt_y);
             darwinFakeMouseButtonDown=0;
         }
 		if (darwin_all_modifier_flags & darwinFakeMouse2Mask) {
             ev_button = 2;
 			darwinFakeMouseButtonDown = 2;
-            DarwinUpdateModKeys(darwin_all_modifier_flags & ~darwinFakeMouse2Mask);
-		} else if (darwin_all_modifier_flags & darwinFakeMouse3Mask) {
+            DarwinUpdateModKeys(darwin_all_modifier_flags &
+                                ~darwinFakeMouse2Mask);
+        }
+        else if (darwin_all_modifier_flags & darwinFakeMouse3Mask) {
             ev_button = 3;
 			darwinFakeMouseButtonDown = 3;
-            DarwinUpdateModKeys(darwin_all_modifier_flags & ~darwinFakeMouse3Mask);
+            DarwinUpdateModKeys(darwin_all_modifier_flags &
+                                ~darwinFakeMouse3Mask);
 		}
 	}
 
@@ -499,71 +548,93 @@ void DarwinSendPointerEvents(DeviceIntPtr pDev, int ev_type, int ev_button, floa
         }
 
         if(darwinFakeMouseButtonDown == 2) {
-            DarwinUpdateModKeys(darwin_all_modifier_flags & ~darwinFakeMouse2Mask);
-        } else if(darwinFakeMouseButtonDown == 3) {
-            DarwinUpdateModKeys(darwin_all_modifier_flags & ~darwinFakeMouse3Mask);
+            DarwinUpdateModKeys(darwin_all_modifier_flags &
+                                ~darwinFakeMouse2Mask);
+        }
+        else if (darwinFakeMouseButtonDown == 3) {
+            DarwinUpdateModKeys(darwin_all_modifier_flags &
+                                ~darwinFakeMouse3Mask);
         }
 
         darwinFakeMouseButtonDown = 0;
 	}
 
-    DarwinPrepareValuators(pDev, valuators, screen, pointer_x, pointer_y, pressure, tilt_x, tilt_y);
+    DarwinPrepareValuators(pDev, valuators, screen, pointer_x, pointer_y,
+                           pressure, tilt_x, tilt_y);
     darwinEvents_lock(); {
         ValuatorMask mask;
-        valuator_mask_set_range(&mask, 0, (pDev == darwinPointer) ? 2 : 5, valuators);
+
+        valuator_mask_set_range(&mask, 0, (pDev == darwinPointer) ? 2 : 5,
+                                valuators);
         QueuePointerEvents(pDev, ev_type, ev_button, POINTER_ABSOLUTE, &mask);
         DarwinPokeEQ();
     } darwinEvents_unlock();
 }
 
-void DarwinSendKeyboardEvents(int ev_type, int keycode) {
+void
+DarwinSendKeyboardEvents(int ev_type, int keycode)
+{
 
 	if(!darwinEvents) {
-		DEBUG_LOG("DarwinSendKeyboardEvents called before darwinEvents was initialized\n");
+        DEBUG_LOG
+            ("DarwinSendKeyboardEvents called before darwinEvents was initialized\n");
 		return;
 	}
 
     darwinEvents_lock(); {
-        QueueKeyboardEvents(darwinKeyboard, ev_type, keycode + MIN_KEYCODE, NULL);
+        QueueKeyboardEvents(darwinKeyboard, ev_type, keycode + MIN_KEYCODE,
+                            NULL);
         DarwinPokeEQ();
-    } darwinEvents_unlock();
+    }
+    darwinEvents_unlock();
 }
 
-void DarwinSendProximityEvents(DeviceIntPtr pDev, int ev_type, float pointer_x, float pointer_y,  
-                               float pressure, float tilt_x, float tilt_y) {
+void
+DarwinSendProximityEvents(DeviceIntPtr pDev, int ev_type, float pointer_x,
+                          float pointer_y, float pressure, float tilt_x,
+                          float tilt_y)
+{
     ScreenPtr screen;
     int valuators[5];
 
-    DEBUG_LOG("DarwinSendProximityEvents: %d l:%f,%f p:%f t:%f,%f\n", ev_type, pointer_x, pointer_y, pressure, tilt_x, tilt_y);
+    DEBUG_LOG("DarwinSendProximityEvents: %d l:%f,%f p:%f t:%f,%f\n", ev_type,
+              pointer_x, pointer_y, pressure, tilt_x, tilt_y);
 
     if(!darwinEvents) {
-        DEBUG_LOG("DarwinSendProximityEvents called before darwinEvents was initialized\n");
+        DEBUG_LOG
+            ("DarwinSendProximityEvents called before darwinEvents was initialized\n");
         return;
     }
     
     screen = miPointerGetScreen(pDev);
     if(!screen) {
-        DEBUG_LOG("DarwinSendPointerEvents called before screen was initialized\n");
+        DEBUG_LOG
+            ("DarwinSendPointerEvents called before screen was initialized\n");
         return;
     }    
 
-    DarwinPrepareValuators(pDev, valuators, screen, pointer_x, pointer_y, pressure, tilt_x, tilt_y);
+    DarwinPrepareValuators(pDev, valuators, screen, pointer_x, pointer_y,
+                           pressure, tilt_x, tilt_y);
     darwinEvents_lock(); {
         ValuatorMask mask;
+
         valuator_mask_set_range(&mask, 0, 5, valuators);
         QueueProximityEvents(pDev, ev_type, &mask);
         DarwinPokeEQ();
     } darwinEvents_unlock();
 }
 
-
 /* Send the appropriate number of button clicks to emulate scroll wheel */
-void DarwinSendScrollEvents(float count_x, float count_y, 
+void
+DarwinSendScrollEvents(float count_x, float count_y,
 							float pointer_x, float pointer_y, 
-			    			float pressure, float tilt_x, float tilt_y) {
+                       float pressure, float tilt_x, float tilt_y)
+{
 	int sign_x, sign_y;
+
 	if(!darwinEvents) {
-		DEBUG_LOG("DarwinSendScrollEvents called before darwinEvents was initialized\n");
+        DEBUG_LOG
+            ("DarwinSendScrollEvents called before darwinEvents was initialized\n");
 		return;
 	}
 
@@ -574,13 +645,21 @@ void DarwinSendScrollEvents(float count_x, float count_y,
 	
 	while ((count_x > 0.0f) || (count_y > 0.0f)) {
 		if (count_x > 0.0f) {
-			DarwinSendPointerEvents(darwinPointer, ButtonPress, sign_x, pointer_x, pointer_y, pressure, tilt_x, tilt_y);
-			DarwinSendPointerEvents(darwinPointer, ButtonRelease, sign_x, pointer_x, pointer_y, pressure, tilt_x, tilt_y);
+            DarwinSendPointerEvents(darwinPointer, ButtonPress, sign_x,
+                                    pointer_x, pointer_y, pressure, tilt_x,
+                                    tilt_y);
+            DarwinSendPointerEvents(darwinPointer, ButtonRelease, sign_x,
+                                    pointer_x, pointer_y, pressure, tilt_x,
+                                    tilt_y);
 			count_x = count_x - 1.0f;
 		}
 		if (count_y > 0.0f) {
-			DarwinSendPointerEvents(darwinPointer, ButtonPress, sign_y, pointer_x, pointer_y, pressure, tilt_x, tilt_y);
-			DarwinSendPointerEvents(darwinPointer, ButtonRelease, sign_y, pointer_x, pointer_y, pressure, tilt_x, tilt_y);
+            DarwinSendPointerEvents(darwinPointer, ButtonPress, sign_y,
+                                    pointer_x, pointer_y, pressure, tilt_x,
+                                    tilt_y);
+            DarwinSendPointerEvents(darwinPointer, ButtonRelease, sign_y,
+                                    pointer_x, pointer_y, pressure, tilt_x,
+                                    tilt_y);
 			count_y = count_y - 1.0f;
 		}
 	}
@@ -588,9 +667,15 @@ void DarwinSendScrollEvents(float count_x, float count_y,
 
 /* Send the appropriate KeyPress/KeyRelease events to GetKeyboardEvents to
    reflect changing modifier flags (alt, control, meta, etc) */
-void DarwinUpdateModKeys(int flags) {
-	DarwinUpdateModifiers(KeyRelease, darwin_all_modifier_flags & ~flags & darwin_x11_modifier_mask);
-	DarwinUpdateModifiers(KeyPress, ~darwin_all_modifier_flags & flags & darwin_x11_modifier_mask);
+void
+DarwinUpdateModKeys(int flags)
+{
+    DarwinUpdateModifiers(KeyRelease,
+                          darwin_all_modifier_flags & ~flags &
+                          darwin_x11_modifier_mask);
+    DarwinUpdateModifiers(KeyPress,
+                          ~darwin_all_modifier_flags & flags &
+                          darwin_x11_modifier_mask);
 	darwin_all_modifier_flags = flags;
 }
 
@@ -598,7 +683,9 @@ void DarwinUpdateModKeys(int flags) {
  * DarwinSendDDXEvent
  *  Send the X server thread a message by placing it on the event queue.
  */
-void DarwinSendDDXEvent(int type, int argc, ...) {
+void
+DarwinSendDDXEvent(int type, int argc, ...)
+{
     XQuartzEvent e;
     int i;
     va_list args;
