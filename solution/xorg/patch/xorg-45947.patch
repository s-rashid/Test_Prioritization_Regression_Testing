diff --git a/include/exevents.h b/include/exevents.h
index 8d4b80b..ff39b28 100644
--- a/include/exevents.h
+++ b/include/exevents.h
@@ -33,6 +33,97 @@ OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 #include <X11/extensions/XIproto.h>
 #include "inputstr.h"
 
+/***************************************************************
+ *              Interface available to drivers                 *
+ ***************************************************************/
+
+extern _X_EXPORT int InitProximityClassDeviceStruct(
+	DeviceIntPtr           /* dev */);
+
+extern _X_EXPORT void InitValuatorAxisStruct(
+	DeviceIntPtr           /* dev */,
+	int                    /* axnum */,
+	Atom                   /* label */,
+	int                    /* minval */,
+	int                    /* maxval */,
+	int                    /* resolution */,
+	int                    /* min_res */,
+	int                    /* max_res */);
+
+/* Input device properties */
+extern _X_EXPORT void XIDeleteAllDeviceProperties(
+        DeviceIntPtr            /* device */
+);
+
+extern _X_EXPORT int XIDeleteDeviceProperty(
+        DeviceIntPtr            /* device */,
+        Atom                    /* property */,
+        Bool                    /* fromClient */
+);
+
+extern _X_EXPORT int XIChangeDeviceProperty(
+        DeviceIntPtr            /* dev */,
+        Atom                    /* property */,
+        Atom                    /* type */,
+        int                     /* format*/,
+        int                     /* mode*/,
+        unsigned long           /* len*/,
+        pointer                 /* value*/,
+        Bool                    /* sendevent*/
+        );
+
+extern _X_EXPORT int XIGetDeviceProperty(
+        DeviceIntPtr            /* dev */,
+        Atom                    /* property */,
+        XIPropertyValuePtr*     /* value */
+);
+
+extern _X_EXPORT int XISetDevicePropertyDeletable(
+        DeviceIntPtr            /* dev */,
+        Atom                    /* property */,
+        Bool                    /* deletable */
+);
+
+extern _X_EXPORT long XIRegisterPropertyHandler(
+        DeviceIntPtr         dev,
+        int (*SetProperty) (DeviceIntPtr dev,
+                            Atom property,
+                            XIPropertyValuePtr prop,
+                            BOOL checkonly),
+        int (*GetProperty) (DeviceIntPtr dev,
+                            Atom property),
+        int (*DeleteProperty) (DeviceIntPtr dev,
+                               Atom property)
+);
+
+extern _X_EXPORT void XIUnregisterPropertyHandler(
+        DeviceIntPtr          dev,
+        long                  id
+);
+
+extern _X_EXPORT Atom XIGetKnownProperty(
+        char*                 name
+);
+
+extern _X_EXPORT DeviceIntPtr XIGetDevice(xEvent *ev);
+
+extern _X_EXPORT int XIPropToInt(
+        XIPropertyValuePtr val,
+        int *nelem_return,
+        int **buf_return
+);
+
+extern _X_EXPORT int XIPropToFloat(
+        XIPropertyValuePtr val,
+        int *nelem_return,
+        float **buf_return
+);
+
+/****************************************************************************
+ *                      End of driver interface                             *
+ ****************************************************************************/
+
+
 /**
  * Attached to the devPrivates of each client. Specifies the version number as
  * supported by the client.
@@ -55,43 +146,35 @@ typedef struct _GrabParameters {
 } GrabParameters;
 
 
-extern _X_EXPORT void RegisterOtherDevice (
+extern void
+RegisterOtherDevice (
 	DeviceIntPtr           /* device */);
 
-extern _X_EXPORT int
+extern int
 UpdateDeviceState (
 	DeviceIntPtr           /* device */,
 	DeviceEvent*           /*  xE    */);
 
-extern _X_EXPORT void ProcessOtherEvent (
+extern void
+ProcessOtherEvent (
 	InternalEvent*         /* ev */,
 	DeviceIntPtr           /* other */);
 
-extern _X_EXPORT int InitProximityClassDeviceStruct(
-	DeviceIntPtr           /* dev */);
-
-extern _X_EXPORT void InitValuatorAxisStruct(
-	DeviceIntPtr           /* dev */,
-	int                    /* axnum */,
-	Atom                   /* label */,
-	int                    /* minval */,
-	int                    /* maxval */,
-	int                    /* resolution */,
-	int                    /* min_res */,
-	int                    /* max_res */);
-
-extern void DeviceFocusEvent(
+extern void
+DeviceFocusEvent(
 	DeviceIntPtr           /* dev */,
 	int                    /* type */,
 	int                    /* mode */,
 	int                    /* detail */,
 	WindowPtr              /* pWin */);
 
-extern int CheckGrabValues(
+extern int
+CheckGrabValues(
         ClientPtr              /* client */,
         GrabParameters*        /* param */);
 
-extern int GrabButton(
+extern int
+GrabButton(
 	ClientPtr              /* client */,
 	DeviceIntPtr           /* dev */,
 	DeviceIntPtr           /* modifier_device */,
@@ -100,7 +183,8 @@ extern int GrabButton(
         GrabType               /* grabtype */,
 	GrabMask*              /* eventMask */);
 
-extern int GrabKey(
+extern int
+GrabKey(
 	ClientPtr              /* client */,
 	DeviceIntPtr           /* dev */,
 	DeviceIntPtr           /* modifier_device */,
@@ -109,34 +193,40 @@ extern int GrabKey(
         GrabType               /* grabtype */,
 	GrabMask*              /* eventMask */);
 
-extern int GrabWindow(
+extern int
+GrabWindow(
 	ClientPtr              /* client */,
 	DeviceIntPtr           /* dev */,
 	int                    /* type */,
 	GrabParameters*        /* param */,
 	GrabMask*              /* eventMask */);
 
-extern int SelectForWindow(
+extern int
+SelectForWindow(
 	DeviceIntPtr           /* dev */,
 	WindowPtr              /* pWin */,
 	ClientPtr              /* client */,
 	Mask                   /* mask */,
 	Mask                   /* exclusivemasks */);
 
-extern _X_EXPORT int AddExtensionClient (
+extern int
+AddExtensionClient (
 	WindowPtr              /* pWin */,
 	ClientPtr              /* client */,
 	Mask                   /* mask */,
 	int                    /* mskidx */);
 
-extern _X_EXPORT void RecalculateDeviceDeliverableEvents(
+extern void
+RecalculateDeviceDeliverableEvents(
 	WindowPtr              /* pWin */);
 
-extern _X_EXPORT int InputClientGone(
+extern int
+InputClientGone(
 	WindowPtr              /* pWin */,
 	XID                    /* id */);
 
-extern _X_EXPORT int SendEvent (
+extern int
+SendEvent (
 	ClientPtr              /* client */,
 	DeviceIntPtr           /* d */,
 	Window                 /* dest */,
@@ -145,13 +235,15 @@ extern _X_EXPORT int SendEvent (
 	Mask                   /* mask */,
 	int                    /* count */);
 
-extern _X_EXPORT int SetButtonMapping (
+extern int
+SetButtonMapping (
 	ClientPtr              /* client */,
 	DeviceIntPtr           /* dev */,
 	int                    /* nElts */,
 	BYTE *                 /* map */);
 
-extern _X_EXPORT int ChangeKeyMapping(
+extern int
+ChangeKeyMapping(
 	ClientPtr              /* client */,
 	DeviceIntPtr           /* dev */,
 	unsigned               /* len */,
@@ -161,15 +253,18 @@ extern _X_EXPORT int ChangeKeyMapping(
 	CARD8                  /* keySymsPerKeyCode */,
 	KeySym *               /* map */);
 
-extern _X_EXPORT void DeleteWindowFromAnyExtEvents(
+extern void
+DeleteWindowFromAnyExtEvents(
 	WindowPtr              /* pWin */,
 	Bool                   /* freeResources */);
 
-extern _X_EXPORT int MaybeSendDeviceMotionNotifyHint (
+extern int
+MaybeSendDeviceMotionNotifyHint (
 	deviceKeyButtonPointer * /* pEvents */,
 	Mask                   /* mask */);
 
-extern _X_EXPORT void CheckDeviceGrabAndHintWindow (
+extern void
+CheckDeviceGrabAndHintWindow (
 	WindowPtr              /* pWin */,
 	int                    /* type */,
 	deviceKeyButtonPointer * /* xE */,
@@ -177,17 +272,20 @@ extern _X_EXPORT void CheckDeviceGrabAndHintWindow (
 	ClientPtr              /* client */,
 	Mask                   /* deliveryMask */);
 
-extern _X_EXPORT void MaybeStopDeviceHint(
+extern void
+MaybeStopDeviceHint(
 	DeviceIntPtr           /* dev */,
 	ClientPtr              /* client */);
 
-extern _X_EXPORT int DeviceEventSuppressForWindow(
+extern int
+DeviceEventSuppressForWindow(
 	WindowPtr              /* pWin */,
 	ClientPtr              /* client */,
 	Mask                   /* mask */,
 	int                    /* maskndx */);
 
-extern _X_EXPORT void SendEventToAllWindows(
+extern void
+SendEventToAllWindows(
         DeviceIntPtr           /* dev */,
         Mask                   /* mask */,
         xEvent *               /* ev */,
@@ -197,85 +295,18 @@ extern _X_HIDDEN void XI2EventSwap(
         xGenericEvent  *              /* from */,
         xGenericEvent  *              /* to */);
 
-/* Input device properties */
-extern _X_EXPORT void XIDeleteAllDeviceProperties(
-        DeviceIntPtr            /* device */
-);
-
-extern _X_EXPORT int XIDeleteDeviceProperty(
-        DeviceIntPtr            /* device */,
-        Atom                    /* property */,
-        Bool                    /* fromClient */
-);
-
-extern _X_EXPORT int XIChangeDeviceProperty(
-        DeviceIntPtr            /* dev */,
-        Atom                    /* property */,
-        Atom                    /* type */,
-        int                     /* format*/,
-        int                     /* mode*/,
-        unsigned long           /* len*/,
-        pointer                 /* value*/,
-        Bool                    /* sendevent*/
-        );
-
-extern _X_EXPORT int XIGetDeviceProperty(
-        DeviceIntPtr            /* dev */,
-        Atom                    /* property */,
-        XIPropertyValuePtr*     /* value */
-);
-
-extern _X_EXPORT int XISetDevicePropertyDeletable(
-        DeviceIntPtr            /* dev */,
-        Atom                    /* property */,
-        Bool                    /* deletable */
-);
-
-extern _X_EXPORT long XIRegisterPropertyHandler(
-        DeviceIntPtr         dev,
-        int (*SetProperty) (DeviceIntPtr dev,
-                            Atom property,
-                            XIPropertyValuePtr prop,
-                            BOOL checkonly),
-        int (*GetProperty) (DeviceIntPtr dev,
-                            Atom property),
-        int (*DeleteProperty) (DeviceIntPtr dev,
-                               Atom property)
-);
-
-extern _X_EXPORT void XIUnregisterPropertyHandler(
-        DeviceIntPtr          dev,
-        long                  id
-);
-
-extern _X_EXPORT Atom XIGetKnownProperty(
-        char*                 name
-);
-
-extern _X_EXPORT DeviceIntPtr XIGetDevice(xEvent *ev);
-
-extern _X_EXPORT int XIPropToInt(
-        XIPropertyValuePtr val,
-        int *nelem_return,
-        int **buf_return
-);
-
-extern _X_EXPORT int XIPropToFloat(
-        XIPropertyValuePtr val,
-        int *nelem_return,
-        float **buf_return
-);
-
 /* For an event such as MappingNotify which affects client interpretation
  * of input events sent by device dev, should we notify the client, or
  * would it merely be irrelevant and confusing? */
-extern _X_EXPORT int XIShouldNotify(ClientPtr client, DeviceIntPtr dev);
+extern int
+XIShouldNotify(ClientPtr client, DeviceIntPtr dev);
 
 extern void
 XISendDeviceChangedEvent(DeviceIntPtr device, DeviceIntPtr master,
                          DeviceChangedEvent *dce);
 
-extern void XISetEventMask(DeviceIntPtr dev, WindowPtr win, ClientPtr client,
+extern void
+XISetEventMask(DeviceIntPtr dev, WindowPtr win, ClientPtr client,
                            unsigned int len, unsigned char* mask);
 
 #endif /* EXEVENTS_H */
