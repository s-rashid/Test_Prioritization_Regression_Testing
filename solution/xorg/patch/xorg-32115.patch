diff --git a/hw/kdrive/ephyr/ephyrdriext.c b/hw/kdrive/ephyr/ephyrdriext.c
index 437d8c4..ac68054 100644
--- a/hw/kdrive/ephyr/ephyrdriext.c
+++ b/hw/kdrive/ephyr/ephyrdriext.c
@@ -79,7 +79,7 @@ static void XF86DRIResetProc(ExtensionEntry* extEntry);
 
 static unsigned char DRIReqCode = 0;
 
-extern void XFree86DRIExtensionInit(void);
+extern void ephyrDRIExtensionInit(void);
 
 void
 ephyrDRIExtensionInit(void)
@@ -113,13 +113,13 @@ XF86DRIResetProc (
 }
 
 static int
-ProcXF86DRIQueryVersion(
-    register ClientPtr client
-)
+ProcXF86DRIQueryVersion (register ClientPtr client)
 {
     xXF86DRIQueryVersionReply rep;
     register int n;
 
+    EPHYR_LOG ("enter\n") ;
+
     REQUEST_SIZE_MATCH(xXF86DRIQueryVersionReq);
     rep.type = X_Reply;
     rep.length = 0;
@@ -135,18 +135,18 @@ ProcXF86DRIQueryVersion(
 	swapl(&rep.patchVersion, n);
     }
     WriteToClient(client, sizeof(xXF86DRIQueryVersionReply), (char *)&rep);
+    EPHYR_LOG ("leave\n") ;
     return (client->noClientException);
 }
 
 static int
-ProcXF86DRIQueryDirectRenderingCapable(
-    register ClientPtr client
-)
+ProcXF86DRIQueryDirectRenderingCapable (register ClientPtr client)
 {
     xXF86DRIQueryDirectRenderingCapableReply	rep;
     Bool isCapable;
     register int n;
 
+    EPHYR_LOG ("enter\n") ;
     REQUEST(xXF86DRIQueryDirectRenderingCapableReq);
     REQUEST_SIZE_MATCH(xXF86DRIQueryDirectRenderingCapableReq);
     if (stuff->screen >= screenInfo.numScreens) {
@@ -171,20 +171,20 @@ ProcXF86DRIQueryDirectRenderingCapable(
     	swapl(&rep.length, n);
     }
 
-    WriteToClient(client, 
-	sizeof(xXF86DRIQueryDirectRenderingCapableReply), (char *)&rep);
+    WriteToClient(client, sizeof(xXF86DRIQueryDirectRenderingCapableReply), (char *)&rep);
+    EPHYR_LOG ("leave\n") ;
+
     return (client->noClientException);
 }
 
 static int
-ProcXF86DRIOpenConnection(
-    register ClientPtr client
-)
+ProcXF86DRIOpenConnection (register ClientPtr client)
 {
     xXF86DRIOpenConnectionReply rep;
     drm_handle_t			hSAREA;
     char*			busIdString;
 
+    EPHYR_LOG ("enter\n") ;
     REQUEST(xXF86DRIOpenConnectionReq);
     REQUEST_SIZE_MATCH(xXF86DRIOpenConnectionReq);
     if (stuff->screen >= screenInfo.numScreens) {
@@ -216,16 +216,16 @@ ProcXF86DRIOpenConnection(
     WriteToClient(client, sizeof(xXF86DRIOpenConnectionReply), (char *)&rep);
     if (rep.busIdStringLength)
 	WriteToClient(client, rep.busIdStringLength, busIdString);
+    EPHYR_LOG ("leave\n") ;
     return (client->noClientException);
 }
 
 static int
-ProcXF86DRIAuthConnection(
-    register ClientPtr client
-)
+ProcXF86DRIAuthConnection  (register ClientPtr client)
 {
     xXF86DRIAuthConnectionReply rep;
     
+    EPHYR_LOG ("enter\n") ;
     REQUEST(xXF86DRIAuthConnectionReq);
     REQUEST_SIZE_MATCH(xXF86DRIAuthConnectionReq);
     if (stuff->screen >= screenInfo.numScreens) {
@@ -243,14 +243,14 @@ ProcXF86DRIAuthConnection(
         rep.authenticated = 0;
     }
     WriteToClient(client, sizeof(xXF86DRIAuthConnectionReply), (char *)&rep);
+    EPHYR_LOG ("leave\n") ;
     return (client->noClientException);
 }
 
 static int
-ProcXF86DRICloseConnection(
-    register ClientPtr client
-)
+ProcXF86DRICloseConnection (register ClientPtr client)
 {
+    EPHYR_LOG ("enter\n") ;
     REQUEST(xXF86DRICloseConnectionReq);
     REQUEST_SIZE_MATCH(xXF86DRICloseConnectionReq);
     if (stuff->screen >= screenInfo.numScreens) {
@@ -262,17 +262,17 @@ ProcXF86DRICloseConnection(
     DRICloseConnection( screenInfo.screens[stuff->screen]);
     */
 
+    EPHYR_LOG ("leave\n") ;
     return (client->noClientException);
 }
 
 static int
-ProcXF86DRIGetClientDriverName(
-    register ClientPtr client
-)
+ProcXF86DRIGetClientDriverName (register ClientPtr client)
 {
     xXF86DRIGetClientDriverNameReply	rep;
     char* clientDriverName;
 
+    EPHYR_LOG ("enter\n") ;
     REQUEST(xXF86DRIGetClientDriverNameReq);
     REQUEST_SIZE_MATCH(xXF86DRIGetClientDriverNameReq);
     if (stuff->screen >= screenInfo.numScreens) {
@@ -301,19 +301,19 @@ ProcXF86DRIGetClientDriverName(
 	WriteToClient(client, 
                       rep.clientDriverNameLength, 
                       clientDriverName);
+    EPHYR_LOG ("leave\n") ;
     return (client->noClientException);
 }
 
 static int
-ProcXF86DRICreateContext(
-    register ClientPtr client
-)
+ProcXF86DRICreateContext (register ClientPtr client)
 {
     xXF86DRICreateContextReply	rep;
     ScreenPtr pScreen;
     VisualPtr visual;
     int i;
 
+    EPHYR_LOG ("enter\n") ;
     REQUEST(xXF86DRICreateContextReq);
     REQUEST_SIZE_MATCH(xXF86DRICreateContextReq);
     if (stuff->screen >= screenInfo.numScreens) {
@@ -347,14 +347,15 @@ ProcXF86DRICreateContext(
     */
 
     WriteToClient(client, sizeof(xXF86DRICreateContextReply), (char *)&rep);
+    EPHYR_LOG ("leave\n") ;
     return (client->noClientException);
 }
 
 static int
-ProcXF86DRIDestroyContext(
-    register ClientPtr client
-)
+ProcXF86DRIDestroyContext (register ClientPtr client)
 {
+    EPHYR_LOG ("enter\n") ;
+
     REQUEST(xXF86DRIDestroyContextReq);
     REQUEST_SIZE_MATCH(xXF86DRIDestroyContextReq);
     if (stuff->screen >= screenInfo.numScreens) {
@@ -369,18 +370,18 @@ ProcXF86DRIDestroyContext(
     }
     */
 
+    EPHYR_LOG ("leave\n") ;
     return (client->noClientException);
 }
 
 static int
-ProcXF86DRICreateDrawable(
-    ClientPtr client
-)
+ProcXF86DRICreateDrawable (ClientPtr client)
 {
     xXF86DRICreateDrawableReply	rep;
     DrawablePtr pDrawable;
     int rc;
 
+    EPHYR_LOG ("enter\n") ;
     REQUEST(xXF86DRICreateDrawableReq);
     REQUEST_SIZE_MATCH(xXF86DRICreateDrawableReq);
     if (stuff->screen >= screenInfo.numScreens) {
@@ -408,25 +409,28 @@ ProcXF86DRICreateDrawable(
     }
 
     WriteToClient(client, sizeof(xXF86DRICreateDrawableReply), (char *)&rep);
+    EPHYR_LOG ("leave\n") ;
     return (client->noClientException);
 }
 
 static int
-ProcXF86DRIDestroyDrawable(
-    register ClientPtr client
-)
+ProcXF86DRIDestroyDrawable (register ClientPtr client)
 {
     REQUEST(xXF86DRIDestroyDrawableReq);
     DrawablePtr pDrawable;
     REQUEST_SIZE_MATCH(xXF86DRIDestroyDrawableReq);
     int rc;
 
+    EPHYR_LOG ("enter\n") ;
     if (stuff->screen >= screenInfo.numScreens) {
 	client->errorValue = stuff->screen;
 	return BadValue;
     }
 
-    rc = dixLookupDrawable(&pDrawable, stuff->drawable, client, 0,
+    rc = dixLookupDrawable(&pDrawable,
+                           stuff->drawable,
+                           client,
+                           0,
 			   DixReadAccess);
     if (rc != Success)
 	return rc;
@@ -435,13 +439,12 @@ ProcXF86DRIDestroyDrawable(
                                  0/*should be drawable in host x*/)) {
 	return BadValue;
     }
+    EPHYR_LOG ("leave\n") ;
     return (client->noClientException);
 }
 
 static int
-ProcXF86DRIGetDrawableInfo(
-    register ClientPtr client
-)
+ProcXF86DRIGetDrawableInfo (register ClientPtr client)
 {
     xXF86DRIGetDrawableInfoReply	rep;
     DrawablePtr pDrawable;
@@ -450,6 +453,7 @@ ProcXF86DRIGetDrawableInfo(
     drm_clip_rect_t * pBackClipRects;
     int backX, backY, rc;
 
+    EPHYR_LOG ("enter\n") ;
     REQUEST(xXF86DRIGetDrawableInfoReq);
     REQUEST_SIZE_MATCH(xXF86DRIGetDrawableInfoReq);
     if (stuff->screen >= screenInfo.numScreens) {
@@ -546,19 +550,19 @@ ProcXF86DRIGetDrawableInfo(
 		     sizeof(drm_clip_rect_t) * rep.numBackClipRects,
 		     (char *)pBackClipRects);
     }
+    EPHYR_LOG ("leave\n") ;
 
     return (client->noClientException);
 }
 
 static int
-ProcXF86DRIGetDeviceInfo(
-    register ClientPtr client
-)
+ProcXF86DRIGetDeviceInfo (register ClientPtr client)
 {
     xXF86DRIGetDeviceInfoReply	rep;
     drm_handle_t hFrameBuffer;
     void *pDevPrivate;
 
+    EPHYR_LOG ("enter\n") ;
     REQUEST(xXF86DRIGetDeviceInfoReq);
     REQUEST_SIZE_MATCH(xXF86DRIGetDeviceInfoReq);
     if (stuff->screen >= screenInfo.numScreens) {
@@ -598,59 +602,83 @@ ProcXF86DRIGetDeviceInfo(
     if (rep.length) {
         WriteToClient(client, rep.devPrivateSize, (char *)pDevPrivate);
     }
+    EPHYR_LOG ("leave\n") ;
     return (client->noClientException);
 }
 
 static int
-ProcXF86DRIDispatch (
-    register ClientPtr	client
-)
+ProcXF86DRIDispatch (register ClientPtr	client)
 {
     REQUEST(xReq);
+    EPHYR_LOG ("enter\n") ;
 
     switch (stuff->data)
     {
-    case X_XF86DRIQueryVersion:
+        case X_XF86DRIQueryVersion: {
+                EPHYR_LOG ("leave\n") ;
         return ProcXF86DRIQueryVersion(client);
-    case X_XF86DRIQueryDirectRenderingCapable:
+        }
+        case X_XF86DRIQueryDirectRenderingCapable: {
+                EPHYR_LOG ("leave\n") ;
         return ProcXF86DRIQueryDirectRenderingCapable(client);
     }
+    }
 
     if (!LocalClient(client))
         return DRIErrorBase + XF86DRIClientNotLocal;
 
     switch (stuff->data)
     {
-    case X_XF86DRIOpenConnection:
+        case X_XF86DRIOpenConnection: {
+            EPHYR_LOG ("leave\n") ;
         return ProcXF86DRIOpenConnection(client);
-    case X_XF86DRICloseConnection:
+        }
+        case X_XF86DRICloseConnection: {
+            EPHYR_LOG ("leave\n") ;
         return ProcXF86DRICloseConnection(client);
-    case X_XF86DRIGetClientDriverName:
+        }
+        case X_XF86DRIGetClientDriverName: {
+            EPHYR_LOG ("leave\n") ;
         return ProcXF86DRIGetClientDriverName(client);
-    case X_XF86DRICreateContext:
+        }
+        case X_XF86DRICreateContext: {
+            EPHYR_LOG ("leave\n") ;
         return ProcXF86DRICreateContext(client);
-    case X_XF86DRIDestroyContext:
+        }
+        case X_XF86DRIDestroyContext: {
+            EPHYR_LOG ("leave\n") ;
         return ProcXF86DRIDestroyContext(client);
-    case X_XF86DRICreateDrawable:
+        }
+        case X_XF86DRICreateDrawable: {
+            EPHYR_LOG ("leave\n") ;
         return ProcXF86DRICreateDrawable(client);
-    case X_XF86DRIDestroyDrawable:
+        }
+        case X_XF86DRIDestroyDrawable: {
+            EPHYR_LOG ("leave\n") ;
         return ProcXF86DRIDestroyDrawable(client);
-    case X_XF86DRIGetDrawableInfo:
+        }
+        case X_XF86DRIGetDrawableInfo: {
+            EPHYR_LOG ("leave\n") ;
         return ProcXF86DRIGetDrawableInfo(client);
-    case X_XF86DRIGetDeviceInfo:
+        }
+        case X_XF86DRIGetDeviceInfo: {
+            EPHYR_LOG ("leave\n") ;
         return ProcXF86DRIGetDeviceInfo(client);
-    case X_XF86DRIAuthConnection:
+        }
+        case X_XF86DRIAuthConnection: {
+            EPHYR_LOG ("leave\n") ;
         return ProcXF86DRIAuthConnection(client);
+        }
     /* {Open,Close}FullScreen are deprecated now */
-    default:
+        default: {
+            EPHYR_LOG ("leave\n") ;
         return BadRequest;
     }
 }
+}
 
 static int
-SProcXF86DRIQueryVersion(
-    register ClientPtr	client
-)
+SProcXF86DRIQueryVersion (register ClientPtr	client)
 {
     register int n;
     REQUEST(xXF86DRIQueryVersionReq);
@@ -659,9 +687,7 @@ SProcXF86DRIQueryVersion(
 }
 
 static int
-SProcXF86DRIQueryDirectRenderingCapable(
-    register ClientPtr client
-)
+SProcXF86DRIQueryDirectRenderingCapable (register ClientPtr client)
 {
     register int n;
     REQUEST(xXF86DRIQueryDirectRenderingCapableReq);
@@ -671,25 +697,30 @@ SProcXF86DRIQueryDirectRenderingCapable(
 }
 
 static int
-SProcXF86DRIDispatch (
-    register ClientPtr	client
-)
+SProcXF86DRIDispatch (register ClientPtr client)
 {
     REQUEST(xReq);
 
+    EPHYR_LOG ("enter\n") ;
     /*
      * Only local clients are allowed DRI access, but remote clients still need
      * these requests to find out cleanly.
      */
     switch (stuff->data)
     {
-    case X_XF86DRIQueryVersion:
+        case X_XF86DRIQueryVersion: {
+            EPHYR_LOG ("leave\n") ;
 	return SProcXF86DRIQueryVersion(client);
-    case X_XF86DRIQueryDirectRenderingCapable:
+        }
+        case X_XF86DRIQueryDirectRenderingCapable: {
+            EPHYR_LOG ("leave\n") ;
 	return SProcXF86DRIQueryDirectRenderingCapable(client);
-    default:
+        }
+        default: {
+            EPHYR_LOG ("leave\n") ;
 	return DRIErrorBase + XF86DRIClientNotLocal;
     }
 }
+}
 
 #endif /*XEPHYR_DRI*/
