diff --git a/hw/xfree86/i2c/uda1380.c b/hw/xfree86/i2c/uda1380.c
index c7b1cda..8722687 100644
--- a/hw/xfree86/i2c/uda1380.c
+++ b/hw/xfree86/i2c/uda1380.c
@@ -31,15 +31,16 @@
 #include "uda1380.h"
 #include "i2c_def.h"
 
-UDA1380Ptr Detect_uda1380(I2CBusPtr b, I2CSlaveAddr addr)
+UDA1380Ptr
+Detect_uda1380(I2CBusPtr b, I2CSlaveAddr addr)
 {
 	UDA1380Ptr t;
 	I2CByte a;
   
 	t = calloc(1, sizeof(UDA1380Rec));
-	if(t == NULL) return NULL;
-	switch(addr)
-	{
+    if (t == NULL)
+        return NULL;
+    switch (addr) {
 		case UDA1380_ADDR_1:
 		case UDA1380_ADDR_2:
 			t->d.DevName = "UDA1380 Stereo audion coder-decoder";
@@ -56,25 +57,25 @@ UDA1380Ptr Detect_uda1380(I2CBusPtr b, I2CSlaveAddr addr)
 	t->d.AcknTimeout = b->AcknTimeout;
 	t->d.ByteTimeout = b->ByteTimeout;
   
-	if(!I2C_WriteRead(&(t->d), NULL, 0, &a, 1))
-	{
+    if (!I2C_WriteRead(&(t->d), NULL, 0, &a, 1)) {
 		free(t);
 		return NULL;
 	}
   
 	/* set default parameters */
-	if(!I2CDevInit(&(t->d)))
-	{
+    if (!I2CDevInit(&(t->d))) {
 		free(t);
 		return NULL;
 	}
   
-	xf86DrvMsg(t->d.pI2CBus->scrnIndex,X_INFO,"UDA1380 stereo coder-decoder detected\n");
+    xf86DrvMsg(t->d.pI2CBus->scrnIndex, X_INFO,
+               "UDA1380 stereo coder-decoder detected\n");
 
 	return t;  
 }
 
-Bool uda1380_init(UDA1380Ptr t)
+Bool
+uda1380_init(UDA1380Ptr t)
 {
 	CARD8 data[3];
 	CARD16 tmp;
@@ -82,13 +83,16 @@ Bool uda1380_init(UDA1380Ptr t)
 
 	/* Power control */
 	data[0] = 0x02;
-	tmp = (1 << 13) | (1 << 10) | ( 1 << 8) | (1 << 7) | (1 << 6) | (1 << 3) | (1 << 1);
+    tmp =
+        (1 << 13) | (1 << 10) | (1 << 8) | (1 << 7) | (1 << 6) | (1 << 3) | (1
+                                                                             <<
+                                                                             1);
 	data[1] = (CARD8)((tmp >> 8) & 0xff);
 	data[2] = (CARD8)(tmp & 0xff);
 	ret = I2C_WriteRead(&(t->d), data, 3, NULL, 0);
-	if (ret == FALSE)
-	{
-		xf86DrvMsg(t->d.pI2CBus->scrnIndex,X_INFO,"UDA1380 failed to initialize\n");
+    if (ret == FALSE) {
+        xf86DrvMsg(t->d.pI2CBus->scrnIndex, X_INFO,
+                   "UDA1380 failed to initialize\n");
 		return FALSE;
 	}
 
@@ -98,9 +102,9 @@ Bool uda1380_init(UDA1380Ptr t)
 	data[1] = 0x3f;
 	data[2] = 0x3f;
 	ret = I2C_WriteRead(&(t->d), data, 3, NULL, 0);
-	if (ret == FALSE)
-	{
-		xf86DrvMsg(t->d.pI2CBus->scrnIndex,X_INFO,"UDA1380 failed to initialize\n");
+    if (ret == FALSE) {
+        xf86DrvMsg(t->d.pI2CBus->scrnIndex, X_INFO,
+                   "UDA1380 failed to initialize\n");
 		return FALSE;
 	}
 		  
@@ -109,7 +113,8 @@ Bool uda1380_init(UDA1380Ptr t)
 	return TRUE;
 }
 
-void uda1380_shutdown(UDA1380Ptr t)
+void
+uda1380_shutdown(UDA1380Ptr t)
 {
 	CARD8 data[3];
 	Bool ret;
@@ -120,12 +125,15 @@ void uda1380_shutdown(UDA1380Ptr t)
 	data[2] = 0;
 	ret = I2C_WriteRead(&(t->d), data, 3, NULL, 0);
 	if (ret == FALSE)
-		xf86DrvMsg(t->d.pI2CBus->scrnIndex,X_INFO,"UDA1380 failed to shutdown\n");
+        xf86DrvMsg(t->d.pI2CBus->scrnIndex, X_INFO,
+                   "UDA1380 failed to shutdown\n");
 }
 
-void uda1380_setvolume(UDA1380Ptr t, INT32 value)
+void
+uda1380_setvolume(UDA1380Ptr t, INT32 value)
 {
 	CARD8 data[3];
+
 	/*
 	 * We have to scale the value ranging from -1000 to 1000 to 0x2c to 0
 	 */
@@ -140,44 +148,49 @@ void uda1380_setvolume(UDA1380Ptr t, INT32 value)
 	data[2] = volume & 0x3f;
 	ret = I2C_WriteRead(&(t->d), data, 3, NULL, 0);
 	if (ret == FALSE)
-		xf86DrvMsg(t->d.pI2CBus->scrnIndex,X_INFO,"UDA1380 failed to set volume\n");
+        xf86DrvMsg(t->d.pI2CBus->scrnIndex, X_INFO,
+                   "UDA1380 failed to set volume\n");
 }
 
-void uda1380_mute(UDA1380Ptr t, Bool mute)
+void
+uda1380_mute(UDA1380Ptr t, Bool mute)
 {
 	CARD8 data[3];
 	Bool ret;
 		  
-	if (mute == TRUE)
-	{
+    if (mute == TRUE) {
 		/* Analog mixer  (AVC) */
 		data[0] = 0x03;
 		data[1] = 0xff;
 		data[2] = 0xff;
 		ret = I2C_WriteRead(&(t->d), data, 3, NULL, 0);
 		if (ret == FALSE)
-			xf86DrvMsg(t->d.pI2CBus->scrnIndex,X_INFO,"UDA1380 failed to mute\n");
+            xf86DrvMsg(t->d.pI2CBus->scrnIndex, X_INFO,
+                       "UDA1380 failed to mute\n");
 	}
-	else
-	{
+    else {
 		/* Analog mixer  (AVC) */
 		data[0] = 0x03;
 		data[1] = (CARD8)((t->analog_mixer_settings >> 8) & 0x3f);
 		data[2] = (CARD8)(t->analog_mixer_settings & 0x3f);
 		ret = I2C_WriteRead(&(t->d), data, 3, NULL, 0);
 		if (ret == FALSE)
-			xf86DrvMsg(t->d.pI2CBus->scrnIndex,X_INFO,"UDA1380 failed to unmute\n");
+            xf86DrvMsg(t->d.pI2CBus->scrnIndex, X_INFO,
+                       "UDA1380 failed to unmute\n");
 	}
 }
 
-void uda1380_getstatus(UDA1380Ptr t)
+void
+uda1380_getstatus(UDA1380Ptr t)
 {
 }
 
-void uda1380_setparameters(UDA1380Ptr t)
+void
+uda1380_setparameters(UDA1380Ptr t)
 {
 }
 
-void uda1380_dumpstatus(UDA1380Ptr t)
+void
+uda1380_dumpstatus(UDA1380Ptr t)
 {
 }
