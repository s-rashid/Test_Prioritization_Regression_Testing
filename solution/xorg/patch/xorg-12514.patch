diff --git a/hw/xfree86/os-support/linux/lnx_init.c b/hw/xfree86/os-support/linux/lnx_init.c
index b068af2..4246e86 100644
--- a/hw/xfree86/os-support/linux/lnx_init.c
+++ b/hw/xfree86/os-support/linux/lnx_init.c
@@ -1,4 +1,4 @@
-/* $XdotOrg: xc/programs/Xserver/hw/xfree86/os-support/linux/lnx_init.c,v 1.2 2004/04/23 19:54:08 eich Exp $ */
+/* $XdotOrg: xc/programs/Xserver/hw/xfree86/os-support/linux/lnx_init.c,v 1.3 2005/01/14 18:42:26 eich Exp $ */
 /* $XFree86: xc/programs/Xserver/hw/xfree86/os-support/linux/lnx_init.c,v 3.14 2001/10/31 22:50:30 tsi Exp $ */
 /*
  * Copyright 1992 by Orest Zborowski <obz@Kodak.com>
@@ -84,7 +84,6 @@ void
 xf86OpenConsole(void)
 {
     int i, fd = -1;
-    int result;
     struct vt_mode VT;
     struct vt_stat vts;
     MessageType from = X_PROBED;
@@ -95,13 +94,12 @@ xf86OpenConsole(void)
     char *tty0[] = { "/dev/tty0", "/dev/vc/0", NULL };
     char *vcs[] = { "/dev/vc/%d", "/dev/tty%d", NULL };
 
-    if (serverGeneration == 1)
-    {
-	/* check if we're run with euid==0 */
-	if (geteuid() != 0)
-	{
-	    FatalError("xf86OpenConsole: Server must be suid root\n");
-	}
+    if (serverGeneration == 1) {
+
+	/* when KeepTty check if we're run with euid==0 */
+	if (KeepTty && geteuid() != 0) 
+	    FatalError("xf86OpenConsole:"
+		       " Server must be suid root for option \"KeepTTY\"\n");
 
 	/*
 	 * setup the virtual terminal manager
@@ -110,20 +108,23 @@ xf86OpenConsole(void)
 	    xf86Info.vtno = VTnum;
 	    from = X_CMDLINE;
 	} else {
+
 	    i=0;
-	    while (tty0[i] != NULL)
-	    {
+	    while (tty0[i] != NULL) {
 		if ((fd = open(tty0[i],O_WRONLY,0)) >= 0)
 		  break;
 		i++;
 	    }
+	    
 	    if (fd < 0)
 		FatalError(
 		    "xf86OpenConsole: Cannot open /dev/tty0 (%s)\n",
 		    strerror(errno));
+
 	    if ((ioctl(fd, VT_OPENQRY, &xf86Info.vtno) < 0) ||
 		(xf86Info.vtno == -1)) {
-		FatalError("xf86OpenConsole: Cannot find a free VT\n");
+		FatalError("xf86OpenConsole: Cannot find a free VT: %s\n",
+			   strerror(errno));
 	    }
 	    close(fd);
 	}
@@ -132,43 +133,61 @@ xf86OpenConsole(void)
 	fb_dev_name=getenv("FRAMEBUFFER");
 	if (!fb_dev_name)
 	    fb_dev_name="/dev/fb0current";
+	
 	if ((fbfd = open(fb_dev_name, O_RDONLY)) < 0)
 	    FatalError("xf86OpenConsole: Cannot open %s (%s)\n",
 	fb_dev_name, strerror(errno));
-	if (ioctl(fbfd, FBIOGET_VSCREENINFO, &var))
-	    FatalError("xf86OpenConsole: Unable to get screen info\n");
+
+	if (ioctl(fbfd, FBIOGET_VSCREENINFO, &var) < 0)
+	    FatalError("xf86OpenConsole: Unable to get screen info %s\n",
+		       strerror(errno));
 #endif
 	xf86Msg(from, "using VT number %d\n\n", xf86Info.vtno);
 
 	if (!KeepTty) {
-	    setpgrp();
+	    pid_t ppid = getppid();
+	    pid_t ppgid;
+	    ppgid = getpgid(ppid);
+
+	    /*
+	     * change to parent process group that pgid != pid so
+	     * that setsid() doesn't fail and we become process
+	     * group leader
+	     */
+	    if (setpgid(0,ppgid) < 0)
+		xf86Msg(X_WARNING, "xf86OpenConsole: setpgid failed: %s\n",
+			strerror(errno));
+
+	    /* become process group leader */
+	    if ((setsid() < 0))
+		xf86Msg(X_WARNING, "xf86OpenConsole: setsid failed: %s\n",
+			strerror(errno));
 	}
 
         i=0;
-        while (vcs[i] != NULL)
-        {
+        while (vcs[i] != NULL) {
             sprintf(vtname, vcs[i], xf86Info.vtno); /* /dev/tty1-64 */
      	    if ((xf86Info.consoleFd = open(vtname, O_RDWR|O_NDELAY, 0)) >= 0)
 		break;
             i++;
         }
 
-	if (xf86Info.consoleFd < 0) {
-	    FatalError("xf86OpenConsole: Cannot open virtual console %d (%s)\n",
-		       xf86Info.vtno, strerror(errno));
-	}
+	if (xf86Info.consoleFd < 0)
+	    FatalError("xf86OpenConsole: Cannot open virtual console"
+		       " %d (%s)\n", xf86Info.vtno, strerror(errno));
 
 	/*
 	 * Grab the vt ownership before we overwrite it.
 	 * Hard coded /dev/tty0 into this function as well for below.
 	 */
-	if (!saveVtPerms()){
+	if (!saveVtPerms())
 	  xf86Msg(X_WARNING,
 		  "xf86OpenConsole: Could not save ownership of VT\n");
-	}
 
 	/* change ownership of the vt */
-	chown(vtname, getuid(), getgid());
+	if (chown(vtname, getuid(), getgid()) < 0)
+	    xf86Msg(X_WARNING,"xf86OpenConsole: chown %s failed: %s\n",
+		    vtname, strerror(errno));
 
 	/*
 	 * the current VT device we're running on is not "console", we want
@@ -176,65 +195,63 @@ xf86OpenConsole(void)
 	 *
 	 * Why is this needed??
 	 */
-	chown("/dev/tty0", getuid(), getgid());
+	if (chown("/dev/tty0", getuid(), getgid()) < 0)
+	    xf86Msg(X_WARNING,"xf86OpenConsole: chown /dev/tty0 failed: %s\n",
+		    strerror(errno));
 
 	/*
 	 * Linux doesn't switch to an active vt after the last close of a vt,
 	 * so we do this ourselves by remembering which is active now.
 	 */
-	if (ioctl(xf86Info.consoleFd, VT_GETSTATE, &vts) == 0)
-	{
+	if (ioctl(xf86Info.consoleFd, VT_GETSTATE, &vts) < 0)
+	    xf86Msg(X_WARNING,"xf86OpenConsole: VT_GETSTATE failed: %s\n",
+		    strerror(errno));
+	else
 	    activeVT = vts.v_active;
-	}
 
-	if (!KeepTty)
-	{
+#if 0
+	if (!KeepTty) {
 	    /*
 	     * Detach from the controlling tty to avoid char loss
 	     */
-	    if ((i = open("/dev/tty",O_RDWR)) >= 0)
-	    {
+	    if ((i = open("/dev/tty",O_RDWR)) >= 0) {
 		ioctl(i, TIOCNOTTY, 0);
 		close(i);
 	    }
 	}
+#endif
 
-	/*
-	 * now get the VT
-	 */
-	SYSCALL(result = ioctl(xf86Info.consoleFd, VT_ACTIVATE, xf86Info.vtno));
-	if (result != 0)
-	{
-	    xf86Msg(X_WARNING, "xf86OpenConsole: VT_ACTIVATE failed\n");
-	}
-	SYSCALL(result =
-		  ioctl(xf86Info.consoleFd, VT_WAITACTIVE, xf86Info.vtno));
-	if (result != 0)
-	{
-	    xf86Msg(X_WARNING, "xf86OpenConsole: VT_WAITACTIVE failed\n");
-	}
 #if defined(DO_OS_FONTRESTORE)
 	lnx_savefont();
 #endif 
-	SYSCALL(result = ioctl(xf86Info.consoleFd, VT_GETMODE, &VT));
-	if (result < 0)
-	{
-	    FatalError("xf86OpenConsole: VT_GETMODE failed\n");
-	}
+	/*
+	 * now get the VT
+	 */
+	if (ioctl(xf86Info.consoleFd, VT_ACTIVATE, xf86Info.vtno) < 0)
+	    xf86Msg(X_WARNING, "xf86OpenConsole: VT_ACTIVATE failed: %s\n",
+		    strerror(errno));
+
+	if (ioctl(xf86Info.consoleFd, VT_WAITACTIVE, xf86Info.vtno) < 0)
+	    xf86Msg(X_WARNING, "xf86OpenConsole: VT_WAITACTIVE failed: %s\n",
+		    strerror(errno));
+
+	if (ioctl(xf86Info.consoleFd, VT_GETMODE, &VT) < 0)
+	    FatalError("xf86OpenConsole: VT_GETMODE failed %s\n",
+		       strerror(errno));
 
 	signal(SIGUSR1, xf86VTRequest);
 
 	VT.mode = VT_PROCESS;
 	VT.relsig = SIGUSR1;
 	VT.acqsig = SIGUSR1;
+
 	if (ioctl(xf86Info.consoleFd, VT_SETMODE, &VT) < 0)
-	{
-	    FatalError("xf86OpenConsole: VT_SETMODE VT_PROCESS failed\n");
-	}
+	    FatalError("xf86OpenConsole: VT_SETMODE VT_PROCESS failed: %s\n",
+		strerror(errno));
+	
 	if (ioctl(xf86Info.consoleFd, KDSETMODE, KD_GRAPHICS) < 0)
-	{
-	    FatalError("xf86OpenConsole: KDSETMODE KD_GRAPHICS failed\n");
-	}
+	    FatalError("xf86OpenConsole: KDSETMODE KD_GRAPHICS failed %s\n",
+		       strerror(errno));
 
 	/* we really should have a InitOSInputDevices() function instead
 	 * of Init?$#*&Device(). So I just place it here */
@@ -247,24 +264,17 @@ xf86OpenConsole(void)
 	    FatalError("Unable to set screen info\n");
 	close(fbfd);
 #endif
-    }
-    else
-    {
-	/* serverGeneration != 1 */
+    } else { 	/* serverGeneration != 1 */
 	/*
 	 * now get the VT
 	 */
-	SYSCALL(result = ioctl(xf86Info.consoleFd, VT_ACTIVATE, xf86Info.vtno));
-	if (result != 0)
-	{
-	    xf86Msg(X_WARNING, "xf86OpenConsole: VT_ACTIVATE failed\n");
-	}
-	SYSCALL(result =
-		ioctl(xf86Info.consoleFd, VT_WAITACTIVE, xf86Info.vtno));
-	if (result != 0)
-	{
-	    xf86Msg(X_WARNING, "xf86OpenConsole: VT_WAITACTIVE failed\n");
-	}
+	if (ioctl(xf86Info.consoleFd, VT_ACTIVATE, xf86Info.vtno) < 0)
+	    xf86Msg(X_WARNING, "xf86OpenConsole: VT_ACTIVATE failed %s\n",
+		    strerror(errno));
+
+	if (ioctl(xf86Info.consoleFd, VT_WAITACTIVE, xf86Info.vtno) < 0)
+	    xf86Msg(X_WARNING, "xf86OpenConsole: VT_WAITACTIVE failed %s\n",
+		    strerror(errno));
     }
     return;
 }
@@ -277,31 +287,41 @@ xf86CloseConsole()
     struct vt_stat vts;
     int vtno = -1;
 
-    if (ioctl(xf86Info.consoleFd, VT_GETSTATE, &vts) == 0)
+    if (ioctl(xf86Info.consoleFd, VT_GETSTATE, &vts) < 0)
+	xf86Msg(X_WARNING, "xf86CloseConsole: VT_GETSTATE failed: %s\n",
+		strerror(errno));
+    else
 	vtno = vts.v_active;
 #endif
-#if 0
-    ioctl(xf86Info.consoleFd, VT_ACTIVATE, xf86Info.vtno);
-    ioctl(xf86Info.consoleFd, VT_WAITACTIVE, 0);
-#endif
-    ioctl(xf86Info.consoleFd, KDSETMODE, KD_TEXT);  /* Back to text mode ... */
 
-    if (ioctl(xf86Info.consoleFd, VT_GETMODE, &VT) != -1)
-    {
+    /* Back to text mode ... */
+    if (ioctl(xf86Info.consoleFd, KDSETMODE, KD_TEXT) < 0)
+	xf86Msg(X_WARNING, "xf86CloseConsole: KDSETMODE failed: %s\n",
+		strerror(errno));
+	
+    if (ioctl(xf86Info.consoleFd, VT_GETMODE, &VT) < 0) 
+	xf86Msg(X_WARNING, "xf86CloseConsole: VT_GETMODE failed: %s\n",
+		strerror(errno));
+    else {
+	/* set dflt vt handling */
 	VT.mode = VT_AUTO;
-	ioctl(xf86Info.consoleFd, VT_SETMODE, &VT); /* set dflt vt handling */
+	if (ioctl(xf86Info.consoleFd, VT_SETMODE, &VT) < 0) 
+	    xf86Msg(X_WARNING, "xf86CloseConsole: VT_SETMODE failed: %s\n",
+		    strerror(errno));
     }
 
     /*
      * Perform a switch back to the active VT when we were started
      */
-    if (activeVT >= 0)
-    {
-	ioctl(xf86Info.consoleFd, VT_ACTIVATE, activeVT);
+    if (activeVT >= 0) {
+	if (ioctl(xf86Info.consoleFd, VT_ACTIVATE, activeVT) < 0)
+	    xf86Msg(X_WARNING, "xf86CloseConsole: VT_ACTIVATE failed: %s\n",
+		    strerror(errno));
 	activeVT = -1;
     }
+
 #if defined(DO_OS_FONTRESTORE)
-    if (xf86Info.vtno == vtno)
+    if (xf86Info.vtno == vtno)	/* check if we are active */
 	lnx_restorefont();
     lnx_freefontdata();
 #endif
