diff --git a/hw/xfree86/modes/xf86RandR12.c b/hw/xfree86/modes/xf86RandR12.c
index d5031a2..a773c34 100644
--- a/hw/xfree86/modes/xf86RandR12.c
+++ b/hw/xfree86/modes/xf86RandR12.c
@@ -71,10 +71,10 @@ static int xf86RandR12Generation;
 
 static DevPrivateKeyRec xf86RandR12KeyRec;
 static DevPrivateKey xf86RandR12Key;
+
 #define XF86RANDRINFO(p) ((XF86RandRInfoPtr) \
     dixLookupPrivate(&(p)->devPrivates, xf86RandR12Key))
 
-
 static int
 xf86RandR12ModeRefresh (DisplayModePtr mode)
 {
@@ -86,7 +86,8 @@ xf86RandR12ModeRefresh (DisplayModePtr mode)
 
 /* Adapt panning area; return TRUE if panning area was valid without adaption */
 static int
-xf86RandR13VerifyPanningArea (xf86CrtcPtr crtc, int screenWidth, int screenHeight)
+xf86RandR13VerifyPanningArea(xf86CrtcPtr crtc, int screenWidth,
+                             int screenHeight)
 {
     int ret = TRUE;
 
@@ -101,7 +102,8 @@ xf86RandR13VerifyPanningArea (xf86CrtcPtr crtc, int screenWidth, int screenHeigh
 	crtc->panningTotalArea.x1    = crtc->panningTotalArea.x2    = 0;
 	crtc->panningTrackingArea.x1 = crtc->panningTrackingArea.x2 = 0;
 	crtc->panningBorder[0]       = crtc->panningBorder[2]       = 0;
-    } else {
+    }
+    else {
 	/* Panning in X is enabled */
 	if (crtc->panningTotalArea.x1 < 0) {
 	    /* Panning region outside screen -> move inside */
@@ -109,20 +111,24 @@ xf86RandR13VerifyPanningArea (xf86CrtcPtr crtc, int screenWidth, int screenHeigh
 	    crtc->panningTotalArea.x1 = 0;
 	    ret = FALSE;
 	}
-	if (crtc->panningTotalArea.x2 < crtc->panningTotalArea.x1 + crtc->mode.HDisplay) {
+        if (crtc->panningTotalArea.x2 <
+            crtc->panningTotalArea.x1 + crtc->mode.HDisplay) {
 	    /* Panning region smaller than displayed area -> crop to displayed area */
-	    crtc->panningTotalArea.x2 = crtc->panningTotalArea.x1 + crtc->mode.HDisplay;
+            crtc->panningTotalArea.x2 =
+                crtc->panningTotalArea.x1 + crtc->mode.HDisplay;
 	    ret = FALSE;
 	}
 	if (crtc->panningTotalArea.x2 > screenWidth) {
 	    /* Panning region larger than screen -> move inside, then crop to screen */
-	    crtc->panningTotalArea.x1 -= crtc->panningTotalArea.x2 - screenWidth;
+            crtc->panningTotalArea.x1 -=
+                crtc->panningTotalArea.x2 - screenWidth;
 	    crtc->panningTotalArea.x2 = screenWidth;
 	    ret = FALSE;
 	    if (crtc->panningTotalArea.x1 < 0)
 		crtc->panningTotalArea.x1 = 0;
 	}
-	if (crtc->panningBorder[0] + crtc->panningBorder[2] > crtc->mode.HDisplay) {
+        if (crtc->panningBorder[0] + crtc->panningBorder[2] >
+            crtc->mode.HDisplay) {
 	    /* Borders too large -> set to 0 */
 	    crtc->panningBorder[0] = crtc->panningBorder[2] = 0;
 	    ret = FALSE;
@@ -137,7 +143,8 @@ xf86RandR13VerifyPanningArea (xf86CrtcPtr crtc, int screenWidth, int screenHeigh
 	crtc->panningTotalArea.y1    = crtc->panningTotalArea.y2    = 0;
 	crtc->panningTrackingArea.y1 = crtc->panningTrackingArea.y2 = 0;
 	crtc->panningBorder[1]       = crtc->panningBorder[3]       = 0;
-    } else {
+    }
+    else {
 	/* Panning in Y is enabled */
 	if (crtc->panningTotalArea.y1 < 0) {
 	    /* Panning region outside screen -> move inside */
@@ -145,20 +152,24 @@ xf86RandR13VerifyPanningArea (xf86CrtcPtr crtc, int screenWidth, int screenHeigh
 	    crtc->panningTotalArea.y1 = 0;
 	    ret = FALSE;
 	}
-	if (crtc->panningTotalArea.y2 < crtc->panningTotalArea.y1 + crtc->mode.VDisplay) {
+        if (crtc->panningTotalArea.y2 <
+            crtc->panningTotalArea.y1 + crtc->mode.VDisplay) {
 	    /* Panning region smaller than displayed area -> crop to displayed area */
-	    crtc->panningTotalArea.y2 = crtc->panningTotalArea.y1 + crtc->mode.VDisplay;
+            crtc->panningTotalArea.y2 =
+                crtc->panningTotalArea.y1 + crtc->mode.VDisplay;
 	    ret = FALSE;
 	}
 	if (crtc->panningTotalArea.y2 > screenHeight) {
 	    /* Panning region larger than screen -> move inside, then crop to screen */
-	    crtc->panningTotalArea.y1 -= crtc->panningTotalArea.y2 - screenHeight;
+            crtc->panningTotalArea.y1 -=
+                crtc->panningTotalArea.y2 - screenHeight;
 	    crtc->panningTotalArea.y2 = screenHeight;
 	    ret = FALSE;
 	    if (crtc->panningTotalArea.y1 < 0)
 		crtc->panningTotalArea.y1 = 0;
 	}
-	if (crtc->panningBorder[1] + crtc->panningBorder[3] > crtc->mode.VDisplay) {
+        if (crtc->panningBorder[1] + crtc->panningBorder[3] >
+            crtc->mode.VDisplay) {
 	    /* Borders too large -> set to 0 */
 	    crtc->panningBorder[1] = crtc->panningBorder[3] = 0;
 	    ret = FALSE;
@@ -183,8 +194,7 @@ xf86ComputeCrtcPan (Bool transform_in_use,
 		    struct pixman_f_transform *m,
 		    double screen_x, double screen_y,
 		    double crtc_x, double crtc_y,
-		    int old_pan_x, int old_pan_y,
-		    int *new_pan_x, int *new_pan_y)
+                   int old_pan_x, int old_pan_y, int *new_pan_x, int *new_pan_y)
 {
     if (transform_in_use) {
 	/*
@@ -300,6 +310,7 @@ xf86ComputeCrtcPan (Bool transform_in_use,
 	for (i = 0; i < 2; i++) {
 	    double a = w[i] * q[i] - u[i] * v[i];
 	    double b = w[i] * t[i] - u[i] * p[i];
+
 	    if (b != 0) {
 		f = a/b;
 		break;
@@ -317,7 +328,8 @@ xf86ComputeCrtcPan (Bool transform_in_use,
 	}
 	*new_pan_x = old_pan_x - floor (d.v[0] + 0.5);
 	*new_pan_y = old_pan_y - floor (d.v[1] + 0.5);
-    } else {
+    }
+    else {
 	*new_pan_x = screen_x - crtc_x;
 	*new_pan_y = screen_y - crtc_y;
     }
@@ -344,10 +356,11 @@ xf86RandR13Pan (xf86CrtcPtr crtc, int x, int y)
     height = crtc->mode.VDisplay;
 
     if ((crtc->panningTrackingArea.x2 <= crtc->panningTrackingArea.x1 ||
-	 (x >= crtc->panningTrackingArea.x1 && x < crtc->panningTrackingArea.x2)) &&
+         (x >= crtc->panningTrackingArea.x1 &&
+          x < crtc->panningTrackingArea.x2)) &&
 	(crtc->panningTrackingArea.y2 <= crtc->panningTrackingArea.y1 ||
-	 (y >= crtc->panningTrackingArea.y1 && y < crtc->panningTrackingArea.y2)))
-    {
+         (y >= crtc->panningTrackingArea.y1 &&
+          y < crtc->panningTrackingArea.y2))) {
 	struct pict_f_vector    c;
 
 	/*
@@ -355,15 +368,13 @@ xf86RandR13Pan (xf86CrtcPtr crtc, int x, int y)
 	 * push the crtc outside. This doesn't deal with changes to the
 	 * panning values, only mouse position changes.
 	 */
-	if (crtc->panningTotalArea.x2 > crtc->panningTotalArea.x1)
-	{
+        if (crtc->panningTotalArea.x2 > crtc->panningTotalArea.x1) {
 	    if (x < crtc->panningTotalArea.x1)
 		x = crtc->panningTotalArea.x1;
 	    if (x >= crtc->panningTotalArea.x2)
 		x = crtc->panningTotalArea.x2 - 1;
 	}
-	if (crtc->panningTotalArea.y2 > crtc->panningTotalArea.y1)
-	{
+        if (crtc->panningTotalArea.y2 > crtc->panningTotalArea.y1) {
 	    if (y < crtc->panningTotalArea.y1)
 		y = crtc->panningTotalArea.y1;
 	    if (y >= crtc->panningTotalArea.y2)
@@ -375,7 +386,8 @@ xf86RandR13Pan (xf86CrtcPtr crtc, int x, int y)
 	c.v[2] = 1.0;
 	if (crtc->transform_in_use) {
 	    pixman_f_transform_point(&crtc->f_framebuffer_to_crtc, &c);
-	} else {
+        }
+        else {
 	    c.v[0] -= crtc->x;
 	    c.v[1] -= crtc->y;
 	}
@@ -403,8 +415,7 @@ xf86RandR13Pan (xf86CrtcPtr crtc, int x, int y)
 	if (panned)
 	    xf86ComputeCrtcPan (crtc->transform_in_use,
 				&crtc->f_framebuffer_to_crtc,
-				x, y, c.v[0], c.v[1],
-				newX, newY, &newX, &newY);
+                               x, y, c.v[0], c.v[1], newX, newY, &newX, &newY);
     }
 
     /*
@@ -413,8 +424,7 @@ xf86RandR13Pan (xf86CrtcPtr crtc, int x, int y)
      * XXX This computation only works when we do not have a transform
      * in use.
      */
-    if (!crtc->transform_in_use)
-    {
+    if (!crtc->transform_in_use) {
 	/* Validate against [xy]1 after [xy]2, to be sure that results are > 0 for [xy]1 > 0 */
 	if (crtc->panningTotalArea.x2 > crtc->panningTotalArea.x1) {
 	    if (newX > crtc->panningTotalArea.x2 - width)
@@ -445,24 +455,21 @@ xf86RandR12GetInfo (ScreenPtr pScreen, Rotation *rotations)
 
     *rotations = randrp->supported_rotations;
 
-    if (randrp->virtualX == -1 || randrp->virtualY == -1)
-    {
+    if (randrp->virtualX == -1 || randrp->virtualY == -1) {
 	randrp->virtualX = scrp->virtualX;
 	randrp->virtualY = scrp->virtualY;
     }
 
     /* Re-probe the outputs for new monitors or modes */
-    if (scrp->vtSema)
-    {
+    if (scrp->vtSema) {
 	xf86ProbeOutputModes (scrp, 0, 0);
 	xf86SetScrnInfoModes (scrp);
     }
 
-    for (mode = scrp->modes; ; mode = mode->next)
-    {
+    for (mode = scrp->modes;; mode = mode->next) {
 	int refresh = xf86RandR12ModeRefresh (mode);
-	if (randrp->maxX == 0 || randrp->maxY == 0)
-	{
+
+        if (randrp->maxX == 0 || randrp->maxY == 0) {
 		if (maxX < mode->HDisplay)
 			maxX = mode->HDisplay;
 		if (maxY < mode->VDisplay)
@@ -477,16 +484,14 @@ xf86RandR12GetInfo (ScreenPtr pScreen, Rotation *rotations)
 	    return FALSE;
 	RRRegisterRate (pScreen, pSize, refresh);
 
-	if (xf86ModesEqual(mode, scrp->currentMode))
-	{
+        if (xf86ModesEqual(mode, scrp->currentMode)) {
 	    RRSetCurrentConfig (pScreen, randrp->rotation, refresh, pSize);
 	}
 	if (mode->next == scrp->modes)
 	    break;
     }
 
-    if (randrp->maxX == 0 || randrp->maxY == 0)
-    {
+    if (randrp->maxX == 0 || randrp->maxY == 0) {
 	randrp->maxX = maxX;
 	randrp->maxY = maxY;
     }
@@ -497,9 +502,7 @@ xf86RandR12GetInfo (ScreenPtr pScreen, Rotation *rotations)
 static Bool
 xf86RandR12SetMode (ScreenPtr	    pScreen,
 		  DisplayModePtr    mode,
-		  Bool		    useVirtual,
-		  int		    mmWidth,
-		  int		    mmHeight)
+                   Bool useVirtual, int mmWidth, int mmHeight)
 {
     ScrnInfoPtr		scrp = XF86SCRNINFO(pScreen);
     XF86RandRInfoPtr	randrp = XF86RANDRINFO(pScreen);
@@ -513,27 +516,23 @@ xf86RandR12SetMode (ScreenPtr	    pScreen,
 
     if (pRoot)
 	(*scrp->EnableDisableFBAccess) (pScreen->myNum, FALSE);
-    if (useVirtual)
-    {
+    if (useVirtual) {
 	scrp->virtualX = randrp->virtualX;
 	scrp->virtualY = randrp->virtualY;
     }
-    else
-    {
+    else {
 	scrp->virtualX = mode->HDisplay;
 	scrp->virtualY = mode->VDisplay;
     }
 
-    if(randrp->rotation & (RR_Rotate_90 | RR_Rotate_270))
-    {
+    if (randrp->rotation & (RR_Rotate_90 | RR_Rotate_270)) {
 	/* If the screen is rotated 90 or 270 degrees, swap the sizes. */
 	pScreen->width = scrp->virtualY;
 	pScreen->height = scrp->virtualX;
 	pScreen->mmWidth = mmHeight;
 	pScreen->mmHeight = mmWidth;
     }
-    else
-    {
+    else {
 	pScreen->width = scrp->virtualX;
 	pScreen->height = scrp->virtualY;
 	pScreen->mmWidth = mmWidth;
@@ -549,8 +548,7 @@ xf86RandR12SetMode (ScreenPtr	    pScreen,
      * We know that if the driver failed to SwitchMode to the rotated
      * version, then it should revert back to it's prior mode.
      */
-    if (!xf86SwitchMode (pScreen, mode))
-    {
+    if (!xf86SwitchMode(pScreen, mode)) {
         ret = FALSE;
 	scrp->virtualX = pScreen->width = oldWidth;
 	scrp->virtualY = pScreen->height = oldHeight;
@@ -576,9 +574,7 @@ xf86RandR12SetMode (ScreenPtr	    pScreen,
 
 Bool
 xf86RandR12SetConfig (ScreenPtr		pScreen,
-		    Rotation		rotation,
-		    int			rate,
-		    RRScreenSizePtr	pSize)
+                     Rotation rotation, int rate, RRScreenSizePtr pSize)
 {
     ScrnInfoPtr		scrp = XF86SCRNINFO(pScreen);
     XF86RandRInfoPtr	randrp = XF86RANDRINFO(pScreen);
@@ -592,24 +588,20 @@ xf86RandR12SetConfig (ScreenPtr		pScreen,
 
     randrp->rotation = rotation;
 
-    if (randrp->virtualX == -1 || randrp->virtualY == -1)
-    {
+    if (randrp->virtualX == -1 || randrp->virtualY == -1) {
 	randrp->virtualX = scrp->virtualX;
 	randrp->virtualY = scrp->virtualY;
     }
 
-    for (dev = inputInfo.devices; dev; dev = dev->next)
-    {
+    for (dev = inputInfo.devices; dev; dev = dev->next) {
 	if (!IsMaster(dev) && !IsFloating(dev))
 		continue;
 
 	miPointerGetPosition(dev, &pos[dev->id][0], &pos[dev->id][1]);
     }
 
-    for (mode = scrp->modes; ; mode = mode->next)
-    {
-	if (randrp->maxX == 0 || randrp->maxY == 0)
-	{
+    for (mode = scrp->modes;; mode = mode->next) {
+        if (randrp->maxX == 0 || randrp->maxY == 0) {
 		if (maxX < mode->HDisplay)
 			maxX = mode->HDisplay;
 		if (maxY < mode->VDisplay)
@@ -619,17 +611,14 @@ xf86RandR12SetConfig (ScreenPtr		pScreen,
 	    mode->VDisplay == pSize->height &&
 	    (rate == 0 || xf86RandR12ModeRefresh (mode) == rate))
 	    break;
-	if (mode->next == scrp->modes)
-	{
+        if (mode->next == scrp->modes) {
 	    if (pSize->width == randrp->virtualX &&
-		pSize->height == randrp->virtualY)
-	    {
+                pSize->height == randrp->virtualY) {
 		mode = scrp->modes;
 		useVirtual = TRUE;
 		break;
 	    }
-    	    if (randrp->maxX == 0 || randrp->maxY == 0)
-    	    {
+            if (randrp->maxX == 0 || randrp->maxY == 0) {
 		randrp->maxX = maxX;
 		randrp->maxY = maxY;
     	    }
@@ -637,8 +626,7 @@ xf86RandR12SetConfig (ScreenPtr		pScreen,
 	}
     }
 
-    if (randrp->maxX == 0 || randrp->maxY == 0)
-    {
+    if (randrp->maxX == 0 || randrp->maxY == 0) {
 	randrp->maxX = maxX;
 	randrp->maxY = maxY;
     }
@@ -653,8 +641,7 @@ xf86RandR12SetConfig (ScreenPtr		pScreen,
      * Move the cursor back where it belongs; SwitchMode repositions it
      * FIXME: duplicated code, see modes/xf86RandR12.c
      */
-    for (dev = inputInfo.devices; dev; dev = dev->next)
-    {
+    for (dev = inputInfo.devices; dev; dev = dev->next) {
 	if (!IsMaster(dev) && !IsFloating(dev))
 		continue;
 
@@ -681,9 +668,7 @@ xf86RandR12SetConfig (ScreenPtr		pScreen,
 static Bool
 xf86RandR12ScreenSetSize (ScreenPtr	pScreen,
 			CARD16		width,
-			CARD16		height,
-			CARD32		mmWidth,
-			CARD32		mmHeight)
+                         CARD16 height, CARD32 mmWidth, CARD32 mmHeight)
 {
     XF86RandRInfoPtr	randrp = XF86RANDRINFO(pScreen);
     ScrnInfoPtr		pScrn = XF86SCRNINFO(pScreen);
@@ -694,8 +679,7 @@ xf86RandR12ScreenSetSize (ScreenPtr	pScreen,
     int                 c;
 
     if (xf86RandR12Key) {
-        if (randrp->virtualX == -1 || randrp->virtualY == -1)
-        {
+        if (randrp->virtualX == -1 || randrp->virtualY == -1) {
 	    randrp->virtualX = pScrn->virtualX;
 	    randrp->virtualY = pScrn->virtualY;
         }
@@ -711,6 +695,7 @@ xf86RandR12ScreenSetSize (ScreenPtr	pScreen,
     /* Update panning information */
     for (c = 0; c < config->num_crtc; c++) {
 	xf86CrtcPtr crtc = config->crtc[c];
+
 	if (crtc->panningTotalArea.x2 > crtc->panningTotalArea.x1 ||
 	    crtc->panningTotalArea.y2 > crtc->panningTotalArea.y1) {
 	    if (crtc->panningTotalArea.x2 > crtc->panningTrackingArea.x1)
@@ -764,6 +749,7 @@ xf86RandR12CreateScreenResources (ScreenPtr pScreen)
     int			c;
     int			width, height;
     int			mmWidth, mmHeight;
+
 #ifdef PANORAMIX
     /* XXX disable RandR when using Xinerama */
     if (!noPanoramiXExtension)
@@ -775,9 +761,9 @@ xf86RandR12CreateScreenResources (ScreenPtr pScreen)
     /*
      * Compute size of screen
      */
-    width = 0; height = 0;
-    for (c = 0; c < config->num_crtc; c++)
-    {
+    width = 0;
+    height = 0;
+    for (c = 0; c < config->num_crtc; c++) {
 	xf86CrtcPtr crtc = config->crtc[c];
 	int	    crtc_width = crtc->x + xf86ModeWidth (&crtc->mode, crtc->rotation);
 	int	    crtc_height = crtc->y + xf86ModeHeight (&crtc->mode, crtc->rotation);
@@ -794,33 +780,28 @@ xf86RandR12CreateScreenResources (ScreenPtr pScreen)
 	}
     }
     
-    if (width && height)
-    {
+    if (width && height) {
 	/*
 	 * Compute physical size of screen
 	 */
-	if (monitorResolution) 
-	{
+        if (monitorResolution) {
 	    mmWidth = width * 25.4 / monitorResolution;
 	    mmHeight = height * 25.4 / monitorResolution;
 	}
-	else
-	{
+        else {
 	    xf86OutputPtr   output = xf86CompatOutput(pScrn);
 
 	    if (output &&
 		output->conf_monitor &&
 		(output->conf_monitor->mon_width  > 0 &&
-		 output->conf_monitor->mon_height > 0))
-	    {
+                 output->conf_monitor->mon_height > 0)) {
 		/*
 		 * Prefer user configured DisplaySize
 		 */
 		mmWidth = output->conf_monitor->mon_width;
 		mmHeight = output->conf_monitor->mon_height;
 	    }
-	    else
-	    {
+            else {
 		/*
 		 * Otherwise, just set the screen to DEFAULT_DPI
 		 */
@@ -838,18 +819,13 @@ xf86RandR12CreateScreenResources (ScreenPtr pScreen)
 	 */
 	pScreen->width  = width;
 	pScreen->height = height;
-	xf86RandR12ScreenSetSize (pScreen,
-				  width,
-				  height,
-				  mmWidth,
-				  mmHeight);
+        xf86RandR12ScreenSetSize(pScreen, width, height, mmWidth, mmHeight);
     }
 
     if (xf86RandR12Key == NULL)
 	return TRUE;
 
-    if (randrp->virtualX == -1 || randrp->virtualY == -1)
-    {
+    if (randrp->virtualX == -1 || randrp->virtualY == -1) {
 	randrp->virtualX = pScrn->virtualX;
 	randrp->virtualY = pScrn->virtualY;
     }
@@ -861,7 +837,6 @@ xf86RandR12CreateScreenResources (ScreenPtr pScreen)
     return TRUE;
 }
 
-
 Bool
 xf86RandR12Init (ScreenPtr pScreen)
 {
@@ -870,8 +845,7 @@ xf86RandR12Init (ScreenPtr pScreen)
 
 #ifdef PANORAMIX
     /* XXX disable RandR when using Xinerama */
-    if (!noPanoramiXExtension)
-    {
+    if (!noPanoramiXExtension) {
         if (xf86NumScreens == 1)
             noPanoramiXExtension = TRUE;
         else
@@ -890,8 +864,7 @@ xf86RandR12Init (ScreenPtr pScreen)
     if (!randrp)
 	return FALSE;
 
-    if (!RRScreenInit(pScreen))
-    {
+    if (!RRScreenInit(pScreen)) {
 	free(randrp);
 	return FALSE;
     }
@@ -939,6 +912,7 @@ void
 xf86RandR12SetRotations (ScreenPtr pScreen, Rotation rotations)
 {
     XF86RandRInfoPtr	randrp;
+
 #if RANDR_12_INTERFACE
     ScrnInfoPtr		pScrn = xf86Screens[pScreen->myNum];
     int			c;
@@ -963,6 +937,7 @@ void
 xf86RandR12SetTransformSupport (ScreenPtr pScreen, Bool transforms)
 {
     XF86RandRInfoPtr	randrp;
+
 #if RANDR_13_INTERFACE
     ScrnInfoPtr		pScrn = xf86Screens[pScreen->myNum];
     int			c;
@@ -988,11 +963,11 @@ xf86RandR12GetOriginalVirtualSize(ScrnInfoPtr pScrn, int *x, int *y)
     ScreenPtr pScreen = screenInfo.screens[pScrn->scrnIndex];
 
     if (xf86RandR12Generation != serverGeneration ||
-	XF86RANDRINFO(pScreen)->virtualX == -1)
-    {
+        XF86RANDRINFO(pScreen)->virtualX == -1) {
 	*x = pScrn->virtualX;
 	*y = pScrn->virtualY;
-    } else {
+    }
+    else {
 	XF86RandRInfoPtr randrp = XF86RANDRINFO(pScreen);
 
 	*x = randrp->virtualX;
@@ -1018,30 +993,41 @@ xf86RandR12GetOriginalVirtualSize(ScrnInfoPtr pScrn, int *x, int *y)
 		   RR_ClockDivideBy2)
 
 static Bool
-xf86RandRModeMatches (RRModePtr		randr_mode,
-		      DisplayModePtr	mode)
+xf86RandRModeMatches(RRModePtr randr_mode, DisplayModePtr mode)
 {
 #if 0
-    if (match_name)
-    {
+    if (match_name) {
 	/* check for same name */
 	int	len = strlen (mode->name);
-	if (randr_mode->mode.nameLength != len)			return FALSE;
-	if (memcmp (randr_mode->name, mode->name, len) != 0)	return FALSE;
+
+        if (randr_mode->mode.nameLength != len)
+            return FALSE;
+        if (memcmp(randr_mode->name, mode->name, len) != 0)
+            return FALSE;
     }
 #endif
     
     /* check for same timings */
-    if (randr_mode->mode.dotClock / 1000 != mode->Clock)    return FALSE;
-    if (randr_mode->mode.width        != mode->HDisplay)    return FALSE;
-    if (randr_mode->mode.hSyncStart   != mode->HSyncStart)  return FALSE;
-    if (randr_mode->mode.hSyncEnd     != mode->HSyncEnd)    return FALSE;
-    if (randr_mode->mode.hTotal       != mode->HTotal)	    return FALSE;
-    if (randr_mode->mode.hSkew        != mode->HSkew)	    return FALSE;
-    if (randr_mode->mode.height       != mode->VDisplay)    return FALSE;
-    if (randr_mode->mode.vSyncStart   != mode->VSyncStart)  return FALSE;
-    if (randr_mode->mode.vSyncEnd     != mode->VSyncEnd)    return FALSE;
-    if (randr_mode->mode.vTotal       != mode->VTotal)	    return FALSE;
+    if (randr_mode->mode.dotClock / 1000 != mode->Clock)
+        return FALSE;
+    if (randr_mode->mode.width != mode->HDisplay)
+        return FALSE;
+    if (randr_mode->mode.hSyncStart != mode->HSyncStart)
+        return FALSE;
+    if (randr_mode->mode.hSyncEnd != mode->HSyncEnd)
+        return FALSE;
+    if (randr_mode->mode.hTotal != mode->HTotal)
+        return FALSE;
+    if (randr_mode->mode.hSkew != mode->HSkew)
+        return FALSE;
+    if (randr_mode->mode.height != mode->VDisplay)
+        return FALSE;
+    if (randr_mode->mode.vSyncStart != mode->VSyncStart)
+        return FALSE;
+    if (randr_mode->mode.vSyncEnd != mode->VSyncEnd)
+        return FALSE;
+    if (randr_mode->mode.vTotal != mode->VTotal)
+        return FALSE;
     
     /* check for same flags (using only the XF86 valid flag bits) */
     if ((randr_mode->mode.modeFlags & FLAG_BITS) != (mode->Flags & FLAG_BITS))
@@ -1078,25 +1064,25 @@ xf86RandR12CrtcNotify (RRCrtcPtr	randr_crtc)
     rotation = crtc->rotation;
     numOutputs = 0;
     randr_mode = NULL;
-    for (i = 0; i < config->num_output; i++)
-    {
+    for (i = 0; i < config->num_output; i++) {
 	output = config->output[i];
-	if (output->crtc == crtc)
-	{
+        if (output->crtc == crtc) {
 	    randr_output = output->randr_output;
 	    randr_outputs[numOutputs++] = randr_output;
 	    /*
 	     * We make copies of modes, so pointer equality 
 	     * isn't sufficient
 	     */
-	    for (j = 0; j < randr_output->numModes + randr_output->numUserModes; j++)
-	    {
-		RRModePtr   m = (j < randr_output->numModes ?
-				 randr_output->modes[j] :
-				 randr_output->userModes[j-randr_output->numModes]);
-					 
-		if (xf86RandRModeMatches (m, mode))
-		{
+            for (j = 0; j < randr_output->numModes + randr_output->numUserModes;
+                 j++) {
+                RRModePtr m =
+                    (j <
+                     randr_output->numModes ? randr_output->
+                     modes[j] : randr_output->userModes[j -
+                                                        randr_output->
+                                                        numModes]);
+
+                if (xf86RandRModeMatches(m, mode)) {
 		    randr_mode = m;
 		    break;
 		}
@@ -1116,8 +1102,7 @@ xf86RandR12CrtcNotify (RRCrtcPtr	randr_crtc)
  */
 static void
 xf86RandRModeConvert (ScrnInfoPtr	scrn,
-		      RRModePtr		randr_mode,
-		      DisplayModePtr	mode)
+                     RRModePtr randr_mode, DisplayModePtr mode)
 {
     memset(mode, 0, sizeof(DisplayModeRec));
     mode->status = MODE_OK;
@@ -1148,8 +1133,7 @@ xf86RandR12CrtcSet (ScreenPtr	    pScreen,
 		    int		    x,
 		    int		    y,
 		    Rotation	    rotation,
-		    int		    num_randr_outputs,
-		    RROutputPtr	    *randr_outputs)
+                   int num_randr_outputs, RROutputPtr * randr_outputs)
 {
     XF86RandRInfoPtr	randrp = XF86RANDRINFO(pScreen);
     ScrnInfoPtr		pScrn = xf86Screens[pScreen->myNum];
@@ -1176,14 +1160,14 @@ xf86RandR12CrtcSet (ScreenPtr	    pScreen,
     transform = RRCrtcGetTransform (randr_crtc);
     if ((transform != NULL) != crtc->transformPresent)
 	changed = TRUE;
-    else if (transform && memcmp (&transform->transform, &crtc->transform.transform,
+    else if (transform &&
+             memcmp(&transform->transform, &crtc->transform.transform,
 				  sizeof (transform->transform)) != 0)
 	changed = TRUE;
 
     if (x != crtc->x || y != crtc->y)
 	changed = TRUE;
-    for (o = 0; o < config->num_output; o++) 
-    {
+    for (o = 0; o < config->num_output; o++) {
 	xf86OutputPtr  output = config->output[o];
 	xf86CrtcPtr    new_crtc;
 
@@ -1194,13 +1178,11 @@ xf86RandR12CrtcSet (ScreenPtr	    pScreen,
 	else
 	    new_crtc = output->crtc;
 	for (ro = 0; ro < num_randr_outputs; ro++) 
-	    if (output->randr_output == randr_outputs[ro])
-	    {
+            if (output->randr_output == randr_outputs[ro]) {
 		new_crtc = crtc;
 		break;
 	    }
-	if (new_crtc != output->crtc)
-	{
+        if (new_crtc != output->crtc) {
 	    changed = TRUE;
 	    output->crtc = new_crtc;
 	}
@@ -1210,22 +1192,20 @@ xf86RandR12CrtcSet (ScreenPtr	    pScreen,
 	    changed = TRUE;
 
     /* XXX need device-independent mode setting code through an API */
-    if (changed)
-    {
+    if (changed) {
 	crtc->enabled = randr_mode != NULL;
 
-	if (randr_mode)
-	{
+        if (randr_mode) {
 	    DisplayModeRec  mode;
 	    RRTransformPtr  transform = RRCrtcGetTransform (randr_crtc);
 
 	    xf86RandRModeConvert (pScrn, randr_mode, &mode);
-	    if (!xf86CrtcSetModeTransform (crtc, &mode, rotation, transform, x, y))
-	    {
+            if (!xf86CrtcSetModeTransform
+                (crtc, &mode, rotation, transform, x, y)) {
 		crtc->enabled = save_enabled;
-		for (o = 0; o < config->num_output; o++)
-		{
+                for (o = 0; o < config->num_output; o++) {
 		    xf86OutputPtr	output = config->output[o];
+
 		    output->crtc = save_crtcs[o];
 		}
 		free(save_crtcs);
@@ -1241,7 +1221,8 @@ xf86RandR12CrtcSet (ScreenPtr	    pScreen,
 	    if (transform) {
 		crtc->desiredTransform = *transform;
 		crtc->desiredTransformPresent = TRUE;
-	    } else
+            }
+            else
 		crtc->desiredTransformPresent = FALSE;
 
 	    crtc->desiredX = x;
@@ -1254,8 +1235,7 @@ xf86RandR12CrtcSet (ScreenPtr	    pScreen,
 }
 
 static Bool
-xf86RandR12CrtcSetGamma (ScreenPtr    pScreen,
-			 RRCrtcPtr    randr_crtc)
+xf86RandR12CrtcSetGamma(ScreenPtr pScreen, RRCrtcPtr randr_crtc)
 {
     xf86CrtcPtr		crtc = randr_crtc->devPrivate;
 
@@ -1268,7 +1248,9 @@ xf86RandR12CrtcSetGamma (ScreenPtr    pScreen,
     /* Realloc local gamma if needed. */
     if (randr_crtc->gammaSize != crtc->gamma_size) {
         CARD16 *tmp_ptr;
-        tmp_ptr = realloc(crtc->gamma_red, 3 * crtc->gamma_size * sizeof (CARD16));
+
+        tmp_ptr =
+            realloc(crtc->gamma_red, 3 * crtc->gamma_size * sizeof(CARD16));
         if (!tmp_ptr)
             return FALSE;
         crtc->gamma_red = tmp_ptr;
@@ -1277,9 +1259,12 @@ xf86RandR12CrtcSetGamma (ScreenPtr    pScreen,
     }
 
     crtc->gamma_size = randr_crtc->gammaSize;
-    memcpy (crtc->gamma_red, randr_crtc->gammaRed, crtc->gamma_size * sizeof (CARD16));
-    memcpy (crtc->gamma_green, randr_crtc->gammaGreen, crtc->gamma_size * sizeof (CARD16));
-    memcpy (crtc->gamma_blue, randr_crtc->gammaBlue, crtc->gamma_size * sizeof (CARD16));
+    memcpy(crtc->gamma_red, randr_crtc->gammaRed,
+           crtc->gamma_size * sizeof(CARD16));
+    memcpy(crtc->gamma_green, randr_crtc->gammaGreen,
+           crtc->gamma_size * sizeof(CARD16));
+    memcpy(crtc->gamma_blue, randr_crtc->gammaBlue,
+           crtc->gamma_size * sizeof(CARD16));
 
     /* Only set it when the crtc is actually running.
      * Otherwise it will be set when it's activated.
@@ -1292,8 +1277,7 @@ xf86RandR12CrtcSetGamma (ScreenPtr    pScreen,
 }
 
 static Bool
-xf86RandR12CrtcGetGamma (ScreenPtr    pScreen,
-			 RRCrtcPtr    randr_crtc)
+xf86RandR12CrtcGetGamma(ScreenPtr pScreen, RRCrtcPtr randr_crtc)
 {
     xf86CrtcPtr crtc = randr_crtc->devPrivate;
 
@@ -1306,7 +1290,10 @@ xf86RandR12CrtcGetGamma (ScreenPtr    pScreen,
     /* Realloc randr gamma if needed. */
     if (randr_crtc->gammaSize != crtc->gamma_size) {
         CARD16 *tmp_ptr;
-        tmp_ptr = realloc(randr_crtc->gammaRed, 3 * crtc->gamma_size * sizeof (CARD16));
+
+        tmp_ptr =
+            realloc(randr_crtc->gammaRed,
+                    3 * crtc->gamma_size * sizeof(CARD16));
         if (!tmp_ptr)
             return FALSE;
         randr_crtc->gammaRed = tmp_ptr;
@@ -1314,9 +1301,12 @@ xf86RandR12CrtcGetGamma (ScreenPtr    pScreen,
         randr_crtc->gammaBlue = randr_crtc->gammaGreen + crtc->gamma_size;
     }
     randr_crtc->gammaSize = crtc->gamma_size;
-    memcpy (randr_crtc->gammaRed, crtc->gamma_red, crtc->gamma_size * sizeof (CARD16));
-    memcpy (randr_crtc->gammaGreen, crtc->gamma_green, crtc->gamma_size * sizeof (CARD16));
-    memcpy (randr_crtc->gammaBlue, crtc->gamma_blue, crtc->gamma_size * sizeof (CARD16));
+    memcpy(randr_crtc->gammaRed, crtc->gamma_red,
+           crtc->gamma_size * sizeof(CARD16));
+    memcpy(randr_crtc->gammaGreen, crtc->gamma_green,
+           crtc->gamma_size * sizeof(CARD16));
+    memcpy(randr_crtc->gammaBlue, crtc->gamma_blue,
+           crtc->gamma_size * sizeof(CARD16));
 
     return TRUE;
 }
@@ -1324,8 +1314,7 @@ xf86RandR12CrtcGetGamma (ScreenPtr    pScreen,
 static Bool
 xf86RandR12OutputSetProperty (ScreenPtr pScreen,
 			      RROutputPtr randr_output,
-			      Atom property,
-			      RRPropertyValuePtr value)
+                             Atom property, RRPropertyValuePtr value)
 {
     xf86OutputPtr output = randr_output->devPrivate;
 
@@ -1345,8 +1334,7 @@ xf86RandR12OutputSetProperty (ScreenPtr pScreen,
 
 static Bool
 xf86RandR13OutputGetProperty (ScreenPtr pScreen,
-			      RROutputPtr randr_output,
-			      Atom property)
+                             RROutputPtr randr_output, Atom property)
 {
     xf86OutputPtr output = randr_output->devPrivate;
 
@@ -1359,8 +1347,7 @@ xf86RandR13OutputGetProperty (ScreenPtr pScreen,
 
 static Bool
 xf86RandR12OutputValidateMode (ScreenPtr    pScreen,
-			       RROutputPtr  randr_output,
-			       RRModePtr    randr_mode)
+                              RROutputPtr randr_output, RRModePtr randr_mode)
 {
     ScrnInfoPtr	    pScrn = xf86Screens[pScreen->myNum];
     xf86OutputPtr   output = randr_output->devPrivate;
@@ -1458,8 +1445,7 @@ xf86RandR12SetInfo12 (ScreenPtr pScreen)
     
     clones = malloc(config->num_output * sizeof (RROutputPtr));
     crtcs = malloc(config->num_crtc * sizeof (RRCrtcPtr));
-    for (o = 0; o < config->num_output; o++)
-    {
+    for (o = 0; o < config->num_output; o++) {
 	xf86OutputPtr	output = config->output[o];
 	
 	ncrtc = 0;
@@ -1472,16 +1458,14 @@ xf86RandR12SetInfo12 (ScreenPtr pScreen)
 	else
 	    randr_crtc = NULL;
 
-	if (!RROutputSetCrtcs (output->randr_output, crtcs, ncrtc))
-	{
+        if (!RROutputSetCrtcs(output->randr_output, crtcs, ncrtc)) {
 	    free(crtcs);
 	    free(clones);
 	    return FALSE;
 	}
 
 	RROutputSetPhysicalSize(output->randr_output, 
-				output->mm_width,
-				output->mm_height);
+                                output->mm_width, output->mm_height);
 	xf86RROutputSetModes (output->randr_output, output->probed_modes);
 
 	switch (output->status) {
@@ -1502,15 +1486,13 @@ xf86RandR12SetInfo12 (ScreenPtr pScreen)
 	 * Valid clones
 	 */
 	nclone = 0;
-	for (l = 0; l < config->num_output; l++)
-	{
+        for (l = 0; l < config->num_output; l++) {
 	    xf86OutputPtr	    clone = config->output[l];
 	    
 	    if (l != o && (output->possible_clones & (1 << l)))
 		clones[nclone++] = clone->randr_output;
 	}
-	if (!RROutputSetClones (output->randr_output, clones, nclone))
-	{
+        if (!RROutputSetClones(output->randr_output, clones, nclone)) {
 	    free(crtcs);
 	    free(clones);
 	    return FALSE;
@@ -1521,8 +1503,6 @@ xf86RandR12SetInfo12 (ScreenPtr pScreen)
     return TRUE;
 }
 
-
-
 /*
  * Query the hardware for the current state, then mirror
  * that to RandR
@@ -1553,8 +1533,7 @@ xf86RandR12CreateObjects12 (ScreenPtr pScreen)
     /*
      * Configure crtcs
      */
-    for (c = 0; c < config->num_crtc; c++)
-    {
+    for (c = 0; c < config->num_crtc; c++) {
 	xf86CrtcPtr    crtc = config->crtc[c];
 	
 	crtc->randr_crtc = RRCrtcCreate (pScreen, crtc);
@@ -1563,13 +1542,11 @@ xf86RandR12CreateObjects12 (ScreenPtr pScreen)
     /*
      * Configure outputs
      */
-    for (o = 0; o < config->num_output; o++)
-    {
+    for (o = 0; o < config->num_output; o++) {
 	xf86OutputPtr	output = config->output[o];
 
 	output->randr_output = RROutputCreate (pScreen, output->name, 
-					       strlen (output->name),
-					       output);
+                                              strlen(output->name), output);
 
 	if (output->funcs->create_resources != NULL)
 	    output->funcs->create_resources(output);
@@ -1636,9 +1613,7 @@ xf86RandR12PointerMoved (int scrnIndex, int x, int y)
 static Bool
 xf86RandR13GetPanning (ScreenPtr           pScreen,
 		       RRCrtcPtr           randr_crtc,
-		       BoxPtr              totalArea,
-		       BoxPtr              trackingArea,
-		       INT16               *border)
+                      BoxPtr totalArea, BoxPtr trackingArea, INT16 *border)
 {
     xf86CrtcPtr		crtc = randr_crtc->devPrivate;
 
@@ -1657,9 +1632,7 @@ xf86RandR13GetPanning (ScreenPtr           pScreen,
 static Bool
 xf86RandR13SetPanning (ScreenPtr           pScreen,
 		       RRCrtcPtr           randr_crtc,
-		       BoxPtr              totalArea,
-		       BoxPtr              trackingArea,
-		       INT16               *border)
+                      BoxPtr totalArea, BoxPtr trackingArea, INT16 *border)
 {
     XF86RandRInfoPtr	randrp  = XF86RANDRINFO(pScreen);
     xf86CrtcPtr		crtc = randr_crtc->devPrivate;
@@ -1667,7 +1640,6 @@ xf86RandR13SetPanning (ScreenPtr           pScreen,
     BoxRec		oldTrackingArea;
     INT16		oldBorder[4];
 
-
     if (crtc->version < 2)
 	return FALSE;
 
@@ -1685,7 +1657,8 @@ xf86RandR13SetPanning (ScreenPtr           pScreen,
     if (xf86RandR13VerifyPanningArea (crtc, pScreen->width, pScreen->height)) {
 	xf86RandR13Pan (crtc, randrp->pointerX, randrp->pointerY);
 	return TRUE;
-    } else {
+    }
+    else {
 	/* Restore old settings */
 	memcpy (&crtc->panningTotalArea,    &oldTotalArea,    sizeof(BoxRec));
 	memcpy (&crtc->panningTrackingArea, &oldTrackingArea, sizeof(BoxRec));
@@ -1708,7 +1681,8 @@ gamma_to_ramp(float gamma, CARD16 *ramp, int size)
 	if (gamma == 1.0)
 	    ramp[i] = i << 8;
 	else
-	    ramp[i] = (CARD16)(pow((double)i / (double)(size - 1), 1. / gamma)
+            ramp[i] =
+                (CARD16) (pow((double) i / (double) (size - 1), 1. / gamma)
 			       * (double)(size - 1) * 256);
     }
 }
