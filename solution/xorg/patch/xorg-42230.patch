diff --git a/hw/xfree86/common/xf86Option.c b/hw/xfree86/common/xf86Option.c
index f4d35fc..ad8d1c4 100644
--- a/hw/xfree86/common/xf86Option.c
+++ b/hw/xfree86/common/xf86Option.c
@@ -64,7 +64,7 @@ static Bool ParseOptionValue(int scrnIndex, pointer options, OptionInfoPtr p,
  *   extraOpts, display, confScreen, monitor, device
  */
 
-_X_EXPORT void
+void
 xf86CollectOptions(ScrnInfoPtr pScrn, pointer extraOpts)
 {
     XF86OptionPtr tmp;
@@ -131,7 +131,7 @@ xf86CollectOptions(ScrnInfoPtr pScrn, pointer extraOpts)
  *   pInfo->conf_idev->commonOptions, defaultOpts
  */
 
-_X_EXPORT void
+void
 xf86CollectInputOptions(InputInfoPtr pInfo, const char **defaultOpts,
 			pointer extraOpts)
 {
@@ -224,28 +224,28 @@ LookupBoolOption(pointer optlist, const char *name, int deflt, Bool markUsed)
 
 /* These xf86Set* functions are intended for use by non-screen specific code */
 
-_X_EXPORT int
+int
 xf86SetIntOption(pointer optlist, const char *name, int deflt)
 {
     return LookupIntOption(optlist, name, deflt, TRUE);
 }
 
 
-_X_EXPORT double
+double
 xf86SetRealOption(pointer optlist, const char *name, double deflt)
 {
     return LookupRealOption(optlist, name, deflt, TRUE);
 }
 
 
-_X_EXPORT char *
+char *
 xf86SetStrOption(pointer optlist, const char *name, char *deflt)
 {
     return LookupStrOption(optlist, name, deflt, TRUE);
 }
 
 
-_X_EXPORT int
+int
 xf86SetBoolOption(pointer optlist, const char *name, int deflt)
 {
     return LookupBoolOption(optlist, name, deflt, TRUE);
@@ -255,28 +255,28 @@ xf86SetBoolOption(pointer optlist, const char *name, int deflt)
  * These are like the Set*Option functions, but they don't mark the options
  * as used.
  */
-_X_EXPORT int
+int
 xf86CheckIntOption(pointer optlist, const char *name, int deflt)
 {
     return LookupIntOption(optlist, name, deflt, FALSE);
 }
 
 
-_X_EXPORT double
+double
 xf86CheckRealOption(pointer optlist, const char *name, double deflt)
 {
     return LookupRealOption(optlist, name, deflt, FALSE);
 }
 
 
-_X_EXPORT char *
+char *
 xf86CheckStrOption(pointer optlist, const char *name, char *deflt)
 {
     return LookupStrOption(optlist, name, deflt, FALSE);
 }
 
 
-_X_EXPORT int
+int
 xf86CheckBoolOption(pointer optlist, const char *name, int deflt)
 {
     return LookupBoolOption(optlist, name, deflt, FALSE);
@@ -286,7 +286,7 @@ xf86CheckBoolOption(pointer optlist, const char *name, int deflt)
  * addNewOption() has the required property of replacing the option value
  * if the option is already present.
  */
-_X_EXPORT pointer
+pointer
 xf86ReplaceIntOption(pointer optlist, const char *name, const int val)
 {
     char tmp[16];
@@ -294,7 +294,7 @@ xf86ReplaceIntOption(pointer optlist, const char *name, const int val)
     return xf86AddNewOption(optlist,name,tmp);
 }
 
-_X_EXPORT pointer
+pointer
 xf86ReplaceRealOption(pointer optlist, const char *name, const double val)
 {
     char tmp[32];
@@ -302,19 +302,19 @@ xf86ReplaceRealOption(pointer optlist, const char *name, const double val)
     return xf86AddNewOption(optlist,name,tmp);
 }
 
-_X_EXPORT pointer
+pointer
 xf86ReplaceBoolOption(pointer optlist, const char *name, const Bool val)
 {
     return xf86AddNewOption(optlist,name,val?"True":"False");
 }
 
-_X_EXPORT pointer
+pointer
 xf86ReplaceStrOption(pointer optlist, const char *name, const char* val)
 {
       return xf86AddNewOption(optlist,name,val);
 }
 
-_X_EXPORT pointer
+pointer
 xf86AddNewOption(pointer head, const char *name, const char *val)
 {
     /* XXX These should actually be allocated in the parser library. */
@@ -325,50 +325,50 @@ xf86AddNewOption(pointer head, const char *name, const char *val)
 }
 
 
-_X_EXPORT pointer
+pointer
 xf86NewOption(char *name, char *value)
 {
     return xf86newOption(name, value);
 }
 
 
-_X_EXPORT pointer
+pointer
 xf86NextOption(pointer list)
 {
     return xf86nextOption(list);
 }
 
-_X_EXPORT pointer
+pointer
 xf86OptionListCreate(const char **options, int count, int used)
 {
 	return xf86optionListCreate(options, count, used);
 }
 
-_X_EXPORT pointer
+pointer
 xf86OptionListMerge(pointer head, pointer tail)
 {
 	return xf86optionListMerge(head, tail);
 }
 
-_X_EXPORT void
+void
 xf86OptionListFree(pointer opt)
 {
 	xf86optionListFree(opt);
 }
 
-_X_EXPORT char *
+char *
 xf86OptionName(pointer opt)
 {
 	return xf86optionName(opt);
 }
 
-_X_EXPORT char *
+char *
 xf86OptionValue(pointer opt)
 {
 	return xf86optionValue(opt);
 }
 
-_X_EXPORT void
+void
 xf86OptionListReport(pointer parm)
 {
     XF86OptionPtr opts = parm;
@@ -385,21 +385,21 @@ xf86OptionListReport(pointer parm)
 
 /* End of XInput-caused section	*/
 
-_X_EXPORT pointer
+pointer
 xf86FindOption(pointer options, const char *name)
 {
     return xf86findOption(options, name);
 }
 
 
-_X_EXPORT char *
+char *
 xf86FindOptionValue(pointer options, const char *name)
 {
     return xf86findOptionValue(options, name);
 }
 
 
-_X_EXPORT void
+void
 xf86MarkOptionUsed(pointer option)
 {
     if (option != NULL)
@@ -407,7 +407,7 @@ xf86MarkOptionUsed(pointer option)
 }
 
 
-_X_EXPORT void
+void
 xf86MarkOptionUsedByName(pointer options, const char *name)
 {
     XF86OptionPtr opt;
@@ -417,7 +417,7 @@ xf86MarkOptionUsedByName(pointer options, const char *name)
 	opt->opt_used = TRUE;
 }
 
-_X_EXPORT Bool
+Bool
 xf86CheckIfOptionUsed(pointer option)
 {
     if (option != NULL)
@@ -426,7 +426,7 @@ xf86CheckIfOptionUsed(pointer option)
 	return FALSE;
 }
 
-_X_EXPORT Bool
+Bool
 xf86CheckIfOptionUsedByName(pointer options, const char *name)
 {
     XF86OptionPtr opt;
@@ -438,7 +438,7 @@ xf86CheckIfOptionUsedByName(pointer options, const char *name)
 	return FALSE;
 }
 
-_X_EXPORT void
+void
 xf86ShowUnusedOptions(int scrnIndex, pointer options)
 {
     XF86OptionPtr opt = options;
@@ -661,7 +661,7 @@ ParseOptionValue(int scrnIndex, pointer options, OptionInfoPtr p,
 }
 
 
-_X_EXPORT void
+void
 xf86ProcessOptions(int scrnIndex, pointer options, OptionInfoPtr optinfo)
 {
     OptionInfoPtr p;
@@ -672,7 +672,7 @@ xf86ProcessOptions(int scrnIndex, pointer options, OptionInfoPtr optinfo)
 }
 
 
-_X_EXPORT OptionInfoPtr
+OptionInfoPtr
 xf86TokenToOptinfo(const OptionInfoRec *table, int token)
 {
     const OptionInfoRec *p, *match = NULL, *set = NULL;
@@ -699,7 +699,7 @@ xf86TokenToOptinfo(const OptionInfoRec *table, int token)
 }
 
 
-_X_EXPORT const char *
+const char *
 xf86TokenToOptName(const OptionInfoRec *table, int token)
 {
     const OptionInfoRec *p;
@@ -709,7 +709,7 @@ xf86TokenToOptName(const OptionInfoRec *table, int token)
 }
 
 
-_X_EXPORT Bool
+Bool
 xf86IsOptionSet(const OptionInfoRec *table, int token)
 {
     OptionInfoPtr p;
@@ -719,7 +719,7 @@ xf86IsOptionSet(const OptionInfoRec *table, int token)
 }
 
 
-_X_EXPORT char *
+char *
 xf86GetOptValString(const OptionInfoRec *table, int token)
 {
     OptionInfoPtr p;
@@ -732,7 +732,7 @@ xf86GetOptValString(const OptionInfoRec *table, int token)
 }
 
 
-_X_EXPORT Bool
+Bool
 xf86GetOptValInteger(const OptionInfoRec *table, int token, int *value)
 {
     OptionInfoPtr p;
@@ -746,7 +746,7 @@ xf86GetOptValInteger(const OptionInfoRec *table, int token, int *value)
 }
 
 
-_X_EXPORT Bool
+Bool
 xf86GetOptValULong(const OptionInfoRec *table, int token, unsigned long *value)
 {
     OptionInfoPtr p;
@@ -760,7 +760,7 @@ xf86GetOptValULong(const OptionInfoRec *table, int token, unsigned long *value)
 }
 
 
-_X_EXPORT Bool
+Bool
 xf86GetOptValReal(const OptionInfoRec *table, int token, double *value)
 {
     OptionInfoPtr p;
@@ -774,7 +774,7 @@ xf86GetOptValReal(const OptionInfoRec *table, int token, double *value)
 }
 
 
-_X_EXPORT Bool
+Bool
 xf86GetOptValFreq(const OptionInfoRec *table, int token,
 		  OptFreqUnits expectedUnits, double *value)
 {
@@ -822,7 +822,7 @@ xf86GetOptValFreq(const OptionInfoRec *table, int token,
 }
 
 
-_X_EXPORT Bool
+Bool
 xf86GetOptValBool(const OptionInfoRec *table, int token, Bool *value)
 {
     OptionInfoPtr p;
@@ -836,7 +836,7 @@ xf86GetOptValBool(const OptionInfoRec *table, int token, Bool *value)
 }
 
 
-_X_EXPORT Bool
+Bool
 xf86ReturnOptValBool(const OptionInfoRec *table, int token, Bool def)
 {
     OptionInfoPtr p;
@@ -849,13 +849,13 @@ xf86ReturnOptValBool(const OptionInfoRec *table, int token, Bool def)
 }
 
 
-_X_EXPORT int
+int
 xf86NameCmp(const char *s1, const char *s2)
 {
     return xf86nameCompare(s1, s2);
 }
 
-_X_EXPORT char *
+char *
 xf86NormalizeName(const char *s)
 {
     char *ret, *q;
