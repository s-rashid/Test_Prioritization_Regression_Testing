diff --git a/hw/xfree86/os-support/linux/lnx_init.c b/hw/xfree86/os-support/linux/lnx_init.c
index 2176985..c938b87 100644
--- a/hw/xfree86/os-support/linux/lnx_init.c
+++ b/hw/xfree86/os-support/linux/lnx_init.c
@@ -90,7 +90,8 @@ xf86OpenConsole(void)
 	 */
 	if (xf86Info.vtno != -1) {
 	    from = X_CMDLINE;
-	} else {
+        }
+        else {
 
 	    i=0;
 	    while (tty0[i] != NULL) {
@@ -100,18 +101,17 @@ xf86OpenConsole(void)
 	    }
 	    
 	    if (fd < 0)
-		FatalError(
-		    "xf86OpenConsole: Cannot open /dev/tty0 (%s)\n",
+                FatalError("xf86OpenConsole: Cannot open /dev/tty0 (%s)\n",
 		    strerror(errno));
 
-            if (xf86Info.ShareVTs)
-            {
+            if (xf86Info.ShareVTs) {
 		SYSCALL(ret = ioctl(fd, VT_GETSTATE, &vts));
 		if (ret < 0)
 		    FatalError("xf86OpenConsole: Cannot find the current"
 			       " VT (%s)\n", strerror(errno));
                 xf86Info.vtno = vts.v_active;
-            } else {
+            }
+            else {
 		SYSCALL(ret = ioctl(fd, VT_OPENQRY, &xf86Info.vtno));
 		if (ret < 0)
 		    FatalError("xf86OpenConsole: Cannot find a free VT: "
@@ -127,6 +127,7 @@ xf86OpenConsole(void)
 	if (!KeepTty) {
 	    pid_t ppid = getppid();
 	    pid_t ppgid;
+
 	    ppgid = getpgid(ppid);
 
 	    /*
@@ -179,8 +180,7 @@ xf86OpenConsole(void)
 	}
 #endif
 
-        if (!xf86Info.ShareVTs)
-        {
+        if (!xf86Info.ShareVTs) {
             struct termios nTty;
 
 	    /*
@@ -201,7 +201,8 @@ xf86OpenConsole(void)
 
 	    SYSCALL(ret = ioctl(xf86Info.consoleFd, VT_SETMODE, &VT));
 	    if (ret < 0)
-		FatalError("xf86OpenConsole: VT_SETMODE VT_PROCESS failed: %s\n",
+                FatalError
+                    ("xf86OpenConsole: VT_SETMODE VT_PROCESS failed: %s\n",
 		    strerror(errno));
 
 	    SYSCALL(ret = ioctl(xf86Info.consoleFd, KDSETMODE, KD_GRAPHICS));
@@ -241,9 +242,9 @@ xf86OpenConsole(void)
 	    /* we really should have a InitOSInputDevices() function instead
 	     * of Init?$#*&Device(). So I just place it here */
         }
-    } else { 	/* serverGeneration != 1 */
-        if (!xf86Info.ShareVTs && xf86Info.autoVTSwitch)
-        {
+    }
+    else {                      /* serverGeneration != 1 */
+        if (!xf86Info.ShareVTs && xf86Info.autoVTSwitch) {
 	    /* now get the VT */
             switch_to(xf86Info.vtno, "xf86OpenConsole");
         }
@@ -289,8 +290,7 @@ xf86CloseConsole(void)
 		    strerror(errno));
     }
 
-    if (xf86Info.autoVTSwitch)
-    {
+    if (xf86Info.autoVTSwitch) {
         /*
          * Perform a switch back to the active VT when we were started
          */
@@ -309,16 +309,13 @@ xf86ProcessArgument(int argc, char *argv[], int i)
 	 * Keep server from detaching from controlling tty.  This is useful
 	 * when debugging (so the server can receive keyboard signals.
 	 */
-	if (!strcmp(argv[i], "-keeptty"))
-	{
+    if (!strcmp(argv[i], "-keeptty")) {
 		KeepTty = TRUE;
 		return 1;
 	}
 
-	if ((argv[i][0] == 'v') && (argv[i][1] == 't'))
-	{
-		if (sscanf(argv[i], "vt%2d", &xf86Info.vtno) == 0)
-		{
+    if ((argv[i][0] == 'v') && (argv[i][1] == 't')) {
+        if (sscanf(argv[i], "vt%2d", &xf86Info.vtno) == 0) {
 			UseMsg();
 			xf86Info.vtno = -1;
 			return 0;
