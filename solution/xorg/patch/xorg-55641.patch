diff --git a/hw/xfree86/ramdac/xf86HWCurs.c b/hw/xfree86/ramdac/xf86HWCurs.c
index f9b09fc..9572149 100644
--- a/hw/xfree86/ramdac/xf86HWCurs.c
+++ b/hw/xfree86/ramdac/xf86HWCurs.c
@@ -80,28 +80,28 @@ xf86InitHardwareCursor(ScreenPtr pScreen, xf86CursorInfoPtr infoPtr)
     if (!infoPtr->SetCursorPosition ||
 	!infoPtr->LoadCursorImage ||
 	!infoPtr->HideCursor ||
-	!infoPtr->ShowCursor ||
-	!infoPtr->SetCursorColors)
+        !infoPtr->ShowCursor || !infoPtr->SetCursorColors)
 	return FALSE;
 
     if (infoPtr->RealizeCursor) {
 	/* Don't overwrite a driver provided Realize Cursor function */
-    } else
-    if (HARDWARE_CURSOR_SOURCE_MASK_INTERLEAVE_1 & infoPtr->Flags) {
+    }
+    else if (HARDWARE_CURSOR_SOURCE_MASK_INTERLEAVE_1 & infoPtr->Flags) {
 	infoPtr->RealizeCursor = RealizeCursorInterleave1;
-    } else
-    if (HARDWARE_CURSOR_SOURCE_MASK_INTERLEAVE_8 & infoPtr->Flags) {
+    }
+    else if (HARDWARE_CURSOR_SOURCE_MASK_INTERLEAVE_8 & infoPtr->Flags) {
 	infoPtr->RealizeCursor = RealizeCursorInterleave8;
-    } else
-    if (HARDWARE_CURSOR_SOURCE_MASK_INTERLEAVE_16 & infoPtr->Flags) {
+    }
+    else if (HARDWARE_CURSOR_SOURCE_MASK_INTERLEAVE_16 & infoPtr->Flags) {
 	infoPtr->RealizeCursor = RealizeCursorInterleave16;
-    } else
-    if (HARDWARE_CURSOR_SOURCE_MASK_INTERLEAVE_32 & infoPtr->Flags) {
+    }
+    else if (HARDWARE_CURSOR_SOURCE_MASK_INTERLEAVE_32 & infoPtr->Flags) {
 	infoPtr->RealizeCursor = RealizeCursorInterleave32;
-    } else
-    if (HARDWARE_CURSOR_SOURCE_MASK_INTERLEAVE_64 & infoPtr->Flags) {
+    }
+    else if (HARDWARE_CURSOR_SOURCE_MASK_INTERLEAVE_64 & infoPtr->Flags) {
 	infoPtr->RealizeCursor = RealizeCursorInterleave64;
-    } else {    /* not interleaved */
+    }
+    else {                      /* not interleaved */
 	infoPtr->RealizeCursor = RealizeCursorInterleave0;
     }
 
@@ -113,8 +113,9 @@ xf86InitHardwareCursor(ScreenPtr pScreen, xf86CursorInfoPtr infoPtr)
 void
 xf86SetCursor(ScreenPtr pScreen, CursorPtr pCurs, int x, int y)
 {
-    xf86CursorScreenPtr ScreenPriv = (xf86CursorScreenPtr)dixLookupPrivate(
-	&pScreen->devPrivates, xf86CursorScreenKey);
+    xf86CursorScreenPtr ScreenPriv =
+        (xf86CursorScreenPtr) dixLookupPrivate(&pScreen->devPrivates,
+                                               xf86CursorScreenKey);
     xf86CursorInfoPtr infoPtr = ScreenPriv->CursorInfoPtr;
     unsigned char *bits;
 
@@ -123,7 +124,8 @@ xf86SetCursor(ScreenPtr pScreen, CursorPtr pCurs, int x, int y)
 	return;
     }
 
-    bits = dixLookupScreenPrivate(&pCurs->devPrivates, CursorScreenKey, pScreen);
+    bits =
+        dixLookupScreenPrivate(&pCurs->devPrivates, CursorScreenKey, pScreen);
 
     x -= infoPtr->pScrn->frameX0 + ScreenPriv->HotX;
     y -= infoPtr->pScrn->frameY0 + ScreenPriv->HotY;
@@ -133,7 +135,8 @@ xf86SetCursor(ScreenPtr pScreen, CursorPtr pCurs, int x, int y)
 #endif
     if (!bits) {
 	bits = (*infoPtr->RealizeCursor)(infoPtr, pCurs);
-	dixSetScreenPrivate(&pCurs->devPrivates, CursorScreenKey, pScreen, bits);
+            dixSetScreenPrivate(&pCurs->devPrivates, CursorScreenKey, pScreen,
+                                bits);
     }
 
     if (!(infoPtr->Flags & HARDWARE_CURSOR_UPDATE_UNHIDDEN))
@@ -157,8 +160,9 @@ xf86SetCursor(ScreenPtr pScreen, CursorPtr pCurs, int x, int y)
 void
 xf86SetTransparentCursor(ScreenPtr pScreen)
 {
-    xf86CursorScreenPtr ScreenPriv = (xf86CursorScreenPtr)dixLookupPrivate(
-	&pScreen->devPrivates, xf86CursorScreenKey);
+    xf86CursorScreenPtr ScreenPriv =
+        (xf86CursorScreenPtr) dixLookupPrivate(&pScreen->devPrivates,
+                                               xf86CursorScreenKey);
     xf86CursorInfoPtr infoPtr = ScreenPriv->CursorInfoPtr;
 
     if (!ScreenPriv->transparentData)
@@ -178,8 +182,9 @@ xf86SetTransparentCursor(ScreenPtr pScreen)
 void
 xf86MoveCursor(ScreenPtr pScreen, int x, int y)
 {
-    xf86CursorScreenPtr ScreenPriv = (xf86CursorScreenPtr)dixLookupPrivate(
-	&pScreen->devPrivates, xf86CursorScreenKey);
+    xf86CursorScreenPtr ScreenPriv =
+        (xf86CursorScreenPtr) dixLookupPrivate(&pScreen->devPrivates,
+                                               xf86CursorScreenKey);
     xf86CursorInfoPtr infoPtr = ScreenPriv->CursorInfoPtr;
 
     x -= infoPtr->pScrn->frameX0 + ScreenPriv->HotX;
@@ -191,8 +196,9 @@ xf86MoveCursor(ScreenPtr pScreen, int x, int y)
 void
 xf86RecolorCursor(ScreenPtr pScreen, CursorPtr pCurs, Bool displayed)
 {
-    xf86CursorScreenPtr ScreenPriv = (xf86CursorScreenPtr)dixLookupPrivate(
-	&pScreen->devPrivates, xf86CursorScreenKey);
+    xf86CursorScreenPtr ScreenPriv =
+        (xf86CursorScreenPtr) dixLookupPrivate(&pScreen->devPrivates,
+                                               xf86CursorScreenKey);
     xf86CursorInfoPtr infoPtr = ScreenPriv->CursorInfoPtr;
 
 #ifdef ARGB_CURSOR
@@ -221,7 +227,8 @@ xf86RecolorCursor(ScreenPtr pScreen, CursorPtr pCurs, Bool displayed)
 	FakeFreeColor(pmap, maskColor.pixel);
 	(*infoPtr->SetCursorColors)(infoPtr->pScrn,
 		maskColor.pixel, sourceColor.pixel);
-    } else {    /* Pass colors in 8-8-8 RGB format */
+    }
+    else {                      /* Pass colors in 8-8-8 RGB format */
 	(*infoPtr->SetCursorColors)(infoPtr->pScrn,
 	    (pCurs->backBlue >> 8) |
 	    ((pCurs->backGreen >> 8) << 8) |
@@ -243,10 +250,10 @@ RealizeCursorInterleave0(xf86CursorInfoPtr infoPtr, CursorPtr pCurs)
     unsigned char *mem;
     int size = (infoPtr->MaxWidth * infoPtr->MaxHeight) >> 2;
     int SrcPitch, DstPitch, Pitch, y, x;
+
     /* how many words are in the source or mask */
     int words = size / (CUR_BITMAP_SCANLINE_PAD / 4);
 
-
     if (!(mem = calloc(1, size)))
 	return NULL;
 
@@ -275,22 +282,28 @@ RealizeCursorInterleave0(xf86CursorInfoPtr infoPtr, CursorPtr pCurs)
 
     if (infoPtr->Flags & HARDWARE_CURSOR_SWAP_SOURCE_AND_MASK) {
 	SCANLINE *tmp;
-	tmp = DstS; DstS = DstM; DstM = tmp;
+
+        tmp = DstS;
+        DstS = DstM;
+        DstM = tmp;
     }
 
     if (infoPtr->Flags & HARDWARE_CURSOR_AND_SOURCE_WITH_MASK) {
 	for(y = pCurs->bits->height, pSrc = DstS, pMsk = DstM;
 	    y--;
-	    pSrc+=DstPitch, pMsk+=DstPitch, SrcS+=SrcPitch, SrcM+=SrcPitch) {
+             pSrc += DstPitch, pMsk += DstPitch, SrcS += SrcPitch, SrcM +=
+             SrcPitch) {
 	    for(x = 0; x < Pitch; x++) {
 		pSrc[x] = SrcS[x] & SrcM[x];
 		pMsk[x] = SrcM[x];
 	    }
 	}
-    } else {
+    }
+    else {
 	for(y = pCurs->bits->height, pSrc = DstS, pMsk = DstM;
 	    y--;
-	    pSrc+=DstPitch, pMsk+=DstPitch, SrcS+=SrcPitch, SrcM+=SrcPitch) {
+             pSrc += DstPitch, pMsk += DstPitch, SrcS += SrcPitch, SrcM +=
+             SrcPitch) {
 	    for(x = 0; x < Pitch; x++) {
 		pSrc[x] = SrcS[x];
 		pMsk[x] = SrcM[x];
@@ -303,13 +316,15 @@ RealizeCursorInterleave0(xf86CursorInfoPtr infoPtr, CursorPtr pCurs)
 	unsigned char* pntr1 = (unsigned char *)DstS;
 	unsigned char* pntr2 = (unsigned char *)DstM;
 	unsigned char a, b;
+
 	while (count) {
 
 	   a = *pntr1;
 	   b = *pntr2;
 	   *pntr1 = ((a & 0xF0) >> 4) | ((a & 0x0F) << 4);
 	   *pntr2 = ((b & 0xF0) >> 4) | ((b & 0x0F) << 4);
-	   pntr1++; pntr2++;
+            pntr1++;
+            pntr2++;
 	   count-=2;
 	}
     }
@@ -321,6 +336,7 @@ RealizeCursorInterleave0(xf86CursorInfoPtr infoPtr, CursorPtr pCurs)
     if (infoPtr->Flags & HARDWARE_CURSOR_INVERT_MASK) {
 	int count = words;
 	SCANLINE* pntr = DstM;
+
 	while (count--) {
 	   *pntr = ~(*pntr);
 	    pntr++;
@@ -329,8 +345,7 @@ RealizeCursorInterleave0(xf86CursorInfoPtr infoPtr, CursorPtr pCurs)
 
     if (infoPtr->Flags & HARDWARE_CURSOR_BIT_ORDER_MSBFIRST) {
 	for(y = pCurs->bits->height, pSrc = DstS, pMsk = DstM;
-	    y--;
-	    pSrc+=DstPitch, pMsk+=DstPitch) {
+             y--; pSrc += DstPitch, pMsk += DstPitch) {
 	    for(x = 0; x < Pitch; x++) {
 		pSrc[x] = REVERSE_BIT_ORDER(pSrc[x]);
 		pMsk[x] = REVERSE_BIT_ORDER(pMsk[x]);
