diff --git a/hw/xfree86/modes/xf86RandR12.c b/hw/xfree86/modes/xf86RandR12.c
index dfe2cc3..407bf35 100644
--- a/hw/xfree86/modes/xf86RandR12.c
+++ b/hw/xfree86/modes/xf86RandR12.c
@@ -661,6 +661,8 @@ static Bool
 xf86RandR12ScreenSetSize (ScreenPtr	pScreen,
 			CARD16		width,
 			CARD16		height,
+			  CARD16	pixWidth,
+			  CARD16	pixHeight,
 			CARD32		mmWidth,
 			CARD32		mmHeight)
 {
@@ -670,6 +672,8 @@ xf86RandR12ScreenSetSize (ScreenPtr	pScreen,
     WindowPtr		pRoot = pScreen->root;
     PixmapPtr		pScrnPix;
     Bool		ret = FALSE;
+    Bool		pixSizeChanged = FALSE;
+    Bool		winSizeChanged = FALSE;
     int                 c;
 
     if (xf86RandR12Key) {
@@ -677,16 +681,32 @@ xf86RandR12ScreenSetSize (ScreenPtr	pScreen,
         {
 	    randrp->virtualX = pScrn->virtualX;
 	    randrp->virtualY = pScrn->virtualY;
+	    pixSizeChanged = TRUE;
         }
     }
+
+    pScrnPix = (*pScreen->GetScreenPixmap)(pScreen);
+    if (pixWidth != pScrnPix->drawable.width ||
+	pixHeight != pScrnPix->drawable.height)
+	pixSizeChanged = TRUE;
+
+    if (width != pScreen->width || height != pScreen->height)
+	winSizeChanged = TRUE;
+
+    if (pixSizeChanged)
+    {
     if (pRoot && pScrn->vtSema)
 	(*pScrn->EnableDisableFBAccess) (pScreen->myNum, FALSE);
 
     /* Let the driver update virtualX and virtualY */
-    if (!(*config->funcs->resize)(pScrn, width, height))
+	if (!(*config->funcs->resize)(pScrn, pixWidth, pixHeight))
 	goto finish;
+    }
 
     ret = TRUE;
+
+    if (winSizeChanged)
+    {
     /* Update panning information */
     for (c = 0; c < config->num_crtc; c++) {
 	xf86CrtcPtr crtc = config->crtc[c];
@@ -704,19 +724,42 @@ xf86RandR12ScreenSetSize (ScreenPtr	pScreen,
 	    xf86RandR13Pan (crtc, randrp->pointerX, randrp->pointerY);
 	}
     }
+    }
 
     pScrnPix = (*pScreen->GetScreenPixmap)(pScreen);
-    pScreen->width = pScrnPix->drawable.width = width;
-    pScreen->height = pScrnPix->drawable.height = height;
+    pScreen->width = width;
+    pScreen->height = height;
+    if (pRoot)
+    {
+	BoxRec	box;
+
+	pRoot->drawable.width = width;
+	pRoot->drawable.height = height;
+	box.x1 = 0;
+	box.y1 = 0;
+	box.x2 = width;
+	box.y2 = height;
+	RegionInit(&pRoot->winSize, &box, 1);
+	RegionInit(&pRoot->borderSize, &box, 1);
+    }
+    pScrnPix->drawable.width = pixWidth;
+    pScrnPix->drawable.height = pixHeight;
     randrp->mmWidth = pScreen->mmWidth = mmWidth;
     randrp->mmHeight = pScreen->mmHeight = mmHeight;
 
+    if (winSizeChanged)
+    {
     xf86SetViewport (pScreen, pScreen->width-1, pScreen->height-1);
     xf86SetViewport (pScreen, 0, 0);
+    }
 
 finish:
+    if (pixSizeChanged)
+    {
     if (pRoot && pScrn->vtSema)
 	(*pScrn->EnableDisableFBAccess) (pScreen->myNum, TRUE);
+    }
+
 #if RANDR_12_INTERFACE
     if (xf86RandR12Key && pScreen->root && ret)
 	RRScreenSizeNotify (pScreen);
@@ -818,6 +861,8 @@ xf86RandR12CreateScreenResources (ScreenPtr pScreen)
 	xf86RandR12ScreenSetSize (pScreen,
 				  width,
 				  height,
+				  width,
+				  height,
 				  mmWidth,
 				  mmHeight);
     }
