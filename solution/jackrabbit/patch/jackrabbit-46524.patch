diff --git a/jackrabbit-spi2dav/src/main/java/org/apache/jackrabbit/spi2davex/ValueLoader.java b/jackrabbit-spi2dav/src/main/java/org/apache/jackrabbit/spi2davex/ValueLoader.java
new file mode 100644
index 0000000..9833b45
--- /dev/null
+++ b/jackrabbit-spi2dav/src/main/java/org/apache/jackrabbit/spi2davex/ValueLoader.java
@@ -0,0 +1,106 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.jackrabbit.spi2davex;
+
+import org.apache.commons.httpclient.HttpClient;
+import org.apache.commons.httpclient.methods.GetMethod;
+import org.apache.jackrabbit.spi2dav.ExceptionConverter;
+import org.apache.jackrabbit.webdav.DavConstants;
+import org.apache.jackrabbit.webdav.DavException;
+import org.apache.jackrabbit.webdav.DavServletResponse;
+import org.apache.jackrabbit.webdav.MultiStatusResponse;
+import org.apache.jackrabbit.webdav.client.methods.DavMethodBase;
+import org.apache.jackrabbit.webdav.client.methods.PropFindMethod;
+import org.apache.jackrabbit.webdav.jcr.ItemResourceConstants;
+import org.apache.jackrabbit.webdav.property.DavProperty;
+import org.apache.jackrabbit.webdav.property.DavPropertyNameSet;
+import org.apache.jackrabbit.webdav.property.DavPropertySet;
+
+import javax.jcr.ItemNotFoundException;
+import javax.jcr.PropertyType;
+import javax.jcr.RepositoryException;
+import java.io.IOException;
+import java.io.InputStream;
+
+/**
+ * <code>ValueLoader</code>...
+ */
+class ValueLoader {
+
+    private final HttpClient client;
+
+    ValueLoader(HttpClient client) {
+        this.client = client;
+    }
+
+    void loadBinary(String uri, int index, Target target) throws RepositoryException, IOException {
+        GetMethod method = new GetMethod(uri);
+        try {
+            int statusCode = client.executeMethod(method);
+            if (statusCode == DavServletResponse.SC_OK) {
+                target.setStream(method.getResponseBodyAsStream());
+            } else {
+                throw ExceptionConverter.generate(new DavException(statusCode, ("Unable to load binary. Status line = " + method.getStatusLine().toString())));
+            }
+        } finally {
+            method.releaseConnection();
+        }
+    }
+
+    int loadType(String uri) throws RepositoryException, IOException {
+        DavPropertyNameSet nameSet = new DavPropertyNameSet();
+        nameSet.add(ItemResourceConstants.JCR_TYPE);
+
+        DavMethodBase method = null;
+        try {
+            method = new PropFindMethod(uri, nameSet, DavConstants.DEPTH_0);
+            client.executeMethod(method);
+            method.checkSuccess();
+
+            MultiStatusResponse[] responses = method.getResponseBodyAsMultiStatus().getResponses();
+            if (responses.length == 1) {
+                DavPropertySet props = responses[0].getProperties(DavServletResponse.SC_OK);
+                DavProperty type = props.get(ItemResourceConstants.JCR_TYPE);
+                if (type != null) {
+                    return PropertyType.valueFromName(type.getValue().toString());
+                } else {
+                    throw new RepositoryException("Internal error. Cannot retrieve property type at " + uri);
+                }
+            } else {
+                throw new ItemNotFoundException("Internal error. Cannot retrieve property type at " + uri);
+            }
+        } catch (DavException e) {
+            throw ExceptionConverter.generate(e);
+        } finally {
+            if (method != null) {
+                method.releaseConnection();
+            }
+        }
+    }
+
+    //--------------------------------------------------------------------------
+    /**
+     * Internal inteface
+     */
+    interface Target {
+        /**
+         * @param in
+         * @throws IOException
+         */
+        void setStream(InputStream in) throws IOException;
+    }
+}
\ No newline at end of file
