diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/SecurityItemModifier.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/SecurityItemModifier.java
index 8c10047..42d2f35 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/SecurityItemModifier.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/SecurityItemModifier.java
@@ -18,23 +18,21 @@ package org.apache.jackrabbit.core;
 
 import org.apache.jackrabbit.core.nodetype.NodeDefinitionImpl;
 import org.apache.jackrabbit.core.nodetype.NodeTypeImpl;
+import org.apache.jackrabbit.core.security.AccessManager;
+import org.apache.jackrabbit.core.security.authorization.Permission;
 import org.apache.jackrabbit.core.security.authorization.acl.ACLEditor;
 import org.apache.jackrabbit.core.security.user.UserManagerImpl;
 import org.apache.jackrabbit.core.state.ChildNodeEntry;
 import org.apache.jackrabbit.core.state.NodeState;
 import org.apache.jackrabbit.core.value.InternalValue;
 import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.Path;
 
-import javax.jcr.AccessDeniedException;
-import javax.jcr.ItemExistsException;
-import javax.jcr.ItemNotFoundException;
-import javax.jcr.PathNotFoundException;
 import javax.jcr.Property;
 import javax.jcr.RepositoryException;
 import javax.jcr.Value;
-import javax.jcr.lock.LockException;
-import javax.jcr.nodetype.ConstraintViolationException;
-import javax.jcr.version.VersionException;
+import javax.jcr.ItemExistsException;
+import javax.jcr.AccessDeniedException;
 
 /**
  * <code>SecurityItemModifier</code>: An abstract helper class to allow classes
@@ -46,72 +44,106 @@ import javax.jcr.version.VersionException;
  */
 public abstract class SecurityItemModifier {
 
-    protected SecurityItemModifier() {
+    private final boolean checkAcPermission;
+
+    protected SecurityItemModifier(boolean checkAcPermission) {
         Class cl = getClass();
         if (!(cl.equals(UserManagerImpl.class) ||
               cl.equals(ACLEditor.class) ||
               cl.equals(org.apache.jackrabbit.core.security.authorization.principalbased.ACLEditor.class))) {
             throw new IllegalArgumentException("Only UserManagerImpl and ACLEditor may extend from the SecurityItemModifier");
         }
+        this.checkAcPermission = checkAcPermission;
     }
 
-    protected NodeImpl addSecurityNode(NodeImpl parentImpl, Name name, Name ntName) throws RepositoryException, PathNotFoundException, LockException, ConstraintViolationException, ItemExistsException, VersionException {
-        synchronized (parentImpl) {
-            // validation: make sure Node is not locked or checked-in.
-            parentImpl.checkSetProperty();
-
-            NodeTypeImpl nodeType = parentImpl.session.getNodeTypeManager().getNodeType(ntName);
-            NodeDefinitionImpl def = parentImpl.getApplicableChildNodeDefinition(name, ntName);
-
-            // check for name collisions
-            // TODO: improve. copied from NodeImpl
-            NodeState thisState = (NodeState) parentImpl.getItemState();
-            ChildNodeEntry cne = thisState.getChildNodeEntry(name, 1);
-            if (cne != null) {
-                // there's already a child node entry with that name;
-                // check same-name sibling setting of new node
-                if (!def.allowsSameNameSiblings()) {
-                    throw new ItemExistsException();
-                }
-                // check same-name sibling setting of existing node
-                NodeId newId = cne.getId();
-                NodeImpl n = (NodeImpl) parentImpl.session.getItemManager().getItem(newId);
-                if (!n.getDefinition().allowsSameNameSiblings()) {
-                    throw new ItemExistsException();
-                }
+    protected NodeImpl addSecurityNode(NodeImpl parentImpl, Name name, Name ntName) throws RepositoryException {
+        checkPermission(parentImpl, name, getPermission(true, false));
+        // validation: make sure Node is not locked or checked-in.
+        parentImpl.checkSetProperty();
+
+        NodeTypeImpl nodeType = parentImpl.session.getNodeTypeManager().getNodeType(ntName);
+        NodeDefinitionImpl def = parentImpl.getApplicableChildNodeDefinition(name, ntName);
+
+        // check for name collisions
+        // TODO: improve. copied from NodeImpl
+        NodeState thisState = (NodeState) parentImpl.getItemState();
+        ChildNodeEntry cne = thisState.getChildNodeEntry(name, 1);
+        if (cne != null) {
+            // there's already a child node entry with that name;
+            // check same-name sibling setting of new node
+            if (!def.allowsSameNameSiblings()) {
+                throw new ItemExistsException();
+            }
+            // check same-name sibling setting of existing node
+            NodeId newId = cne.getId();
+            NodeImpl n = (NodeImpl) parentImpl.session.getItemManager().getItem(newId);
+            if (!n.getDefinition().allowsSameNameSiblings()) {
+                throw new ItemExistsException();
             }
+        }
 
-            return parentImpl.createChildNode(name, def, nodeType, null);
+        return parentImpl.createChildNode(name, def, nodeType, null);
+    }
+
+    protected Property setSecurityProperty(NodeImpl parentImpl, Name name, Value value) throws RepositoryException {
+        if (!parentImpl.isNew()) {
+            checkPermission(parentImpl, name, getPermission(false, false));
         }
+        // validation: make sure Node is not locked or checked-in.
+        parentImpl.checkSetProperty();
+        InternalValue intVs = InternalValue.create(value, parentImpl.session);
+        return parentImpl.internalSetProperty(name, intVs);
     }
 
-    protected Property setSecurityProperty(NodeImpl parentImpl, Name name, Value value) throws RepositoryException, PathNotFoundException, LockException, ConstraintViolationException, ItemExistsException, VersionException {
-        synchronized (parentImpl) {
-            // validation: make sure Node is not locked or checked-in.
-            parentImpl.checkSetProperty();
-            InternalValue intVs = InternalValue.create(value, parentImpl.session);
-            return parentImpl.internalSetProperty(name, intVs);
+    protected Property setSecurityProperty(NodeImpl parentImpl, Name name, Value[] values) throws RepositoryException {
+        checkPermission(parentImpl, name, getPermission(false, false));
+        // validation: make sure Node is not locked or checked-in.
+        parentImpl.checkSetProperty();
+        InternalValue[] intVs = new InternalValue[values.length];
+        for (int i = 0; i < values.length; i++) {
+            intVs[i] = InternalValue.create(values[i], parentImpl.session);
         }
+        return parentImpl.internalSetProperty(name, intVs);
     }
 
-    protected Property setSecurityProperty(NodeImpl parentImpl, Name name, Value[] values) throws RepositoryException, PathNotFoundException, LockException, ConstraintViolationException, ItemExistsException, VersionException {
-        synchronized (parentImpl) {
-            // validation: make sure Node is not locked or checked-in.
-            parentImpl.checkSetProperty();
-            InternalValue[] intVs = new InternalValue[values.length];
-            for (int i = 0; i < values.length; i++) {
-                intVs[i] = InternalValue.create(values[i], parentImpl.session);
-            }
-            return parentImpl.internalSetProperty(name, intVs);
+    protected void removeSecurityItem(ItemImpl itemImpl) throws RepositoryException {
+        NodeImpl n;
+        if (itemImpl.isNode()) {
+            n = (NodeImpl) itemImpl;
+        } else {
+            n = (NodeImpl) itemImpl.getParent();
+        }
+        checkPermission(itemImpl, getPermission(itemImpl.isNode(), true));
+        // validation: make sure Node is not locked or checked-in.
+        n.checkSetProperty();
+        itemImpl.internalRemove(true);
+    }
+
+    private void checkPermission(ItemImpl item, int perm) throws RepositoryException {
+        SessionImpl sImpl = (SessionImpl) item.getSession();
+        AccessManager acMgr = sImpl.getAccessManager();
+
+        Path path = sImpl.getHierarchyManager().getPath(item.getId());
+        acMgr.checkPermission(path, perm);
+    }
+
+    private void checkPermission(NodeImpl node, Name childName, int perm) throws RepositoryException {
+        SessionImpl sImpl = (SessionImpl) node.getSession();
+        AccessManager acMgr = sImpl.getAccessManager();
+
+        boolean isGranted = acMgr.isGranted(node.getPrimaryPath(), childName, perm);
+        if (!isGranted) {
+            throw new AccessDeniedException("Permission denied.");
         }
     }
 
-    protected void removeSecurityItem(ItemImpl itemImpl) throws LockException, VersionException, AccessDeniedException, ItemNotFoundException, RepositoryException {
-        NodeImpl n = (itemImpl.isNode()) ? (NodeImpl) itemImpl : (NodeImpl) itemImpl.getParent();
-        synchronized (n) {
-            // validation: make sure Node is not locked or checked-in.
-            n.checkSetProperty();
-            itemImpl.internalRemove(true);
+    private int getPermission(boolean isNode, boolean isRemove) {
+        if (checkAcPermission) {
+            return Permission.MODIFY_AC;
+        } else if (isNode) {
+            return (isRemove) ? Permission.REMOVE_NODE : Permission.ADD_NODE;
+        } else {
+            return (isRemove) ? Permission.REMOVE_PROPERTY : Permission.SET_PROPERTY;
         }
     }
 }
\ No newline at end of file
