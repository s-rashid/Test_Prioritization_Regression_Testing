diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/SessionImpl.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/SessionImpl.java
index 56e4859..be05f3c 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/SessionImpl.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/SessionImpl.java
@@ -102,7 +102,6 @@ import org.apache.jackrabbit.spi.commons.conversion.MalformedPathException;
 import org.apache.jackrabbit.spi.commons.conversion.NameException;
 import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
 import org.apache.jackrabbit.spi.commons.namespace.NamespaceResolver;
-import org.apache.jackrabbit.uuid.UUID;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.xml.sax.ContentHandler;
@@ -515,35 +514,6 @@ public class SessionImpl extends AbstractSession
     }
 
     /**
-     * Retrieves the referenceable node with the given <code>UUID</code>.
-     *
-     * @param uuid uuid of the node to be retrieved
-     * @return referenceable node with the given uuid
-     * @throws ItemNotFoundException if no node exists with the given uuid or
-     * if the existing node is not referenceable.
-     * @throws RepositoryException if another error occurs.
-     * @see #getNodeByUUID(String)
-     * @see #getNodeById(NodeId)
-     */
-    public Node getNodeByUUID(UUID uuid) throws ItemNotFoundException, RepositoryException {
-        NodeImpl node = getNodeById(new NodeId(uuid));
-        // since the uuid of a node is only exposed through jcr:uuid declared
-        // by mix:referenceable it's rather unlikely that a client can possibly
-        // know the internal uuid of a non-referenceable node; omitting the
-        // check for mix:referenceable seems therefore to be a reasonable
-        // compromise in order to improve performance.
-/*
-        if (node.isNodeType(Name.MIX_REFERENCEABLE)) {
-            return node;
-        } else {
-            // there is a node with that uuid but the node does not expose it
-            throw new ItemNotFoundException(uuid.toString());
-        }
-*/
-        return node;
-    }
-
-    /**
      * Retrieves the <code>Node</code> with the given id.
      *
      * @param id id of node to be retrieved
@@ -861,7 +831,21 @@ public class SessionImpl extends AbstractSession
      */
     public Node getNodeByUUID(String uuid) throws ItemNotFoundException, RepositoryException {
         try {
-            return getNodeByUUID(UUID.fromString(uuid));
+            NodeImpl node = getNodeById(new NodeId(uuid));
+            // since the uuid of a node is only exposed through jcr:uuid declared
+            // by mix:referenceable it's rather unlikely that a client can possibly
+            // know the internal uuid of a non-referenceable node; omitting the
+            // check for mix:referenceable seems therefore to be a reasonable
+            // compromise in order to improve performance.
+            /*
+            if (node.isNodeType(Name.MIX_REFERENCEABLE)) {
+                return node;
+            } else {
+                // there is a node with that uuid but the node does not expose it
+                throw new ItemNotFoundException(uuid.toString());
+            }
+             */
+            return node;
         } catch (IllegalArgumentException e) {
             // Assuming the exception is from UUID.fromString()
             throw new RepositoryException("Invalid UUID: " + uuid, e);
