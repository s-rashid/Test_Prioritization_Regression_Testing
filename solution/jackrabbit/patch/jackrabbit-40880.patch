diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/hits/AdaptingHits.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/hits/AdaptingHits.java
index 6e4c282..0f7b9bc 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/hits/AdaptingHits.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/hits/AdaptingHits.java
@@ -22,10 +22,10 @@ import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 /**
- * This is an implementation of Hits which starts with marking hits in an 
- * ArrayHits instance and switches to a BitSetHits instance if at least the 
- * threshold of 8kb for the ArrayHits is reached and a BitSetHits instance 
- * would consume less memory. 
+ * This is an implementation of Hits which starts with marking hits in an
+ * ArrayHits instance and switches to a BitSetHits instance if at least the
+ * threshold of 8kb for the ArrayHits is reached and a BitSetHits instance
+ * would consume less memory.
  */
 public class AdaptingHits implements Hits {
 
@@ -33,23 +33,23 @@ public class AdaptingHits implements Hits {
      * Logger instance for this class.
      */
     private static final Logger log = LoggerFactory.getLogger(AdaptingHits.class);
-    
+
     /**
      * The lower threshold before a conversion is tried
      */
     private static final int DEFAULT_THRESHOLD = 2048;
-    
+
     /**
      * Internal hits instance
      */
     private Hits hits;
-    
+
     /**
      * The maximum doc number in hits. Used to calculate the expected
      * BitSetHits memory footprint.
      */
     private int maxDoc;
-    
+
     /**
      * The total number of hits. Used to calculate the memory footprint of the
      * initial ArrayHits instance.
@@ -57,7 +57,7 @@ public class AdaptingHits implements Hits {
     private int docCount;
 
     private int threshold;
-    
+
     public AdaptingHits() {
         this(DEFAULT_THRESHOLD);
     }
@@ -85,7 +85,7 @@ public class AdaptingHits implements Hits {
         if (doc > maxDoc) {
             maxDoc = doc;
         }
-        
+
         if (docCount > threshold && (hits instanceof ArrayHits)) {
             int intArraySize = docCount * 4;
             int bitSetSize = maxDoc / 8;
@@ -115,7 +115,7 @@ public class AdaptingHits implements Hits {
         // delegate to the internal Hits instance
         return hits.skipTo(target);
     }
-    
+
     Hits getInternalHits() {
         return hits;
     }
