diff --git a/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/repository/ProxyRepository.java b/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/repository/ProxyRepository.java
index 6369bdc..025076b 100644
--- a/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/repository/ProxyRepository.java
+++ b/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/repository/ProxyRepository.java
@@ -19,6 +19,7 @@ package org.apache.jackrabbit.commons.repository;
 import javax.jcr.Credentials;
 import javax.jcr.RepositoryException;
 import javax.jcr.Session;
+import javax.jcr.Value;
 
 import org.apache.jackrabbit.commons.AbstractRepository;
 
@@ -61,10 +62,28 @@ public class ProxyRepository extends AbstractRepository {
     }
 
     /**
+     * Checks whether the given key identifies a valid single-valued
+     * descriptor key in the proxied repository. Returns <code>false</code>
+     * if the proxied repository can not be accessed.
+     *
+     * @return <code>true</code> if the key identifies a valid single-valued
+     *         descriptor in the proxied repository,
+     *         <code>false</code> otherwise
+     */
+    public boolean isSingleValueDescriptor(String key) {
+        try {
+            return factory.getRepository().isSingleValueDescriptor(key);
+        } catch (RepositoryException e) {
+            return false;
+        }
+    }
+
+    /**
      * Returns the descriptor with the given key from the proxied repository.
      * Returns <code>null</code> if the descriptor does not exist or if the
      * proxied repository can not be accessed.
      *
+     * @param key descriptor key
      * @return descriptor value, or <code>null</code>
      */
     public String getDescriptor(String key) {
@@ -76,6 +95,38 @@ public class ProxyRepository extends AbstractRepository {
     }
 
     /**
+     * Returns the value of the descriptor with the given key from the proxied
+     * repository. Returns <code>null</code> if the descriptor does not exist
+     * or if the proxied repository can not be accessed.
+     *
+     * @param key descriptor key
+     * @return descriptor value, or <code>null</code>
+     */
+    public Value getDescriptorValue(String key) {
+        try {
+            return factory.getRepository().getDescriptorValue(key);
+        } catch (RepositoryException e) {
+            return null;
+        }
+    }
+
+    /**
+     * Returns the values of the descriptor with the given key from the proxied
+     * repository. Returns <code>null</code> if the descriptor does not exist
+     * or if the proxied repository can not be accessed.
+     *
+     * @param key descriptor key
+     * @return descriptor values, or <code>null</code>
+     */
+    public Value[] getDescriptorValues(String key) {
+        try {
+            return factory.getRepository().getDescriptorValues(key);
+        } catch (RepositoryException e) {
+            return null;
+        }
+    }
+
+    /**
      * Logs in to the proxied repository and returns the resulting session.
      * <p>
      * Note that the {@link Session#getRepository()} method of the resulting
