diff --git a/jackrabbit-ocm/src/test/java/org/apache/jackrabbit/ocm/manager/atomic/DigesterAtomicTest.java b/jackrabbit-ocm/src/test/java/org/apache/jackrabbit/ocm/manager/atomic/DigesterAtomicTest.java
index 55d6344..4d410f6 100644
--- a/jackrabbit-ocm/src/test/java/org/apache/jackrabbit/ocm/manager/atomic/DigesterAtomicTest.java
+++ b/jackrabbit-ocm/src/test/java/org/apache/jackrabbit/ocm/manager/atomic/DigesterAtomicTest.java
@@ -54,7 +54,7 @@ public class DigesterAtomicTest extends DigesterTestBase
         // All methods starting with "test" will be executed in the test suite.
         return new RepositoryLifecycleTestSetup(new TestSuite(DigesterAtomicTest.class));
     }
-    
+
     public void testAtomicFields()
     {
         try
@@ -74,7 +74,7 @@ public class DigesterAtomicTest extends DigesterTestBase
             a.setString("Test String");
             a.setDate(date);
             a.setInt2boolean(true);
-            
+
             byte[] content = "Test Byte".getBytes();
             a.setByteArray(content);
             a.setCalendar(calendar);
@@ -82,17 +82,17 @@ public class DigesterAtomicTest extends DigesterTestBase
             a.setDoublePrimitive(1.23);
             long now = System.currentTimeMillis();
             a.setTimestamp(new Timestamp(now));
-            
+
             ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream("Test Stream".getBytes());
             a.setInputStream(byteArrayInputStream);
             a.setNamedProperty("ocm:test");
             a.setPathProperty("/node1/node2");
             a.setUndefinedProperty("aStringData");
-            
+
             ocm.insert(a);
             ocm.save();
 
-             
+
             // --------------------------------------------------------------------------------
             // Get the object
             // --------------------------------------------------------------------------------
@@ -109,70 +109,70 @@ public class DigesterAtomicTest extends DigesterTestBase
             assertTrue("Incorrect boolean object", a.getString().equals("Test String"));
             assertNotNull("Byte array object is null", a.getByteArray());
             assertTrue("Incorrect byte object", new String(a.getByteArray()).equals("Test Byte"));
-            
+
             assertNotNull("date object is null", a.getDate());
-            assertTrue("Invalid date", a.getDate().equals(date));            
+            assertTrue("Invalid date", a.getDate().equals(date));
             assertNotNull("calendar object is null", a.getCalendar());
-            
+
             log.debug("Calendar : " + a.getCalendar().get(Calendar.YEAR) + "-" + a.getCalendar().get(Calendar.MONTH) + "-" + a.getCalendar().get(Calendar.DAY_OF_MONTH));
             assertTrue("Invalid calendar object", a.getCalendar().equals(calendar));
-            
+
             assertNotNull("Double object is null", a.getDoubleObject());
             assertTrue("Incorrect double object", a.getDoubleObject().doubleValue() == 2.12);
             assertTrue("Incorrect double primitive", a.getDoublePrimitive() == 1.23);
-            
+
             assertNotNull("Incorrect input stream primitive", a.getInputStream());
             assertNotNull("Incorrect timestamp", a.getTimestamp());
-            assertTrue("Invalid timestamp value ", a.getTimestamp().getTime() == now);            
+            assertTrue("Invalid timestamp value ", a.getTimestamp().getTime() == now);
             assertTrue("Invalid int2boolean value ", a.isInt2boolean());
-            
+
             assertTrue("Invalid namedProperty value ", a.getNamedProperty().equals("ocm:test"));
             assertTrue("Invalid pathProperty value ", a.getPathProperty().equals("/node1/node2"));
             assertTrue("Invalid undefinedProperty value ", ((String) a.getUndefinedProperty()).equals("aStringData"));
             // --------------------------------------------------------------------------------
             // Update the property "namedProperty" with an invalid value
-            // --------------------------------------------------------------------------------            
-            try 
+            // --------------------------------------------------------------------------------
+            try
             {
                // update with an incorrect namespace - Should throws an exception
-               a.setNamedProperty("unknown:test");               
+               a.setNamedProperty("unknown:test");
                ocm.update(a);
                fail("Exception was not triggered with an invalid namespace");
                ocm.save();
             }
             catch (Exception e)
             {
-               
-                
+
+
             }
-            
+
             // --------------------------------------------------------------------------------
             // Update the property "pathProperty" with an invalid value
-            // --------------------------------------------------------------------------------            
-            try 
+            // --------------------------------------------------------------------------------
+            try
             {
                // update with an incorrect namespace - Should throws an exception
-               a.setPathProperty("//node1");               
+               a.setPathProperty("//node1");
                ocm.update(a);
                fail("Exception was not triggered with an invalid path");
                ocm.save();
             }
             catch (Exception e)
             {
-               
-                
+
+
             }
-            
+
             // --------------------------------------------------------------------------------
             // Update the property "undefinedProperty" with an invalid value
-            // --------------------------------------------------------------------------------            
+            // --------------------------------------------------------------------------------
             a = null;
             a = (Atomic) ocm.getObject( "/test");
 
             a.setUndefinedProperty(new Double(1.2));
             ocm.update(a);
             ocm.save();
-            
+
             // --------------------------------------------------------------------------------
             // Get the object
             // --------------------------------------------------------------------------------
@@ -180,14 +180,14 @@ public class DigesterAtomicTest extends DigesterTestBase
             a = (Atomic) ocm.getObject( "/test");
             assertNotNull("a is null", a);
             assertTrue("Invalid undefinedProperty value ", ((Double) a.getUndefinedProperty()).doubleValue() == 1.2);
-            
+
         }
         catch (Exception e)
         {
             e.printStackTrace();
             fail("Exception occurs during the unit test : " + e);
         }
-        
+
     }
-    
+
 }
\ No newline at end of file
