diff --git a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/qom/FullTextSearchScoreTest.java b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/qom/FullTextSearchScoreTest.java
new file mode 100644
index 0000000..18417df
--- /dev/null
+++ b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/qom/FullTextSearchScoreTest.java
@@ -0,0 +1,91 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.jackrabbit.test.api.query.qom;
+
+import javax.jcr.RepositoryException;
+import javax.jcr.Node;
+import javax.jcr.query.qom.Ordering;
+import javax.jcr.query.qom.QueryObjectModelFactory;
+import javax.jcr.query.QueryResult;
+import javax.jcr.query.RowIterator;
+
+/**
+ * <code>FullTextSearchScoreTest</code> contains fulltext search score tests.
+ */
+public class FullTextSearchScoreTest extends AbstractQOMTest {
+
+    private static final String TEXT = "the quick brown fox jumps over the lazy dog.";
+
+    protected void setUp() throws Exception {
+        super.setUp();
+        Node n1 = testRootNode.addNode(nodeName1, testNodeType);
+        n1.setProperty(propertyName1, TEXT);
+        Node n2 = testRootNode.addNode(nodeName2, testNodeType);
+        n2.setProperty(propertyName1, TEXT);
+        n2.setProperty(propertyName2, TEXT);
+        superuser.save();
+    }
+
+    public void testOrdering() throws RepositoryException {
+        QueryResult result = qf.createQuery(
+                qf.selector(testNodeType, "s"),
+                qf.and(
+                        qf.fullTextSearch("s", null, "fox"),
+                        qf.descendantNode("s", testRootNode.getPath())
+                ),
+                new Ordering[]{qf.ascending(qf.fullTextSearchScore("s"))},
+                null
+        ).execute();
+
+        RowIterator rows = result.getRows();
+        double previousScore = Double.NaN;
+        while (rows.hasNext()) {
+            double score = rows.nextRow().getScore("s");
+            if (!Double.isNaN(previousScore)) {
+                assertTrue("wrong order", previousScore <= score);
+            }
+            previousScore = score;
+        }
+    }
+
+    public void testConstraint() throws RepositoryException {
+        QueryResult result = qf.createQuery(
+                qf.selector(testNodeType, "s"),
+                qf.and(
+                        qf.and(
+                                qf.fullTextSearch("s", null, "fox"),
+                                qf.comparison(
+                                        qf.fullTextSearchScore("s"),
+                                        QueryObjectModelFactory.JCR_OPERATOR_GREATER_THAN,
+                                        qf.literal(vf.createValue(Double.MIN_VALUE))
+                                )
+                        ),
+                        qf.descendantNode("s", testRootNode.getPath())
+                ),
+                new Ordering[]{qf.descending(qf.fullTextSearchScore("s"))},
+                null
+        ).execute();
+
+        RowIterator rows = result.getRows();
+        while (rows.hasNext()) {
+            double score = rows.nextRow().getScore("s");
+            if (!Double.isNaN(score)) {
+                assertTrue("wrong full text search score", Double.MIN_VALUE < score);
+            }
+        }
+    }
+}
