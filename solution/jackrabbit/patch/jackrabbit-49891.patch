diff --git a/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/query/QueryManagerImpl.java b/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/query/QueryManagerImpl.java
index 149796c..359eab6 100644
--- a/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/query/QueryManagerImpl.java
+++ b/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/query/QueryManagerImpl.java
@@ -21,10 +21,15 @@ import org.apache.jackrabbit.jcr2spi.WorkspaceManager;
 import org.apache.jackrabbit.jcr2spi.ManagerProvider;
 import org.apache.jackrabbit.spi.commons.query.qom.QueryObjectModelFactoryImpl;
 import org.apache.jackrabbit.spi.commons.query.qom.QueryObjectModelTree;
+import org.apache.jackrabbit.spi.commons.query.QueryObjectModelBuilderRegistry;
+import org.apache.jackrabbit.spi.commons.query.QueryObjectModelBuilder;
+import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
+import org.apache.jackrabbit.spi.commons.name.NameConstants;
 
 import javax.jcr.Node;
 import javax.jcr.RepositoryException;
 import javax.jcr.Session;
+import javax.jcr.ValueFactory;
 import javax.jcr.query.InvalidQueryException;
 import javax.jcr.query.Query;
 import javax.jcr.query.QueryManager;
@@ -42,6 +47,11 @@ public class QueryManagerImpl implements QueryManager {
     private final Session session;
 
     /**
+     * The value factory.
+     */
+    private final ValueFactory valueFactory;
+
+    /**
      * Provides various managers.
      */
     private final ManagerProvider mgrProvider;
@@ -57,36 +67,25 @@ public class QueryManagerImpl implements QueryManager {
     private final WorkspaceManager wspManager;
 
     /**
-     * The query object model factory.
-     */
-    private final QueryObjectModelFactory qomFactory;
-
-    /**
      * Creates a new <code>QueryManagerImpl</code> for the passed
      * <code>Session</code>.
      *
-     * @param session the current session.
+     * @param session     the current session.
      * @param mgrProvider the manager provider.
-     * @param itemMgr the item manager of the current session.
-     * @param wspManager the workspace manager.
+     * @param itemMgr     the item manager of the current session.
+     * @param wspManager  the workspace manager.
+     * @throws RepositoryException if an error occurs while initializing this
+     *                             query manager.
      */
     public QueryManagerImpl(Session session,
                             ManagerProvider mgrProvider,
                             ItemManager itemMgr,
                             WorkspaceManager wspManager) throws RepositoryException {
         this.session = session;
+        this.valueFactory = mgrProvider.getJcrValueFactory();
         this.mgrProvider = mgrProvider;
         this.itemMgr = itemMgr;
         this.wspManager = wspManager;
-        this.qomFactory = new QueryObjectModelFactoryImpl(
-                mgrProvider.getNamePathResolver(), mgrProvider.getJcrValueFactory()) {
-            
-            protected QueryObjectModel createQuery(QueryObjectModelTree qomTree)
-                    throws InvalidQueryException, RepositoryException {
-                // TODO implementation missing
-                throw new UnsupportedOperationException("Implementation missing: JCR-2107");
-            }
-        };
     }
 
     /**
@@ -95,7 +94,8 @@ public class QueryManagerImpl implements QueryManager {
     public Query createQuery(String statement, String language)
             throws InvalidQueryException, RepositoryException {
         checkIsAlive();
-        return new QueryImpl(session, mgrProvider, itemMgr, wspManager, statement, language);
+        return new QueryImpl(session, mgrProvider, itemMgr, wspManager,
+                statement, language, null);
     }
 
     /**
@@ -104,7 +104,26 @@ public class QueryManagerImpl implements QueryManager {
     public Query getQuery(Node node)
             throws InvalidQueryException, RepositoryException {
         checkIsAlive();
-        return new QueryImpl(session, mgrProvider, itemMgr, wspManager, node);
+
+        NamePathResolver resolver = mgrProvider.getNamePathResolver();
+        if (!node.isNodeType(resolver.getJCRName(NameConstants.NT_QUERY))) {
+            throw new InvalidQueryException("Node is not of type nt:query");
+        }
+        if (node.getSession() != session) {
+            throw new InvalidQueryException("Node belongs to a different session.");
+        }
+        String statement = node.getProperty(resolver.getJCRName(NameConstants.JCR_STATEMENT)).getString();
+        String language = node.getProperty(resolver.getJCRName(NameConstants.JCR_LANGUAGE)).getString();
+
+        if (Query.JCR_JQOM.equals(language)) {
+            QueryObjectModelFactory qomFactory = new QOMFactory(
+                    node, resolver, valueFactory);
+            QueryObjectModelBuilder builder = QueryObjectModelBuilderRegistry.getQueryObjectModelBuilder(language);
+            return builder.createQueryObjectModel(statement, qomFactory, valueFactory);
+        } else {
+            return new QueryImpl(session, mgrProvider, itemMgr, wspManager,
+                    statement, language, node);
+        }
     }
 
     /**
@@ -118,7 +137,7 @@ public class QueryManagerImpl implements QueryManager {
      * @see QueryManager#getQOMFactory()
      */
     public QueryObjectModelFactory getQOMFactory() {
-        return qomFactory;        
+        return new QOMFactory(null, mgrProvider.getNamePathResolver(), valueFactory);
     }
 
     //------------------------------------------------------------< private >---
@@ -135,4 +154,21 @@ public class QueryManagerImpl implements QueryManager {
         }
     }
 
+    private class QOMFactory extends QueryObjectModelFactoryImpl {
+
+        private final Node node;
+
+        public QOMFactory(Node node,
+                          NamePathResolver resolver,
+                          ValueFactory factory) {
+            super(resolver, factory);
+            this.node = node;
+        }
+
+        protected QueryObjectModel createQuery(QueryObjectModelTree qomTree)
+                throws InvalidQueryException, RepositoryException {
+            return new QueryObjectModelImpl(session, mgrProvider, itemMgr,
+                    wspManager, qomTree, node);
+        }
+    }
 }
