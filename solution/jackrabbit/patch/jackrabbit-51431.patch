diff --git a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/data/GCConcurrentTest.java b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/data/GCConcurrentTest.java
index bf5a905..6808bef 100644
--- a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/data/GCConcurrentTest.java
+++ b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/data/GCConcurrentTest.java
@@ -17,6 +17,7 @@
 package org.apache.jackrabbit.core.data;
 
 import org.apache.jackrabbit.core.RepositoryImpl;
+import org.apache.jackrabbit.core.SessionImpl;
 import org.apache.jackrabbit.test.AbstractJCRTest;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -40,6 +41,35 @@ public class GCConcurrentTest extends AbstractJCRTest {
     /** logger instance */
     private static final Logger LOG = LoggerFactory.getLogger(GCConcurrentTest.class);
 
+    public void testConcurrentDelete() throws Exception {
+        Node root = testRootNode;
+        Session session = root.getSession();
+        RepositoryImpl rep = (RepositoryImpl) session.getRepository();
+        if (rep.getDataStore() == null) {
+            LOG.info("testGC skipped. Data store is not used.");
+            return;
+        }
+        final String testNodeName = "testConcurrentDelete";
+        node(root, testNodeName);
+        session.save();
+        GarbageCollector gc = ((SessionImpl) session).createDataStoreGarbageCollector();
+        gc.setPersistenceManagerScan(false);
+        gc.setScanEventListener(new ScanEventListener() {
+            public void beforeScanning(Node n) throws RepositoryException {
+                if (n.getName().equals(testNodeName)) {
+                    n.remove();
+                    n.getSession().save();
+                }
+            }
+            public void afterScanning(Node n) throws RepositoryException {
+            }
+            public void done() {
+            }
+        });
+        gc.scan();
+        gc.stopScan();
+    }
+
     public void testGC() throws Exception {
         Node root = testRootNode;
         Session session = root.getSession();
