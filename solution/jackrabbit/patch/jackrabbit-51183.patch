diff --git a/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/NodeDefinitionTemplateImpl.java b/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/NodeDefinitionTemplateImpl.java
index ca0b823..9bb71a1 100644
--- a/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/NodeDefinitionTemplateImpl.java
+++ b/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/NodeDefinitionTemplateImpl.java
@@ -16,11 +16,19 @@
  */
 package org.apache.jackrabbit.spi.commons.nodetype;
 
+import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.QNodeDefinition;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import javax.jcr.nodetype.NodeDefinitionTemplate;
 
 import javax.jcr.RepositoryException;
+import javax.jcr.NamespaceException;
 import javax.jcr.nodetype.NodeDefinition;
 import javax.jcr.nodetype.NodeType;
+import javax.jcr.nodetype.ConstraintViolationException;
 
 /**
  * A <code>NodeDefinitionTemplateImpl</code> ...
@@ -29,53 +37,75 @@ class NodeDefinitionTemplateImpl
         extends AbstractItemDefinitionTemplate
         implements NodeDefinitionTemplate {
 
+    private static final Logger log = LoggerFactory.getLogger(NodeDefinitionTemplateImpl.class);
+
     private NodeType[] requiredPrimaryTypes;
-    private String[] requiredPrimaryTypeNames;
-    private String defaultPrimaryTypeName;
+    private Name[] requiredPrimaryTypeNames;
+    private Name defaultPrimaryTypeName;
     private boolean allowSameNameSiblings;
 
     /**
      * Package private constructor
      *
-     * @param ntBase
+     * @param resolver
      * @throws RepositoryException
      */
-    NodeDefinitionTemplateImpl(NodeType ntBase) throws RepositoryException {
-        requiredPrimaryTypes = new NodeType[] {ntBase};
-        requiredPrimaryTypeNames = new String[] {requiredPrimaryTypes[0].getName()};
+    NodeDefinitionTemplateImpl(NamePathResolver resolver) throws RepositoryException {
+        super(resolver);
+        requiredPrimaryTypes = null;
+        requiredPrimaryTypeNames = null;
     }
 
     /**
      * Package private constructor
      *
      * @param def
+     * @param resolver
+     * @throws javax.jcr.nodetype.ConstraintViolationException
      */
-    NodeDefinitionTemplateImpl(NodeDefinition def) {
-        super(def);
+    NodeDefinitionTemplateImpl(NodeDefinition def, NamePathResolver resolver) throws ConstraintViolationException {
+        super(def, resolver);
         requiredPrimaryTypes = def.getRequiredPrimaryTypes();
-        // FIXME temporary workaround until JSR 283 has been finalized
-        requiredPrimaryTypeNames = new String[requiredPrimaryTypes.length];
-        for (int i = 0; i < requiredPrimaryTypes.length; i++) {
-            requiredPrimaryTypeNames[i] = requiredPrimaryTypes[i].getName();
-        }
-        defaultPrimaryTypeName =
-                def.getDefaultPrimaryType() == null ? null : def.getDefaultPrimaryType().getName();
         allowSameNameSiblings = def.allowsSameNameSiblings();
+
+        if (def instanceof NodeDefinitionImpl) {
+            QNodeDefinition qDef = (QNodeDefinition) ((NodeDefinitionImpl) def).itemDef;
+            requiredPrimaryTypeNames = qDef.getRequiredPrimaryTypes();
+            defaultPrimaryTypeName = qDef.getDefaultPrimaryType();
+        } else {
+            setRequiredPrimaryTypeNames(def.getRequiredPrimaryTypeNames());
+            setDefaultPrimaryTypeName(def.getDefaultPrimaryTypeName());
+        }        
     }
 
     //-----------------------------------------------< NodeDefinitionTemplate >
     /**
      * {@inheritDoc}
      */
-    public void setRequiredPrimaryTypeNames(String[] requiredPrimaryTypeNames) {
-        this.requiredPrimaryTypeNames = requiredPrimaryTypeNames;
+    public void setRequiredPrimaryTypeNames(String[] requiredPrimaryTypeNames) throws ConstraintViolationException {
+        if (requiredPrimaryTypeNames == null) {
+            throw new ConstraintViolationException("null isn't a valid array of JCR names.");
+        } else {
+            this.requiredPrimaryTypeNames = new Name[requiredPrimaryTypeNames.length];
+            for (int i = 0; i < requiredPrimaryTypeNames.length; i++) {
+                try {
+                    this.requiredPrimaryTypeNames[i] = resolver.getQName(requiredPrimaryTypeNames[i]);
+                } catch (RepositoryException e) {
+                    throw new ConstraintViolationException(e);
+                }
+            }
+        }
     }
 
     /**
      * {@inheritDoc}
      */
-    public void setDefaultPrimaryTypeName(String defaultPrimaryType) {
-        this.defaultPrimaryTypeName = defaultPrimaryType;
+    public void setDefaultPrimaryTypeName(String defaultPrimaryType) throws ConstraintViolationException {
+        try {
+            this.defaultPrimaryTypeName = resolver.getQName(defaultPrimaryType);
+        } catch (RepositoryException e) {
+            throw new ConstraintViolationException(e);
+        }
     }
 
     /**
@@ -97,7 +127,21 @@ class NodeDefinitionTemplateImpl
      * {@inheritDoc}
      */
     public String[] getRequiredPrimaryTypeNames() {
-        return requiredPrimaryTypeNames;
+        if (requiredPrimaryTypeNames == null) {
+            return null;
+        } else {
+            String[] rptNames = new String[requiredPrimaryTypeNames.length];
+            for (int i = 0; i < requiredPrimaryTypeNames.length; i++) {
+                try {
+                    rptNames[i] = resolver.getJCRName(requiredPrimaryTypeNames[i]);
+                } catch (NamespaceException e) {
+                    // should never get here
+                    log.error("invalid node type name: " + requiredPrimaryTypeNames[i], e);
+                    rptNames[i] = requiredPrimaryTypeNames[i].toString();
+                }
+            }
+            return rptNames;
+        }
     }
 
     /**
@@ -111,7 +155,17 @@ class NodeDefinitionTemplateImpl
      * {@inheritDoc}
      */
     public String getDefaultPrimaryTypeName() {
-        return defaultPrimaryTypeName;
+        if (defaultPrimaryTypeName == null) {
+            return null;
+        } else {
+            try {
+                return resolver.getJCRName(defaultPrimaryTypeName);
+            } catch (NamespaceException e) {
+                // should never get here
+                log.error("encountered unregistered namespace in default primary type name", e);
+                return defaultPrimaryTypeName.toString();
+            }
+        }
     }
 
     /**
