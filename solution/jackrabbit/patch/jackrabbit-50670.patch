diff --git a/jackrabbit-spi2jcr/src/main/java/org/apache/jackrabbit/spi2jcr/QueryInfoImpl.java b/jackrabbit-spi2jcr/src/main/java/org/apache/jackrabbit/spi2jcr/QueryInfoImpl.java
index ac0711b..f0c34b3 100644
--- a/jackrabbit-spi2jcr/src/main/java/org/apache/jackrabbit/spi2jcr/QueryInfoImpl.java
+++ b/jackrabbit-spi2jcr/src/main/java/org/apache/jackrabbit/spi2jcr/QueryInfoImpl.java
@@ -27,16 +27,11 @@ import org.slf4j.LoggerFactory;
 
 import javax.jcr.query.QueryResult;
 import javax.jcr.query.Row;
-import javax.jcr.query.Query;
-import javax.jcr.query.qom.QueryObjectModel;
-import javax.jcr.query.qom.Source;
-import javax.jcr.query.qom.Join;
-import javax.jcr.query.qom.Selector;
 import javax.jcr.RepositoryException;
 import javax.jcr.RangeIterator;
 import java.util.NoSuchElementException;
 import java.util.List;
-import java.util.ArrayList;
+import java.util.Arrays;
 
 /**
  * <code>QueryInfoImpl</code> implements a <code>QueryInfo</code> based on a
@@ -82,7 +77,6 @@ class QueryInfoImpl implements QueryInfo {
     /**
      * Creates a new query info based on a given <code>result</code>.
      *
-     * @param query         the JCR query.
      * @param result        the JCR query result.
      * @param idFactory     the id factory.
      * @param resolver      the name path resolver.
@@ -90,8 +84,7 @@ class QueryInfoImpl implements QueryInfo {
      * @throws RepositoryException if an error occurs while reading from
      *                             <code>result</code>.
      */
-    public QueryInfoImpl(Query query,
-                         QueryResult result,
+    public QueryInfoImpl(QueryResult result,
                          IdFactoryImpl idFactory,
                          NamePathResolver resolver,
                          QValueFactory qValueFactory)
@@ -101,7 +94,7 @@ class QueryInfoImpl implements QueryInfo {
         this.resolver = resolver;
         this.qValueFactory = qValueFactory;
         this.columnNames = result.getColumnNames();
-        this.selectorNames = getSelectorNames(query, result, resolver);
+        this.selectorNames = getSelectorNames(result, resolver);
     }
 
     /**
@@ -136,39 +129,23 @@ class QueryInfoImpl implements QueryInfo {
         return names;
     }
 
-    private static Name[] getSelectorNames(Query query,
-                                           QueryResult result,
+    /**
+     * {@inheritDoc}
+     */
+    public Name[] getSelectorNames() {
+        Name[] names = new Name[selectorNames.length];
+        System.arraycopy(selectorNames, 0, names, 0, selectorNames.length);
+        return names;
+    }
+
+    private static Name[] getSelectorNames(QueryResult result,
                                            NamePathResolver resolver)
             throws RepositoryException {
-        List<String> sn = new ArrayList<String>();
-        if (query instanceof QueryObjectModel) {
-            QueryObjectModel qom = (QueryObjectModel) query;
-            collectSelectorNames(qom.getSource(), sn);
-        } else {
-            // TODO
-            // sn.addAll(Arrays.asList(result.getSelectorNames()));
-        }
+        List<String> sn = Arrays.asList(result.getSelectorNames());
         Name[] selectorNames = new Name[sn.size()];
         for (int i = 0; i < sn.size(); i++) {
             selectorNames[i] = resolver.getQName(sn.get(i));
         }
         return selectorNames;
     }
-
-    private static void collectSelectorNames(Source source, List<String> sn) {
-        if (source instanceof Join) {
-            collectSelectorNames((Join) source, sn);
-        } else {
-            collectSelectorNames((Selector) source, sn);
-        }
-    }
-
-    private static void collectSelectorNames(Join join, List<String> sn) {
-        collectSelectorNames(join.getLeft(), sn);
-        collectSelectorNames(join.getRight(), sn);
-    }
-
-    private static void collectSelectorNames(Selector s, List<String> sn) {
-        sn.add(s.getSelectorName());
-    }
 }
