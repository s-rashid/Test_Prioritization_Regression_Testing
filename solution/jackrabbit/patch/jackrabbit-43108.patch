diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/ACLTemplate.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/ACLTemplate.java
index 4dcaa7b..e5e45e5 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/ACLTemplate.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/acl/ACLTemplate.java
@@ -89,7 +89,7 @@ class ACLTemplate implements PolicyTemplate {
             throw new IllegalArgumentException("Node must be of type: " +
                     AccessControlConstants.NT_REP_ACL);
         }
-        path = aclNode.getPath();
+        path = aclNode.getParent().getPath();
         description = null;
         loadEntries(aclNode, principalNames);
     }
@@ -118,6 +118,14 @@ class ACLTemplate implements PolicyTemplate {
         PrivilegeRegistry.getBits(ace.getPrivileges());
     }
 
+    private List internalGetEntries() {
+        List l = new ArrayList();
+        for (Iterator it = entries.values().iterator(); it.hasNext();) {
+            l.addAll((List) it.next());
+        }
+        return l;
+    }
+
     private List internalGetEntries(Principal principal) {
         String principalName = principal.getName();
         if (entries.containsKey(principalName)) {
@@ -152,7 +160,6 @@ class ACLTemplate implements PolicyTemplate {
             if (entry.isAllow() == entries[i].isAllow()) {
                 // replace the existing entry with the new one at the end.
                 l.remove(i);
-                l.add(entry);
             } else {
                 complementEntry = t;
             }
@@ -170,8 +177,10 @@ class ACLTemplate implements PolicyTemplate {
                 l.remove(complementEntry);
                 ACEImpl tmpl = new ACEImpl(entry.getPrincipal(), resultPrivs, !entry.isAllow());
                 l.add(tmpl);
-            } /* else: complement entry is null or does not need to be modified.*/
+            } /* else: does not need to be modified.*/
         }
+        // finally add the new entry at the end.
+        l.add(entry);
         return true;
     }
 
@@ -282,17 +291,14 @@ class ACLTemplate implements PolicyTemplate {
      * @see PolicyTemplate#size()
      */
     public int size() {
-        return entries.size();
+        return internalGetEntries().size();
     }
 
     /**
      * @see PolicyTemplate#getEntries()
      */
     public PolicyEntry[] getEntries() {
-        List l = new ArrayList();
-        for (Iterator it = entries.values().iterator(); it.hasNext();) {
-            l.addAll((List) it.next());
-        }
+        List l = internalGetEntries();
         return (PolicyEntry[]) l.toArray(new PolicyEntry[l.size()]);
     }
