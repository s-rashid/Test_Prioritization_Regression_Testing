diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/data/FileDataStore.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/data/FileDataStore.java
index 7c0df09..43b57c7 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/data/FileDataStore.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/data/FileDataStore.java
@@ -104,7 +104,8 @@ public class FileDataStore implements DataStore {
     /**
      * All data identifiers that are currently in use are in this set until they are garbage collected.
      */
-    protected Map inUse = Collections.synchronizedMap(new WeakHashMap());
+    protected Map<DataIdentifier, WeakReference<DataIdentifier>> inUse = 
+        Collections.synchronizedMap(new WeakHashMap<DataIdentifier, WeakReference<DataIdentifier>>());
 
     /**
      * Creates a uninitialized data store.
@@ -165,7 +166,7 @@ public class FileDataStore implements DataStore {
     }
 
     private void usesIdentifier(DataIdentifier identifier) {
-        inUse.put(identifier, new WeakReference(identifier));
+        inUse.put(identifier, new WeakReference<DataIdentifier>(identifier));
     }
 
     /**
@@ -308,10 +309,10 @@ public class FileDataStore implements DataStore {
                 }
             }
         } else if (file.isDirectory()) {
-            File[] list = file.listFiles();
-            for (int i = 0; i < list.length; i++) {
-                count += deleteOlderRecursive(list[i], min);
+            for (File f: file.listFiles()) {
+                count += deleteOlderRecursive(f, min);
             }
+            
             // JCR-1396: FileDataStore Garbage Collector and empty directories
             // Automatic removal of empty directories (but not the root!)
             synchronized (this) {
@@ -323,14 +324,15 @@ public class FileDataStore implements DataStore {
         return count;
     }
 
-    private void listRecursive(List list, File file) {
-        File[] l = file.listFiles();
-        for (int i = 0; l != null && i < l.length; i++) {
-            File f = l[i];
-            if (f.isDirectory()) {
-                listRecursive(list, f);
-            } else {
-                list.add(f);
+    private void listRecursive(List<File> list, File file) {
+        File[] files = file.listFiles();
+        if (files != null) {
+            for (File f : files) {
+                if (f.isDirectory()) {
+                    listRecursive(list, f);
+                } else {
+                    list.add(f);
+                }
             }
         }
     }
@@ -338,12 +340,11 @@ public class FileDataStore implements DataStore {
     /**
      * {@inheritDoc}
      */
-    public Iterator getAllIdentifiers() {
-        ArrayList files = new ArrayList();
+    public Iterator<DataIdentifier> getAllIdentifiers() {
+        ArrayList<File> files = new ArrayList<File>();
         listRecursive(files, directory);
-        ArrayList identifiers = new ArrayList();
-        for (int i = 0; i < files.size(); i++) {
-            File f = (File) files.get(i);
+        ArrayList<DataIdentifier> identifiers = new ArrayList<DataIdentifier>();
+        for (File f: files) {
             String name = f.getName();
             if (!name.startsWith(TMP)) {
                 DataIdentifier id = new DataIdentifier(name);
