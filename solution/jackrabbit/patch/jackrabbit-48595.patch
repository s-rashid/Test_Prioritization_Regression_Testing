diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/PersistenceCopier.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/PersistenceCopier.java
index 9948a03..f7184fc 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/PersistenceCopier.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/PersistenceCopier.java
@@ -29,26 +29,62 @@ import org.apache.jackrabbit.core.state.PropertyState;
 import org.apache.jackrabbit.spi.Name;
 
 /**
- * 
+ * Tool for copying item states from one persistence manager to another.
+ * Used for backing up or migrating repository content.
+ *
+ * @since Apache Jackrabbit 1.6
  */
 public class PersistenceCopier {
 
+    /**
+     * Source persistence manager.
+     */
     private final PersistenceManager source;
 
+    /**
+     * Target persistence manager.
+     */
     private final PersistenceManager target;
 
+    /**
+     * Identifiers of the nodes that have already been copied or that
+     * should explicitly not be copied. Used to avoid duplicate copies
+     * of shareable nodes and to avoid trying to copy "missing" nodes
+     * like the virtual "/jcr:system" node.
+     */
     private final Set<NodeId> exclude = new HashSet<NodeId>();
 
+    /**
+     * Creates a tool for copying content from one persistence manager
+     * to another.
+     *
+     * @param source source persistence manager
+     * @param target target persistence manager
+     */
     public PersistenceCopier(
             PersistenceManager source, PersistenceManager target) {
         this.source = source;
         this.target = target;
     }
 
+    /**
+     * Explicitly exclude the identified node from being copied. Used for
+     * excluding virtual nodes like "/jcr:system" from the copy process.
+     *
+     * @param id identifier of the node to be excluded
+     */
     public void excludeNode(NodeId id) {
         exclude.add(id);
     }
 
+    /**
+     * Recursively copies the identified node and all its descendants.
+     * Explicitly excluded nodes and nodes that have already been copied
+     * are automatically skipped.
+     *
+     * @param id identifier of the node to be copied
+     * @throws ItemStateException if the copy operation fails
+     */
     public void copy(NodeId id) throws ItemStateException {
         if (!exclude.contains(id)) {
             NodeState node = source.load(id);
@@ -58,12 +94,21 @@ public class PersistenceCopier {
             }
 
             copy(node);
+            exclude.add(id);
         }
     }
 
+    /**
+     * Copies the given node state and all associated property states
+     * to the target persistence manager.
+     *
+     * @param sourceNode source node state
+     * @throws ItemStateException if the copy operation fails
+     */
     private void copy(NodeState sourceNode) throws ItemStateException {
         ChangeLog changes = new ChangeLog();
 
+        // Copy the node state
         NodeState targetNode = target.createNew(sourceNode.getNodeId());
         targetNode.setParentId(sourceNode.getParentId());
         targetNode.setDefinitionId(sourceNode.getDefinitionId());
@@ -77,6 +122,7 @@ public class PersistenceCopier {
             changes.added(targetNode);
         }
 
+        // Copy all associated property states
         for (Name name : sourceNode.getPropertyNames()) {
             PropertyId id = new PropertyId(sourceNode.getNodeId(), name);
             PropertyState sourceState = source.load(id);
@@ -93,6 +139,9 @@ public class PersistenceCopier {
             }
         }
 
+        // TODO: Copy node references?
+
+        // Persist the copied states
         target.store(changes);
     }
