diff --git a/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/util/TransientFileFactory.java b/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/util/TransientFileFactory.java
index 60e90ef..778b45a 100644
--- a/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/util/TransientFileFactory.java
+++ b/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/util/TransientFileFactory.java
@@ -45,18 +45,19 @@ public class TransientFileFactory {
      * Queue where <code>MoribundFileReference</code> instances will be enqueued
      * once the associated target <code>File</code> objects have been gc'ed.
      */
-    private ReferenceQueue phantomRefQueue = new ReferenceQueue();
+    private final ReferenceQueue<File> phantomRefQueue = new ReferenceQueue<File>();
 
     /**
      * Collection of <code>MoribundFileReference</code> instances currently
      * being tracked.
      */
-    private Collection trackedRefs = Collections.synchronizedList(new ArrayList());
+    private final Collection<MoribundFileReference> trackedRefs =
+        Collections.synchronizedList(new ArrayList<MoribundFileReference>());
 
     /**
      * The reaper thread responsible for removing files awaiting deletion
      */
-    private final Thread reaper;
+    private final ReaperThread reaper;
 
     /**
      * Shutdown hook which removes all files awaiting deletion
@@ -149,9 +150,8 @@ public class TransientFileFactory {
         // to avoid ConcurrentModificationException (JCR-549)
         // @see java.lang.util.Collections.synchronizedList(java.util.List)
         synchronized(trackedRefs) {
-            for (Iterator it = trackedRefs.iterator(); it.hasNext();) {
-                MoribundFileReference fileRef = (MoribundFileReference) it.next();
-                fileRef.delete();
+            for (Iterator<MoribundFileReference> it = trackedRefs.iterator(); it.hasNext();) {
+                it.next().delete();
             }
 
         }
@@ -163,7 +163,9 @@ public class TransientFileFactory {
                 // jvm shutdown sequence has already begun,
                 // silently ignore... 
             }
+            shutdownHook = null;
         }
+        reaper.stopWorking();
     }
 
     //--------------------------------------------------------< inner classes >
@@ -172,6 +174,8 @@ public class TransientFileFactory {
      */
     private class ReaperThread extends Thread {
 
+        private volatile boolean stopping = false;
+
         ReaperThread(String name) {
             super(name);
         }
@@ -181,11 +185,15 @@ public class TransientFileFactory {
          * marker objects are reclaimed by the garbage collector.
          */
         public void run() {
-            while (true) {
+            while (!stopping) {
                 MoribundFileReference fileRef = null;
                 try {
                     // wait until a MoribundFileReference is ready for deletion
                     fileRef = (MoribundFileReference) phantomRefQueue.remove();
+                } catch (InterruptedException e) {
+                    if (stopping) {
+                        break;
+                    }
                 } catch (Exception e) {
                     // silently ignore...
                     continue;
@@ -196,17 +204,25 @@ public class TransientFileFactory {
                 trackedRefs.remove(fileRef);
             }
         }
+
+        /**
+         * Stops the reaper thread.
+         */
+        public void stopWorking() {
+            stopping = true;
+            interrupt();
+        }
     }
 
     /**
      * Tracker object for a file pending deletion.
      */
-    private class MoribundFileReference extends PhantomReference {
+    private class MoribundFileReference extends PhantomReference<File> {
 
         /**
          * The full path to the file being tracked.
          */
-        private String path;
+        private final String path;
 
         /**
          * Constructs an instance of this class from the supplied parameters.
@@ -214,7 +230,7 @@ public class TransientFileFactory {
          * @param file  The file to be tracked.
          * @param queue The queue on to which the tracker will be pushed.
          */
-        MoribundFileReference(File file, ReferenceQueue queue) {
+        MoribundFileReference(File file, ReferenceQueue<File> queue) {
             super(file, queue);
             this.path = file.getPath();
         }
