diff --git a/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/util/ChildrenCollectorFilter.java b/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/util/ChildrenCollectorFilter.java
index 0a4069d..350ff7b 100644
--- a/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/util/ChildrenCollectorFilter.java
+++ b/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/util/ChildrenCollectorFilter.java
@@ -36,7 +36,9 @@ public class ChildrenCollectorFilter extends TraversingItemVisitor.Default {
     private final Collection children;
     private final boolean collectNodes;
     private final boolean collectProperties;
+    // namePattern and nameGlobs fields are used mutually exclusive
     private final String namePattern;
+    private final String[] nameGlobs;
 
     /**
      * Constructs a <code>ChildrenCollectorFilter</code>
@@ -46,7 +48,7 @@ public class ChildrenCollectorFilter extends TraversingItemVisitor.Default {
      * @param children          where the matching children should be added
      * @param collectNodes      true, if child nodes should be collected; otherwise false
      * @param collectProperties true, if child properties should be collected; otherwise false
-     * @param maxLevel          umber of hierarchy levels to traverse
+     * @param maxLevel          number of hierarchy levels to traverse
      *                          (e.g. 1 for direct children only, 2 for children and their children, and so on)
      */
     public ChildrenCollectorFilter(
@@ -54,6 +56,29 @@ public class ChildrenCollectorFilter extends TraversingItemVisitor.Default {
             boolean collectNodes, boolean collectProperties, int maxLevel) {
         super(false, maxLevel);
         this.namePattern = namePattern;
+        nameGlobs = null;
+        this.children = children;
+        this.collectNodes = collectNodes;
+        this.collectProperties = collectProperties;
+    }
+
+    /**
+     * Constructs a <code>ChildrenCollectorFilter</code>
+     *
+     * @param nameGlobs         an array of globbing strings which should be
+     *                          applied to the names of the children
+     * @param children          where the matching children should be added
+     * @param collectNodes      true, if child nodes should be collected; otherwise false
+     * @param collectProperties true, if child properties should be collected; otherwise false
+     * @param maxLevel          number of hierarchy levels to traverse
+     *                          (e.g. 1 for direct children only, 2 for children and their children, and so on)
+     */
+    public ChildrenCollectorFilter(
+            String[] nameGlobs, Collection children,
+            boolean collectNodes, boolean collectProperties, int maxLevel) {
+        super(false, maxLevel);
+        this.nameGlobs = nameGlobs;
+        namePattern = null;
         this.children = children;
         this.collectNodes = collectNodes;
         this.collectProperties = collectProperties;
@@ -65,8 +90,14 @@ public class ChildrenCollectorFilter extends TraversingItemVisitor.Default {
     protected void entering(Node node, int level)
             throws RepositoryException {
         if (level > 0 && collectNodes) {
-            if (matches(node.getName(), namePattern)) {
-                children.add(node);
+            if (namePattern != null) {
+                if (matches(node.getName(), namePattern)) {
+                    children.add(node);
+                }
+            } else {
+                if (matches(node.getName(), nameGlobs)) {
+                    children.add(node);
+                }
             }
         }
     }
@@ -77,8 +108,14 @@ public class ChildrenCollectorFilter extends TraversingItemVisitor.Default {
     protected void entering(Property property, int level)
             throws RepositoryException {
         if (level > 0 && collectProperties) {
-            if (matches(property.getName(), namePattern)) {
-                children.add(property);
+            if (namePattern != null) {
+                if (matches(property.getName(), namePattern)) {
+                    children.add(property);
+                }
+            } else {
+                if (matches(property.getName(), nameGlobs)) {
+                    children.add(property);
+                }
             }
         }
     }
@@ -110,6 +147,7 @@ public class ChildrenCollectorFilter extends TraversingItemVisitor.Default {
      *               ''', '"', '|' or any whitespace
      *               character *)
      * </pre>
+     * Note that leading and trailing whitespace around a pattern <i>is</i> ignored.
      *
      * @param name the name to test the pattern with
      * @param pattern the pattern to be matched against the name
@@ -130,6 +168,32 @@ public class ChildrenCollectorFilter extends TraversingItemVisitor.Default {
     }
 
     /**
+     * Matches the <code>nameGlob</code> strings in the passed array against
+     * the specified name.
+     * <p>
+     * A glob may be a full name or a partial name with one or more
+     * wildcard characters ("<code>*</code>").
+     * <p>
+     * Note that unlike in the case of the {@link #matches(String, String)}
+     * leading and trailing whitespace around a glob is <i>not</i> ignored.
+     *
+     * @param name the name to test the pattern with
+     * @param nameGlobs an array of globbing strings
+     * @return true if the specified name matches any of the globs
+     * @see javax.jcr.Node#getNodes(String[])
+     */
+    public static boolean matches(String name, String[] nameGlobs) {
+        for (int i = 0; i < nameGlobs.length; i++) {
+            // use globbing string as-is, i.e. don't trim any leading/trailing
+            // whitespace
+            if (internalMatches(name, nameGlobs[i], 0, 0)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
      * Internal helper used to recursively match the pattern
      *
      * @param s       The string to be tested
