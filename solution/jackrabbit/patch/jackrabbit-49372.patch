diff --git a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/qom/BindVariableValueTest.java b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/qom/BindVariableValueTest.java
index ed8c2ae..19969fa 100644
--- a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/qom/BindVariableValueTest.java
+++ b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/qom/BindVariableValueTest.java
@@ -17,11 +17,13 @@
 package org.apache.jackrabbit.test.api.query.qom;
 
 import java.util.Calendar;
+import java.math.BigDecimal;
 
 import javax.jcr.Node;
 import javax.jcr.RepositoryException;
 import javax.jcr.Value;
 import javax.jcr.ValueFactory;
+import javax.jcr.PropertyType;
 import javax.jcr.query.Query;
 import javax.jcr.query.qom.QueryObjectModelConstants;
 
@@ -40,6 +42,10 @@ public class BindVariableValueTest extends AbstractQOMTest {
 
     private static final Calendar DATE_VALUE = Calendar.getInstance();
 
+    private static final BigDecimal DECIMAL_VALUE = new BigDecimal(LONG_VALUE);
+
+    private static final String URI_VALUE = "http://example.com/";
+
     private Query query;
 
     private ValueFactory vf;
@@ -77,7 +83,7 @@ public class BindVariableValueTest extends AbstractQOMTest {
     public void testString() throws RepositoryException {
         Node n = testRootNode.addNode(nodeName1, testNodeType);
         n.setProperty(propertyName1, STRING_VALUE);
-        testRootNode.save();
+        superuser.save();
 
         bindVariableValue(query, "v", vf.createValue(STRING_VALUE));
         checkResult(query.execute(), new Node[]{n});
@@ -86,7 +92,7 @@ public class BindVariableValueTest extends AbstractQOMTest {
     public void testDate() throws RepositoryException {
         Node n = testRootNode.addNode(nodeName1, testNodeType);
         n.setProperty(propertyName1, DATE_VALUE);
-        testRootNode.save();
+        superuser.save();
 
         bindVariableValue(query, "v", vf.createValue(DATE_VALUE));
         checkResult(query.execute(), new Node[]{n});
@@ -95,7 +101,7 @@ public class BindVariableValueTest extends AbstractQOMTest {
     public void testLong() throws RepositoryException {
         Node n = testRootNode.addNode(nodeName1, testNodeType);
         n.setProperty(propertyName1, LONG_VALUE);
-        testRootNode.save();
+        superuser.save();
 
         bindVariableValue(query, "v", vf.createValue(LONG_VALUE));
         checkResult(query.execute(), new Node[]{n});
@@ -104,7 +110,7 @@ public class BindVariableValueTest extends AbstractQOMTest {
     public void testDouble() throws RepositoryException {
         Node n = testRootNode.addNode(nodeName1, testNodeType);
         n.setProperty(propertyName1, DOUBLE_VALUE);
-        testRootNode.save();
+        superuser.save();
 
         bindVariableValue(query, "v", vf.createValue(DOUBLE_VALUE));
         checkResult(query.execute(), new Node[]{n});
@@ -113,17 +119,17 @@ public class BindVariableValueTest extends AbstractQOMTest {
     public void testBoolean() throws RepositoryException {
         Node n = testRootNode.addNode(nodeName1, testNodeType);
         n.setProperty(propertyName1, BOOLEAN_VALUE);
-        testRootNode.save();
+        superuser.save();
 
         bindVariableValue(query, "v", vf.createValue(BOOLEAN_VALUE));
         checkResult(query.execute(), new Node[]{n});
     }
 
     public void testName() throws RepositoryException {
-        Value name = vf.createValue(STRING_VALUE);
+        Value name = vf.createValue(STRING_VALUE, PropertyType.NAME);
         Node n = testRootNode.addNode(nodeName1, testNodeType);
         n.setProperty(propertyName1, name);
-        testRootNode.save();
+        superuser.save();
 
         bindVariableValue(query, "v", name);
         checkResult(query.execute(), new Node[]{n});
@@ -131,9 +137,9 @@ public class BindVariableValueTest extends AbstractQOMTest {
 
     public void testPath() throws RepositoryException {
         Node n = testRootNode.addNode(nodeName1, testNodeType);
-        Value path = vf.createValue(n.getPath());
+        Value path = vf.createValue(n.getPath(), PropertyType.PATH);
         n.setProperty(propertyName1, path);
-        testRootNode.save();
+        superuser.save();
 
         bindVariableValue(query, "v", path);
         checkResult(query.execute(), new Node[]{n});
@@ -141,14 +147,14 @@ public class BindVariableValueTest extends AbstractQOMTest {
 
     public void testReference() throws RepositoryException {
         Node n = testRootNode.addNode(nodeName1, testNodeType);
-        testRootNode.save();
+        superuser.save();
 
         if (!n.isNodeType(mixReferenceable)) {
             n.addMixin(mixReferenceable);
-            n.save();
+            superuser.save();
         }
         n.setProperty(propertyName1, n);
-        n.save();
+        superuser.save();
 
 
         bindVariableValue(query, "v", vf.createValue(n));
@@ -156,14 +162,38 @@ public class BindVariableValueTest extends AbstractQOMTest {
     }
 
     public void testWeakReference() throws RepositoryException {
-        // TODO
+        Node n = testRootNode.addNode(nodeName1, testNodeType);
+        superuser.save();
+
+        if (!n.isNodeType(mixReferenceable)) {
+            n.addMixin(mixReferenceable);
+            superuser.save();
+        }
+        n.setProperty(propertyName1, vf.createValue(n, true));
+        superuser.save();
+
+
+        bindVariableValue(query, "v", vf.createValue(n, true));
+        checkResult(query.execute(), new Node[]{n});
     }
 
     public void testURI() throws RepositoryException {
-        // TODO
+        Value value = vf.createValue(URI_VALUE, PropertyType.URI);
+        Node n = testRootNode.addNode(nodeName1, testNodeType);
+        n.setProperty(propertyName1, value);
+        superuser.save();
+
+        bindVariableValue(query, "v", value);
+        checkResult(query.execute(), new Node[]{n});
     }
 
     public void testDecimal() throws RepositoryException {
-        // TODO
+        Value value = vf.createValue(DECIMAL_VALUE);
+        Node n = testRootNode.addNode(nodeName1, testNodeType);
+        n.setProperty(propertyName1, value);
+        superuser.save();
+
+        bindVariableValue(query, "v", value);
+        checkResult(query.execute(), new Node[]{n});
     }
 }
