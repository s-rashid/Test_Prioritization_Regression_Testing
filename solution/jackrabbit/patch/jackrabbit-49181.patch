diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/QueryObjectModelImpl.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/QueryObjectModelImpl.java
index 230ad25..c2e09b5 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/QueryObjectModelImpl.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/QueryObjectModelImpl.java
@@ -20,11 +20,8 @@ import java.util.List;
 import java.util.ArrayList;
 
 import javax.jcr.RepositoryException;
-import javax.jcr.UnsupportedRepositoryOperationException;
 import javax.jcr.nodetype.PropertyDefinition;
 import javax.jcr.query.QueryResult;
-import javax.jcr.query.qom.PropertyValue;
-import javax.jcr.query.qom.QueryObjectModelConstants;
 import javax.jcr.query.qom.QueryObjectModelFactory;
 
 import org.apache.jackrabbit.core.ItemManager;
@@ -35,14 +32,12 @@ import org.apache.jackrabbit.core.nodetype.PropertyDefinitionImpl;
 import org.apache.jackrabbit.core.query.PropertyTypeRegistry;
 import org.apache.jackrabbit.core.query.lucene.constraint.Constraint;
 import org.apache.jackrabbit.core.query.lucene.constraint.ConstraintBuilder;
-import org.apache.jackrabbit.spi.Path;
-import org.apache.jackrabbit.spi.commons.name.PathFactoryImpl;
 import org.apache.jackrabbit.spi.commons.query.qom.BindVariableValueImpl;
 import org.apache.jackrabbit.spi.commons.query.qom.ColumnImpl;
 import org.apache.jackrabbit.spi.commons.query.qom.DefaultTraversingQOMTreeVisitor;
-import org.apache.jackrabbit.spi.commons.query.qom.OrderingImpl;
 import org.apache.jackrabbit.spi.commons.query.qom.QueryObjectModelTree;
 import org.apache.jackrabbit.spi.commons.query.qom.SelectorImpl;
+import org.apache.jackrabbit.spi.commons.query.qom.OrderingImpl;
 
 /**
  * <code>QueryObjectModelImpl</code>...
@@ -118,7 +113,7 @@ public class QueryObjectModelImpl extends AbstractQueryImpl {
         // expand columns without name
         for (ColumnImpl column : qomTree.getColumns()) {
             if (column.getColumnName() == null) {
-                QueryObjectModelFactory qomFactory = session.getWorkspace().getQueryManager().getQOMFactory();
+                QueryObjectModelFactory qomFactory = getQOMFactory();
                 NodeTypeManagerImpl ntMgr = session.getNodeTypeManager();
                 SelectorImpl selector = qomTree.getSelector(column.getSelectorQName());
                 NodeTypeImpl nt = ntMgr.getNodeType(selector.getNodeTypeQName());
@@ -135,27 +130,12 @@ public class QueryObjectModelImpl extends AbstractQueryImpl {
             }
         }
         OrderingImpl[] orderings = qomTree.getOrderings();
-        // TODO: there are many kinds of DynamicOperand that can be ordered by
-        Path[] orderProps = new Path[orderings.length];
-        boolean[] orderSpecs = new boolean[orderings.length];
-        for (int i = 0; i < orderings.length; i++) {
-            orderSpecs[i] = 
-                QueryObjectModelConstants.JCR_ORDER_ASCENDING.equals(
-                        orderings[i].getOrder());
-            if (orderings[i].getOperand() instanceof PropertyValue) {
-                PropertyValue pv = (PropertyValue) orderings[i].getOperand();
-                orderProps[i] = PathFactoryImpl.getInstance().create(pv.getPropertyName());
-            } else {
-                throw new UnsupportedRepositoryOperationException("order by with" +
-                        orderings[i].getOperand() + " not yet implemented");
-            }
-        }
         return new MultiColumnQueryResult(index, itemMgr,
                 session, session.getAccessManager(),
                 // TODO: spell suggestion missing
                 this, query, null, columns.toArray(new ColumnImpl[columns.size()]),
-                orderProps, orderSpecs,
-                getRespectDocumentOrder(), offset, limit);
+                orderings, orderings.length == 0 && getRespectDocumentOrder(),
+                offset, limit);
     }
 
     //--------------------------< internal >------------------------------------
