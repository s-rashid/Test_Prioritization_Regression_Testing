diff --git a/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/AbstractMoveTreeTest.java b/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/AbstractMoveTreeTest.java
new file mode 100644
index 0000000..3d6c079
--- /dev/null
+++ b/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/AbstractMoveTreeTest.java
@@ -0,0 +1,79 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.jackrabbit.jcr2spi;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.apache.jackrabbit.test.AbstractJCRTest;
+
+import javax.jcr.Node;
+import javax.jcr.Property;
+import javax.jcr.RepositoryException;
+import javax.jcr.ItemExistsException;
+import javax.jcr.version.VersionException;
+import javax.jcr.nodetype.ConstraintViolationException;
+import javax.jcr.lock.LockException;
+
+/**
+ * <code>AbstractMoveTreeTest</code>...
+ */
+abstract class AbstractMoveTreeTest extends AbstractJCRTest {
+
+    private static Logger log = LoggerFactory.getLogger(AbstractMoveTreeTest.class);
+
+    protected Node childNode;
+    protected Node grandChildNode;
+    protected Property childProperty;
+
+    protected Node srcParentNode;
+    protected Node destParentNode;
+
+    protected String srcPath;
+    protected String destinationPath;
+
+    protected void setUp() throws Exception {
+        super.setUp();
+
+        srcParentNode = testRootNode.addNode(nodeName1, testNodeType);
+        Node moveNode = srcParentNode.addNode(nodeName2, testNodeType);
+        destParentNode = testRootNode.addNode(nodeName3, testNodeType);
+
+        srcPath = moveNode.getPath();
+        destinationPath = destParentNode.getPath() + "/" + nodeName4;
+
+        childProperty = moveNode.setProperty(propertyName2, "anyString");
+        childNode = moveNode.addNode(nodeName2, testNodeType);
+        grandChildNode = childNode.addNode(nodeName3, testNodeType);
+
+        doMove(moveNode.getPath(), destinationPath);
+    }
+
+    protected abstract boolean saveBeforeMove();
+
+    protected abstract boolean isSessionMove();
+
+    protected void doMove(String srcPath, String destPath) throws RepositoryException, LockException, ConstraintViolationException, ItemExistsException, VersionException {
+        if (saveBeforeMove()) {
+            testRootNode.save();
+        }
+        if (isSessionMove()) {
+            superuser.move(srcPath, destPath);
+        } else {
+            superuser.getWorkspace().move(srcPath, destPath);
+        }
+    }
+}
\ No newline at end of file
