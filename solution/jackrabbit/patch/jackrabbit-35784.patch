diff --git a/contrib/jackrabbit-jcr-mapping/jcr-mapping/src/test/java/org/apache/jackrabbit/ocm/manager/inheritance/ObjectContentManagerInheritanceConcreteClassTest.java b/contrib/jackrabbit-jcr-mapping/jcr-mapping/src/test/java/org/apache/jackrabbit/ocm/manager/inheritance/ObjectContentManagerInheritanceConcreteClassTest.java
index c1b2b6f..f00ab43 100644
--- a/contrib/jackrabbit-jcr-mapping/jcr-mapping/src/test/java/org/apache/jackrabbit/ocm/manager/inheritance/ObjectContentManagerInheritanceConcreteClassTest.java
+++ b/contrib/jackrabbit-jcr-mapping/jcr-mapping/src/test/java/org/apache/jackrabbit/ocm/manager/inheritance/ObjectContentManagerInheritanceConcreteClassTest.java
@@ -25,6 +25,7 @@ import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.jackrabbit.ocm.RepositoryLifecycleTestSetup;
 import org.apache.jackrabbit.ocm.TestBase;
+import org.apache.jackrabbit.ocm.exception.JcrMappingException;
 import org.apache.jackrabbit.ocm.manager.ObjectContentManager;
 import org.apache.jackrabbit.ocm.query.Filter;
 import org.apache.jackrabbit.ocm.query.Query;
@@ -32,9 +33,12 @@ import org.apache.jackrabbit.ocm.query.QueryManager;
 import org.apache.jackrabbit.ocm.testmodel.Atomic;
 import org.apache.jackrabbit.ocm.testmodel.inheritance.impl.CmsObjectImpl;
 import org.apache.jackrabbit.ocm.testmodel.inheritance.impl.ContentImpl;
+import org.apache.jackrabbit.ocm.testmodel.inheritance.impl.DocumentExtImpl;
 import org.apache.jackrabbit.ocm.testmodel.inheritance.impl.DocumentImpl;
 import org.apache.jackrabbit.ocm.testmodel.inheritance.impl.DocumentStream;
 import org.apache.jackrabbit.ocm.testmodel.inheritance.impl.FolderImpl;
+import org.apache.jackrabbit.ocm.testmodel.interfaces.CmsObject;
+import org.apache.jackrabbit.ocm.testmodel.interfaces.Folder;
 
 /**
  * Test inheritance with node type per concrete class (without  discreminator field)
@@ -63,7 +67,7 @@ public class ObjectContentManagerInheritanceConcreteClassTest extends TestBase {
 
 		cleanUpRepisotory();
 		super.tearDown();
-		
+
 	}
 
 
@@ -73,42 +77,42 @@ public class ObjectContentManagerInheritanceConcreteClassTest extends TestBase {
 			ObjectContentManager ocm = this.getObjectContentManager();
 
 			//---------------------------------------------------------------------------------------------------------
-			// Insert a  Document 
-			//---------------------------------------------------------------------------------------------------------			
+			// Insert a  Document
+			//---------------------------------------------------------------------------------------------------------
             DocumentImpl document = new DocumentImpl();
             document.setPath("/document1");
             document.setName("document name");
-            document.setContentType("plain/text"); 
+            document.setContentType("plain/text");
             DocumentStream documentStream = new DocumentStream();
             documentStream.setEncoding("utf-8");
             documentStream.setContent("Test Content".getBytes());
             document.setDocumentStream(documentStream);
-            
+
             ocm.insert(document);
 			ocm.save();
-			
-			
+
+
 			//---------------------------------------------------------------------------------------------------------
 			// Retrieve a document object
-			//---------------------------------------------------------------------------------------------------------						
+			//---------------------------------------------------------------------------------------------------------
 
 			document = (DocumentImpl) ocm.getObject( "/document1");
 			assertEquals("Document path is invalid", document.getPath(), "/document1");
 			assertEquals("Content type  is invalid", document.getContentType(), "plain/text");
 			assertNotNull("document stream is null", document.getDocumentStream());
 			assertTrue("Invalid document stream ", document.getDocumentStream().getEncoding().equals("utf-8"));
-			
-			
+
+
 			//---------------------------------------------------------------------------------------------------------
 			// Update  a descendant object
-			//---------------------------------------------------------------------------------------------------------						
+			//---------------------------------------------------------------------------------------------------------
 			document.setName("anotherName");
 			ocm.update(document);
 			ocm.save();
 
 			//---------------------------------------------------------------------------------------------------------
 			// Retrieve the updated descendant object
-			//---------------------------------------------------------------------------------------------------------						
+			//---------------------------------------------------------------------------------------------------------
 			document = (DocumentImpl) ocm.getObject( "/document1");
 			assertEquals("document name is incorrect", document.getName(), "anotherName");
 			assertEquals("Document path is invalid", document.getPath(), "/document1");
@@ -119,8 +123,8 @@ public class ObjectContentManagerInheritanceConcreteClassTest extends TestBase {
 			CmsObjectImpl cmsObject = (CmsObjectImpl) ocm.getObject( "/document1");
 			assertEquals("cmsObject name is incorrect", cmsObject.getName(), "anotherName");
 			assertEquals("cmsObject path is invalid", cmsObject.getPath(), "/document1");
-           			
-	
+
+
 		} catch (Exception e) {
 			e.printStackTrace();
 			fail();
@@ -128,68 +132,68 @@ public class ObjectContentManagerInheritanceConcreteClassTest extends TestBase {
 
 	}
 
-	
+
 	public void testRetrieveCollection() {
 		ObjectContentManager ocm = this.getObjectContentManager();
 
 		//---------------------------------------------------------------------------------------------------------
 		// Insert cmsobjects
-		//---------------------------------------------------------------------------------------------------------			
+		//---------------------------------------------------------------------------------------------------------
         DocumentImpl document = new DocumentImpl();
         document.setPath("/document1");
         document.setName("document name 1");
-        document.setContentType("plain/text"); 
+        document.setContentType("plain/text");
         DocumentStream documentStream = new DocumentStream();
         documentStream.setEncoding("utf-8");
         documentStream.setContent("Test Content".getBytes());
-        document.setDocumentStream(documentStream);        
+        document.setDocumentStream(documentStream);
         ocm.insert(document);
-        
+
         document = new DocumentImpl();
-        document.setPath("/document2");        
+        document.setPath("/document2");
         document.setName("document name 2");
-        document.setContentType("plain/text"); 
+        document.setContentType("plain/text");
         documentStream = new DocumentStream();
         documentStream.setEncoding("utf-8");
         documentStream.setContent("Test Content".getBytes());
-        document.setDocumentStream(documentStream);       
+        document.setDocumentStream(documentStream);
         ocm.insert(document);
 
         document = new DocumentImpl();
-        document.setPath("/document3");        
+        document.setPath("/document3");
         document.setName("document 3");
-        document.setContentType("plain/text"); 
+        document.setContentType("plain/text");
         documentStream = new DocumentStream();
         documentStream.setEncoding("utf-8");
         documentStream.setContent("Test Content 3".getBytes());
-        document.setDocumentStream(documentStream);       
+        document.setDocumentStream(documentStream);
         ocm.insert(document);
-        
+
         FolderImpl folder = new FolderImpl();
         folder.setPath("/folder1");
         folder.setName("folder1");
         ocm.insert(folder);
- 
 
-        document = new DocumentImpl();        
+
+        document = new DocumentImpl();
         document.setName("document4");
-        document.setContentType("plain/text"); 
+        document.setContentType("plain/text");
         documentStream = new DocumentStream();
         documentStream.setEncoding("utf-8");
         documentStream.setContent("Test Content 4".getBytes());
-        document.setDocumentStream(documentStream);       
+        document.setDocumentStream(documentStream);
 
         FolderImpl subFolder = new FolderImpl();
         subFolder.setName("subfolder");
-        
+
         folder = new FolderImpl();
         folder.setPath("/folder2");
-        folder.setName("folder2");        
+        folder.setName("folder2");
         folder.addChild(document);
         folder.addChild(subFolder);
-        ocm.insert(folder);               		
-        
-        
+        ocm.insert(folder);
+
+
 		Atomic a = new Atomic();
 		a.setPath("/atomic");
 		a.setBooleanPrimitive(true);
@@ -197,9 +201,9 @@ public class ObjectContentManagerInheritanceConcreteClassTest extends TestBase {
 
 		ocm.save();
 
-		//---------------------------------------------------------------------------------------------------------	
+		//---------------------------------------------------------------------------------------------------------
 		// Retrieve Folders found on the root level
-		//---------------------------------------------------------------------------------------------------------			
+		//---------------------------------------------------------------------------------------------------------
 		QueryManager queryManager = ocm.getQueryManager();
 		Filter filter = queryManager.createFilter(FolderImpl.class);
 		Query query = queryManager.createQuery(filter);
@@ -207,15 +211,15 @@ public class ObjectContentManagerInheritanceConcreteClassTest extends TestBase {
 		Collection result = ocm.getObjects(query);
 		assertEquals("Invalid number of folders found", result.size(), 2);
 		assertTrue("Invalid item in the collection", this.contains(result, "/folder1",FolderImpl.class));
-		assertTrue("Invalid item in the collection", this.contains(result, "/folder2", FolderImpl.class));		
-		
-	
-		//---------------------------------------------------------------------------------------------------------	
-		// Retrieve Documents 
-		//---------------------------------------------------------------------------------------------------------			
+		assertTrue("Invalid item in the collection", this.contains(result, "/folder2", FolderImpl.class));
+
+
+		//---------------------------------------------------------------------------------------------------------
+		// Retrieve Documents
+		//---------------------------------------------------------------------------------------------------------
 		queryManager = ocm.getQueryManager();
 		filter = queryManager.createFilter(DocumentImpl.class);
-		
+
 		filter.addLike("name", "document name%");
 		query = queryManager.createQuery(filter);
 
@@ -224,27 +228,27 @@ public class ObjectContentManagerInheritanceConcreteClassTest extends TestBase {
 		assertTrue("Invalid item in the collection", this.contains(result, "/document1", DocumentImpl.class));
 		assertTrue("Invalid item in the collection", this.contains(result, "/document2", DocumentImpl.class));
 
-		
-		//---------------------------------------------------------------------------------------------------------	
-		// Retrieve folder2 
-		//---------------------------------------------------------------------------------------------------------	
+
+		//---------------------------------------------------------------------------------------------------------
+		// Retrieve folder2
+		//---------------------------------------------------------------------------------------------------------
 		FolderImpl folder2 = (FolderImpl) ocm.getObject( "/folder2");
 		assertNotNull("folder 2 is null", folder2);
 		assertEquals("Invalid number of cms object  found in folder2 children", folder2.getChildren().size() ,2);
 		assertTrue("Invalid item in the collection", this.contains(folder2.getChildren(), "/folder2/document4", DocumentImpl.class));
 		assertTrue("Invalid item in the collection", this.contains(folder2.getChildren(), "/folder2/subfolder", FolderImpl.class));
-		
-		
+
+
 		CmsObjectImpl cmsObject = (CmsObjectImpl) ocm.getObject( "/folder2");
 		assertNotNull("folder 2 is null", cmsObject);
 		assertTrue("Invalid instance for folder 2",  cmsObject instanceof FolderImpl);
 		assertEquals("Invalid number of documents  found in folder2 children",  folder2.getChildren().size(),2);
 		assertTrue("Invalid item in the collection", this.contains(folder2.getChildren(), "/folder2/document4", DocumentImpl.class));
 		assertTrue("Invalid item in the collection", this.contains(folder2.getChildren(), "/folder2/subfolder", FolderImpl.class));
-		
-		//---------------------------------------------------------------------------------------------------------	
-		// Retrieve Contents (ancestor of Documents) 
-		//---------------------------------------------------------------------------------------------------------			
+
+		//---------------------------------------------------------------------------------------------------------
+		// Retrieve Contents (ancestor of Documents)
+		//---------------------------------------------------------------------------------------------------------
 		queryManager = ocm.getQueryManager();
 		filter = queryManager.createFilter(ContentImpl.class);
 		filter.addLike("name", "document name%");
@@ -254,11 +258,11 @@ public class ObjectContentManagerInheritanceConcreteClassTest extends TestBase {
 		assertEquals("Invalid number of documents  found", result.size(),2);
 		assertTrue("Invalid item in the collection", this.contains(result, "/document1", DocumentImpl.class));
 		assertTrue("Invalid item in the collection", this.contains(result, "/document2", DocumentImpl.class));
-		
-				
-		//---------------------------------------------------------------------------------------------------------	
+
+
+		//---------------------------------------------------------------------------------------------------------
 		// Retrieve all cmsobjects found on the root level
-		//---------------------------------------------------------------------------------------------------------					
+		//---------------------------------------------------------------------------------------------------------
 		queryManager = ocm.getQueryManager();
 		filter = queryManager.createFilter(CmsObjectImpl.class);
 		filter.setScope("/");
@@ -267,68 +271,68 @@ public class ObjectContentManagerInheritanceConcreteClassTest extends TestBase {
 		result = ocm.getObjects(query);
 		assertEquals("Invalid ancestor object found", result.size(),5);
 		assertTrue("Invalid item in the collection", this.contains(result, "/document1", DocumentImpl.class));
-		assertTrue("Invalid item in the collection", this.contains(result, "/document2", DocumentImpl.class));	
-		assertTrue("Invalid item in the collection", this.contains(result, "/document3", DocumentImpl.class));		
-		assertTrue("Invalid item in the collection", this.contains(result, "/folder1",FolderImpl.class));	
+		assertTrue("Invalid item in the collection", this.contains(result, "/document2", DocumentImpl.class));
+		assertTrue("Invalid item in the collection", this.contains(result, "/document3", DocumentImpl.class));
+		assertTrue("Invalid item in the collection", this.contains(result, "/folder1",FolderImpl.class));
 		assertTrue("Invalid item in the collection", this.contains(result, "/folder2",FolderImpl.class));
 
-		
-		//---------------------------------------------------------------------------------------------------------	
+
+		//---------------------------------------------------------------------------------------------------------
 		// Retrieve all cmsobjects found anywhere
-		//---------------------------------------------------------------------------------------------------------					
+		//---------------------------------------------------------------------------------------------------------
 		queryManager = ocm.getQueryManager();
-		filter = queryManager.createFilter(CmsObjectImpl.class);		
+		filter = queryManager.createFilter(CmsObjectImpl.class);
 		query = queryManager.createQuery(filter);
 
 		result = ocm.getObjects(query);
 		assertEquals("Invalid ancestor object found", result.size(),7);
 		assertTrue("Invalid item in the collection", this.contains(result, "/document1", DocumentImpl.class));
-		assertTrue("Invalid item in the collection", this.contains(result, "/document2", DocumentImpl.class));	
+		assertTrue("Invalid item in the collection", this.contains(result, "/document2", DocumentImpl.class));
 		assertTrue("Invalid item in the collection", this.contains(result, "/document3", DocumentImpl.class));
-		assertTrue("Invalid item in the collection", this.contains(result, "/folder2/document4", DocumentImpl.class));		
-		assertTrue("Invalid item in the collection", this.contains(result, "/folder1",FolderImpl.class));	
+		assertTrue("Invalid item in the collection", this.contains(result, "/folder2/document4", DocumentImpl.class));
+		assertTrue("Invalid item in the collection", this.contains(result, "/folder1",FolderImpl.class));
 		assertTrue("Invalid item in the collection", this.contains(result, "/folder2",FolderImpl.class));
 		assertTrue("Invalid item in the collection", this.contains(result, "/folder2/subfolder",FolderImpl.class));
-		
+
 	}
-	  
+
 	public void testBeanCollection() {
 		ObjectContentManager ocm = this.getObjectContentManager();
 
 		//---------------------------------------------------------------------------------------------------------
 		// Insert cmsobjects
 		//---------------------------------------------------------------------------------------------------------
-		 FolderImpl folder = new FolderImpl();		
+		 FolderImpl folder = new FolderImpl();
 	     folder.setPath("/mainfolder");
-	     folder.setName("Main folder");        
-	    
+	     folder.setName("Main folder");
+
 	     for (int i=1; i<=100;i++)
 	     {
-	         DocumentImpl document = new DocumentImpl();	        
+	         DocumentImpl document = new DocumentImpl();
 	         document.setName("document" + i);
-	         document.setContentType("plain/text"); 
+	         document.setContentType("plain/text");
 	         DocumentStream documentStream = new DocumentStream();
 	         documentStream.setEncoding("utf-8");
 	         documentStream.setContent("Test Content".getBytes());
 	         document.setDocumentStream(documentStream);
 	         folder.addChild(document);
-	         
+
 	         FolderImpl subFolder = new FolderImpl();
 	         subFolder.setName("folder" + i);
 	         subFolder.addChild(document);
 	         folder.addChild(subFolder);
-	         	    	 
+
 	     }
-	     log.debug("Save the folder and its 200 children");   
+	     log.debug("Save the folder and its 200 children");
 	     ocm.insert(folder);
 	     ocm.save();
 	     log.debug("End - Save the folder and its 200 children");
 
-		//---------------------------------------------------------------------------------------------------------	
+		//---------------------------------------------------------------------------------------------------------
 		// Retrieve Folder
-		//---------------------------------------------------------------------------------------------------------			
+		//---------------------------------------------------------------------------------------------------------
 		folder  = (FolderImpl) ocm.getObject("/mainfolder");
-		assertNotNull("Folder is null",folder);		
+		assertNotNull("Folder is null",folder);
 		Collection children = folder.getChildren();
 		assertEquals("Invalid number of children", children.size(), 200);
 	     for (int i=1; i<=100;i++)
@@ -336,7 +340,108 @@ public class ObjectContentManagerInheritanceConcreteClassTest extends TestBase {
 		     assertTrue("Invalid item in the collection : " +"/mainfolder/document" + i , this.contains(children, "/mainfolder/document" + i,DocumentImpl.class));
 		    assertTrue("Invalid item in the collection : " + "/mainfolder/folder" + i, this.contains(children, "/mainfolder/folder" + i, FolderImpl.class));
 	     }
-		
-	
-	}	
+
+
+	}
+
+
+	public void testRetrieveExtension() {
+
+	    try {
+	        ObjectContentManager ocm = this.getObjectContentManager();
+
+	        //---------------------------------------------------------------------------------------------------------
+	        // Insert a  Document
+	        //---------------------------------------------------------------------------------------------------------
+	        DocumentImpl document = new DocumentImpl();
+	        document.setPath("/document1");
+	        document.setName("document name");
+	        document.setContentType("plain/text");
+	        DocumentStream documentStream = new DocumentStream();
+	        documentStream.setEncoding("utf-8");
+	        documentStream.setContent("Test Content".getBytes());
+	        document.setDocumentStream(documentStream);
+
+	        ocm.insert(document);
+	        ocm.save();
+
+
+	        //---------------------------------------------------------------------------------------------------------
+	        // Retrieve a document object
+	        //---------------------------------------------------------------------------------------------------------
+
+	        CmsObject cmsObject = (CmsObject) ocm.getObject( CmsObject.class, "/document1" );
+	        assertNotNull("Document not loaded", cmsObject);
+	        assertTrue("Document of wrong type " + cmsObject.getClass().getName(), cmsObject instanceof DocumentImpl);
+
+	        document = (DocumentImpl) cmsObject;
+	        assertEquals("Document path is invalid", document.getPath(), "/document1");
+	        assertEquals("Content type  is invalid", document.getContentType(), "plain/text");
+	        assertNotNull("document stream is null", document.getDocumentStream());
+	        assertTrue("Invalid document stream ", document.getDocumentStream().getEncoding().equals("utf-8"));
+
+
+	        //---------------------------------------------------------------------------------------------------------
+	        // Retrieve a document object
+	        //---------------------------------------------------------------------------------------------------------
+
+	        try {
+	            Class clazz = Folder.class;
+	            cmsObject = (CmsObject) ocm.getObject( clazz, "/document1" );
+	            fail("Unexpected Mapping for DocumentImpl node to " + clazz);
+	        } catch (JcrMappingException jme) {
+	            // this is expected as class should not be acceptable
+	        }
+
+	    } catch (Exception e) {
+	        e.printStackTrace();
+	        fail();
+	    }
+
+	}
+
+
+    public void testRetrieveExtensionMissingExtends() {
+
+        try {
+            ObjectContentManager ocm = this.getObjectContentManager();
+
+            //---------------------------------------------------------------------------------------------------------
+            // Insert a  Document
+            //---------------------------------------------------------------------------------------------------------
+            DocumentExtImpl document = new DocumentExtImpl();
+            document.setPath("/document1");
+            document.setExtInfo("ext info");
+            document.setName("document name");
+            document.setContentType("plain/text");
+            DocumentStream documentStream = new DocumentStream();
+            documentStream.setEncoding("utf-8");
+            documentStream.setContent("Test Content".getBytes());
+            document.setDocumentStream(documentStream);
+
+            ocm.insert(document);
+            ocm.save();
+
+
+            //---------------------------------------------------------------------------------------------------------
+            // Retrieve a document object
+            //---------------------------------------------------------------------------------------------------------
+
+            CmsObject cmsObject = (CmsObject) ocm.getObject( CmsObject.class, "/document1" );
+            assertNotNull("Document not loaded", cmsObject);
+            assertTrue("Document of wrong type " + cmsObject.getClass().getName(), cmsObject instanceof DocumentExtImpl);
+
+            document = (DocumentExtImpl) cmsObject;
+            assertEquals("Document path is invalid", document.getPath(), "/document1");
+            assertEquals("Ext Info is invalid", document.getExtInfo(), "ext info");
+            assertEquals("Content type  is invalid", document.getContentType(), "plain/text");
+            assertNotNull("document stream is null", document.getDocumentStream());
+            assertTrue("Invalid document stream ", document.getDocumentStream().getEncoding().equals("utf-8"));
+
+        } catch (Exception e) {
+            e.printStackTrace();
+            fail();
+        }
+
+    }
 }
\ No newline at end of file
