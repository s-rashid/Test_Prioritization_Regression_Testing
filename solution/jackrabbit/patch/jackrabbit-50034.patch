diff --git a/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/compact/QNodeTypeDefinitionsBuilder.java b/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/compact/QNodeTypeDefinitionsBuilder.java
index 8643099..cb5c97e 100644
--- a/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/compact/QNodeTypeDefinitionsBuilder.java
+++ b/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/compact/QNodeTypeDefinitionsBuilder.java
@@ -18,6 +18,9 @@ package org.apache.jackrabbit.spi.commons.nodetype.compact;
 
 import javax.jcr.RepositoryException;
 import javax.jcr.ValueFormatException;
+import javax.jcr.nodetype.PropertyDefinition;
+import javax.jcr.nodetype.ItemDefinition;
+import javax.jcr.nodetype.NodeTypeDefinition;
 
 import org.apache.jackrabbit.spi.Name;
 import org.apache.jackrabbit.spi.QItemDefinition;
@@ -25,8 +28,10 @@ import org.apache.jackrabbit.spi.QNodeDefinition;
 import org.apache.jackrabbit.spi.QNodeTypeDefinition;
 import org.apache.jackrabbit.spi.QPropertyDefinition;
 import org.apache.jackrabbit.spi.QValue;
+import org.apache.jackrabbit.spi.QValueConstraint;
 import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
 import org.apache.jackrabbit.spi.commons.nodetype.InvalidConstraintException;
+import org.apache.jackrabbit.spi.commons.query.qom.Operator;
 
 /**
  * A builder for {@link QNodeTypeDefinition}s
@@ -44,10 +49,12 @@ public abstract class QNodeTypeDefinitionsBuilder {
      *
      * @param namespaceURI namespace uri
      * @param localName local part
+     * @return the created name
      * @throws IllegalArgumentException if <code>namespaceURI</code> or
      * <code>localName</code> is invalid.
      */
-    public abstract Name createName(String namespaceURI, String localName) throws IllegalArgumentException;
+    public abstract Name createName(String namespaceURI, String localName)
+            throws IllegalArgumentException;
 
     /**
      * A builder for a {@link QNodeTypeDefinition}
@@ -60,17 +67,22 @@ public abstract class QNodeTypeDefinitionsBuilder {
         private Name primaryItemName;
         private QPropertyDefinition[] propertyDefinitions;
         private QNodeDefinition[] childNodeDefinitions;
+        private boolean isAbstract;
+        private boolean isQueryable = true;
 
         /**
          * Set the name of the node type definition being built
-         * @param name
+         * @param name the name
+         * @see NodeTypeDefinition#getName()
          */
         public void setName(Name name) {
             this.name = name;
         }
 
         /**
-         * @return the name of the node type definition being built or <code>null</code> if not set.
+         * @return the name of the node type definition being built or
+         * <code>null</code> if not set.
+         * @see NodeTypeDefinition#getName()
          */
         public Name getName() {
             return name;
@@ -78,53 +90,64 @@ public abstract class QNodeTypeDefinitionsBuilder {
 
         /**
          * Specifies the supertypes of the node type definition being built
-         * @param supertypes
+         * @param supertypes the supertypes
+         * @see NodeTypeDefinition#getDeclaredSupertypeNames()
          */
         public void setSupertypes(Name[] supertypes) {
             this.supertypes = supertypes;
         }
 
         /**
-         * Returns an array containing the names of the supertypes of the node type definition being
-         * built.
+         * Returns an array containing the names of the supertypes of the node
+         * type definition being built.
          *
          * @return an array of supertype names
+         * @see NodeTypeDefinition#getDeclaredSupertypeNames()
          */
         public Name[] getSuperTypes() {
             return supertypes;
         }
 
         /**
-         * @param isMixin true if building a mixin node type definition; false otherwise.
+         * @param isMixin <code>true</code> if building a mixin node type
+         * definition; <code>false</code> otherwise.
+         * @see NodeTypeDefinition#isMixin()
          */
         public void setMixin(boolean isMixin) {
             this.isMixin = isMixin;
         }
 
         /**
-         * @return true if building a mixin node type definition; false otherwise.
+         * @return <code>true</code> if building a mixin node type definition;
+         * <code>false</code> otherwise.
+         * @see NodeTypeDefinition#isMixin()
          */
         public boolean getMixin() {
             return isMixin;
         }
 
         /**
-         * @param isOrderable true if building a node type having orderable child nodes; false
-         *                otherwise.
+         * @param isOrderable <code>true</code> if building a node type having
+         * orderable child nodes; <code>false</code> otherwise.
+         * @see NodeTypeDefinition#hasOrderableChildNodes()
          */
         public void setOrderableChildNodes(boolean isOrderable) {
             this.isOrderable = isOrderable;
         }
 
         /**
-         * @return true if building a node type having orderable child nodes; false otherwise.
+         * @return <code>true</code> if building a node type having orderable
+         * child nodes; <code>false</code> otherwise.
+         * @see NodeTypeDefinition#hasOrderableChildNodes()
          */
         public boolean getOrderableChildNodes() {
             return isOrderable;
         }
 
         /**
-         * @param primaryItemName  the name of the primary item or <code>null</code> if not set.
+         * @param primaryItemName the name of the primary item or
+         * <code>null</code> if not set.
+         * @see NodeTypeDefinition#getPrimaryItemName()
          */
         public void setPrimaryItemName(Name primaryItemName) {
             this.primaryItemName = primaryItemName;
@@ -132,14 +155,48 @@ public abstract class QNodeTypeDefinitionsBuilder {
 
         /**
          * @return the name of the primary item or <code>null</code> if not set.
+         * @see NodeTypeDefinition#getPrimaryItemName()
          */
         public Name getPrimaryItemName() {
             return primaryItemName;
         }
 
         /**
+         * @return <code>true</code> if the node type is abstract.
+         * @see NodeTypeDefinition#isAbstract()
+         */
+        public boolean getAbstract() {
+            return isAbstract;
+        }
+
+        /**
+         * @param isAbstract <code>true</code> if building a node type that is abstract.
+         * @see NodeTypeDefinition#isAbstract()
+         */
+        public void setAbstract(boolean isAbstract) {
+            this.isAbstract = isAbstract;
+        }
+
+        /**
+         * @return <code>true</code> if the node type is queryable
+         * @see NodeTypeDefinition#isQueryable()
+         */
+        public boolean getQueryable() {
+            return isQueryable;
+        }
+
+        /**
+         * @param queryable <code>true</code> if building a node type that is queryable
+         * @see NodeTypeDefinition#isQueryable()
+         */
+        public void setQueryable(boolean queryable) {
+            isQueryable = queryable;
+        }
+
+        /**
          * @param propDefs an array containing the property definitions of the node type definition
          *                being built.
+         * @see NodeTypeDefinition#getDeclaredPropertyDefinitions()
          */
         public void setPropertyDefs(QPropertyDefinition[] propDefs) {
             propertyDefinitions = propDefs;
@@ -148,6 +205,7 @@ public abstract class QNodeTypeDefinitionsBuilder {
         /**
          * @return an array containing the property definitions of the node type definition being
          *         built or <code>null</code> if not set.
+         * @see NodeTypeDefinition#getDeclaredPropertyDefinitions()
          */
         public QPropertyDefinition[] getPropertyDefs() {
             return propertyDefinitions;
@@ -156,6 +214,7 @@ public abstract class QNodeTypeDefinitionsBuilder {
         /**
          * @param childDefs an array containing the child node definitions of the node type
          *                definition being.
+         * @see NodeTypeDefinition#getDeclaredChildNodeDefinitions()
          */
         public void setChildNodeDefs(QNodeDefinition[] childDefs) {
             childNodeDefinitions = childDefs;
@@ -164,6 +223,7 @@ public abstract class QNodeTypeDefinitionsBuilder {
         /**
          * @return an array containing the child node definitions of the node type definition being
          *         built or <code>null</code> if not set.
+         * @see NodeTypeDefinition#getDeclaredChildNodeDefinitions()
          */
         public QNodeDefinition[] getChildNodeDefs() {
             return childNodeDefinitions;
@@ -202,6 +262,7 @@ public abstract class QNodeTypeDefinitionsBuilder {
 
         /**
          * @param name  the name of the child item definition being build
+         * @see ItemDefinition#getName()
          */
         public void setName(Name name) {
             this.name = name;
@@ -209,6 +270,7 @@ public abstract class QNodeTypeDefinitionsBuilder {
 
         /**
          * @return the name of the child item definition being build.
+         * @see ItemDefinition#getName()
          */
         public Name getName() {
             return name;
@@ -216,6 +278,7 @@ public abstract class QNodeTypeDefinitionsBuilder {
 
         /**
          * @param type  the name of the declaring node type.
+         * @see ItemDefinition#getDeclaringNodeType()
          */
         public void setDeclaringNodeType(Name type) {
             declaringType = type;
@@ -223,20 +286,25 @@ public abstract class QNodeTypeDefinitionsBuilder {
 
         /**
          * @return the name of the declaring node type.
+         * @see ItemDefinition#getDeclaringNodeType()
          */
         public Name getDeclaringNodeType() {
             return declaringType;
         }
 
         /**
-         * @param autocreate  true if building a 'autocreate' child item definition, false otherwise.
+         * @param autocreate <code>true</code> if building a 'autocreate' child item 
+         * definition, false otherwise.
+         * @see ItemDefinition#isAutoCreated()
          */
         public void setAutoCreated(boolean autocreate) {
             isAutocreated = autocreate;
         }
 
         /**
-         * @return true if building a 'autocreate' child item definition, false otherwise.
+         * @return <code>true</code> if building a 'autocreate' child item
+         * definition, false otherwise.
+         * @see ItemDefinition#isAutoCreated()
          */
         public boolean getAutoCreated() {
             return isAutocreated;
@@ -244,6 +312,7 @@ public abstract class QNodeTypeDefinitionsBuilder {
 
         /**
          * @param onParent the 'onParentVersion' attribute of the child item definition being built
+         * @see ItemDefinition#getOnParentVersion()
          */
         public void setOnParentVersion(int onParent) {
             onParentVersion = onParent;
@@ -251,34 +320,43 @@ public abstract class QNodeTypeDefinitionsBuilder {
 
         /**
          * @return the 'onParentVersion' attribute of the child item definition being built
+         * @see ItemDefinition#getOnParentVersion()
          */
         public int getOnParentVersion() {
             return onParentVersion;
         }
 
         /**
-         * @param isProtected true if building a 'protected' child item definition, false otherwise.
+         * @param isProtected <code>true</code> if building a 'protected' child
+         * item definition, false otherwise.
+         * @see ItemDefinition#isProtected()
          */
         public void setProtected(boolean isProtected) {
             this.isProtected = isProtected;
         }
 
         /**
-         * @return  true if building a 'protected' child item definition, false otherwise.
+         * @return <code>true</code> if building a 'protected' child item
+         * definition, false otherwise.
+         * @see ItemDefinition#isProtected()
          */
         public boolean getProtected() {
             return isProtected;
         }
 
         /**
-         * @param isMandatory true if building a 'mandatory' child item definition, false otherwise.
+         * @param isMandatory <code>true</code> if building a 'mandatory' child
+         * item definition, false otherwise.
+         * @see ItemDefinition#isMandatory()
          */
         public void setMandatory(boolean isMandatory) {
             this.isMandatory = isMandatory;
         }
 
         /**
-         * @return  true if building a 'mandatory' child item definition, false otherwise.
+         * @return <code>true</code> if building a 'mandatory' child item
+         * definition, false otherwise.
+         * @see ItemDefinition#isMandatory()
          */
         public boolean getMandatory() {
             return isMandatory;
@@ -286,16 +364,22 @@ public abstract class QNodeTypeDefinitionsBuilder {
     }
 
     /**
-     * A builder for a {@link QNodeDefinition}
+     * A builder for a {@link QPropertyDefinition}
+     * @see PropertyDefinition
      */
     public abstract class QPropertyDefinitionBuilder extends QItemDefinitionBuilder {
+
         private int requiredType;
-        private String[] valueConstraints;
+        private QValueConstraint[] valueConstraints;
         private QValue[] defaultValues;
         private boolean isMultiple;
+        private boolean fullTextSearchable = true;
+        private boolean queryOrderable = true;
+        private String[] queryOperators = Operator.getAllQueryOperators();
 
         /**
          * @param type the required type of the property definition being built.
+         * @see PropertyDefinition#getRequiredType()
          */
         public void setRequiredType(int type) {
             requiredType = type;
@@ -303,6 +387,7 @@ public abstract class QNodeTypeDefinitionsBuilder {
 
         /**
          * @return the required type of the property definition being built.
+         * @see PropertyDefinition#getRequiredType()
          */
         public int getRequiredType() {
             return requiredType;
@@ -310,20 +395,23 @@ public abstract class QNodeTypeDefinitionsBuilder {
 
         /**
          * @param constraints array of value constraints of the property definition being built.
+         * @see PropertyDefinition#getValueConstraints()
          */
-        public void setValueConstraints(String[] constraints) {
+        public void setValueConstraints(QValueConstraint[] constraints) {
             valueConstraints = constraints;
         }
 
         /**
          * @return array of value constraints of the property definition being built.
+         * @see PropertyDefinition#getValueConstraints()
          */
-        public String[] getValueConstraints() {
+        public QValueConstraint[] getValueConstraints() {
             return valueConstraints;
         }
 
         /**
          * @param values array of default values of the property definition being built.
+         * @see PropertyDefinition#getDefaultValues()
          */
         public void setDefaultValues(QValue[] values) {
             defaultValues = values;
@@ -332,6 +420,7 @@ public abstract class QNodeTypeDefinitionsBuilder {
         /**
          * @return array of default values of the property definition being built or
          *         <code>null</code> if no default values are defined.
+         * @see PropertyDefinition#getDefaultValues()
          */
         public QValue[] getDefaultValues() {
             return defaultValues;
@@ -339,6 +428,7 @@ public abstract class QNodeTypeDefinitionsBuilder {
 
         /**
          * @param isMultiple true if building a 'multiple' property definition.
+         * @see PropertyDefinition#isMultiple()
          */
         public void setMultiple(boolean isMultiple) {
             this.isMultiple = isMultiple;
@@ -346,30 +436,81 @@ public abstract class QNodeTypeDefinitionsBuilder {
 
         /**
          * @return true if building a 'multiple' property definition.
+         * @see PropertyDefinition#isMultiple()
          */
         public boolean getMultiple() {
             return isMultiple;
         }
 
         /**
+         * @return <code>true</code> if the property is fulltext searchable
+         * @see PropertyDefinition#isFullTextSearchable()
+         */
+        public boolean getFullTextSearchable() {
+            return fullTextSearchable;
+        }
+
+        /**
+         * @param fullTextSearchable <code>true</code> if building a
+         * 'fulltext searchable' property definition
+         * @see PropertyDefinition#isFullTextSearchable()
+         */
+        public void setFullTextSearchable(boolean fullTextSearchable) {
+            this.fullTextSearchable = fullTextSearchable;
+        }
+
+        /**
+         * @return <code>true</code> if the property is orderable in a query
+         * @see PropertyDefinition#isQueryOrderable()
+         */
+        public boolean getQueryOrderable() {
+            return queryOrderable;
+        }
+
+        /**
+         * @param queryOrderable <code>true</code> if the property is orderable
+         *        in a query
+         * @see PropertyDefinition#isQueryOrderable()
+         */
+        public void setQueryOrderable(boolean queryOrderable) {
+            this.queryOrderable = queryOrderable;
+        }
+
+        /**
+         * @return the query operators of the property
+         * @see PropertyDefinition#getAvailableQueryOperators()
+         */
+        public String[] getAvailableQueryOperators() {
+            return queryOperators;
+        }
+
+        /**
+         * @param queryOperators the query operators of the property
+         * @see PropertyDefinition#getAvailableQueryOperators()
+         */
+        public void setAvailableQueryOperators(String[] queryOperators) {
+            this.queryOperators = queryOperators;
+        }
+
+        /**
          * Validate the given <code>constraint</code> and resolve any prefixes.
          *
-         * @param constraint
-         * @param resolver
+         * @param constraint the contraint
+         * @param resolver the resolver
          * @return A syntactically valid value constrained which refers to
          * internal names and paths representations only.
          * @throws InvalidConstraintException if <code>constraint</code> cannot
          * be converted to a valid value constrained.
          */
-        public abstract String createValueConstraint(String constraint, NamePathResolver resolver)
+        public abstract QValueConstraint createValueConstraint(String constraint, NamePathResolver resolver)
                 throws InvalidConstraintException;
 
         /**
          * Create a new <code>QValue</code> for <code>value</code> of the type this instance
          * represents using the given <code>resolver</code>.
          *
-         * @param value
-         * @param resolver
+         * @param value the value
+         * @param resolver the resolver
          * @return a new <code>QValue</code>.
          * @throws ValueFormatException If the given <code>value</code> cannot be converted to the
          *                 specified <code>type</code>.
