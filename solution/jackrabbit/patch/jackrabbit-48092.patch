diff --git a/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/lock/LockManagerImpl.java b/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/lock/LockManagerImpl.java
index 3a8c891..2d0c267 100644
--- a/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/lock/LockManagerImpl.java
+++ b/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/lock/LockManagerImpl.java
@@ -73,8 +73,8 @@ public class LockManagerImpl implements LockStateManager, SessionListener {
 
     /**
      * Map holding all locks that where created by this <code>Session</code> upon
-     * calls to {@link LockManager#lock(NodeState,boolean,boolean)} or to
-     * {@link LockManager#getLock(NodeState)}. The map entries are removed
+     * calls to {@link LockStateManager#lock(NodeState,boolean,boolean)} or to
+     * {@link LockStateManager#getLock(NodeState)}. The map entries are removed
      * only if a lock ends his life by {@link Node#unlock()} or by implicit
      * unlock upon {@link Session#logout()}.
      */
@@ -132,16 +132,74 @@ public class LockManagerImpl implements LockStateManager, SessionListener {
         n.unlock();
     }
 
-    //---------------------< org.apache.jackrabbit.jcr2spi.lock.LockManager >---
     /**
-     * @see LockManager#lock(NodeState,boolean,boolean)
+     * Returns the lock tokens present on the <code>SessionInfo</code> this
+     * manager has been created with.
+     *
+     * @see javax.jcr.lock.LockManager#getLockTokens()
+     */
+    public String[] getLockTokens() {
+        return wspManager.getLockTokens();
+    }
+
+    /**
+     * Delegates this call to {@link WorkspaceManager#addLockToken(String)}.
+     * If this succeeds this method will inform all locks stored in the local
+     * map in order to give them the chance to update their lock information.
+     *
+     * @see javax.jcr.lock.LockManager#addLockToken(String)
+     */
+    public void addLockToken(String lt) throws LockException, RepositoryException {
+        wspManager.addLockToken(lt);
+        notifyTokenAdded(lt);
+    }
+
+    /**
+     * If the lock addressed by the token is session-scoped, this method will
+     * throw a LockException, such as defined by JSR170 v.1.0.1 for
+     * {@link Session#removeLockToken(String)}.<br>Otherwise the call is
+     * delegated to {@link WorkspaceManager#removeLockToken(String)}.
+     * All locks stored in the local lock map are notified by the removed
+     * token in order have them updated their lock information.
+     *
+     * @see javax.jcr.lock.LockManager#removeLockToken(String)
+     */
+    public void removeLockToken(String lt) throws LockException, RepositoryException {
+        // JSR170 v. 1.0.1 defines that the token of a session-scoped lock may
+        // not be moved over to another session. thus removal ist not possible
+        // and the lock is always present in the lock map.
+        Iterator it = lockMap.values().iterator();
+        boolean found = false;
+        // loop over cached locks to determine if the token belongs to a session
+        // scoped lock, in which case the removal must fail immediately.
+        while (it.hasNext() && !found) {
+            LockImpl l = (LockImpl) it.next();
+            if (lt.equals(l.getLockToken())) {
+                // break as soon as the lock associated with the given token was found.
+                found = true;
+                if (l.isSessionScoped()) {
+                    throw new LockException("Cannot remove lock token associated with a session scoped lock.");
+                }
+            }
+        }
+
+        // remove lock token from sessionInfo. call will fail, if the session
+        // is not lock holder.
+        wspManager.removeLockToken(lt);
+        // inform about this lt being removed from this session
+        notifyTokenRemoved(lt);
+    }
+
+    //----------------< org.apache.jackrabbit.jcr2spi.lock.LockStateManager >---
+    /**
+     * @see LockStateManager#lock(NodeState,boolean,boolean)
      */
     public Lock lock(NodeState nodeState, boolean isDeep, boolean isSessionScoped) throws LockException, RepositoryException {
         return lock(nodeState, isDeep, isSessionScoped, Long.MAX_VALUE, null);
     }
 
     /**
-     * @see LockManager#lock(NodeState,boolean,boolean,long,String)
+     * @see LockStateManager#lock(NodeState,boolean,boolean,long,String)
      */
     public Lock lock(NodeState nodeState, boolean isDeep, boolean isSessionScoped, long timeoutHint, String ownerHint) throws RepositoryException {
         // retrieve node first
@@ -164,8 +222,7 @@ public class LockManagerImpl implements LockStateManager, SessionListener {
     }
 
     /**
-     * @see LockManager#unlock(NodeState)
-     * @param nodeState
+     * @see LockStateManager#unlock(NodeState)
      */
     public void unlock(NodeState nodeState) throws LockException, RepositoryException {
         // execute the operation. Note, that its possible that the session is
@@ -190,7 +247,7 @@ public class LockManagerImpl implements LockStateManager, SessionListener {
      * Note, that the flag indicating session-scoped lock cannot be retrieved
      * unless the current session is the lock holder.
      *
-     * @see LockManager#getLock(NodeState)
+     * @see LockStateManager#getLock(NodeState)
      * @param nodeState
      */
     public Lock getLock(NodeState nodeState) throws LockException, RepositoryException {
@@ -206,8 +263,7 @@ public class LockManagerImpl implements LockStateManager, SessionListener {
     }
 
     /**
-     * @see LockManager#isLocked(NodeState)
-     * @param nodeState
+     * @see LockStateManager#isLocked(NodeState)
      */
     public boolean isLocked(NodeState nodeState) throws RepositoryException {
         LockImpl l = getLockImpl(nodeState, false);
@@ -215,8 +271,7 @@ public class LockManagerImpl implements LockStateManager, SessionListener {
     }
 
     /**
-     * @see LockManager#checkLock(NodeState)
-     * @param nodeState
+     * @see LockStateManager#checkLock(NodeState)
      */
     public void checkLock(NodeState nodeState) throws LockException, RepositoryException {
         // shortcut: new status indicates that a new state was already added
@@ -232,69 +287,8 @@ public class LockManagerImpl implements LockStateManager, SessionListener {
         } // else: state is not locked at all || session is lock-holder
     }
 
-    //--------< LockManager, org.apache.jackrabbit.jcr2spi.lock.LockManager >---
-    /**
-     * Returns the lock tokens present on the <code>SessionInfo</code> this
-     * manager has been created with.
-     *
-     * @see LockManager#getLockTokens()
-     */
-    public String[] getLockTokens() {
-        return wspManager.getLockTokens();
-    }
-
-    /**
-     * Delegates this call to {@link WorkspaceManager#addLockToken(String)}.
-     * If this succeeds this method will inform all locks stored in the local
-     * map in order to give them the chance to update their lock information.
-     *
-     * @see LockManager#addLockToken(String)
-     */
-    public void addLockToken(String lt) throws LockException, RepositoryException {
-        wspManager.addLockToken(lt);
-        notifyTokenAdded(lt);
-    }
-
-    /**
-     * If the lock addressed by the token is session-scoped, this method will
-     * throw a LockException, such as defined by JSR170 v.1.0.1 for
-     * {@link Session#removeLockToken(String)}.<br>Otherwise the call is
-     * delegated to {@link WorkspaceManager#removeLockToken(String)}.
-     * All locks stored in the local lock map are notified by the removed
-     * token in order have them updated their lock information.
-     *
-     * @see LockManager#removeLockToken(String)
-     */
-    public void removeLockToken(String lt) throws LockException, RepositoryException {
-        // JSR170 v. 1.0.1 defines that the token of a session-scoped lock may
-        // not be moved over to another session. thus removal ist not possible
-        // and the lock is always present in the lock map.
-        Iterator it = lockMap.values().iterator();
-        boolean found = false;
-        // loop over cached locks to determine if the token belongs to a session
-        // scoped lock, in which case the removal must fail immediately.
-        while (it.hasNext() && !found) {
-            LockImpl l = (LockImpl) it.next();
-            if (lt.equals(l.getLockToken())) {
-                // break as soon as the lock associated with the given token was found.
-                found = true;
-                if (l.isSessionScoped()) {
-                    throw new LockException("Cannot remove lock token associated with a session scoped lock.");
-                }
-            }
-        }
-
-        // remove lock token from sessionInfo. call will fail, if the session
-        // is not lock holder.
-        wspManager.removeLockToken(lt);
-        // inform about this lt being removed from this session
-        notifyTokenRemoved(lt);
-    }
-
     //----------------------------------------------------< SessionListener >---
     /**
-     *
-     * @param session
      * @see SessionListener#loggingOut(Session)
      */
     public void loggingOut(Session session) {
@@ -316,8 +310,6 @@ public class LockManagerImpl implements LockStateManager, SessionListener {
     }
 
     /**
-     *
-     * @param session
      * @see SessionListener#loggedOut(Session)
      */
     public void loggedOut(Session session) {
