diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/IndexNodeResolver.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/IndexNodeResolver.java
index 384f4ac..2bddded 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/IndexNodeResolver.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/user/IndexNodeResolver.java
@@ -95,7 +95,7 @@ class IndexNodeResolver extends NodeResolver {
      */
     private Query buildQuery(Name nodeName, Name ntName)
             throws RepositoryException {
-        StringBuffer stmt = new StringBuffer("/jcr:root");
+        StringBuilder stmt = new StringBuilder("/jcr:root");
         stmt.append(getSearchRoot(ntName));
         stmt.append("//element(");
         stmt.append(ISO9075.encode(getNamePathResolver().getJCRName(nodeName)));
@@ -118,7 +118,7 @@ class IndexNodeResolver extends NodeResolver {
     private Query buildQuery(String value, Set props, Name ntName,
                              boolean exact, long maxSize)
             throws RepositoryException {
-        StringBuffer stmt = new StringBuffer("/jcr:root");
+        StringBuilder stmt = new StringBuilder("/jcr:root");
         stmt.append(getSearchRoot(ntName));
         stmt.append("//element(*,");
         stmt.append(getNamePathResolver().getJCRName(ntName));
@@ -133,9 +133,15 @@ class IndexNodeResolver extends NodeResolver {
                 stmt.append((exact) ? "@" : "jcr:like(@");
                 String pName = getNamePathResolver().getJCRName((Name) itr.next());
                 stmt.append(ISO9075.encode(pName));
-                stmt.append((exact) ? "='" : ",'%");
-                stmt.append(value);
-                stmt.append((exact) ? "'" : "%')");
+                if (exact) {
+                    stmt.append("='");
+                    stmt.append(value);
+                    stmt.append("'");
+                } else {
+                    stmt.append(",'%");
+                    stmt.append(escapeForQuery(value));
+                    stmt.append("%')");
+                }
                 if (++i < props.size()) {
                     stmt.append(" or ");
                 }
@@ -146,4 +152,19 @@ class IndexNodeResolver extends NodeResolver {
         q.setLimit(maxSize);
         return q;
     }
+
+    private static String escapeForQuery(String value) {
+        StringBuilder ret = new StringBuilder();
+        for (int i = 0; i < value.length(); i++) {
+            char c = value.charAt(i);
+            if (c == '\\') {
+                ret.append("\\\\");
+            } else if (c == '\'') {
+                ret.append("\\'");
+            } else {
+                ret.append(c);
+            }
+        }
+        return ret.toString();
+    }
 }
