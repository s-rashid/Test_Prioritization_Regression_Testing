diff --git a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserManagerImplTest.java b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserManagerImplTest.java
new file mode 100644
index 0000000..cf50515
--- /dev/null
+++ b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserManagerImplTest.java
@@ -0,0 +1,347 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.jackrabbit.core.security.user;
+
+import org.apache.jackrabbit.api.security.user.Authorizable;
+import org.apache.jackrabbit.api.security.user.Group;
+import org.apache.jackrabbit.api.security.user.User;
+import org.apache.jackrabbit.core.NodeImpl;
+import org.apache.jackrabbit.core.security.TestPrincipal;
+import org.apache.jackrabbit.api.security.user.AbstractUserTest;
+import org.apache.jackrabbit.test.NotExecutableException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import javax.jcr.Credentials;
+import javax.jcr.RepositoryException;
+import javax.jcr.Value;
+import javax.jcr.nodetype.ConstraintViolationException;
+import java.security.Principal;
+import java.util.Iterator;
+import java.util.Set;
+
+/**
+ * <code>UserManagerImplTest</code>...
+ */
+public class UserManagerImplTest extends AbstractUserTest {
+
+    private static Logger log = LoggerFactory.getLogger(UserManagerImplTest.class);
+
+    protected void setUp() throws Exception {
+        super.setUp();
+        if (!(userMgr instanceof UserManagerImpl)) {
+            throw new NotExecutableException("UserManagerImpl expected -> cannot perform test.");
+        }
+    }
+
+    private String getTestUserId(Principal p) throws RepositoryException {
+        String hint = "UID" + p.getName();
+        String userId = hint;
+        int i = 0;
+        while (userMgr.getAuthorizable(userId) != null) {
+            userId = hint + i++;
+        }
+        return userId;
+    }
+
+    public void testCreateNodesDirectly() throws NotExecutableException, RepositoryException {
+        User u = getTestUser(superuser);
+        if (u instanceof UserImpl) {
+            throw new NotExecutableException();
+        }
+
+        NodeImpl n = ((UserImpl)u).getNode();
+        try {
+            n.addNode("anyname", "rep:AuthorizableFolder");
+            fail("security nodes must be protected.");
+        } catch (ConstraintViolationException e) {
+            // success
+        } finally {
+            n.refresh(false);
+        }
+        try {
+            n.addNode("anyname", "rep:User");
+            fail("security nodes must be protected.");
+        } catch (ConstraintViolationException e) {
+            // success
+        } finally {
+            n.refresh(false);
+        }
+        try {
+            n.setProperty("rep:userId", "someotherUID");
+            fail("security nodes must be protected.");
+        } catch (ConstraintViolationException e) {
+            // success
+        } finally {
+            n.refresh(false);
+        }
+    }
+
+
+    public void testRemoveUserRemovesTree() throws RepositoryException {
+        // create 2 new users. the second as child of the first.
+        Principal p = getTestPrincipal();
+        User u = userMgr.createUser(p.getName(), buildCredentials(p), p);
+        String uID = u.getID();
+        p = getTestPrincipal();
+        User u2 = userMgr.createUser(p.getName(), buildCredentials(p), p, ((UserImpl)u).getNode().getPath());
+        String u2ID = u2.getID();
+
+        // removing the first user must also remove the child-users.
+        u.remove();
+
+        // make sure both users are gone
+        assertNull(userMgr.getAuthorizable(uID));
+        assertNull(userMgr.getAuthorizable(u2ID));
+    }
+
+    public void testCreateUserWithInvalidCredentials() throws RepositoryException {
+        Principal p = getTestPrincipal();
+        try {
+            Credentials creds = new Credentials() {};
+            User u = userMgr.createUser(p.getName(), creds, p);
+            u.remove();
+            fail("creating a user with 'unknown' credentials must fail.");
+        } catch (RepositoryException e) {
+            // success
+        }
+    }
+
+    public void testCreateUserWithUserIDNotMatchingCredentials() throws RepositoryException {
+        Principal p = getTestPrincipal();
+        String uid = getTestUserId(p);
+        try {
+            User u = userMgr.createUser(uid, buildCredentials(p), p);
+            u.remove();
+            fail("creating a user with UserID not matching uid from credentials must fail.");
+        } catch (RepositoryException e) {
+            // success
+        }
+    }
+
+    public void testCreateUserIdEqualsUserId() throws RepositoryException {
+        Principal p = getTestPrincipal();
+        User u = null;
+        try {
+            u = userMgr.createUser(p.getName(), buildCredentials(p), p);
+
+            String msg = "Implementation specific: User.getID() must return the userID pass to createUser.";
+            assertEquals(msg, u.getID(), p.getName());
+        } finally {
+            if (u != null) {
+                u.remove();
+            }
+        }
+    }
+
+    public void testCreateUserIdDifferentFromPrincipalName() throws RepositoryException {
+        Principal p = getTestPrincipal();
+        String uid = getTestUserId(p);
+
+        User u = null;
+        try {
+            u = userMgr.createUser(uid, buildCredentials(uid, uid), p);
+
+            String msg = "Creating a User with principal-name distinct from Principal-name must succeed as long as both are unique.";
+            assertEquals(msg, u.getID(), uid);
+            assertEquals(msg, p.getName(), u.getPrincipal().getName());
+            assertFalse(msg, u.getID().equals(u.getPrincipal().getName()));
+        } finally {
+            if (u != null) {
+                u.remove();
+            }
+        }
+    }
+
+    public void testCreatingGroupWithNameMatchingExistingUserId() throws RepositoryException {
+        Principal p = getTestPrincipal();
+        String uid = getTestUserId(p);
+
+        User u = null;
+        Group gr = null;
+        try {
+            u = userMgr.createUser(uid, buildCredentials(uid, uid), p);
+            gr = userMgr.createGroup(new TestPrincipal(uid));
+
+            String msg = "Creating a Group with a principal-name that exists as UserID -> must create new GroupID but keep PrincipalName.";
+            assertFalse(msg, gr.getID().equals(gr.getPrincipal().getName()));
+            assertFalse(msg, gr.getID().equals(uid));
+            assertFalse(msg, gr.getID().equals(u.getID()));
+            assertEquals(msg, uid, gr.getPrincipal().getName());
+        } finally {
+            if (u != null) {
+                u.remove();
+            }
+            if (gr != null) {
+                gr.remove();
+            }
+        }
+    }
+
+    public void testFindAuthorizable() throws RepositoryException, NotExecutableException {
+        Authorizable auth;
+        Set principals = getPrincipalSetFromSession(superuser);
+        for (Iterator it = principals.iterator(); it.hasNext();) {
+            Principal p = (Principal) it.next();
+            auth = userMgr.getAuthorizable(p);
+
+            if (auth != null) {
+                if (!auth.isGroup() && auth.hasProperty("rep:userId")) {
+                    String val = auth.getProperty("rep:userId")[0].getString();
+                    Iterator users = userMgr.findAuthorizable("rep:userId", val);
+
+                    // the result must contain 1 authorizable
+                    assertTrue(users.hasNext());
+                    Authorizable first = (Authorizable) users.next();
+                    assertEquals(first.getID(), val);
+
+                    // since id is unique -> there should be no more auths in
+                    // the iterator left
+                    assertFalse(users.hasNext());
+                }
+            }
+        }
+    }
+
+    public void testFindAuthorizableByAddedProperty() throws RepositoryException {
+        Principal p = getTestPrincipal();
+        Authorizable auth = null;
+
+        try {
+            auth= userMgr.createGroup(p);
+            auth.setProperty("E-Mail", new Value[] { superuser.getValueFactory().createValue("anyVal")});
+
+            boolean found = false;
+            Iterator result = userMgr.findAuthorizable("E-Mail", "anyVal");
+            while (result.hasNext()) {
+                Authorizable a = (Authorizable) result.next();
+                if (a.getID().equals(auth.getID())) {
+                    found = true;
+                }
+            }
+
+            assertTrue(found);
+        } finally {
+            // remove the create group again.
+            if (auth != null) {
+                auth.remove();
+            }
+        }
+    }
+
+    public void testFindUser() throws RepositoryException {
+        User u = null;
+        try {
+            Principal p = getTestPrincipal();
+            String uid = "UID" + p.getName();
+            Credentials c = buildCredentials(uid, uid);
+            u = userMgr.createUser(uid, c, p);
+
+            boolean found = false;
+            Iterator it = ((UserManagerImpl)userMgr).findUsers("");
+            while (it.hasNext() && !found) {
+                User nu = (User) it.next();
+                found = nu.getID().equals(uid);
+            }
+            assertTrue("Searching for \"\" must find the created user.", found);
+
+            it = ((UserManagerImpl)userMgr).findUsers(p.getName());
+            found = false;
+            while (it.hasNext() && !found) {
+                User nu = (User) it.next();
+                found = nu.getPrincipal().getName().equals(p.getName());
+            }
+            assertTrue("Searching for principal-name must find the created user.", found);
+
+            it = ((UserManagerImpl)userMgr).findUsers(uid);
+            found = false;
+            while (it.hasNext() && !found) {
+                User nu = (User) it.next();
+                found = nu.getID().equals(uid);
+            }
+            assertTrue("Searching for user id must find the created user.", found);
+
+            // but search groups should not find anything
+            it = ((UserManagerImpl)userMgr).findGroups(uid);
+            assertFalse(it.hasNext());
+
+            it = ((UserManagerImpl)userMgr).findGroups("");
+            while (it.hasNext()) {
+                if (((Authorizable) it.next()).getPrincipal().getName().equals(p.getName())) {
+                    fail("Searching for Groups should never find a user");
+                }
+            }
+        } finally {
+            if (u != null) {
+                u.remove();
+            }
+        }
+    }
+
+    public void testFindGroup() throws RepositoryException {
+        Group gr = null;
+        try {
+            Principal p = getTestPrincipal();
+            gr = userMgr.createGroup(p);
+
+            boolean found = false;
+            Iterator it = ((UserManagerImpl)userMgr).findGroups("");
+            while (it.hasNext() && !found) {
+                Group ng = (Group) it.next();
+                found = ng.getPrincipal().getName().equals(p.getName());
+            }
+            assertTrue("Searching for \"\" must find the created group.", found);
+
+            it = ((UserManagerImpl)userMgr).findGroups(p.getName());
+            found = false;
+            while (it.hasNext() && !found) {
+                Group ng = (Group) it.next();
+                found = ng.getPrincipal().getName().equals(p.getName());
+            }
+            assertTrue("Searching for principal-name must find the created group.", found);
+
+            // but search users should not find anything
+            it = ((UserManagerImpl)userMgr).findUsers(p.getName());
+            assertFalse(it.hasNext());
+
+            it = ((UserManagerImpl)userMgr).findUsers("");
+            while (it.hasNext()) {
+                if (((Authorizable) it.next()).getPrincipal().getName().equals(p.getName())) {
+                    fail("Searching for Users should never find a group");
+                }
+            }
+        } finally {
+            if (gr != null) {
+                gr.remove();
+            }
+        }
+    }
+
+    public void testFindAllUsers() throws RepositoryException {
+        Iterator it = ((UserManagerImpl)userMgr).findUsers("");
+        while (it.hasNext()) {
+            assertFalse(((Authorizable) it.next()).isGroup());
+        }
+    }
+
+    public void testFindAllGroups() throws RepositoryException {
+        Iterator it = ((UserManagerImpl)userMgr).findGroups("");
+        while (it.hasNext()) {
+            assertTrue(((Authorizable) it.next()).isGroup());
+        }
+    }
+}
\ No newline at end of file
