diff --git a/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/uuid/VersionFourGenerator.java b/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/uuid/VersionFourGenerator.java
index 1464ceb..3a713bc 100644
--- a/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/uuid/VersionFourGenerator.java
+++ b/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/uuid/VersionFourGenerator.java
@@ -16,8 +16,6 @@
  */
 package org.apache.jackrabbit.uuid;
 
-import java.security.NoSuchAlgorithmException;
-import java.security.NoSuchProviderException;
 import java.security.SecureRandom;
 import java.util.Random;
 
@@ -30,7 +28,7 @@ import java.util.Random;
  * specification. This class attempts to use a java.security.SecureRandom with
  * the following instantiation
  * <code>SecureRandom.getInstance("SHA1PRNG", "SUN")</code>. If neither secure
- * random implementation is avialable or an Exception is raised a java.util.Random
+ * random implementation is available or an Exception is raised a java.util.Random
  * is used.</p>
  * <p>Note: Instantiation of SecureRandom is an expensive operation. The
  * constructor therefore creates a static member to hold the SecureRandom.
@@ -54,12 +52,22 @@ public final class VersionFourGenerator implements Constants {
     /**
      * Random used to generate UUID's
      */
-    private static final Random regularRandom = new Random();
+    private static Random regularRandom = new Random();
 
     /**
      * SecureRandom used to generate UUID's
      */
-    private static Random secureRandom;
+    private static SecureRandom secureRandom;
+    
+    /**
+     * Flag to indicate if the secureRandom instance was initialized
+     */
+    private static volatile boolean secureRandomSeeded;
+    
+    /**
+     * The maximum number of milliseconds to wait for the the initialization
+     */
+    private static final int MAX_SEED_TIME = 1000;
 
     /**
      * The pseudo-random number generator to use
@@ -79,12 +87,17 @@ public final class VersionFourGenerator implements Constants {
     }
 
     /**
-     * <p>Returns a new version four UUID.</p>
+     * Returns a new version four UUID.
+     * A cryptographically secure pseudorandom number generator 
+     * is used to generate the values (because otherwise the probability 
+     * of duplicates may be significantly higher).
+     * See also: https://issues.apache.org/jira/browse/JCR-1206
+     * and http://en.wikipedia.org/wiki/UUID
      *
      * @return Object a new version 4 UUID.
      */
-    public Object nextIdentifier() {
-        return nextUUID(false);
+    public UUID nextIdentifier() {
+        return nextUUID(true);
     }
 
     /**
@@ -96,12 +109,63 @@ public final class VersionFourGenerator implements Constants {
      * @param secure indicates whether or not to use <code>SecureRandom</code> in generating the random bits.
      * @return a new version four UUID that was generated by either a <code>Random</code> or <code>SecureRandom</code>.
      */
-    public Object nextIdentifier(boolean secure) {
+    public UUID nextIdentifier(boolean secure) {
         if (secure) {
             return nextUUID(true);
         }
         return nextUUID(false);
     }
+    
+    /**
+     * Initialize the secure random and seed it.
+     */
+    private static synchronized void initSecureRandom() {
+        if (secureRandom != null) {
+            return;
+        }
+        try {
+            if (usePRNGPackage != null) {
+                secureRandom = SecureRandom.getInstance(usePRNG, usePRNGPackage);
+            } else {
+                secureRandom = SecureRandom.getInstance(usePRNG);
+            }
+        } catch (Exception e) {
+            // Fall back to default SecureRandom
+            secureRandom = new SecureRandom();
+        }
+        // Can not do that in a static initializer block, because
+        // threads are not started after the initializer block exits
+        Thread t = new Thread() {
+            public void run() {
+                // Seed it with 32 bytes. May be slow on some systems,
+                // see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6202721
+                byte[] seed = secureRandom.generateSeed(32);
+                secureRandom.setSeed(seed);
+                secureRandomSeeded = true;
+            }
+        };
+        secureRandomSeeded = false;
+        t.start();
+        try {
+            t.join(MAX_SEED_TIME);
+        } catch (InterruptedException e) {
+            // ignore
+        }
+        if (!secureRandomSeeded) {
+            // Alternative seed algorithm if the default is very slow
+            secureRandom.setSeed(System.currentTimeMillis());
+            // Thread timing (a second thread is already running)
+            for (int j = 0; j < 16; j++) {
+                int i = 0;
+                long start = System.currentTimeMillis();
+                while (start == System.currentTimeMillis()) {
+                    i++;
+                }
+                // Supplement the existing seed
+                secureRandom.setSeed(i);
+            }
+        }
+    }
 
     /**
      * <p>Returns a new version four UUID using either <code>SecureRandom</code> or <code>Random</code>.</p>
@@ -112,24 +176,9 @@ public final class VersionFourGenerator implements Constants {
     private UUID nextUUID(boolean secure) {
         byte[] raw = new byte[UUID_BYTE_LENGTH];
         if (secure) {
-            //Initialize the secure random if null.
-            if (secureRandom == null) {
-                try {
-                    if (usePRNGPackage != null) {
-                        secureRandom = SecureRandom.getInstance(usePRNG, usePRNGPackage);
-                    } else {
-                        secureRandom = SecureRandom.getInstance(usePRNG);
-                    }
-                } catch (NoSuchAlgorithmException nsae) {
-                    secure = false; //Fail back to default PRNG/Random
-                } catch (NoSuchProviderException nspe) {
-                    secure = false; //Fail back to default PRNG/Random
-                }
-                secureRandom.nextBytes(raw);
-            }
-        }
-
-        if (!secure) {
+            initSecureRandom();
+            secureRandom.nextBytes(raw);
+        } else {
             regularRandom.nextBytes(raw);
         }
