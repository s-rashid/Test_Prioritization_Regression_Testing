diff --git a/jackrabbit-core/src/test/java/org/apache/jackrabbit/api/security/user/AuthorizableTest.java b/jackrabbit-core/src/test/java/org/apache/jackrabbit/api/security/user/AuthorizableTest.java
index 65a1528..0f0ef4b 100644
--- a/jackrabbit-core/src/test/java/org/apache/jackrabbit/api/security/user/AuthorizableTest.java
+++ b/jackrabbit-core/src/test/java/org/apache/jackrabbit/api/security/user/AuthorizableTest.java
@@ -93,6 +93,11 @@ public class AuthorizableTest extends AbstractUserTest {
         }
 
         try {
+            boolean found = false;
+            for (Iterator it = auth.getPropertyNames(); it.hasNext() && !found;) {
+                found = propName.equals(it.next().toString());
+            }
+            assertTrue(found);
             assertTrue(auth.hasProperty(propName));
             assertTrue(auth.getProperty(propName).length == 1);
             assertEquals(v, auth.getProperty(propName)[0]);
@@ -116,6 +121,11 @@ public class AuthorizableTest extends AbstractUserTest {
         }
 
         try {
+            boolean found = false;
+            for (Iterator it = auth.getPropertyNames(); it.hasNext() && !found;) {
+                found = propName.equals(it.next().toString());
+            }
+            assertTrue(found);
             assertTrue(auth.hasProperty(propName));
             assertEquals(Arrays.asList(v), Arrays.asList(auth.getProperty(propName)));
             assertTrue(auth.removeProperty(propName));
@@ -125,6 +135,30 @@ public class AuthorizableTest extends AbstractUserTest {
         }
     }
 
+    public void testGetPropertyNames() throws NotExecutableException, RepositoryException {
+        Authorizable auth = getTestUser(superuser);
+
+        // TODO: retrieve propname and value from config
+        String propName = "Fullname";
+        Value v = superuser.getValueFactory().createValue("Super User");
+        try {
+            auth.setProperty(propName, v);
+        } catch (RepositoryException e) {
+            throw new NotExecutableException("Cannot test 'Authorizable.setProperty'.");
+        }
+
+        try {
+            for (Iterator it = auth.getPropertyNames(); it.hasNext();) {
+                String name = it.next().toString();
+                assertTrue(auth.hasProperty(name));
+                assertNotNull(auth.getProperty(name));
+            }
+        } finally {
+            // try to remove the property again even if previous calls failed.
+            auth.removeProperty(propName);
+        }
+    }
+
     public void testGetNotExistingProperty() throws RepositoryException, NotExecutableException {
         Authorizable auth = getTestUser(superuser);
         String hint = "Fullname";
@@ -135,6 +169,7 @@ public class AuthorizableTest extends AbstractUserTest {
             i++;
         }
         assertNull(auth.getProperty(propName));
+        assertFalse(auth.hasProperty(propName));
     }
 
     public void testRemoveNotExistingProperty() throws RepositoryException, NotExecutableException {
