diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/NodeIteratorImpl.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/NodeIteratorImpl.java
index f01c562..8532662 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/NodeIteratorImpl.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/NodeIteratorImpl.java
@@ -23,19 +23,21 @@ import org.slf4j.LoggerFactory;
 
 import javax.jcr.Node;
 import javax.jcr.RepositoryException;
+import javax.jcr.NodeIterator;
+
 import java.util.NoSuchElementException;
 
 /**
  * Implements a {@link javax.jcr.NodeIterator} returned by
  * {@link javax.jcr.query.QueryResult#getNodes()}.
  */
-class NodeIteratorImpl implements ScoreNodeIterator {
+class NodeIteratorImpl implements NodeIterator {
 
     /** Logger instance for this class */
     private static final Logger log = LoggerFactory.getLogger(NodeIteratorImpl.class);
 
     /** The node ids of the nodes in the result set with their score value */
-    protected final ScoreNode[][] scoreNodes;
+    protected final ScoreNodeIterator scoreNodes;
 
     /** The index for the default selector withing {@link #scoreNodes} */
     private final int selectorIndex;
@@ -43,9 +45,6 @@ class NodeIteratorImpl implements ScoreNodeIterator {
     /** ItemManager to turn UUIDs into Node instances */
     protected final ItemManager itemMgr;
 
-    /** Current position in the UUID array */
-    protected int pos = -1;
-
     /** Number of invalid nodes */
     protected int invalid = 0;
 
@@ -53,21 +52,25 @@ class NodeIteratorImpl implements ScoreNodeIterator {
     private NodeImpl next;
 
     /**
+     * Whether this iterator had been initialized.
+     */
+    private boolean initialized;
+
+    /**
      * Creates a new <code>NodeIteratorImpl</code> instance.
      *
      * @param itemMgr       the <code>ItemManager</code> to turn UUIDs into
      *                      <code>Node</code> instances.
-     * @param scoreNodes    the node ids of the matching nodes.
+     * @param scoreNodes    iterator over score nodes.
      * @param selectorIndex the index for the default selector within
      *                      <code>scoreNodes</code>.
      */
     NodeIteratorImpl(ItemManager itemMgr,
-                     ScoreNode[][] scoreNodes,
+                     ScoreNodeIterator scoreNodes,
                      int selectorIndex) {
         this.itemMgr = itemMgr;
         this.scoreNodes = scoreNodes;
         this.selectorIndex = selectorIndex;
-        fetchNext();
     }
 
     /**
@@ -77,7 +80,13 @@ class NodeIteratorImpl implements ScoreNodeIterator {
      *   <code>Node</code>s.
      */
     public Node nextNode() throws NoSuchElementException {
-        return nextNodeImpl();
+        initialize();
+        if (next == null) {
+            throw new NoSuchElementException();
+        }
+        NodeImpl n = next;
+        fetchNext();
+        return n;
     }
 
     /**
@@ -87,41 +96,20 @@ class NodeIteratorImpl implements ScoreNodeIterator {
      *   <code>Node</code>s.
      */
     public Object next() throws NoSuchElementException {
+        initialize();
         return nextNode();
     }
 
     /**
-     * Returns the next <code>Node</code> in the result set.
-     *
-     * @return the next <code>Node</code> in the result set.
-     * @throws NoSuchElementException if iteration has no more <code>Node</code>s.
-     */
-    public NodeImpl nextNodeImpl() throws NoSuchElementException {
-        if (next == null) {
-            throw new NoSuchElementException();
-        }
-        NodeImpl n = next;
-        fetchNext();
-        return n;
-    }
-
-    /**
      * Skip a number of <code>Node</code>s in this iterator.
      * @param skipNum the non-negative number of <code>Node</code>s to skip
      * @throws NoSuchElementException
      *          if skipped past the last <code>Node</code> in this iterator.
      */
     public void skip(long skipNum) throws NoSuchElementException {
-        if (skipNum < 0) {
-            throw new IllegalArgumentException("skipNum must not be negative");
-        }
-        if ((pos + skipNum) > scoreNodes.length) {
-            throw new NoSuchElementException();
-        }
-        if (skipNum == 0) {
-            // do nothing
-        } else {
-            pos += skipNum - 1;
+        initialize();
+        if (skipNum > 0) {
+            scoreNodes.skip(skipNum - 1);
             fetchNext();
         }
     }
@@ -139,7 +127,12 @@ class NodeIteratorImpl implements ScoreNodeIterator {
      * @return the number of node in this iterator.
      */
     public long getSize() {
-        return scoreNodes.length - invalid;
+        long size = scoreNodes.getSize();
+        if (size == -1) {
+            return size;
+        } else {
+            return size - invalid;
+        }
     }
 
     /**
@@ -147,7 +140,14 @@ class NodeIteratorImpl implements ScoreNodeIterator {
      * @return the current position in this <code>NodeIterator</code>.
      */
     public long getPosition() {
-        return pos - invalid;
+        initialize();
+        long position = scoreNodes.getPosition() - invalid;
+        // scoreNode.getPosition() is one ahead
+        // if there is a prefetched node
+        if (next != null) {
+            position--;
+        }
+        return position;
     }
 
     /**
@@ -157,6 +157,7 @@ class NodeIteratorImpl implements ScoreNodeIterator {
      *  available; <code>false</code> otherwise.
      */
     public boolean hasNext() {
+        initialize();
         return next != null;
     }
 
@@ -168,26 +169,6 @@ class NodeIteratorImpl implements ScoreNodeIterator {
     }
 
     /**
-     * Returns the score of the node returned by {@link #nextNode()}. In other
-     * words, this method returns the score value of the next <code>Node</code>.
-     * @return the score of the node returned by {@link #nextNode()}.
-     * @throws NoSuchElementException if there is no next node.
-     */
-    public float getScore() throws NoSuchElementException {
-        if (!hasNext()) {
-            throw new NoSuchElementException();
-        }
-        return scoreNodes[pos][selectorIndex].getScore();
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public ScoreNode[] getScoreNodes() {
-        return scoreNodes[pos];
-    }
-
-    /**
      * Clears {@link #next} and tries to fetch the next Node instance.
      * When this method returns {@link #next} refers to the next available
      * node instance in this iterator. If {@link #next} is null when this
@@ -196,17 +177,23 @@ class NodeIteratorImpl implements ScoreNodeIterator {
     protected void fetchNext() {
         // reset
         next = null;
-        while (next == null && (pos + 1) < scoreNodes.length) {
+        while (next == null && scoreNodes.hasNext()) {
+            ScoreNode[] sn = scoreNodes.nextScoreNodes();
             try {
-                next = (NodeImpl) itemMgr.getItem(scoreNodes[pos + 1][selectorIndex].getNodeId());
+                next = (NodeImpl) itemMgr.getItem(sn[selectorIndex].getNodeId());
             } catch (RepositoryException e) {
                 log.warn("Exception retrieving Node with UUID: "
-                        + scoreNodes[pos + 1][selectorIndex].getNodeId() + ": " + e.toString());
+                        + sn[selectorIndex].getNodeId() + ": " + e.toString());
                 // try next
                 invalid++;
-                pos++;
             }
         }
-        pos++;
+    }
+
+    protected void initialize() {
+        if (!initialized) {
+            fetchNext();
+            initialized = true;
+        }
     }
 }
