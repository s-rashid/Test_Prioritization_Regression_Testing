diff --git a/jackrabbit-ocm-nodemanagement/src/test/java/org/apache/jackrabbit/ocm/nodemanagement/impl/jackrabbit/NodeTypeManagerImplTest.java b/jackrabbit-ocm-nodemanagement/src/test/java/org/apache/jackrabbit/ocm/nodemanagement/impl/jackrabbit/NodeTypeManagerImplTest.java
index 7f7b7df..d83a97d 100644
--- a/jackrabbit-ocm-nodemanagement/src/test/java/org/apache/jackrabbit/ocm/nodemanagement/impl/jackrabbit/NodeTypeManagerImplTest.java
+++ b/jackrabbit-ocm-nodemanagement/src/test/java/org/apache/jackrabbit/ocm/nodemanagement/impl/jackrabbit/NodeTypeManagerImplTest.java
@@ -40,12 +40,12 @@ import org.apache.jackrabbit.ocm.nodemanagement.impl.jackrabbit.NodeTypeManagerI
  * @author <a href="mailto:okiessler@apache.org">Oliver Kiessler</a>
  */
 public class NodeTypeManagerImplTest extends TestBase {
-    
+
     /** Class to test.
      */
     private NodeTypeManagerImpl jackrabbitNodeTypeManagerImpl
                 = new NodeTypeManagerImpl();
-    
+
     /** Returns testsuite.
      * @return suite
      */
@@ -59,12 +59,12 @@ public class NodeTypeManagerImplTest extends TestBase {
     {
         getJackrabbitNodeTypeManagerImpl().createNamespace(session,
                 "test", "http://www.test.com/test-uri");
-        
+
         assertEquals(session.getWorkspace().getNamespaceRegistry().getPrefix("http://www.test.com/test-uri"), "test");
         assertEquals(session.getWorkspace().getNamespaceRegistry().getURI("test"), "http://www.test.com/test-uri");
-        
+
         boolean failed = false;
-        
+
         try
         {
             getJackrabbitNodeTypeManagerImpl().createNamespace(session,
@@ -77,12 +77,12 @@ public class NodeTypeManagerImplTest extends TestBase {
         assertTrue(failed);
     }
 
-    
+
     public void testCreateNodeTypesFromConfiguration() throws Exception
     {
         getJackrabbitNodeTypeManagerImpl().createNodeTypesFromConfiguration(session,
                 new FileInputStream("./src/test/config/jackrabbit/nodetypes_test1.xml"));
-        
+
         NodeType test1 = session.getWorkspace().getNodeTypeManager().getNodeType("ocm:test1");
         assertNotNull(test1);
         assertFalse(test1.isMixin());
@@ -92,21 +92,21 @@ public class NodeTypeManagerImplTest extends TestBase {
         assertEquals(test1.getSupertypes()[0].getName(), "nt:base");
         assertTrue(containsPropertyDefintion(test1.getPropertyDefinitions(), "ocm:testProperty"));
     }
-    
+
     public void testCreateSingleNodeType() throws Exception
     {
         ClassDescriptor classDescriptor = new ClassDescriptor();
         classDescriptor.setClassName("test.TestClass");
         classDescriptor.setJcrType("ocm:test2");
         classDescriptor.setJcrSuperTypes("nt:base");
-        
+
         FieldDescriptor field1 = new FieldDescriptor();
         field1.setFieldName("a");
         field1.setJcrName("ocm:a");
         field1.setJcrType("String");
         field1.setJcrAutoCreated(true);
         field1.setJcrMandatory(true);
-        field1.setJcrMultiple(true);        
+        field1.setJcrMultiple(true);
         classDescriptor.addFieldDescriptor(field1);
 
         FieldDescriptor field2 = new FieldDescriptor();
@@ -115,11 +115,11 @@ public class NodeTypeManagerImplTest extends TestBase {
         field2.setJcrType("Long");
         field1.setJcrAutoCreated(false);
         field1.setJcrMandatory(true);
-        field1.setJcrMultiple(false);        
-        classDescriptor.addFieldDescriptor(field2);        
+        field1.setJcrMultiple(false);
+        classDescriptor.addFieldDescriptor(field2);
 
         getJackrabbitNodeTypeManagerImpl().createSingleNodeType(session, classDescriptor);
-        
+
         NodeType testNodeType = session.getWorkspace().getNodeTypeManager().getNodeType("ocm:test2");
         assertNotNull(testNodeType);
         assertFalse(testNodeType.isMixin());
@@ -129,21 +129,21 @@ public class NodeTypeManagerImplTest extends TestBase {
 
         // 2 defined in ocm:test2 and 2 inherited from nt:base
         assertEquals(testNodeType.getPropertyDefinitions().length, 4);
-        
+
         assertTrue(containsProperty("ocm:a", testNodeType.getPropertyDefinitions()));
         assertTrue(containsProperty("ocm:b", testNodeType.getPropertyDefinitions()));
         assertTrue(containsProperty("jcr:primaryType", testNodeType.getPropertyDefinitions()));
         assertTrue(containsProperty("jcr:mixinTypes", testNodeType.getPropertyDefinitions()));
-        
+
         PropertyDefinition propDef1 = getPropertyDefinition(testNodeType.getPropertyDefinitions(), "ocm:a");
         System.out.println(getJackrabbitNodeTypeManagerImpl().showPropertyDefinition(propDef1));
         // TODO test all properties
-        
+
         PropertyDefinition propDef2 = getPropertyDefinition(testNodeType.getPropertyDefinitions(), "ocm:b");
         System.out.println(getJackrabbitNodeTypeManagerImpl().showPropertyDefinition(propDef2));
         // TODO test all properties
     }
-    
+
     public void testCreateSingleNodeTypeNoNamespace() throws Exception
     {
         ClassDescriptor classDescriptor = new ClassDescriptor();
@@ -158,15 +158,15 @@ public class NodeTypeManagerImplTest extends TestBase {
         classDescriptor.addFieldDescriptor(field1);
 
         getJackrabbitNodeTypeManagerImpl().createSingleNodeType(session, classDescriptor);
-        
+
         NodeType test3 = session.getWorkspace().getNodeTypeManager().getNodeType("test3");
         assertNotNull(test3);
         assertFalse(test3.isMixin());
         assertEquals(test3.getName(), "test3");
         assertEquals(test3.getSupertypes().length, 1);
-        assertEquals(test3.getSupertypes()[0].getName(), "nt:base");        
+        assertEquals(test3.getSupertypes()[0].getName(), "nt:base");
     }
-    
+
     public void testCreateSingleNodeTypeNoJcrNodeTypeSet() throws Exception
     {
         ClassDescriptor classDescriptor = new ClassDescriptor();
@@ -180,28 +180,28 @@ public class NodeTypeManagerImplTest extends TestBase {
         classDescriptor.addFieldDescriptor(field1);
 
         getJackrabbitNodeTypeManagerImpl().createSingleNodeType(session, classDescriptor);
-        
+
         NodeType test4 = session.getWorkspace().getNodeTypeManager().getNodeType("test.Test4Class");
         assertNotNull(test4);
         assertFalse(test4.isMixin());
         assertEquals(test4.getName(), "test.Test4Class");
         assertEquals(test4.getSupertypes().length, 1);
-        assertEquals(test4.getSupertypes()[0].getName(), "nt:base");        
+        assertEquals(test4.getSupertypes()[0].getName(), "nt:base");
     }
-    
+
     public void testCreateSingleNodeTypeIncompleteFieldDescriptorProperties() throws Exception
     {
         ClassDescriptor classDescriptor = new ClassDescriptor();
         classDescriptor.setClassName("test.Test5Class");
         classDescriptor.setJcrType("ocm:test5");
         classDescriptor.setJcrSuperTypes("ocm:test2");
-        
+
         FieldDescriptor field1 = new FieldDescriptor();
         field1.setFieldName("abc");
         classDescriptor.addFieldDescriptor(field1);
 
         getJackrabbitNodeTypeManagerImpl().createSingleNodeType(session, classDescriptor);
-        
+
         NodeType test5 = session.getWorkspace().getNodeTypeManager().getNodeType("ocm:test5");
         assertNotNull(test5);
         assertFalse(test5.isMixin());
@@ -212,7 +212,7 @@ public class NodeTypeManagerImplTest extends TestBase {
         assertTrue(containsSuperType("nt:base", test5.getSupertypes()));
         assertTrue(containsProperty("abc", test5.getPropertyDefinitions()));
     }
-    
+
     public void testCreateSingleNodeTypeNtNamespace() throws Exception
     {
         ClassDescriptor classDescriptor = new ClassDescriptor();
@@ -225,9 +225,9 @@ public class NodeTypeManagerImplTest extends TestBase {
         field1.setJcrName("a");
         field1.setJcrType("String");
         classDescriptor.addFieldDescriptor(field1);
-        
+
         boolean failed = false;
-        
+
         try
         {
             getJackrabbitNodeTypeManagerImpl().createSingleNodeType(session, classDescriptor);
@@ -237,62 +237,62 @@ public class NodeTypeManagerImplTest extends TestBase {
             // excepted
             failed = true;
         }
-        
+
         assertTrue(failed);
     }
-    
+
     public void testCreateSingleNodeTypeWithPropertyForCollection() throws Exception
     {
         ClassDescriptor classDescriptor = new ClassDescriptor();
         classDescriptor.setClassName("test.Test9Class");
         classDescriptor.setJcrType("ocm:test9");
         classDescriptor.setJcrSuperTypes("nt:base");
-        
+
         CollectionDescriptor collection1 = new CollectionDescriptor();
         collection1.setFieldName("a");
         collection1.setJcrName("a");
         collection1.setJcrType("String");
-        
+
         classDescriptor.addCollectionDescriptor(collection1);
-        
+
         getJackrabbitNodeTypeManagerImpl().createSingleNodeType(session, classDescriptor);
-        
+
         NodeType test9 = session.getWorkspace().getNodeTypeManager().getNodeType("ocm:test9");
         assertNotNull(test9);
         // not check node type definition, assuming other tests have done that
-        
+
         // assert property definition a
         PropertyDefinition propDef = getPropertyDefinition(test9.getPropertyDefinitions(), "a");
         assertNotNull(propDef);
         assertEquals(propDef.getRequiredType(), PropertyType.STRING);
     }
-    
+
     public void testCreateSingleNodeTypeWithPropertyForBean() throws Exception
     {
         ClassDescriptor classDescriptor = new ClassDescriptor();
         classDescriptor.setClassName("test.Test10Class");
         classDescriptor.setJcrType("ocm:test10");
         classDescriptor.setJcrSuperTypes("nt:base");
-        
+
         BeanDescriptor bean1 = new BeanDescriptor();
         bean1.setFieldName("a");
         bean1.setJcrName("a");
         bean1.setJcrType("String");
         classDescriptor.addBeanDescriptor(bean1);
-        
+
         getJackrabbitNodeTypeManagerImpl().createSingleNodeType(session, classDescriptor);
-        
+
         NodeType test10 = session.getWorkspace().getNodeTypeManager().getNodeType("ocm:test10");
         assertNotNull(test10);
         // not check node type definition, assuming other tests have done that
-        
+
         // assert property definition a
         PropertyDefinition propDef = getPropertyDefinition(test10.getPropertyDefinitions(), "a");
         assertNotNull(propDef);
         assertEquals(propDef.getRequiredType(), PropertyType.STRING);
-        
+
     }
-    
+
     public void testCreateSingleNodeTypeWithPropertyForCollectionDefinitionConflict() throws Exception
     {
         ClassDescriptor classDescriptor = new ClassDescriptor();
@@ -303,21 +303,21 @@ public class NodeTypeManagerImplTest extends TestBase {
         CollectionDescriptor collection1 = new CollectionDescriptor();
         collection1.setFieldName("a");
         collection1.setJcrName("a");
-        collection1.setJcrType("String");            
+        collection1.setJcrType("String");
         classDescriptor.addCollectionDescriptor(collection1);
 
         getJackrabbitNodeTypeManagerImpl().createSingleNodeType(session, classDescriptor);
-        
+
         NodeType test13 = session.getWorkspace().getNodeTypeManager().getNodeType("ocm:test13");
         assertNotNull(test13);
         // not check node type definition, assuming other tests have done that
-        
+
         // assert property definition a
         PropertyDefinition propDef = getPropertyDefinition(test13.getPropertyDefinitions(), "a");
         assertNotNull(propDef);
         assertEquals(propDef.getRequiredType(), PropertyType.STRING);
     }
-    
+
     public void testCreateSingleNodeTypeWithPropertyForBeanDefinitionConflict() throws Exception
     {
         ClassDescriptor classDescriptor = new ClassDescriptor();
@@ -328,22 +328,22 @@ public class NodeTypeManagerImplTest extends TestBase {
         BeanDescriptor bean1 = new BeanDescriptor();
         bean1.setFieldName("a");
         bean1.setJcrName("a");
-        bean1.setJcrType("String");         
+        bean1.setJcrType("String");
         classDescriptor.addBeanDescriptor(bean1);
 
         getJackrabbitNodeTypeManagerImpl().createSingleNodeType(session, classDescriptor);
-        
+
         NodeType test14 = session.getWorkspace().getNodeTypeManager().getNodeType("ocm:test14");
         assertNotNull(test14);
         // not check node type definition, assuming other tests have done that
-        
+
         // assert property definition a
         PropertyDefinition propDef = getPropertyDefinition(test14.getPropertyDefinitions(), "a");
         assertNotNull(propDef);
         assertEquals(propDef.getRequiredType(), PropertyType.STRING);
 
     }
-    
+
     public void testCreateSingleNodeTypeWithChildNodeForCollection() throws Exception
     {
         ClassDescriptor classDescriptor = new ClassDescriptor();
@@ -358,11 +358,11 @@ public class NodeTypeManagerImplTest extends TestBase {
         classDescriptor.addCollectionDescriptor(collection1);
 
         getJackrabbitNodeTypeManagerImpl().createSingleNodeType(session, classDescriptor);
-        
+
         NodeType test11 = session.getWorkspace().getNodeTypeManager().getNodeType("ocm:test11");
         assertNotNull(test11);
         // not check node type definition, assuming other tests have done that
-        
+
         // assert child node definition a
         NodeDefinition nodeDef = getChildNodeDefinition(test11.getChildNodeDefinitions(), "b");
         assertNotNull(nodeDef);
@@ -370,7 +370,7 @@ public class NodeTypeManagerImplTest extends TestBase {
         assertEquals(nodeDef.getRequiredPrimaryTypes().length, 1);
         assertEquals(nodeDef.getRequiredPrimaryTypes()[0].getName(), "nt:unstructured");
     }
-    
+
     public void testCreateSingleNodeTypeWithChildNodeForBean() throws Exception
     {
         ClassDescriptor classDescriptor = new ClassDescriptor();
@@ -385,11 +385,11 @@ public class NodeTypeManagerImplTest extends TestBase {
         classDescriptor.addBeanDescriptor(bean1);
 
         getJackrabbitNodeTypeManagerImpl().createSingleNodeType(session, classDescriptor);
-        
+
         NodeType test12 = session.getWorkspace().getNodeTypeManager().getNodeType("ocm:test12");
         assertNotNull(test12);
         // not check node type definition, assuming other tests have done that
-        
+
         // assert property definition a
         NodeDefinition nodeDef = getChildNodeDefinition(test12.getChildNodeDefinitions(), "b");
         assertNotNull(nodeDef);
@@ -397,14 +397,14 @@ public class NodeTypeManagerImplTest extends TestBase {
         assertEquals(nodeDef.getRequiredPrimaryTypes().length, 1);
         assertEquals(nodeDef.getRequiredPrimaryTypes()[0].getName(), "nt:unstructured");
     }
-    
+
     public void testCreateNodeTypes() throws Exception
     {
         ClassDescriptor classDescriptor = new ClassDescriptor();
         classDescriptor.setClassName("test.Test6Class");
         classDescriptor.setJcrType("ocm:test6");
         classDescriptor.setJcrSuperTypes("nt:base");
-        
+
         FieldDescriptor field1 = new FieldDescriptor();
         field1.setFieldName("a");
         field1.setJcrName("ocm:a");
@@ -416,12 +416,12 @@ public class NodeTypeManagerImplTest extends TestBase {
         field2.setJcrName("ocm:b");
         field2.setJcrType("Long");
         classDescriptor.addFieldDescriptor(field2);
-        
+
         ClassDescriptor classDescriptor2 = new ClassDescriptor();
         classDescriptor2.setClassName("test.Test7Class");
         classDescriptor2.setJcrType("ocm:test7");
         classDescriptor2.setJcrSuperTypes("nt:base");
-        
+
         FieldDescriptor field3 = new FieldDescriptor();
         field3.setFieldName("a");
         field3.setJcrName("ocm:a");
@@ -433,20 +433,20 @@ public class NodeTypeManagerImplTest extends TestBase {
         field4.setJcrName("ocm:b");
         field4.setJcrType("Long");
         classDescriptor2.addFieldDescriptor(field4);
-        
+
         ClassDescriptor[] classDescriptorArray = new ClassDescriptor[2];
         classDescriptorArray[0] = classDescriptor;
         classDescriptorArray[1] = classDescriptor2;
-        
+
         getJackrabbitNodeTypeManagerImpl().createNodeTypes(session, classDescriptorArray);
-        
+
         NodeType test6 = session.getWorkspace().getNodeTypeManager().getNodeType("ocm:test6");
         assertNotNull(test6);
-        
+
         NodeType test7 = session.getWorkspace().getNodeTypeManager().getNodeType("ocm:test7");
         assertNotNull(test7);
     }
-    
+
     public void testRemoveSingleNodeType() throws Exception
     {
         ClassDescriptor classDescriptor = new ClassDescriptor();
@@ -461,25 +461,25 @@ public class NodeTypeManagerImplTest extends TestBase {
         classDescriptor.addFieldDescriptor(field1);
 
         getJackrabbitNodeTypeManagerImpl().createSingleNodeType(session, classDescriptor);
-        
+
         NodeType test8 = session.getWorkspace().getNodeTypeManager().getNodeType("ocm:test8");
         assertNotNull(test8);
         // not implemented yet in jackrabbit
-        // getJackrabbitNodeTypeManagerImpl().removeSingleNodeType(session, "ocm:test8");    
-    }    
+        // getJackrabbitNodeTypeManagerImpl().removeSingleNodeType(session, "ocm:test8");
+    }
 
     /** Returns true if a given property is found in an array of property
      * definitions.
-     * 
+     *
      * @param propertyName Name of property to find
      * @param propDefs Properties of a node type
-     * @return true/false 
+     * @return true/false
      */
     protected boolean containsProperty(String propertyName,
         PropertyDefinition[] propDefs)
     {
         boolean found = false;
-        
+
         for (int i = 0; i < propDefs.length; i++)
         {
             if (propDefs[i].getName().equals(propertyName))
@@ -488,12 +488,12 @@ public class NodeTypeManagerImplTest extends TestBase {
                 break;
             }
         }
-        
+
         return found;
     }
-    
+
     /** Returns a property defintion identified by its name.
-     * 
+     *
      * @param propDefs All property definitions of a node type
      * @param propertyName Name of property definition
      * @return found
@@ -502,7 +502,7 @@ public class NodeTypeManagerImplTest extends TestBase {
         String propertyName)
     {
         PropertyDefinition found = null;
-        
+
         for (int i = 0; i < propDefs.length; i++)
         {
             if (propDefs[i].getName().equals(propertyName))
@@ -511,22 +511,22 @@ public class NodeTypeManagerImplTest extends TestBase {
                 break;
             }
         }
-        
+
         return found;
     }
-    
+
     /** Returns true if a given child node is found in an array of child node
      * definitions.
-     * 
+     *
      * @param childNodeName Name of child node to find
      * @param childNodeDefs Child nodes of a node type
-     * @return true/false 
+     * @return true/false
      */
     protected boolean containsChildNode(String childNodeName,
             NodeDefinition[] childNodeDefs)
     {
         boolean found = false;
-        
+
         for (int i = 0; i < childNodeDefs.length; i++)
         {
            if (childNodeDefs[i].getName().equals(childNodeName))
@@ -538,9 +538,9 @@ public class NodeTypeManagerImplTest extends TestBase {
 
         return found;
     }
-    
+
     /** Returns a property defintion identified by its name.
-     * 
+     *
      * @param childNodeDefs Child nodes of a node type
      * @param childNodeName Name of child node to find
      * @return found
@@ -549,7 +549,7 @@ public class NodeTypeManagerImplTest extends TestBase {
             String childNodeName)
     {
         NodeDefinition found = null;
-        
+
         for (int i = 0; i < childNodeDefs.length; i++)
         {
            if (childNodeDefs[i].getName().equals(childNodeName))
@@ -561,18 +561,18 @@ public class NodeTypeManagerImplTest extends TestBase {
 
         return found;
     }
-    
+
     /** Returns true if a given super type is found in an arry of super types.
-     * 
+     *
      * @param superType Name of super type to find
      * @param propDefs Properties of a node type
-     * @return true/false 
+     * @return true/false
      */
     protected boolean containsSuperType(String superType,
             NodeType[] nodeTypes)
     {
         boolean found = false;
-        
+
         for (int i = 0; i < nodeTypes.length; i++)
         {
            if (nodeTypes[i].getName().equals(superType))
@@ -583,10 +583,10 @@ public class NodeTypeManagerImplTest extends TestBase {
         }
 
         return found;
-    }    
-    
+    }
+
     /** Getter for property jackrabbitNodeTypeManagerImpl.
-     * 
+     *
      * @return jackrabbitNodeTypeManagerImpl
      */
     public NodeTypeManagerImpl getJackrabbitNodeTypeManagerImpl()
@@ -595,7 +595,7 @@ public class NodeTypeManagerImplTest extends TestBase {
     }
 
     /** Setter for property jackrabbitNodeTypeManagerImpl.
-     * 
+     *
      * @param object jackrabbitNodeTypeManagerImpl
      */
     public void setJackrabbitNodeTypeManagerImpl(NodeTypeManagerImpl object)
