diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/db/DatabasePersistenceManager.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/db/DatabasePersistenceManager.java
index e9b3310..f7cc855 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/db/DatabasePersistenceManager.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/db/DatabasePersistenceManager.java
@@ -31,7 +31,6 @@ import org.apache.jackrabbit.core.state.ItemState;
 import org.apache.jackrabbit.core.state.ItemStateException;
 import org.apache.jackrabbit.core.state.NoSuchItemStateException;
 import org.apache.jackrabbit.core.state.NodeReferences;
-import org.apache.jackrabbit.core.id.NodeReferencesId;
 import org.apache.jackrabbit.core.state.NodeState;
 import org.apache.jackrabbit.core.state.PropertyState;
 import org.apache.jackrabbit.core.value.InternalValue;
@@ -560,7 +559,7 @@ public abstract class DatabasePersistenceManager extends AbstractPersistenceMana
     /**
      * {@inheritDoc}
      */
-    public NodeReferences load(NodeReferencesId targetId)
+    public NodeReferences loadReferencesTo(NodeId targetId)
             throws NoSuchItemStateException, ItemStateException {
         if (!initialized) {
             throw new IllegalStateException("not initialized");
@@ -612,7 +611,7 @@ public abstract class DatabasePersistenceManager extends AbstractPersistenceMana
         }
 
         // check if insert or update
-        boolean update = exists(refs.getId());
+        boolean update = existsReferencesTo(refs.getTargetId());
         String sql = (update) ? nodeReferenceUpdateSQL : nodeReferenceInsertSQL;
 
         try {
@@ -623,12 +622,12 @@ public abstract class DatabasePersistenceManager extends AbstractPersistenceMana
 
             // we are synchronized on this instance, therefore we do not
             // not have to additionally synchronize on the sql statement
-            executeStmt(sql, new Object[]{out.toByteArray(), refs.getId().toString()});
+            executeStmt(sql, new Object[]{out.toByteArray(), refs.getTargetId().toString()});
 
             // there's no need to close a ByteArrayOutputStream
             //out.close();
         } catch (Exception e) {
-            String msg = "failed to write node references: " + refs.getId();
+            String msg = "failed to write " + refs;
             log.error(msg, e);
             throw new ItemStateException(msg, e);
         }
@@ -646,9 +645,9 @@ public abstract class DatabasePersistenceManager extends AbstractPersistenceMana
         try {
             // we are synchronized on this instance, therefore we do not
             // not have to additionally synchronize on the sql statement
-            executeStmt(nodeReferenceDeleteSQL, new Object[]{refs.getId().toString()});
+            executeStmt(nodeReferenceDeleteSQL, new Object[]{refs.getTargetId().toString()});
         } catch (Exception e) {
-            String msg = "failed to delete node references: " + refs.getId();
+            String msg = "failed to delete " + refs;
             log.error(msg, e);
             throw new ItemStateException(msg, e);
         }
@@ -710,7 +709,7 @@ public abstract class DatabasePersistenceManager extends AbstractPersistenceMana
     /**
      * {@inheritDoc}
      */
-    public boolean exists(NodeReferencesId targetId) throws ItemStateException {
+    public boolean existsReferencesTo(NodeId targetId) throws ItemStateException {
         if (!initialized) {
             throw new IllegalStateException("not initialized");
         }
