diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java
index 3799d09..d54a6c3 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java
@@ -310,9 +310,8 @@ public class BatchedItemOperations extends ItemValidator {
         // 4. detect share cycle
         NodeId srcId = srcState.getNodeId();
         NodeId destParentId = destParentState.getNodeId();
-        if (destParentId.equals(srcId) ||
-                hierMgr.isAncestor(srcId, destParentId)) {
-            String msg = "This would create a share cycle.";
+        if (destParentId.equals(srcId) || hierMgr.isAncestor(srcId, destParentId)) {
+            String msg = "Share cycle detected.";
             log.debug(msg);
             throw new RepositoryException(msg);
         }
@@ -550,6 +549,14 @@ public class BatchedItemOperations extends ItemValidator {
             throw new RepositoryException(msg);
         }
 
+        HierarchyManagerImpl hierMgr = (HierarchyManagerImpl) this.hierMgr;
+        if (hierMgr.isShareAncestor(target.getNodeId(), destParent.getNodeId())) {
+            String msg = safeGetJCRPath(destPath)
+                    + ": invalid destination path (share cycle detected)";
+            log.debug(msg);
+            throw new RepositoryException(msg);
+        }
+
         // 2. check if target state can be removed from old/added to new parent
 
         checkRemoveNode(target, srcParent.getNodeId(),
