diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/util/ConnectionRecoveryManager.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/util/ConnectionRecoveryManager.java
index 4002717..b679941 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/util/ConnectionRecoveryManager.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/util/ConnectionRecoveryManager.java
@@ -205,36 +205,35 @@ public class ConnectionRecoveryManager {
      * @throws SQLException if an error occurs
      */
     public synchronized Statement executeStmt(String sql, Object[] params) throws SQLException {
-        try {
-            PreparedStatement stmt = (PreparedStatement) preparedStatements.get(sql);
-            if (stmt == null) {
-                stmt = getConnection().prepareStatement(sql);
-                preparedStatements.put(sql, stmt);
-            }
-            return executeStmtInternal(params, stmt);
-        } catch (SQLException e) {
-            logException("could not execute statement", e);
-            close();
-            throw e;
-        }
-    }
+        return executeStmt(sql, params, false, 0);
+    }    
 
     /**
      * Executes the given SQL statement with the specified parameters.
      *
      * @param sql statement to execute
      * @param params parameters to set
-     * @param autoGeneratedKeys the constant that tells the driver to make auto generated keys available
+     * @param returnGeneratedKeys if the statement should return auto generated keys
+     * @param maxRows the maximum number of rows to return (0 for all rows)
      * @return the <code>Statement</code> object that had been executed
      * @throws SQLException if an error occurs
      */
-    public synchronized Statement executeStmt(String sql, Object[] params, int autoGeneratedKeys) throws SQLException {
+    public synchronized Statement executeStmt(String sql, Object[] params, boolean returnGeneratedKeys, int maxRows) throws SQLException {
         try {
-            PreparedStatement stmt = (PreparedStatement) preparedStatements.get(sql + "_" + autoGeneratedKeys);
+            String key = sql;
+            if (returnGeneratedKeys) {
+                key += " RETURN_GENERATED_KEYS";
+            }
+            PreparedStatement stmt = (PreparedStatement) preparedStatements.get(key);
             if (stmt == null) {
-                stmt = getConnection().prepareStatement(sql, autoGeneratedKeys);
-                preparedStatements.put(sql + "_" + autoGeneratedKeys, stmt);
+                if (returnGeneratedKeys) {
+                    stmt = getConnection().prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
+                } else {
+                    stmt = getConnection().prepareStatement(sql);
+                }
+                preparedStatements.put(key, stmt);
             }
+            stmt.setMaxRows(maxRows);
             return executeStmtInternal(params, stmt);
         } catch (SQLException e) {
             logException("could not execute statement", e);
