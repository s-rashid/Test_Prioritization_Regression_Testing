diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/EventJournalImpl.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/EventJournalImpl.java
index 48bdfc9..ed5acda 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/EventJournalImpl.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/EventJournalImpl.java
@@ -67,7 +67,7 @@ public class EventJournalImpl implements EventJournal {
      * Each sorted map has the following structure:
      * Key=Long (timestamp), Value=Long (revision)
      */
-    private static final Map REVISION_SKIP_MAPS = new WeakHashMap();
+    private static final Map<Journal, SortedMap<Long, Long>> REVISION_SKIP_MAPS = new WeakHashMap<Journal, SortedMap<Long, Long>>();
 
     /**
      * Last revision seen by this event journal.
@@ -97,7 +97,7 @@ public class EventJournalImpl implements EventJournal {
     /**
      * Buffer of {@link EventBundle}s.
      */
-    private final List eventBundleBuffer = new LinkedList();
+    private final List<EventBundle> eventBundleBuffer = new LinkedList<EventBundle>();
 
     /**
      * The current position of this iterator.
@@ -129,12 +129,12 @@ public class EventJournalImpl implements EventJournal {
         long time = System.currentTimeMillis();
 
         // get skip map for this journal
-        SortedMap skipMap = getSkipMap();
+        SortedMap<Long, Long> skipMap = getSkipMap();
         synchronized (skipMap) {
-            SortedMap head = skipMap.headMap(new Long(time));
+            SortedMap<Long, Long> head = skipMap.headMap(new Long(time));
             if (!head.isEmpty()) {
                 eventBundleBuffer.clear();
-                lastRevision = (Long) head.get(head.lastKey());
+                lastRevision = head.get(head.lastKey());
             }
         }
 
@@ -267,7 +267,7 @@ public class EventJournalImpl implements EventJournal {
          * {@inheritDoc}
          */
         public void process(ChangeLogRecord record) {
-            List events = record.getEvents();
+            List<EventState> events = record.getEvents();
             if (!events.isEmpty()) {
                 EventBundle bundle = new EventBundle(events,
                         record.getTimestamp(), record.getUserData(), filter);
@@ -304,7 +304,7 @@ public class EventJournalImpl implements EventJournal {
      */
     private EventBundle getCurrentBundle() {
         while (!eventBundleBuffer.isEmpty()) {
-            EventBundle bundle = (EventBundle) eventBundleBuffer.get(0);
+            EventBundle bundle = eventBundleBuffer.get(0);
             if (bundle.events.hasNext()) {
                 return bundle;
             } else {
@@ -346,7 +346,7 @@ public class EventJournalImpl implements EventJournal {
 
                 if (processor.getNumEvents() >= MIN_BUFFER_SIZE) {
                     // remember in skip map
-                    SortedMap skipMap = getSkipMap();
+                    SortedMap<Long, Long> skipMap = getSkipMap();
                     Long timestamp = new Long(processor.getLastTimestamp());
                     synchronized (skipMap) {
                         if (log.isDebugEnabled()) {
@@ -369,11 +369,11 @@ public class EventJournalImpl implements EventJournal {
     /**
      * @return the revision skip map for this journal.
      */
-    private SortedMap getSkipMap() {
+    private SortedMap<Long, Long> getSkipMap() {
         synchronized (REVISION_SKIP_MAPS) {
-            SortedMap map = (SortedMap) REVISION_SKIP_MAPS.get(journal);
+            SortedMap<Long, Long> map = REVISION_SKIP_MAPS.get(journal);
             if (map == null) {
-                map = new TreeMap();
+                map = new TreeMap<Long, Long>();
                 REVISION_SKIP_MAPS.put(journal, map);
             }
             return map;
@@ -403,7 +403,7 @@ public class EventJournalImpl implements EventJournal {
          * @param userData the user data associated with this event.
          * @param filter the event filter.
          */
-        private EventBundle(List eventStates,
+        private EventBundle(List<EventState> eventStates,
                             long timestamp,
                             String userData,
                             EventFilter filter) {
