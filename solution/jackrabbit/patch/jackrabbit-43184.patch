diff --git a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/acl/ACLTemplateTest.java b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/acl/ACLTemplateTest.java
index ac3564a..f34acd4 100644
--- a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/acl/ACLTemplateTest.java
+++ b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/acl/ACLTemplateTest.java
@@ -18,9 +18,14 @@ package org.apache.jackrabbit.core.security.authorization.acl;
 
 import org.apache.jackrabbit.core.security.authorization.AbstractPolicyTemplateTest;
 import org.apache.jackrabbit.core.security.authorization.PolicyTemplate;
+import org.apache.jackrabbit.core.security.authorization.PrivilegeRegistry;
+import org.apache.jackrabbit.core.security.authorization.PolicyEntry;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import javax.jcr.RepositoryException;
+import java.security.Principal;
+
 /**
  * <code>ACLTemplateTest</code>...
  */
@@ -35,4 +40,128 @@ public class ACLTemplateTest extends AbstractPolicyTemplateTest {
     protected PolicyTemplate createEmptyTemplate(String path) {
         return new ACLTemplate(path);
     }
+
+    public void testAddEntry() throws RepositoryException {
+        PolicyTemplate pt = createEmptyTemplate(getTestPath());
+
+        assertTrue(pt.setEntry(new ACEImpl(testPrincipal, PrivilegeRegistry.READ, true)));
+    }
+
+    public void testAddEntryTwice() throws RepositoryException {
+        PolicyTemplate pt = createEmptyTemplate(getTestPath());
+        PolicyEntry pe = new ACEImpl(testPrincipal, PrivilegeRegistry.READ, true);
+
+        pt.setEntry(pe);
+        assertFalse(pt.setEntry(pe));
+    }
+
+    public void testRevokeEffect() throws RepositoryException {
+        PolicyTemplate pt = createEmptyTemplate(getTestPath());
+        PolicyEntry pe = new ACEImpl(testPrincipal, PrivilegeRegistry.READ, true);
+
+        pt.setEntry(pe);
+
+        // same entry but with revers 'isAllow' flag
+        pe = new ACEImpl(testPrincipal, PrivilegeRegistry.READ, false);
+        assertTrue(pt.setEntry(pe));
+
+        // net-effect: only a single deny-read entry
+        assertTrue(pt.size() == 1);
+        assertEquals(pt.getEntries()[0], pe);
+    }
+
+    public void testEffect() throws RepositoryException {
+        PolicyTemplate pt = createEmptyTemplate(getTestPath());
+        PolicyEntry pe = new ACEImpl(testPrincipal, PrivilegeRegistry.READ, true);
+
+        pt.setEntry(pe);
+
+        // new entry extends privs.
+        pe = new ACEImpl(testPrincipal, PrivilegeRegistry.READ | PrivilegeRegistry.ADD_CHILD_NODES, true);
+        assertTrue(pt.setEntry(pe));
+
+        // net-effect: only a single allow-entry with both privileges
+        assertTrue(pt.size() == 1);
+        assertEquals(pt.getEntries()[0], pe);
+
+        // new entry revokes READ priv
+        pe = new ACEImpl(testPrincipal, PrivilegeRegistry.ADD_CHILD_NODES, true);
+        assertTrue(pt.setEntry(pe));
+        // net-effect: only a single allow-entry with add_child_nodes priv
+        assertTrue(pt.size() == 1);
+        assertEquals(pt.getEntries()[0], pe);
+    }
+
+    public void testEffect2() throws RepositoryException {
+        PolicyTemplate pt = createEmptyTemplate(getTestPath());
+        PolicyEntry pe = new ACEImpl(testPrincipal, PrivilegeRegistry.READ, true);
+        pt.setEntry(pe);
+
+        // add deny entry for mod_props
+        PolicyEntry pe2 = new ACEImpl(testPrincipal, PrivilegeRegistry.MODIFY_PROPERTIES, false);
+        assertTrue(pt.setEntry(pe2));
+
+        // net-effect: 2 entries
+        assertTrue(pt.size() == 2);
+        assertEquals(pt.getEntries()[0], pe);
+        assertEquals(pt.getEntries()[1], pe2);
+    }
+
+    public void testEffect3() throws RepositoryException {
+        PolicyTemplate pt = createEmptyTemplate(getTestPath());
+        PolicyEntry pe = new ACEImpl(testPrincipal, PrivilegeRegistry.WRITE, true);
+
+        pt.setEntry(pe);
+
+        // add deny entry for mod_props
+        PolicyEntry pe2 = new ACEImpl(testPrincipal, PrivilegeRegistry.MODIFY_PROPERTIES, false);
+        assertTrue(pt.setEntry(pe2));
+
+        // net-effect: 2 entries with the allow entry being adjusted
+        assertTrue(pt.size() == 2);
+        PolicyEntry[] entries = pt.getEntries();
+        for (int i = 0; i < entries.length; i++) {
+            int privs = entries[i].getPrivilegeBits();
+            if (entries[i].isAllow()) {
+                assertTrue(privs == (PrivilegeRegistry.ADD_CHILD_NODES | PrivilegeRegistry.REMOVE_CHILD_NODES));
+            } else {
+                assertTrue(privs == PrivilegeRegistry.MODIFY_PROPERTIES);
+            }
+        }
+    }
+
+    public void testMultiplePrincipals() throws RepositoryException {
+        Principal princ2 = new Principal() {
+            public String getName() {
+                return "AnotherPrincipal";
+            }
+        };
+
+        PolicyTemplate pt = createEmptyTemplate(getTestPath());
+        PolicyEntry pe = new ACEImpl(testPrincipal, PrivilegeRegistry.READ, true);
+        pt.setEntry(pe);
+
+        // add deny entry for mod_props
+        pe = new ACEImpl(princ2, PrivilegeRegistry.READ, true);
+        assertTrue(pt.setEntry(pe));
+        assertTrue(pt.getEntries().length == 2);
+    }
+
+    public void testRemoveEntry() throws RepositoryException {
+        PolicyTemplate pt = createEmptyTemplate(getTestPath());
+        PolicyEntry pe = new ACEImpl(testPrincipal, PrivilegeRegistry.READ, true);
+        pt.setEntry(pe);
+
+        assertTrue(pt.removeEntry(pe));
+    }
+
+    public void testRemoveNonExisting() throws RepositoryException {
+        PolicyTemplate pt = createEmptyTemplate(getTestPath());
+        PolicyEntry pe = new ACEImpl(testPrincipal, PrivilegeRegistry.READ, true);
+        pt.setEntry(pe);
+        PolicyEntry pe2 = new ACEImpl(testPrincipal, PrivilegeRegistry.READ, false);
+        pt.setEntry(pe2);
+
+        assertFalse(pt.removeEntry(pe));
+    }
 }
\ No newline at end of file
