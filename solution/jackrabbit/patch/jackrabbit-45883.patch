diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/retention/RetentionPolicyImpl.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/retention/RetentionPolicyImpl.java
new file mode 100644
index 0000000..64dfd0c
--- /dev/null
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/retention/RetentionPolicyImpl.java
@@ -0,0 +1,93 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.jackrabbit.core.retention;
+
+import org.apache.jackrabbit.api.jsr283.retention.RetentionPolicy;
+import org.apache.jackrabbit.core.NodeId;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.commons.conversion.NameResolver;
+import org.apache.jackrabbit.spi.commons.conversion.IllegalNameException;
+
+import javax.jcr.RepositoryException;
+import javax.jcr.NamespaceException;
+
+/**
+ * Basic implementation of the <code>RetentionPolicy</code> interface.
+ */
+public class RetentionPolicyImpl implements RetentionPolicy {
+
+    private final Name name;
+    private final NodeId nodeId;
+    private final NameResolver resolver;
+
+    private int hashCode = 0;
+    
+    public RetentionPolicyImpl(String jcrName, NameResolver resolver) throws IllegalNameException, NamespaceException {
+        this(resolver.getQName(jcrName), null, resolver);
+    }
+
+    RetentionPolicyImpl(String jcrName, NodeId nodeId, NameResolver resolver) throws IllegalNameException, NamespaceException {
+        this(resolver.getQName(jcrName), nodeId, resolver);
+    }
+
+    private RetentionPolicyImpl(Name name, NodeId nodeId, NameResolver resolver) {
+        this.name = name;
+        this.nodeId = nodeId;
+        this.resolver = resolver;
+    }
+
+    NodeId getNodeId() {
+        return nodeId;
+    }
+    
+    //----------------------------------------------------< RetentionPolicy >---
+    /**
+     * @see org.apache.jackrabbit.api.jsr283.retention.RetentionPolicy#getName()
+     */
+    public String getName() throws RepositoryException {
+        return resolver.getJCRName(name);
+    }
+
+    //-------------------------------------------------------------< Object >---
+    /**
+     * @see Object#hashCode()
+     */
+    public int hashCode() {
+        if (hashCode == 0) {
+            int h = 17;
+            h = 37 * h + name.hashCode();
+            h = 37 * h + nodeId.hashCode();
+            hashCode = h;
+        }
+        return hashCode;
+    }
+
+    /**
+     * @see Object#equals(Object)
+     */
+    public boolean equals(Object obj) {
+        if (obj == this) {
+            return true;
+        }
+
+        if (obj instanceof RetentionPolicyImpl) {
+            RetentionPolicyImpl other = (RetentionPolicyImpl) obj;
+            return name.equals(other.name) && ((nodeId == null) ? other.nodeId == null : nodeId.equals(other.nodeId));
+        }
+        return false;
+    }
+}
\ No newline at end of file
