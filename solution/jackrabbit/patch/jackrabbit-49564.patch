diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/constraint/UpperCaseOperand.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/constraint/UpperCaseOperand.java
index a308a6e..e41ab47 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/constraint/UpperCaseOperand.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/constraint/UpperCaseOperand.java
@@ -16,14 +16,11 @@
  */
 package org.apache.jackrabbit.core.query.lucene.constraint;
 
-import java.io.IOException;
-
 import javax.jcr.Value;
 import javax.jcr.ValueFactory;
 import javax.jcr.RepositoryException;
 
 import org.apache.jackrabbit.core.query.lucene.ScoreNode;
-import org.apache.jackrabbit.core.query.lucene.Util;
 
 /**
  * <code>UpperCaseOperand</code> implements an upper case operand.
@@ -49,16 +46,12 @@ public class UpperCaseOperand extends DynamicOperand {
      * {@inheritDoc}
      */
     public Value[] getValues(ScoreNode sn, EvaluationContext context)
-            throws IOException {
-        try {
-            ValueFactory vf = context.getSession().getValueFactory();
-            Value[] values = operand.getValues(sn, context);
-            for (int i = 0; i < values.length; i++) {
-                values[i] = vf.createValue(values[i].getString().toUpperCase());
-            }
-            return values;
-        } catch (RepositoryException e) {
-            throw Util.createIOException(e);
+            throws RepositoryException {
+        ValueFactory vf = context.getSession().getValueFactory();
+        Value[] values = operand.getValues(sn, context);
+        for (int i = 0; i < values.length; i++) {
+            values[i] = vf.createValue(values[i].getString().toUpperCase());
         }
+        return values;
     }
 }
