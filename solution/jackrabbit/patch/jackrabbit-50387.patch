diff --git a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/SQLJoinTest.java b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/SQLJoinTest.java
index 7a1ec59..28368d6 100644
--- a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/SQLJoinTest.java
+++ b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/SQLJoinTest.java
@@ -41,16 +41,15 @@ public class SQLJoinTest extends AbstractQueryTest {
     /**
      * Test a SQL query with a primary and mixin nodetype join.
      */
-    public void testJoin() throws RepositoryException {
+    public void testJoin() throws RepositoryException, NotExecutableException {
         Node n1 = testRootNode.addNode(nodeName1, testNodeType);
         String testMixin = mixReferenceable;
         if (needsMixin(n1, testMixin)) {
-            n1.addMixin(testMixin);
-        }
-        else {
+            ensureMixinType(n1, testMixin);
+        } else {
             testMixin = mixVersionable;
             if (needsMixin(n1, testMixin)) {
-                n1.addMixin(testMixin);
+                ensureMixinType(n1, testMixin);
             }
         }
 
@@ -74,16 +73,16 @@ public class SQLJoinTest extends AbstractQueryTest {
     /**
      * Test a SQL query with a nt:base primary type and mixin nodetype join.
      */
-    public void testJoinNtBase() throws RepositoryException {
+    public void testJoinNtBase() throws RepositoryException,
+            NotExecutableException {
         Node n1 = testRootNode.addNode(nodeName1, testNodeType);
         String testMixin = mixReferenceable;
         if (needsMixin(n1, testMixin)) {
-            n1.addMixin(testMixin);
-        }
-        else {
+            ensureMixinType(n1, testMixin);
+        } else {
             testMixin = mixVersionable;
             if (needsMixin(n1, testMixin)) {
-                n1.addMixin(testMixin);
+                ensureMixinType(n1, testMixin);
             }
         }
 
@@ -107,15 +106,12 @@ public class SQLJoinTest extends AbstractQueryTest {
     /**
      * Test a SQL query with a primary type and mixin nodetype join.
      */
-    public void testJoinFilterPrimaryType() throws RepositoryException {
+    public void testJoinFilterPrimaryType()
+            throws RepositoryException, NotExecutableException {
         Node n1 = testRootNode.addNode(nodeName1, testNodeType);
-        if (needsMixin(n1, mixReferenceable)) {
-            n1.addMixin(mixReferenceable);
-        }
+        ensureMixinType(n1, mixReferenceable);
         Node n2 = testRootNode.addNode(nodeName2, ntBase);
-        if (needsMixin(n2, mixReferenceable)) {
-            n2.addMixin(mixReferenceable);
-        }
+        ensureMixinType(n2, mixReferenceable);
         testRootNode.save();
 
         StringBuffer query = new StringBuffer("SELECT * FROM ");
@@ -140,15 +136,13 @@ public class SQLJoinTest extends AbstractQueryTest {
      */
     public void testJoinSNS() throws RepositoryException, NotExecutableException {
         Node n1 = testRootNode.addNode(nodeName1, testNodeType);
-        if (needsMixin(n1, mixReferenceable)) {
-            n1.addMixin(mixReferenceable);
-        }
+        ensureMixinType(n1, mixReferenceable);
         if (!n1.getDefinition().allowsSameNameSiblings()) {
             throw new NotExecutableException("Node at " + testRoot + " does not allow same name siblings with name " + nodeName1);
         }
         testRootNode.addNode(nodeName1, testNodeType);
         Node n2 = testRootNode.addNode(nodeName2, testNodeType);
-        n2.addMixin(mixReferenceable);
+        ensureMixinType(n2, mixReferenceable);
         testRootNode.save();
 
         StringBuffer query = new StringBuffer("SELECT * FROM ");
