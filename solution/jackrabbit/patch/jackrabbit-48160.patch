diff --git a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/PathPropertyTest.java b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/PathPropertyTest.java
index 682652b..e1d98ef 100644
--- a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/PathPropertyTest.java
+++ b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/PathPropertyTest.java
@@ -20,6 +20,9 @@ import javax.jcr.RepositoryException;
 import javax.jcr.Value;
 import javax.jcr.ValueFormatException;
 import javax.jcr.PropertyType;
+import javax.jcr.Node;
+import javax.jcr.PathNotFoundException;
+import javax.jcr.Property;
 
 /**
  * Tests a path property. If the workspace does not contain a node with a path
@@ -127,20 +130,89 @@ public class PathPropertyTest extends AbstractPropertyTest {
     }
 
     /**
-     * Tests failure of conversion from Path type to Reference type.
+     * Since JCR 2.0 a path property can be dereferenced if it points to a
+     * Node.
+     * TODO: create several tests out of this one
      */
-    public void testAsReference() throws RepositoryException {
+    public void testGetNode() throws RepositoryException {
         if (!multiple) {
+            String nodePath = prop.getParent().getPath();
+            String propName = prop.getName();
+
+            // absolute nodes path
+            prop.getParent().setProperty(propName, nodePath, PropertyType.PATH);
+            String value = prop.getString();
+            Node n = prop.getNode();
+            assertEquals("The path of the dereferenced property must be equal to the value", n.getPath(), value);
+            assertTrue("The property value must be resolved to the correct node.", prop.getParent().isSame(n));
+
+            // relative node path
+            prop.getParent().setProperty(propName, ".", PropertyType.PATH);
+            value = prop.getString();
+            n = prop.getNode();
+            assertEquals("The path of the dereferenced property must be equal to the value", ".", value);
+            assertTrue("The property value must be resolved to the correct node.", prop.getParent().isSame(n));
+
+            // non-existing property path
+            while (session.nodeExists(nodePath)) {
+                nodePath += "x";
+            }
+            prop.getParent().setProperty(propName, nodePath, PropertyType.PATH);
+            try {
+                prop.getProperty();
+                fail("Calling Property.getNode() for a PATH value that doesn't have a corresponding Node, PathNotFoundException is expected");
+            } catch (PathNotFoundException e) {
+                //ok
+            }
+        } else {
             try {
                 prop.getNode();
-                fail("Conversion from a Path value to a Reference value " +
+                fail("Property.getNode() called on a multivalue property " +
                         "should throw a ValueFormatException.");
             } catch (ValueFormatException vfe) {
                 //ok
             }
+        }
+    }
+
+    /**
+     * Since JCR 2.0 a path property can be dereferenced if it points to a
+     * Property.
+     * TODO: create several tests out of this one
+     */
+    public void testGetProperty() throws RepositoryException {
+        if (!multiple) {
+            String propPath = prop.getPath();
+            String propName = prop.getName();
+
+            // absolute property path
+            prop.getParent().setProperty(propName, propPath, PropertyType.PATH);
+            String path = prop.getString();
+            Property p = prop.getProperty();
+            assertEquals("The path of the dereferenced property must be equal to the value", path, p.getPath());
+            assertTrue("The property value must be resolved to the correct property.", prop.isSame(p));
+
+            // relative property path
+            prop.getParent().setProperty(propName, propName, PropertyType.PATH);
+            path = prop.getString();
+            p = prop.getProperty();
+            assertEquals("The path of the dereferenced property must be equal to the value", path, p.getName());
+            assertTrue("The property value must be resolved to the correct property.", prop.isSame(p));
+
+            // non-existing property path
+            while (session.propertyExists(propPath)) {
+                propPath += "x";
+            }
+            prop.getParent().setProperty(propName, propPath, PropertyType.PATH);
+            try {
+                prop.getProperty();
+                fail("Calling Property.getNode() for a PATH value that doesn't have a corresponding Property, PathNotFoundException is expected");
+            } catch (PathNotFoundException e) {
+                //ok
+            }
         } else {
             try {
-                prop.getNode();
+                prop.getProperty();
                 fail("Property.getNode() called on a multivalue property " +
                         "should throw a ValueFormatException.");
             } catch (ValueFormatException vfe) {
