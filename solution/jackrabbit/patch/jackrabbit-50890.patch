diff --git a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserAdministratorTest.java b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserAdministratorTest.java
index 2ed9a9b..f7dc6c6 100644
--- a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserAdministratorTest.java
+++ b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/user/UserAdministratorTest.java
@@ -24,7 +24,6 @@ import org.apache.jackrabbit.api.security.user.User;
 import org.apache.jackrabbit.api.security.user.UserManager;
 import org.apache.jackrabbit.core.security.principal.EveryonePrincipal;
 import org.apache.jackrabbit.test.NotExecutableException;
-import org.apache.jackrabbit.util.Text;
 
 import javax.jcr.AccessDeniedException;
 import javax.jcr.Credentials;
@@ -59,11 +58,11 @@ public class UserAdministratorTest extends AbstractUserTest {
         UserImpl u = (UserImpl) userMgr.createUser(p.getName(), buildPassword(p));
         uID = u.getID();
 
-        // create a second user 'below' the first user.
+        // create a second user
         p = getTestPrincipal();
         String pw = buildPassword(p);
         Credentials otherCreds = buildCredentials(p.getName(), pw);
-        User other = userMgr.createUser(p.getName(), pw, p, u.getNode().getPath());
+        User other = userMgr.createUser(p.getName(), pw);
         otherUID = other.getID();
         otherPath = ((UserImpl) other).getNode().getPath();
 
@@ -123,11 +122,10 @@ public class UserAdministratorTest extends AbstractUserTest {
     public void testCreateUser() throws RepositoryException, NotExecutableException {
         UserManager umgr = getUserManager(otherSession);
         UserImpl u = null;
-        // create a new user -> must succeed and user must be create below 'other'
+        // create a new user -> must succeed.
         try {
             Principal p = getTestPrincipal();
             u = (UserImpl) umgr.createUser(p.getName(), buildPassword(p));
-            assertTrue(Text.isDescendant(otherPath, u.getNode().getPath()));
         } finally {
             if (u != null) {
                 u.remove();
@@ -139,12 +137,12 @@ public class UserAdministratorTest extends AbstractUserTest {
         UserManager umgr = getUserManager(otherSession);
         UserImpl u = null;
         // create a new user with intermediate-path
-        // -> must succeed and user must be create below 'other'
+        // -> must succeed and user must be created
+        // -> intermediate path must be ignored.
         try {
             Principal p = getTestPrincipal();
             u = (UserImpl) umgr.createUser(p.getName(), buildPassword(p), p, "/some/intermediate/path");
-            assertTrue(Text.isDescendant(otherPath, u.getNode().getPath()));
-            assertTrue(Text.isDescendant(otherPath + "/some/intermediate/path", u.getNode().getPath()));
+            assertEquals(-1, u.getNode().getPath().indexOf("/some/intermediate/path"));
         } finally {
             if (u != null) {
                 u.remove();
@@ -164,24 +162,25 @@ public class UserAdministratorTest extends AbstractUserTest {
         }
     }
 
-    public void testRemoveParentUser() throws RepositoryException, NotExecutableException {
+    /**
+     * A member of 'usermanagers' must be able to remove another user.
+     * 
+     * @throws RepositoryException
+     * @throws NotExecutableException
+     */
+    public void testRemoveAnotherUser() throws RepositoryException, NotExecutableException {
         UserManager umgr = getUserManager(otherSession);
 
-        Authorizable parentuser = umgr.getAuthorizable(uID);
-        try {
-            parentuser.remove();
-            fail("A UserAdministrator should not be allowed to remove a 'parent' user.");
-        } catch (AccessDeniedException e) {
-            // success
-        }
+        Authorizable user = umgr.getAuthorizable(uID);
+        user.remove();
     }
 
-    public void testModifyImpersonationOfChildUser() throws RepositoryException, NotExecutableException {
+    public void testModifyImpersonationOfUser() throws RepositoryException, NotExecutableException {
         UserManager umgr = getUserManager(otherSession);
         Principal otherP = umgr.getAuthorizable(otherUID).getPrincipal();
 
+        // modify impersonation of new user
         User u = null;
-        // create a new user -> must succeed and user must be create below 'other'
         try {
             Principal p = getTestPrincipal();
             u = umgr.createUser(p.getName(), buildPassword(p));
@@ -196,25 +195,15 @@ public class UserAdministratorTest extends AbstractUserTest {
                 u.remove();
             }
         }
-    }
 
-    public void testModifyImpersonationOfParentUser() throws RepositoryException, NotExecutableException {
-        UserManager umgr = getUserManager(otherSession);
-        User u = (User) umgr.getAuthorizable(uID);
+        // modify impersonation of another user
+        u = (User) umgr.getAuthorizable(uID);
         Impersonation uImpl = u.getImpersonation();
-
-        Principal otherP = umgr.getAuthorizable(otherUID).getPrincipal();
-
         if (!uImpl.allows(buildSubject(otherP))) {
-            // ... trying to modify 'impersonators of 'uid' must not succeed.
-            try {
-                assertFalse(uImpl.grantImpersonation(otherP));
-            } catch (AccessDeniedException e) {
-                // success
-            } finally {
-                assertFalse(uImpl.allows(buildSubject(otherP)));
-                uImpl.revokeImpersonation(otherP);
-            }
+            // ... trying to modify 'impersonators of another user must succeed
+            assertTrue(uImpl.grantImpersonation(otherP));
+            assertTrue(uImpl.allows(buildSubject(otherP)));
+            uImpl.revokeImpersonation(otherP);
         } else {
             throw new NotExecutableException("Cannot execute test. OtherP can already impersonate UID-user.");
         }
@@ -232,7 +221,7 @@ public class UserAdministratorTest extends AbstractUserTest {
         }
     }
 
-    public void testModifyGroupForParentUser() throws RepositoryException, NotExecutableException {
+    public void testModifyGroup() throws RepositoryException, NotExecutableException {
         UserManager umgr = getUserManager(otherSession);
 
         User parentUser = (User) umgr.getAuthorizable(uID);
@@ -241,22 +230,19 @@ public class UserAdministratorTest extends AbstractUserTest {
         } else {
             Group gr = getGroupAdminGroup(umgr);
             try {
-                assertFalse(gr.addMember(parentUser));
+                assertFalse("A UserAdmin must not be allowed to modify group memberships", gr.addMember(parentUser));
             } catch (RepositoryException e) {
                 // success
             }
         }
-    }
 
-    public void testModifyGroupForChildUser() throws RepositoryException, NotExecutableException {
-        UserManager umgr = getUserManager(otherSession);
         Principal cp = getTestPrincipal();
         User childU = null;
         try {
             childU = umgr.createUser(cp.getName(), buildPassword(cp));
             Group gr = getGroupAdminGroup(umgr);
             try {
-                assertFalse(gr.addMember(childU));
+                assertFalse("A UserAdmin must not be allowed to modify group memberships", gr.addMember(childU));
             } catch (RepositoryException e) {
                 // success
             }
@@ -289,6 +275,22 @@ public class UserAdministratorTest extends AbstractUserTest {
         }
     }
 
+    public void testRemoveGroup() throws NotExecutableException, RepositoryException {
+        UserManager umgr = getUserManager(otherSession);
+        Group g = null;
+        try {
+            g = userMgr.createGroup(getTestPrincipal());
+            umgr.getAuthorizable(g.getID()).remove();
+            fail("UserAdmin should not be allowed to remove a Group.");
+        } catch (RepositoryException e) {
+            // success.
+        } finally {
+            if (g != null) {
+                g.remove();
+            }
+        }
+    }
+
     public void testAddToGroup() throws NotExecutableException, RepositoryException {
         UserManager umgr = getUserManager(otherSession);
         Group gr = getGroupAdminGroup(umgr);
@@ -316,4 +318,22 @@ public class UserAdministratorTest extends AbstractUserTest {
             // success
         }
     }
+
+    public void testPersisted() throws NotExecutableException, RepositoryException {
+        UserManager umgr = getUserManager(otherSession);
+        UserImpl u = null;
+        // create a new user -> must succeed.
+        try {
+            Principal p = getTestPrincipal();
+            u = (UserImpl) umgr.createUser(p.getName(), buildPassword(p));
+
+            Authorizable az = userMgr.getAuthorizable(u.getID());
+            assertNotNull(az);
+            assertEquals(u.getID(), az.getID());
+        } finally {
+            if (u != null) {
+                u.remove();
+            }
+        }
+    }
 }
\ No newline at end of file
