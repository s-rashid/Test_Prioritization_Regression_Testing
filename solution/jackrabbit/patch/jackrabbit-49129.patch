diff --git a/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/name/NameFormat.java b/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/name/NameFormat.java
index 005fdfd..34f6678 100644
--- a/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/name/NameFormat.java
+++ b/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/name/NameFormat.java
@@ -18,7 +18,6 @@ package org.apache.jackrabbit.name;
 
 import org.apache.jackrabbit.util.XMLChar;
 
-import javax.jcr.NamespaceException;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -56,73 +55,6 @@ public class NameFormat {
     };
 
     /**
-     * Converts the <code>jcrName</code> to its corresponding <code>QName</code>.
-     * If the <code>resolver</code> passed is also an instance of
-     * {@link NameCache} then this method first attempts to find the
-     * corresponding <code>QName</code> in the cache. If it cannot be found then
-     * the <code>jcrName</code> is parsed and the corresponding
-     * <code>QName</code> constructed.
-     *
-     * @param jcrName  the JCR-style name to be parsed
-     * @param resolver <code>NamespaceResolver</code> used for resolving
-     *                 prefixes into namespace URIs
-     * @return the resulting <code>QName</code>
-     * @throws IllegalNameException If <code>jcrName</code> is not a valid
-     *                              JCR-style name.
-     */
-    public static QName parse(String jcrName, NamespaceResolver resolver)
-            throws IllegalNameException, UnknownPrefixException {
-
-        if (resolver instanceof NameCache) {
-            QName name = ((NameCache) resolver).retrieveName(jcrName);
-            if (name == null) {
-                name = parseIgnoreCache(jcrName, resolver);
-                ((NameCache) resolver).cacheName(jcrName, name);
-            }
-            return name;
-        } else {
-            return parseIgnoreCache(jcrName, resolver);
-        }
-    }
-
-    /**
-     * Converts each JCR-style name in the passed array to its corresponding
-     * <code>QName</code> and returns the resulting <code>QName</code> array.
-     * If the <code>resolver</code> passed is also an instance of
-     * {@link NameCache} then this method first attempts to find the
-     * corresponding <code>QName</code> in the cache. If it cannot be found then
-     * the <code>jcrName</code> is parsed and the corresponding
-     * <code>QName</code> constructed.
-     *
-     * @param jcrNames the array of JCR-style names to be parsed
-     * @param resolver <code>NamespaceResolver</code> used for resolving
-     *                 prefixes into namespace URIs
-     * @return the resulting <code>QName</code> array
-     * @throws IllegalNameException If any of the passed names is not a valid
-     *                              JCR-style name.
-     */
-    public static QName[] parse(String jcrNames[], NamespaceResolver resolver)
-            throws IllegalNameException, UnknownPrefixException {
-
-        QName[] ret = new QName[jcrNames.length];
-        if (resolver instanceof NameCache) {
-            for (int i = 0; i < ret.length; i++) {
-                QName name = ((NameCache) resolver).retrieveName(jcrNames[i]);
-                if (name == null) {
-                    name = parseIgnoreCache(jcrNames[i], resolver);
-                    ((NameCache) resolver).cacheName(jcrNames[i], name);
-                }
-                ret[i] = name;
-            }
-        } else {
-            for (int i = 0; i < ret.length; i++) {
-                ret[i] = parseIgnoreCache(jcrNames[i], resolver);
-            }
-        }
-        return ret;
-    }
-
-    /**
      * Checks if <code>jcrName</code> is a valid JCR-style name.
      *
      * @param jcrName the name to be checked
@@ -133,135 +65,7 @@ public class NameFormat {
         doParse(jcrName);
     }
 
-    /**
-     * Formats the given <code>QName</code> to produce a string representation,
-     * i.e. JCR-style name. If the <code>resolver</code> passed is also an
-     * instance of {@link NameCache} then this method first attempts to find the
-     * corresponding JCR-style name in the cache. If it cannot be found then
-     * a new string representation is constructed.
-     *
-     * @param qName    the <code>QName</code> to format
-     * @param resolver <code>NamespaceResolver</code> used for resolving
-     *                 namespace URIs into prefixes
-     * @return the string representation (JCR-style name) of the given
-     *         <code>QName</code>
-     * @throws NoPrefixDeclaredException if a namespace can not be resolved
-     * @see #format(QName, NamespaceResolver, StringBuffer)
-     */
-    public static String format(QName qName, NamespaceResolver resolver)
-            throws NoPrefixDeclaredException {
-
-        if (resolver instanceof NameCache) {
-            String jcrName = ((NameCache) resolver).retrieveName(qName);
-            if (jcrName == null) {
-                StringBuffer buf = new StringBuffer();
-                formatIgnoreCache(qName, resolver, buf);
-                jcrName = buf.toString();
-                ((NameCache) resolver).cacheName(jcrName, qName);
-            }
-            return jcrName;
-
-        } else {
-            StringBuffer buf = new StringBuffer();
-            formatIgnoreCache(qName, resolver, buf);
-            return buf.toString();
-        }
-    }
-
-    /**
-     * Same as {@link #format(QName, NamespaceResolver)} except that this
-     * method takes an array of <code>QName</code>s and returns an array of
-     * corresponding string representations.
-     *
-     * @param qNames   the array <code>QName</code>s to format
-     * @param resolver <code>NamespaceResolver</code> used for resolving
-     *                 namespace URIs into prefixes
-     * @return the array of corresponding string representations
-     * @throws NoPrefixDeclaredException if a namespace can not be resolved
-     * @see #format(QName, NamespaceResolver)
-     */
-    public static String[] format(QName[] qNames, NamespaceResolver resolver)
-            throws NoPrefixDeclaredException {
-        String[] ret = new String[qNames.length];
-        if (resolver instanceof NameCache) {
-            for (int i = 0; i < ret.length; i++) {
-                String jcrName = ((NameCache) resolver).retrieveName(qNames[i]);
-                if (jcrName == null) {
-                    StringBuffer buf = new StringBuffer();
-                    formatIgnoreCache(qNames[i], resolver, buf);
-                    jcrName = buf.toString();
-                    ((NameCache) resolver).cacheName(jcrName, qNames[i]);
-                }
-                ret[i] = jcrName;
-            }
-        } else {
-            for (int i = 0; i < ret.length; i++) {
-                StringBuffer buf = new StringBuffer();
-                formatIgnoreCache(qNames[i], resolver, buf);
-                ret[i] = buf.toString();
-            }
-        }
-        return ret;
-    }
-
-    /**
-     * Same as {@link #format(QName, NamespaceResolver)} except that this
-     * method appends the JCR-style name to the given <code>buffer</code> rather
-     * than returning it directly.
-     *
-     * @param qName    the <code>QName</code> to format
-     * @param resolver <code>NamespaceResolver</code> used for resolving
-     *                 namespace URIs into prefixes
-     * @param buffer   StringBuffer where the string representation should be
-     *                 appended to
-     * @throws NoPrefixDeclaredException if a namespace can not be resolved
-     */
-    public static void format(QName qName, NamespaceResolver resolver,
-                              StringBuffer buffer)
-            throws NoPrefixDeclaredException {
-
-        if (resolver instanceof NameCache) {
-            String jcrName = ((NameCache) resolver).retrieveName(qName);
-            if (jcrName == null) {
-                int l = buffer.length();
-                formatIgnoreCache(qName, resolver, buffer);
-                ((NameCache) resolver).cacheName(buffer.substring(l), qName);
-            } else {
-                buffer.append(jcrName);
-            }
-        } else {
-            formatIgnoreCache(qName, resolver, buffer);
-        }
-    }
-
     //-------------------------------------------------------< implementation >
-    /**
-     * Converts the <code>jcrName</code> to its corresponding <code>QName</code>.
-     * <p/>
-     * Note that unlike {@link #parse(String, NamespaceResolver)} this method
-     * always constructs a new <code>QName</code>, ignoring potential caching
-     * capabilities of the passed <code>resolver</code>.
-     *
-     * @param jcrName  the JCR-style name to be parsed
-     * @param resolver <code>NamespaceResolver</code> used for resolving
-     *                 prefixes into namespace URIs
-     * @return the resulting <code>QName</code>
-     * @throws IllegalNameException If <code>jcrName</code> is not a valid
-     *                              JCR-style name.
-     * @see #parse(String, NamespaceResolver)
-     */
-    private static QName parseIgnoreCache(String jcrName,
-                                          NamespaceResolver resolver)
-            throws IllegalNameException, UnknownPrefixException {
-        String[] parts = doParse(jcrName);
-        String uri;
-        try {
-            uri = resolver.getURI(parts[0]);
-        } catch (NamespaceException nse) {
-            throw new UnknownPrefixException(parts[0]);
-        }
-        return new QName(uri, parts[1]);
-    }
 
     /**
      * Parses the <code>jcrName</code> and returns an array of two strings:
@@ -315,42 +119,4 @@ public class NameFormat {
 
         return new String[]{prefix, localName};
     }
-
-    /**
-     * Formats the given <code>QName</code> to produce a string representation,
-     * i.e. JCR-style name.
-     * <p/>
-     * Note that unlike {@link #format(QName, NamespaceResolver)} this method
-     * always constructs a new <code>String</code>, ignoring potential caching
-     * capabilities of the passed <code>resolver</code>.
-     *
-     * @param qName    the <code>QName</code> to format
-     * @param resolver <code>NamespaceResolver</code> used for resolving
-     *                 namespace URIs into prefixes
-     * @param buffer   StringBuffer where the prefixed JCR name should be
-     *                 appended to
-     * @throws NoPrefixDeclaredException if a namespace can not be resolved
-     * @see #format(QName, NamespaceResolver)
-     */
-    private static void formatIgnoreCache(QName qName,
-                                          NamespaceResolver resolver,
-                                          StringBuffer buffer)
-            throws NoPrefixDeclaredException {
-        // prefix
-        String prefix;
-        try {
-            prefix = resolver.getPrefix(qName.getNamespaceURI());
-        } catch (NamespaceException nse) {
-            throw new NoPrefixDeclaredException("no prefix declared for URI: "
-                    + qName.getNamespaceURI());
-        }
-        if (prefix.length() == 0) {
-            // default prefix (empty string)
-        } else {
-            buffer.append(prefix);
-            buffer.append(':');
-        }
-        // name
-        buffer.append(qName.getLocalName());
-    }
 }
