diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/Recovery.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/Recovery.java
index 526d843..892cb69 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/Recovery.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/Recovery.java
@@ -21,7 +21,6 @@ import org.slf4j.LoggerFactory;
 
 import java.util.Set;
 import java.util.HashSet;
-import java.util.Iterator;
 import java.util.List;
 import java.io.IOException;
 
@@ -46,9 +45,9 @@ class Recovery {
     private final RedoLog redoLog;
 
     /**
-     * The ids of the uncommitted transactions. Set of Integer objects.
+     * The ids of the uncommitted transactions. Set of Long objects.
      */
-    private final Set losers = new HashSet();
+    private final Set<Long> losers = new HashSet<Long>();
 
     /**
      * Creates a new Recovery instance.
@@ -92,23 +91,22 @@ class Recovery {
      * @throws IOException if the recovery fails.
      */
     private void run() throws IOException {
-        List actions = redoLog.getActions();
+        List<MultiIndex.Action> actions = redoLog.getActions();
 
         // find loser transactions
-        for (Iterator it = actions.iterator(); it.hasNext();) {
-            MultiIndex.Action a = (MultiIndex.Action) it.next();
+        for (MultiIndex.Action a : actions) {
             if (a.getType() == MultiIndex.Action.TYPE_START) {
-                losers.add(new Long(a.getTransactionId()));
+                losers.add(a.getTransactionId());
             } else if (a.getType() == MultiIndex.Action.TYPE_COMMIT) {
-                losers.remove(new Long(a.getTransactionId()));
+                losers.remove(a.getTransactionId());
             }
         }
 
         // find last volatile commit without changes from a loser
         int lastSafeVolatileCommit = -1;
-        Set transactionIds = new HashSet();
+        Set<Long> transactionIds = new HashSet<Long>();
         for (int i = 0; i < actions.size(); i++) {
-            MultiIndex.Action a = (MultiIndex.Action) actions.get(i);
+            MultiIndex.Action a = actions.get(i);
             if (a.getType() == MultiIndex.Action.TYPE_COMMIT) {
                 transactionIds.clear();
             } else if (a.getType() == MultiIndex.Action.TYPE_VOLATILE_COMMIT) {
@@ -121,13 +119,13 @@ class Recovery {
                     lastSafeVolatileCommit = i;
                 }
             } else {
-                transactionIds.add(new Long(a.getTransactionId()));
+                transactionIds.add(a.getTransactionId());
             }
         }
 
         // delete dirty indexes
         for (int i = lastSafeVolatileCommit + 1; i < actions.size(); i++) {
-            MultiIndex.Action a = (MultiIndex.Action) actions.get(i);
+            MultiIndex.Action a = actions.get(i);
             if (a.getType() == MultiIndex.Action.TYPE_CREATE_INDEX) {
                 a.undo(index);
             }
@@ -136,7 +134,7 @@ class Recovery {
         // replay actions up to last safe volatile commit
         // ignore add node actions, they are included in volatile commits
         for (int i = 0; i < actions.size() && i <= lastSafeVolatileCommit; i++) {
-            MultiIndex.Action a = (MultiIndex.Action) actions.get(i);
+            MultiIndex.Action a = actions.get(i);
             switch (a.getType()) {
                 case MultiIndex.Action.TYPE_ADD_INDEX:
                 case MultiIndex.Action.TYPE_CREATE_INDEX:
@@ -156,7 +154,7 @@ class Recovery {
 
         // now replay the rest until we encounter a loser transaction
         for (int i = lastSafeVolatileCommit + 1; i < actions.size(); i++) {
-            MultiIndex.Action a = (MultiIndex.Action) actions.get(i);
+            MultiIndex.Action a = actions.get(i);
             if (losers.contains(new Long(a.getTransactionId()))) {
                 break;
             } else {
