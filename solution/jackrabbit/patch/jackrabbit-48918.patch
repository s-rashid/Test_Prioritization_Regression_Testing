diff --git a/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/batch/Operations.java b/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/batch/Operations.java
index dc230c6..f9fe074 100644
--- a/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/batch/Operations.java
+++ b/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/batch/Operations.java
@@ -38,8 +38,7 @@ public final class Operations {
         super();
     }
 
-    // -----------------------------------------------------< Empty >---
-
+    // -------------------------------------------------------------< Empty >---
     /**
      * Representative of the empty {@link Operation} which does nothing when
      * applied to a {@link Batch}.
@@ -81,8 +80,7 @@ public final class Operations {
         return Empty.INSTANCE;
     }
 
-    // -----------------------------------------------------< AddNode >---
-
+    // -----------------------------------------------------------< AddNode >---
     /**
      * Representative of an add-node {@link Operation} which calls
      * {@link Batch#addNode(NodeId, Name, Name, String)} when applied to a {@link Batch}.
@@ -167,8 +165,7 @@ public final class Operations {
         return new AddNode(parentId, nodeName, nodetypeName, uuid);
     }
 
-    // -----------------------------------------------------< AddProperty >---
-
+    // -------------------------------------------------------< AddProperty >---
     /**
      * Representative of an add-property {@link Operation} which calls
      * {@link Batch#addProperty(NodeId, Name, QValue)} or {@link Batch#addProperty(NodeId, Name, QValue[])}
@@ -283,8 +280,7 @@ public final class Operations {
         return new AddProperty(parentId, propertyName, values);
     }
 
-    // -----------------------------------------------------< Move >---
-
+    // --------------------------------------------------------------< Move >---
     /**
      * Representative of a move {@link Operation} which calls
      * {@link Batch#move(NodeId, NodeId, Name)} when applied to a {@link Batch}.
@@ -361,8 +357,7 @@ public final class Operations {
         return new Move(srcNodeId, destParentNodeId, destName);
     }
 
-    // -----------------------------------------------------< Remove >---
-
+    // ------------------------------------------------------------< Remove >---
     /**
      * Representative of a remove {@link Operation} which calls {@link Batch#remove(ItemId)} when
      * applied to a {@link Batch}.
@@ -425,8 +420,7 @@ public final class Operations {
         return new Remove(itemId);
     }
 
-    // -----------------------------------------------------< ReorderNodes >---
-
+    // ------------------------------------------------------< ReorderNodes >---
     /**
      * Representative of a reorder-nodes {@link Operation} which calls
      * {@link Batch#reorderNodes(NodeId, NodeId, NodeId)} when applied to a {@link Batch}.
@@ -503,8 +497,7 @@ public final class Operations {
         return new ReorderNodes(parentId, srcNodeId, beforeNodeId);
     }
 
-    // -----------------------------------------------------< SetMixins >---
-
+    // ---------------------------------------------------------< SetMixins >---
     /**
      * Representative of a set-mixin {@link Operation} which calls
      * {@link Batch#setMixins(NodeId, Name[])} when applied to a {@link Batch}.
@@ -574,8 +567,77 @@ public final class Operations {
         return new SetMixins(nodeId, mixinNodeTypeNames);
     }
 
-    // -----------------------------------------------------< SetValue >---
+    // ----------------------------------------------------< SetPrimaryType >---
+    /**
+     * Representative of a set-mixin {@link Operation} which calls
+     * {@link Batch#setMixins(NodeId, Name[])} when applied to a {@link Batch}.
+     */
+    public static class SetPrimaryType implements Operation {
+        protected final NodeId nodeId;
+        protected final Name primaryTypeName;
+
+        /**
+         * Create a new set-mixin {@link Operation} for the given arguments.
+         *
+         * @see Batch#setMixins(NodeId, Name[])
+         * @param nodeId
+         * @param primaryTypeName
+         */
+        public SetPrimaryType(NodeId nodeId, Name primaryTypeName) {
+            super();
+            this.nodeId = nodeId;
+            this.primaryTypeName = primaryTypeName;
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        public void apply(Batch batch) throws RepositoryException {
+            batch.setPrimaryType(nodeId, primaryTypeName);
+        }
+
+        public String toString() {
+            return "SetPrimaryType[" + nodeId + ", " + primaryTypeName + "]";
+        }
+
+        public boolean equals(Object other) {
+            if (null == other) {
+                return false;
+            }
+            if (this == other) {
+                return true;
+            }
+            if (other instanceof SetPrimaryType) {
+                return equals((SetPrimaryType) other);
+            }
+            return false;
+        }
+
+        public boolean equals(SetPrimaryType other) {
+            return Operations.equals(nodeId, other.nodeId)
+                && primaryTypeName.equals(other.primaryTypeName);
+        }
+
+        public int hashCode() {
+            return 41 * (
+                    41 + Operations.hashCode(nodeId))
+                    + Operations.hashCode(primaryTypeName);
+        }
+    }
+
+    /**
+     * Factory method for creating a set-primaryType {@link Operation} for the given arguments.
+     *
+     * @see Batch#setPrimaryType(NodeId, Name)
+     * @param nodeId
+     * @param primaryTypeName
+     * @return
+     */
+    public static Operation setPrimaryType(NodeId nodeId, Name primaryTypeName) {
+        return new SetPrimaryType(nodeId, primaryTypeName);
+    }
 
+    // ----------------------------------------------------------< SetValue >---
     /**
      * Representative of a set-value {@link Operation} which calls
      * {@link Batch#setValue(PropertyId, QValue)} or {@link Batch#setValue(PropertyId, QValue[])}
@@ -681,7 +743,7 @@ public final class Operations {
         return new SetValue(propertyId, values);
     }
 
-    // -----------------------------------------------------< private >---
+    // -----------------------------------------------------------< private >---
 
     protected static boolean equals(Object o1, Object o2) {
         return o1 == null
