diff --git a/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/nodetype/compact/CompactNodeTypeDefTest.java b/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/nodetype/compact/CompactNodeTypeDefTest.java
index 779ada2..b1a0c5f 100644
--- a/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/nodetype/compact/CompactNodeTypeDefTest.java
+++ b/jackrabbit-spi-commons/src/test/java/org/apache/jackrabbit/spi/commons/nodetype/compact/CompactNodeTypeDefTest.java
@@ -23,17 +23,13 @@ import java.io.StringReader;
 import java.io.StringWriter;
 import java.util.List;
 
-import junit.framework.TestCase;
-
 import org.apache.jackrabbit.spi.QNodeTypeDefinition;
 import org.apache.jackrabbit.spi.commons.conversion.DefaultNamePathResolver;
 import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
 import org.apache.jackrabbit.spi.commons.namespace.NamespaceMapping;
 import org.apache.jackrabbit.spi.commons.nodetype.NodeTypeDefDiff;
-import org.apache.jackrabbit.spi.commons.value.ValueFactoryQImpl;
-import org.apache.jackrabbit.spi.commons.value.QValueFactoryImpl;
 
-import javax.jcr.ValueFactory;
+import junit.framework.TestCase;
 
 public class CompactNodeTypeDefTest extends TestCase {
 
@@ -43,30 +39,27 @@ public class CompactNodeTypeDefTest extends TestCase {
 
         // Read in node type def from test file
         Reader reader = new InputStreamReader(getClass().getClassLoader().getResourceAsStream(TEST_FILE));
-        CompactNodeTypeDefReader cndReader = new CompactNodeTypeDefReader(reader, TEST_FILE,
-                new QNodeTypeDefinitionsBuilderImpl());
+        CompactNodeTypeDefReader cndReader = new CompactNodeTypeDefReader(reader, TEST_FILE);
 
-        List ntdList1 = cndReader.getNodeTypeDefs();
+        List<QNodeTypeDefinition> ntdList1 = cndReader.getNodeTypeDefinitions();
         NamespaceMapping nsm = cndReader.getNamespaceMapping();
         NamePathResolver resolver = new DefaultNamePathResolver(nsm);
 
         // Put imported node type def back into CND form with CND writer
         StringWriter sw = new StringWriter();
-        ValueFactory vf = new ValueFactoryQImpl(QValueFactoryImpl.getInstance(), resolver);
-        CompactNodeTypeDefWriter.write(ntdList1, nsm, resolver, vf, sw);
+        CompactNodeTypeDefWriter.write(ntdList1, nsm, resolver, sw);
 
         // Rerun the reader on the product of the writer
-        cndReader = new CompactNodeTypeDefReader(new StringReader(sw.toString()), TEST_FILE,
-                new QNodeTypeDefinitionsBuilderImpl());
+        cndReader = new CompactNodeTypeDefReader(new StringReader(sw.toString()), TEST_FILE);
 
-        List ntdList2 = cndReader.getNodeTypeDefs();
+        List<QNodeTypeDefinition> ntdList2 = cndReader.getNodeTypeDefinitions();
 
         if (ntdList1.size() == 0 || ntdList1.size() != ntdList2.size()) {
             fail("Exported node type definition was not successfully read back in");
         } else {
             for(int k = 0; k < ntdList1.size(); k++) {
-                QNodeTypeDefinition ntd1 = (QNodeTypeDefinition) ntdList1.get(k);
-                QNodeTypeDefinition ntd2 = (QNodeTypeDefinition) ntdList2.get(k);
+                QNodeTypeDefinition ntd1 = ntdList1.get(k);
+                QNodeTypeDefinition ntd2 = ntdList2.get(k);
 
                 NodeTypeDefDiff diff = NodeTypeDefDiff.create(ntd1, ntd2);
                 if (diff.isModified() && !diff.isTrivial()){
