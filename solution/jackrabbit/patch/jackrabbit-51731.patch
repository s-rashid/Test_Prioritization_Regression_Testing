diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/join/ScoreNodeMap.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/join/ScoreNodeMap.java
index a2c0034..55dfbd9 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/join/ScoreNodeMap.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/join/ScoreNodeMap.java
@@ -32,7 +32,7 @@ public final class ScoreNodeMap {
     /**
      * The internal map.
      */
-    private final Map map = new HashMap();
+    private final Map<Object, Object> map = new HashMap<Object, Object>();
 
     /**
      * Adds <code>scoreNodes</code> to this map under the given <code>key</code>.
@@ -62,8 +62,8 @@ public final class ScoreNodeMap {
             ((List) existing).add(nodes);
         } else {
             // ScoreNode[]
-            ArrayList tmp = new ArrayList();
-            tmp.add(existing);
+            List<ScoreNode[]> tmp = new ArrayList<ScoreNode[]>();
+            tmp.add((ScoreNode[]) existing);
             tmp.add(nodes);
             existing = tmp;
             map.put(key, existing);
@@ -83,8 +83,8 @@ public final class ScoreNodeMap {
         if (sn == null) {
             return null;
         } else if (sn instanceof List) {
-            List list = (List) sn;
-            return (ScoreNode[][]) list.toArray(new ScoreNode[list.size()][]);
+            List<ScoreNode[]> list = (List<ScoreNode[]>) sn;
+            return list.toArray(new ScoreNode[list.size()][]);
         } else {
             // ScoreNode[]
             return new ScoreNode[][]{(ScoreNode[]) sn};
