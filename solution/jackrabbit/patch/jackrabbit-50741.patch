diff --git a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/SQLPathTest.java b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/SQLPathTest.java
index 415061c..5f3eb6d 100644
--- a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/SQLPathTest.java
+++ b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/query/SQLPathTest.java
@@ -21,6 +21,9 @@ import javax.jcr.RepositoryException;
 import javax.jcr.NodeIterator;
 import javax.jcr.Session;
 import javax.jcr.util.TraversingItemVisitor;
+
+import org.apache.jackrabbit.test.NotExecutableException;
+
 import java.util.ArrayList;
 import java.util.List;
 
@@ -66,8 +69,9 @@ public class SQLPathTest extends AbstractQueryTest {
 
     /**
      * Tests if &lt;somepath>/% returns the descendants of &lt;somepath>.
+     * @throws NotExecutableException 
      */
-    public void testDescendantTestRoot() throws RepositoryException {
+    public void testDescendantTestRoot() throws RepositoryException, NotExecutableException {
         String sql = getStatement(testRoot + "/%");
         executeSqlQuery(session, sql, getDescendants(testRootNode));
     }
@@ -75,8 +79,9 @@ public class SQLPathTest extends AbstractQueryTest {
     /**
      * Tests if &lt;somepath>/% returns no nodes if node at &lt;somepath>
      * is a leaf.
+     * @throws NotExecutableException 
      */
-    public void testDescendantLeaf() throws RepositoryException {
+    public void testDescendantLeaf() throws RepositoryException, NotExecutableException {
         // find leaf
         Node leaf = testRootNode;
         while (leaf.hasNodes()) {
@@ -90,8 +95,9 @@ public class SQLPathTest extends AbstractQueryTest {
      * Tests if &lt;somepath>/%/&lt;nodename> OR &lt;somepath>/&lt;nodename>
      * returns nodes with name &lt;nodename> which are descendants of
      * node at <code>testroot</code>.
+     * @throws NotExecutableException 
      */
-    public void testDescendantSelfTestRoot() throws RepositoryException {
+    public void testDescendantSelfTestRoot() throws RepositoryException, NotExecutableException {
         // get first node which is two levels deeper than node at testroot
         Node n = null;
         for (NodeIterator it = testRootNode.getNodes(); it.hasNext();) {
@@ -118,8 +124,9 @@ public class SQLPathTest extends AbstractQueryTest {
 
     /**
      * Tests if /% AND NOT /%/% returns the child nodes of the root node.
+     * @throws NotExecutableException 
      */
-    public void testChildAxisRoot() throws RepositoryException {
+    public void testChildAxisRoot() throws RepositoryException, NotExecutableException {
         String sql = getStatement("/%");
         sql += " AND NOT " + jcrPath + " LIKE '/%/%'";
         Node[] nodes = toArray(session.getRootNode().getNodes());
@@ -129,8 +136,9 @@ public class SQLPathTest extends AbstractQueryTest {
     /**
      * Tests if &lt;somepath>/% AND NOT &lt;somepath>/%/% returns the child
      * nodes of node at &lt;somepath>.
+     * @throws NotExecutableException 
      */
-    public void testChildAxisTestRoot() throws RepositoryException {
+    public void testChildAxisTestRoot() throws RepositoryException, NotExecutableException {
         String sql = getStatement(testRoot + "/%");
         sql += " AND NOT " + jcrPath + " LIKE '" + testRoot + "/%/%'";
         Node[] nodes = toArray(testRootNode.getNodes());
@@ -140,8 +148,9 @@ public class SQLPathTest extends AbstractQueryTest {
     /**
      * Tests if &lt;somepath>/% AND NOT &lt;somepath>/%/% returns no nodes
      * if the node at &lt;somepath> is a leaf.
+     * @throws NotExecutableException 
      */
-    public void testChildAxisLeaf() throws RepositoryException {
+    public void testChildAxisLeaf() throws RepositoryException, NotExecutableException {
         // find leaf
         Node leaf = testRootNode;
         while (leaf.hasNodes()) {
