diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/MultiIndex.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/MultiIndex.java
index c374f2a..b95ca7e 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/MultiIndex.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/MultiIndex.java
@@ -436,7 +436,7 @@ public class MultiIndex {
 
             // flush whole index when volatile index has been commited.
             if (flush) {
-                flush();
+                internalFlush();
             }
         } finally {
             synchronized (updateMonitor) {
@@ -781,7 +781,7 @@ public class MultiIndex {
                 log.error("Exception while closing search index.", e);
             }
             try {
-                flush();
+                internalFlush();
             } catch (IOException e) {
                 log.error("Exception while closing search index.", e);
             }
@@ -881,11 +881,33 @@ public class MultiIndex {
 
     /**
      * Flushes this <code>MultiIndex</code>. Persists all pending changes and
-     * resets the redo log.
+     * resets the redo log. When this method returned the {@link #multiReader}
+     * is released and and set to <code>null</code>.
      *
      * @throws IOException if the flush fails.
      */
     void flush() throws IOException {
+        synchronized (updateMonitor) {
+            updateInProgress = true;
+        }
+        try {
+            internalFlush();
+        } finally {
+            synchronized (updateMonitor) {
+                updateInProgress = false;
+                updateMonitor.notifyAll();
+                releaseMultiReader();
+            }
+        }
+    }
+
+    /**
+     * Flushes this <code>MultiIndex</code>. Persists all pending changes and
+     * resets the redo log.
+     *
+     * @throws IOException if the flush fails.
+     */
+    private void internalFlush() throws IOException {
         synchronized (this) {
             // commit volatile index
             executeAndLog(new Start(Action.INTERNAL_TRANSACTION));
@@ -1154,18 +1176,7 @@ public class MultiIndex {
                 if (redoLog.hasEntries()) {
                     log.debug("Flushing index after being idle for "
                             + idleTime + " ms.");
-                    synchronized (updateMonitor) {
-                        updateInProgress = true;
-                    }
-                    try {
-                        flush();
-                    } finally {
-                        synchronized (updateMonitor) {
-                            updateInProgress = false;
-                            updateMonitor.notifyAll();
-                            releaseMultiReader();
-                        }
-                    }
+                    flush();
                 }
             } catch (IOException e) {
                 log.error("Unable to commit volatile index", e);
