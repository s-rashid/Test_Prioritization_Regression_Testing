diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/data/DataStore.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/data/DataStore.java
index 5bfd8d1..1a788e8 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/data/DataStore.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/data/DataStore.java
@@ -74,54 +74,54 @@ public interface DataStore {
 
     /**
      * From now on, update the modified date of an object even when accessing it.
-     * Usually, the modified date is only updated when creating a new object, 
+     * Usually, the modified date is only updated when creating a new object,
      * or when a new link is added to an existing object. When this setting is enabled,
      * even getLength() will update the modified date.
-     * 
+     *
      * @param before - update the modified date to the current time if it is older than this value
      */
     void updateModifiedDateOnAccess(long before);
 
     /**
      * Delete objects that have a modified date older than the specified date.
-     * 
+     *
      * @param min the minimum time
      * @return the number of data records deleted
-     * @throws DataStoreException 
+     * @throws DataStoreException
      */
     int deleteAllOlderThan(long min) throws DataStoreException;
-    
+
     /**
      * Get all identifiers.
-     * 
+     *
      * @return an iterator over all DataIdentifier objects
      * @throws DataStoreException if the list could not be read
      */
     Iterator getAllIdentifiers() throws DataStoreException;
-    
+
     /**
      * Initialized the data store
-     * 
+     *
      * @param homeDir the home directory of the repository
-     * @throws RepositoryException 
+     * @throws RepositoryException
      */
     void init(String homeDir) throws RepositoryException;
 
     /**
      * Get the minimum size of an object that should be stored in this data store.
      * Depending on the overhead and configuration, each store may return a different value.
-     * 
+     *
      * @return the minimum size
      */
     int getMinRecordLength();
 
     /**
      * Close the data store
-     * 
+     *
      * @throws DataStoreException if a problem occured
      */
     void close() throws DataStoreException;
-    
+
     /**
      * Clear the in-use list. This is only used for testing to make the the garbage collection
      * think that objects are no longer in use.
