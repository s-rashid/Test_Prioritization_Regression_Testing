diff --git a/contrib/spi/jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/operation/RemoveVersion.java b/contrib/spi/jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/operation/RemoveVersion.java
deleted file mode 100644
index fbd2932..0000000
--- a/contrib/spi/jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/operation/RemoveVersion.java
+++ /dev/null
@@ -1,92 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.jackrabbit.jcr2spi.operation;
-
-import org.apache.jackrabbit.jcr2spi.state.ItemState;
-import org.apache.jackrabbit.jcr2spi.state.NodeState;
-import org.apache.jackrabbit.jcr2spi.hierarchy.NodeEntry;
-import org.apache.jackrabbit.jcr2spi.hierarchy.PropertyEntry;
-import org.apache.jackrabbit.jcr2spi.version.VersionManager;
-import org.apache.jackrabbit.spi.ItemId;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import javax.jcr.AccessDeniedException;
-import javax.jcr.UnsupportedRepositoryOperationException;
-import javax.jcr.RepositoryException;
-import javax.jcr.version.VersionException;
-import java.util.Iterator;
-
-/**
- * <code>RemoveVersion</code>...
- */
-public class RemoveVersion extends Remove {
-
-    private static Logger log = LoggerFactory.getLogger(RemoveVersion.class);
-
-    private NodeEntry versionableEntry = null;
-
-    protected RemoveVersion(ItemState removeState, NodeState parent, VersionManager mgr) {
-        super(removeState, parent);
-        try {
-            versionableEntry = mgr.getVersionableNodeEntry((NodeState) removeState);
-        } catch (RepositoryException e) {
-            log.warn("Internal error", e);
-        }
-    }
-
-    //----------------------------------------------------------< Operation >---
-    /**
-     * @see Operation#accept(OperationVisitor)
-     */
-    public void accept(OperationVisitor visitor) throws AccessDeniedException, UnsupportedRepositoryOperationException, VersionException, RepositoryException {
-        visitor.visit(this);
-    }
-
-    /**
-     * Invalidates the <code>NodeState</code> that has been updated and all
-     * its decendants. Second, the parent state gets invalidated.
-     *
-     * @see Operation#persisted()
-     */
-    public void persisted() {
-        // invaliate the versionable node as well (version related properties)
-        if (versionableEntry != null) {
-            Iterator propEntries = versionableEntry.getPropertyEntries();
-            while (propEntries.hasNext()) {
-                PropertyEntry pe = (PropertyEntry) propEntries.next();
-                pe.invalidate(false);
-            }
-            versionableEntry.invalidate(false);
-        }
-
-        // invalidate the versionhistory entry and all its children
-        // in order to the the v-graph recalculated
-        removeState.getHierarchyEntry().getParent().invalidate(true);
-    }
-
-    //----------------------------------------< Access Operation Parameters >---
-    public ItemId getRemoveId() {
-        return removeState.getWorkspaceId();
-    }
-
-    //------------------------------------------------------------< Factory >---
-    public static Operation create(NodeState versionState, NodeState vhState, VersionManager mgr) {
-        RemoveVersion rm = new RemoveVersion(versionState, vhState, mgr);
-        return rm;
-    }
-}
