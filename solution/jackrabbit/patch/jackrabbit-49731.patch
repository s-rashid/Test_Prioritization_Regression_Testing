diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/StateChangeDispatcher.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/StateChangeDispatcher.java
index 8f864d1..d129b1f 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/StateChangeDispatcher.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/StateChangeDispatcher.java
@@ -23,7 +23,6 @@ import org.apache.jackrabbit.spi.Name;
 import java.lang.ref.Reference;
 import java.lang.ref.WeakReference;
 import java.util.Collection;
-import java.util.Iterator;
 
 /**
  * Component that holds references to listeners interested in changes to item
@@ -35,13 +34,13 @@ public class StateChangeDispatcher {
      * Simple item state listeners.
      * A copy on write array list is used so that no synchronization is required.
      */
-    private final Collection listeners = new CopyOnWriteArrayList();
+    private final Collection<WeakReference<ItemStateListener>> listeners = new CopyOnWriteArrayList();
 
     /**
      * Node state listeners
      * A copy on write array list is used so that no synchronization is required.
      */
-    private final transient Collection nsListeners = new CopyOnWriteArrayList();
+    private final transient Collection<WeakReference<NodeStateListener>> nsListeners = new CopyOnWriteArrayList();
 
     /**
      * Add an <code>ItemStateListener</code>.
@@ -49,18 +48,17 @@ public class StateChangeDispatcher {
      */
     public void addListener(ItemStateListener listener) {
         assert getReference(listeners, listener) == null;
-        listeners.add(new WeakReference(listener));
+        listeners.add(new WeakReference<ItemStateListener>(listener));
 
         if (listener instanceof NodeStateListener) {
-            assert getReference(nsListeners, listener) == null;
-            nsListeners.add(new WeakReference(listener));
+            NodeStateListener nsListener = (NodeStateListener) listener;
+            assert getReference(nsListeners, nsListener) == null;
+            nsListeners.add(new WeakReference<NodeStateListener>(nsListener));
         }
     }
-    
-    private Reference getReference(Collection coll, ItemStateListener listener) {
-        Iterator iter = coll.iterator();
-        while (iter.hasNext()) {
-            Reference ref = (Reference) iter.next();
+
+    private <T> Reference<T> getReference(Collection< ? extends Reference<T>> coll, ItemStateListener listener) {
+        for (Reference<T> ref : coll) {
             Object o = ref.get();
             if (o == listener) {
                 return ref;
@@ -88,10 +86,8 @@ public class StateChangeDispatcher {
      * @param created created state.
      */
     public void notifyStateCreated(ItemState created) {
-        Iterator iter = listeners.iterator();
-        while (iter.hasNext()) {
-            Reference ref = (Reference) iter.next();
-            ItemStateListener l = (ItemStateListener) ref.get();
+        for (Reference<ItemStateListener> ref : listeners) {
+            ItemStateListener l = ref.get();
             if (l != null) {
                 l.stateCreated(created);
             }
@@ -103,10 +99,8 @@ public class StateChangeDispatcher {
      * @param modified modified state.
      */
     public void notifyStateModified(ItemState modified) {
-        Iterator iter = listeners.iterator();
-        while (iter.hasNext()) {
-            Reference ref = (Reference) iter.next();
-            ItemStateListener l = (ItemStateListener) ref.get();
+        for (Reference<ItemStateListener> ref : listeners) {
+            ItemStateListener l = ref.get();
             if (l != null) {
                 l.stateModified(modified);
             }
@@ -118,13 +112,11 @@ public class StateChangeDispatcher {
      * @param destroyed destroyed state.
      */
     public void notifyStateDestroyed(ItemState destroyed) {
-        Iterator iter = listeners.iterator();
-        while (iter.hasNext()) {
-            Reference ref = (Reference) iter.next();
-            ItemStateListener l = (ItemStateListener) ref.get();
+        for (Reference<ItemStateListener> ref : listeners) {
+            ItemStateListener l = ref.get();
             if (l != null) {
                 l.stateDestroyed(destroyed);
-            }            
+            }
         }
     }
 
@@ -133,13 +125,11 @@ public class StateChangeDispatcher {
      * @param discarded discarded state.
      */
     public void notifyStateDiscarded(ItemState discarded) {
-        Iterator iter = listeners.iterator();
-        while (iter.hasNext()) {
-            Reference ref = (Reference) iter.next();
-            ItemStateListener l = (ItemStateListener) ref.get();
+        for (Reference<ItemStateListener> ref : listeners) {
+            ItemStateListener l = ref.get();
             if (l != null) {
                 l.stateDiscarded(discarded);
-            }               
+            }
         }
     }
 
@@ -151,13 +141,11 @@ public class StateChangeDispatcher {
      * @param id    id of new node
      */
     public void notifyNodeAdded(NodeState state, Name name, int index, NodeId id) {
-        Iterator iter = nsListeners.iterator();
-        while (iter.hasNext()) {
-            Reference ref = (Reference) iter.next();
-            NodeStateListener n = (NodeStateListener) ref.get();
+        for (Reference<NodeStateListener> ref : nsListeners) {
+            NodeStateListener n = ref.get();
             if (n != null) {
                 n.nodeAdded(state, name, index, id);
-            }                 
+            }
         }
     }
 
@@ -166,13 +154,11 @@ public class StateChangeDispatcher {
      * @param state node state that changed
      */
     public void notifyNodesReplaced(NodeState state) {
-        Iterator iter = nsListeners.iterator();
-        while (iter.hasNext()) {
-            Reference ref = (Reference) iter.next();
-            NodeStateListener n = (NodeStateListener) ref.get();
+        for (Reference<NodeStateListener> ref : nsListeners) {
+            NodeStateListener n = ref.get();
             if (n != null) {
                 n.nodesReplaced(state);
-            }              
+            }
         }
     }
 
@@ -181,13 +167,11 @@ public class StateChangeDispatcher {
      * @param state node state that changed
      */
     public void notifyNodeModified(NodeState state) {
-        Iterator iter = nsListeners.iterator();
-        while (iter.hasNext()) {
-            Reference ref = (Reference) iter.next();
-            NodeStateListener n = (NodeStateListener) ref.get();
+        for (Reference<NodeStateListener> ref : nsListeners) {
+            NodeStateListener n = ref.get();
             if (n != null) {
                 n.nodeModified(state);
-            }               
+            }
         }
     }
 
@@ -199,13 +183,11 @@ public class StateChangeDispatcher {
      * @param id    id of new node
      */
     public void notifyNodeRemoved(NodeState state, Name name, int index, NodeId id) {
-        Iterator iter = nsListeners.iterator();
-        while (iter.hasNext()) {
-            Reference ref = (Reference) iter.next();
-            NodeStateListener n = (NodeStateListener) ref.get();
+        for (Reference<NodeStateListener> ref : nsListeners) {
+            NodeStateListener n = ref.get();
             if (n != null) {
                 n.nodeRemoved(state, name, index, id);
-            }               
+            }
         }
     }
