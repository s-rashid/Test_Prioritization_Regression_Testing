diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java
index 958a7fd..3a6b676 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/SessionItemStateManager.java
@@ -37,6 +37,7 @@ import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Set;
 
 import javax.jcr.InvalidItemStateException;
 import javax.jcr.ItemNotFoundException;
@@ -426,8 +427,30 @@ public class SessionItemStateManager
                 }
 
                 if (depth < 1) {
-                    // not a descendant
-                    continue;
+                    // TODO SN: move this to HierarchyManager
+                    // if state is shareable, it has actually more than one parent
+                    if (state.isNode()) {
+                        NodeState ns = (NodeState) state;
+                        if (ns.isShareable()) {
+                            Set sharedSet = ns.getSharedSet();
+                            if (ns.hasOverlayedState()) {
+                                sharedSet = ((NodeState) ns.getOverlayedState()).getSharedSet();
+                            }
+                            Iterator sharedParentIds = sharedSet.iterator();
+                            while (sharedParentIds.hasNext()) {
+                                NodeId sharedParentId = (NodeId) sharedParentIds.next();
+                                int depth2 = hierMgr.getRelativeDepth(parentId, sharedParentId);
+                                if (depth2 >= 0) {
+                                    depth = depth2 + 1;
+                                    break;
+                                }
+                            }
+                        }
+                    }
+                    if (depth < 1) {
+                        // not a descendant
+                        continue;
+                    }
                 }
 
                 // ensure capacity
