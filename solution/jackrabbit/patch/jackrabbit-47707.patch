diff --git a/jackrabbit-core/src/test/java/org/apache/jackrabbit/api/jsr283/query/qom/NodeLocalNameTest.java b/jackrabbit-core/src/test/java/org/apache/jackrabbit/api/jsr283/query/qom/NodeLocalNameTest.java
index 43e1aeb..63bbd2a 100644
--- a/jackrabbit-core/src/test/java/org/apache/jackrabbit/api/jsr283/query/qom/NodeLocalNameTest.java
+++ b/jackrabbit-core/src/test/java/org/apache/jackrabbit/api/jsr283/query/qom/NodeLocalNameTest.java
@@ -16,12 +16,15 @@
  */
 package org.apache.jackrabbit.api.jsr283.query.qom;
 
-import javax.jcr.RepositoryException;
-import javax.jcr.Value;
+import java.util.Calendar;
+
 import javax.jcr.Node;
 import javax.jcr.PropertyType;
+import javax.jcr.RepositoryException;
+import javax.jcr.Value;
 import javax.jcr.query.Query;
-import java.util.Calendar;
+
+import org.apache.jackrabbit.spi.commons.query.qom.Operator;
 
 /**
  * <code>NodeLocalNameTest</code> checks if conversion of literals is correctly
@@ -53,32 +56,32 @@ public class NodeLocalNameTest extends AbstractQOMTest {
 
     public void testStringLiteral() throws RepositoryException {
         Value literal = superuser.getValueFactory().createValue(nodeLocalName);
-        Query q = createQuery(JCR_OPERATOR_EQUAL_TO, literal);
+        Query q = createQuery(Operator.EQ, literal);
         checkResult(q.execute(), new Node[]{node1});
     }
 
     public void testStringLiteralInvalidName() throws RepositoryException {
         Value literal = superuser.getValueFactory().createValue("[" + nodeLocalName);
-        Query q = createQuery(JCR_OPERATOR_EQUAL_TO, literal);
+        Query q = createQuery(Operator.EQ, literal);
         checkResult(q.execute(), new Node[]{});
     }
 
     public void testBinaryLiteral() throws RepositoryException {
         Value literal = superuser.getValueFactory().createValue(
                 nodeLocalName, PropertyType.BINARY);
-        Query q = createQuery(JCR_OPERATOR_EQUAL_TO, literal);
+        Query q = createQuery(Operator.EQ, literal);
         checkResult(q.execute(), new Node[]{node1});
     }
 
     public void testDateLiteral() throws RepositoryException {
         Value literal = superuser.getValueFactory().createValue(Calendar.getInstance());
-        Query q = createQuery(JCR_OPERATOR_EQUAL_TO, literal);
+        Query q = createQuery(Operator.EQ, literal);
         checkResult(q.execute(), new Node[]{});
     }
 
     public void testDoubleLiteral() throws RepositoryException {
         Value literal = superuser.getValueFactory().createValue(Math.PI);
-        Query q = createQuery(JCR_OPERATOR_EQUAL_TO, literal);
+        Query q = createQuery(Operator.EQ, literal);
         checkResult(q.execute(), new Node[]{});
     }
 
@@ -88,37 +91,37 @@ public class NodeLocalNameTest extends AbstractQOMTest {
 
     public void testLongLiteral() throws RepositoryException {
         Value literal = superuser.getValueFactory().createValue(283);
-        Query q = createQuery(JCR_OPERATOR_EQUAL_TO, literal);
+        Query q = createQuery(Operator.EQ, literal);
         checkResult(q.execute(), new Node[]{});
     }
 
     public void testBooleanLiteral() throws RepositoryException {
         Value literal = superuser.getValueFactory().createValue(true);
-        Query q = createQuery(JCR_OPERATOR_EQUAL_TO, literal);
+        Query q = createQuery(Operator.EQ, literal);
         checkResult(q.execute(), new Node[]{});
     }
 
     public void testNameLiteral() throws RepositoryException {
         Value literal = superuser.getValueFactory().createValue(
                 nodeLocalName, PropertyType.NAME);
-        Query q = createQuery(JCR_OPERATOR_EQUAL_TO, literal);
+        Query q = createQuery(Operator.EQ, literal);
         checkResult(q.execute(), new Node[]{node1});
     }
 
     public void testPathLiteral() throws RepositoryException {
         Value literal = superuser.getValueFactory().createValue(
                 nodeLocalName, PropertyType.PATH);
-        Query q = createQuery(JCR_OPERATOR_EQUAL_TO, literal);
+        Query q = createQuery(Operator.EQ, literal);
         checkResult(q.execute(), new Node[]{node1});
 
         literal = superuser.getValueFactory().createValue(
                 node1.getPath(), PropertyType.PATH);
-        q = createQuery(JCR_OPERATOR_EQUAL_TO, literal);
+        q = createQuery(Operator.EQ, literal);
         checkResult(q.execute(), new Node[]{});
 
         literal = superuser.getValueFactory().createValue(
                 nodeName1 + "/" + nodeName1, PropertyType.PATH);
-        q = createQuery(JCR_OPERATOR_EQUAL_TO, literal);
+        q = createQuery(Operator.EQ, literal);
         checkResult(q.execute(), new Node[]{});
     }
 
@@ -128,7 +131,7 @@ public class NodeLocalNameTest extends AbstractQOMTest {
         }
         node1.save();
         Value literal = superuser.getValueFactory().createValue(node1);
-        Query q = createQuery(JCR_OPERATOR_EQUAL_TO, literal);
+        Query q = createQuery(Operator.EQ, literal);
         checkResult(q.execute(), new Node[]{});
     }
 
@@ -141,36 +144,36 @@ public class NodeLocalNameTest extends AbstractQOMTest {
     }
 
     public void testEqualTo() throws RepositoryException {
-        checkOperator(JCR_OPERATOR_EQUAL_TO, false, true, false);
+        checkOperator(Operator.EQ, false, true, false);
     }
 
     public void testGreaterThan() throws RepositoryException {
-        checkOperator(JCR_OPERATOR_GREATER_THAN, true, false, false);
+        checkOperator(Operator.GT, true, false, false);
     }
 
     public void testGreaterThanOrEqualTo() throws RepositoryException {
-        checkOperator(JCR_OPERATOR_GREATER_THAN_OR_EQUAL_TO, true, true, false);
+        checkOperator(Operator.GE, true, true, false);
     }
 
     public void testLessThan() throws RepositoryException {
-        checkOperator(JCR_OPERATOR_LESS_THAN, false, false, true);
+        checkOperator(Operator.LT, false, false, true);
     }
 
     public void testLessThanOrEqualTo() throws RepositoryException {
-        checkOperator(JCR_OPERATOR_LESS_THAN_OR_EQUAL_TO, false, true, true);
+        checkOperator(Operator.LE, false, true, true);
     }
 
     public void testLike() throws RepositoryException {
-        checkOperator(JCR_OPERATOR_LIKE, false, true, false);
+        checkOperator(Operator.LIKE, false, true, false);
     }
 
     public void testNotEqualTo() throws RepositoryException {
-        checkOperator(JCR_OPERATOR_NOT_EQUAL_TO, true, false, true);
+        checkOperator(Operator.NE, true, false, true);
     }
 
     //------------------------------< helper >----------------------------------
 
-    private void checkOperator(String operator,
+    private void checkOperator(Operator operator,
                                boolean matchesLesser,
                                boolean matchesEqual,
                                boolean matchesGreater)
@@ -180,9 +183,8 @@ public class NodeLocalNameTest extends AbstractQOMTest {
         checkOperatorSingleLiteral(createLexicographicallyGreater(nodeLocalName), operator, matchesGreater);
     }
 
-    private void checkOperatorSingleLiteral(String literal,
-                                            String operator,
-                                            boolean matches)
+    private void checkOperatorSingleLiteral(
+            String literal, Operator operator, boolean matches)
             throws RepositoryException {
         Value value = superuser.getValueFactory().createValue(literal);
         Query q = createQuery(operator, value);
@@ -201,17 +203,16 @@ public class NodeLocalNameTest extends AbstractQOMTest {
         return tmp.toString();
     }
 
-    private Query createQuery(String operator, Value literal)
+    private Query createQuery(Operator operator, Value literal)
             throws RepositoryException {
         return qomFactory.createQuery(
                 qomFactory.selector(testNodeType, "s"),
                 qomFactory.and(
                         qomFactory.childNode("s", testRoot),
-                        qomFactory.comparison(
+                        operator.comparison(
+                                qomFactory,
                                 qomFactory.nodeLocalName("s"),
-                                operator,
-                                qomFactory.literal(literal)
-                        )
+                                qomFactory.literal(literal))
                 ), null, null);
     }
 }
