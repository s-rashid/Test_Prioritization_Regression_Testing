diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/JackrabbitRepositoryStub.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/JackrabbitRepositoryStub.java
index 43055a3..ea46c24 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/JackrabbitRepositoryStub.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/JackrabbitRepositoryStub.java
@@ -22,6 +22,8 @@ import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.security.Principal;
+import java.security.acl.Group;
 import java.util.Arrays;
 import java.util.Calendar;
 import java.util.HashSet;
@@ -43,6 +45,7 @@ import org.apache.jackrabbit.api.JackrabbitNodeTypeManager;
 import org.apache.jackrabbit.api.JackrabbitWorkspace;
 import org.apache.jackrabbit.core.config.RepositoryConfig;
 import org.apache.jackrabbit.core.retention.RetentionPolicyImpl;
+import org.apache.jackrabbit.test.NotExecutableException;
 import org.apache.jackrabbit.test.RepositoryStub;
 import org.apache.jackrabbit.test.RepositoryStubException;
 
@@ -360,4 +363,36 @@ public class JackrabbitRepositoryStub extends RepositoryStub {
         resource.setProperty("jcr:lastModified", Calendar.getInstance());
     }
 
+    @Override
+    public Principal getKnownPrincipal(Session session) throws RepositoryException {
+        
+        Principal knownPrincipal = null;
+        
+        if (session instanceof SessionImpl) {
+            for (Principal p : ((SessionImpl)session).getSubject().getPrincipals()) {
+                if (! (p instanceof Group)) {
+                    knownPrincipal = p;
+                }
+            }
+        }
+        
+        if (knownPrincipal != null) {
+            return knownPrincipal;
+        }
+        else {
+            throw new RepositoryException("no applicable principal found");
+        }
+    }
+
+    private static Principal UNKNOWN_PRINCIPAL = new Principal() {
+        public String getName() {
+            return "an_unknown_user";
+        }
+    };
+    
+    @Override
+    public Principal getUnknownPrincipal(Session session) throws RepositoryException, NotExecutableException {
+        return UNKNOWN_PRINCIPAL;
+    }
+
 }
