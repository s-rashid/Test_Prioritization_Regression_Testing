diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/JackrabbitIndexSearcher.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/JackrabbitIndexSearcher.java
index b460a78..91f3a9d 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/JackrabbitIndexSearcher.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/JackrabbitIndexSearcher.java
@@ -20,7 +20,10 @@ import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.Sort;
 import org.apache.lucene.index.IndexReader;
+import org.apache.jackrabbit.core.query.lucene.constraint.EvaluationContext;
 import org.apache.jackrabbit.core.SessionImpl;
+import org.apache.jackrabbit.core.state.ItemStateManager;
+import org.apache.jackrabbit.spi.Name;
 
 import java.io.IOException;
 
@@ -28,7 +31,9 @@ import java.io.IOException;
  * <code>JackrabbitIndexSearcher</code> implements an index searcher with
  * jackrabbit specific optimizations.
  */
-public class JackrabbitIndexSearcher extends IndexSearcher {
+public class JackrabbitIndexSearcher
+        extends IndexSearcher
+        implements EvaluationContext {
 
     /**
      * The session that executes the query.
@@ -41,15 +46,24 @@ public class JackrabbitIndexSearcher extends IndexSearcher {
     private final IndexReader reader;
 
     /**
+     * The item state manager of the workspace.
+     */
+    private final ItemStateManager ism;
+
+    /**
      * Creates a new jackrabbit index searcher.
      *
      * @param s the session that executes the query.
      * @param r the index reader.
+     * @param ism the shared item state manager.
      */
-    public JackrabbitIndexSearcher(SessionImpl s, IndexReader r) {
+    public JackrabbitIndexSearcher(SessionImpl s,
+                                   IndexReader r,
+                                   ItemStateManager ism) {
         super(r);
         this.session = s;
         this.reader = r;
+        this.ism = ism;
     }
 
     /**
@@ -58,15 +72,17 @@ public class JackrabbitIndexSearcher extends IndexSearcher {
      * @param query           the query to execute.
      * @param sort            the sort criteria.
      * @param resultFetchHint a hint on how many results should be fetched.
+     * @param selectorName    the single selector name for the query hits.
      * @return the query hits.
      * @throws IOException if an error occurs while executing the query.
      */
     public MultiColumnQueryHits execute(Query query,
                                         Sort sort,
-                                        long resultFetchHint)
+                                        long resultFetchHint,
+                                        Name selectorName)
             throws IOException {
-        return new QueryHitsAdapter(evaluate(query, sort, resultFetchHint),
-                QueryImpl.DEFAULT_SELECTOR_NAME);
+        return new QueryHitsAdapter(
+                evaluate(query, sort, resultFetchHint), selectorName);
     }
 
     /**
@@ -96,6 +112,8 @@ public class JackrabbitIndexSearcher extends IndexSearcher {
         return hits;
     }
 
+    //------------------------< EvaluationContext >-----------------------------
+
     /**
      * Evaluates the query and returns the hits that match the query.
      *
@@ -106,4 +124,18 @@ public class JackrabbitIndexSearcher extends IndexSearcher {
     public QueryHits evaluate(Query query) throws IOException {
         return evaluate(query, new Sort(), Integer.MAX_VALUE);
     }
+
+    /**
+     * @return session that executes the query.
+     */
+    public SessionImpl getSession() {
+        return session;
+    }
+
+    /**
+     * @return the item state manager of the workspace.
+     */
+    public ItemStateManager getItemStateManager() {
+        return ism;
+    }
 }
