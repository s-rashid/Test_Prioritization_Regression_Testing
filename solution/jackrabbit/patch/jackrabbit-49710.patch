diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/retention/RetentionRegistryImpl.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/retention/RetentionRegistryImpl.java
index f72c89f..c4b438d 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/retention/RetentionRegistryImpl.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/retention/RetentionRegistryImpl.java
@@ -69,10 +69,10 @@ public class RetentionRegistryImpl implements RetentionRegistry, SynchronousEven
     private final SessionImpl session;
     private final FileSystemResource retentionFile;
 
-    private long holdCnt = 0;
-    private long retentionCnt = 0;
-    
-    private boolean initialized = false;
+    private long holdCnt;
+    private long retentionCnt;
+
+    private boolean initialized;
 
     public RetentionRegistryImpl(SessionImpl session, FileSystem fs) throws RepositoryException {
         this.session = session;
@@ -107,7 +107,7 @@ public class RetentionRegistryImpl implements RetentionRegistry, SynchronousEven
      * node, that entry will be ignored. Upon {@link #close()} of this
      * manager, the file will be updated to reflect the actual set of holds/
      * retentions present and effective in the content.
-     * 
+     *
      * @throws IOException
      * @throws FileSystemException
      */
@@ -194,12 +194,12 @@ public class RetentionRegistryImpl implements RetentionRegistry, SynchronousEven
         writeRetentionFile();
         initialized = false;
     }
-    
+
     private void addHolds(Path nodePath, PropertyImpl p) throws RepositoryException {
         synchronized (holdMap) {
             Hold[] holds = HoldImpl.createFromProperty(p, ((PropertyId) p.getId()).getParentId());
             holdMap.put(nodePath, Arrays.asList(holds));
-            holdCnt++;            
+            holdCnt++;
         }
     }
 
@@ -284,7 +284,7 @@ public class RetentionRegistryImpl implements RetentionRegistry, SynchronousEven
         if (element != null) {
             rp = (RetentionPolicy) element.get();
         }
-        if (rp == null && checkParent ) {
+        if (rp == null && checkParent) {
             element = retentionMap.map(nodePath.getAncestor(1), true);
             if (element != null) {
                 rp = (RetentionPolicy) element.get();
@@ -341,7 +341,7 @@ public class RetentionRegistryImpl implements RetentionRegistry, SynchronousEven
                 // else: not interested in any other property -> ignore.
 
             } catch (RepositoryException e) {
-                log.warn("Internal error while processing event.",e.getMessage());
+                log.warn("Internal error while processing event.", e.getMessage());
                 // ignore.
             }
         }
