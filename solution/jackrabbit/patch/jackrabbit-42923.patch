diff --git a/contrib/spi/spi2dav/src/main/java/org/apache/jackrabbit/spi2dav/IdURICache.java b/contrib/spi/spi2dav/src/main/java/org/apache/jackrabbit/spi2dav/IdURICache.java
deleted file mode 100644
index 84b23ea..0000000
--- a/contrib/spi/spi2dav/src/main/java/org/apache/jackrabbit/spi2dav/IdURICache.java
+++ /dev/null
@@ -1,92 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.jackrabbit.spi2dav;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.apache.jackrabbit.spi.ItemId;
-
-import java.util.Map;
-import java.util.HashMap;
-
-/**
- * <code>IdURICache</code>...
- */
-class IdURICache {
-
-    private static Logger log = LoggerFactory.getLogger(IdURICache.class);
-
-    private final String workspaceUri;
-
-    private Map idToUriCache = new HashMap();
-    private Map uriToIdCache = new HashMap();
-
-    IdURICache(String workspaceUri) {
-        this.workspaceUri = workspaceUri;
-    }
-
-    public ItemId getItemId(String uri) {
-        return (ItemId) uriToIdCache.get(getCleanUri(uri));
-    }
-
-    public String getUri(ItemId itemId) {
-        return (String) idToUriCache.get(itemId);
-    }
-
-    public boolean containsUri(String uri) {
-        return uriToIdCache.containsKey(getCleanUri(uri));
-    }
-
-    public boolean containsItemId(ItemId itemId) {
-        return idToUriCache.containsKey(itemId);
-    }
-
-    public void add(String uri, ItemId itemId) {
-        if (!uri.startsWith(workspaceUri)) {
-            throw new IllegalArgumentException("Workspace missmatch.");
-        }
-        String cleanUri = getCleanUri(uri);
-        uriToIdCache.put(cleanUri, itemId);
-        idToUriCache.put(itemId, cleanUri);
-        log.debug("Added: ItemId = " + itemId + " URI = " + cleanUri);
-    }
-
-    public void remove(String uri) {
-        String cleanUri = getCleanUri(uri);
-        Object itemId = uriToIdCache.remove(cleanUri);
-        if (itemId != null) {
-            idToUriCache.remove(itemId);
-        }
-        log.debug("Removed: ItemId = " + itemId + " URI = " + cleanUri);
-    }
-
-    public void remove(ItemId itemId) {
-        Object uri = idToUriCache.remove(itemId);
-        if (uri != null) {
-            uriToIdCache.remove(uri);
-        }
-        log.debug("Removed: ItemId = " + itemId + " URI = " + uri);
-    }
-
-    private static String getCleanUri(String uri) {
-        if (uri.endsWith("/")) {
-            return uri.substring(0, uri.length() - 1);
-        } else {
-            return uri;
-        }
-    }
-}
\ No newline at end of file
