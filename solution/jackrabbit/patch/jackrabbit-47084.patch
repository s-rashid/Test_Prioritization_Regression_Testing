diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ObservationManagerImpl.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ObservationManagerImpl.java
index 5c53b17..5b77819 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ObservationManagerImpl.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/ObservationManagerImpl.java
@@ -19,17 +19,22 @@ package org.apache.jackrabbit.core.observation;
 import org.apache.jackrabbit.core.ItemManager;
 import org.apache.jackrabbit.core.SessionImpl;
 import org.apache.jackrabbit.core.NodeId;
+import org.apache.jackrabbit.core.cluster.ClusterNode;
 import org.apache.jackrabbit.core.nodetype.NodeTypeImpl;
 import org.apache.jackrabbit.core.nodetype.NodeTypeManagerImpl;
+import org.apache.jackrabbit.core.security.principal.AdminPrincipal;
 import org.apache.jackrabbit.spi.commons.conversion.NameException;
 import org.apache.jackrabbit.spi.Path;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import javax.jcr.RepositoryException;
+import javax.jcr.UnsupportedRepositoryOperationException;
+import javax.jcr.observation.EventJournal;
 import javax.jcr.observation.EventListener;
 import javax.jcr.observation.EventListenerIterator;
 import javax.jcr.observation.ObservationManager;
+import javax.security.auth.Subject;
 
 /**
  * Each <code>Session</code> instance has its own <code>ObservationManager</code>
@@ -55,6 +60,11 @@ public class ObservationManagerImpl implements ObservationManager, EventStateCol
     private final ItemManager itemMgr;
 
     /**
+     * The cluster node where this session is running.
+     */
+    private final ClusterNode clusterNode;
+
+    /**
      * The <code>ObservationDispatcher</code>
      */
     private final ObservationDispatcher dispatcher;
@@ -80,9 +90,9 @@ public class ObservationManagerImpl implements ObservationManager, EventStateCol
      * @throws NullPointerException if <code>session</code> or <code>itemMgr</code>
      *                              is <code>null</code>.
      */
-    public ObservationManagerImpl(ObservationDispatcher dispatcher,
-                           SessionImpl session,
-                           ItemManager itemMgr) throws NullPointerException {
+    public ObservationManagerImpl(
+            ObservationDispatcher dispatcher, SessionImpl session,
+            ItemManager itemMgr, ClusterNode clusterNode) {
         if (session == null) {
             throw new NullPointerException("session");
         }
@@ -93,6 +103,7 @@ public class ObservationManagerImpl implements ObservationManager, EventStateCol
         this.dispatcher = dispatcher;
         this.session = session;
         this.itemMgr = itemMgr;
+        this.clusterNode = clusterNode;
     }
 
     /**
@@ -220,6 +231,54 @@ public class ObservationManagerImpl implements ObservationManager, EventStateCol
                 isDeep, ids, nodeTypes, noLocal);
     }
 
+    /**
+     * Returns the event journal for this workspace. The events are filtered
+     * according to the passed criteria.
+     *
+     * @param eventTypes A combination of one or more event type constants encoded as a bitmask.
+     * @param absPath an absolute path.
+     * @param isDeep a <code>boolean</code>.
+     * @param uuid array of UUIDs.
+     * @param nodeTypeName array of node type names.
+     * @return the event journal for this repository.
+     * @throws UnsupportedRepositoryOperationException if this repository does
+     *          not support an event journal (cluster journal disabled).
+     * @throws RepositoryException if another error occurs.
+     */
+    public EventJournal getEventJournal(
+            int eventTypes, String absPath, boolean isDeep,
+            String[] uuid, String[] nodeTypeName)
+            throws RepositoryException {
+        if (clusterNode == null) {
+            throw new UnsupportedRepositoryOperationException(
+                    "Event journal is only available in cluster deployments");
+        }
+
+        Subject subject = session.getSubject();
+        if (subject.getPrincipals(AdminPrincipal.class).isEmpty()) {
+            throw new RepositoryException("Only administrator session may " +
+                    "access EventJournal");
+        }
+
+        ObservationManagerImpl obsMgr = (ObservationManagerImpl) session.getWorkspace().getObservationManager();
+        EventFilter filter = obsMgr.createEventFilter(eventTypes, absPath,
+                isDeep, uuid, nodeTypeName, false);
+        return new EventJournalImpl(filter, clusterNode.getJournal(),
+                clusterNode.getId());
+    }
+
+    /**
+     * Returns an unfiltered event journal for this workspace.
+     *
+     * @return the event journal for this repository.
+     * @throws UnsupportedRepositoryOperationException if this repository does
+     *          not support an event journal (cluster journal disabled).
+     * @throws RepositoryException if another error occurs.
+     */
+    public EventJournal getEventJournal() throws RepositoryException {
+        return getEventJournal(-1, "/", true, null, null);
+    }
+
     //------------------------------------------< EventStateCollectionFactory >
 
     /**
@@ -233,4 +292,5 @@ public class ObservationManagerImpl implements ObservationManager, EventStateCol
         esc.setUserData(userData);
         return esc;
     }
+
 }
