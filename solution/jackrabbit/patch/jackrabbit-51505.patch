diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/DocOrderScoreNodeIterator.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/DocOrderScoreNodeIterator.java
index d592056..af3315b 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/DocOrderScoreNodeIterator.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/DocOrderScoreNodeIterator.java
@@ -18,6 +18,7 @@ package org.apache.jackrabbit.core.query.lucene;
 
 import org.apache.jackrabbit.core.ItemManager;
 import org.apache.jackrabbit.core.NodeImpl;
+import org.apache.jackrabbit.core.id.NodeId;
 import org.apache.jackrabbit.spi.Path;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -42,7 +43,7 @@ class DocOrderScoreNodeIterator implements ScoreNodeIterator {
     private ScoreNodeIterator orderedNodes;
 
     /** Unordered list of {@link ScoreNode}[]s. */
-    private final List scoreNodes;
+    private final List<ScoreNode[]> scoreNodes;
 
     /** ItemManager to turn UUIDs into Node instances */
     protected final ItemManager itemMgr;
@@ -64,8 +65,8 @@ class DocOrderScoreNodeIterator implements ScoreNodeIterator {
      *                      selectorIndex.
      */
     DocOrderScoreNodeIterator(ItemManager itemMgr,
-                             List scoreNodes,
-                             int selectorIndex) {
+                              List<ScoreNode[]> scoreNodes,
+                              int selectorIndex) {
         this.itemMgr = itemMgr;
         this.scoreNodes = scoreNodes;
         this.selectorIndex = selectorIndex;
@@ -147,29 +148,29 @@ class DocOrderScoreNodeIterator implements ScoreNodeIterator {
             return;
         }
         long time = System.currentTimeMillis();
-        ScoreNode[][] nodes = (ScoreNode[][]) scoreNodes.toArray(new ScoreNode[scoreNodes.size()][]);
+        ScoreNode[][] nodes = scoreNodes.toArray(new ScoreNode[scoreNodes.size()][]);
 
-        final List invalidIDs = new ArrayList(2);
+        final List<NodeId> invalidIDs = new ArrayList<NodeId>(2);
 
         do {
             if (invalidIDs.size() > 0) {
                 // previous sort run was not successful -> remove failed uuids
-                List tmp = new ArrayList();
-                for (int i = 0; i < nodes.length; i++) {
-                    if (!invalidIDs.contains(nodes[i][selectorIndex].getNodeId())) {
-                        tmp.add(nodes[i]);
+                List<ScoreNode[]> tmp = new ArrayList<ScoreNode[]>();
+                for (ScoreNode[] node : nodes) {
+                    if (!invalidIDs.contains(node[selectorIndex].getNodeId())) {
+                        tmp.add(node);
                     }
                 }
-                nodes = (ScoreNode[][]) tmp.toArray(new ScoreNode[tmp.size()][]);
+                nodes = tmp.toArray(new ScoreNode[tmp.size()][]);
                 invalidIDs.clear();
             }
 
             try {
                 // sort the uuids
-                Arrays.sort(nodes, new Comparator() {
-                    public int compare(Object o1, Object o2) {
-                        ScoreNode n1 = ((ScoreNode[]) o1)[selectorIndex];
-                        ScoreNode n2 = ((ScoreNode[]) o2)[selectorIndex];
+                Arrays.sort(nodes, new Comparator<ScoreNode[]>() {
+                    public int compare(ScoreNode[] o1, ScoreNode[] o2) {
+                        ScoreNode n1 = o1[selectorIndex];
+                        ScoreNode n2 = o2[selectorIndex];
                         // handle null values
                         // null is considered less than any value
                         if (n1 == n2) {
