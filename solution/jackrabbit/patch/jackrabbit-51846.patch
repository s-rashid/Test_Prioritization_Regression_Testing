diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/xml/SessionImporter.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/xml/SessionImporter.java
index 6274ea5..27d5e52 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/xml/SessionImporter.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/xml/SessionImporter.java
@@ -16,15 +16,9 @@
  */
 package org.apache.jackrabbit.core.xml;
 
-import org.apache.jackrabbit.core.id.NodeId;
-import org.apache.jackrabbit.core.NodeImpl;
-import org.apache.jackrabbit.core.SessionImpl;
-import org.apache.jackrabbit.core.security.authorization.Permission;
-import org.apache.jackrabbit.core.util.ReferenceChangeTracker;
-import org.apache.jackrabbit.spi.Name;
-import org.apache.jackrabbit.spi.commons.name.NameConstants;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Stack;
 
 import javax.jcr.AccessDeniedException;
 import javax.jcr.ImportUUIDBehavior;
@@ -34,11 +28,20 @@ import javax.jcr.Property;
 import javax.jcr.PropertyType;
 import javax.jcr.RepositoryException;
 import javax.jcr.Value;
+import javax.jcr.ValueFormatException;
 import javax.jcr.nodetype.ConstraintViolationException;
 import javax.jcr.nodetype.NodeDefinition;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Stack;
+
+import org.apache.jackrabbit.core.NodeImpl;
+import org.apache.jackrabbit.core.SessionImpl;
+import org.apache.jackrabbit.core.id.NodeId;
+import org.apache.jackrabbit.core.nodetype.PropDef;
+import org.apache.jackrabbit.core.security.authorization.Permission;
+import org.apache.jackrabbit.core.util.ReferenceChangeTracker;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.commons.name.NameConstants;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * <code>SessionImporter</code> ...
@@ -51,7 +54,7 @@ public class SessionImporter implements Importer {
     private final NodeImpl importTargetNode;
     private final int uuidBehavior;
 
-    private Stack parents;
+    private Stack<NodeImpl> parents;
 
     /**
      * helper object that keeps track of remapped uuid's and imported reference
@@ -60,26 +63,71 @@ public class SessionImporter implements Importer {
     private final ReferenceChangeTracker refTracker;
 
     /**
+     * Importer for protected nodes.
+     */
+    private ProtectedNodeImporter currentNodeImporter;
+
+    /**
+     * Importer for protected items.
+     */
+    private final ProtectedItemHandling protectedItemHandling;
+
+    /**
      * Creates a new <code>SessionImporter</code> instance.
      *
-     * @param importTargetNode
-     * @param session
+     * @param importTargetNode the target node
+     * @param session          session
      * @param uuidBehavior     any of the constants declared by
      *                         {@link javax.jcr.ImportUUIDBehavior}
      */
     public SessionImporter(NodeImpl importTargetNode,
                            SessionImpl session,
                            int uuidBehavior) {
+        this(importTargetNode, session, uuidBehavior, null);
+    }
+
+    /**
+     * Creates a new <code>SessionImporter</code> instance.
+     *
+     * @param importTargetNode the target node
+     * @param session session
+     * @param uuidBehavior the uuid behaviro
+     * @param protectedItemHandling protected item handling
+     */
+    public SessionImporter(NodeImpl importTargetNode, SessionImpl session,
+                           int uuidBehavior,
+                           ProtectedItemHandling protectedItemHandling) {
         this.importTargetNode = importTargetNode;
         this.session = session;
         this.uuidBehavior = uuidBehavior;
 
+        this.protectedItemHandling = protectedItemHandling == null
+                ? new ProtectedItemHandling()
+                : protectedItemHandling;
         refTracker = new ReferenceChangeTracker();
 
-        parents = new Stack();
+        parents = new Stack<NodeImpl>();
         parents.push(importTargetNode);
     }
 
+    /**
+     * make sure the editing session is allowed create nodes with a
+     * specified node type (and ev. mixins),<br>
+     * NOTE: this check is not executed in a single place as the parent
+     * may change in case of
+     * {@link javax.jcr.ImportUUIDBehavior#IMPORT_UUID_COLLISION_REPLACE_EXISTING IMPORT_UUID_COLLISION_REPLACE_EXISTING}.
+     *  
+     * @param parent parent node
+     * @param nodeName the name
+     * @throws RepositoryException if an error occurs
+     */
+    protected void checkPermission(NodeImpl parent, Name nodeName)
+            throws RepositoryException {
+        if (!session.getAccessManager().isGranted(session.getQPath(parent.getPath()), nodeName, Permission.NODE_TYPE_MNGMT)) {
+            throw new AccessDeniedException("Insufficient permission.");
+        }
+    }
+
     protected NodeImpl createNode(NodeImpl parent,
                                   Name nodeName,
                                   Name nodeTypeName,
@@ -92,13 +140,47 @@ public class SessionImporter implements Importer {
         node = parent.addNode(nodeName, nodeTypeName, id);
         // add mixins
         if (mixinNames != null) {
-            for (int i = 0; i < mixinNames.length; i++) {
-                node.addMixin(mixinNames[i]);
+            for (Name mixinName : mixinNames) {
+                node.addMixin(mixinName);
             }
         }
         return node;
     }
 
+
+    protected void createProperty(NodeImpl node, PropInfo pInfo, PropDef def) throws RepositoryException {
+        // convert serialized values to Value objects
+        Value[] va = pInfo.getValues(pInfo.getTargetType(def), session);
+
+        // multi- or single-valued property?
+        Name name = pInfo.getName();
+        int type = pInfo.getType();
+        if (va.length == 1 && !def.isMultiple()) {
+            Exception e = null;
+            try {
+                // set single-value
+                node.setProperty(name, va[0]);
+            } catch (ValueFormatException vfe) {
+                e = vfe;
+            } catch (ConstraintViolationException cve) {
+                e = cve;
+            }
+            if (e != null) {
+                // setting single-value failed, try setting value array
+                // as a last resort (in case there are ambiguous property
+                // definitions)
+                node.setProperty(name, va, type);
+            }
+        } else {
+            // can only be multi-valued (n == 0 || n > 1)
+            node.setProperty(name, va, type);
+        }
+        if (type == PropertyType.REFERENCE || type == PropertyType.WEAKREFERENCE) {
+            // store reference for later resolution
+            refTracker.processedReference(node.getProperty(name));
+        }
+    }
+
     protected NodeImpl resolveUUIDConflict(NodeImpl parent,
                                            NodeImpl conflicting,
                                            NodeInfo nodeInfo)
@@ -106,6 +188,7 @@ public class SessionImporter implements Importer {
         NodeImpl node;
         if (uuidBehavior == ImportUUIDBehavior.IMPORT_UUID_CREATE_NEW) {
             // create new with new uuid
+            checkPermission(parent, nodeInfo.getName());
             node = createNode(parent, nodeInfo.getName(),
                     nodeInfo.getNodeTypeName(), nodeInfo.getMixinNames(), null);
             // remember uuid mapping
@@ -131,6 +214,7 @@ public class SessionImporter implements Importer {
             // remove conflicting
             conflicting.remove();
             // create new with given uuid
+            checkPermission(parent, nodeInfo.getName());
             node = createNode(parent, nodeInfo.getName(),
                     nodeInfo.getNodeTypeName(), nodeInfo.getMixinNames(),
                     nodeInfo.getId());
@@ -144,6 +228,7 @@ public class SessionImporter implements Importer {
             parent = (NodeImpl) conflicting.getParent();
 
             // replace child node
+            checkPermission(parent, nodeInfo.getName());
             node = parent.replaceChildNode(nodeInfo.getId(), nodeInfo.getName(),
                     nodeInfo.getNodeTypeName(), nodeInfo.getMixinNames());
         } else {
@@ -165,9 +250,9 @@ public class SessionImporter implements Importer {
     /**
      * {@inheritDoc}
      */
-    public void startNode(NodeInfo nodeInfo, List propInfos)
+    public void startNode(NodeInfo nodeInfo, List<PropInfo> propInfos)
             throws RepositoryException {
-        NodeImpl parent = (NodeImpl) parents.peek();
+        NodeImpl parent = parents.peek();
 
         // process node
 
@@ -178,16 +263,31 @@ public class SessionImporter implements Importer {
         Name[] mixins = nodeInfo.getMixinNames();
 
         if (parent == null) {
+            log.debug("Skipping node: " + nodeName);
             // parent node was skipped, skip this child node too
             parents.push(null); // push null onto stack for skipped node
-            log.debug("Skipping node: " + nodeName);
+            // notify the p-i-importer
+            if (currentNodeImporter != null) {
+                currentNodeImporter.startChildInfo(nodeInfo, propInfos);
+            }
             return;
         }
 
-        // make sure the editing session is allowed create nodes with a
-        // specified node type (and ev. mixins)
-        if (!session.getAccessManager().isGranted(session.getQPath(parent.getPath()), nodeName, Permission.NODE_TYPE_MNGMT)) {
-            throw new AccessDeniedException("Insufficient permission.");
+        if (parent.getDefinition().isProtected()) {
+            // skip protected node
+            parents.push(null);
+            log.debug("Skipping protected node: " + nodeName);
+
+            // Notify the ProtectedNodeImporter about the start of a item
+            // tree that is protected by this parent. If it potentially is
+            // able to deal with it, notify it about the child node.
+            currentNodeImporter = protectedItemHandling.accept(parent);
+            if (currentNodeImporter != null) {
+                log.debug("Protected node -> delegated to ProtectedPropertyImporter");
+                currentNodeImporter.startChildInfo(nodeInfo, propInfos);
+            } /* else: p-i-Importer isn't able to deal with the protected tree.
+                 skip the tree below the protected parent */
+            return;
         }
 
         if (parent.hasNode(nodeName)) {
@@ -198,9 +298,21 @@ public class SessionImporter implements Importer {
                 // existing doesn't allow same-name siblings,
                 // check for potential conflicts
                 if (def.isProtected() && existing.isNodeType(ntName)) {
-                    // skip protected node
-                    parents.push(null); // push null onto stack for skipped node
+                    /*
+                     use the existing node as parent for the possible subsequent
+                     import of a protected tree, that the protected node importer
+                     may or may not be able to deal with.
+                     -> upon the next 'startNode' the check for the parent being
+                        protected will notify the protected node importer.
+                     -> if the importer is able to deal with that node it needs
+                        to care of the complete subtree until it is notified
+                        during the 'endNode' call.
+                     -> if the import can't deal with that node or if that node
+                        is the a leaf in the tree to be imported 'end' will
+                        not have an effect on the importer, that was never started.
+                    */
                     log.debug("Skipping protected node: " + existing);
+                    parents.push(existing);
                     return;
                 }
                 if (def.isAutoCreated() && existing.isNodeType(ntName)) {
@@ -224,6 +336,7 @@ public class SessionImporter implements Importer {
             // create node
             if (id == null) {
                 // no potential uuid conflict, always add new node
+                checkPermission(parent, nodeName);
                 node = createNode(parent, nodeName, ntName, mixins, null);
             } else {
                 // potential uuid conflict
@@ -239,11 +352,12 @@ public class SessionImporter implements Importer {
                     if (node == null) {
                         // no new node has been created, so skip this node
                         parents.push(null); // push null onto stack for skipped node
-                        log.debug("skipping existing node " + nodeInfo.getName());
+                        log.debug("Skipping existing node " + nodeInfo.getName());
                         return;
                     }
                 } else {
                     // create new with given uuid
+                    checkPermission(parent, nodeName);
                     node = createNode(parent, nodeName, ntName, mixins, id);
                 }
             }
@@ -251,20 +365,44 @@ public class SessionImporter implements Importer {
 
         // process properties
 
-        Iterator iter = propInfos.iterator();
-        while (iter.hasNext()) {
-            PropInfo pi = (PropInfo) iter.next();
-            pi.apply(node, session, refTracker);
+        for (PropInfo pi : propInfos) {
+            // find applicable definition
+            PropDef def = pi.getApplicablePropertyDef(node.getEffectiveNodeType());
+            if (def.isProtected()) {
+                // skip protected property
+                log.debug("Skipping protected property " + pi.getName());
+
+                // notify the ProtectedPropertyImporter.
+                if (protectedItemHandling.handlePropInfo(node, pi, def)) {
+                    // TODO: deal with reference props within the imported tree?                    
+                    log.debug("Protected property -> delegated to ProtectedPropertyImporter");
+                } // else: p-i-Importer isn't able to deal with this property
+            } else {
+                // regular property -> create the property
+                createProperty(node, pi, def);
+            }
         }
 
         parents.push(node);
     }
 
+
     /**
      * {@inheritDoc}
      */
     public void endNode(NodeInfo nodeInfo) throws RepositoryException {
-        parents.pop();
+        NodeImpl parent = parents.pop();
+        if (parent == null) {
+            if (currentNodeImporter != null) {
+                currentNodeImporter.endChildInfo();
+            }
+        } else if (parent.getDefinition().isProtected()) {
+            if (currentNodeImporter != null) {
+                currentNodeImporter.end(parent);
+                currentNodeImporter = null;
+            }
+            // TODO: deal with reference props within the imported tree?
+        }
     }
 
     /**
