diff --git a/jackrabbit-spi2jcr/src/main/java/org/apache/jackrabbit/spi2jcr/QueryInfoImpl.java b/jackrabbit-spi2jcr/src/main/java/org/apache/jackrabbit/spi2jcr/QueryInfoImpl.java
index a541b8d..3facb39 100644
--- a/jackrabbit-spi2jcr/src/main/java/org/apache/jackrabbit/spi2jcr/QueryInfoImpl.java
+++ b/jackrabbit-spi2jcr/src/main/java/org/apache/jackrabbit/spi2jcr/QueryInfoImpl.java
@@ -19,10 +19,8 @@ package org.apache.jackrabbit.spi2jcr;
 import org.apache.jackrabbit.spi.QueryInfo;
 import org.apache.jackrabbit.spi.QValueFactory;
 import org.apache.jackrabbit.spi.Name;
-import org.apache.jackrabbit.spi.commons.name.NameConstants;
 import org.apache.jackrabbit.commons.iterator.RangeIteratorAdapter;
 import org.apache.jackrabbit.commons.iterator.RangeIteratorDecorator;
-import org.apache.jackrabbit.spi.commons.conversion.NameException;
 import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -67,24 +65,19 @@ class QueryInfoImpl implements QueryInfo {
     /**
      * The names of the columns in the query result.
      */
-    private final Name[] columnNames;
+    private final String[] columnNames;
 
     /**
-     * The resolved name of the jcr:score column.
+     * The names of the selectors in the query result.
      */
-    private final String scoreName;
-
-    /**
-     * The resolved name of the jcr:path column.
-     */
-    private final String pathName;
+    private final Name[] selectorNames;
 
     /**
      * Creates a new query info based on a given <code>result</code>.
      *
      * @param result        the JCR query result.
      * @param idFactory     the id factory.
-     * @param resolver
+     * @param resolver      the name path resolver.
      * @param qValueFactory the QValue factory.
      * @throws RepositoryException if an error occurs while reading from
      *                             <code>result</code>.
@@ -98,16 +91,12 @@ class QueryInfoImpl implements QueryInfo {
         this.idFactory = idFactory;
         this.resolver = resolver;
         this.qValueFactory = qValueFactory;
-        String[] jcrNames = result.getColumnNames();
-        this.columnNames = new Name[jcrNames.length];
-        try {
-            for (int i = 0; i < jcrNames.length; i++) {
-                columnNames[i] = resolver.getQName(jcrNames[i]);
-            }
-            this.scoreName = resolver.getJCRName(NameConstants.JCR_SCORE);
-            this.pathName = resolver.getJCRName(NameConstants.JCR_PATH);
-        } catch (NameException e) {
-            throw new RepositoryException(e.getMessage(), e);
+        this.columnNames = result.getColumnNames();
+        // TODO
+        String[] sn = new String[0]; //result.getSelectorNames();
+        this.selectorNames = new Name[sn.length];
+        for (int i = 0; i < sn.length; i++) {
+            selectorNames[i] = resolver.getQName(sn[i]);
         }
     }
 
@@ -116,13 +105,12 @@ class QueryInfoImpl implements QueryInfo {
      */
     public RangeIterator getRows() {
         try {
-            final String[] columnJcrNames = result.getColumnNames();
             return new RangeIteratorDecorator(result.getRows()) {
                 public Object next() {
                     try {
                         return new QueryResultRowImpl(
-                                (Row) super.next(), columnJcrNames, scoreName,
-                                pathName, idFactory, resolver, qValueFactory);
+                                (Row) super.next(), columnNames, selectorNames,
+                                idFactory, resolver, qValueFactory);
                     } catch (RepositoryException e) {
                         log.warn("Exception when creating QueryResultRowImpl: " +
                                 e.getMessage(), e);
@@ -138,8 +126,8 @@ class QueryInfoImpl implements QueryInfo {
     /**
      * {@inheritDoc}
      */
-    public Name[] getColumnNames() {
-        Name[] names = new Name[columnNames.length];
+    public String[] getColumnNames() {
+        String[] names = new String[columnNames.length];
         System.arraycopy(columnNames, 0, names, 0, columnNames.length);
         return names;
     }
