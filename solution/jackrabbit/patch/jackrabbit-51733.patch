diff --git a/jackrabbit-api/src/main/java/org/apache/jackrabbit/api/security/user/Authorizable.java b/jackrabbit-api/src/main/java/org/apache/jackrabbit/api/security/user/Authorizable.java
index 8dd46c3..286fb89 100644
--- a/jackrabbit-api/src/main/java/org/apache/jackrabbit/api/security/user/Authorizable.java
+++ b/jackrabbit-api/src/main/java/org/apache/jackrabbit/api/security/user/Authorizable.java
@@ -16,12 +16,13 @@
  */
 package org.apache.jackrabbit.api.security.user;
 
-import org.apache.jackrabbit.api.security.principal.PrincipalIterator;
+import java.security.Principal;
+import java.util.Iterator;
 
 import javax.jcr.RepositoryException;
 import javax.jcr.Value;
-import java.security.Principal;
-import java.util.Iterator;
+
+import org.apache.jackrabbit.api.security.principal.PrincipalIterator;
 
 /**
  * The Authorizable is the common base interface for {@link User} and
@@ -29,23 +30,23 @@ import java.util.Iterator;
  * with an <code>Authorizable</code> (see below) and allow to access and
  * modify additional properties such as e.g. full name, e-mail or address.
  * <p/>
- *
+ * <p/>
  * Please note the difference between <code>Authorizable</code> and
  * {@link java.security.Principal Principal}:<br>
  * An <code>Authorizable</code> is repository object that is neither associated
  * with nor depending from a particular <code>Session</code> and thus independant
  * of the login mechanisms creating <code>Session</code>s.<br>
- *
+ * <p/>
  * On the other hand <code>Principal</code>s are representations of user
  * identities. In other words: each <code>Principal</code> within the set
  * associated with the Session's Subject upon login represents an identity for
  * that user. An the set of <code>Principal</code>s may differ between different
  * login mechanisms.<br>
- *
+ * <p/>
  * Consequently an one-to-many relationship exists between Authorizable
  * and Principal (see also {@link #getPrincipal()} and {@link #getPrincipals()}).
- * <p />
- *
+ * <p/>
+ * <p/>
  * The interfaces derived from Authorizable are defined as follows:
  * <ul>
  * <li>{@link User}: defined to be an authorizable that can be authenticated
@@ -57,7 +58,7 @@ import java.util.Iterator;
  * @see User
  * @see Group
  */
-public interface Authorizable  {
+public interface Authorizable {
 
     /**
      * Return the implementation specific identifer for this
@@ -70,9 +71,9 @@ public interface Authorizable  {
     String getID() throws RepositoryException;
 
     /**
-	 * @return if the current Authorizable is a {@link Group}
-	 */
-	boolean isGroup();
+     * @return if the current Authorizable is a {@link Group}
+     */
+    boolean isGroup();
 
     /**
      * @return a representation as Principal.
@@ -87,10 +88,8 @@ public interface Authorizable  {
      * Principal a <code>AuthorizableExistsException</code> is thrown.
      *
      * @param principal
-     * @return true if added, false if this Authorizable already represents
-     * the given Principal.
      * @return AuthorizableExistsException If the given principal is already refered
-     * to by another Authorizable.
+     *         to by another Authorizable.
      * @throws RepositoryException
      */
     boolean addReferee(Principal principal) throws AuthorizableExistsException, RepositoryException;
@@ -106,7 +105,7 @@ public interface Authorizable  {
 
     /**
      * @return Iterator of all Principal related to this authentication Object
-     * including the main principal, (see {@link #getPrincipal()}).
+     *         including the main principal, (see {@link #getPrincipal()}).
      * @throws RepositoryException
      */
     PrincipalIterator getPrincipals() throws RepositoryException;
@@ -115,14 +114,14 @@ public interface Authorizable  {
      * @return all {@link Group}s, this Authorizable is declared member of.
      * @throws RepositoryException
      */
-    Iterator declaredMemberOf() throws RepositoryException;
+    Iterator<Group> declaredMemberOf() throws RepositoryException;
 
     /**
      * @return all {@link Group}s, this Authorizable is member of included
-     * indirect group membership.
+     *         indirect group membership.
      * @throws RepositoryException
      */
-    Iterator memberOf() throws RepositoryException;
+    Iterator<Group> memberOf() throws RepositoryException;
 
     /**
      * Removes this <code>Authorizable</code>, if the session has sufficient
@@ -131,7 +130,7 @@ public interface Authorizable  {
      * a Group itself).
      *
      * @throws RepositoryException If an error occured and the
-     * <code>Authorizable</code> could not be removed.
+     *                             <code>Authorizable</code> could not be removed.
      */
     void remove() throws RepositoryException;
 
@@ -143,17 +142,17 @@ public interface Authorizable  {
      * @see #getProperty(String)
      * @see #hasProperty(String)
      */
-    Iterator getPropertyNames() throws RepositoryException;
+    Iterator<String> getPropertyNames() throws RepositoryException;
 
     /**
-	 * Tests if a the property with specified name exists.
+     * Tests if a the property with specified name exists.
      *
-	 * @param name
-	 * @return
-	 * @throws RepositoryException
-	 * @see #getProperty(String)
-	 */
-	boolean hasProperty(String name) throws RepositoryException;
+     * @param name
+     * @return
+     * @throws RepositoryException
+     * @see #getProperty(String)
+     */
+    boolean hasProperty(String name) throws RepositoryException;
 
     /**
      * Set an arbitrary property to this <code>Authorizable</code>.
@@ -169,17 +168,17 @@ public interface Authorizable  {
      *
      * @param name
      * @param value multiple values
-     * @throws RepositoryException  If the specified property could not be set.
+     * @throws RepositoryException If the specified property could not be set.
      */
     void setProperty(String name, Value[] value) throws RepositoryException;
 
-	/**
+    /**
      * Returns the values for the properties with the specified name or
      * <code>null</code>.
      *
      * @param name
      * @return value of the property with the given name or <code>null</code>
-     * if no such property exists.
+     *         if no such property exists.
      * @throws RepositoryException If an error occurs.
      */
     Value[] getProperty(String name) throws RepositoryException;
@@ -189,7 +188,7 @@ public interface Authorizable  {
      *
      * @param name
      * @return true If the property with the specified name was successfully
-     * removed; false if no such property was present.
+     *         removed; false if no such property was present.
      * @throws RepositoryException If an error occurs.
      */
     boolean removeProperty(String name) throws RepositoryException;
