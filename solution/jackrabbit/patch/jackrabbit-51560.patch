diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/simple/SimpleAccessManager.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/simple/SimpleAccessManager.java
index a02e3c3..b6fbf47 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/simple/SimpleAccessManager.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/simple/SimpleAccessManager.java
@@ -38,6 +38,8 @@ import javax.jcr.AccessDeniedException;
 import javax.jcr.PathNotFoundException;
 import javax.jcr.RepositoryException;
 import javax.security.auth.Subject;
+import java.security.Principal;
+import java.util.Set;
 
 /**
  * <code>SimpleAccessManager</code> ...
@@ -295,4 +297,44 @@ public class SimpleAccessManager extends AbstractAccessControlManager implements
             throw new PathNotFoundException(absPath);
         }
     }
+
+    /**
+     * @see org.apache.jackrabbit.api.security.JackrabbitAccessControlManager#hasPrivileges(String, Set, Privilege[])
+     */
+    public boolean hasPrivileges(String absPath, Set<Principal> principals, Privilege[] privileges) throws PathNotFoundException, RepositoryException {
+        if (anonymous) {
+            // anonymous doesn't have READ_AC privilege
+            throw new AccessDeniedException();
+        }
+        
+        if (principals.size() == 1) {
+            Principal princ = principals.iterator().next();
+            if (princ instanceof AnonymousPrincipal) {
+                return privileges.length == 1 && privileges[0].equals(privilegeRegistry.getPrivilege(Privilege.JCR_READ));
+            }
+        }
+
+        // @todo check permission based on principals
+        return true;
+    }
+
+    /**
+     * @see org.apache.jackrabbit.api.security.JackrabbitAccessControlManager#getPrivileges(String, Set)
+     */
+    public Privilege[] getPrivileges(String absPath, Set<Principal> principals) throws PathNotFoundException, RepositoryException {
+        if (anonymous) {
+            // anonymous doesn't have READ_AC privilege
+            throw new AccessDeniedException();
+        }
+
+        if (principals.size() == 1) {
+            Principal princ = principals.iterator().next();
+            if (princ instanceof AnonymousPrincipal) {
+                return new Privilege[] {privilegeRegistry.getPrivilege(Privilege.JCR_READ)};
+            }
+        }
+
+        // @todo check permission based on principals
+        return new Privilege[] {privilegeRegistry.getPrivilege(Privilege.JCR_ALL)};
+    }
 }
