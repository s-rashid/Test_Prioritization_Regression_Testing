diff --git a/jackrabbit-ocm/src/main/java/org/apache/jackrabbit/ocm/reflection/ReflectionUtils.java b/jackrabbit-ocm/src/main/java/org/apache/jackrabbit/ocm/reflection/ReflectionUtils.java
index 28f0a96..bccfb57 100644
--- a/jackrabbit-ocm/src/main/java/org/apache/jackrabbit/ocm/reflection/ReflectionUtils.java
+++ b/jackrabbit-ocm/src/main/java/org/apache/jackrabbit/ocm/reflection/ReflectionUtils.java
@@ -27,14 +27,14 @@ import org.apache.jackrabbit.ocm.exception.JcrMappingException;
 
 /**
  * Utility class for handling reflection using BeanUtils.
- * 
+ *
  * @author <a href='mailto:the_mindstorm[at]evolva[dot]ro'>Alexandru Popescu</a>
  */
 abstract public class ReflectionUtils {
-    
+
     // default the class loader to the load of this class
     private static ClassLoader classLoader = ReflectionUtils.class.getClassLoader();
-    
+
     /**
      * Sets the class loader to use in the {@link #forName(String)} method to
      * load classes.
@@ -42,30 +42,30 @@ abstract public class ReflectionUtils {
      * Care must be taken when using this method as when setting an improperly
      * set up classloader, the mapper will not work again throwing tons of
      * exceptions.
-     * 
+     *
      * @param newClassLoader The new class loader to use. This may be
      *      <code>null</code> in which case the system class loader will be used.
      */
     public static void setClassLoader(ClassLoader newClassLoader) {
         classLoader = newClassLoader;
     }
-    
+
     /**
      * Returns the class loader which is used by the {@link #forName(String)}
      * method to load classes.
-     * 
+     *
      * @return The class loader used by {@link #forName(String)} or
      *      <code>null</code> if the system class loader is used.
      */
     public static ClassLoader getClassLoader() {
         return classLoader;
     }
-    
+
     public static Object getNestedProperty(Object object, String fieldName) {
         if (null == object) {
             return null;
         }
-        
+
         try {
             return PropertyUtils.getNestedProperty(object, fieldName);
         }
@@ -85,7 +85,7 @@ abstract public class ReflectionUtils {
                     e);
         }
     }
-    
+
     public static Class getPropertyType(Object object, String fieldName) {
         try {
             return PropertyUtils.getPropertyType(object, fieldName);
@@ -107,7 +107,7 @@ abstract public class ReflectionUtils {
                     ex);
         }
     }
-    
+
     /**
      * @param className
      * @param objects
@@ -116,7 +116,7 @@ abstract public class ReflectionUtils {
     public static Object  invokeConstructor(String className,  Object[] params) {
         try {
             Class converterClass= forName(className);
-    
+
             return  ConstructorUtils.invokeConstructor(converterClass, params);
         }
         catch(Exception ex) {
@@ -165,12 +165,12 @@ abstract public class ReflectionUtils {
             throw new JcrMappingException("Cannot load class " + clazz, ex);
         }
     }
-    
+
     public static boolean isProxy(Class beanClass)
-    {    	        	     
+    {    	        	
          return Enhancer.isEnhanced(beanClass);	
     }
-    
+
     public static Class getBeanClass(Object bean)
     {
     	     Class beanClass = bean.getClass();
@@ -181,5 +181,5 @@ abstract public class ReflectionUtils {
          }
          return beanClass;
     }
-    
+
 }
