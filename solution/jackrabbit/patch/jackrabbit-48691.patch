diff --git a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/MergeNodeIteratorTest.java b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/MergeNodeIteratorTest.java
index 2ab3b5d..e015292 100644
--- a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/MergeNodeIteratorTest.java
+++ b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/MergeNodeIteratorTest.java
@@ -18,6 +18,7 @@ package org.apache.jackrabbit.test.api.version;
 
 import javax.jcr.RepositoryException;
 import javax.jcr.Node;
+import javax.jcr.version.VersionManager;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Iterator;
@@ -86,12 +87,56 @@ public class MergeNodeIteratorTest extends AbstractMergeTest {
     }
 
     /**
+     * Tests if VersionManager.merge() when bestEffort is true returns a NodeIterator
+     * containing all nodes that received a fail.
+     */
+    public void testNodeIteratorJcr2() throws RepositoryException {
+
+        Node nodeToMerge = testRootNodeW2.getNode(nodeName1);
+
+        Iterator failedNodes = nodeToMerge.getSession().getWorkspace().getVersionManager().merge(
+                nodeToMerge.getPath(), workspace.getName(), true);
+
+        List nodeList = new ArrayList();
+        while (failedNodes.hasNext()) {
+            nodeList.add(failedNodes.next());
+        }
+
+        assertEquals("Node.merge() does not return a NodeIterator with " +
+                "expected number of elements.",
+                expectedFailedNodes.length,
+                nodeList.size());
+
+        // re-aquire iterator, has been consumed to get size
+        failedNodes = nodeList.iterator();
+        compareReturnedWithExpected:
+        while (failedNodes.hasNext()) {
+            String path = ((Node) failedNodes.next()).getPath();
+            for (int i = 0; i < expectedFailedNodes.length; i++) {
+                if (expectedFailedNodes[i] != null) {
+                    String expectedPath = expectedFailedNodes[i].getPath();
+                    if (path.equals(expectedPath)) {
+                        // to assure every failed node appears only once in the
+                        // NodeIterator, set each found expected node to null
+                        expectedFailedNodes[i] = null;
+                        continue compareReturnedWithExpected;
+                    }
+                }
+            }
+            fail("Node.merge() must return a NodeIterator over all " +
+                    "nodes that did receive a result of fail.");
+        }
+    }
+
+    /**
      * initialize some versionable nodes on default and second workspace
      */
     protected void initNodes() throws RepositoryException {
 
         // create some versionable node in default workspace (WS1)
 
+        VersionManager versionManager = testRootNode.getSession().getWorkspace().getVersionManager();
+
         Node mergeRootNode = testRootNode.addNode(nodeName1, versionableNodeType);
 
         Node nodeWS1_1 = mergeRootNode.addNode(nodeName1, versionableNodeType);
@@ -100,23 +145,22 @@ public class MergeNodeIteratorTest extends AbstractMergeTest {
         Node nodeWS1_2Sub1 = nodeWS1_2.addNode(nodeName1, versionableNodeType);
         Node nodeWS1_3 = mergeRootNode.addNode(nodeName3, versionableNodeType);
 
-        testRootNode.save();
-
-        nodeWS1_1.checkin(); // create version 1.0
-        nodeWS1_1.checkout();
+        testRootNode.getSession().save();
 
-        nodeWS1_1Sub1.checkin(); // create version 1.0
-        nodeWS1_1Sub1.checkout();
+        versionManager.checkin(nodeWS1_1.getPath()); // create version 1.0
+        versionManager.checkout(nodeWS1_1.getPath());
 
-        nodeWS1_2.checkin(); // create version 1.0
-        nodeWS1_2.checkout();
+        versionManager.checkin(nodeWS1_1Sub1.getPath()); // create version 1.0
+        versionManager.checkout(nodeWS1_1Sub1.getPath());
 
-        nodeWS1_2Sub1.checkin(); // create version 1.0
-        nodeWS1_2Sub1.checkout();
+        versionManager.checkin(nodeWS1_2.getPath()); // create version 1.0
+        versionManager.checkout(nodeWS1_2.getPath());
 
-        nodeWS1_3.checkin(); // create version 1.0
-        nodeWS1_3.checkout();
+        versionManager.checkin(nodeWS1_2Sub1.getPath()); // create version 1.0
+        versionManager.checkout(nodeWS1_2Sub1.getPath());
 
+        versionManager.checkin(nodeWS1_3.getPath()); // create version 1.0
+        versionManager.checkout(nodeWS1_3.getPath());
 
         workspaceW2.clone(workspace.getName(), mergeRootNode.getPath(), mergeRootNode.getPath(), true);
 
@@ -127,14 +171,14 @@ public class MergeNodeIteratorTest extends AbstractMergeTest {
 
         // create version branches for some of the nodes
 
-        nodeWS2_1.checkin(); // create version 1.1
-        nodeWS1_1.checkin(); // create version 1.0.1
+        versionManager.checkin(nodeWS2_1.getPath()); // create version 1.1
+        versionManager.checkin(nodeWS1_1.getPath()); // create version 1.0.1
 
-        nodeWS2_2.checkin(); // create version 1.1
-        nodeWS1_2.checkin(); // create version 1.0.1
+        versionManager.checkin(nodeWS2_2.getPath()); // create version 1.1
+        versionManager.checkin(nodeWS1_2.getPath()); // create version 1.0.1
 
-        nodeWS2_2Sub1.checkin(); // create version 1.1
-        nodeWS1_2Sub1.checkin(); // create version 1.0.1
+        versionManager.checkin(nodeWS2_2Sub1.getPath()); // create version 1.1
+        versionManager.checkin(nodeWS1_2Sub1.getPath()); // create version 1.0.1
 
         // set the nodes with version branches in expectedFailedNodes
         expectedFailedNodes[0] = nodeWS1_1;
