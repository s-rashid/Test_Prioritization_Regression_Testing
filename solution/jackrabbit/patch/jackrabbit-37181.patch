diff --git a/contrib/spi/jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/operation/ReorderNodes.java b/contrib/spi/jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/operation/ReorderNodes.java
deleted file mode 100644
index bea5d7b..0000000
--- a/contrib/spi/jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/operation/ReorderNodes.java
+++ /dev/null
@@ -1,106 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.jackrabbit.jcr2spi.operation;
-
-import org.apache.jackrabbit.jcr2spi.state.NodeState;
-import org.apache.jackrabbit.spi.Path;
-import org.apache.jackrabbit.spi.NodeId;
-
-import javax.jcr.nodetype.ConstraintViolationException;
-import javax.jcr.AccessDeniedException;
-import javax.jcr.UnsupportedRepositoryOperationException;
-import javax.jcr.RepositoryException;
-import javax.jcr.ItemNotFoundException;
-import javax.jcr.version.VersionException;
-
-/**
- * <code>ReorderNodes</code>...
- */
-public class ReorderNodes extends AbstractOperation {
-
-    private final NodeId parentId;
-    private final NodeId insertId;
-    private final NodeId beforeId;
-
-    private final NodeState parentState;
-    private final NodeState insert;
-    private final NodeState before;
-
-    private ReorderNodes(NodeState parentState, NodeState insert, NodeState before) {
-        this.parentState = parentState;
-        this.insert = insert;
-        this.before = before;
-
-        this.parentId = parentState.getNodeId();
-        this.insertId = insert.getNodeId();
-        this.beforeId = (before == null) ? null : before.getNodeId();
-
-        addAffectedItemState(parentState);
-    }
-
-    //----------------------------------------------------------< Operation >---
-    /**
-     *
-     * @param visitor
-     */
-    public void accept(OperationVisitor visitor) throws ConstraintViolationException, AccessDeniedException, UnsupportedRepositoryOperationException, VersionException, RepositoryException {
-        visitor.visit(this);
-    }
-
-    /**
-     * Throws UnsupportedOperationException
-     *
-     * @see Operation#persisted()
-     */
-    public void persisted() {
-        throw new UnsupportedOperationException("persisted() not implemented for transient modification.");
-    }
-    //----------------------------------------< Access Operation Parameters >---
-
-    public NodeId getParentId() {
-        return parentId;
-    }
-
-    public NodeId getInsertId() {
-        return insertId;
-    }
-
-    public NodeId getBeforeId() {
-        return beforeId;
-    }
-
-    public NodeState getParentState() {
-        return parentState;
-    }
-
-    public NodeState getInsertNode() {
-        return insert;
-    }
-
-    public NodeState getBeforeNode() {
-        return before;
-    }
-
-    //------------------------------------------------------------< Factory >---
-
-    public static Operation create(NodeState parentState, Path.Element srcName,
-                                   Path.Element beforeName) throws ItemNotFoundException, RepositoryException {
-        NodeState insert = parentState.getChildNodeState(srcName.getName(), srcName.getNormalizedIndex());
-        NodeState before = (beforeName == null) ? null : parentState.getChildNodeState(beforeName.getName(), beforeName.getNormalizedIndex());
-        return new ReorderNodes(parentState, insert, before);
-    }
-}
\ No newline at end of file
