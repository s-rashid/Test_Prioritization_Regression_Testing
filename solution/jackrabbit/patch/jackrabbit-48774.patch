diff --git a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/VersionLabelTest.java b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/VersionLabelTest.java
index a509792..1580345 100644
--- a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/VersionLabelTest.java
+++ b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/VersionLabelTest.java
@@ -24,6 +24,7 @@ import javax.jcr.UnsupportedRepositoryOperationException;
 import javax.jcr.version.Version;
 import javax.jcr.version.VersionException;
 import javax.jcr.version.VersionHistory;
+import javax.jcr.version.VersionManager;
 
 /**
  * <code>VersionLabelTest</code> covers methods related to version label such as
@@ -61,7 +62,7 @@ public class VersionLabelTest extends AbstractVersionTest {
 
         jcrVersionLabels = superuser.getNamespacePrefix(NS_JCR_URI) + ":versionLabels";
 
-        vHistory = versionableNode.getVersionHistory();
+        vHistory = versionableNode.getSession().getWorkspace().getVersionManager().getVersionHistory(versionableNode.getPath());
         rootVersion = vHistory.getRootVersion();
 
         if (vHistory.hasVersionLabel(versionLabel)) {
@@ -141,6 +142,24 @@ public class VersionLabelTest extends AbstractVersionTest {
     }
 
     /**
+     * Test if the a label added with VersionHistory.addVersionLabel(String,
+     * String, boolean) corresponds to adding a reference property to the
+     * jcr:versionLabels node of this history node, with the label as name of
+     * the property, and the reference targeting the version.
+     *
+     * @see VersionHistory#addVersionLabel(String, String, boolean)
+     */
+    public void testAddVersionCheckVersionLabelsNodeJcr2() throws RepositoryException {
+        vHistory.addVersionLabel(rootVersion.getName(), versionLabel, false);
+
+        // get jcr:versionLabels node
+        vHistory = versionableNode.getSession().getWorkspace().getVersionManager().getVersionHistory(versionableNode.getPath());
+        Node versionLabelNode = vHistory.getNode(jcrVersionLabels);
+
+        assertTrue("The version label that has been successfully added must be present in the node '" + jcrVersionLabels + "'.", versionLabelNode.getProperty(versionLabel).getString().equals(rootVersion.getUUID()));
+    }
+
+    /**
      * Test if VersionHistory.hasVersionLabel(String) returns true, if the label
      * has beed successfully added before.
      *
@@ -198,6 +217,27 @@ public class VersionLabelTest extends AbstractVersionTest {
     }
 
     /**
+     * Test if VersionHistory.addVersionLabel(versionName, label, moveLabel)
+     * throws VersionException the label already exists and if moveLabel is false)
+     *
+     * @throws RepositoryException
+     */
+    public void testAddDuplicateVersionLabelJcr2() throws RepositoryException {
+        vHistory.addVersionLabel(rootVersion.getName(), versionLabel, false);
+        try {
+            VersionManager versionManager = versionableNode.getSession().getWorkspace().getVersionManager();
+            String path = versionableNode.getPath();
+            versionManager.checkout(path);
+            Version v = versionManager.checkin(path);
+            vHistory.addVersionLabel(v.getName(), versionLabel, false);
+
+            fail("Adding a version label that already exist in the version history must throw a VersionException.");
+        } catch (VersionException e) {
+            //success
+        }
+    }
+
+    /**
      * Test if the 'moveLabel' flag moves an existing version label.
      *
      * @throws RepositoryException
@@ -220,6 +260,30 @@ public class VersionLabelTest extends AbstractVersionTest {
     }
 
     /**
+     * Test if the 'moveLabel' flag moves an existing version label.
+     *
+     * @throws RepositoryException
+     * @see VersionHistory#addVersionLabel(String, String, boolean)  with boolan flag equals true.
+     */
+    public void testMoveLabelJcr2() throws RepositoryException {
+        vHistory.addVersionLabel(rootVersion.getName(), versionLabel, false);
+        try {
+            VersionManager versionManager = versionableNode.getSession().getWorkspace().getVersionManager();
+            String path = versionableNode.getPath();
+            versionManager.checkout(path);
+            Version v = versionManager.checkin(path);
+            vHistory.addVersionLabel(v.getName(), versionLabel, true);
+
+            if (!vHistory.hasVersionLabel(v, versionLabel)) {
+                fail("If 'moveLabel' is true, an existing version label must be moved to the indicated version.");
+            }
+
+        } catch (VersionException e) {
+            fail("If 'moveLabel' is true, an existing version label must be moved to the indicated version.");
+        }
+    }
+
+    /**
      * Test the removal of an version label that does not exist (must throw VersionException).
      *
      * @throws RepositoryException
@@ -295,6 +359,38 @@ public class VersionLabelTest extends AbstractVersionTest {
     }
 
     /**
+     * Test VersionHistory.getVersionLabels() returns all labels present on the version history.
+     *
+     * @throws RepositoryException
+     * @see javax.jcr.version.VersionHistory#getVersionLabels()
+     */
+    public void testGetVersionLabelsJcr2() throws RepositoryException {
+
+        HashSet testLabels = new HashSet(Arrays.asList(vHistory.getVersionLabels()));
+
+        VersionManager versionManager = versionableNode.getSession().getWorkspace().getVersionManager();
+        String path = versionableNode.getPath();
+        versionManager.checkout(path);
+        Version v = versionManager.checkin(path);
+
+        vHistory.addVersionLabel(v.getName(), versionLabel, false);
+        testLabels.add(versionLabel);
+        vHistory.addVersionLabel(rootVersion.getName(), versionLabel2, false);
+        testLabels.add(versionLabel2);
+
+        String[] labels = vHistory.getVersionLabels();
+        for (int i = 0; i < labels.length; i++) {
+            String l = labels[i];
+            if (!testLabels.contains(l)) {
+                fail("VersionHistory.getVersionLabels() must only return labels, that have been added to the history.");
+            }
+            testLabels.remove(l);
+        }
+
+        assertTrue("VersionHistory.getVersionLabels() must return all labels, that have been added to the history.", testLabels.isEmpty());
+    }
+
+    /**
      * Test VersionHistory.getVersionLabels(Version) only returns all labels present
      * for the specified version.
      *
@@ -326,6 +422,39 @@ public class VersionLabelTest extends AbstractVersionTest {
     }
 
     /**
+     * Test VersionHistory.getVersionLabels(Version) only returns all labels present
+     * for the specified version.
+     *
+     * @throws RepositoryException
+     * @see VersionHistory#getVersionLabels(javax.jcr.version.Version)
+     */
+    public void testGetVersionLabelsForVersionJcr2() throws RepositoryException {
+
+        HashSet testLabels = new HashSet(Arrays.asList(vHistory.getVersionLabels(rootVersion)));
+
+        vHistory.addVersionLabel(rootVersion.getName(), versionLabel, false);
+        testLabels.add(versionLabel);
+
+        // add a version label to another version (not added to the testLabel set)
+        VersionManager versionManager = versionableNode.getSession().getWorkspace().getVersionManager();
+        String path = versionableNode.getPath();
+        versionManager.checkout(path);
+        Version v = versionManager.checkin(path);
+        vHistory.addVersionLabel(v.getName(), versionLabel2, false);
+
+        String[] labels = vHistory.getVersionLabels(rootVersion);
+        for (int i = 0; i < labels.length; i++) {
+            String l = labels[i];
+            if (!testLabels.contains(l)) {
+                fail("VersionHistory.getVersionLabels(Version) must only return labels, that have been added for this version.");
+            }
+            testLabels.remove(l);
+        }
+
+        assertTrue("VersionHistory.getVersionLabels(Version)  must return all labels, that have been added for this version.", testLabels.isEmpty());
+    }
+
+    /**
      * Test calling Node.restoreByLabel(String, boolean) on a non-versionable node.
      *
      * @throws javax.jcr.RepositoryException
@@ -341,6 +470,21 @@ public class VersionLabelTest extends AbstractVersionTest {
     }
 
     /**
+     * Test calling Node.restoreByLabel(String, boolean) on a non-versionable node.
+     *
+     * @throws javax.jcr.RepositoryException
+     * @see javax.jcr.Node#restoreByLabel(String, boolean)
+     */
+    public void testRestoreByLabelNonVersionableNodeJcr2() throws RepositoryException {
+        try {
+            nonVersionableNode.getSession().getWorkspace().getVersionManager().restoreByLabel(nonVersionableNode.getPath(), versionLabel, true);
+            fail("Node.restoreByLabel(String, boolean) on a non versionable node must throw UnsupportedRepositoryOperationException");
+        } catch (UnsupportedRepositoryOperationException e) {
+            //success
+        }
+    }
+
+    /**
      * Test if versionHistory.getVersionLabels(Version) throws a VersionException if the
      * specified version is not in this version history.
      */
