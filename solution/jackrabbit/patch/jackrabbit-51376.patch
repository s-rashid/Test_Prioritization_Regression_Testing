diff --git a/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/value/QValueValue.java b/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/value/QValueValue.java
index 725d174..594cac8 100644
--- a/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/value/QValueValue.java
+++ b/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/value/QValueValue.java
@@ -38,15 +38,6 @@ import org.apache.jackrabbit.spi.QValue;
  */
 public final class QValueValue implements Value {
 
-    private static final short STATE_UNDEFINED = 0;
-
-    private static final short STATE_VALUE_CONSUMED = 1;
-
-    private static final short STATE_STREAM_CONSUMED = 2;
-
-    // the state of this value instance
-    private short state = STATE_UNDEFINED;
-
     // wrapped QValue
     private final QValue qvalue;
 
@@ -82,7 +73,6 @@ public final class QValueValue implements Value {
      * @see javax.jcr.Value#getBoolean()
      */
     public boolean getBoolean() throws RepositoryException {
-        setValueConsumed();
         if (getType() == PropertyType.STRING || getType() == PropertyType.BINARY || getType() == PropertyType.BOOLEAN) {
             return Boolean.valueOf(qvalue.getString()).booleanValue();
         } else {
@@ -94,7 +84,6 @@ public final class QValueValue implements Value {
      * @see javax.jcr.Value#getDecimal()
      */
     public BigDecimal getDecimal() throws ValueFormatException, IllegalStateException, RepositoryException {
-        setValueConsumed();
         switch (getType()) {
             case PropertyType.DECIMAL:
             case PropertyType.DOUBLE:
@@ -118,7 +107,6 @@ public final class QValueValue implements Value {
      * @see javax.jcr.Value#getDate()
      */
     public Calendar getDate() throws RepositoryException {
-        setValueConsumed();
         return qvalue.getCalendar();
     }
 
@@ -126,7 +114,6 @@ public final class QValueValue implements Value {
      * @see javax.jcr.Value#getDouble()
      */
     public double getDouble() throws RepositoryException {
-        setValueConsumed();
         return qvalue.getDouble();
     }
 
@@ -134,7 +121,6 @@ public final class QValueValue implements Value {
      * @see javax.jcr.Value#getLong()
      */
     public long getLong() throws RepositoryException {
-        setValueConsumed();
         return qvalue.getLong();
     }
 
@@ -142,7 +128,6 @@ public final class QValueValue implements Value {
      * @see javax.jcr.Value#getStream()
      */
     public InputStream getStream() throws IllegalStateException, RepositoryException {
-        setStreamConsumed();
         if (stream == null) {
             if (getType() == PropertyType.NAME || getType() == PropertyType.PATH) {
                 // needs namespace mapping
@@ -165,7 +150,6 @@ public final class QValueValue implements Value {
      * @see javax.jcr.Value#getString()
      */
     public String getString() throws RepositoryException {
-        setValueConsumed();
         if (getType() == PropertyType.NAME) {
             // needs formatting
             return resolver.getJCRName(qvalue.getName());
@@ -202,38 +186,4 @@ public final class QValueValue implements Value {
     public int hashCode() {
         return qvalue.hashCode();
     }
-
-    //--------------------------------------------------------------------------
-    /**
-     * Checks if the non-stream value of this instance has already been
-     * consumed (if any getter methods except <code>{@link #getStream()}</code> and
-     * <code>{@link #getType()}</code> have been previously called at least once) and
-     * sets the state to <code>STATE_STREAM_CONSUMED</code>.
-     *
-     * @throws IllegalStateException if any getter methods other than
-     *                               <code>getStream()</code> and
-     *                               <code>getType()</code> have been
-     *                               previously called at least once.
-     */
-    private void setStreamConsumed() throws IllegalStateException {
-        if (state == STATE_VALUE_CONSUMED) {
-            throw new IllegalStateException("non-stream value has already been consumed");
-        }
-        state = STATE_STREAM_CONSUMED;
-    }
-
-    /**
-     * Checks if the stream value of this instance has already been
-     * consumed (if {@link #getStream()} has been previously called
-     * at least once) and sets the state to <code>STATE_VALUE_CONSUMED</code>.
-     *
-     * @throws IllegalStateException if <code>getStream()</code> has been
-     *                               previously called at least once.
-     */
-    private void setValueConsumed() throws IllegalStateException {
-        if (state == STATE_STREAM_CONSUMED) {
-            throw new IllegalStateException("stream value has already been consumed");
-        }
-        state = STATE_VALUE_CONSUMED;
-    }
 }
