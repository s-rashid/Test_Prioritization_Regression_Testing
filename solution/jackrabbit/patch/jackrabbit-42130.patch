diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java
index 09c8629..01bb7d0 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/BatchedItemOperations.java
@@ -19,6 +19,7 @@ package org.apache.jackrabbit.core;
 import org.apache.jackrabbit.core.lock.LockManager;
 import org.apache.jackrabbit.core.nodetype.EffectiveNodeType;
 import org.apache.jackrabbit.core.nodetype.NodeDef;
+import org.apache.jackrabbit.core.nodetype.NodeTypeConflictException;
 import org.apache.jackrabbit.core.nodetype.NodeTypeRegistry;
 import org.apache.jackrabbit.core.nodetype.PropDef;
 import org.apache.jackrabbit.core.nodetype.PropDefId;
@@ -50,6 +51,7 @@ import javax.jcr.PathNotFoundException;
 import javax.jcr.PropertyType;
 import javax.jcr.ReferentialIntegrityException;
 import javax.jcr.RepositoryException;
+import javax.jcr.UnsupportedRepositoryOperationException;
 import javax.jcr.lock.LockException;
 import javax.jcr.nodetype.ConstraintViolationException;
 import javax.jcr.version.VersionException;
@@ -199,6 +201,88 @@ public class BatchedItemOperations extends ItemValidator {
     }
 
     //-------------------------------------------< high-level item operations >
+    
+    /**
+     * Clones the subtree at the node <code>srcAbsPath</code> in to the new
+     * location at <code>destAbsPath</code>. This operation is only supported:
+     * <ul>
+     * <li>If the source element has the mixin <code>mix:shareable</code> (or some
+     * derived node type)</li>
+     * <li>If the parent node of <code>destAbsPath</code> has not already a shareable
+     * node in the same shared set as the node at <code>srcPath</code>.</li>
+     * </ul>
+     * 
+     * @param srcPath source path
+     * @param destPath destination path
+     * @return the node id of the destination's parent
+     * 
+     * @throws ConstraintViolationException if the operation would violate a
+     * node-type or other implementation-specific constraint.
+     * @throws VersionException if the parent node of <code>destAbsPath</code> is
+     * versionable and checked-in, or is non-versionable but its nearest versionable ancestor is
+     * checked-in. This exception will also be thrown if <code>removeExisting</code> is <code>true</code>,
+     * and a UUID conflict occurs that would require the moving and/or altering of a node that is checked-in.
+     * @throws AccessDeniedException if the current session does not have
+     * sufficient access rights to complete the operation.
+     * @throws PathNotFoundException if the node at <code>srcAbsPath</code> in
+     * <code>srcWorkspace</code> or the parent of <code>destAbsPath</code> in this workspace does not exist.
+     * @throws ItemExistsException if a property already exists at
+     * <code>destAbsPath</code> or a node already exist there, and same name
+     * siblings are not allowed or if <code>removeExisting</code> is false and a
+     * UUID conflict occurs.
+     * @throws LockException if a lock prevents the clone.
+     * @throws RepositoryException if the last element of <code>destAbsPath</code>
+     * has an index or if another error occurs.
+     */
+    public NodeId clone(Path srcPath, Path destPath) 
+            throws ConstraintViolationException, AccessDeniedException,
+                   VersionException, PathNotFoundException, ItemExistsException,
+                   LockException, RepositoryException, IllegalStateException {
+
+        // check precondition
+        checkInEditMode();
+
+        // 1. check paths & retrieve state
+        NodeState srcState = getNodeState(srcPath);
+
+        Path.Element destName = destPath.getNameElement();
+        Path destParentPath = destPath.getAncestor(1);
+        NodeState destParentState = getNodeState(destParentPath);
+        int ind = destName.getIndex();
+        if (ind > 0) {
+            // subscript in name element
+            String msg = "invalid destination path (subscript in name element is not allowed)";
+            log.debug(msg);
+            throw new RepositoryException(msg);
+        }
+        
+        // 2. check access rights, lock status, node type constraints, etc.
+        checkAddNode(destParentState, destName.getName(),
+                srcState.getNodeTypeName(), CHECK_ACCESS | CHECK_LOCK
+                | CHECK_VERSIONING | CHECK_CONSTRAINTS);
+        
+        // 3. verify that source has mixin mix:shareable
+        if (!isShareable(srcState)) {
+            String msg = "Cloning inside a workspace is only allowed for shareable nodes.";
+            log.debug(msg);
+            throw new RepositoryException(msg);
+        }
+        
+        // 4. do clone operation (modify and store affected states)
+        if (!srcState.addShare(destParentState.getNodeId())) {
+            String msg = "Adding a shareable node twice to the same parent is not supported.";
+            log.debug(msg);
+            throw new UnsupportedRepositoryOperationException(msg);
+        }
+        destParentState.addChildNodeEntry(destName.getName(), srcState.getNodeId());
+
+        // store states
+        stateMgr.store(srcState);
+        stateMgr.store(destParentState);
+        return destParentState.getNodeId();
+    }
+
+    
     /**
      * Copies the tree at <code>srcPath</code> to the new location at
      * <code>destPath</code>. Returns the id of the node at its new position.
@@ -268,10 +352,8 @@ public class BatchedItemOperations extends ItemValidator {
             LockException, RepositoryException, IllegalStateException {
 
         // check precondition
-        if (!stateMgr.inEditMode()) {
-            throw new IllegalStateException("not in edit mode");
-        }
-
+        checkInEditMode();
+        
         // 1. check paths & retrieve state
 
         NodeState srcState = getNodeState(srcStateMgr, srcHierMgr, srcPath);
@@ -440,10 +522,19 @@ public class BatchedItemOperations extends ItemValidator {
             destParent.renameChildNodeEntry(srcName.getName(), srcNameIndex,
                     destName.getName());
         } else {
+            // check shareable case
+            if (target.isShareable()) {
+                String msg = "Moving a shareable node is not supported.";
+                log.debug(msg);
+                throw new UnsupportedRepositoryOperationException(msg);
+            }
+
             // remove child node entry from old parent
             srcParent.removeChildNodeEntry(srcName.getName(), srcNameIndex);
+
             // re-parent target node
             target.setParentId(destParent.getNodeId());
+
             // add child node entry to new parent
             destParent.addChildNodeEntry(destName.getName(), target.getNodeId());
         }
@@ -1790,4 +1881,47 @@ public class BatchedItemOperations extends ItemValidator {
         }
         return vh;
     }
+    
+    /**
+     * Check that the updatable item state manager is in edit mode.
+     * 
+     * @throws IllegalStateException if it isn't
+     */
+    private void checkInEditMode() throws IllegalStateException {
+        if (!stateMgr.inEditMode()) {
+            throw new IllegalStateException("not in edit mode");
+        }
+    }
+    
+    /**
+     * Determines whether the specified node is <i>shareable</i>, i.e.
+     * whether the mixin type <code>mix:shareable</code> is either
+     * directly assigned or indirectly inherited.
+     *
+     * @param state node state to check
+     * @return true if the specified node is <i>shareable</i>, false otherwise.
+     * @throws ItemStateException if an error occurs
+     */
+    private boolean isShareable(NodeState state) throws RepositoryException {
+        // shortcut: check some wellknown built-in types first
+        Name primary = state.getNodeTypeName();
+        Set mixins = state.getMixinTypeNames();
+        if (mixins.contains(NameConstants.MIX_SHAREABLE)) {
+            return true;
+        }
+        // build effective node type
+        Name[] types = new Name[mixins.size() + 1];
+        mixins.toArray(types);
+        // primary type
+        types[types.length - 1] = primary;
+        
+        try {
+            return ntReg.getEffectiveNodeType(types).includesNodeType(NameConstants.MIX_REFERENCEABLE);
+        } catch (NodeTypeConflictException ntce) {
+            String msg = "internal error: failed to build effective node type for node "
+                    + state.getNodeId();
+            log.debug(msg);
+            throw new RepositoryException(msg, ntce);
+        }
+    }
 }
