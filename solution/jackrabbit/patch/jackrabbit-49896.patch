diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/QueryObjectModelImpl.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/QueryObjectModelImpl.java
index beb61bf..1674188 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/QueryObjectModelImpl.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/QueryObjectModelImpl.java
@@ -27,12 +27,11 @@ import javax.jcr.query.qom.Source;
 
 import org.apache.jackrabbit.core.ItemManager;
 import org.apache.jackrabbit.core.SessionImpl;
-import org.apache.jackrabbit.spi.commons.name.NameConstants;
 import org.apache.jackrabbit.spi.commons.query.qom.QueryObjectModelTree;
 import org.apache.jackrabbit.spi.commons.query.QueryObjectModelBuilderRegistry;
 
 /**
- * <code>QueryObjectModelImpl</code>...
+ * <code>QueryObjectModelImpl</code> implements the query object model.
  */
 public class QueryObjectModelImpl extends QueryImpl implements QueryObjectModel {
 
@@ -42,65 +41,51 @@ public class QueryObjectModelImpl extends QueryImpl implements QueryObjectModel
     protected QueryObjectModelTree qomTree;
 
     /**
-     * @inheritDoc
+     * {@inheritDoc}
+     * @throws UnsupportedOperationException always.
      */
     public void init(SessionImpl session,
                      ItemManager itemMgr,
                      QueryHandler handler,
                      String statement,
-                     String language) throws InvalidQueryException {
-        checkNotInitialized();
-        this.session = session;
-        this.language = language;
-        this.handler = handler;
-        this.statement = statement;
-        this.query = handler.createExecutableQuery(session, itemMgr,
-                createQOMTree(statement, language));
-        setInitialized();
+                     String language,
+                     Node node) throws InvalidQueryException {
+        throw new UnsupportedOperationException();
     }
 
     /**
-     * @inheritDoc
-     */
-    public void init(SessionImpl session,
-                     ItemManager itemMgr,
-                     QueryHandler handler,
-                     Node node) throws InvalidQueryException, RepositoryException {
-        checkNotInitialized();
-        this.session = session;
-        this.node = node;
-        this.handler = handler;
-
-        if (!node.isNodeType(session.getJCRName(NameConstants.NT_QUERY))) {
-            throw new InvalidQueryException("node is not of type nt:query");
-        }
-        this.statement = node.getProperty(session.getJCRName(NameConstants.JCR_STATEMENT)).getString();
-        this.language = node.getProperty(session.getJCRName(NameConstants.JCR_LANGUAGE)).getString();
-        this.query = handler.createExecutableQuery(session, itemMgr,
-                createQOMTree(statement, language));
-        setInitialized();
-    }
-
-    /**
-     * @inheritDoc
+     * Initializes a query instance from a query object model.
+     *
+     * @param session  the session of the user executing this query.
+     * @param itemMgr  the item manager of the session executing this query.
+     * @param handler  the query handler of the search index.
+     * @param qomTree  the query object model tree.
+     * @param language the original query syntax from where the JQOM was
+     *                 created.
+     * @param node     a nt:query node where the query was read from or
+     *                 <code>null</code> if it is not a stored query.
+     * @throws InvalidQueryException if the qom tree cannot be serialized
+     *                               according to the given language.
+     * @throws RepositoryException   if another error occurs
      */
     public void init(SessionImpl session,
                      ItemManager itemMgr,
                      QueryHandler handler,
                      QueryObjectModelTree qomTree,
-                     String language)
+                     String language,
+                     Node node)
             throws InvalidQueryException, RepositoryException {
         checkNotInitialized();
         this.session = session;
         this.language = language;
         this.handler = handler;
         this.qomTree = qomTree;
+        this.node = node;
         this.statement = QueryObjectModelBuilderRegistry.getQueryObjectModelBuilder(language).toString(this);
         this.query = handler.createExecutableQuery(session, itemMgr, qomTree);
         setInitialized();
     }
 
-
     //-------------------------< QueryObjectModel >-----------------------------
 
     /**
@@ -138,22 +123,4 @@ public class QueryObjectModelImpl extends QueryImpl implements QueryObjectModel
     public Column[] getColumns() {
         return qomTree.getColumns();
     }
-
-    //------------------------------< internal >--------------------------------
-
-    /**
-     * Creates a {@link QueryObjectModelTree} representation for the query
-     * <code>statement</code>.
-     *
-     * @param statement the query statement.
-     * @param language  the language of the query statement.
-     * @return the {@link QueryObjectModelTree} representation.
-     * @throws InvalidQueryException if the query statement is malformed.
-     */
-    private QueryObjectModelTree createQOMTree(String statement,
-                                               String language)
-            throws InvalidQueryException {
-        // TODO: implement
-        return null;
-    }
 }
