diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/config/RepositoryConfigurationParser.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/config/RepositoryConfigurationParser.java
index 2c575c9..d288b63 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/config/RepositoryConfigurationParser.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/config/RepositoryConfigurationParser.java
@@ -21,7 +21,6 @@ import org.apache.jackrabbit.core.data.DataStoreFactory;
 import org.apache.jackrabbit.core.fs.FileSystem;
 import org.apache.jackrabbit.core.fs.FileSystemException;
 import org.apache.jackrabbit.core.fs.FileSystemFactory;
-import org.apache.jackrabbit.core.security.simple.SimpleSecurityManager;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
@@ -294,54 +293,54 @@ public class RepositoryConfigurationParser extends ConfigurationParser {
     }
 
     /**
-     * Parses the security manager configuration. Returns default
-     * configuration based on the {@link SimpleSecurityManager} class if
-     * a security manager is not explicitly configured.
+     * Parses the security manager configuration.
      *
-     * @see <a href="https://issues.apache.org/jira/browse/JCR-1765">JCR-1765</a>
      * @param security the &lt;security> element.
-     * @return the security manager configuration.
+     * @return the security manager configuration or <code>null</code>.
      * @throws ConfigurationException if the configuration is broken
      */
     public SecurityManagerConfig parseSecurityManagerConfig(Element security)
             throws ConfigurationException {
-        BeanConfig bc = new BeanConfig(
-                SimpleSecurityManager.class.getName(), new Properties());
-        String wspAttr = "security";
-        BeanConfig wac = null;
-
-        Element element = getElement(security, SECURITY_MANAGER_ELEMENT, false);
-        if (element != null) {
-            bc = parseBeanConfig(security, SECURITY_MANAGER_ELEMENT);
-
-            wspAttr = getAttribute(element, WSP_NAME_ATTRIBUTE, null);
-
-            if (getElement(element, WORKSPACE_ACCESS_ELEMENT, false) != null) {
-                wac = parseBeanConfig(element, WORKSPACE_ACCESS_ELEMENT);
+        // Optional security manager config entry
+        Element smElement = getElement(security, SECURITY_MANAGER_ELEMENT, false);
+        if (smElement != null) {
+            BeanConfig bc = parseBeanConfig(smElement);
+            String wspAttr = getAttribute(smElement, WSP_NAME_ATTRIBUTE, null);
+
+            BeanConfig wac = null;
+            Element element = getElement(smElement, WORKSPACE_ACCESS_ELEMENT, false);
+            if (element != null) {
+                wac = parseBeanConfig(smElement, WORKSPACE_ACCESS_ELEMENT);
             }
+            return new SecurityManagerConfig(bc, wspAttr, wac);
+        } else {
+            return null;
         }
-
-        return new SecurityManagerConfig(bc, wspAttr, wac);
     }
 
     /**
      * Parses the access manager configuration.
      *
      * @param security the &lt;security> element.
-     * @return the access manager configuration.
+     * @return the access manager configuration or <code>null</code>.
      * @throws ConfigurationException if the configuration is broken
      */
     public AccessManagerConfig parseAccessManagerConfig(Element security)
             throws ConfigurationException {
-        return new AccessManagerConfig(
-                parseBeanConfig(security, ACCESS_MANAGER_ELEMENT));
+        // Optional access manager config entry
+        Element accessMgr = getElement(security, ACCESS_MANAGER_ELEMENT, false);
+        if (accessMgr != null) {
+            return new AccessManagerConfig(parseBeanConfig(accessMgr));
+        } else {
+            return null;
+        }
     }
 
     /**
      * Parses the login module configuration.
      *
      * @param security the &lt;security> element.
-     * @return the login module configuration.
+     * @return the login module configuration or <code>null</code>.
      * @throws ConfigurationException if the configuration is broken
      */
     public LoginModuleConfig parseLoginModuleConfig(Element security)
