diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/MultiColumnQueryResult.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/MultiColumnQueryResult.java
index fb00764..715f4b6 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/MultiColumnQueryResult.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/MultiColumnQueryResult.java
@@ -23,8 +23,8 @@ import javax.jcr.RepositoryException;
 import org.apache.jackrabbit.core.ItemManager;
 import org.apache.jackrabbit.core.SessionImpl;
 import org.apache.jackrabbit.core.security.AccessManager;
-import org.apache.jackrabbit.spi.Path;
 import org.apache.jackrabbit.spi.commons.query.qom.ColumnImpl;
+import org.apache.jackrabbit.spi.commons.query.qom.OrderingImpl;
 
 /**
  * <code>MultiColumnQueryResult</code> implements a query result that executes
@@ -37,6 +37,11 @@ public class MultiColumnQueryResult extends QueryResultImpl {
      */
     private final MultiColumnQuery query;
 
+    /**
+     * The order specifier for each of the order properties.
+     */
+    protected final OrderingImpl[] orderings;
+
     public MultiColumnQueryResult(SearchIndex index,
                                   ItemManager itemMgr,
                                   SessionImpl session,
@@ -45,14 +50,14 @@ public class MultiColumnQueryResult extends QueryResultImpl {
                                   MultiColumnQuery query,
                                   SpellSuggestion spellSuggestion,
                                   ColumnImpl[] columns,
-                                  Path[] orderProps,
-                                  boolean[] orderSpecs,
+                                  OrderingImpl[] orderings,
                                   boolean documentOrder,
                                   long offset,
                                   long limit) throws RepositoryException {
         super(index, itemMgr, session, accessMgr, queryImpl, spellSuggestion,
-                columns, orderProps, orderSpecs, documentOrder, offset, limit);
+                columns, documentOrder, offset, limit);
         this.query = query;
+        this.orderings = orderings;
         // if document order is requested get all results right away
         getResults(docOrder ? Integer.MAX_VALUE : index.getResultFetchSize());
     }
@@ -62,8 +67,7 @@ public class MultiColumnQueryResult extends QueryResultImpl {
      */
     protected MultiColumnQueryHits executeQuery(long resultFetchHint)
             throws IOException {
-        return index.executeQuery(session, query, orderProps,
-                orderSpecs, resultFetchHint);
+        return index.executeQuery(session, query, orderings, resultFetchHint);
     }
 
     /**
