diff --git a/jackrabbit-core/src/test/java/org/apache/jackrabbit/api/jsr283/security/AccessControlDiscoveryTest.java b/jackrabbit-core/src/test/java/org/apache/jackrabbit/api/jsr283/security/AccessControlDiscoveryTest.java
index ec1754e..593e86b 100644
--- a/jackrabbit-core/src/test/java/org/apache/jackrabbit/api/jsr283/security/AccessControlDiscoveryTest.java
+++ b/jackrabbit-core/src/test/java/org/apache/jackrabbit/api/jsr283/security/AccessControlDiscoveryTest.java
@@ -20,28 +20,20 @@ import org.apache.jackrabbit.test.NotExecutableException;
 
 import javax.jcr.PathNotFoundException;
 import javax.jcr.RepositoryException;
+import javax.jcr.Session;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
+import java.util.Iterator;
 
 /**
  * <code>AccessControlDiscoveryTest</code>...
  */
 public class AccessControlDiscoveryTest extends AbstractAccessControlTest {
 
-    private Privilege getPrivilege(String name) throws RepositoryException, NotExecutableException {
-        Privilege[] privileges = acMgr.getSupportedPrivileges(testRootNode.getPath());
-        for (int i = 0; i < privileges.length; i++) {
-            if (name.equals(privileges[i].getName())) {
-                return privileges[i];
-            }
-        }
-        throw new NotExecutableException();
-    }
-
     public void testGetSupportedPrivileges() throws RepositoryException {
         // retrieving supported privileges:
         // Quote from spec:
@@ -57,21 +49,60 @@ public class AccessControlDiscoveryTest extends AbstractAccessControlTest {
 
         // test if those privileges are present:
         String msg = "A repository must support the privilege ";
-        assertTrue(msg + Privilege.READ, names.contains(Privilege.READ));
-        assertTrue(msg + Privilege.ADD_CHILD_NODES, names.contains(Privilege.ADD_CHILD_NODES));
-        assertTrue(msg + Privilege.REMOVE_CHILD_NODES, names.contains(Privilege.REMOVE_CHILD_NODES));
-        assertTrue(msg + Privilege.MODIFY_PROPERTIES, names.contains(Privilege.MODIFY_PROPERTIES));
-        assertTrue(msg + Privilege.READ_ACCESS_CONTROL, names.contains(Privilege.READ_ACCESS_CONTROL));
-        assertTrue(msg + Privilege.MODIFY_ACCESS_CONTROL, names.contains(Privilege.MODIFY_ACCESS_CONTROL));
-        assertTrue(msg + Privilege.WRITE, names.contains(Privilege.WRITE));
-        assertTrue(msg + Privilege.ALL, names.contains(Privilege.ALL));
+        assertTrue(msg + Privilege.JCR_READ, names.contains(getJCRName(Privilege.JCR_READ, superuser)));
+        assertTrue(msg + Privilege.JCR_ADD_CHILD_NODES, names.contains(getJCRName(Privilege.JCR_ADD_CHILD_NODES, superuser)));
+        assertTrue(msg + Privilege.JCR_REMOVE_CHILD_NODES, names.contains(getJCRName(Privilege.JCR_REMOVE_CHILD_NODES, superuser)));
+        assertTrue(msg + Privilege.JCR_MODIFY_PROPERTIES, names.contains(getJCRName(Privilege.JCR_MODIFY_PROPERTIES, superuser)));
+        assertTrue(msg + Privilege.JCR_REMOVE_NODE, names.contains(getJCRName(Privilege.JCR_REMOVE_NODE, superuser)));
+        assertTrue(msg + Privilege.JCR_READ_ACCESS_CONTROL, names.contains(getJCRName(Privilege.JCR_READ_ACCESS_CONTROL, superuser)));
+        assertTrue(msg + Privilege.JCR_MODIFY_ACCESS_CONTROL, names.contains(getJCRName(Privilege.JCR_MODIFY_ACCESS_CONTROL, superuser)));
+        assertTrue(msg + Privilege.JCR_WRITE, names.contains(getJCRName(Privilege.JCR_WRITE, superuser)));
+        assertTrue(msg + Privilege.JCR_ALL, names.contains(getJCRName(Privilege.JCR_ALL, superuser)));
+    }
+
+    public void testPrivilegeFromName() throws RepositoryException {
+        Privilege[] privileges = acMgr.getSupportedPrivileges(testRootNode.getPath());
+        for (int i = 0; i < privileges.length; i++) {
+            Privilege p = acMgr.privilegeFromName(privileges[i].getName());
+            assertEquals("Expected equal privilege name.", privileges[i].getName(), p.getName());
+            assertEquals("Expected equal privilege.", privileges[i], p);
+        }
+    }
+
+    public void testMandatoryPrivilegeFromName() throws RepositoryException {
+        List l = new ArrayList();
+        l.add(getJCRName(Privilege.JCR_READ, superuser));
+        l.add(getJCRName(Privilege.JCR_ADD_CHILD_NODES, superuser));
+        l.add(getJCRName(Privilege.JCR_REMOVE_CHILD_NODES, superuser));
+        l.add(getJCRName(Privilege.JCR_MODIFY_PROPERTIES, superuser));
+        l.add(getJCRName(Privilege.JCR_REMOVE_NODE, superuser));
+        l.add(getJCRName(Privilege.JCR_READ_ACCESS_CONTROL, superuser));
+        l.add(getJCRName(Privilege.JCR_MODIFY_ACCESS_CONTROL, superuser));
+        l.add(getJCRName(Privilege.JCR_WRITE, superuser));
+        l.add(getJCRName(Privilege.JCR_ALL, superuser));
+
+        for (Iterator it = l.iterator(); it.hasNext();) {
+            String privName = it.next().toString();
+            Privilege p = acMgr.privilegeFromName(privName);
+            assertEquals("Expected equal privilege name.", privName, p.getName());
+        }
+    }
+
+    public void testUnknownPrivilegeFromName() throws RepositoryException {
+        String unknownPrivilegeName = Math.random() + "";
+        try {
+            acMgr.privilegeFromName(unknownPrivilegeName);
+            fail(unknownPrivilegeName + " isn't the name of a known privilege.");
+        } catch (AccessControlException e) {
+            // success
+        }
     }
 
     public void testAllPrivilegeContainsAll() throws RepositoryException, NotExecutableException {
         Privilege[] supported = acMgr.getSupportedPrivileges(testRootNode.getPath());
 
         Set allSet = new HashSet();
-        Privilege all = getPrivilege(Privilege.ALL);
+        Privilege all = acMgr.privilegeFromName(Privilege.JCR_ALL);
         allSet.addAll(Arrays.asList(all.getAggregatePrivileges()));
 
         String msg = "The all privilege must also contain ";
@@ -87,22 +118,37 @@ public class AccessControlDiscoveryTest extends AbstractAccessControlTest {
     }
 
     public void testAllPrivilege() throws RepositoryException, NotExecutableException {
-        Privilege all = getPrivilege(Privilege.ALL);
+        Privilege all = acMgr.privilegeFromName(Privilege.JCR_ALL);
         assertFalse("All privilege must be not be abstract.", all.isAbstract());
         assertTrue("All privilege must be an aggregate privilege.", all.isAggregate());
-        assertEquals("The name of the all privilege must be " + Privilege.ALL, all.getName(), Privilege.ALL);
+        String expected = getJCRName(Privilege.JCR_ALL, superuser);
+        assertEquals("The name of the all privilege must be " + expected, expected, all.getName());
     }
 
+    /**
+     *
+     * @throws RepositoryException
+     * @throws NotExecutableException
+     */
     public void testWritePrivilege() throws RepositoryException, NotExecutableException {
-        Privilege w = getPrivilege(Privilege.WRITE);
+        Privilege w = acMgr.privilegeFromName(Privilege.JCR_WRITE);
         assertTrue("Write privilege must be an aggregate privilege.", w.isAggregate());
-        assertEquals("The name of the write privilege must be " + Privilege.WRITE, w.getName(), Privilege.WRITE);
+        String expected = getJCRName(Privilege.JCR_WRITE, superuser);
+        assertEquals("The name of the write privilege must be " + expected, expected, w.getName());
     }
 
+    /**
+     *
+     * @throws RepositoryException
+     */
     public void testGetPrivileges() throws RepositoryException {
         acMgr.getPrivileges(testRootNode.getPath());
     }
 
+    /**
+     *
+     * @throws RepositoryException
+     */
     public void testGetPrivilegesOnNonExistingNode() throws RepositoryException {
         String path = getPathToNonExistingNode();
         try {
@@ -113,6 +159,11 @@ public class AccessControlDiscoveryTest extends AbstractAccessControlTest {
         }
     }
 
+    /**
+     *
+     * @throws RepositoryException
+     * @throws NotExecutableException
+     */
     public void testGetPrivilegesOnProperty() throws RepositoryException, NotExecutableException {
         String path = getPathToProperty();
         try {
@@ -123,11 +174,19 @@ public class AccessControlDiscoveryTest extends AbstractAccessControlTest {
         }
     }
 
+    /**
+     *
+     * @throws RepositoryException
+     */
     public void testHasPrivileges() throws RepositoryException {
         Privilege[] privs = acMgr.getPrivileges(testRootNode.getPath());
         assertTrue(acMgr.hasPrivileges(testRootNode.getPath(), privs));
     }
 
+    /**
+     *
+     * @throws RepositoryException
+     */
     public void testHasIndividualPrivileges() throws RepositoryException {
         Privilege[] privs = acMgr.getPrivileges(testRootNode.getPath());
 
@@ -137,9 +196,14 @@ public class AccessControlDiscoveryTest extends AbstractAccessControlTest {
         }
     }
 
+    /**
+     *
+     * @throws RepositoryException
+     * @throws NotExecutableException
+     */
     public void testNotHasPrivileges() throws RepositoryException, NotExecutableException {
         Privilege[] privs = acMgr.getPrivileges(testRootNode.getPath());
-        Privilege all = getPrivilege(Privilege.ALL);
+        Privilege all = acMgr.privilegeFromName(Privilege.JCR_ALL);
 
         // remove all privileges that are granted.
         Set notGranted = new HashSet(Arrays.asList(all.getAggregatePrivileges()));
@@ -160,6 +224,10 @@ public class AccessControlDiscoveryTest extends AbstractAccessControlTest {
         }
     }
 
+    /**
+     *
+     * @throws RepositoryException
+     */
     public void testHasPrivilegesOnNotExistingNode() throws RepositoryException {
         String path = getPathToNonExistingNode();
         try {
@@ -170,6 +238,11 @@ public class AccessControlDiscoveryTest extends AbstractAccessControlTest {
         }
     }
 
+    /**
+     *
+     * @throws RepositoryException
+     * @throws NotExecutableException
+     */
     public void testHasPrivilegesOnProperty() throws RepositoryException, NotExecutableException {
         String path = getPathToProperty();
         try {
@@ -180,7 +253,23 @@ public class AccessControlDiscoveryTest extends AbstractAccessControlTest {
         }
     }
 
+    /**
+     *
+     * @throws RepositoryException
+     * @throws NotExecutableException
+     */
     public void testHasPrivilegesEmptyArray() throws RepositoryException, NotExecutableException {
         assertTrue(acMgr.hasPrivileges(testRootNode.getPath(), new Privilege[0]));
     }
+
+    //--------------------------------------------------------------------------
+    /**
+     * Retrieve the 'real' jcr name from a given privilege name constant.
+     */
+    private static String getJCRName(String privilegeNameConstant, Session session) throws RepositoryException {
+        int pos = privilegeNameConstant.indexOf('}');
+        String uri = privilegeNameConstant.substring(1, pos);
+        String localName = privilegeNameConstant.substring(pos + 1);
+        return session.getNamespacePrefix(uri) + ":" + localName;
+    }
 }
\ No newline at end of file
