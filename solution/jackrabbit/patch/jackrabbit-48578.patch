diff --git a/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java b/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java
index 0117608..795e7d7 100644
--- a/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java
+++ b/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/name/PathFactoryImpl.java
@@ -137,7 +137,7 @@ public class PathFactoryImpl implements PathFactory {
     }
 
     /**
-     * @see PathFactory#create(Path.Element[])
+     * @see PathFactory#create(org.apache.jackrabbit.spi.Path.Element[])
      */
     public Path create(Path.Element[] elements) throws IllegalArgumentException {
         return new Builder(elements).getPath();
@@ -157,11 +157,11 @@ public class PathFactoryImpl implements PathFactory {
         while (lastPos >= 0) {
             Path.Element elem;
             if (pos >= 0) {
-                elem = createElement(pathString.substring(lastPos, pos));
+                elem = createElementFromString(pathString.substring(lastPos, pos));
                 lastPos = pos + 1;
                 pos = pathString.indexOf(Path.DELIMITER, lastPos);
             } else {
-                elem = createElement(pathString.substring(lastPos));
+                elem = createElementFromString(pathString.substring(lastPos));
                 lastPos = -1;
             }
             list.add(elem);
@@ -204,10 +204,18 @@ public class PathFactoryImpl implements PathFactory {
         }
     }
 
+    public Path.Element createElement(String identifier) throws IllegalArgumentException {
+        if (identifier == null) {
+            throw new IllegalArgumentException("The id must not be null.");
+        } else {
+            return new IdentifierElement(identifier);
+        }
+    }
+
     /**
      * Create an element from the element string
      */
-    private Path.Element createElement(String elementString) {
+    private Path.Element createElementFromString(String elementString) {
         if (elementString == null) {
             throw new IllegalArgumentException("null PathElement literal");
         }
@@ -217,6 +225,8 @@ public class PathFactoryImpl implements PathFactory {
             return CURRENT_ELEMENT;
         } else if (elementString.equals(PARENT_LITERAL)) {
             return PARENT_ELEMENT;
+        } else if (elementString.startsWith("[") && elementString.endsWith("]") && elementString.length() > 2) {
+            return new IdentifierElement(elementString.substring(1, elementString.length()-1));
         }
 
         int pos = elementString.indexOf('[');
@@ -301,7 +311,7 @@ public class PathFactoryImpl implements PathFactory {
                 throw new IllegalArgumentException("Empty paths are not allowed");
             }
             this.elements = elements;
-            this.absolute = elements[0].denotesRoot();
+            this.absolute = elements[0].denotesRoot() || elements[0].denotesIdentifier();
             this.normalized = isNormalized;
         }
 
@@ -309,7 +319,14 @@ public class PathFactoryImpl implements PathFactory {
          * @see Path#denotesRoot()
          */
         public boolean denotesRoot() {
-            return absolute && elements.length == 1;
+            return absolute && elements.length == 1 && elements[0].denotesRoot();
+        }
+
+        /**
+         * @see Path#denotesIdentifier()
+         */
+        public boolean denotesIdentifier() {
+            return elements.length == 1 && elements[0].denotesIdentifier();
         }
 
         /**
@@ -336,10 +353,13 @@ public class PathFactoryImpl implements PathFactory {
         /**
          * @see Path#getNormalizedPath()
          */
-        public Path getNormalizedPath() {
+        public Path getNormalizedPath() throws RepositoryException {
             if (isNormalized()) {
                 return this;
             }
+            if (denotesIdentifier()) {
+                throw new RepositoryException("Identifier-based path cannot be normalized.");                 
+            }
             LinkedList queue = new LinkedList();
             Path.Element last = PARENT_ELEMENT;
             for (int i = 0; i < elements.length; i++) {
@@ -373,6 +393,9 @@ public class PathFactoryImpl implements PathFactory {
             if (!isAbsolute()) {
                 throw new RepositoryException("Only an absolute path can be canonicalized.");
             }
+            if (denotesIdentifier()) {
+                throw new RepositoryException("Identifier-based path cannot be canonicalized.");
+            }
             return getNormalizedPath();
         }
 
@@ -384,10 +407,13 @@ public class PathFactoryImpl implements PathFactory {
                 throw new IllegalArgumentException("null argument");
             }
 
-            // make sure both paths are absolute
+            // make sure both paths are absolute and not id-based
             if (!isAbsolute() || !other.isAbsolute()) {
                 throw new RepositoryException("Cannot compute relative path from relative paths");
             }
+            if (denotesIdentifier() || other.denotesIdentifier()) {
+                throw new RepositoryException("Cannot compute relative path from identifier-based paths");                
+            }
 
             // make sure we're comparing canonical paths
             Path p0 = getCanonicalPath();
@@ -430,11 +456,11 @@ public class PathFactoryImpl implements PathFactory {
         /**
          * @see Path#getAncestor(int)
          */
-        public Path getAncestor(int degree) throws IllegalArgumentException, PathNotFoundException {
+        public Path getAncestor(int degree) throws IllegalArgumentException, PathNotFoundException, RepositoryException {
             if (degree < 0) {
                 throw new IllegalArgumentException("degree must be >= 0");
             } else if (degree == 0) {
-                return this.getNormalizedPath();
+                return getNormalizedPath();
             }
 
             if (isAbsolute()) {
@@ -461,7 +487,12 @@ public class PathFactoryImpl implements PathFactory {
          * @see Path#getAncestorCount()
          */
         public int getAncestorCount() {
-            return (isAbsolute()) ? getDepth() : -1;
+            try {
+                return (isAbsolute() && !denotesIdentifier()) ? getDepth() : -1;
+            } catch (RepositoryException e) {
+                // never gets here.
+                return -1;
+            }
         }
 
         /**
@@ -474,7 +505,10 @@ public class PathFactoryImpl implements PathFactory {
         /**
          * @see Path#getDepth()
          */
-        public int getDepth() {
+        public int getDepth() throws RepositoryException {
+            if (denotesIdentifier()) {
+                throw new RepositoryException("Cannot determine depth of an identifier based path.");
+            }
             int depth = ROOT_DEPTH;
             for (int i = 0; i < elements.length; i++) {
                 if (elements[i].denotesParent()) {
@@ -750,6 +784,14 @@ public class PathFactoryImpl implements PathFactory {
         }
 
         /**
+         * @return always returns false.
+         * @see Path.Element#denotesIdentifier()
+         */
+        public boolean denotesIdentifier() {
+            return false;
+        }
+
+        /**
          * @see Path.Element#getString()
          */
         public String getString() {
@@ -871,6 +913,86 @@ public class PathFactoryImpl implements PathFactory {
     }
 
     /**
+     * 
+     */
+    private static final class IdentifierElement extends Element {
+
+        private final String identifier;
+        /**
+         * 
+         * @param identifier
+         */
+        private IdentifierElement(String identifier) {
+            super(null, Path.INDEX_UNDEFINED);
+            this.identifier = identifier;
+        }
+
+        /**
+         * @return Always returns true.
+         * @see Path.Element#denotesIdentifier()
+         */
+        public boolean denotesIdentifier() {
+            return true;
+        }
+
+        /**
+         * @return Always returns false.
+         * @see Path.Element#denotesName()
+         */
+        public boolean denotesName() {
+            return false;
+        }
+
+        /**
+         * Returns a string representation of this path element. Note that
+         * the path element name is expressed using the <code>{uri}name</code>
+         * syntax.
+         *
+         * @return string representation of the path element
+         * @see Object#toString()
+         */
+        public String toString() {
+            StringBuffer sb = new StringBuffer();
+            sb.append('[');
+            sb.append(identifier);
+            sb.append(']');
+            return sb.toString();
+        }
+
+        /**
+         * Computes a hash code for this path element.
+         *
+         * @return hash code
+         * @see Object#hashCode()
+         */
+        public int hashCode() {
+            int h = 37 * 17 + identifier.hashCode();
+            return h;
+        }
+
+        /**
+         * Check for path element equality. Returns true if the given
+         * object is a PathElement and contains the same name and index
+         * as this one.
+         *
+         * @param obj the object to compare with
+         * @return <code>true</code> if the path elements are equal
+         * @see Object#equals(Object)
+         */
+        public boolean equals(Object obj) {
+            if (this == obj) {
+                return true;
+            }
+            if (obj instanceof IdentifierElement) {
+                return identifier.equals(((IdentifierElement) obj).identifier);
+            } if (obj instanceof Path.Element) {
+                Path.Element other = (Path.Element) obj;
+                return other.denotesIdentifier() && getString().equals(other.getString());
+            }
+            return false;
+        }
+    }
+    /**
      * Builder internal class
      */
     private static final class Builder {
@@ -912,7 +1034,7 @@ public class PathFactoryImpl implements PathFactory {
 
             this.elements = elements;
             if (elements.length == 1) {
-                isNormalized = true;
+                isNormalized = !elements[0].denotesIdentifier();
             } else {
                 boolean absolute = elements[0].denotesRoot();
                 isNormalized = true;
@@ -926,6 +1048,8 @@ public class PathFactoryImpl implements PathFactory {
                         if (i > 0) {
                             throw new IllegalArgumentException("Invalid path: The root element may only occur at the beginning.");
                         }
+                    } else if (elem.denotesIdentifier()) {
+                        throw new IllegalArgumentException("Invalid path: The identifier element may only occur at the beginning of a single element path.");
                     } else  if (elem.denotesParent()) {
                         parents++;
                         if (absolute || named > 0) {
