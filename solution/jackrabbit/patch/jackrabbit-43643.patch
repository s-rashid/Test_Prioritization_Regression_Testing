diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/simple/SimpleSecurityManager.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/simple/SimpleSecurityManager.java
index 9dfd111..0eacc85 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/simple/SimpleSecurityManager.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/simple/SimpleSecurityManager.java
@@ -47,6 +47,7 @@ import javax.jcr.Repository;
 import javax.jcr.RepositoryException;
 import javax.jcr.Session;
 import javax.jcr.UnsupportedRepositoryOperationException;
+import javax.jcr.SimpleCredentials;
 import javax.security.auth.Subject;
 import java.security.Principal;
 import java.security.acl.Group;
@@ -56,6 +57,7 @@ import java.util.HashSet;
 import java.util.Map;
 import java.util.Properties;
 import java.util.Set;
+import java.util.Iterator;
 
 /**
  * <code>SimpleSecurityManager</code>: simple implementation ignoring both
@@ -209,6 +211,31 @@ public class SimpleSecurityManager implements JackrabbitSecurityManager {
     }
 
     /**
+     * @see JackrabbitSecurityManager#getUserID(Subject)
+     */
+    public String getUserID(Subject subject) throws RepositoryException {
+        String uid = null;
+        // if SimpleCredentials are present, the UserID can easily be retrieved.
+        Iterator creds = subject.getPublicCredentials(SimpleCredentials.class).iterator();
+        if (creds.hasNext()) {
+            SimpleCredentials sc = (SimpleCredentials) creds.next();
+            uid = sc.getUserID();
+        } else {
+            // no SimpleCredentials: assume that UserID and principal name
+            // are the same (not totally correct) and thus return the name
+            // of the first non-group principal.
+            for (Iterator it = subject.getPrincipals().iterator(); it.hasNext();) {
+                Principal p = (Principal) it.next();
+                if (!(p instanceof Group)) {
+                    uid = p.getName();
+                    break;
+                }
+            }
+        }
+        return uid;
+    }
+
+    /**
      * Creates an AuthContext for the given {@link Credentials} and
      * {@link Subject}.<br>
      * This includes selection of applicatoin specific LoginModules and
