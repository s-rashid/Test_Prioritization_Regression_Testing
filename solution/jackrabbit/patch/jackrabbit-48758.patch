diff --git a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/VersionGraphTest.java b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/VersionGraphTest.java
index dad4ae7..f420717 100644
--- a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/VersionGraphTest.java
+++ b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/VersionGraphTest.java
@@ -17,6 +17,7 @@
 package org.apache.jackrabbit.test.api.version;
 
 import javax.jcr.version.Version;
+import javax.jcr.version.VersionManager;
 import javax.jcr.RepositoryException;
 import javax.jcr.Property;
 import javax.jcr.Value;
@@ -48,6 +49,22 @@ public class VersionGraphTest extends AbstractVersionTest {
     }
 
     /**
+     * Test that the initial base version after creation of a versionable node
+     * points to the root version.
+     *
+     * @throws javax.jcr.RepositoryException
+     */
+    public void testInitialBaseVersionPointsToRootVersionJcr2() throws RepositoryException {
+
+        VersionManager versionManager = versionableNode.getSession().getWorkspace().getVersionManager();
+        String path = versionableNode.getPath();
+        Version rV = versionManager.getVersionHistory(path).getRootVersion();
+        Version bV = versionManager.getBaseVersion(path);
+
+        assertTrue("After creation of a versionable node the node's baseVersion must point to the rootVersion in the version history.", rV.isSame(bV));
+    }
+
+    /**
      * Test if after creation of a versionable node N the multi-value
      * REFERENCE property jcr:predecessors of N is initialized to contain a
      * single UUID, that of the root version (the same as jcr:baseVersion).
@@ -69,6 +86,27 @@ public class VersionGraphTest extends AbstractVersionTest {
     }
 
     /**
+     * Test if after creation of a versionable node N the multi-value
+     * REFERENCE property jcr:predecessors of N is initialized to contain a
+     * single UUID, that of the root version (the same as jcr:baseVersion).
+     *
+     * @throws RepositoryException
+     */
+    public void testInitialNodePredecessorsJcr2() throws RepositoryException {
+
+        Property predecessors = versionableNode.getProperty(jcrPredecessors);
+        Value[] values = predecessors.getValues();
+        Version rV = versionableNode.getSession().getWorkspace().getVersionManager().getVersionHistory(versionableNode.getPath()).getRootVersion();
+        if (values.length != 1) {
+            fail("The jcr:predecessors property of a versionable node must be initialized to contain a single value");
+        }
+
+        Value initialVal = values[0];
+
+        assertTrue("The jcr:predecessors property of a versionable node is initialized to contain a single UUID, that of the root version", initialVal.equals(superuser.getValueFactory().createValue(rV)));
+    }
+
+    /**
      * Test if the root version does not have any predecessor versions.
      *
      * @throws RepositoryException
@@ -79,6 +117,16 @@ public class VersionGraphTest extends AbstractVersionTest {
     }
 
     /**
+     * Test if the root version does not have any predecessor versions.
+     *
+     * @throws RepositoryException
+     */
+    public void testRootVersionHasNoPredecessorJcr2() throws RepositoryException {
+        Version[] predec = versionableNode.getSession().getWorkspace().getVersionManager().getVersionHistory(versionableNode.getPath()).getRootVersion().getPredecessors();
+        assertTrue("The root version may not have any predecessors.", predec.length == 0);
+    }
+
+    /**
      * Test if UnsupportedRepositoryOperationException is thrown when calling
      * Node.getVersionHistory() on a non-versionable node.
      *
@@ -92,4 +140,19 @@ public class VersionGraphTest extends AbstractVersionTest {
             //success
         }
     }
+
+    /**
+     * Test if UnsupportedRepositoryOperationException is thrown when calling
+     * Node.getVersionHistory() on a non-versionable node.
+     *
+     * @throws RepositoryException
+     */
+    public void testGetBaseVersionOnNonVersionableNodeJcr2() throws RepositoryException {
+        try {
+            nonVersionableNode.getSession().getWorkspace().getVersionManager().getBaseVersion(nonVersionableNode.getPath());
+            fail("Node.getBaseVersion() must throw UnsupportedRepositoryOperationException if the node is not versionable.");
+        } catch (UnsupportedRepositoryOperationException e) {
+            //success
+        }
+    }
 }
\ No newline at end of file
