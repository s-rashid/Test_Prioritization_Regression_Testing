diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/nodetype/NodeTypeImpl.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/nodetype/NodeTypeImpl.java
index 50c68c5..ef5ad77 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/nodetype/NodeTypeImpl.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/nodetype/NodeTypeImpl.java
@@ -29,7 +29,6 @@ import javax.jcr.nodetype.NoSuchNodeTypeException;
 import javax.jcr.nodetype.NodeDefinition;
 import javax.jcr.nodetype.NodeType;
 import javax.jcr.nodetype.NodeTypeDefinition;
-import javax.jcr.nodetype.NodeTypeIterator;
 import javax.jcr.nodetype.PropertyDefinition;
 
 import org.apache.jackrabbit.core.data.DataStore;
@@ -37,15 +36,15 @@ import org.apache.jackrabbit.core.value.InternalValue;
 import org.apache.jackrabbit.spi.Name;
 import org.apache.jackrabbit.spi.commons.conversion.NameException;
 import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
+import org.apache.jackrabbit.spi.commons.nodetype.AbstractNodeType;
 import org.apache.jackrabbit.value.ValueHelper;
-import org.apache.jackrabbit.commons.iterator.NodeTypeIteratorAdapter;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 /**
  * A <code>NodeTypeImpl</code> ...
  */
-public class NodeTypeImpl implements NodeType, NodeTypeDefinition {
+public class NodeTypeImpl extends AbstractNodeType implements NodeType, NodeTypeDefinition {
 
     private static Logger log = LoggerFactory.getLogger(NodeTypeImpl.class);
 
@@ -73,6 +72,7 @@ public class NodeTypeImpl implements NodeType, NodeTypeDefinition {
     NodeTypeImpl(EffectiveNodeType ent, NodeTypeDef ntd,
                  NodeTypeManagerImpl ntMgr, NamePathResolver resolver,
                  ValueFactory valueFactory, DataStore store) {
+        super(ntMgr);
         this.ent = ent;
         this.ntMgr = ntMgr;
         this.resolver = resolver;
@@ -228,49 +228,6 @@ public class NodeTypeImpl implements NodeType, NodeTypeDefinition {
         return (NodeType[]) inherited.toArray(new NodeType[inherited.size()]);
     }
 
-    /**
-     * Returns the node types derived from this node type.
-     *
-     * @param directOnly if <code>true</code> only direct subtypes will be considered
-     *
-     * @return an <code>NodeTypeIterator</code>.
-     * @see #getSubtypes
-     * @see #getDeclaredSubtypes
-     */
-    public NodeTypeIterator getSubtypes(boolean directOnly) {
-        NodeTypeIterator iter;
-        try {
-            iter = ntMgr.getAllNodeTypes();
-        } catch (RepositoryException e) {
-            // should never get here
-            log.error("failed to retrieve registered node types", e);
-            return NodeTypeIteratorAdapter.EMPTY;
-        }
-
-        ArrayList<NodeType> result = new ArrayList<NodeType>();
-        String thisName = getName();
-        while (iter.hasNext()) {
-            NodeType nt = iter.nextNodeType();
-            if (!nt.getName().equals(thisName)) {
-                if (directOnly) {
-                    // direct subtypes only
-                    String[] names = nt.getDeclaredSupertypeNames();
-                    for (int i = 0; i < names.length; i++) {
-                        if (names[i].equals(thisName)) {
-                            result.add(nt);
-                            break;
-                        }
-                    }
-                } else {
-                    // direct and indirect subtypes
-                    if (nt.isNodeType(thisName)) {
-                        result.add(nt);
-                    }
-                }
-            }
-        }
-        return new NodeTypeIteratorAdapter(result);
-    }
 
     //---------------------------------------------------< NodeTypeDefinition >
     /**
@@ -700,29 +657,4 @@ public class NodeTypeImpl implements NodeType, NodeTypeDefinition {
         }
         return false;
     }
-
-    /**
-     * Returns the <i>direct</i> subtypes of this node type in the node type inheritance hierarchy,
-     * that is, those which actually declared this node type in their list of supertypes.
-     *
-     * @see #getSubtypes
-     *
-     * @return an <code>NodeTypeIterator</code>.
-     * @since JCR 2.0
-     */
-    public NodeTypeIterator getDeclaredSubtypes() {
-        return getSubtypes(true);
-    }
-
-    /**
-     * Returns all subtypes of this node type in the node type inheritance hierarchy.
-     *
-     * @see #getDeclaredSubtypes
-     *
-     * @return a <code>NodeTypeIterator</code>.
-     * @since JCR 2.0
-     */
-    public NodeTypeIterator getSubtypes() {
-        return getSubtypes(false);
-    }
 }
