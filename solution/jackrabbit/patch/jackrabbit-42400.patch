diff --git a/jackrabbit-api/src/main/java/org/apache/jackrabbit/api/security/user/UserManager.java b/jackrabbit-api/src/main/java/org/apache/jackrabbit/api/security/user/UserManager.java
new file mode 100644
index 0000000..c460e45
--- /dev/null
+++ b/jackrabbit-api/src/main/java/org/apache/jackrabbit/api/security/user/UserManager.java
@@ -0,0 +1,127 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.jackrabbit.api.security.user;
+
+import javax.jcr.RepositoryException;
+import javax.jcr.Credentials;
+import java.security.Principal;
+import java.util.Iterator;
+
+/**
+ * The <code>UserManager</code> provides access to and means to maintain
+ * {@link Authorizable authoriable objects} i.e. {@link User users} and
+ * {@link Group groups}. The <code>UserManager</code> is bound to a particular
+ * <code>Session</code>.
+ */
+public interface UserManager {
+
+    /**
+     * Get the Authorizable by its id.
+     *
+     * @param id
+     * @return Authorizable or <code>null</code>, if not present.
+     * @throws RepositoryException
+     * @see Authorizable#getID()
+     */
+    Authorizable getAuthorizable(String id) throws RepositoryException;
+
+    /**
+     * Get the Authorizable by its main Principal.
+     *
+     * @param principal
+     * @return Authorizable or <code>null</code>, if not present.
+     * @throws RepositoryException
+     */
+    Authorizable getAuthorizable(Principal principal) throws RepositoryException;
+
+    /**
+     * Returns all <code>Authorizable</code>s that have
+     * {@link Authorizable#getProperty(String) property} with the given name and
+     * that Property equals the given value.
+     *
+     * @param propertyName
+     * @param value
+     * @return All <code>Authorizable</code>s that have a property with the given
+     * name exactly matching the given value.
+     * @throws RepositoryException
+     * @see Authorizable#getProperty(String)
+     */
+    Iterator findAuthorizable(String propertyName, String value) throws RepositoryException;
+
+    /**
+     * Creates an User for the given userID that authenitcates with the given
+     * {@link javax.jcr.Credentials Credentials}.<br>
+     * Neither of the specified parameters can be <code>null</code>.
+     *
+     * @param userID
+     * @param credentials
+     * @param principal
+     * @return The new <code>User</code>.
+     * @throws AuthorizableExistsException in case the given userID is already
+     * in use or another Authorizable with the same principal name exists.
+     * @throws RepositoryException If another error occurs.
+     */
+    User createUser(String userID, Credentials credentials, Principal principal) throws AuthorizableExistsException, RepositoryException;
+
+    /**
+     * Creates an User for the given userID that authenitcates with the given
+     * {@link javax.jcr.Credentials Credentials} and returns the specified
+     * Principal upon {@link User#getPrincipal()}. If the implementation is not
+     * able to deal with the <code>itermediatePath</code> that parameter should
+     * be ignored.
+     * Except for the <code>itermediatePath</code>, neither of the specified
+     * parameters can be <code>null</code>.
+     *
+     * @param userID
+     * @param credentials
+     * @param principal
+     * @param intermediatePath
+     * @return The new <code>User</code>.
+     * @throws AuthorizableExistsException in case the given userID is already
+     * in use or another Authorizable with the same principal name exists.
+     * @throws RepositoryException If the current Session is
+     * not allowed to create users or some another error occurs.
+     */
+    User createUser(String userID, Credentials credentials, Principal principal,
+                    String intermediatePath) throws AuthorizableExistsException, RepositoryException;
+
+    /**
+     * Creates a new <code>Group</code> that is based on the given principal.
+     *
+     * @param principal A non-null <code>Principal</code>
+     * @return The new <code>Group</code>.
+     * @throws AuthorizableExistsException in case the given groupID is already
+     * in use or another Authorizable with the same principal name exists.
+     * @throws RepositoryException If another error occurs.
+     */
+    Group createGroup(Principal principal) throws AuthorizableExistsException, RepositoryException;
+
+    /**
+     * Creates a new <code>Group</code> that is based on the given principal
+     * and the specified <code>itermediatePath</code> hint. If the implementation is not
+     * able to deal with the <code>itermediatePath</code> that parameter should
+     * be ignored.
+     *
+     * @param principal
+     * @param intermediatePath
+     * @return The new <code>Group</code>.
+     * @throws AuthorizableExistsException in case the given groupID is already
+     * in use or another Authorizable with the same principal name exists.
+     * @throws RepositoryException If another error occurs.
+     */
+    Group createGroup(Principal principal, String intermediatePath) throws AuthorizableExistsException, RepositoryException;
+}
