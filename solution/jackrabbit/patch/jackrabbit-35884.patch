diff --git a/contrib/jackrabbit-jcr-mapping/jcr-mapping/src/main/java/org/apache/jackrabbit/ocm/mapper/impl/annotation/AnnotationDescriptorReader.java b/contrib/jackrabbit-jcr-mapping/jcr-mapping/src/main/java/org/apache/jackrabbit/ocm/mapper/impl/annotation/AnnotationDescriptorReader.java
index c4f44a1..7c4c06a 100644
--- a/contrib/jackrabbit-jcr-mapping/jcr-mapping/src/main/java/org/apache/jackrabbit/ocm/mapper/impl/annotation/AnnotationDescriptorReader.java
+++ b/contrib/jackrabbit-jcr-mapping/jcr-mapping/src/main/java/org/apache/jackrabbit/ocm/mapper/impl/annotation/AnnotationDescriptorReader.java
@@ -22,12 +22,17 @@ import java.beans.Introspector;
 import java.beans.PropertyDescriptor;
 import java.util.List;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.jackrabbit.ocm.exception.InitMapperException;
 import org.apache.jackrabbit.ocm.mapper.DescriptorReader;
 import org.apache.jackrabbit.ocm.mapper.model.BeanDescriptor;
 import org.apache.jackrabbit.ocm.mapper.model.ClassDescriptor;
 import org.apache.jackrabbit.ocm.mapper.model.CollectionDescriptor;
 import org.apache.jackrabbit.ocm.mapper.model.FieldDescriptor;
+import org.apache.jackrabbit.ocm.mapper.model.ImplementDescriptor;
 import org.apache.jackrabbit.ocm.mapper.model.MappingDescriptor;
+import org.apache.jackrabbit.ocm.reflection.ReflectionUtils;
 
 /**
  * Helper class that reads the xml mapping file and load all class descriptors into memory (object graph)
@@ -37,6 +42,8 @@ import org.apache.jackrabbit.ocm.mapper.model.MappingDescriptor;
  */
 public class AnnotationDescriptorReader implements DescriptorReader
 {
+	private static final Log log = LogFactory.getLog(AnnotationDescriptorReader.class);
+	
 	List<Class> annotatedClassNames;
     public AnnotationDescriptorReader(List<Class> annotatedClassNames)
     {
@@ -59,91 +66,104 @@ public class AnnotationDescriptorReader implements DescriptorReader
 	
 	private ClassDescriptor buildClassDescriptor(MappingDescriptor mappingDescriptor, Class clazz)  
 	{
-		Node annotationNode =  (Node) clazz.getAnnotation(Node.class);
-		ClassDescriptor descriptor = new ClassDescriptor();
-		descriptor.setClassName(clazz.getName());
-		descriptor.setJcrType(annotationNode.jcrType());
-		if (annotationNode.jcrSuperTypes() != null && ! annotationNode.jcrSuperTypes().equals(""))
+		ClassDescriptor classDescriptor = null;
+		
+		Node nodeAnnotation =  (Node) clazz.getAnnotation(Node.class);
+		if (nodeAnnotation != null)
+		{
+			classDescriptor = createClassDescriptor(clazz, nodeAnnotation);			
+			addAttributeDescriptors(mappingDescriptor, classDescriptor, clazz);
+			return classDescriptor;
+		}
+		else
 		{
-		     descriptor.setJcrSuperTypes(annotationNode.jcrSuperTypes());
+			throw  new InitMapperException("The persistent class " + clazz.getName() + " has not @Node annotation");
 		}
+	
+		
 		
-		if (annotationNode.jcrMixinTypes() != null && ! annotationNode.jcrMixinTypes().equals(""))
+	}
+
+	private ClassDescriptor createClassDescriptor(Class clazz, Node nodeAnnotation) 
+	{
+		ClassDescriptor classDescriptor = new ClassDescriptor();
+		classDescriptor.setClassName(clazz.getName());
+		classDescriptor.setJcrType(nodeAnnotation.jcrType());
+		if (nodeAnnotation.jcrSuperTypes() != null && ! nodeAnnotation.jcrSuperTypes().equals(""))
+		{
+		     classDescriptor.setJcrSuperTypes(nodeAnnotation.jcrSuperTypes());
+		}
+		
+		if (nodeAnnotation.jcrMixinTypes() != null && ! nodeAnnotation.jcrMixinTypes().equals(""))
 		{		
-		     descriptor.setJcrMixinTypes(annotationNode.jcrMixinTypes());
+		     classDescriptor.setJcrMixinTypes(nodeAnnotation.jcrMixinTypes());
 		}
 		
-		if (annotationNode.extend() != null && ! annotationNode.extend().equals(""))
+		if (nodeAnnotation.extend() != null && ! nodeAnnotation.extend().equals(Object.class))
 		{
-		     descriptor.setExtend(annotationNode.extend());
+		     classDescriptor.setExtend(nodeAnnotation.extend().getName());
 		}
 		
-		descriptor.setAbstract(annotationNode.isAbstract());
-		descriptor.setInterface(clazz.isInterface());
+		classDescriptor.setAbstract(nodeAnnotation.isAbstract());
+		classDescriptor.setInterface(clazz.isInterface());
+		return classDescriptor;
+	}
+	
+	private void addImplementDescriptor(ClassDescriptor classDescriptor, Class clazz) 
+	{
+		Implement implementAnnotation = (Implement) clazz.getAnnotation(Implement.class);
+		if (implementAnnotation != null) 
+		{
+            ImplementDescriptor implementDescriptor =  new ImplementDescriptor();
+            implementDescriptor.setInterfaceName(implementAnnotation.interfaceName().getName());
+            classDescriptor.addImplementDescriptor(implementDescriptor);
+		}
 		
-		addFieldDescriptors(descriptor, clazz);
-		addBeanDescriptors(descriptor, clazz);
-		addCollectionDescriptors(mappingDescriptor, descriptor, clazz);
-		return descriptor;
+	}
+	
+	/**
+	 * Add FieldDescriptors, BeanDescriptors and CollectionDescriptors.
+	 * The descriptots can be defined on the getter methods or on the field declation. 
+	 * 
+	 * @param mappingDescriptor The mapping descriptor
+	 * @param classDescriptor the classdescriptor for which the descriptors have to be added
+	 * @param clazz The associated class
+	 */
+	private void addAttributeDescriptors(MappingDescriptor mappingDescriptor, ClassDescriptor classDescriptor,Class clazz) {
+ 
+		addDescriptorsFromFields(mappingDescriptor, classDescriptor, clazz);
+		addDescriptorsFromGetters(mappingDescriptor, classDescriptor, clazz);
 	}
 
-	private void addCollectionDescriptors(MappingDescriptor mappingDescriptor, ClassDescriptor descriptor,Class clazz) {
-		BeanInfo beanInfo;
-		try {
-			beanInfo = Introspector.getBeanInfo(clazz);
-		} catch (IntrospectionException e) {
-			throw new RuntimeException(e);
-		}
-		PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
-		for (PropertyDescriptor propertyDescriptor : propertyDescriptors) {
-			Collection jcrChildNode = propertyDescriptor.getReadMethod().getAnnotation(Collection.class);
-			if (jcrChildNode != null) {
-				Class targetClass = jcrChildNode.type();
-				CollectionDescriptor collectionDescriptor = new CollectionDescriptor();
-				ClassDescriptor classDescriptor = mappingDescriptor.getClassDescriptorByName(targetClass.getName());
-
-				if (classDescriptor == null)
-					throw new RuntimeException(
-							"Unable to reference class "
-									+ targetClass.getName()
-									+ " as a child node since it has not been registered, ordering perhaps?");
-
-				if (jcrChildNode.jcrName() != null && ! jcrChildNode.jcrName().equals(""))
-				{
-				   collectionDescriptor.setJcrName(jcrChildNode.jcrName());
-				}
-				else
-				{
-				   collectionDescriptor.setJcrName(propertyDescriptor.getName());
-				}
-				
-				Node annotationNode = (Node) targetClass.getAnnotation(Node.class);
-				collectionDescriptor.setDefaultPrimaryType(annotationNode.jcrType());
-				collectionDescriptor.setJcrSameNameSiblings(jcrChildNode.sameNameSiblings());
-				collectionDescriptor.setJcrAutoCreated(jcrChildNode.autoCreate());
-				collectionDescriptor.setJcrProtected(jcrChildNode.protect());
-				collectionDescriptor.setJcrOnParentVersion(jcrChildNode.onParentVersion());
-				collectionDescriptor.setJcrMandatory(jcrChildNode.mandatory());
-				collectionDescriptor.setAutoInsert(jcrChildNode.autoInsert());
-				collectionDescriptor.setAutoRetrieve(jcrChildNode.autoRetrieve());
-				collectionDescriptor.setAutoUpdate(jcrChildNode.autoUpdate());
-				collectionDescriptor.setCollectionClassName(propertyDescriptor.getReadMethod().getReturnType().getName());
-				collectionDescriptor.setElementClassName(targetClass.getName());
-				collectionDescriptor.setCollectionConverter(jcrChildNode.converter().getName());
-				collectionDescriptor.setFieldName(propertyDescriptor.getName());
-
-				collectionDescriptor.setJcrType(annotationNode.jcrType());
-				collectionDescriptor.setJcrSameNameSiblings(jcrChildNode.sameNameSiblings());
-				collectionDescriptor.setProxy(jcrChildNode.proxy());
-
-				descriptor.addCollectionDescriptor(collectionDescriptor);
+	private void addDescriptorsFromFields(MappingDescriptor mappingDescriptor, ClassDescriptor classDescriptor, Class clazz) {
+	    
+		java.lang.reflect.Field[] fields = clazz.getDeclaredFields();
+	    for (int index = 0; index < fields.length; index++) 
+	    {
+			Field fieldAnnotation = fields[index].getAnnotation(Field.class);
+			if (fieldAnnotation != null) {
+				addFieldDescriptor(classDescriptor, fields[index].getName(), fieldAnnotation);
+			}
+			
+			// Check if there is an Bean annotation
+			Bean beanAnnotation = fields[index].getAnnotation(Bean.class);
+			if (beanAnnotation != null) {
+				addBeanDescriptor(classDescriptor, fields[index].getName(), beanAnnotation);
+			}
+			
+			// Check if there is an Collection annotation
+			Collection collectionAnnotation = fields[index].getAnnotation(Collection.class);
+			if (collectionAnnotation != null) {
+				addCollectionDescriptor(mappingDescriptor, classDescriptor, fields[index].getName(), 
+						                fields[index].getName(), collectionAnnotation);
 			}
+					
+		   	
 		}
-
+		
 	}
 
-	
-	private void addBeanDescriptors(ClassDescriptor descriptor,Class clazz) {
+	private void addDescriptorsFromGetters(MappingDescriptor mappingDescriptor, ClassDescriptor classDescriptor, Class clazz) {
 		BeanInfo beanInfo;
 		try {
 			beanInfo = Introspector.getBeanInfo(clazz);
@@ -152,103 +172,164 @@ public class AnnotationDescriptorReader implements DescriptorReader
 		}
 		PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
 		for (PropertyDescriptor propertyDescriptor : propertyDescriptors) {
-			Bean jcrChildNode = propertyDescriptor.getReadMethod().getAnnotation(Bean.class);
-			if (jcrChildNode != null) {
-				
-				BeanDescriptor beanDescriptor = new BeanDescriptor();
-				beanDescriptor.setFieldName(propertyDescriptor.getName());
-				if (jcrChildNode.jcrName() != null && ! jcrChildNode.jcrName().equals(""))
-				{
-				   beanDescriptor.setJcrName(jcrChildNode.jcrName());
-				}
-				else
-				{
-					beanDescriptor.setJcrName(propertyDescriptor.getName());
-				}
-				
-				beanDescriptor.setProxy(jcrChildNode.proxy());				
-				beanDescriptor.setConverter(jcrChildNode.converter().getName());
-				beanDescriptor.setAutoInsert(jcrChildNode.autoInsert());
-				beanDescriptor.setAutoRetrieve(jcrChildNode.autoRetrieve());
-				beanDescriptor.setAutoUpdate(jcrChildNode.autoUpdate());
-				beanDescriptor.setJcrType(jcrChildNode.jcrType());
-				beanDescriptor.setJcrAutoCreated(jcrChildNode.jcrAutoCreated());
-				beanDescriptor.setJcrMandatory(jcrChildNode.jcrMandatory());
-				beanDescriptor.setJcrOnParentVersion(jcrChildNode.jcrOnParentVersion());
-				beanDescriptor.setJcrProtected(jcrChildNode.jcrProtected());			            
-				beanDescriptor.setJcrSameNameSiblings(jcrChildNode.jcrSameNameSiblings());				
-
-				descriptor.addBeanDescriptor(beanDescriptor);
+
+			// Check if there is an Field annotation
+			Field fieldAnnotation = propertyDescriptor.getReadMethod().getAnnotation(Field.class);
+			if (fieldAnnotation != null) {
+				addFieldDescriptor(classDescriptor, propertyDescriptor.getName(), fieldAnnotation);
 			}
+			
+			// Check if there is an Bean annotation
+			Bean beanAnnotation = propertyDescriptor.getReadMethod().getAnnotation(Bean.class);
+			if (beanAnnotation != null) {
+				addBeanDescriptor(classDescriptor, propertyDescriptor.getName(), beanAnnotation);
+			}
+			
+			// Check if there is an Collection annotation
+			Collection collectionAnnotation = propertyDescriptor.getReadMethod().getAnnotation(Collection.class);
+			if (collectionAnnotation != null) {
+				addCollectionDescriptor(mappingDescriptor, classDescriptor, propertyDescriptor.getName(), 
+						                propertyDescriptor.getReadMethod().getReturnType().getName(), collectionAnnotation);
+			}
+		}
+	}
+
+
+	private void addCollectionDescriptor(MappingDescriptor mappingDescriptor, ClassDescriptor descriptor,
+			                             String fieldName, String collectionClassName, Collection collectionAnnotation) {
+		
+		Class targetClass = collectionAnnotation.elementClassName();
+		CollectionDescriptor collectionDescriptor = new CollectionDescriptor();
+		ClassDescriptor classDescriptor = mappingDescriptor.getClassDescriptorByName(targetClass.getName());
+
+		//TODO : This check can be done later by AbstractMapperImpl
+		if (classDescriptor == null)
+			throw new InitMapperException(
+					"Unable to reference class "
+							+ targetClass.getName()
+							+ " as a child node since it has not been registered, ordering perhaps?");
+		
+		collectionDescriptor.setFieldName(fieldName);
+		
+		if (collectionAnnotation.jcrName() != null && ! collectionAnnotation.jcrName().equals(""))
+		{
+		   collectionDescriptor.setJcrName(collectionAnnotation.jcrName());
+		}
+		else
+		{
+		   collectionDescriptor.setJcrName(fieldName);
+		}
+		
+		Node annotationNode = (Node) targetClass.getAnnotation(Node.class);
+		collectionDescriptor.setProxy(collectionAnnotation.proxy());
+		
+		collectionDescriptor.setAutoInsert(collectionAnnotation.autoInsert());
+		collectionDescriptor.setAutoRetrieve(collectionAnnotation.autoRetrieve());
+		collectionDescriptor.setAutoUpdate(collectionAnnotation.autoUpdate());
+		collectionDescriptor.setCollectionClassName(collectionClassName);
+		if (! collectionAnnotation.elementClassName().equals(Object.class))
+		{
+			collectionDescriptor.setElementClassName(collectionAnnotation.elementClassName().getName());
 		}
+		else
+		{
+		    collectionDescriptor.setElementClassName(targetClass.getName());
+		}
+		
+		collectionDescriptor.setCollectionConverter(collectionAnnotation.collectionConverter().getName());
+		
+		collectionDescriptor.setJcrType(annotationNode.jcrType());
+		collectionDescriptor.setJcrSameNameSiblings(collectionAnnotation.jcrSameNameSiblings());
+		collectionDescriptor.setJcrAutoCreated(collectionAnnotation.jcrAutoCreated());
+		collectionDescriptor.setJcrProtected(collectionAnnotation.jcrProtected());
+		collectionDescriptor.setJcrOnParentVersion(collectionAnnotation.jcrOnParentVersion());
+		collectionDescriptor.setJcrMandatory(collectionAnnotation.jcrMandatory());
+		
 
+		descriptor.addCollectionDescriptor(collectionDescriptor);
 	}
 	
-	private void addFieldDescriptors(ClassDescriptor descriptor, Class clazz) {
-		BeanInfo beanInfo;
-		try {
-			beanInfo = Introspector.getBeanInfo(clazz);
-		} catch (IntrospectionException e) {
-			throw new RuntimeException(e);
+	private void addBeanDescriptor(ClassDescriptor classDescriptor, String fieldName, Bean beanAnnotation) {
+		BeanDescriptor beanDescriptor = new BeanDescriptor();
+		beanDescriptor.setFieldName(fieldName);
+		if (beanAnnotation.jcrName() != null && ! beanAnnotation.jcrName().equals(""))
+		{
+		   beanDescriptor.setJcrName(beanAnnotation.jcrName());
+		}
+		else
+		{
+			beanDescriptor.setJcrName(fieldName);
 		}
+		
+		beanDescriptor.setProxy(beanAnnotation.proxy());				
+		beanDescriptor.setConverter(beanAnnotation.converter().getName());
+		beanDescriptor.setAutoInsert(beanAnnotation.autoInsert());
+		beanDescriptor.setAutoRetrieve(beanAnnotation.autoRetrieve());
+		beanDescriptor.setAutoUpdate(beanAnnotation.autoUpdate());
+		beanDescriptor.setJcrType(beanAnnotation.jcrType());
+		beanDescriptor.setJcrAutoCreated(beanAnnotation.jcrAutoCreated());
+		beanDescriptor.setJcrMandatory(beanAnnotation.jcrMandatory());
+		beanDescriptor.setJcrOnParentVersion(beanAnnotation.jcrOnParentVersion());
+		beanDescriptor.setJcrProtected(beanAnnotation.jcrProtected());			            
+		beanDescriptor.setJcrSameNameSiblings(beanAnnotation.jcrSameNameSiblings());				
 
-		PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
-		for (PropertyDescriptor propertyDescriptor : propertyDescriptors) {
-			Field jcrProperty = propertyDescriptor.getReadMethod().getAnnotation(Field.class);
-			if (jcrProperty != null) {
-				FieldDescriptor fieldDescriptor = new FieldDescriptor();				
-				fieldDescriptor.setFieldName(propertyDescriptor.getName());
-				if ((jcrProperty.jcrName() != null) && (!jcrProperty.jcrName().equals("")))
-				{
-					fieldDescriptor.setJcrName(jcrProperty.jcrName());	
-				}
-				else
-				{
-					fieldDescriptor.setJcrName(propertyDescriptor.getName());	
-				}
-				fieldDescriptor.setId(jcrProperty.id());				
-				fieldDescriptor.setPath(jcrProperty.path());
-				fieldDescriptor.setUuid(jcrProperty.uuid());
-				
-				// It is not possible to set a null value into an annotation attribute.
-				// If the converter == Object.class, it should be considered as null
-				if (! jcrProperty.converter().equals(Object.class))
-				{
-				    fieldDescriptor.setConverter(jcrProperty.converter().getName());
-				}
-				
-				// It is not possible to set a null value into an annotation attribute.
-				// If the jcrDefaultValue value is an empty string => it should be considered as null
-				if ((jcrProperty.jcrDefaultValue() != null) && (!jcrProperty.jcrDefaultValue().equals("")))
-				{
-				     fieldDescriptor.setJcrDefaultValue(jcrProperty.jcrDefaultValue());
-				}
-				
-				// It is not possible to set a null value into an annotation attribute.
-				// If the jcrValueConstraints value is an empty string => it should be considered as null
-				if ((jcrProperty.jcrValueConstraints() != null) && (!jcrProperty.jcrValueConstraints().equals("")))
-				{	
-				     fieldDescriptor.setJcrValueConstraints(jcrProperty.jcrValueConstraints());
-				}
-				
-				// It is not possible to set a null value into an annotation attribute.
-				// If the jcrProperty value is an empty string => it should be considered as null
-				if ((jcrProperty.jcrType() != null) && (!jcrProperty.jcrType().equals("")))
-				{
-				    fieldDescriptor.setJcrType(jcrProperty.jcrType());
-				}
-				
-				fieldDescriptor.setJcrAutoCreated(jcrProperty.jcrAutoCreated());
-				fieldDescriptor.setJcrMandatory(jcrProperty.jcrMandatory());
-				fieldDescriptor.setJcrOnParentVersion(jcrProperty.jcrOnParentVersion());
-				fieldDescriptor.setJcrProtected(jcrProperty.jcrProtected());
-				fieldDescriptor.setJcrMultiple(jcrProperty.jcrMultiple());
+		classDescriptor.addBeanDescriptor(beanDescriptor);
+	}
+
+
+	private void addFieldDescriptor(ClassDescriptor classDescriptor, String fieldName, Field fieldAnnotation) 
+	{
 				
-				//fieldDescriptor.setJcrType(value)
-				descriptor.addFieldDescriptor(fieldDescriptor);
-			}
+		FieldDescriptor fieldDescriptor = new FieldDescriptor();				
+		fieldDescriptor.setFieldName(fieldName);
+		if ((fieldAnnotation.jcrName() != null) && (!fieldAnnotation.jcrName().equals("")))
+		{
+			fieldDescriptor.setJcrName(fieldAnnotation.jcrName());	
 		}
-
+		else
+		{
+			fieldDescriptor.setJcrName(fieldName);	
+		}
+		fieldDescriptor.setId(fieldAnnotation.id());				
+		fieldDescriptor.setPath(fieldAnnotation.path());
+		fieldDescriptor.setUuid(fieldAnnotation.uuid());
+		
+		// It is not possible to set a null value into an annotation attribute.
+		// If the converter == Object.class, it should be considered as null
+		if (! fieldAnnotation.converter().equals(Object.class))
+		{
+		    fieldDescriptor.setConverter(fieldAnnotation.converter().getName());
+		}
+		
+		// It is not possible to set a null value into an annotation attribute.
+		// If the jcrDefaultValue value is an empty string => it should be considered as null
+		if ((fieldAnnotation.jcrDefaultValue() != null) && (!fieldAnnotation.jcrDefaultValue().equals("")))
+		{
+		     fieldDescriptor.setJcrDefaultValue(fieldAnnotation.jcrDefaultValue());
+		}
+		
+		// It is not possible to set a null value into an annotation attribute.
+		// If the jcrValueConstraints value is an empty string => it should be considered as null
+		if ((fieldAnnotation.jcrValueConstraints() != null) && (!fieldAnnotation.jcrValueConstraints().equals("")))
+		{	
+		     fieldDescriptor.setJcrValueConstraints(fieldAnnotation.jcrValueConstraints());
+		}
+		
+		// It is not possible to set a null value into an annotation attribute.
+		// If the jcrProperty value is an empty string => it should be considered as null
+		if ((fieldAnnotation.jcrType() != null) && (!fieldAnnotation.jcrType().equals("")))
+		{
+		    fieldDescriptor.setJcrType(fieldAnnotation.jcrType());
+		}
+		
+		fieldDescriptor.setJcrAutoCreated(fieldAnnotation.jcrAutoCreated());
+		fieldDescriptor.setJcrMandatory(fieldAnnotation.jcrMandatory());
+		fieldDescriptor.setJcrOnParentVersion(fieldAnnotation.jcrOnParentVersion());
+		fieldDescriptor.setJcrProtected(fieldAnnotation.jcrProtected());
+		fieldDescriptor.setJcrMultiple(fieldAnnotation.jcrMultiple());
+		
+		//fieldDescriptor.setJcrType(value)
+		classDescriptor.addFieldDescriptor(fieldDescriptor);
 	}
