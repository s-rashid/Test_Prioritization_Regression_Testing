diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/WildcardTermEnum.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/WildcardTermEnum.java
index 8019ffe..d08cf52 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/WildcardTermEnum.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/WildcardTermEnum.java
@@ -163,12 +163,12 @@ class WildcardTermEnum extends FilteredTermEnum implements TransformConstants {
         /**
          * The matching terms
          */
-        private final Map orderedTerms = new LinkedHashMap();
+        private final Map<Term, Integer> orderedTerms = new LinkedHashMap<Term, Integer>();
 
         /**
          * Iterator over all matching terms
          */
-        private final Iterator it;
+        private final Iterator<Term> it;
 
         public LowerUpperCaseTermEnum(IndexReader reader,
                                       String field,
@@ -191,7 +191,7 @@ class WildcardTermEnum extends FilteredTermEnum implements TransformConstants {
 
             if (!neverMatches) {
                 // create range scans
-                List rangeScans = new ArrayList(2);
+                List<RangeScan> rangeScans = new ArrayList<RangeScan>(2);
                 try {
                     int idx = 0;
                     while (idx < pattern.length()
@@ -228,14 +228,13 @@ class WildcardTermEnum extends FilteredTermEnum implements TransformConstants {
                     }
 
                     // do range scans with pattern matcher
-                    for (Iterator it = rangeScans.iterator(); it.hasNext(); ) {
-                        RangeScan scan = (RangeScan) it.next();
+                    for (RangeScan scan : rangeScans) {
                         do {
                             Term t = scan.term();
                             if (t != null) {
                                 input.setBase(t.text());
                                 if (WildcardTermEnum.this.pattern.reset().matches()) {
-                                    orderedTerms.put(t, new Integer(scan.docFreq()));
+                                    orderedTerms.put(t, scan.docFreq());
                                 }
                             }
                         } while (scan.next());
@@ -243,9 +242,7 @@ class WildcardTermEnum extends FilteredTermEnum implements TransformConstants {
 
                 } finally {
                     // close range scans
-                    Iterator it = rangeScans.iterator();
-                    while (it.hasNext()) {
-                        RangeScan scan = (RangeScan) it.next();
+                    for (RangeScan scan : rangeScans) {
                         try {
                             scan.close();
                         } catch (IOException e) {
@@ -283,8 +280,8 @@ class WildcardTermEnum extends FilteredTermEnum implements TransformConstants {
          * {@inheritDoc}
          */
         public int docFreq() {
-            Integer docFreq = (Integer) orderedTerms.get(current);
-            return docFreq != null ? docFreq.intValue() : 0;
+            Integer docFreq = orderedTerms.get(current);
+            return docFreq != null ? docFreq : 0;
         }
 
         /**
@@ -299,7 +296,7 @@ class WildcardTermEnum extends FilteredTermEnum implements TransformConstants {
          * <code>null</code> if there is no next.
          */
         private void getNext() {
-            current = it.hasNext() ? (Term) it.next() : null;
+            current = it.hasNext() ? it.next() : null;
         }
     }
 }
