diff --git a/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/QueryFormat.java b/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/QueryFormat.java
index ce57adc..849a4b1 100644
--- a/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/QueryFormat.java
+++ b/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/query/xpath/QueryFormat.java
@@ -16,10 +16,17 @@
  */
 package org.apache.jackrabbit.spi.commons.query.xpath;
 
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.List;
+import java.util.TimeZone;
+
+import javax.jcr.NamespaceException;
+import javax.jcr.RepositoryException;
+import javax.jcr.query.InvalidQueryException;
+
 import org.apache.jackrabbit.spi.Name;
 import org.apache.jackrabbit.spi.Path;
-import org.apache.jackrabbit.util.ISO8601;
-import org.apache.jackrabbit.util.ISO9075;
 import org.apache.jackrabbit.spi.commons.conversion.NameResolver;
 import org.apache.jackrabbit.spi.commons.name.NameFactoryImpl;
 import org.apache.jackrabbit.spi.commons.query.AndQueryNode;
@@ -39,13 +46,8 @@ import org.apache.jackrabbit.spi.commons.query.QueryNodeVisitor;
 import org.apache.jackrabbit.spi.commons.query.QueryRootNode;
 import org.apache.jackrabbit.spi.commons.query.RelationQueryNode;
 import org.apache.jackrabbit.spi.commons.query.TextsearchQueryNode;
-
-import javax.jcr.query.InvalidQueryException;
-import javax.jcr.NamespaceException;
-import java.util.ArrayList;
-import java.util.Calendar;
-import java.util.List;
-import java.util.TimeZone;
+import org.apache.jackrabbit.util.ISO8601;
+import org.apache.jackrabbit.util.ISO9075;
 
 /**
  * Implements the query node tree serialization into a String.
@@ -60,15 +62,15 @@ class QueryFormat implements QueryNodeVisitor, QueryConstants {
     /**
      * The String representation of the query node tree
      */
-    private String statement;
+    private final String statement;
 
     /**
      * List of exception objects created while creating the XPath string
      */
-    private List exceptions = new ArrayList();
+    private final List exceptions = new ArrayList();
 
     private QueryFormat(QueryRootNode root, NameResolver resolver)
-            throws InvalidQueryException {
+            throws RepositoryException {
         this.resolver = resolver;
         statement = root.accept(this, new StringBuffer()).toString();
         if (exceptions.size() > 0) {
@@ -89,7 +91,12 @@ class QueryFormat implements QueryNodeVisitor, QueryConstants {
      */
     public static String toString(QueryRootNode root, NameResolver resolver)
             throws InvalidQueryException {
-        return new QueryFormat(root, resolver).toString();
+        try {
+            return new QueryFormat(root, resolver).toString();
+        }
+        catch (RepositoryException e) {
+            throw new InvalidQueryException(e);
+        }
     }
 
     /**
@@ -103,7 +110,7 @@ class QueryFormat implements QueryNodeVisitor, QueryConstants {
 
     //-------------< QueryNodeVisitor interface >-------------------------------
 
-    public Object visit(QueryRootNode node, Object data) {
+    public Object visit(QueryRootNode node, Object data) throws RepositoryException {
         StringBuffer sb = (StringBuffer) data;
         node.getLocationNode().accept(this, data);
         if (node.getOrderNode() != null) {
@@ -134,7 +141,7 @@ class QueryFormat implements QueryNodeVisitor, QueryConstants {
         return data;
     }
 
-    public Object visit(OrQueryNode node, Object data) {
+    public Object visit(OrQueryNode node, Object data) throws RepositoryException {
         StringBuffer sb = (StringBuffer) data;
         boolean bracket = false;
         if (node.getParent() instanceof AndQueryNode) {
@@ -156,7 +163,7 @@ class QueryFormat implements QueryNodeVisitor, QueryConstants {
         return sb;
     }
 
-    public Object visit(AndQueryNode node, Object data) {
+    public Object visit(AndQueryNode node, Object data) throws RepositoryException {
         StringBuffer sb = (StringBuffer) data;
         String and = "";
         QueryNode[] operands = node.getOperands();
@@ -168,7 +175,7 @@ class QueryFormat implements QueryNodeVisitor, QueryConstants {
         return sb;
     }
 
-    public Object visit(NotQueryNode node, Object data) {
+    public Object visit(NotQueryNode node, Object data) throws RepositoryException {
         StringBuffer sb = (StringBuffer) data;
         QueryNode[] operands = node.getOperands();
         if (operands.length > 0) {
@@ -241,7 +248,7 @@ class QueryFormat implements QueryNodeVisitor, QueryConstants {
         return sb;
     }
 
-    public Object visit(PathQueryNode node, Object data) {
+    public Object visit(PathQueryNode node, Object data) throws RepositoryException {
         StringBuffer sb = (StringBuffer) data;
         if (node.isAbsolute()) {
             sb.append("/");
@@ -256,7 +263,7 @@ class QueryFormat implements QueryNodeVisitor, QueryConstants {
         return sb;
     }
 
-    public Object visit(LocationStepQueryNode node, Object data) {
+    public Object visit(LocationStepQueryNode node, Object data) throws RepositoryException {
         StringBuffer sb = (StringBuffer) data;
         if (node.getIncludeDescendants()) {
             sb.append('/');
@@ -332,7 +339,7 @@ class QueryFormat implements QueryNodeVisitor, QueryConstants {
         return sb;
     }
 
-    public Object visit(RelationQueryNode node, Object data) {
+    public Object visit(RelationQueryNode node, Object data) throws RepositoryException {
         StringBuffer sb = (StringBuffer) data;
         try {
