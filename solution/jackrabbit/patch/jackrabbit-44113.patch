diff --git a/jackrabbit-ocm/src/test/java/org/apache/jackrabbit/ocm/manager/query/AnnotationSimpleQueryTest.java b/jackrabbit-ocm/src/test/java/org/apache/jackrabbit/ocm/manager/query/AnnotationSimpleQueryTest.java
index 1ad377f..b51dd64 100644
--- a/jackrabbit-ocm/src/test/java/org/apache/jackrabbit/ocm/manager/query/AnnotationSimpleQueryTest.java
+++ b/jackrabbit-ocm/src/test/java/org/apache/jackrabbit/ocm/manager/query/AnnotationSimpleQueryTest.java
@@ -70,7 +70,7 @@ public class AnnotationSimpleQueryTest extends AnnotationTestBase
         importData();
     }
 
-    
+
     /**
      * Test equalTo
      *
@@ -80,29 +80,29 @@ public class AnnotationSimpleQueryTest extends AnnotationTestBase
 
     	try
     	{
-    		    		      		 
+    		    		      		
     		  // Build the Query Object
     	      QueryManager queryManager = this.getQueryManager();
     	      Filter filter = queryManager.createFilter(Paragraph.class);
-    	      filter.addEqualTo("text", "Para 1");    	          	     
-    	      
-    	      
+    	      filter.addEqualTo("text", "Para 1");    	          	
+    	
+    	
     	      Query query = queryManager.createQuery(filter);
-    	      
+    	
     	      ObjectContentManager ocm = this.getObjectContentManager();
     	      Paragraph paragraph = (Paragraph) ocm.getObject(query);
-    	      assertNotNull("Object is null", paragraph);    	      
+    	      assertNotNull("Object is null", paragraph);    	
     	      assertTrue("Invalid paragraph found" , paragraph.getText().equals("Para 1"));
-            
+
         }
         catch (Exception e)
         {
             e.printStackTrace();
             fail("Exception occurs during the unit test : " + e);
         }
-        
-    }    
-    
+
+    }
+
     /**
      * Test equalTo
      *
@@ -112,28 +112,28 @@ public class AnnotationSimpleQueryTest extends AnnotationTestBase
 
     	try
     	{
-    		    		      		 
+    		    		      		
     		  // Build the Query Object
     	      QueryManager queryManager = this.getQueryManager();
     	      Filter filter = queryManager.createFilter(Paragraph.class);
-    	      filter.addEqualTo("text", "Para 1");    	          	     
+    	      filter.addEqualTo("text", "Para 1");    	          	
     	      filter.setScope("/test/");
-    	      
+    	
     	      Query query = queryManager.createQuery(filter);
-    	      
+    	
     	      ObjectContentManager ocm = this.getObjectContentManager();
     	      Collection result = ocm.getObjects(query);
     	      assertEquals("Invalid number of objects - should be = 1", 1, result.size());
     	      Paragraph paragraph = (Paragraph) result.iterator().next();
     	      assertTrue("Invalid paragraph found" , paragraph.getText().equals("Para 1"));
-            
+
         }
         catch (Exception e)
         {
             e.printStackTrace();
             fail("Exception occurs during the unit test : " + e);
         }
-        
+
     }
 
     /**
@@ -148,11 +148,11 @@ public class AnnotationSimpleQueryTest extends AnnotationTestBase
     		  // Build the Query Object
     	      QueryManager queryManager = this.getQueryManager();
     	      Filter filter = queryManager.createFilter(Paragraph.class);
-    	      filter.addLike("text", "Para%");    	          	     
+    	      filter.addLike("text", "Para%");    	          	
     	      filter.setScope("/test/");
-    	      
+    	
     	      Query query = queryManager.createQuery(filter);
-    	      
+    	
     	      ObjectContentManager ocm = this.getObjectContentManager();
     	      Collection result = ocm.getObjects(query);
     	      assertEquals("Invalid number of objects - should be = 3", 3, result.size());
@@ -161,7 +161,7 @@ public class AnnotationSimpleQueryTest extends AnnotationTestBase
     	      assertTrue("Invalid paragraph found", paragraphs[0].getText().equals("Para 1"));
     	      assertTrue("Invalid paragraph found", paragraphs[1].getText().equals("Para 2"));
     	      assertTrue("Invalid paragraph found", paragraphs[2].getText().equals("Para 3"));
-    	      
+    	
 
         }
         catch (Exception e)
@@ -169,10 +169,10 @@ public class AnnotationSimpleQueryTest extends AnnotationTestBase
             e.printStackTrace();
             fail("Exception occurs during the unit test : " + e);
         }
-        
+
     }
-    
-    
+
+
     /**
      * Build an or expression between 2 filters
      *
@@ -186,33 +186,33 @@ public class AnnotationSimpleQueryTest extends AnnotationTestBase
     		  // Build the Query Object
     	      QueryManager queryManager = this.getQueryManager();
     	      Filter filter1 = queryManager.createFilter(Paragraph.class);
-    	      filter1.addEqualTo("text", "Para 1");    	     
+    	      filter1.addEqualTo("text", "Para 1");    	
     	      filter1.setScope("/test/");
 
     	      Filter filter2 = queryManager.createFilter(Paragraph.class);
-    	      filter2.addEqualTo("text", "Para 2");    	     
-    	      
+    	      filter2.addEqualTo("text", "Para 2");    	
+    	
               filter1.addOrFilter(filter2);
-    	      
+    	
     	      Query query = queryManager.createQuery(filter1);
-    	      
+    	
     	      ObjectContentManager ocm = this.getObjectContentManager();
     	      Collection result = ocm.getObjects(query);
     	      assertEquals("Invalid number of objects - should be = 2", 2, result.size());
-    	      
+    	
     	      Paragraph[] paragraphs = (Paragraph[]) result.toArray(new Paragraph[result.size()]);
     	      assertTrue("Invalid paragraph found", paragraphs[0].getText().equals("Para 1"));
     	      assertTrue("Invalid paragraph found", paragraphs[1].getText().equals("Para 2"));
-            
+
         }
         catch (Exception e)
         {
             e.printStackTrace();
             fail("Exception occurs during the unit test : " + e);
         }
-        
+
     }
-    
+
     public void testGetObjectOrderBy()
     {
 
@@ -222,12 +222,12 @@ public class AnnotationSimpleQueryTest extends AnnotationTestBase
     		  // Build the Query Object
     	      QueryManager queryManager = this.getQueryManager();
     	      Filter filter = queryManager.createFilter(Paragraph.class);
-    	      filter.addLike("text", "Para%");    	          	     
+    	      filter.addLike("text", "Para%");    	          	
     	      filter.setScope("/test/");
-    	      
+    	
     	      Query query = queryManager.createQuery(filter);
     	      query.addOrderByDescending("text");
-    	      
+    	
     	      ObjectContentManager ocm = this.getObjectContentManager();
     	      Collection result = ocm.getObjects(query);
     	      assertEquals("Invalid number of objects - should be = 3", 3, result.size());
@@ -236,7 +236,7 @@ public class AnnotationSimpleQueryTest extends AnnotationTestBase
     	      assertTrue("Invalid paragraph found", paragraphs[0].getText().equals("Para 3"));
     	      assertTrue("Invalid paragraph found", paragraphs[1].getText().equals("Para 2"));
     	      assertTrue("Invalid paragraph found", paragraphs[2].getText().equals("Para 1"));
-    	      
+    	
 
         }
         catch (Exception e)
@@ -244,28 +244,28 @@ public class AnnotationSimpleQueryTest extends AnnotationTestBase
             e.printStackTrace();
             fail("Exception occurs during the unit test : " + e);
         }
-        
+
     }
-    
-    private void importData() throws JcrMappingException 
+
+    private void importData() throws JcrMappingException
     {
     	ObjectContentManager ocm = getObjectContentManager();
 
         Page page = new Page();
         page.setPath("/test");
         page.setTitle("Page Title");
-        
+
         ArrayList paragraphs = new ArrayList();
-        
+
         paragraphs.add(new Paragraph("Para 1"));
         paragraphs.add(new Paragraph("Para 2"));
         paragraphs.add(new Paragraph("Para 3"));
         paragraphs.add(new Paragraph("Another Para "));
         page.setParagraphs(paragraphs);
-        
-        ocm.insert(page);  
+
+        ocm.insert(page);
         ocm.save();
-                
+
 
     }
 }
\ No newline at end of file
