diff --git a/jackrabbit-core/src/test/java/org/apache/jackrabbit/api/jsr283/lock/AbstractLockTest.java b/jackrabbit-core/src/test/java/org/apache/jackrabbit/api/jsr283/lock/AbstractLockTest.java
index d7f39cc..f7cda85 100644
--- a/jackrabbit-core/src/test/java/org/apache/jackrabbit/api/jsr283/lock/AbstractLockTest.java
+++ b/jackrabbit-core/src/test/java/org/apache/jackrabbit/api/jsr283/lock/AbstractLockTest.java
@@ -19,12 +19,13 @@ package org.apache.jackrabbit.api.jsr283.lock;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.apache.jackrabbit.test.AbstractJCRTest;
-import org.apache.jackrabbit.test.NotExecutableException;
 
 import javax.jcr.Node;
 import javax.jcr.Session;
 import javax.jcr.RepositoryException;
-import javax.jcr.lock.*;
+import javax.jcr.nodetype.ConstraintViolationException;
+import java.util.List;
+import java.util.Arrays;
 
 /** <code>AbstractLockTest</code>... */
 public abstract class AbstractLockTest extends AbstractJCRTest {
@@ -90,6 +91,14 @@ public abstract class AbstractLockTest extends AbstractJCRTest {
         } finally {
             otherSession.logout();
         }
+
+        Session otherAdmin = helper.getSuperuserSession();
+        try {
+            Lock lck = (Lock) ((Node) otherAdmin.getItem(lockedNode.getPath())).getLock();
+            assertFalse("Other Session for the same userID must not be lock owner", lck.isLockOwningSession());
+        } finally {
+            otherAdmin.logout();
+        }
     }
 
     /**
@@ -98,4 +107,42 @@ public abstract class AbstractLockTest extends AbstractJCRTest {
     public void testGetSecondsRemaining() {
         assertTrue("Seconds remaining must be a positive long or 0.", lock.getSecondsRemaining() >= 0);
     }
+
+
+
+
+    public void testRemoveMixLockableFromLockedNode() throws RepositoryException {
+        try {
+            lockedNode.removeMixin(mixLockable);
+            lockedNode.save();
+
+            // the mixin got removed -> the lock should implicitely be released
+            // as well in order not to have inconsistencies
+            String msg = "Lock should have been released.";
+            assertFalse(msg, lock.isLive());
+            assertFalse(msg, lockedNode.isLocked());
+            List tokens = Arrays.asList(superuser.getLockTokens());
+            assertFalse(msg, tokens.contains(lock.getLockToken()));
+
+            assertFalse(msg, lockedNode.hasProperty(jcrLockOwner));
+            assertFalse(msg, lockedNode.hasProperty(jcrlockIsDeep));
+
+        } catch (ConstraintViolationException e) {
+            // cannot remove the mixin -> ok
+            // consequently the node must still be locked, the lock still live...
+            String msg = "Lock must still be live.";
+            assertTrue(msg, lock.isLive());
+            assertTrue(msg, lockedNode.isLocked());
+            List tokens = Arrays.asList(superuser.getLockTokens());
+            assertTrue(tokens.contains(lock.getLockToken()));
+            assertTrue(msg, lockedNode.hasProperty(jcrLockOwner));
+            assertTrue(msg, lockedNode.hasProperty(jcrlockIsDeep));
+        } finally {
+            // ev. re-add the mixin in order to be able to unlock the node
+            if (lockedNode.isLocked() && !lockedNode.isNodeType(mixLockable)) {
+                lockedNode.addMixin(mixLockable);
+                lockedNode.save();
+            }
+        }
+    }
 }
\ No newline at end of file
