diff --git a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/VersionHistoryTest.java b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/VersionHistoryTest.java
index ac0e4e1..fd68a1e 100644
--- a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/VersionHistoryTest.java
+++ b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/VersionHistoryTest.java
@@ -37,6 +37,7 @@ import javax.jcr.RepositoryException;
 import javax.jcr.UnsupportedRepositoryOperationException;
 import javax.jcr.Value;
 import javax.jcr.lock.LockException;
+import javax.jcr.lock.LockManager;
 import javax.jcr.nodetype.ConstraintViolationException;
 import javax.jcr.nodetype.NoSuchNodeTypeException;
 import javax.jcr.nodetype.NodeType;
@@ -59,6 +60,7 @@ public class VersionHistoryTest extends AbstractVersionTest {
 
     protected VersionHistory vHistory;
     private Version version;
+    private VersionManager versionManager;
 
     /**
      * helper class used in testAccept()
@@ -82,9 +84,10 @@ public class VersionHistoryTest extends AbstractVersionTest {
     protected void setUp() throws Exception {
         super.setUp();
 
-        version = versionableNode.checkin();
+        versionManager = versionableNode.getSession().getWorkspace().getVersionManager();
+        version = versionManager.checkin(versionableNode.getPath());
 
-        vHistory = versionableNode.getVersionHistory();
+        vHistory = versionManager.getVersionHistory(versionableNode.getPath());
 
 
         if (vHistory == null) {
@@ -206,6 +209,35 @@ public class VersionHistoryTest extends AbstractVersionTest {
     }
 
     /**
+     * Test that {@link VersionHistory#getAllVersions()} returns an iterator
+     * containing the root version and all versions that have been created by
+     * Node.checkin().
+     *
+     * @see javax.jcr.version.VersionHistory#getAllVersions()
+     */
+    public void testGetAllVersionsJcr2() throws RepositoryException {
+        int cnt = 5;
+        HashMap versions = new HashMap();
+        Version v = vHistory.getRootVersion();
+        versions.put(v.getIdentifier(), v);
+        for (int i = 0; i < cnt; i++) {
+            v = versionManager.checkin(versionableNode.getPath());
+            versions.put(v.getIdentifier(), v);
+            versionManager.checkout(versionableNode.getPath());
+        }
+
+        VersionIterator it = vHistory.getAllVersions();
+        while (it.hasNext()) {
+            v = it.nextVersion();
+            if (!versions.containsKey(v.getIdentifier())) {
+                fail("VersionHistory.getAllVersions() must only contain the root version and versions, that have been created by a Node.checkin() call.");
+            }
+            versions.remove(v.getIdentifier());
+        }
+        assertTrue("VersionHistory.getAllVersions() must contain the root version and all versions that have been created with a Node.checkin() call.", versions.isEmpty());
+    }
+
+    /**
      * Test that {@link VersionHistory#getAllFrozenNodes()} returns an iterator
      * containing the frozen nodes of all versions that have been created by
      * {@link VersionManager#checkpoint(String)}.
@@ -255,6 +287,19 @@ public class VersionHistoryTest extends AbstractVersionTest {
     }
 
     /**
+     * Test if UnsupportedRepositoryOperationException is thrown when calling
+     * Node.getVersionHistory() on a non-versionable node.
+     */
+    public void testGetVersionHistoryOnNonVersionableNodeJcr2() throws RepositoryException {
+        try {
+            versionManager.getVersionHistory(nonVersionableNode.getPath());
+            fail("Node.getVersionHistory() must throw UnsupportedRepositoryOperationException if the node is not versionable.");
+        } catch (UnsupportedRepositoryOperationException e) {
+            //success
+        }
+    }
+
+    /**
      * Test VersionHistory.getVersion(String versionName) if 'versionName' is
      * the name of an existing version (created by Node.checkin()).
      *
@@ -262,7 +307,7 @@ public class VersionHistoryTest extends AbstractVersionTest {
      */
     public void testGetVersion() throws RepositoryException {
 
-        Version v = versionableNode.checkin();
+        Version v = versionManager.checkin(versionableNode.getPath());
         Version v2 = vHistory.getVersion(v.getName());
 
         assertTrue("VersionHistory.getVersion(String versionName) must return the version that is identified by the versionName specified, if versionName is the name of a version created by Node.checkin().", v.isSame(v2));
@@ -284,7 +329,7 @@ public class VersionHistoryTest extends AbstractVersionTest {
     public void testAddMixin() throws Exception {
         try {
             vHistory.addMixin(mixVersionable);
-            vHistory.save();
+            vHistory.getSession().save();
             fail("VersionHistory should be read-only: VersionHistory.addMixin(String) did not throw a ConstraintViolationException");
         } catch (ConstraintViolationException success) {
         }
@@ -298,13 +343,13 @@ public class VersionHistoryTest extends AbstractVersionTest {
     public void testAddNode() throws Exception {
         try {
             vHistory.addNode(nodeName4);
-            vHistory.save();
+            vHistory.getSession().save();
             fail("VersionHistory should be read-only: VersionHistory.addNode(String) did not throw a ConstraintViolationException");
         } catch (ConstraintViolationException success) {
         }
         try {
             vHistory.addNode(nodeName4, ntBase);
-            vHistory.save();
+            vHistory.getSession().save();
             fail("VersionHistory should be read-only: VersionHistory.addNode(String,String) did not throw a ConstraintViolationException");
         } catch (ConstraintViolationException success) {
         }
@@ -331,6 +376,18 @@ public class VersionHistoryTest extends AbstractVersionTest {
     }
 
     /**
+     * Tests if <code>VersionHistory.cancelMerge(Version)</code> throws an
+     * {@link javax.jcr.UnsupportedRepositoryOperationException}
+     */
+    public void testCancelMergeJcr2() throws Exception {
+        try {
+            versionManager.cancelMerge(vHistory.getPath(), version);
+            fail("VersionHistory.cancelMerge(Version) did not throw an UnsupportedRepositoryOperationException");
+        } catch (UnsupportedRepositoryOperationException success) {
+        }
+    }
+
+    /**
      * Tests if <code>VersionHistory.checkin()</code> throws an {@link
      * javax.jcr.UnsupportedRepositoryOperationException}
      */
@@ -343,6 +400,18 @@ public class VersionHistoryTest extends AbstractVersionTest {
     }
 
     /**
+     * Tests if <code>VersionHistory.checkin()</code> throws an {@link
+     * javax.jcr.UnsupportedRepositoryOperationException}
+     */
+    public void testCheckinJcr2() throws Exception {
+        try {
+            versionManager.checkin(vHistory.getPath());
+            fail("VersionHistory.checkin() did not throw an UnsupportedRepositoryOperationException");
+        } catch (UnsupportedRepositoryOperationException success) {
+        }
+    }
+
+    /**
      * Tests if <code>VersionHistory.checkout()</code> throws an {@link
      * javax.jcr.UnsupportedRepositoryOperationException}
      */
@@ -355,6 +424,18 @@ public class VersionHistoryTest extends AbstractVersionTest {
     }
 
     /**
+     * Tests if <code>VersionHistory.checkout()</code> throws an {@link
+     * javax.jcr.UnsupportedRepositoryOperationException}
+     */
+    public void testCheckoutJcr2() throws Exception {
+        try {
+            versionManager.checkout(vHistory.getPath());
+            fail("VersionHistory.checkout() did not throw an UnsupportedRepositoryOperationException");
+        } catch (UnsupportedRepositoryOperationException success) {
+        }
+    }
+
+    /**
      * Tests if <code>VersionHistory.doneMerge(Version)</code> throws an {@link
      * javax.jcr.UnsupportedRepositoryOperationException}
      */
@@ -367,6 +448,18 @@ public class VersionHistoryTest extends AbstractVersionTest {
     }
 
     /**
+     * Tests if <code>VersionHistory.doneMerge(Version)</code> throws an {@link
+     * javax.jcr.UnsupportedRepositoryOperationException}
+     */
+    public void testDoneMergeJcr2() throws Exception {
+        try {
+            versionManager.doneMerge(vHistory.getPath(), version);
+            fail("VersionHistory should not be versionable: VersionHistory.doneMerge(Version) did not throw an UnsupportedRepositoryOperationException");
+        } catch (UnsupportedRepositoryOperationException success) {
+        }
+    }
+
+    /**
      * Tests if <code>VersionHistory.getAncestor(int)</code> returns the right
      * ancestor
      */
@@ -387,6 +480,18 @@ public class VersionHistoryTest extends AbstractVersionTest {
     }
 
     /**
+     * Tests if <code>VersionHistory.getBaseVersion()</code> throws an {@link
+     * javax.jcr.UnsupportedRepositoryOperationException}
+     */
+    public void testGetBaseVersionJcr2() throws Exception {
+        try {
+            versionManager.getBaseVersion(vHistory.getPath());
+            fail("VersionHistory.getBaseVersion() did not throw an UnsupportedRepositoryOperationException");
+        } catch (UnsupportedRepositoryOperationException success) {
+        }
+    }
+
+    /**
      * Tests if <code>VersionHistory.getCorrespondingNodePath(String)</code>
      * returns the right path
      */
@@ -421,6 +526,18 @@ public class VersionHistoryTest extends AbstractVersionTest {
     }
 
     /**
+     * Tests if <code>VersionHistory.getLock()</code> throws an {@link
+     * javax.jcr.lock.LockException}
+     */
+    public void testGetLockJcr2() throws Exception {
+        try {
+            vHistory.getSession().getWorkspace().getLockManager().getLock(vHistory.getPath());
+            fail("VersionHistory should not be lockable: VersionHistory.getLock() did not throw a LockException");
+        } catch (LockException success) {
+        }
+    }
+
+    /**
      * Tests if <code>VersionHistory.getMixinNodeTypes()</code> does not return
      * null.
      */
@@ -556,6 +673,13 @@ public class VersionHistoryTest extends AbstractVersionTest {
     }
 
     /**
+     * Tests if <code>VersionHistory.getIdentifier()</code> returns the right UUID
+     */
+    public void testGetIdentifier() throws Exception {
+        assertEquals("VersionHistory.getIdentifier() did not return the right Id", versionableNode.getProperty(jcrVersionHistory).getString(), vHistory.getIdentifier());
+    }
+
+    /**
      * Tests if <code>VersionHistory.getVersionHistory()</code> throws an {@link
      * javax.jcr.UnsupportedRepositoryOperationException}
      */
@@ -568,6 +692,18 @@ public class VersionHistoryTest extends AbstractVersionTest {
     }
 
     /**
+     * Tests if <code>VersionHistory.getVersionHistory()</code> throws an {@link
+     * javax.jcr.UnsupportedRepositoryOperationException}
+     */
+    public void testGetVersionHistoryJcr2() throws Exception {
+        try {
+            versionManager.getVersionHistory(vHistory.getPath());
+            fail("VersionHistory.getVersionHistory() did not throw an UnsupportedRepositoryOperationException");
+        } catch (UnsupportedRepositoryOperationException success) {
+        }
+    }
+
+    /**
      * Tests if <code>VersionHistory.hasNode(String)</code> returns the right
      * <code>boolean</code> value
      */
@@ -608,6 +744,14 @@ public class VersionHistoryTest extends AbstractVersionTest {
     }
 
     /**
+     * Tests if <code>VersionHistory.holdsLock()</code> returns
+     * <code>false</code>
+     */
+    public void testHoldsLockJcr2() throws Exception {
+        assertFalse("VersionHistory.holdsLock() did not return false", vHistory.getSession().getWorkspace().getLockManager().holdsLock(vHistory.getPath()));
+    }
+
+    /**
      * Tests if <code>VersionHistory.isCheckedOut()</code> returns
      * <code>true</code>
      */
@@ -616,6 +760,14 @@ public class VersionHistoryTest extends AbstractVersionTest {
     }
 
     /**
+     * Tests if <code>VersionHistory.isCheckedOut()</code> returns
+     * <code>true</code>
+     */
+    public void testIsCheckedOutJcr2() throws Exception {
+        assertTrue("VersionHistory.isCheckedOut() did not return true", versionManager.isCheckedOut(vHistory.getPath()));
+    }
+
+    /**
      * Tests if <code>VersionHistory.isLocked()</code> returns
      * <code>false</code>
      */
@@ -624,6 +776,14 @@ public class VersionHistoryTest extends AbstractVersionTest {
     }
 
     /**
+     * Tests if <code>VersionHistory.isLocked()</code> returns
+     * <code>false</code>
+     */
+    public void testIsLockedJcr2() throws Exception {
+        assertFalse("VersionHistory.isLocked() did not return false", vHistory.getSession().getWorkspace().getLockManager().isLocked(vHistory.getPath()));
+    }
+
+    /**
      * Tests if <code>VersionHistory.isModified()</code> returns
      * <code>false</code>
      */
@@ -689,6 +849,35 @@ public class VersionHistoryTest extends AbstractVersionTest {
     }
 
     /**
+     * Tests if <code>VersionHistory.lock(boolean, boolean)</code> throws a
+     * {@link javax.jcr.lock.LockException}
+     */
+    public void testLockJcr2() throws Exception {
+        LockManager lockManager = vHistory.getSession().getWorkspace().getLockManager();
+        String path = vHistory.getPath();
+        try {
+            lockManager.lock(path, true, true, 60, "");
+            fail("VersionHistory should not be lockable: VersionHistory.lock(true,true) did not throw a LockException");
+        } catch (LockException success) {
+        }
+        try {
+            lockManager.lock(path, true, false, 60, "");
+            fail("VersionHistory should not be lockable: VersionHistory.lock(true,false) did not throw a LockException");
+        } catch (LockException success) {
+        }
+        try {
+            lockManager.lock(path, false, true, 60, "");
+            fail("VersionHistory should not be lockable: VersionHistory.lock(false,true) did not throw a LockException");
+        } catch (LockException success) {
+        }
+        try {
+            lockManager.lock(path, false, false, 60, "");
+            fail("VersionHistory should not be lockable: VersionHistory.lock(false,false) did not throw a UnsupportedRepositoryOperationException");
+        } catch (LockException success) {
+        }
+    }
+
+    /**
      * Tests if <code>VersionHistory.merge(String)</code> throws an
      * {@link javax.jcr.nodetype.ConstraintViolationException}
      */
@@ -706,6 +895,25 @@ public class VersionHistoryTest extends AbstractVersionTest {
     }
 
     /**
+     * Tests if <code>VersionHistory.merge(String)</code> throws an
+     * {@link javax.jcr.nodetype.ConstraintViolationException}
+     */
+/*
+    TODO: check why this fails
+    public void testMergeJcr2() throws Exception {
+        try {
+            versionManager.merge(vHistory.getPath(), workspaceName, true);
+            fail("VersionHistory.merge(String, true) did not throw an ConstraintViolationException");
+        } catch (ConstraintViolationException success) {
+        }
+        try {
+            versionManager.merge(vHistory.getPath(), workspaceName, false);
+            fail("VersionHistory.merge(String, false) did not throw an ConstraintViolationException");
+        } catch (ConstraintViolationException success) {
+        }
+    }
+*/
+    /**
      * Tests if <code>VersionHistory.orderBefore(String, String)</code> throws
      * an {@link javax.jcr.UnsupportedRepositoryOperationException}
      */
@@ -780,6 +988,25 @@ public class VersionHistoryTest extends AbstractVersionTest {
     }
 
     /**
+     * Tests if <code>VersionHistory.restore(String, boolean)</code> and
+     * <code>VersionHistory.restore(Version, boolean)</code> throw an {@link
+     * UnsupportedRepositoryOperationException} and <code>VersionHistory.restore(Version,
+     * String, boolean)</code> throws a {@link ConstraintViolationException}.
+     */
+    public void testRestoreJcr2() throws Exception {
+        try {
+            versionManager.restore(vHistory.getPath(), "abc", true);
+            fail("VersionHistory.restore(String,boolean) did not throw an UnsupportedRepositoryOperationException");
+        } catch (UnsupportedRepositoryOperationException success) {
+        }
+        try {
+            versionManager.restore(vHistory.getPath(), version, true);
+            fail("VersionHistory.restore(Version,boolean) did not throw an UnsupportedRepositoryOperationException");
+        } catch (UnsupportedRepositoryOperationException success) {
+        }
+    }
+
+    /**
      * Tests if <code>VersionHistory.restoreByLabel(String, boolean)</code>
      * throws an {@link javax.jcr.UnsupportedRepositoryOperationException}
      */
@@ -792,6 +1019,18 @@ public class VersionHistoryTest extends AbstractVersionTest {
     }
 
     /**
+     * Tests if <code>VersionHistory.restoreByLabel(String, boolean)</code>
+     * throws an {@link javax.jcr.UnsupportedRepositoryOperationException}
+     */
+    public void testRestoreByLabelJcr2() throws Exception {
+        try {
+            versionManager.restoreByLabel(vHistory.getPath(), "abc", true);
+            fail("VersionHistory.restoreByLabel(String,boolean) did not throw an UnsupportedRepositoryOperationException");
+        } catch (UnsupportedRepositoryOperationException success) {
+        }
+    }
+
+    /**
      * Tests if <ul> <li><code>VersionHistory.setProperty(String,
      * String[])</code></li> <li><code>VersionHistory.setProperty(String,
      * String[], int)</code></li> <li><code>VersionHistory.setProperty(String,
@@ -819,37 +1058,37 @@ public class VersionHistoryTest extends AbstractVersionTest {
 
         try {
             vHistory.setProperty(propertyName1, s);
-            vHistory.save();
+            vHistory.getSession().save();
             fail("VersionHistory should be read-only: VersionHistory.setProperty(String,String[]) did not throw a ConstraintViolationException");
         } catch (ConstraintViolationException success) {
         }
         try {
             vHistory.setProperty(propertyName1, s, PropertyType.STRING);
-            vHistory.save();
+            vHistory.getSession().save();
             fail("VersionHistory should be read-only: VersionHistory.setProperty(String,String[],int) did not throw a ConstraintViolationException");
         } catch (ConstraintViolationException success) {
         }
         try {
             vHistory.setProperty(propertyName1, vArray);
-            vHistory.save();
+            vHistory.getSession().save();
             fail("VersionHistory should be read-only: VersionHistory.setProperty(String,Value[]) did not throw a ConstraintViolationException");
         } catch (ConstraintViolationException success) {
         }
         try {
             vHistory.setProperty(propertyName1, vArray, PropertyType.STRING);
-            vHistory.save();
+            vHistory.getSession().save();
             fail("VersionHistory should be read-only: VersionHistory.setProperty(String,Value[],int]) did not throw a ConstraintViolationException");
         } catch (ConstraintViolationException success) {
         }
         try {
             vHistory.setProperty(propertyName1, true);
-            vHistory.save();
+            vHistory.getSession().save();
             fail("VersionHistory should be read-only: VersionHistory.setProperty(String,boolean) did not throw a ConstraintViolationException");
         } catch (ConstraintViolationException success) {
         }
         try {
             vHistory.setProperty(propertyName1, 123);
-            vHistory.save();
+            vHistory.getSession().save();
             fail("VersionHistory should be read-only: VersionHistory.setProperty(String,double) did not throw a ConstraintViolationException");
         } catch (ConstraintViolationException success) {
         }
@@ -857,39 +1096,39 @@ public class VersionHistoryTest extends AbstractVersionTest {
             byte[] bytes = {73, 26, 32, -36, 40, -43, -124};
             InputStream inpStream = new ByteArrayInputStream(bytes);
             vHistory.setProperty(propertyName1, inpStream);
-            vHistory.save();
+            vHistory.getSession().save();
             fail("VersionHistory should be read-only: VersionHistory.setProperty(String,InputStream) did not throw a ConstraintViolationException");
         } catch (ConstraintViolationException success) {
         }
         try {
             vHistory.setProperty(propertyName1, "abc");
-            vHistory.save();
+            vHistory.getSession().save();
             fail("VersionHistory should be read-only: VersionHistory.setProperty(String,String) did not throw a ConstraintViolationException");
         } catch (ConstraintViolationException success) {
         }
         try {
             Calendar c = new GregorianCalendar(1945, 1, 6, 16, 20, 0);
             vHistory.setProperty(propertyName1, c);
-            vHistory.save();
+            vHistory.getSession().save();
             fail("VersionHistory should be read-only: VersionHistory.setProperty(String,Calendar) did not throw a ConstraintViolationException");
         } catch (ConstraintViolationException success) {
         }
         try {
             vHistory.setProperty(propertyName1, testRootNode);
-            vHistory.save();
+            vHistory.getSession().save();
             fail("VersionHistory should be read-only: VersionHistory.setProperty(String,Node) did not throw a ConstraintViolationException");
         } catch (ConstraintViolationException success) {
         }
         try {
             Value v = superuser.getValueFactory().createValue("abc");
             vHistory.setProperty(propertyName1, v);
-            vHistory.save();
+            vHistory.getSession().save();
             fail("VersionHistory should be read-only: VersionHistory.setProperty(String,Value) did not throw a ConstraintViolationException");
         } catch (ConstraintViolationException success) {
         }
         try {
             vHistory.setProperty(propertyName1, -2147483650L);
-            vHistory.save();
+            vHistory.getSession().save();
             fail("VersionHistory should be read-only: VersionHistory.setProperty(String,long) did not throw a ConstraintViolationException");
         } catch (ConstraintViolationException success) {
         }
@@ -908,6 +1147,18 @@ public class VersionHistoryTest extends AbstractVersionTest {
     }
 
     /**
+     * Tests if <code>VersionHistory.unlock()</code> throws a {@link
+     * javax.jcr.lock.LockException}
+     */
+    public void testUnlockJcr2() throws Exception {
+        try {
+            vHistory.getSession().getWorkspace().getLockManager().unlock(vHistory.getPath());
+            fail("VersionHistory should not be lockable: VersionHistory.unlock() did not throw a LockException");
+        } catch (LockException success) {
+        }
+    }
+
+    /**
      * Tests if <code>VersionHistory.update(String)</code> throws an
      * {@link javax.jcr.nodetype.ConstraintViolationException}
      */
