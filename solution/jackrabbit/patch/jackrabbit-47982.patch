diff --git a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/observation/NodeMovedTest.java b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/observation/NodeMovedTest.java
index 70ba9dc..a794305 100644
--- a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/observation/NodeMovedTest.java
+++ b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/observation/NodeMovedTest.java
@@ -16,10 +16,15 @@
  */
 package org.apache.jackrabbit.test.api.observation;
 
+import java.util.Map;
+
 import javax.jcr.RepositoryException;
 import javax.jcr.Node;
 import javax.jcr.observation.Event;
 
+import org.apache.jackrabbit.test.api.observation.AbstractObservationTest;
+import org.apache.jackrabbit.test.api.observation.EventResult;
+
 /**
  * Tests if {@link javax.jcr.Session#move} operations trigger the appropriate
  * observation events.
@@ -39,6 +44,16 @@ import javax.jcr.observation.Event;
 public class NodeMovedTest extends AbstractObservationTest {
 
     /**
+     * The key <code>srcAbsPath</code> in the info map.
+     */
+    private static final String SRC_ABS_PATH = "srcAbsPath";
+
+    /**
+     * The key <code>destAbsPath</code> in the info map.
+     */
+    private static final String DEST_ABS_PATH = "destAbsPath";
+
+    /**
      * Tests if node removed and node added event is triggered when a tree
      * is moved.
      */
@@ -60,16 +75,21 @@ public class NodeMovedTest extends AbstractObservationTest {
         testRootNode.save();
         EventResult addNodeListener = new EventResult(log);
         EventResult removeNodeListener = new EventResult(log);
+        EventResult moveNodeListener = new EventResult(log);
         addEventListener(addNodeListener, Event.NODE_ADDED);
         addEventListener(removeNodeListener, Event.NODE_REMOVED);
+        addEventListener(moveNodeListener, Event.NODE_MOVED);
         superuser.move(n1.getPath(), testRoot + "/" + nodeName3);
         testRootNode.save();
         Event[] added = addNodeListener.getEvents(DEFAULT_WAIT_TIMEOUT);
         Event[] removed = removeNodeListener.getEvents(DEFAULT_WAIT_TIMEOUT);
+        Event[] moved = moveNodeListener.getEvents(DEFAULT_WAIT_TIMEOUT);
         removeEventListener(addNodeListener);
         removeEventListener(removeNodeListener);
+        removeEventListener(moveNodeListener);
         checkNodeAdded(added, new String[]{nodeName3}, new String[]{nodeName3 + "/" + nodeName2});
         checkNodeRemoved(removed, new String[]{nodeName1}, new String[]{nodeName1 + "/" + nodeName2});
+        checkNodeMoved(moved, nodeName1, nodeName3);
     }
 
     /**
@@ -94,16 +114,21 @@ public class NodeMovedTest extends AbstractObservationTest {
         testRootNode.save();
         EventResult addNodeListener = new EventResult(log);
         EventResult removeNodeListener = new EventResult(log);
+        EventResult moveNodeListener = new EventResult(log);
         addEventListener(addNodeListener, Event.NODE_ADDED);
         addEventListener(removeNodeListener, Event.NODE_REMOVED);
+        addEventListener(moveNodeListener, Event.NODE_MOVED);
         superuser.move(n2.getPath(), testRoot + "/" + nodeName2);
         testRootNode.save();
         Event[] added = addNodeListener.getEvents(DEFAULT_WAIT_TIMEOUT);
         Event[] removed = removeNodeListener.getEvents(DEFAULT_WAIT_TIMEOUT);
+        Event[] moved = moveNodeListener.getEvents(DEFAULT_WAIT_TIMEOUT);
         removeEventListener(addNodeListener);
         removeEventListener(removeNodeListener);
+        removeEventListener(moveNodeListener);
         checkNodeAdded(added, new String[]{nodeName2}, null);
         checkNodeRemoved(removed, new String[]{nodeName1 + "/" + nodeName2}, null);
+        checkNodeMoved(moved, nodeName1 + "/" + nodeName2, nodeName2);
     }
 
     /**
@@ -129,8 +154,10 @@ public class NodeMovedTest extends AbstractObservationTest {
         testRootNode.save();
         EventResult addNodeListener = new EventResult(log);
         EventResult removeNodeListener = new EventResult(log);
+        EventResult moveNodeListener = new EventResult(log);
         addEventListener(addNodeListener, Event.NODE_ADDED);
         addEventListener(removeNodeListener, Event.NODE_REMOVED);
+        addEventListener(moveNodeListener, Event.NODE_MOVED);
         // move n2
         superuser.move(n2.getPath(), n3.getPath() + "/" + nodeName2);
         // remove n1
@@ -138,9 +165,47 @@ public class NodeMovedTest extends AbstractObservationTest {
         testRootNode.save();
         Event[] added = addNodeListener.getEvents(DEFAULT_WAIT_TIMEOUT);
         Event[] removed = removeNodeListener.getEvents(DEFAULT_WAIT_TIMEOUT);
+        Event[] moved = moveNodeListener.getEvents(DEFAULT_WAIT_TIMEOUT);
         removeEventListener(addNodeListener);
         removeEventListener(removeNodeListener);
+        removeEventListener(moveNodeListener);
         checkNodeAdded(added, new String[]{nodeName3 + "/" + nodeName2}, null);
         checkNodeRemoved(removed, new String[]{nodeName1 + "/" + nodeName2, nodeName1}, null);
+        checkNodeMoved(moved, nodeName1 + "/" + nodeName2, nodeName3 + "/" + nodeName2);
+    }
+
+    /**
+     * TODO: move to base class once JSR 283 is final
+     * Checks <code>Events</code> for paths. All <code>relPaths</code> are
+     * relative to {@link #testRoot}.
+     *
+     * @param events the <code>Event</code>s.
+     * @param from   the source path where the node was moved from.
+     * @param to     the destination path where the node was moved to.
+     * @throws RepositoryException if an error occurs while retrieving the nodes
+     *                             from event instances.
+     */
+    protected void checkNodeMoved(Event[] events, String from, String to)
+            throws RepositoryException {
+        checkNodes(events, new String[]{to}, null, Event.NODE_MOVED);
+        assertEquals("Wrong number of events", 1, events.length);
+        Map info = events[0].getInfo();
+        checkInfoEntry(info, SRC_ABS_PATH, testRoot + "/" + from);
+        checkInfoEntry(info, DEST_ABS_PATH, testRoot + "/" + to);
+    }
+
+    /**
+     * TODO: move to base class once JSR 283 is final
+     * Checks if the info map contains the given <code>key</code> with the
+     * <code>expected</code> value.
+     *
+     * @param info the event info map.
+     * @param key the name of the key.
+     * @param expected the expected value.
+     */
+    protected void checkInfoEntry(Map info, String key, String expected) {
+        String value = (String) info.get(key);
+        assertNotNull("Missing event info key: " + key, value);
+        assertEquals("Wrong event info value for: " + key, expected, value);
     }
 }
