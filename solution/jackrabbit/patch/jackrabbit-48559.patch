diff --git a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/CheckinTest.java b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/CheckinTest.java
index ac25e7c..8909320 100644
--- a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/CheckinTest.java
+++ b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/CheckinTest.java
@@ -17,6 +17,7 @@
 package org.apache.jackrabbit.test.api.version;
 
 import javax.jcr.version.Version;
+import javax.jcr.version.VersionManager;
 import javax.jcr.RepositoryException;
 import javax.jcr.Value;
 import javax.jcr.InvalidItemStateException;
@@ -36,7 +37,9 @@ public class CheckinTest extends AbstractVersionTest {
     protected void setUp() throws Exception {
         super.setUp();
 
-        versionableNode.checkout();
+        VersionManager versionManager = versionableNode.getSession().getWorkspace().getVersionManager();
+        String path = versionableNode.getPath();
+        versionManager.checkout(path);
     }
 
     /**
@@ -50,6 +53,19 @@ public class CheckinTest extends AbstractVersionTest {
     }
 
     /**
+     * Test if VersionManager.isCheckedOut(P) returns false if P is the
+     * absolute path of a checked-in versionable node.
+     *
+     * @throws javax.jcr.RepositoryException
+     */
+    public void testIsCheckedOutJcr2() throws RepositoryException {
+        VersionManager versionManager = versionableNode.getSession().getWorkspace().getVersionManager();
+        String path = versionableNode.getPath();
+        versionManager.checkin(path);
+        assertTrue("VersionManager.isCheckedOut(P) must return false if the path P resolves to a checked-in node.", versionManager.isCheckedOut(path) == false);
+    }
+
+    /**
      * Test if the node's jcr:predecessors property contains an empty value array
      * after checkin.
      *
@@ -64,6 +80,22 @@ public class CheckinTest extends AbstractVersionTest {
     }
 
     /**
+     * Test if the node's jcr:predecessors property contains an empty value array
+     * after checkin.
+     *
+     * @throws RepositoryException
+     */
+    public void testCheckinRemovesPredecessorPropertyJcr2() throws RepositoryException {
+
+        VersionManager versionManager = versionableNode.getSession().getWorkspace().getVersionManager();
+        String path = versionableNode.getPath();
+        versionManager.checkin(path);
+        Value[] predecessorsValue = versionableNode.getProperty(jcrPredecessors).getValues();
+
+        assertTrue("Checkin must set the node's jcr:predecessors property to the empty array", predecessorsValue.length == 0);
+    }
+
+    /**
      * Test if the nodes jcr:predecessors property is copied to the new version
      * on Node.checkin().
      *
@@ -80,6 +112,24 @@ public class CheckinTest extends AbstractVersionTest {
     }
 
     /**
+     * Test if the nodes jcr:predecessors property is copied to the new version
+     * on checkin.
+     *
+     * @throws RepositoryException
+     */
+    public void testPredecessorIsCopiedToNewVersionJcr2() throws RepositoryException {
+
+        Value[] nPredecessorsValue = versionableNode.getProperty(jcrPredecessors).getValues();
+
+        VersionManager versionManager = versionableNode.getSession().getWorkspace().getVersionManager();
+        String path = versionableNode.getPath();
+        Version v = versionManager.checkin(path);
+        Value[] vPredecessorsValue = v.getProperty(jcrPredecessors).getValues();
+
+        assertEquals("The versionable checked-out node's jcr:predecessors property is copied to the new version on checkin.", Arrays.asList(nPredecessorsValue), Arrays.asList(vPredecessorsValue));
+    }
+
+    /**
      * Test if Node.checkin() on a checked-in node has no effect.
      *
      * @throws RepositoryException
@@ -97,6 +147,26 @@ public class CheckinTest extends AbstractVersionTest {
     }
 
     /**
+     * Test if VersionManager.checkin(P) has no effect if the path P resolves
+     * to a checked-in node.
+     *
+     * @throws RepositoryException
+     */
+    public void testMultipleCheckinHasNoEffectJcr2() throws RepositoryException {
+
+        VersionManager versionManager = versionableNode.getSession().getWorkspace().getVersionManager();
+        String path = versionableNode.getPath();
+        Version v = versionManager.checkin(path);
+        try {
+            Version v2 = versionManager.checkin(path);
+
+            assertTrue("Calling VersionManager.checkin(P) must not have an if the path P resolves to a node that is already checked-in.", v.isSame(v2));
+        } catch (RepositoryException e) {
+            fail("Calling VersionManager.checkin(P) must not throw an exception if the path P resolves to a node that is already checked-in.");
+        }
+    }
+
+    /**
      * Test if versionable node N's jcr:baseVersion property is set to refer to
      * the new version after checkin.
      *
@@ -110,6 +180,21 @@ public class CheckinTest extends AbstractVersionTest {
     }
 
     /**
+     * Test if versionable node N's jcr:baseVersion property is set to refer to
+     * the new version after checkin.
+     *
+     * @throws RepositoryException
+     */
+    public void testBaseVersionAfterCheckinJcr2() throws RepositoryException {
+        VersionManager versionManager = versionableNode.getSession().getWorkspace().getVersionManager();
+        String path = versionableNode.getPath();
+        Version v = versionManager.checkin(path);
+        Value baseVersionRef = versionableNode.getProperty(jcrBaseVersion).getValue();
+
+        assertEquals("Checked-in node's jcr:baseVersion property is set to refer to the version created on checkin.", superuser.getValueFactory().createValue(v), baseVersionRef);
+    }
+
+    /**
      * Test if Node.checkin() throws InvalidItemStateException if the node
      * has unsaved changes pending.
      *
@@ -128,6 +213,26 @@ public class CheckinTest extends AbstractVersionTest {
     }
 
     /**
+     * Test if VersionManager.checkin(P) throws InvalidItemStateException if
+     * the path P resolves to a node that has unsaved changes pending.
+     *
+     * @throws RepositoryException
+     */
+    public void testCheckinWithPendingChangesJcr2() throws RepositoryException {
+        try {
+            // modify node without calling save()
+            versionableNode.setProperty(propertyName1, propertyValue);
+            VersionManager versionManager = versionableNode.getSession().getWorkspace().getVersionManager();
+            String path = versionableNode.getPath();
+            versionManager.checkin(path);
+
+            fail("InvalidItemStateException must be thrown on attempt to checkin a node having any unsaved changes pending.");
+        } catch (InvalidItemStateException e) {
+            // ok
+        }
+    }
+
+    /**
      * Test if Node.isCheckedOut() returns false after Node.checkin().
      *
      * @throws RepositoryException
@@ -140,6 +245,20 @@ public class CheckinTest extends AbstractVersionTest {
     }
 
     /**
+     * Test if VersionManager.isCheckedOut(P) returns false after calling VersionManager.checkin(P).
+     *
+     * @throws RepositoryException
+     */
+    public void testIsNotCheckedOutJcr2() throws RepositoryException {
+        VersionManager versionManager = versionableNode.getSession().getWorkspace().getVersionManager();
+        String path = versionableNode.getPath();
+        versionManager.checkin(path);
+        boolean isCheckedOut = versionManager.isCheckedOut(path);
+
+        assertFalse("VersionManager.isCheckedOut(P) must return false after VersionManager.checkin(P).", isCheckedOut);
+    }
+
+    /**
      * Test if Node.checkin() adds another version to the VersionHistory
      *
      * @throws RepositoryException
@@ -154,6 +273,22 @@ public class CheckinTest extends AbstractVersionTest {
     }
 
     /**
+     * Test if VersionManager.checkin(String) adds another version to the VersionHistory
+     *
+     * @throws RepositoryException
+     */
+    public void testCheckinCreatesNewVersionJcr2() throws RepositoryException {
+
+        VersionManager versionManager = versionableNode.getSession().getWorkspace().getVersionManager();
+        String path = versionableNode.getPath();
+        long initialNumberOfVersions = getNumberOfVersions(versionManager.getVersionHistory(path));
+        versionManager.checkin(path);
+        long numberOfVersions = getNumberOfVersions(versionManager.getVersionHistory(path));
+
+        assertTrue("Checkin must create a new Version in the VersionHistory.", numberOfVersions == initialNumberOfVersions + 1);
+    }
+
+    /**
      * Test calling Node.checkin() on a non-versionable node.
      *
      * @throws RepositoryException
@@ -166,4 +301,21 @@ public class CheckinTest extends AbstractVersionTest {
             //success
         }
     }
+
+    /**
+     * Test calling VersionManager.checkin(P) with the path P resolving to
+     * a non-versionable node.
+     *
+     * @throws RepositoryException
+     */
+    public void testCheckinNonVersionableNodeJcr2() throws RepositoryException {
+        try {
+            VersionManager versionManager = nonVersionableNode.getSession().getWorkspace().getVersionManager();
+            String path = nonVersionableNode.getPath();
+            versionManager.checkin(path);
+            fail("VersionManager.checkin(P) must throw UnsupportedRepositoryOperationException if the path P resolves to a non-versionable node.");
+        } catch (UnsupportedRepositoryOperationException e) {
+            //success
+        }
+    }
 }
\ No newline at end of file
