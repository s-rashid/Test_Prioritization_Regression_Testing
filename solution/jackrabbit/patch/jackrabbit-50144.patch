diff --git a/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/observation/ObservationManagerImpl.java b/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/observation/ObservationManagerImpl.java
index 5df9799..1ce808d 100644
--- a/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/observation/ObservationManagerImpl.java
+++ b/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/observation/ObservationManagerImpl.java
@@ -19,12 +19,10 @@ package org.apache.jackrabbit.jcr2spi.observation;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 
 import javax.jcr.RepositoryException;
-import javax.jcr.UnsupportedRepositoryOperationException;
 import javax.jcr.observation.EventJournal;
 import javax.jcr.observation.EventListener;
 import javax.jcr.observation.EventListenerIterator;
@@ -37,6 +35,7 @@ import org.apache.jackrabbit.spi.EventBundle;
 import org.apache.jackrabbit.spi.EventFilter;
 import org.apache.jackrabbit.spi.Name;
 import org.apache.jackrabbit.spi.Path;
+import org.apache.jackrabbit.spi.Event;
 import org.apache.jackrabbit.spi.commons.conversion.NameException;
 import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
 import org.slf4j.Logger;
@@ -71,21 +70,22 @@ public class ObservationManagerImpl implements ObservationManager, InternalEvent
     /**
      * Live mapping of <code>EventListener</code> to <code>EventFilter</code>.
      */
-    private final Map subscriptions = new HashMap();
+    private final Map<EventListener, EventFilter> subscriptions = new HashMap<EventListener, EventFilter>();
 
     /**
      * A read only mapping of <code>EventListener</code> to <code>EventFilter</code>.
      */
-    private Map readOnlySubscriptions;
+    private Map<EventListener, EventFilter> readOnlySubscriptions;
 
     /**
      * Creates a new observation manager for <code>session</code>.
+     *
      * @param wspManager the WorkspaceManager.
-     * @param resolver
+     * @param resolver   the name path resolver for this session.
      * @param ntRegistry The <code>NodeTypeRegistry</code> of the session.
-     * @param valueFactory
      */
-    public ObservationManagerImpl(WorkspaceManager wspManager, NamePathResolver resolver,
+    public ObservationManagerImpl(WorkspaceManager wspManager,
+                                  NamePathResolver resolver,
                                   NodeTypeRegistry ntRegistry) {
         this.wspManager = wspManager;
         this.resolver = resolver;
@@ -102,33 +102,8 @@ public class ObservationManagerImpl implements ObservationManager, InternalEvent
                                  String[] uuids,
                                  String[] nodeTypeNames,
                                  boolean noLocal) throws RepositoryException {
-        Path path;
-        try {
-            path = resolver.getQPath(absPath).getCanonicalPath();
-        } catch (NameException e) {
-            throw new RepositoryException("Malformed path: " + absPath);
-        }
-
-        // create NodeType instances from names
-        Name[] qNodeTypeNames;
-        if (nodeTypeNames == null) {
-            qNodeTypeNames = null;
-        } else {
-            try {
-                qNodeTypeNames = new Name[nodeTypeNames.length];
-                for (int i = 0; i < nodeTypeNames.length; i++) {
-                    Name ntName = resolver.getQName(nodeTypeNames[i]);
-                    if (!ntRegistry.isRegistered(ntName)) {
-                        throw new RepositoryException("unknown node type: " + nodeTypeNames[i]);
-                    }
-                    qNodeTypeNames[i] = ntName;
-                }
-            } catch (NameException e) {
-                throw new RepositoryException(e.getMessage());
-            }
-        }
-
-        EventFilter filter = wspManager.createEventFilter(eventTypes, path, isDeep, uuids, qNodeTypeNames, noLocal);
+        EventFilter filter = createEventFilter(eventTypes, absPath,
+                isDeep, uuids, nodeTypeNames, noLocal);
         synchronized (subscriptions) {
             subscriptions.put(listener, filter);
             readOnlySubscriptions = null;
@@ -173,15 +148,18 @@ public class ObservationManagerImpl implements ObservationManager, InternalEvent
      * @see javax.jcr.observation.ObservationManager#getEventJournal()
      */
     public EventJournal getEventJournal() throws RepositoryException {
-        // TODO
-        throw new UnsupportedRepositoryOperationException("JCR-2108");
+        return getEventJournal(Event.ALL_TYPES, "/", true, null, null);
     }
 
+    /**
+     * @see javax.jcr.observation.ObservationManager#getEventJournal(int, String, boolean, String[], String[])
+     */
     public EventJournal getEventJournal(
             int eventTypes, String absPath, boolean isDeep,
             String[] uuid, String[] nodeTypeName)
             throws RepositoryException {
-        throw new UnsupportedRepositoryOperationException("JCR-2108");
+        EventFilter filter = createEventFilter(eventTypes, absPath, isDeep, uuid, nodeTypeName, false);
+        return new EventJournalImpl(wspManager, filter, resolver);
     }
 
     /**
@@ -193,8 +171,8 @@ public class ObservationManagerImpl implements ObservationManager, InternalEvent
 
     //-----------------------< InternalEventListener >--------------------------
 
-    public Collection getEventFilters() {
-        List filters = new ArrayList();
+    public Collection<EventFilter> getEventFilters() {
+        List<EventFilter> filters = new ArrayList<EventFilter>();
         synchronized (subscriptions) {
             ensureReadOnlyMap();
             filters.addAll(readOnlySubscriptions.values());
@@ -204,16 +182,17 @@ public class ObservationManagerImpl implements ObservationManager, InternalEvent
 
     public void onEvent(EventBundle eventBundle) {
         // get active listeners
-        Map activeListeners;
+        Map<EventListener, EventFilter> activeListeners;
         synchronized (subscriptions) {
             ensureReadOnlyMap();
             activeListeners = readOnlySubscriptions;
         }
-        for (Iterator it = activeListeners.entrySet().iterator(); it.hasNext(); ) {
-            Map.Entry entry = (Map.Entry) it.next();
-            EventListener listener = (EventListener) entry.getKey();
-            EventFilter filter = (EventFilter) entry.getValue();
-            FilteredEventIterator eventIter = new FilteredEventIterator(eventBundle, filter, resolver, wspManager.getIdFactory());
+        for (Map.Entry<EventListener, EventFilter> entry : activeListeners.entrySet()) {
+            EventListener listener = entry.getKey();
+            EventFilter filter = entry.getValue();
+            FilteredEventIterator eventIter = new FilteredEventIterator(
+                    eventBundle.getEvents(), eventBundle.isLocal(), filter,
+                    resolver, wspManager.getIdFactory());
             if (eventIter.hasNext()) {
                 try {
                     listener.onEvent(eventIter);
@@ -235,8 +214,58 @@ public class ObservationManagerImpl implements ObservationManager, InternalEvent
      */
     private void ensureReadOnlyMap() {
         if (readOnlySubscriptions == null) {
-            readOnlySubscriptions = new HashMap(subscriptions);
+            readOnlySubscriptions = new HashMap<EventListener, EventFilter>(subscriptions);
         }
     }
 
+    /**
+     * Creates an SPI event filter from the given list of constraints.
+     *
+     * @param eventTypes    the event types.
+     * @param absPath       an absolute path.
+     * @param isDeep        whether to include events for descendant items of
+     *                      the node at absPath.
+     * @param uuids         uuid filters.
+     * @param nodeTypeNames node type filters.
+     * @param noLocal       whether to exclude changes from the local session.
+     * @return the SPI event filter instance.
+     * @throws RepositoryException if an error occurs while creating the event
+     *                             filter.
+     */
+    private EventFilter createEventFilter(int eventTypes,
+                                          String absPath,
+                                          boolean isDeep,
+                                          String[] uuids,
+                                          String[] nodeTypeNames,
+                                          boolean noLocal)
+            throws RepositoryException {
+        Path path;
+        try {
+            path = resolver.getQPath(absPath).getCanonicalPath();
+        } catch (NameException e) {
+            throw new RepositoryException("Malformed path: " + absPath);
+        }
+
+        // create NodeType instances from names
+        Name[] qNodeTypeNames;
+        if (nodeTypeNames == null) {
+            qNodeTypeNames = null;
+        } else {
+            try {
+                qNodeTypeNames = new Name[nodeTypeNames.length];
+                for (int i = 0; i < nodeTypeNames.length; i++) {
+                    Name ntName = resolver.getQName(nodeTypeNames[i]);
+                    if (!ntRegistry.isRegistered(ntName)) {
+                        throw new RepositoryException("unknown node type: " + nodeTypeNames[i]);
+                    }
+                    qNodeTypeNames[i] = ntName;
+                }
+            } catch (NameException e) {
+                throw new RepositoryException(e.getMessage());
+            }
+        }
+
+        return wspManager.createEventFilter(eventTypes, path, isDeep,
+                uuids, qNodeTypeNames, noLocal);
+    }
 }
