diff --git a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/CheckoutTest.java b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/CheckoutTest.java
index 89d0cdd..375783f 100644
--- a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/CheckoutTest.java
+++ b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/CheckoutTest.java
@@ -21,6 +21,7 @@ import javax.jcr.Node;
 import javax.jcr.ItemNotFoundException;
 import javax.jcr.UnsupportedRepositoryOperationException;
 import javax.jcr.Value;
+import javax.jcr.version.VersionManager;
 
 /**
  * <code>CheckoutTest</code> covers tests related to {@link
@@ -36,10 +37,15 @@ public class CheckoutTest extends AbstractVersionTest {
     protected void setUp() throws Exception {
         super.setUp();
 
+        VersionManager versionManager = versionableNode.getSession().getWorkspace().getVersionManager();
+        String path = versionableNode.getPath();
+        if (!versionManager.isCheckedOut(path)) {
+            fail("A versionable node must be checked-out after persistent creation.");
+        }
         if (!versionableNode.isCheckedOut()) {
             fail("A versionable node must be checked-out after persistent creation.");
         }
-        versionableNode.checkin();
+        versionManager.checkin(path);
     }
 
     /**
@@ -52,6 +58,17 @@ public class CheckoutTest extends AbstractVersionTest {
     }
 
     /**
+     * Test if VersionManager.isCheckedOut(P) returns true if P is the
+     * absolute path of a versionable node that has been checked out before.
+     */
+    public void testIsCheckedOutJcr2() throws RepositoryException {
+        VersionManager versionManager = versionableNode.getSession().getWorkspace().getVersionManager();
+        String path = versionableNode.getPath();
+        versionManager.checkout(path);
+        assertTrue("After successfully calling VersionManager.checkout(P) with P denoting the absolute path of a versionable node, VersionManager.isCheckedOut(P) must return true.", versionManager.isCheckedOut(path));
+    }
+
+    /**
      * Test calling Node.isCheckedOut() on a non-versionable.
      */
     public void testIsCheckedOutNonVersionableNode() throws RepositoryException {
@@ -78,12 +95,57 @@ public class CheckoutTest extends AbstractVersionTest {
     }
 
     /**
+     * Test calling VersionManager.isCheckedOut(P) with P denoting the
+     * absolute path of a non-versionable node.
+     */
+    public void testIsCheckedOutNonVersionableNodeJcr2() throws RepositoryException {
+        VersionManager versionManager = nonVersionableNode.getSession().getWorkspace().getVersionManager();
+        String path = nonVersionableNode.getPath();
+        boolean isCheckedOut = versionManager.isCheckedOut(path);
+        Node vParent = null;
+        try {
+            vParent = nonVersionableNode.getParent();
+            while (!vParent.isNodeType(mixVersionable)) {
+                vParent = vParent.getParent();
+            }
+        } catch (ItemNotFoundException e) {
+            // root reached.
+        }
+
+        if (vParent != null && vParent.isNodeType(mixVersionable)) {
+            String parentPath = vParent.getPath();
+            if (versionManager.isCheckedOut(parentPath)) {
+                assertTrue("VersionManager.isCheckedOut(P) must return true if P denotes the absolute path of a non-versionable node whose nearest versionable ancestor is checked-out.", isCheckedOut);
+            } else {
+                assertFalse("VersionManager.isCheckedOut(P) must return false if P denotes the absolute path of a non-versionable node whose nearest versionable ancestor is checked-in.", isCheckedOut);
+            }
+        } else {
+            assertTrue("VersionManager.isCheckedOut(P) must return true if P denotes the absolute path of a non-versionable node that has no versionable ancestor", isCheckedOut);
+        }
+    }
+
+    /**
      * Test calling Node.checkout() on a non-versionable node.
      */
     public void testCheckoutNonVersionableNode() throws RepositoryException {
         try {
             nonVersionableNode.checkout();
-            fail("Node.checkout() on a non versionable node must throw UnsupportedRepositoryOperationException");
+            fail("Node.checkout() on a non-versionable node must throw UnsupportedRepositoryOperationException");
+        } catch (UnsupportedRepositoryOperationException e) {
+            //success
+        }
+    }
+
+    /**
+     * Test calling VersionManager.checkout(P) with P denoting the absolute
+     * path of a non-versionable node.
+     */
+    public void testCheckoutNonVersionableNodeJcr2() throws RepositoryException {
+        VersionManager versionManager = nonVersionableNode.getSession().getWorkspace().getVersionManager();
+        String path = nonVersionableNode.getPath();
+        try {
+            versionManager.checkout(path);
+            fail("VersionManager.checkout(P) with P denoting the absolute path of a non-versionable node must throw UnsupportedRepositoryOperationException");
         } catch (UnsupportedRepositoryOperationException e) {
             //success
         }
@@ -99,6 +161,18 @@ public class CheckoutTest extends AbstractVersionTest {
     }
 
     /**
+     * Test if VersionManager.checkout(P) doesn't throw any exception if P
+     * denotes the absolute path of a versionable node that has been checked
+     * out before.
+     */
+    public void testCheckoutTwiceDoesNotThrowJcr2() throws RepositoryException {
+        VersionManager versionManager = versionableNode.getSession().getWorkspace().getVersionManager();
+        String path = versionableNode.getPath();
+        versionManager.checkout(path);
+        versionManager.checkout(path);
+    }
+
+    /**
      * Test if Node.checkout() copies the node's jcr:baseVersion to node's
      * jcr:predecessors property (no save required).
      */
@@ -121,4 +195,31 @@ public class CheckoutTest extends AbstractVersionTest {
             fail("After calling Node.checkout() the current value of node's jcr:baseVersion must be copied to node's jcr:predecessors property");
         }
     }
+
+    /**
+     * Test if VersionManager.checkout(P), with P denoting the absolute path
+     * of a versionable node, copies the node's jcr:baseVersion to the node's
+     * jcr:predecessors property (no save required).
+     */
+    public void testCheckoutCopiesBaseValueToPredecessorPropertyJcr2() throws RepositoryException {
+        VersionManager versionManager = versionableNode.getSession().getWorkspace().getVersionManager();
+        String path = versionableNode.getPath();
+        Value baseVersionValue = versionableNode.getProperty(jcrBaseVersion).getValue();
+        versionManager.checkout(path);
+        Value[] predecessorsValues = versionableNode.getProperty(jcrPredecessors).getValues();
+
+        // loop over all values of jcr:predecessors property as it's not sure
+        // on which position jcr:baseVersion is copied.
+        boolean foundBaseVersionProp = false;
+        int i = 0;
+        while (i < predecessorsValues.length && !foundBaseVersionProp) {
+            if (predecessorsValues[i].equals(baseVersionValue)) {
+                foundBaseVersionProp = true;
+            }
+            i++;
+        }
+        if (!foundBaseVersionProp) {
+            fail("After calling Node.checkout() the current value of node's jcr:baseVersion must be copied to node's jcr:predecessors property");
+        }
+    }
 }
\ No newline at end of file
