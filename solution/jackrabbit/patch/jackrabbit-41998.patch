diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SearchIndex.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SearchIndex.java
index 6b3158c..4cd2db6 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SearchIndex.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SearchIndex.java
@@ -49,6 +49,7 @@ import org.apache.lucene.index.TermDocs;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.Sort;
 import org.apache.lucene.search.SortField;
+import org.apache.lucene.search.Similarity;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.commons.collections.iterators.AbstractIteratorDecorator;
@@ -362,6 +363,11 @@ public class SearchIndex extends AbstractQueryHandler {
     private SpellChecker spellChecker;
 
     /**
+     * The similarity in use for indexing and searching.
+     */
+    private Similarity similarity = Similarity.getDefault();
+
+    /**
      * Indicates if this <code>SearchIndex</code> is closed and cannot be used
      * anymore.
      */
@@ -655,8 +661,9 @@ public class SearchIndex extends AbstractQueryHandler {
         Sort sort = new Sort(createSortFields(orderProps, orderSpecs));
 
         final IndexReader reader = getIndexReader(queryImpl.needsSystemTree());
-        return new FilterMultiColumnQueryHits(new JackrabbitIndexSearcher(
-                session, reader).execute(query, sort)) {
+        JackrabbitIndexSearcher searcher = new JackrabbitIndexSearcher(session, reader);
+        searcher.setSimilarity(getSimilarity());
+        return new FilterMultiColumnQueryHits(searcher.execute(query, sort)) {
             public void close() throws IOException {
                 try {
                     super.close();
@@ -749,6 +756,13 @@ public class SearchIndex extends AbstractQueryHandler {
     }
 
     /**
+     * @return the similarity, which should be used for indexing and searching.
+     */
+    public Similarity getSimilarity() {
+        return similarity;
+    }
+
+    /**
      * Returns an index reader for this search index. The caller of this method
      * is responsible for closing the index reader when he is finished using
      * it.
@@ -1785,6 +1799,28 @@ public class SearchIndex extends AbstractQueryHandler {
         return synonymProviderConfigPath;
     }
 
+    /**
+     * Sets the similarity implementation, which will be used for indexing and
+     * searching. The implementation must extend {@link Similarity}.
+     *
+     * @param className a {@link Similarity} implementation.
+     */
+    public void setSimilarityClass(String className) {
+        try {
+            Class similarityClass = Class.forName(className);
+            similarity = (Similarity) similarityClass.newInstance();
+        } catch (Exception e) {
+            log.warn("Invalid Similarity class: " + className, e);
+        }
+    }
+
+    /**
+     * @return the name of the similarity class.
+     */
+    public String getSimilarityClass() {
+        return similarity.getClass().getName();
+    }
+
     //----------------------------< internal >----------------------------------
 
     /**
