diff --git a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/NodeDefTest.java b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/NodeDefTest.java
index 920464f..412794a 100644
--- a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/NodeDefTest.java
+++ b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/nodetype/NodeDefTest.java
@@ -16,6 +16,10 @@
  */
 package org.apache.jackrabbit.test.api.nodetype;
 
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.Set;
+
 import org.apache.jackrabbit.test.AbstractJCRTest;
 import org.apache.jackrabbit.test.NotExecutableException;
 
@@ -162,12 +166,11 @@ public class NodeDefTest extends AbstractJCRTest {
     public void testGetRequiredPrimaryTypes()
             throws RepositoryException {
 
-        NodeTypeIterator types = manager.getAllNodeTypes();
         // loop all node types
-        while (types.hasNext()) {
+        for (NodeTypeIterator types = manager.getAllNodeTypes(); types.hasNext(); ) {
             NodeType type = types.nextNodeType();
             NodeDefinition defs[] = type.getChildNodeDefinitions();
-
+            
             for (int i = 0; i < defs.length; i++) {
                 assertTrue("getRequiredPrimaryTypes() must never return an " +
                         "empty array.",
@@ -176,17 +179,45 @@ public class NodeDefTest extends AbstractJCRTest {
         }
     }
 
+    /**
+     * Tests that the information from getRequiredPrimaryTypeNames()
+     * matches getRequiredPrimaryTypes().
+     * 
+     * @since JCR 2.0
+     */
+    public void testGetRequiredPrimaryTypeNames()
+            throws RepositoryException {
+
+        // loop all node types
+        for (NodeTypeIterator types = manager.getAllNodeTypes(); types.hasNext(); ) {
+            NodeType type = types.nextNodeType();
+            NodeDefinition defs[] = type.getChildNodeDefinitions();
+            
+            for (int i = 0; i < defs.length; i++) {
+                NodeType requiredPrimaryTypes[] = defs[i].getRequiredPrimaryTypes();
+                Set rptnames = new HashSet();
+                for (int j = 0; j < requiredPrimaryTypes.length; j++) {
+                    rptnames.add(requiredPrimaryTypes[j].getName());
+                }
+                
+                Set rptnames2 = new HashSet(Arrays.asList(defs[i].getRequiredPrimaryTypeNames()));
+                assertEquals("names returned from getRequiredPrimaryTypeNames should match types returned from getRequiredPrimaryTypes", rptnames, rptnames2);
+            }
+        }
+    }
 
     /**
      * Tests if the default primary type is of the same or a sub node type as the
-     * the required primary types. Test runs for all existing node types.
+     * the required primary types. Test runs for all existing node types. Also
+     * tests the string based access ({@link NodeDefinition#getDefaultPrimaryTypeName()}.
+     * 
+     * @since JCR 2.0
      */
     public void testGetDefaultPrimaryTypes()
             throws RepositoryException {
 
-        NodeTypeIterator types = manager.getAllNodeTypes();
         // loop all node types
-        while (types.hasNext()) {
+        for (NodeTypeIterator types = manager.getAllNodeTypes(); types.hasNext(); ) {
             NodeType type = types.nextNodeType();
             NodeDefinition defs[] = type.getChildNodeDefinitions();
 
@@ -194,6 +225,7 @@ public class NodeDefTest extends AbstractJCRTest {
 
                 NodeDefinition def = defs[i];
                 NodeType defaultType = def.getDefaultPrimaryType();
+                String defaultTypeName = def.getDefaultPrimaryTypeName();
                 if (defaultType != null) {
 
                     NodeType requiredTypes[] =
@@ -211,6 +243,13 @@ public class NodeDefTest extends AbstractJCRTest {
                                 "returned by getRequiredPrimaryTypes()",
                                 isSubType);
                     }
+
+                    assertEquals("type names obtained from getDefaultPrimaryType and getDefaultPrimaryTypeName should match", defaultType.getName(), defaultTypeName);
+                    NodeType tmpType = manager.getNodeType(defaultTypeName);
+                    assertEquals(tmpType.getName(), defaultTypeName);
+                }
+                else {
+                    assertNull("getDefaultPrimaryTypeName should return null when getDefaultPrimaryType does", defaultTypeName);
                 }
             }
         }
