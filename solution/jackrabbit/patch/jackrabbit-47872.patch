diff --git a/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/GetPropertyTest.java b/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/GetPropertyTest.java
index e9678fc..56a1344 100644
--- a/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/GetPropertyTest.java
+++ b/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/GetPropertyTest.java
@@ -16,19 +16,20 @@
  */
 package org.apache.jackrabbit.jcr2spi;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.apache.jackrabbit.test.AbstractJCRTest;
-import org.apache.jackrabbit.test.NotExecutableException;
-import org.apache.jackrabbit.util.Text;
-
+import javax.jcr.InvalidItemStateException;
+import javax.jcr.Item;
 import javax.jcr.Node;
+import javax.jcr.PathNotFoundException;
 import javax.jcr.Property;
-import javax.jcr.Session;
-import javax.jcr.RepositoryException;
 import javax.jcr.PropertyIterator;
-import javax.jcr.InvalidItemStateException;
-import javax.jcr.PathNotFoundException;
+import javax.jcr.RepositoryException;
+import javax.jcr.Session;
+
+import org.apache.jackrabbit.test.AbstractJCRTest;
+import org.apache.jackrabbit.test.NotExecutableException;
+import org.apache.jackrabbit.util.Text;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /** <code>GetPropertyTest</code>... */
 public class GetPropertyTest extends AbstractJCRTest {
@@ -122,6 +123,61 @@ public class GetPropertyTest extends AbstractJCRTest {
         assertTrue(readOnly.itemExists(p3.getPath()));
     }
 
+    public void testGetExternallyChangedNode() throws RepositoryException {
+        // Access node1 through session 1
+        Node node1 = (Node) readOnly.getItem(node1Path);
+
+        // Add node and property through session 2
+        Node n2 = testRootNode.getNode(nodeName1).addNode(nodeName2);
+        Property p3 = n2.setProperty(propertyName1, "test");
+        testRootNode.save();
+
+        // Assert added nodes are visible in session 1 after refresh
+        node1.refresh(false);
+        assertTrue(readOnly.itemExists(n2.getPath()));
+        assertTrue(readOnly.itemExists(p3.getPath()));
+
+        Item m2 = readOnly.getItem(n2.getPath());
+        assertTrue(m2.isNode());
+        assertTrue(((Node) m2).hasProperty(propertyName1));
+
+        // Remove property through session 2
+        p3.remove();
+        testRootNode.save();
+
+        // Assert removal is visible through session 1
+        node1.refresh(false);
+        assertFalse(((Node) m2).hasProperty(propertyName1));
+    }
+
+    public void testGetExternallyChangedProperty() throws RepositoryException {
+        // Access node1 through session 1
+        Node node1 = (Node) readOnly.getItem(node1Path);
+
+        // Add node and property through session 2
+        Node n2 = testRootNode.getNode(nodeName1).addNode(nodeName2);
+        Property p3 = n2.setProperty(propertyName1, "test");
+        p3.setValue("v3");
+        testRootNode.save();
+
+        // Assert added nodes are visible in session 1 after refresh
+        node1.refresh(false);
+        assertTrue(readOnly.itemExists(n2.getPath()));
+        assertTrue(readOnly.itemExists(p3.getPath()));
+
+        Item q3 = readOnly.getItem(p3.getPath());
+        assertFalse(q3.isNode());
+        assertTrue("v3".equals(((Property) q3).getString()));
+
+        // Change property value through session 2
+        p3.setValue("v3_modified");
+        testRootNode.save();
+
+        // Assert modification is visible through session 1
+        node1.refresh(false);
+        assertTrue("v3_modified".equals(((Property) q3).getString()));
+    }
+
     public void testGetDeepSNSProperties() throws RepositoryException, NotExecutableException {
         Node n = testRootNode.getNode(nodeName1);
         if (!n.getDefinition().allowsSameNameSiblings()) {
@@ -212,4 +268,4 @@ public class GetPropertyTest extends AbstractJCRTest {
             rw.logout();
         }
     }
-}
\ No newline at end of file
+}
