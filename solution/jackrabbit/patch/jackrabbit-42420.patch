diff --git a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/qom/AbstractQOMTest.java b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/qom/AbstractQOMTest.java
index 6c82453..cf69501 100644
--- a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/qom/AbstractQOMTest.java
+++ b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/qom/AbstractQOMTest.java
@@ -21,6 +21,11 @@ import org.apache.jackrabbit.test.api.query.AbstractQueryTest;
 import org.apache.jackrabbit.spi.commons.query.jsr283.qom.QueryObjectModelFactory;
 import org.apache.jackrabbit.spi.commons.query.jsr283.qom.QueryObjectModelConstants;
 import org.apache.jackrabbit.core.query.QueryManagerImpl;
+import org.apache.jackrabbit.core.query.QueryImpl;
+
+import javax.jcr.query.Query;
+import javax.jcr.RepositoryException;
+import javax.jcr.Value;
 
 /**
  * <code>AbstractQOMTest</code> is a base class for test cases on the JQOM.
@@ -36,4 +41,21 @@ public class AbstractQOMTest
         QueryManagerImpl qm = (QueryManagerImpl) superuser.getWorkspace().getQueryManager();
         qomFactory = qm.getQOMFactory();
     }
+
+    /**
+     * Binds the given <code>value</code> to the variable named
+     * <code>var</code>.
+     *
+     * @param q     the query
+     * @param var   name of variable in query
+     * @param value value to bind
+     * @throws IllegalArgumentException if <code>var</code> is not a valid
+     *                                  variable in this query.
+     * @throws RepositoryException      if an error occurs.
+     */
+    protected void bindVariableValue(Query q, String var, Value value)
+            throws RepositoryException {
+        // TODO: remove cast when bindValue() is available on JSR 283 Query
+        ((QueryImpl) q).bindValue(var, value);
+    }
 }
