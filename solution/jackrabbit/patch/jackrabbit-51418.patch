diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/RedoLog.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/RedoLog.java
index 8270b32..ced2181 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/RedoLog.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/RedoLog.java
@@ -52,7 +52,17 @@ class RedoLog {
     /**
      * Default name of the redo log file
      */
-    private static final String REDO_LOG = "redo.log";
+    static final String REDO_LOG = "redo.log";
+
+    /**
+     * Prefix of the redo log files.
+     */
+    static final String REDO_LOG_PREFIX = "redo_";
+
+    /**
+     * The .log extension.
+     */
+    static final String DOT_LOG = ".log";
 
     /**
      * Implements a {@link ActionCollector} that counts all entries and sets
@@ -70,6 +80,11 @@ class RedoLog {
     private final Directory dir;
 
     /**
+     * The name of the log file.
+     */
+    private final String fileName;
+
+    /**
      * The number of log entries in the log file
      */
     private int entryCount = 0;
@@ -84,14 +99,36 @@ class RedoLog {
      * given directory.
      *
      * @param dir the directory where the redo log file is located.
+     * @param fileName the name of the redo log file.
      * @throws IOException if an error occurs while reading the redo log.
      */
-    RedoLog(Directory dir) throws IOException {
+    private RedoLog(Directory dir, String fileName) throws IOException {
         this.dir = dir;
+        this.fileName = fileName;
         read(ENTRY_COUNTER);
     }
 
     /**
+     * Creates a new <code>RedoLog</code> instance, which stores its log in the
+     * given directory.
+     *
+     * @param dir        the directory where the redo log file is located.
+     * @param generation the redo log generation number.
+     * @return the redo log.
+     * @throws IOException if the redo log cannot be created.
+     */
+    static RedoLog create(Directory dir, long generation) throws IOException {
+        String fileName;
+        if (generation == 0) {
+            fileName = RedoLog.REDO_LOG;
+        } else {
+            fileName = RedoLog.REDO_LOG_PREFIX + Long.toString(
+                    generation, Character.MAX_RADIX) + RedoLog.DOT_LOG;
+        }
+        return new RedoLog(dir, fileName);
+    }
+
+    /**
      * Returns <code>true</code> if this redo log contains any entries,
      * <code>false</code> otherwise.
      * @return <code>true</code> if this redo log contains any entries,
@@ -117,8 +154,8 @@ class RedoLog {
      *         redo log.
      * @throws IOException if an error occurs while reading from the redo log.
      */
-    List getActions() throws IOException {
-        final List actions = new ArrayList();
+    List<MultiIndex.Action> getActions() throws IOException {
+        final List<MultiIndex.Action> actions = new ArrayList<MultiIndex.Action>();
         read(new ActionCollector() {
             public void collect(MultiIndex.Action a) {
                 actions.add(a);
@@ -159,18 +196,30 @@ class RedoLog {
             out.close();
             out = null;
         }
-        dir.deleteFile(REDO_LOG);
+        dir.deleteFile(fileName);
         entryCount = 0;
     }
 
     /**
+     * Closes this redo log.
+     *
+     * @throws IOException if an error occurs while flushing pending writes.
+     */
+    void close() throws IOException {
+        if (out != null) {
+            out.close();
+            out = null;
+        }
+    }
+
+    /**
      * Initializes the {@link #out} stream if it is not yet set.
      * @throws IOException if an error occurs while creating the
      * output stream.
      */
     private void initOut() throws IOException {
         if (out == null) {
-            OutputStream os = new IndexOutputStream(dir.createOutput(REDO_LOG));
+            OutputStream os = new IndexOutputStream(dir.createOutput(fileName));
             out = new BufferedWriter(new OutputStreamWriter(os));
         }
     }
@@ -183,10 +232,10 @@ class RedoLog {
      * log file.
      */
     private void read(ActionCollector collector) throws IOException {
-        if (!dir.fileExists(REDO_LOG)) {
+        if (!dir.fileExists(fileName)) {
             return;
         }
-        InputStream in = new IndexInputStream(dir.openInput(REDO_LOG));
+        InputStream in = new IndexInputStream(dir.openInput(fileName));
         try {
             BufferedReader reader = new BufferedReader(new InputStreamReader(in));
             String line;
