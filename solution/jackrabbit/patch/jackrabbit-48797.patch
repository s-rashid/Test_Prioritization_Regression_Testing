diff --git a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/SessionTest.java b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/SessionTest.java
index 80326da..924e21f 100644
--- a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/SessionTest.java
+++ b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/SessionTest.java
@@ -43,9 +43,11 @@ import javax.jcr.lock.LockException;
 public class SessionTest extends AbstractJCRTest {
 
     /**
-     * Tries to move a node using <code>{@link javax.jcr.Session#move(String src, String dest)}
-     * </code> to a location where a node already exists with
-     * same name.<br/> <br/> Prerequisites:
+     * Tries to move a node using {@link javax.jcr.Session#move(String src, String dest)}
+     * to a location where a node already exists with
+     * same name.
+     * <p>
+     * Prerequisites:
      * <ul>
      * <li><code>javax.jcr.tck.SessionTest.testMoveItemExistsException.nodetype2</code>
      * must contain name of a nodetype that does not allow same name sibling
@@ -53,7 +55,9 @@ public class SessionTest extends AbstractJCRTest {
      * <li><code>javax.jcr.tck.SessionTest.testMoveItemExistsException.nodetype3</code>
      * must contain name of a valid nodetype that can be added as a child of
      * <code>nodetype2</code></li>
-     * </ul> This should throw an <code>{@link javax.jcr.ItemExistsException}</code>.
+     * </ul>
+     * <p>
+     * This should throw an {@link javax.jcr.ItemExistsException}.
      */
     public void testMoveItemExistsException() throws RepositoryException {
         // get default workspace test root node using superuser session
@@ -83,9 +87,10 @@ public class SessionTest extends AbstractJCRTest {
     }
 
     /**
-     * Calls <code>{@link javax.jcr.Session#move(String src, String dest)}</code>
-     * with invalid destination path.<br/> <br/> Should throw
-     * <code{@link javax.jcr.PathNotFoundException}</code>.
+     * Calls {@link javax.jcr.Session#move(String src, String dest)}
+     * with invalid destination path.
+     * <p>
+     * Should throw a {@link javax.jcr.PathNotFoundException}.
      */
     public void testMovePathNotFoundExceptionDestInvalid() throws RepositoryException {
         // get default workspace test root node using superuser session
@@ -109,9 +114,10 @@ public class SessionTest extends AbstractJCRTest {
     }
 
     /**
-     * Calls <code>{@link javax.jcr.Session#move(String src, String dest)} with
-     * invalid source path.<br/> <br/> Should throw an <code>{@link
-     * javax.jcr.PathNotFoundException}.
+     * Calls {@link javax.jcr.Session#move(String src, String dest)} with
+     * invalid source path.
+     * <p>
+     * Should throw a {@link javax.jcr.PathNotFoundException}.
      */
     public void testMovePathNotFoundExceptionSrcInvalid() throws RepositoryException {
         // get default workspace test root node using superuser session
@@ -133,9 +139,10 @@ public class SessionTest extends AbstractJCRTest {
     }
 
     /**
-     * Calls <code>{@link javax.jcr.Session#move(String src, String dest)}
-     * </code> with a destination path that has an index postfixed.<br/>
-     * <br/> This should throw an <code>{@link javax.jcr.RepositoryException}</code>.
+     * Calls {@link javax.jcr.Session#move(String src, String dest)}
+     * with a destination path that has an index postfixed.
+     * <p>
+     * This should throw a {@link javax.jcr.RepositoryException}.
      */
     public void testMoveRepositoryException() throws RepositoryException {
         // get default workspace test root node using superuser session
@@ -162,10 +169,12 @@ public class SessionTest extends AbstractJCRTest {
     }
 
     /**
-     * Moves a node using <code>{@link javax.jcr.Session#move(String src, String dest)}
-     * </code>, afterwards it tries to only save the old parent node.<br>
-     * <br> This should throw <code>{@link javax.jcr.nodetype.ConstraintViolationException}</code>.
-     * <br/><br/>Prerequisites: <ul> <li><code>javax.jcr.tck.nodetype</code>
+     * Moves a node using {@link javax.jcr.Session#move(String src, String dest)},
+     * afterwards it tries to only save the old parent node.
+     * <p>
+     * This should throw {@link javax.jcr.nodetype.ConstraintViolationException}.
+     * <p>
+     * Prerequisites: <ul> <li><code>javax.jcr.tck.nodetype</code>
      * must accept children of same nodetype</li> </ul>
      */
     public void testMoveConstraintViolationExceptionSrc() throws RepositoryException {
@@ -196,10 +205,13 @@ public class SessionTest extends AbstractJCRTest {
     }
 
     /**
-     * Moves a node using <code>{@link javax.jcr.Session#move(String src, String dest)}
-     * </code>, afterwards it tries to only save the destination parent
-     * node.<br> <br> This should throw <code>{@link javax.jcr.nodetype.ConstraintViolationException}</code>.
-     * <br/><br/>Prerequisites: <ul> <li><code>javax.jcr.tck.nodetype</code>
+     * Moves a node using {@link javax.jcr.Session#move(String src, String dest)},
+     * afterwards it tries to only save the destination parent
+     * node.
+     * <p>
+     * This should throw a {@link javax.jcr.nodetype.ConstraintViolationException}.
+     * <p>
+     * Prerequisites: <ul> <li><code>javax.jcr.tck.nodetype</code>
      * must accept children of same nodetype</li> </ul>
      */
     public void testMoveConstraintViolationExceptionDest() throws RepositoryException {
@@ -230,9 +242,10 @@ public class SessionTest extends AbstractJCRTest {
     }
 
     /**
-     * Calls <code>{@link javax.jcr.Session#move(String src, String dest)} where
-     * the parent node of src is locked.<br/> <br/> Should throw a <code>{@link
-     * LockException} immediately or on save.
+     * Calls {@link javax.jcr.Session#move(String src, String dest)} where
+     * the parent node of src is locked.
+     * <p>
+     * Should throw a {@link LockException} immediately or on save.
      */
     public void testMoveLockException()
         throws NotExecutableException, RepositoryException {
@@ -284,10 +297,11 @@ public class SessionTest extends AbstractJCRTest {
     }
 
     /**
-     * Checks if <code>{@link javax.jcr.Session#move(String src, String dest)}
-     * </code> works properly. To verify if node has been moved properly
+     * Checks if {@link javax.jcr.Session#move(String src, String dest)}
+     * works properly. To verify if node has been moved properly
      * it uses a second session to retrieve the moved node.
-     * <br/><br/>Prerequisites: <ul> <li><code>javax.jcr.tck.nodetype</code>
+     * <p>
+     * Prerequisites: <ul> <li><code>javax.jcr.tck.nodetype</code>
      * must accept children of same nodetype</li> </ul>
      */
     public void testMoveNode() throws RepositoryException {
@@ -322,7 +336,9 @@ public class SessionTest extends AbstractJCRTest {
 
     /**
      * Checks if a newly created node gets properly saved using <code{@link
-     * javax.jcr.Session#save()}</code>.<br/> <br/> It creates a new node, saves
+     * javax.jcr.Session#save()}</code>.
+     * <p>
+     * It creates a new node, saves
      * it using <code>session.save()</code> then uses a different session to
      * verify if the node has been properly saved.
      */
@@ -348,10 +364,14 @@ public class SessionTest extends AbstractJCRTest {
 
     /**
      * Checks if a modified node gets properly saved using <code{@link
-     * javax.jcr.Session#save()}</code>.<br/> <br/> It creates a new node, saves
+     * javax.jcr.Session#save()}</code>.
+     * <p>
+     * It creates a new node, saves
      * it using <code>session.save()</code>, modifies the node by adding a child
      * node, saves again and finally verifies with a different session if
-     * changes have been stored properly.<br/> <br/> Prerequisites: <ul>
+     * changes have been stored properly.
+     * <p>
+     * Prerequisites: <ul>
      * <li><code>javax.jcr.tck.nodetype</code> must accept children of same
      * nodetype</li> </ul>
      */
@@ -386,7 +406,8 @@ public class SessionTest extends AbstractJCRTest {
 
     /**
      * Tries to create and save a node using {@link javax.jcr.Session#save()}
-     * with an mandatory property that is not set on saving time.<br/> <br/>
+     * with an mandatory property that is not set on saving time.
+     * <p>
      * Prerequisites: <ul> <li><code>javax.jcr.tck.SessionTest.testSaveContstraintViolationException.nodetype2</code>
      * must reference a nodetype that has one at least one property that is
      * mandatory but not autocreated</li> </ul>
@@ -409,11 +430,15 @@ public class SessionTest extends AbstractJCRTest {
 
     /**
      * Tries to save a node using {@link javax.jcr.Session#save()} that was
-     * already deleted by an other session.<br/> <br/> Procedure: <ul>
+     * already deleted by an other session.
+     * <p>
+     * Procedure: <ul>
      * <li>Creates a new node with session 1, saves it, adds a child node.</li>
      * <li>Access new node with session 2,deletes the node, saves it.</li>
      * <li>session 1 tries to save modifications .</li> </ul> This should throw
-     * an {@link javax.jcr.InvalidItemStateException}. <br/><br/>Prerequisites:
+     * an {@link javax.jcr.InvalidItemStateException}.
+     * <p>
+     * Prerequisites:
      * <ul> <li><code>javax.jcr.tck.nodetype</code> must accept children of same
      * nodetype</li> </ul>
      */
@@ -455,14 +480,17 @@ public class SessionTest extends AbstractJCRTest {
 
     /**
      * Checks if {@link javax.jcr.Session#refresh(boolean refresh)} works
-     * properly with <code>refresh</code> set to <code>false</code>.<br/> <br/>
+     * properly with <code>refresh</code> set to <code>false</code>.
+     * <p>
      * Procedure: <ul> <li>Creates two nodes with session 1</li> <li>Modifies
      * node 1 with session 1 by adding a child node</li> <li>Get node 2 with
      * session 2</li> <li>Modifies node 2 with session 2 by adding a child
      * node</li> <li>saves session 2 changes using {@link
      * javax.jcr.Session#save()}</li> <li>calls <code>Session.refresh(false)</code>
      * on session 1</li> </ul> Session 1 changes should be cleared and session 2
-     * changes should now be visible to session 1. <br/><br/>Prerequisites: <ul>
+     * changes should now be visible to session 1.
+     * <p>
+     * Prerequisites: <ul>
      * <li><code>javax.jcr.tck.nodetype</code> must accept children of same
      * nodetype</li> </ul>
      */
@@ -512,14 +540,17 @@ public class SessionTest extends AbstractJCRTest {
 
     /**
      * Checks if {@link javax.jcr.Session#refresh(boolean refresh)} works
-     * properly with <code>refresh</code> set to <code>true</code>.<br/> <br/>
+     * properly with <code>refresh</code> set to <code>true</code>.
+     * <p>
      * Procedure: <ul> <li>Creates two nodes with session 1</li> <li>Modifies
      * node 1 with session 1 by adding a child node</li> <li>Get node 2 with
      * session 2</li> <li>Modifies node 2 with session 2 by adding a child
      * node</li> <li>saves session 2 changes using {@link
      * javax.jcr.Session#save()}</li> <li>calls <code>Session.refresh(true)</code>
      * on session 1</li> </ul> Session 1 changes and session 2 changes now be
-     * visible to session 1. <br/><br/>Prerequisites: <ul>
+     * visible to session 1. 
+     * <p>
+     * Prerequisites: <ul>
      * <li><code>javax.jcr.tck.nodetype</code> must accept children of same
      * nodetype</li> </ul>
      */
@@ -569,7 +600,10 @@ public class SessionTest extends AbstractJCRTest {
 
     /**
      * Checks if {@link javax.jcr.Session#hasPendingChanges()}  works
-     * properly.<br/> <br/> Procedure:<br/> <ul> <li>Gets a session, checks
+     * properly.
+     * <p>
+     * Procedure:
+     * <ul> <li>Gets a session, checks
      * inital flag setting</li> <li>Adds a node, checks flag</li> <li>Saves on
      * session, checks flag</li> <li>Adds a property, checks flag</li> <li>Saves
      * on session, checks flag</li> <li>Adds a child node, checks flag</li>
