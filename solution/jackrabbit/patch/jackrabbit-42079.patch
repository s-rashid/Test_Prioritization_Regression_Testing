diff --git a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/AbstractConcurrencyTest.java b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/AbstractConcurrencyTest.java
index 1fe3747..809e6c0 100644
--- a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/AbstractConcurrencyTest.java
+++ b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/AbstractConcurrencyTest.java
@@ -21,6 +21,8 @@ import org.apache.jackrabbit.test.AbstractJCRTest;
 import javax.jcr.Session;
 import javax.jcr.Node;
 import javax.jcr.RepositoryException;
+import java.lang.reflect.Method;
+import java.lang.reflect.InvocationTargetException;
 
 /**
  * <code>AbstractConcurrencyTest</code> provides utility methods to run tests
@@ -37,22 +39,35 @@ public abstract class AbstractConcurrencyTest extends AbstractJCRTest {
      * @throws RepositoryException if an error occurs.
      */
     protected void runTask(Task task, int concurrency) throws RepositoryException {
-        Thread[] threads = new Thread[concurrency];
-        for (int i = 0; i < concurrency; i++) {
-            Session s = helper.getSuperuserSession();
-            Node test = s.getRootNode().addNode(testPath + "/node" + i);
-            s.save();
-            threads[i] = new Thread(new Executor(s, test, task));
-        }
-        for (int i = 0; i < threads.length; i++) {
-            threads[i].start();
-        }
-        for (int i = 0; i < threads.length; i++) {
-            try {
-                threads[i].join();
-            } catch (InterruptedException e) {
+        runTasks(new Task[]{task}, concurrency,
+                // run for at most one year ;)
+                getOneYearAhead());
+    }
+
+    /**
+     * Runs each of the tasks with the given concurrency and creates an
+     * individual test node for each thread.
+     *
+     * @param tasks       the tasks to run.
+     * @param concurrency the concurrency.
+     * @param timeout     when System.currentTimeMillis() reaches timeout the
+     *                    threads executing the tasks should be interrupted.
+     *                    This indicates that a deadlock occured.
+     * @throws RepositoryException if an error occurs.
+     */
+    protected void runTasks(Task[] tasks, int concurrency, long timeout)
+            throws RepositoryException {
+        Executor[] executors = new Executor[concurrency * tasks.length];
+        for (int t = 0; t < tasks.length; t++) {
+            for (int i = 0; i < concurrency; i++) {
+                int id = t * concurrency + i;
+                Session s = helper.getSuperuserSession();
+                Node test = s.getRootNode().addNode(testPath + "/node" + id);
+                s.save();
+                executors[id] = new Executor(s, test, tasks[t]);
             }
         }
+        executeAll(executors, timeout);
     }
 
     /**
@@ -65,25 +80,92 @@ public abstract class AbstractConcurrencyTest extends AbstractJCRTest {
      */
     protected void runTask(Task task, int concurrency, String path)
             throws RepositoryException {
-        Thread[] threads = new Thread[concurrency];
+        Executor[] executors = new Executor[concurrency];
         for (int i = 0; i < concurrency; i++) {
             Session s = helper.getSuperuserSession();
             Node test = (Node) s.getItem(path);
             s.save();
-            threads[i] = new Thread(new Executor(s, test, task));
+            executors[i] = new Executor(s, test, task);
+        }
+        executeAll(executors, getOneYearAhead());
+    }
+
+    /**
+     * Executes all executors using individual threads.
+     *
+     * @param executors the executors.
+     * @param timeout time when running threads should be interrupted.
+     * @throws RepositoryException if one of the executors throws an exception.
+     */
+    private void executeAll(Executor[] executors, long timeout) throws RepositoryException {
+        Thread[] threads = new Thread[executors.length];
+        for (int i = 0; i < executors.length; i++) {
+            threads[i] = new Thread(executors[i]);
         }
         for (int i = 0; i < threads.length; i++) {
             threads[i].start();
         }
+        boolean stacksDumped = false;
         for (int i = 0; i < threads.length; i++) {
             try {
-                threads[i].join();
+                long wait = Math.max(timeout - System.currentTimeMillis(), 1);
+                threads[i].join(wait);
+                if (threads[i].isAlive()) {
+                    if (!stacksDumped) {
+                        dumpStacks(threads);
+                        stacksDumped = true;
+                    }
+                    threads[i].interrupt();
+                    // give the thread a couple of seconds, then call stop
+                    Thread.sleep(5 * 1000);
+                    if (threads[i].isAlive()) {
+                        threads[i].stop();
+                    }
+                }
             } catch (InterruptedException e) {
-                e.printStackTrace();
+                // ignore
+            }
+        }
+        for (int i = 0; i < executors.length; i++) {
+            if (executors[i].getException() != null) {
+                throw executors[i].getException();
             }
         }
     }
 
+    protected long getOneYearAhead() {
+        return System.currentTimeMillis() + 1000L * 60L * 60L * 24L * 30L * 12L;
+    }
+
+    /**
+     * If tests are run in a 1.5 JVM or higher the stack of the given threads
+     * are dumped to system out.
+     */
+    protected static void dumpStacks(Thread[] threads) {
+        try {
+            Method m = Thread.class.getMethod("getStackTrace", null);
+            for (int t = 0; t < threads.length; t++) {
+                StackTraceElement[] elements = (StackTraceElement[]) m.invoke(
+                        threads[t], null);
+                System.out.println(threads[t]);
+                for (int i = 0; i < elements.length; i++) {
+                    System.out.println("\tat " + elements[i]);
+                }
+                System.out.println();
+            }
+        } catch (NoSuchMethodException e) {
+            // not a 1.5 JVM
+        } catch (IllegalAccessException e) {
+            // ignore
+        } catch (InvocationTargetException e) {
+            // ignore
+        }
+    }
+
+    /**
+     * Task implementations must be thread safe! Multiple threads will call
+     * {@link #execute(Session, Node)} concurrently.
+     */
     public interface Task {
 
         public abstract void execute(Session session, Node test)
@@ -98,17 +180,23 @@ public abstract class AbstractConcurrencyTest extends AbstractJCRTest {
 
         protected final Task task;
 
+        protected RepositoryException exception;
+
         public Executor(Session session, Node test, Task task) {
             this.session = session;
             this.test = test;
             this.task = task;
         }
 
+        public RepositoryException getException() {
+            return exception;
+        }
+
         public void run() {
             try {
                 task.execute(session, test);
             } catch (RepositoryException e) {
-                e.printStackTrace();
+                exception = e;
             } finally {
                 session.logout();
             }
