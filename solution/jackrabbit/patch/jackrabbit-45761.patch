diff --git a/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/util/Text.java b/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/util/Text.java
index 412edd4..2394f6b 100644
--- a/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/util/Text.java
+++ b/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/util/Text.java
@@ -487,7 +487,7 @@ public class Text {
      * A search string like 'test?' will run into a ParseException
      * documented in http://issues.apache.org/jira/browse/JCR-1248
      * 
-     * @param string the string to encode
+     * @param s the string to encode
      * @return the escaped string
      */
     public static String escapeIllegalXpathSearchChars(String s) {
@@ -730,7 +730,7 @@ public class Text {
      *                                  variable is not found
      */
     public static String replaceVariables(Properties variables, String value,
-                                   boolean ignoreMissing)
+                                          boolean ignoreMissing)
             throws IllegalArgumentException {
         StringBuffer result = new StringBuffer();
 
@@ -764,4 +764,66 @@ public class Text {
         return result.toString();
     }
 
+    /**
+     * Generate a valid JSON string from the given <code>str</code>.
+     * 
+     * @param str A String
+     * @return JSON string surrounded by double quotes.
+     * @see <a href="http://tools.ietf.org/html/rfc4627">RFC 4627</a>
+     */
+    public static String getJSONString(String str) {
+        if (str == null || str.length() == 0) {
+            return "\"\"";
+        }
+
+        int len = str.length();
+        StringBuffer sb = new StringBuffer(len + 2);
+        // leading quote
+        sb.append('"');
+        // append passed string escaping characters as required
+        for (int i = 0; i < len; i++) {
+            char c = str.charAt(i);
+            switch (c) {
+                // reverse solidus and double quote
+                case '\\':
+                case '"':
+                    sb.append('\\').append(c);
+                    break;
+                // tab, line breaking chars and backspace
+                case '\b':
+                    sb.append("\\b");
+                    break;
+                case '\f':
+                    sb.append("\\f");
+                    break;
+                case '\n':
+                    sb.append("\\n");
+                    break;
+                case '\r':
+                    sb.append("\\r");
+                    break;
+                case '\t':
+                    sb.append("\\t");
+                    break;
+                // other control characters and 'unescaped'
+                default:
+                    if (c < 32) {
+                        // control characters except those already covered above.
+                        String uc = Integer.toHexString(c);
+                        sb.append("\\u");
+                        int uLen = uc.length();
+                        while (uLen++ < 4) {
+                            sb.append('0');
+                        }
+                        sb.append(uc);
+                    } else {
+                        // unescaped = %x20-21 / %x23-5B / %x5D-10FFFF
+                        sb.append(c);
+                    }
+            }
+        }
+        // trailing quote
+        sb.append('"');
+        return sb.toString();
+    }
 }
