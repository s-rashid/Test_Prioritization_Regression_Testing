diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/IndexingConfigurationImpl.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/IndexingConfigurationImpl.java
index f4b2bfa..65748e0 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/IndexingConfigurationImpl.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/IndexingConfigurationImpl.java
@@ -126,15 +126,16 @@ public class IndexingConfigurationImpl implements IndexingConfiguration {
             if (configNode.getNodeName().equals("index-rule")) {
                 IndexingRule element = new IndexingRule(configNode);
                 // register under node type and all its sub types
+                log.debug("Found rule '{}' for NodeType '{}'", element, element.getNodeTypeName());
                 for (int n = 0; n < ntNames.length; n++) {
-                    if (ntReg.getEffectiveNodeType(ntNames[n]).includesNodeType(
-                            element.getNodeTypeName())) {
+                    if (ntReg.getEffectiveNodeType(ntNames[n]).includesNodeType(element.getNodeTypeName())) {
                         List perNtConfig = (List) configElements.get(ntNames[n]);
                         if (perNtConfig == null) {
                             perNtConfig = new ArrayList();
                             configElements.put(ntNames[n], perNtConfig);
                         }
-                        perNtConfig.add(element);
+                        log.debug("Registering it for name '{}'", ntNames[n]);
+                        perNtConfig.add(new IndexingRule(element, ntNames[n]));
                     }
                 }
             } else if (configNode.getNodeName().equals("aggregate")) {
@@ -578,12 +579,12 @@ public class IndexingConfigurationImpl implements IndexingConfiguration {
         /**
          * Map of {@link PropertyConfig}. Key=Name of property.
          */
-        private final Map propConfigs = new HashMap();
+        private final Map propConfigs;
 
         /**
          * List of {@link NamePattern}s.
          */
-        private final List namePatterns = new ArrayList();
+        private final List namePatterns;
 
         /**
          * An expression based on a relative path.
@@ -596,6 +597,21 @@ public class IndexingConfigurationImpl implements IndexingConfiguration {
         private final float boost;
 
         /**
+         * Creates a new indexing rule base on an existing one, but for a
+         * different node type name.
+         *
+         * @param original the existing rule.
+         * @param nodeTypeName the node type name for the rule.
+         */
+        IndexingRule(IndexingRule original, Name nodeTypeName) {
+            this.nodeTypeName = nodeTypeName;
+            this.propConfigs = original.propConfigs;
+            this.namePatterns = original.namePatterns;
+            this.condition = original.condition;
+            this.boost = original.boost;
+        }
+
+        /**
          *
          * @param config the configuration for this rule.
          * @throws MalformedPathException if the condition expression is malformed.
@@ -607,6 +623,8 @@ public class IndexingConfigurationImpl implements IndexingConfiguration {
             this.nodeTypeName = getNodeTypeName(config);
             this.condition = getCondition(config);
             this.boost = getNodeBoost(config);
+            this.propConfigs = new HashMap();
+            this.namePatterns = new ArrayList();
             createPropertyConfigs(config, propConfigs, namePatterns);
         }
