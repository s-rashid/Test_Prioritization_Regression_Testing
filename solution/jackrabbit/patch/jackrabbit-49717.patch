diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/NodeStateMerger.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/NodeStateMerger.java
index f163041..4834db1 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/NodeStateMerger.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/NodeStateMerger.java
@@ -23,7 +23,6 @@ import org.apache.jackrabbit.spi.Name;
 
 import java.util.ArrayList;
 import java.util.HashSet;
-import java.util.Iterator;
 
 /**
  * Internal utility class used for merging concurrent changes that occurred
@@ -98,13 +97,10 @@ class NodeStateMerger {
                 // child node entries
                 if (!state.getChildNodeEntries().equals(
                         overlayedState.getChildNodeEntries())) {
-                    ArrayList added = new ArrayList();
-                    ArrayList removed = new ArrayList();
+                    ArrayList<ChildNodeEntry> added = new ArrayList<ChildNodeEntry>();
+                    ArrayList<ChildNodeEntry> removed = new ArrayList<ChildNodeEntry>();
 
-                    for (Iterator iter = state.getAddedChildNodeEntries().iterator();
-                         iter.hasNext();) {
-                        ChildNodeEntry cne =
-                                (ChildNodeEntry) iter.next();
+                    for (ChildNodeEntry cne : state.getAddedChildNodeEntries()) {
 
                         if (context.isAdded(cne.getId())) {
                             // a new child node entry has been added to this state;
@@ -124,10 +120,7 @@ class NodeStateMerger {
                         }
                     }
 
-                    for (Iterator iter = state.getRemovedChildNodeEntries().iterator();
-                         iter.hasNext();) {
-                        ChildNodeEntry cne =
-                                (ChildNodeEntry) iter.next();
+                    for (ChildNodeEntry cne : state.getRemovedChildNodeEntries()) {
                         if (context.isDeleted(cne.getId())) {
                             // a child node entry has been removed from this node state
                             removed.add(cne);
@@ -137,14 +130,10 @@ class NodeStateMerger {
                     // copy child node antries from other state and
                     // re-apply changes made on this state
                     state.setChildNodeEntries(overlayedState.getChildNodeEntries());
-                    for (Iterator iter = added.iterator(); iter.hasNext();) {
-                        ChildNodeEntry cne =
-                                (ChildNodeEntry) iter.next();
+                    for (ChildNodeEntry cne : added) {
                         state.addChildNodeEntry(cne.getName(), cne.getId());
                     }
-                    for (Iterator iter = removed.iterator(); iter.hasNext();) {
-                        ChildNodeEntry cne =
-                                (ChildNodeEntry) iter.next();
+                    for (ChildNodeEntry cne : removed) {
                         state.removeChildNodeEntry(cne.getId());
                     }
                 }
@@ -152,12 +141,10 @@ class NodeStateMerger {
                 // property names
                 if (!state.getPropertyNames().equals(
                         overlayedState.getPropertyNames())) {
-                    HashSet added = new HashSet();
-                    HashSet removed = new HashSet();
+                    HashSet<Name> added = new HashSet<Name>();
+                    HashSet<Name> removed = new HashSet<Name>();
 
-                    for (Iterator iter = state.getAddedPropertyNames().iterator();
-                         iter.hasNext();) {
-                        Name name = (Name) iter.next();
+                    for (Name name : state.getAddedPropertyNames()) {
                         PropertyId propId =
                                 new PropertyId(state.getNodeId(), name);
                         if (context.isAdded(propId)) {
@@ -172,9 +159,7 @@ class NodeStateMerger {
                             added.add(name);
                         }
                     }
-                    for (Iterator iter = state.getRemovedPropertyNames().iterator();
-                         iter.hasNext();) {
-                        Name name = (Name) iter.next();
+                    for (Name name : state.getRemovedPropertyNames()) {
                         PropertyId propId =
                                 new PropertyId(state.getNodeId(), name);
                         if (context.isDeleted(propId)) {
@@ -186,12 +171,10 @@ class NodeStateMerger {
                     // copy property names from other and
                     // re-apply changes made on this state
                     state.setPropertyNames(overlayedState.getPropertyNames());
-                    for (Iterator iter = added.iterator(); iter.hasNext();) {
-                        Name name = (Name) iter.next();
+                    for (Name name : added) {
                         state.addPropertyName(name);
                     }
-                    for (Iterator iter = removed.iterator(); iter.hasNext();) {
-                        Name name = (Name) iter.next();
+                    for (Name name : removed) {
                         state.removePropertyName(name);
                     }
                 }
@@ -206,6 +189,9 @@ class NodeStateMerger {
 
     //-----------------------------------------------------< inner interfaces >
 
+    /**
+     * The context of a modification.
+     */
     static interface MergeContext {
         boolean isAdded(ItemId id);
         boolean isDeleted(ItemId id);
