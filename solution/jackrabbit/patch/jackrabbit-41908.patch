diff --git a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ConcurrentQueryTest.java b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ConcurrentQueryTest.java
index 19e78b0..4eee0ff 100644
--- a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ConcurrentQueryTest.java
+++ b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/ConcurrentQueryTest.java
@@ -67,14 +67,13 @@ public class ConcurrentQueryTest extends AbstractJCRTest {
     }
 
     /**
-     * Writes 100 * {@link #getTestScale()} nodes in transactions of 5 nodes to
-     * the workspace while other threads query the workspace. Query results must
-     * always return a consistent view of the workspace, that is:<br/>
+     * Writes 1000 nodes in transactions of 5 nodes to the workspace while
+     * other threads query the workspace. Query results must always return
+     * a consistent view of the workspace, that is:<br/>
      * <code>result.numNodes % 5 == 0</code>
      */
     public void testConcurrentQueryWithWrite() throws Exception {
 
-        final int testScale = getTestScale();
         final List exceptions = Collections.synchronizedList(new ArrayList());
         List readers = new ArrayList();
         String query = "/jcr:root" + testRoot + "//*[@testprop = 'foo']";
@@ -88,7 +87,7 @@ public class ConcurrentQueryTest extends AbstractJCRTest {
                 try {
                     for (int i = 0; i < 20; i++) {
                         Node n = testRootNode.addNode("node" + i);
-                        for (int j = 0; j < testScale; j++) {
+                        for (int j = 0; j < 10; j++) {
                             Node n1 = n.addNode("node" + j);
                             for (int k = 0; k < 5; k++) {
                                 n1.addNode("node" + k).setProperty("testprop", "foo");
@@ -125,17 +124,17 @@ public class ConcurrentQueryTest extends AbstractJCRTest {
     }
 
     /**
-     * Deletes 100 * {@link #getTestScale()} nodes in transactions of 5 nodes
-     * while other threads query the workspace. Query results must always return
+     * Deletes 1000 nodes in transactions of 5 nodes while
+     * other threads query the workspace. Query results must always return
      * a consistent view of the workspace, that is:<br/>
      * <code>result.numNodes % 5 == 0</code>
      */
     public void testConcurrentQueryWithDeletes() throws Exception {
-        final int testScale = getTestScale();
-        // create 100 * getTestScale() nodes
+
+        // create 1000 nodes
         for (int i = 0; i < 20; i++) {
             Node n = testRootNode.addNode("node" + i);
-            for (int j = 0; j < testScale; j++) {
+            for (int j = 0; j < 10; j++) {
                 Node n1 = n.addNode("node" + j);
                 for (int k = 0; k < 5; k++) {
                     n1.addNode("node" + k).setProperty("testprop", "foo");
@@ -157,7 +156,7 @@ public class ConcurrentQueryTest extends AbstractJCRTest {
                 try {
                     for (int i = 0; i < 20; i++) {
                         Node n = testRootNode.getNode("node" + i);
-                        for (int j = 0; j < testScale; j++) {
+                        for (int j = 0; j < 10; j++) {
                             Node n1 = n.getNode("node" + j);
                             for (int k = 0; k < 5; k++) {
                                 n1.getNode("node" + k).remove();
