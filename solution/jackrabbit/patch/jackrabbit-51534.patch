diff --git a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/fs/AbstractFileSystemTest.java b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/fs/AbstractFileSystemTest.java
index 19fbeff..7be7a59 100644
--- a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/fs/AbstractFileSystemTest.java
+++ b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/fs/AbstractFileSystemTest.java
@@ -23,6 +23,9 @@ import java.util.Arrays;
 
 import junit.framework.TestCase;
 
+/**
+ * Tests a file system implementation.
+ */
 public abstract class AbstractFileSystemTest extends TestCase {
 
     private FileSystem fs;
@@ -69,68 +72,6 @@ public abstract class AbstractFileSystemTest extends TestCase {
         assertEquals(3, fs.length("/folder/file"));
         verifyStreamInput(fs.getInputStream("/folder/file"), sampleBytes);
 
-        // Copy the file
-        fs.copy("/folder/file", "/folder/file2");
-        assertTrue(fs.exists("/folder/file"));
-        assertFalse(fs.isFolder("/folder/file"));
-        assertTrue(fs.isFile("/folder/file"));
-        assertTrue(fs.exists("/folder/file2"));
-        assertFalse(fs.isFolder("/folder/file2"));
-        assertTrue(fs.isFile("/folder/file2"));
-        list = fs.list("/folder");
-        Arrays.sort(list);
-        assertEquals(2, list.length);
-        assertEquals("file", list[0]);
-        assertEquals("file2", list[1]);
-        assertEquals(3, fs.length("/folder/file2"));
-        verifyStreamInput(fs.getInputStream("/folder/file2"), sampleBytes);
-
-        // Delete the copy
-        fs.deleteFile("/folder/file2");
-        assertFalse(fs.exists("/folder/file2"));
-        assertFalse(fs.isFolder("/folder/file2"));
-        assertFalse(fs.isFile("/folder/file2"));
-        list = fs.list("/folder");
-        assertEquals(1, list.length);
-        assertEquals("file", list[0]);
-
-        // Move the file
-        fs.move("/folder/file", "/folder/file2");
-        assertFalse(fs.exists("/folder/file"));
-        assertFalse(fs.isFolder("/folder/file"));
-        assertFalse(fs.isFile("/folder/file"));
-        assertTrue(fs.exists("/folder/file2"));
-        assertFalse(fs.isFolder("/folder/file2"));
-        assertTrue(fs.isFile("/folder/file2"));
-        list = fs.list("/folder");
-        assertEquals(1, list.length);
-        assertEquals("file2", list[0]);
-        assertEquals(3, fs.length("/folder/file2"));
-        verifyStreamInput(fs.getInputStream("/folder/file2"), sampleBytes);
-
-        // Move the folder
-        fs.move("/folder", "/folder2");
-        assertFalse(fs.exists("/folder"));
-        assertFalse(fs.isFolder("/folder"));
-        assertFalse(fs.isFile("/folder"));
-        assertTrue(fs.exists("/folder2"));
-        assertTrue(fs.isFolder("/folder2"));
-        assertFalse(fs.isFile("/folder2"));
-        assertFalse(fs.exists("/folder/file2"));
-        assertFalse(fs.isFolder("/folder/file2"));
-        assertFalse(fs.isFile("/folder/file2"));
-        assertTrue(fs.exists("/folder2/file2"));
-        assertFalse(fs.isFolder("/folder2/file2"));
-        assertTrue(fs.isFile("/folder2/file2"));
-        list = fs.list("/");
-        assertEquals(1, list.length);
-        assertEquals("folder2", list[0]);
-        list = fs.list("/folder2");
-        assertEquals(1, list.length);
-        assertEquals("file2", list[0]);
-        assertEquals(3, fs.length("/folder2/file2"));
-        verifyStreamInput(fs.getInputStream("/folder2/file2"), sampleBytes);
-
         // Create a subfolder
         fs.createFolder("/folder2/subfolder");
         assertTrue(fs.exists("/folder2/subfolder"));
@@ -149,7 +90,7 @@ public abstract class AbstractFileSystemTest extends TestCase {
         assertEquals(1, list.length);
         assertEquals("subfolder", list[0]);
 
-        // Try to create a file coliding with an exisiting folder
+        // Try to create a file colliding with an existing folder
         try {
             createFile("/folder2/subfolder", sampleBytes);
             fail("FileSystemException expected");
@@ -185,9 +126,6 @@ public abstract class AbstractFileSystemTest extends TestCase {
         Thread.sleep(100);
         createFile("/file2", sampleBytes);
         assertTrue(fs.lastModified("/file1") <= fs.lastModified("/file2"));
-        Thread.sleep(100);
-        fs.touch("/file1");
-        assertTrue(fs.lastModified("/file1") >= fs.lastModified("/file2"));
 
         // Try to create a file inside a nonexistent folder
         try {
@@ -211,61 +149,6 @@ public abstract class AbstractFileSystemTest extends TestCase {
         assertEquals("subfolder", list[0]);
     }
 
-    public void testMoveFile_destFolderDoesNotExist() throws Exception {
-        // Create a folder with a file
-        fs.createFolder("/folder");
-        createFile("/folder/file", sampleBytes);
-
-        // Check that the destination folder and file do not exist
-        assertFalse(fs.exists("/folder2"));
-        assertFalse(fs.exists("/folder2/file"));
-
-        // Move the file into a non-existent directory
-        fs.move("/folder/file", "/folder2/file");
-
-        // Check that the file has been moved
-        assertFalse(fs.exists("/folder/file"));
-        assertFalse(fs.isFolder("/folder/file"));
-        assertFalse(fs.isFile("/folder/file"));
-        assertTrue(fs.exists("/folder2/file"));
-        assertFalse(fs.isFolder("/folder2/file"));
-        assertTrue(fs.isFile("/folder2/file"));
-
-        // Check that folder2 has been silently created
-        assertTrue(fs.exists("/folder2"));
-        assertTrue(fs.isFolder("/folder2"));
-        assertFalse(fs.isFile("/folder2"));
-    }
-    
-    public void testMoveFolder_destFolderDoesNotExist() throws Exception {
-        // Create a folder with a file
-        fs.createFolder("/folder");
-        createFile("/folder/file", sampleBytes);
-        // Check that the destination folder and file do not exist
-        assertFalse(fs.exists("/folder2"));
-        assertFalse(fs.exists("/folder2/folder3"));
-        assertFalse(fs.exists("/folder2/folder3/file"));
-
-        // Move the folder into a non-existent directory
-        fs.move("/folder", "/folder2/folder3");
-
-        // Assert
-        assertFalse(fs.exists("/folder"));
-        assertFalse(fs.exists("/folder/file"));
-        
-        assertTrue(fs.exists("/folder2"));
-        assertTrue(fs.isFolder("/folder2"));
-        assertFalse(fs.isFile("/folder2"));
-
-        assertTrue(fs.exists("/folder2/folder3"));
-        assertTrue(fs.isFolder("/folder2/folder3"));
-        assertFalse(fs.isFile("/folder2/folder3"));
-
-        assertTrue(fs.exists("/folder2/folder3/file"));
-        assertFalse(fs.isFolder("/folder2/folder3/file"));
-        assertTrue(fs.isFile("/folder2/folder3/file"));
-    }
-
     private void verifyStreamInput(
             InputStream inputStream, byte[] expectedBytes) throws IOException {
         byte[] resultBytes = new byte[3];
