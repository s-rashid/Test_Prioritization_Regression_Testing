diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/constraint/NodeLocalNameOperand.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/constraint/NodeLocalNameOperand.java
index f472b45..9f1f477 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/constraint/NodeLocalNameOperand.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/constraint/NodeLocalNameOperand.java
@@ -16,13 +16,10 @@
  */
 package org.apache.jackrabbit.core.query.lucene.constraint;
 
-import java.io.IOException;
-
 import javax.jcr.RepositoryException;
 import javax.jcr.Value;
 
 import org.apache.jackrabbit.core.query.lucene.ScoreNode;
-import org.apache.jackrabbit.core.query.lucene.Util;
 import org.apache.jackrabbit.core.SessionImpl;
 import org.apache.jackrabbit.util.Text;
 
@@ -38,17 +35,14 @@ public class NodeLocalNameOperand extends DynamicOperand {
      * @param sn      the score node.
      * @param context the evaluation context.
      * @return the local node name.
-     * @throws IOException if an error occurs while reading the local name.
+     * @throws RepositoryException if an error occurs while reading the local
+     *                             name.
      */
     public Value[] getValues(ScoreNode sn, EvaluationContext context)
-            throws IOException {
-        try {
-            SessionImpl session = context.getSession();
-            String name = session.getNodeById(sn.getNodeId()).getName();
-            return new Value[]{session.getValueFactory().createValue(
-                    Text.getLocalName(name))};
-        } catch (RepositoryException e) {
-            throw Util.createIOException(e);
-        }
+            throws RepositoryException {
+        SessionImpl session = context.getSession();
+        String name = session.getNodeById(sn.getNodeId()).getName();
+        return new Value[]{session.getValueFactory().createValue(
+                Text.getLocalName(name))};
     }
 }
