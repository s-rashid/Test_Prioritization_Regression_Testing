diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/constraint/PropertyValueOperand.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/constraint/PropertyValueOperand.java
index 124bd96..97d5a78 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/constraint/PropertyValueOperand.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/constraint/PropertyValueOperand.java
@@ -16,8 +16,6 @@
  */
 package org.apache.jackrabbit.core.query.lucene.constraint;
 
-import java.io.IOException;
-
 import javax.jcr.Value;
 import javax.jcr.Property;
 import javax.jcr.Node;
@@ -26,7 +24,6 @@ import javax.jcr.RepositoryException;
 
 import org.apache.jackrabbit.spi.commons.query.qom.PropertyValueImpl;
 import org.apache.jackrabbit.core.query.lucene.ScoreNode;
-import org.apache.jackrabbit.core.query.lucene.Util;
 import org.apache.jackrabbit.core.state.ItemStateManager;
 import org.apache.jackrabbit.core.state.PropertyState;
 import org.apache.jackrabbit.core.state.ItemStateException;
@@ -61,11 +58,11 @@ public class PropertyValueOperand extends DynamicOperand {
      * @param sn the current score node.
      * @param context the evaluation context.
      * @return the property state or <code>null</code>.
-     * @throws IOException if an error occurs while reading.
+     * @throws RepositoryException if an error occurs while reading.
      */
     public final PropertyState getPropertyState(ScoreNode sn,
-                                          EvaluationContext context)
-            throws IOException {
+                                                EvaluationContext context)
+            throws RepositoryException {
         ItemStateManager ism = context.getItemStateManager();
         PropertyId propId = new PropertyId(sn.getNodeId(), operand.getPropertyQName());
         try {
@@ -73,7 +70,7 @@ public class PropertyValueOperand extends DynamicOperand {
         } catch (NoSuchItemStateException e) {
             return null;
         } catch (ItemStateException e) {
-            throw Util.createIOException(e);
+            throw new RepositoryException(e);
         }
     }
 
@@ -84,19 +81,17 @@ public class PropertyValueOperand extends DynamicOperand {
      * @param sn the current score node.
      * @param context the evaluation context.
      * @return the property or <code>null</code>.
-     * @throws IOException if an error occurs while reading.
+     * @throws RepositoryException if an error occurs while reading.
      */
     public final Property getProperty(ScoreNode sn,
                                       EvaluationContext context)
-            throws IOException {
+            throws RepositoryException {
         SessionImpl session = context.getSession();
         try {
             Node n = session.getNodeById(sn.getNodeId());
             return n.getProperty(operand.getPropertyName());
         } catch (PathNotFoundException e) {
             return null;
-        } catch (RepositoryException e) {
-            throw Util.createIOException(e);
         }
     }
 
@@ -104,19 +99,15 @@ public class PropertyValueOperand extends DynamicOperand {
      * {@inheritDoc}
      */
     public Value[] getValues(ScoreNode sn, EvaluationContext context)
-            throws IOException {
+            throws RepositoryException {
         Property prop = getProperty(sn, context);
         if (prop == null) {
             return EMPTY;
         } else {
-            try {
-                if (prop.getDefinition().isMultiple()) {
-                    return prop.getValues();
-                } else {
-                    return new Value[]{prop.getValue()};
-                }
-            } catch (RepositoryException e) {
-                throw Util.createIOException(e);
+            if (prop.getDefinition().isMultiple()) {
+                return prop.getValues();
+            } else {
+                return new Value[]{prop.getValue()};
             }
         }
     }
