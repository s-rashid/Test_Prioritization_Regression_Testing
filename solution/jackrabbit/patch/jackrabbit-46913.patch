diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/ScoreNode.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/ScoreNode.java
index f48f056..315fbff 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/ScoreNode.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/ScoreNode.java
@@ -16,13 +16,18 @@
  */
 package org.apache.jackrabbit.core.query.lucene;
 
+import java.io.IOException;
+
 import org.apache.jackrabbit.core.NodeId;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.Term;
+import org.apache.lucene.index.TermDocs;
 
 /**
  * <code>ScoreNode</code> implements a simple container which holds a mapping
  * of {@link NodeId} to a score value.
  */
-final class ScoreNode {
+public final class ScoreNode {
 
     /**
      * The id of a node.
@@ -35,14 +40,32 @@ final class ScoreNode {
     private final float score;
 
     /**
+     * The lucene document number for this score node. Set to <code>-1</code> if
+     * unknown.
+     */
+    private final int doc;
+
+    /**
      * Creates a new <code>ScoreNode</code>.
      *
      * @param id    the node id.
      * @param score the score value.
      */
-    ScoreNode(NodeId id, float score) {
+    public ScoreNode(NodeId id, float score) {
+        this(id, score, -1);
+    }
+
+    /**
+     * Creates a new <code>ScoreNode</code>.
+     *
+     * @param id    the node id.
+     * @param score the score value.
+     * @param doc   the document number.
+     */
+    public ScoreNode(NodeId id, float score, int doc) {
         this.id = id;
         this.score = score;
+        this.doc = doc;
     }
 
     /**
@@ -58,4 +81,42 @@ final class ScoreNode {
     public float getScore() {
         return score;
     }
+
+    /**
+     * Returns the document number for this score node.
+     *
+     * @param reader the current index reader to look up the document if
+     *               needed.
+     * @return the document number.
+     * @throws IOException if an error occurs while reading from the index or
+     *                     the node is not present in the index.
+     */
+    public int getDoc(IndexReader reader) throws IOException {
+        if (doc == -1) {
+            TermDocs docs = reader.termDocs(new Term(FieldNames.UUID, id.toString()));
+            try {
+                if (docs.next()) {
+                    return docs.doc();
+                } else {
+                    throw new IOException("Node with id " + id + " not found in index");
+                }
+            } finally {
+                docs.close();
+            }
+        } else {
+            return doc;
+        }
+    }
+
+    public String toString() {
+        StringBuffer sb = new StringBuffer(id.toString());
+        sb.append("(");
+        if (doc != -1) {
+            sb.append(doc);
+        } else {
+            sb.append("?");
+        }
+        sb.append(")");
+        return sb.toString();
+    }
 }
