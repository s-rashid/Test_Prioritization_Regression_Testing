diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/IndexFormatVersion.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/IndexFormatVersion.java
index 7724743..c4791c8 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/IndexFormatVersion.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/IndexFormatVersion.java
@@ -17,12 +17,8 @@
 package org.apache.jackrabbit.core.query.lucene;
 
 import java.util.Collection;
-import java.io.IOException;
 
 import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.TermPositions;
-import org.apache.lucene.index.Term;
-import org.apache.lucene.index.TermEnum;
 
 /**
  * This class indicates the lucene index format that is used.
@@ -34,8 +30,9 @@ import org.apache.lucene.index.TermEnum;
  * adds a <code>PROPERTIES_SET</code> field which contains all property names of
  * a node. This speeds up queries that check the existence of a property.</li>
  * <li><b>Version 3</b> is the index format introduced with Jackrabbit 1.5.x. It
- * adds support for length queries using the newly added
- * <code>PROPERTY_LENGTHS</code> field. Furthermore a Payload is added to
+ * adds support for length and local name queries using the newly added
+ * fields <code>PROPERTY_LENGTHS</code>, <code>LOCAL_NAME</code> and
+ * <code>NAMESPACE_URI</code>. Furthermore a Payload is added to
  * <code>PROPERTIES</code> fields to indicate the property type.</li>
  * </ul>
  * Please note that existing indexes are not automatically upgraded to a newer
@@ -92,11 +89,10 @@ public class IndexFormatVersion {
      * @return the index format version of the index used by the given
      * index reader.
      */
-    public static IndexFormatVersion getVersion(IndexReader indexReader)
-            throws IOException {
+    public static IndexFormatVersion getVersion(IndexReader indexReader) {
         Collection fields = indexReader.getFieldNames(
                 IndexReader.FieldOption.ALL);
-        if (hasPayloads(indexReader) || indexReader.numDocs() == 0) {
+        if (fields.contains(FieldNames.LOCAL_NAME) || indexReader.numDocs() == 0) {
             return IndexFormatVersion.V3;
         } else if (fields.contains(FieldNames.PROPERTIES_SET)) {
             return IndexFormatVersion.V2;
@@ -104,32 +100,4 @@ public class IndexFormatVersion {
             return IndexFormatVersion.V1;
         }
     }
-
-    /**
-     * @param reader the index reader.
-     * @return <code>true</code> if the {@link FieldNames#PROPERTIES} fields
-     *         contain payloads; <code>false</code> otherwise.
-     * @throws IOException if an error occurs while reading from the index.
-     */
-    public static boolean hasPayloads(IndexReader reader) throws IOException {
-        TermPositions tp = reader.termPositions();
-        try {
-            TermEnum terms = reader.terms(
-                    new Term(FieldNames.PROPERTIES, ""));
-            try {
-                do {
-                    tp.seek(terms);
-                    if (tp.next()) {
-                        tp.nextPosition();
-                        return tp.isPayloadAvailable();
-                    }
-                } while (terms.next() && terms.term().field() == FieldNames.PROPERTIES);
-            } finally {
-                terms.close();
-            }
-        } finally {
-            tp.close();
-        }
-        return false;
-    }
 }
