diff --git a/jackrabbit-core/src/test/java/org/apache/jackrabbit/api/jsr283/query/qom/NodeNameTest.java b/jackrabbit-core/src/test/java/org/apache/jackrabbit/api/jsr283/query/qom/NodeNameTest.java
index 87ea575..556d26c 100644
--- a/jackrabbit-core/src/test/java/org/apache/jackrabbit/api/jsr283/query/qom/NodeNameTest.java
+++ b/jackrabbit-core/src/test/java/org/apache/jackrabbit/api/jsr283/query/qom/NodeNameTest.java
@@ -22,6 +22,9 @@ import javax.jcr.Node;
 import javax.jcr.PropertyType;
 import javax.jcr.query.Query;
 import javax.jcr.query.InvalidQueryException;
+
+import org.apache.jackrabbit.spi.commons.query.qom.Operator;
+
 import java.util.Calendar;
 
 /**
@@ -45,14 +48,14 @@ public class NodeNameTest extends AbstractQOMTest {
 
     public void testStringLiteral() throws RepositoryException {
         Value literal = superuser.getValueFactory().createValue(nodeName1);
-        Query q = createQuery(JCR_OPERATOR_EQUAL_TO, literal);
+        Query q = createQuery(Operator.EQ, literal);
         checkResult(q.execute(), new Node[]{node1});
     }
 
     public void testStringLiteralInvalidName() throws RepositoryException {
         Value literal = superuser.getValueFactory().createValue("[" + nodeName1);
         try {
-            createQuery(JCR_OPERATOR_EQUAL_TO, literal).execute();
+            createQuery(Operator.EQ, literal).execute();
             fail("NodeName comparison with STRING that cannot be converted to NAME must fail with InvalidQueryException");
         } catch (InvalidQueryException e) {
             // expected
@@ -62,14 +65,14 @@ public class NodeNameTest extends AbstractQOMTest {
     public void testBinaryLiteral() throws RepositoryException {
         Value literal = superuser.getValueFactory().createValue(
                 nodeName1, PropertyType.BINARY);
-        Query q = createQuery(JCR_OPERATOR_EQUAL_TO, literal);
+        Query q = createQuery(Operator.EQ, literal);
         checkResult(q.execute(), new Node[]{node1});
     }
 
     public void testDateLiteral() throws RepositoryException {
         Value literal = superuser.getValueFactory().createValue(Calendar.getInstance());
         try {
-            createQuery(JCR_OPERATOR_EQUAL_TO, literal).execute();
+            createQuery(Operator.EQ, literal).execute();
             fail("NodeName comparison with DATE must fail with InvalidQueryException");
         } catch (InvalidQueryException e) {
             // expected
@@ -79,7 +82,7 @@ public class NodeNameTest extends AbstractQOMTest {
     public void testDoubleLiteral() throws RepositoryException {
         Value literal = superuser.getValueFactory().createValue(Math.PI);
         try {
-            createQuery(JCR_OPERATOR_EQUAL_TO, literal).execute();
+            createQuery(Operator.EQ, literal).execute();
             fail("NodeName comparison with DOUBLE must fail with InvalidQueryException");
         } catch (InvalidQueryException e) {
             // expected
@@ -93,7 +96,7 @@ public class NodeNameTest extends AbstractQOMTest {
     public void testLongLiteral() throws RepositoryException {
         Value literal = superuser.getValueFactory().createValue(283);
         try {
-            createQuery(JCR_OPERATOR_EQUAL_TO, literal).execute();
+            createQuery(Operator.EQ, literal).execute();
             fail("NodeName comparison with LONG must fail with InvalidQueryException");
         } catch (InvalidQueryException e) {
             // expected
@@ -103,7 +106,7 @@ public class NodeNameTest extends AbstractQOMTest {
     public void testBooleanLiteral() throws RepositoryException {
         Value literal = superuser.getValueFactory().createValue(true);
         try {
-            createQuery(JCR_OPERATOR_EQUAL_TO, literal).execute();
+            createQuery(Operator.EQ, literal).execute();
             fail("NodeName comparison with BOOLEAN must fail with InvalidQueryException");
         } catch (InvalidQueryException e) {
             // expected
@@ -113,20 +116,20 @@ public class NodeNameTest extends AbstractQOMTest {
     public void testNameLiteral() throws RepositoryException {
         Value literal = superuser.getValueFactory().createValue(
                 nodeName1, PropertyType.NAME);
-        Query q = createQuery(JCR_OPERATOR_EQUAL_TO, literal);
+        Query q = createQuery(Operator.EQ, literal);
         checkResult(q.execute(), new Node[]{node1});
     }
 
     public void testPathLiteral() throws RepositoryException {
         Value literal = superuser.getValueFactory().createValue(
                 nodeName1, PropertyType.PATH);
-        Query q = createQuery(JCR_OPERATOR_EQUAL_TO, literal);
+        Query q = createQuery(Operator.EQ, literal);
         checkResult(q.execute(), new Node[]{node1});
 
         literal = superuser.getValueFactory().createValue(
                 node1.getPath(), PropertyType.PATH);
         try {
-            createQuery(JCR_OPERATOR_EQUAL_TO, literal).execute();
+            createQuery(Operator.EQ, literal).execute();
             fail("NodeName comparison with absolute PATH must fail with InvalidQueryException");
         } catch (InvalidQueryException e) {
             // expected
@@ -135,7 +138,7 @@ public class NodeNameTest extends AbstractQOMTest {
         literal = superuser.getValueFactory().createValue(
                 nodeName1 + "/" + nodeName1, PropertyType.PATH);
         try {
-            createQuery(JCR_OPERATOR_EQUAL_TO, literal).execute();
+            createQuery(Operator.EQ, literal).execute();
             fail("NodeName comparison with PATH length >1 must fail with InvalidQueryException");
         } catch (InvalidQueryException e) {
             // expected
@@ -149,7 +152,7 @@ public class NodeNameTest extends AbstractQOMTest {
         node1.save();
         Value literal = superuser.getValueFactory().createValue(node1);
         try {
-            createQuery(JCR_OPERATOR_EQUAL_TO, literal).execute();
+            createQuery(Operator.EQ, literal).execute();
             fail("NodeName comparison with REFERENCE must fail with InvalidQueryException");
         } catch (InvalidQueryException e) {
             // expected
@@ -174,16 +177,16 @@ public class NodeNameTest extends AbstractQOMTest {
     }
 
     public void testEqualTo() throws RepositoryException {
-        checkOperator(JCR_OPERATOR_EQUAL_TO, false, true, false);
+        checkOperator(Operator.EQ, false, true, false);
     }
 
     public void testNotEqualTo() throws RepositoryException {
-        checkOperator(JCR_OPERATOR_NOT_EQUAL_TO, true, false, true);
+        checkOperator(Operator.NE, true, false, true);
     }
 
     //------------------------------< helper >----------------------------------
 
-    private void checkOperator(String operator,
+    private void checkOperator(Operator operator,
                                boolean matchesLesser,
                                boolean matchesEqual,
                                boolean matchesGreater)
@@ -194,7 +197,7 @@ public class NodeNameTest extends AbstractQOMTest {
     }
 
     private void checkOperatorSingleLiteral(String literal,
-                                            String operator,
+                                            Operator operator,
                                             boolean matches)
             throws RepositoryException {
         Value value = superuser.getValueFactory().createValue(literal);
@@ -214,14 +217,14 @@ public class NodeNameTest extends AbstractQOMTest {
         return tmp.toString();
     }
 
-    private Query createQuery(String operator, Value literal) throws RepositoryException {
+    private Query createQuery(Operator operator, Value literal) throws RepositoryException {
         return qomFactory.createQuery(
                 qomFactory.selector(testNodeType, "s"),
                 qomFactory.and(
                         qomFactory.childNode("s", testRoot),
-                        qomFactory.comparison(
+                        operator.comparison(
+                                qomFactory,
                                 qomFactory.nodeName("s"),
-                                operator,
                                 qomFactory.literal(literal)
                         )
                 ), null, null);
