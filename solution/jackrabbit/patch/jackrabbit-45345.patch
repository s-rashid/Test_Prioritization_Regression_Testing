diff --git a/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/state/TransientItemStateManager.java b/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/state/TransientItemStateManager.java
index 704de55..705b01a 100644
--- a/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/state/TransientItemStateManager.java
+++ b/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/state/TransientItemStateManager.java
@@ -16,19 +16,26 @@
  */
 package org.apache.jackrabbit.jcr2spi.state;
 
-import org.apache.jackrabbit.jcr2spi.operation.Operation;
+import org.apache.commons.collections.iterators.IteratorChain;
+import org.apache.jackrabbit.jcr2spi.hierarchy.HierarchyEntry;
 import org.apache.jackrabbit.jcr2spi.hierarchy.NodeEntry;
+import org.apache.jackrabbit.jcr2spi.hierarchy.PropertyEntry;
+import org.apache.jackrabbit.jcr2spi.operation.Operation;
 import org.apache.jackrabbit.spi.Name;
 import org.apache.jackrabbit.spi.QNodeDefinition;
 import org.apache.jackrabbit.spi.QPropertyDefinition;
 import org.apache.jackrabbit.spi.QValue;
-import org.slf4j.LoggerFactory;
 import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
+import javax.jcr.InvalidItemStateException;
 import javax.jcr.ItemExistsException;
 import javax.jcr.RepositoryException;
 import javax.jcr.nodetype.ConstraintViolationException;
+import java.util.Collection;
 import java.util.Iterator;
+import java.util.LinkedHashSet;
+import java.util.Set;
 
 /**
  * <code>TransientItemStateManager</code> adds support for transient changes on
@@ -47,23 +54,40 @@ public class TransientItemStateManager implements ItemStateCreationListener {
     private static final Logger log = LoggerFactory.getLogger(TransientItemStateManager.class);
 
     /**
-     * The change log which keeps track of changes and maintains hard references
-     * to changed item states.
+     * Added states
+     */
+    private final Set addedStates = new LinkedHashSet();
+
+    /**
+     * Modified states
+     */
+    private final Set modifiedStates = new LinkedHashSet();
+
+    /**
+     * Removed states
+     */
+    private final Set removedStates = new LinkedHashSet();
+    /**
+     * Stale states
+     */
+    private final Set staleStates = new LinkedHashSet();
+
+    /**
+     * Set of operations
      */
-    private final ChangeLog changeLog;
+    private Set operations = new LinkedHashSet();
 
     /**
      *
      */
     TransientItemStateManager() {
-        this.changeLog = new ChangeLog(null);
     }
 
     /**
      * @return the operations that have been recorded until now.
      */
     Iterator getOperations() {
-        return changeLog.getOperations();
+        return operations.iterator();
     }
 
     /**
@@ -73,14 +97,121 @@ public class TransientItemStateManager implements ItemStateCreationListener {
      * @param operation
      */
     void addOperation(Operation operation) {
-        changeLog.addOperation(operation);
+        operations.add(operation);
     }
 
     /**
      * @return <code>true</code> if this transient ISM has pending changes.
      */
     boolean hasPendingChanges() {
-        return !changeLog.isEmpty();
+        return !operations.isEmpty();
+    }
+
+    /**
+     * Create the change log for the tree starting at <code>target</code>. This
+     * includes a  check if the ChangeLog to be created is totally 'self-contained'
+     * and independant; items within the scope of this update operation (i.e.
+     * below the target) must not have dependencies outside of this tree (e.g.
+     * moving a node requires that the target node including both old and new
+     * parents are saved).
+     *
+     * @param target
+     * @param throwOnStale Throws InvalidItemStateException if either the given
+     * <code>ItemState</code> or any of its decendants is stale and the flag is true.
+     * @return
+     * @throws InvalidItemStateException if a stale <code>ItemState</code> is
+     * encountered while traversing the state hierarchy. The <code>changeLog</code>
+     * might have been populated with some transient item states. A client should
+     * therefore not reuse the <code>changeLog</code> if such an exception is thrown.
+     * @throws RepositoryException if <code>state</code> is a new item state.
+     */
+    ChangeLog getChangeLog(ItemState target, boolean throwOnStale) throws InvalidItemStateException, ConstraintViolationException, RepositoryException {
+        // fail-fast test: check status of this item's state
+        if (target.getStatus() == Status.NEW) {
+            String msg = "Cannot save/revert an item with status NEW (" +target+ ").";
+            log.debug(msg);
+            throw new RepositoryException(msg);
+        }
+        if (throwOnStale && Status.isStale(target.getStatus())) {
+            String msg =  "Attempt to save/revert an item, that has been externally modified (" +target+ ").";
+            log.debug(msg);
+            throw new InvalidItemStateException(msg);
+        }
+
+        Set ops = new LinkedHashSet();
+        Set affectedStates = new LinkedHashSet();
+
+        HierarchyEntry he = target.getHierarchyEntry();
+        if (he.getParent() == null) {
+            // the root entry -> the complete change log can be used for
+            // simplicity. collecting ops, states can be omitted.
+            if (throwOnStale && !staleStates.isEmpty()) {
+                String msg = "Cannot save changes: States has been modified externally.";
+                log.debug(msg);
+                throw new InvalidItemStateException(msg);
+            } else {
+                affectedStates.addAll(staleStates);
+            }
+            ops.addAll(operations);
+            affectedStates.addAll(addedStates);
+            affectedStates.addAll(modifiedStates);
+            affectedStates.addAll(removedStates);
+        } else {
+            // not root entry:
+            // - check if there is a stale state in the scope (save only)
+            if (throwOnStale) {
+                for (Iterator it = staleStates.iterator(); it.hasNext();) {
+                    ItemState state = (ItemState) it.next();
+                    if (containedInTree(target, state)) {
+                        String msg = "Cannot save changes: States has been modified externally.";
+                        log.debug(msg);
+                        throw new InvalidItemStateException(msg);
+                    }
+                }
+            }
+            // - collect all affected states within the scope of save/undo
+            Iterator[] its = new Iterator[] {
+                    addedStates.iterator(),
+                    removedStates.iterator(),
+                    modifiedStates.iterator()
+            };
+            IteratorChain chain = new IteratorChain(its);
+            if (!throwOnStale) {
+                chain.addIterator(staleStates.iterator());
+            }
+            while (chain.hasNext()) {
+                ItemState state = (ItemState) chain.next();
+                if (containedInTree(target, state)) {
+                    affectedStates.add(state);
+                }
+            }
+            // - collect the set of operations and
+            //   check if the affected states listed by the operations are all
+            //   listed in the modified,removed or added states collected by this
+            //   changelog.
+            for (Iterator it = operations.iterator(); it.hasNext();) {
+                Operation op = (Operation) it.next();
+                Collection opStates = op.getAffectedItemStates();
+                for (Iterator osIt = opStates.iterator(); osIt.hasNext();) {
+                    ItemState state = (ItemState) osIt.next();
+                    if (affectedStates.contains(state)) {
+                        // operation needs to be included
+                        if (!affectedStates.containsAll(opStates)) {
+                            // incomplete changelog: need to save a parent as well
+                            String msg = "ChangeLog is not self contained.";
+                            throw new ConstraintViolationException(msg);
+                        }
+                        // no violation: add operation an stop iteration over
+                        // all affected states present in the operation.
+                        ops.add(op);
+                        break;
+                    }
+                }
+            }
+        }
+
+        ChangeLog cl = new ChangeLog(target, ops, affectedStates);
+        return cl;
     }
 
     /**
@@ -99,15 +230,14 @@ public class TransientItemStateManager implements ItemStateCreationListener {
     NodeState createNewNodeState(Name nodeName, String uniqueID, Name nodeTypeName,
                                  QNodeDefinition definition, NodeState parent)
             throws RepositoryException {
-        NodeState nodeState = ((NodeEntry) parent.getHierarchyEntry()).addNewNodeEntry(nodeName, uniqueID, nodeTypeName, definition);
+        NodeEntry ne = ((NodeEntry) parent.getHierarchyEntry()).addNewNodeEntry(nodeName, uniqueID, nodeTypeName, definition);
         try {
             parent.markModified();
         } catch (RepositoryException e) {
-            nodeState.getHierarchyEntry().remove();
+            ne.remove();
             throw e;
         }
-
-        return nodeState;
+        return ne.getNodeState();
     }
 
     /**
@@ -129,15 +259,14 @@ public class TransientItemStateManager implements ItemStateCreationListener {
             throws ItemExistsException, ConstraintViolationException, RepositoryException {
         // NOTE: callers must make sure, the property type is not 'undefined'
         NodeEntry nodeEntry = (NodeEntry) parent.getHierarchyEntry();
-        PropertyState propState = nodeEntry.addNewPropertyEntry(propName, definition);
+        PropertyEntry pe = nodeEntry.addNewPropertyEntry(propName, definition, values, propertyType);
         try {
-            propState.setValues(values, propertyType);
             parent.markModified();
         } catch (RepositoryException e) {
-            propState.getHierarchyEntry().remove();
+            pe.remove();
             throw e;
         }
-        return propState;
+        return pe.getPropertyState();
     }
 
     /**
@@ -145,19 +274,74 @@ public class TransientItemStateManager implements ItemStateCreationListener {
      * transiently modified item states.
      */
     void dispose() {
-        changeLog.reset();
+        addedStates.clear();
+        modifiedStates.clear();
+        removedStates.clear();
+        staleStates.clear();
+        // also clear all operations
+        operations.clear();
     }
 
     /**
-     * Remove the states and operations listed in the changeLog from the
-     * internal changeLog.
+     * Remove the states and operations listed in the changeLog from internal
+     * list of modifications.
      *
      * @param subChangeLog
      */
     void dispose(ChangeLog subChangeLog) {
-        changeLog.removeAll(subChangeLog);
+        Set affectedStates = subChangeLog.getAffectedStates();
+        addedStates.removeAll(affectedStates);
+        modifiedStates.removeAll(affectedStates);
+        removedStates.removeAll(affectedStates);
+        staleStates.removeAll(affectedStates);
+
+        operations.removeAll(subChangeLog.getOperations());
     }
 
+    /**
+     * A state has been removed. If the state is not a new state
+     * (not in the collection of added ones), then remove
+     * it from the modified states collection and add it to the
+     * removed states collection.
+     *
+     * @param state state that has been removed
+     */
+    private void removed(ItemState state) {
+        if (!addedStates.remove(state)) {
+            modifiedStates.remove(state);
+        }
+        removedStates.add(state);
+    }
+
+   /**
+     *
+     * @param parent
+     * @param state
+     * @return
+     */
+    private static boolean containedInTree(ItemState parent, ItemState state) {
+        HierarchyEntry he = state.getHierarchyEntry();
+       HierarchyEntry pHe = parent.getHierarchyEntry();
+       // short cuts first
+       if (he == pHe || he.getParent() == pHe) {
+           return true;
+       }
+       if (!parent.isNode() || he == pHe.getParent()) {
+           return false;
+       }
+       // none of the simple cases: walk up hierarchy
+       HierarchyEntry pe = he.getParent();
+       while (pe != null) {
+           if (pe == pHe) {
+               return true;
+           }
+           pe = pe.getParent();
+       }
+
+       // state isn't descendant of 'parent'
+       return false;
+   }
+
     //-----------------------------------------< ItemStateLifeCycleListener >---
     /**
      * Depending on status of the given state adapt change log.
@@ -168,28 +352,77 @@ public class TransientItemStateManager implements ItemStateCreationListener {
      * @see ItemStateLifeCycleListener#statusChanged(ItemState, int)
      */
     public void statusChanged(ItemState state, int previousStatus) {
-        if (changeLog.isEmpty()) {
-            return;
-        }
+        /*
+        Update the collections of states that were transiently modified.
+        NOTE: cleanup of operations is omitted here. this is expected to
+        occur upon {@link ChangeLog#save()} and {@link ChangeLog#undo()}.
+        External modifications in contrast that clash with transient modifications
+        render the corresponding states stale.
+        */
         switch (state.getStatus()) {
-            case Status.EXISTING:
+            case (Status.EXISTING):
+                switch (previousStatus) {
+                    case Status.EXISTING_MODIFIED:
+                        // was modified and got persisted or reverted
+                        modifiedStates.remove(state);
+                        break;
+                    case Status.EXISTING_REMOVED:
+                        // was transiently removed and is now reverted
+                        removedStates.remove(state);
+                        break;
+                    case Status.STALE_MODIFIED:
+                        // was modified and stale and is now reverted
+                        staleStates.remove(state);
+                        break;
+                    case Status.NEW:
+                        // was new and has been saved now
+                        addedStates.remove(state);
+                        break;
+                    //default:
+                        // INVALIDATED, MODIFIED ignore. no effect to transient modifications.
+                        // any other status change is invalid -> see Status#isValidStatusChange(int, int
+                }
+                break;
             case Status.EXISTING_MODIFIED:
-            case Status.EXISTING_REMOVED:
-            case Status.REMOVED:
-                changeLog.statusChanged(state, previousStatus);
+                // transition from EXISTING to EXISTING_MODIFIED
+                modifiedStates.add(state);
+                break;
+            case (Status.EXISTING_REMOVED):
+                // transition from EXISTING or EXISTING_MODIFIED to EXISTING_REMOVED
+                removed(state);
+                break;
+            case (Status.REMOVED):
+                switch (previousStatus) {
+                    case Status.EXISTING_REMOVED:
+                        // was transiently removed and removal was persisted.
+                        // -> ignore
+                        break;
+                    case Status.NEW:
+                        // a new entry was removed again: remember as removed
+                        // in order to keep the operations and the affected
+                        // states in sync
+                        removed(state);
+                        break;
+                }
                 break;
             case Status.STALE_DESTROYED:
             case Status.STALE_MODIFIED:
-                // state is now stale. keep in modified. wait until refreshed
+                /**
+                state is stale due to external modification -> move it to
+                the collection of stale item states.
+                validation omitted for only 'existing_modified' states can
+                become stale see {@link Status#isValidStatusChange(int, int)}
+                 */
+                modifiedStates.remove(state);
+                staleStates.add(state);
+                break;
             case Status.MODIFIED:
-                // MODIFIED is only possible on EXISTING states -> thus, there
-                // must not be any transient modifications for that state.
-                // we ignore it.
             case Status.INVALIDATED:
-                // -> nothing to do here.
+                // MODIFIED, INVALIDATED: ignore.
+                log.debug("Item " + state.getName() + " changed status from " + Status.getName(previousStatus) + " to " + Status.getName(state.getStatus()) + ".");
                 break;
             default:
-                log.error("ItemState has invalid status: " + state.getStatus());
+                log.error("ItemState "+ state.getName() + " has invalid status: " + state.getStatus());
         }
     }
 
@@ -200,7 +433,7 @@ public class TransientItemStateManager implements ItemStateCreationListener {
     public void created(ItemState state) {
         // new state has been created
         if (state.getStatus() == Status.NEW) {
-            changeLog.added(state);
+            addedStates.add(state);
         }
     }
 }
