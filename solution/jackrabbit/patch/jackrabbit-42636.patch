diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/SimpleAccessManager.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/SimpleAccessManager.java
index ef3c907..da332c4 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/SimpleAccessManager.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/SimpleAccessManager.java
@@ -16,127 +16,11 @@
  */
 package org.apache.jackrabbit.core.security;
 
-import org.apache.jackrabbit.core.HierarchyManager;
-import org.apache.jackrabbit.core.ItemId;
-
-import javax.jcr.AccessDeniedException;
-import javax.jcr.ItemNotFoundException;
-import javax.jcr.NoSuchWorkspaceException;
-import javax.jcr.RepositoryException;
-import javax.security.auth.Subject;
-
 /**
  * <code>SimpleAccessManager</code> ...
+ *
+ * @deprecated Use {@link org.apache.jackrabbit.core.security.simple.SimpleAccessManager} instead.
  */
-public class SimpleAccessManager implements AccessManager {
-
-    /**
-     * Subject whose access rights this AccessManager should reflect
-     */
-    protected Subject subject;
-
-    /**
-     * hierarchy manager used for ACL-based access control model
-     */
-    protected HierarchyManager hierMgr;
-
-    private boolean initialized;
-
-    protected boolean system;
-    protected boolean anonymous;
-
-    /**
-     * Empty constructor
-     */
-    public SimpleAccessManager() {
-        initialized = false;
-        anonymous = false;
-        system = false;
-    }
-
-    //--------------------------------------------------------< AccessManager >
-    /**
-     * {@inheritDoc}
-     */
-    public void init(AMContext context)
-            throws AccessDeniedException, Exception {
-        if (initialized) {
-            throw new IllegalStateException("already initialized");
-        }
-
-        subject = context.getSubject();
-        hierMgr = context.getHierarchyManager();
-        anonymous = !subject.getPrincipals(AnonymousPrincipal.class).isEmpty();
-        system = !subject.getPrincipals(SystemPrincipal.class).isEmpty();
-
-        // @todo check permission to access given workspace based on principals
-        initialized = true;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public synchronized void close() throws Exception {
-        if (!initialized) {
-            throw new IllegalStateException("not initialized");
-        }
-
-        initialized = false;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public void checkPermission(ItemId id, int permissions)
-            throws AccessDeniedException, ItemNotFoundException,
-            RepositoryException {
-        if (!initialized) {
-            throw new IllegalStateException("not initialized");
-        }
-
-        if (system) {
-            // system has always all permissions
-            return;
-        } else if (anonymous) {
-            // anonymous is always denied WRITE & REMOVE permissions
-            if ((permissions & WRITE) == WRITE
-                    || (permissions & REMOVE) == REMOVE) {
-                throw new AccessDeniedException();
-            }
-        }
-        // @todo check permission based on principals
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    public boolean isGranted(ItemId id, int permissions)
-            throws ItemNotFoundException, RepositoryException {
-        if (!initialized) {
-            throw new IllegalStateException("not initialized");
-        }
-
-        if (system) {
-            // system has always all permissions
-            return true;
-        } else if (anonymous) {
-            // anonymous is always denied WRITE & REMOVE premissions
-            if ((permissions & WRITE) == WRITE
-                    || (permissions & REMOVE) == REMOVE) {
-                return false;
-            }
-        }
-
-        // @todo check permission based on principals
-        return true;
-    }
+public class SimpleAccessManager extends org.apache.jackrabbit.core.security.simple.SimpleAccessManager {
 
-    /**
-     * {@inheritDoc}
-     */
-    public boolean canAccess(String workspaceName)
-            throws NoSuchWorkspaceException, RepositoryException {
-        // @todo check permission to access given workspace based on principals
-        return true;
-    }
 }
