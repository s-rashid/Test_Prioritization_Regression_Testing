diff --git a/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/state/EmptyNodeReferences.java b/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/state/EmptyNodeReferences.java
new file mode 100644
index 0000000..a39d870
--- /dev/null
+++ b/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/state/EmptyNodeReferences.java
@@ -0,0 +1,51 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.jackrabbit.jcr2spi.state;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.apache.jackrabbit.util.IteratorHelper;
+
+import java.util.Iterator;
+
+/**
+ * <code>EmptyNodeReferences</code>...
+ */
+class EmptyNodeReferences implements NodeReferences {
+
+    private static Logger log = LoggerFactory.getLogger(EmptyNodeReferences.class);
+    private static NodeReferences INSTANCE;
+
+    private EmptyNodeReferences() {
+
+    }
+
+    static NodeReferences getInstance() {
+        if (INSTANCE == null) {
+            INSTANCE = new EmptyNodeReferences();
+        }
+        return INSTANCE;
+    }
+
+    public boolean isEmpty() {
+        return true;
+    }
+
+    public Iterator iterator() {
+        return IteratorHelper.EMPTY;
+    }
+}
\ No newline at end of file
