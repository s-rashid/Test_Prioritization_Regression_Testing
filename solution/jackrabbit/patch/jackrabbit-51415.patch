diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/PropertyTypeRegistry.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/PropertyTypeRegistry.java
index bc23c6a..b6b324c 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/PropertyTypeRegistry.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/PropertyTypeRegistry.java
@@ -53,7 +53,7 @@ public class PropertyTypeRegistry implements NodeTypeRegistryListener {
     private final NodeTypeRegistry registry;
 
     /** Property Name to TypeMapping[] mapping */
-    private final Map typeMapping = new HashMap();
+    private final Map<Name, TypeMapping[]> typeMapping = new HashMap<Name, TypeMapping[]>();
 
     /**
      * Creates a new <code>PropertyTypeRegistry</code> instance. This instance
@@ -75,7 +75,7 @@ public class PropertyTypeRegistry implements NodeTypeRegistryListener {
      */
     public TypeMapping[] getPropertyTypes(Name propName) {
         synchronized (typeMapping) {
-            TypeMapping[] types = (TypeMapping[]) typeMapping.get(propName);
+            TypeMapping[] types = typeMapping.get(propName);
             if (types != null) {
                 return types;
             } else {
@@ -89,12 +89,12 @@ public class PropertyTypeRegistry implements NodeTypeRegistryListener {
             NodeTypeDef def = registry.getNodeTypeDef(ntName);
             PropDef[] propDefs = def.getPropertyDefs();
             synchronized (typeMapping) {
-                for (int i = 0; i < propDefs.length; i++) {
-                    int type = propDefs[i].getRequiredType();
-                    if (!propDefs[i].definesResidual() && type != PropertyType.UNDEFINED) {
-                        Name name = propDefs[i].getName();
+                for (PropDef propDef : propDefs) {
+                    int type = propDef.getRequiredType();
+                    if (!propDef.definesResidual() && type != PropertyType.UNDEFINED) {
+                        Name name = propDef.getName();
                         // only remember defined property types
-                        TypeMapping[] types = (TypeMapping[]) typeMapping.get(name);
+                        TypeMapping[] types = typeMapping.get(name);
                         if (types == null) {
                             types = new TypeMapping[1];
                         } else {
@@ -102,7 +102,7 @@ public class PropertyTypeRegistry implements NodeTypeRegistryListener {
                             System.arraycopy(types, 0, tmp, 0, types.length);
                             types = tmp;
                         }
-                        types[types.length - 1] = new TypeMapping(ntName, type, propDefs[i].isMultiple());
+                        types[types.length - 1] = new TypeMapping(ntName, type, propDef.isMultiple());
                         typeMapping.put(name, types);
                     }
                 }
@@ -120,18 +120,18 @@ public class PropertyTypeRegistry implements NodeTypeRegistryListener {
     public void nodeTypeUnregistered(Name ntName) {
         // remove all TypeMapping instances refering to this ntName
         synchronized (typeMapping) {
-            Map modified = new HashMap();
+            Map<Name, TypeMapping[]> modified = new HashMap<Name, TypeMapping[]>();
             for (Iterator it = typeMapping.keySet().iterator(); it.hasNext();) {
                 Name propName = (Name) it.next();
-                TypeMapping[] mapping = (TypeMapping[]) typeMapping.get(propName);
-                List remove = null;
-                for (int i = 0; i < mapping.length; i++) {
-                    if (mapping[i].ntName.equals(ntName)) {
+                TypeMapping[] mapping = typeMapping.get(propName);
+                List<TypeMapping> remove = null;
+                for (TypeMapping tm : mapping) {
+                    if (tm.ntName.equals(ntName)) {
                         if (remove == null) {
                             // not yet created
-                            remove = new ArrayList(mapping.length);
+                            remove = new ArrayList<TypeMapping>(mapping.length);
                         }
-                        remove.add(mapping[i]);
+                        remove.add(tm);
                     }
                 }
                 if (remove != null) {
@@ -140,7 +140,7 @@ public class PropertyTypeRegistry implements NodeTypeRegistryListener {
                         // all removed -> done
                     } else {
                         // only some removed
-                        List remaining = new ArrayList(Arrays.asList(mapping));
+                        List<TypeMapping> remaining = new ArrayList<TypeMapping>(Arrays.asList(mapping));
                         remaining.removeAll(remove);
                         modified.put(propName, remaining.toArray(new TypeMapping[remaining.size()]));
                     }
@@ -156,9 +156,8 @@ public class PropertyTypeRegistry implements NodeTypeRegistryListener {
      * from the {@link org.apache.jackrabbit.core.nodetype.NodeTypeRegistry}.
      */
     private void fillCache() {
-        Name[] ntNames = registry.getRegisteredNodeTypes();
-        for (int i = 0; i < ntNames.length; i++) {
-            nodeTypeRegistered(ntNames[i]);
+        for (Name ntName : registry.getRegisteredNodeTypes()) {
+            nodeTypeRegistered(ntName);
         }
     }
