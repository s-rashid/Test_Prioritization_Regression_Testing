diff --git a/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/nodetype/DefinitionValidator.java b/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/nodetype/DefinitionValidator.java
index 35f27fc..afafe6d 100644
--- a/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/nodetype/DefinitionValidator.java
+++ b/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/nodetype/DefinitionValidator.java
@@ -21,7 +21,6 @@ import org.apache.jackrabbit.spi.QNodeTypeDefinition;
 import org.apache.jackrabbit.spi.QNodeDefinition;
 import org.apache.jackrabbit.spi.QPropertyDefinition;
 import org.apache.jackrabbit.spi.QValue;
-import org.apache.jackrabbit.spi.commons.nodetype.InvalidNodeTypeDefException;
 import org.apache.jackrabbit.spi.commons.nodetype.ValueConstraint;
 import org.apache.jackrabbit.spi.commons.name.NameConstants;
 import org.apache.jackrabbit.spi.commons.name.NameFactoryImpl;
@@ -33,6 +32,7 @@ import javax.jcr.NamespaceRegistry;
 import javax.jcr.PropertyType;
 import javax.jcr.nodetype.NoSuchNodeTypeException;
 import javax.jcr.nodetype.ConstraintViolationException;
+import javax.jcr.nodetype.InvalidNodeTypeDefinitionException;
 
 import java.util.Stack;
 import java.util.Map;
@@ -63,11 +63,11 @@ class DefinitionValidator {
      * @param ntDefs
      * @param validatedDefs
      * @return Map mapping the definition to the resulting effective nodetype
-     * @throws InvalidNodeTypeDefException
+     * @throws InvalidNodeTypeDefinitionException
      * @throws RepositoryException
      */
     public Map validateNodeTypeDefs(Collection ntDefs, Map validatedDefs)
-        throws InvalidNodeTypeDefException, RepositoryException {
+        throws InvalidNodeTypeDefinitionException, RepositoryException {
         // tmp. map containing names/defs of validated nodetypes
         Map tmpMap = new HashMap(validatedDefs);
         for (Iterator it = ntDefs.iterator(); it.hasNext();) {
@@ -110,7 +110,7 @@ class DefinitionValidator {
                 msg.append(" ");
             }
             log.error(msg.toString());
-            throw new InvalidNodeTypeDefException(msg.toString());
+            throw new InvalidNodeTypeDefinitionException(msg.toString());
         }
         return ntMap;
     }
@@ -122,11 +122,11 @@ class DefinitionValidator {
      * that are known to be valid or are already registered. This map is used to
      * validated dependencies and check for circular inheritance
      * @return
-     * @throws InvalidNodeTypeDefException
+     * @throws InvalidNodeTypeDefinitionException
      * @throws RepositoryException
      */
     public EffectiveNodeType validateNodeTypeDef(QNodeTypeDefinition ntDef, Map validatedDefs)
-            throws InvalidNodeTypeDefException, RepositoryException {
+            throws InvalidNodeTypeDefinitionException, RepositoryException {
         /**
          * the effective (i.e. merged and resolved) node type resulting from
          * the specified node type definition;
@@ -141,7 +141,7 @@ class DefinitionValidator {
         if (name == null) {
             String msg = "no name specified";
             log.debug(msg);
-            throw new InvalidNodeTypeDefException(msg);
+            throw new InvalidNodeTypeDefinitionException(msg);
         }
         checkNamespace(name);
 
@@ -158,13 +158,13 @@ class DefinitionValidator {
                     String msg = "[" + name + "] invalid supertype: "
                             + supertypes[i] + " (infinite recursion))";
                     log.debug(msg);
-                    throw new InvalidNodeTypeDefException(msg);
+                    throw new InvalidNodeTypeDefinitionException(msg);
                 }
                 /* compare to given nt-name set and not to registered nodetypes */
                 if (!validatedDefs.containsKey(supertypes[i])) {
                     String msg = "[" + name + "] invalid supertype: " + supertypes[i];
                     log.debug(msg);
-                    throw new InvalidNodeTypeDefException(msg);
+                    throw new InvalidNodeTypeDefinitionException(msg);
                 }
             }
 
@@ -197,16 +197,16 @@ class DefinitionValidator {
                     String msg = "[" + name + "] all primary node types except"
                         + " nt:base itself must be (directly or indirectly) derived from nt:base";
                     log.debug(msg);
-                    throw new InvalidNodeTypeDefException(msg);
+                    throw new InvalidNodeTypeDefinitionException(msg);
                 }
             } catch (ConstraintViolationException e) {
                 String msg = "[" + name + "] failed to validate supertypes";
                 log.debug(msg);
-                throw new InvalidNodeTypeDefException(msg, e);
+                throw new InvalidNodeTypeDefinitionException(msg, e);
             } catch (NoSuchNodeTypeException e) {
                 String msg = "[" + name + "] failed to validate supertypes";
                 log.debug(msg);
-                throw new InvalidNodeTypeDefException(msg, e);
+                throw new InvalidNodeTypeDefinitionException(msg, e);
             }
         } else {
             // no supertypes specified: has to be either a mixin type or nt:base
@@ -214,7 +214,7 @@ class DefinitionValidator {
                 String msg = "[" + name
                         + "] all primary node types except nt:base itself must be (directly or indirectly) derived from nt:base";
                 log.debug(msg);
-                throw new InvalidNodeTypeDefException(msg);
+                throw new InvalidNodeTypeDefinitionException(msg);
             }
         }
 
@@ -231,20 +231,20 @@ class DefinitionValidator {
             if (!name.equals(pd.getDeclaringNodeType())) {
                 String msg = "[" + name + "#" + pd.getName() + "] invalid declaring node type specified";
                 log.debug(msg);
-                throw new InvalidNodeTypeDefException(msg);
+                throw new InvalidNodeTypeDefinitionException(msg);
             }
             checkNamespace(pd.getName());
             // check that auto-created properties specify a name
             if (pd.definesResidual() && pd.isAutoCreated()) {
                 String msg = "[" + name + "#" + pd.getName() + "] auto-created properties must specify a name";
                 log.debug(msg);
-                throw new InvalidNodeTypeDefException(msg);
+                throw new InvalidNodeTypeDefinitionException(msg);
             }
             // check that auto-created properties specify a type
             if (pd.getRequiredType() == PropertyType.UNDEFINED && pd.isAutoCreated()) {
                 String msg = "[" + name + "#" + pd.getName() + "] auto-created properties must specify a type";
                 log.debug(msg);
-                throw new InvalidNodeTypeDefException(msg);
+                throw new InvalidNodeTypeDefinitionException(msg);
             }
             /* check default values:
              * make sure type of value is consistent with required property type
@@ -276,7 +276,7 @@ class DefinitionValidator {
                                     + "] invalid REFERENCE value constraint '"
                                     + ntName + "' (unknown node type)";
                             log.debug(msg);
-                            throw new InvalidNodeTypeDefException(msg);
+                            throw new InvalidNodeTypeDefinitionException(msg);
                         }
                     }
                 }
@@ -292,7 +292,7 @@ class DefinitionValidator {
                 String msg = "[" + name + "#" + cnd.getName()
                         + "] invalid declaring node type specified";
                 log.debug(msg);
-                throw new InvalidNodeTypeDefException(msg);
+                throw new InvalidNodeTypeDefinitionException(msg);
             }
             checkNamespace(cnd.getName());
             // check that auto-created child-nodes specify a name
@@ -300,7 +300,7 @@ class DefinitionValidator {
                 String msg = "[" + name + "#" + cnd.getName()
                         + "] auto-created child-nodes must specify a name";
                 log.debug(msg);
-                throw new InvalidNodeTypeDefException(msg);
+                throw new InvalidNodeTypeDefinitionException(msg);
             }
             // check that auto-created child-nodes specify a default primary type
             if (cnd.getDefaultPrimaryType() == null
@@ -308,7 +308,7 @@ class DefinitionValidator {
                 String msg = "[" + name + "#" + cnd.getName()
                         + "] auto-created child-nodes must specify a default primary type";
                 log.debug(msg);
-                throw new InvalidNodeTypeDefException(msg);
+                throw new InvalidNodeTypeDefinitionException(msg);
             }
             // check default primary type
             Name dpt = cnd.getDefaultPrimaryType();
@@ -328,7 +328,7 @@ class DefinitionValidator {
                     String msg = "[" + name + "#" + cnd.getName()
                             + "] invalid default primary type '" + dpt + "'";
                     log.debug(msg);
-                    throw new InvalidNodeTypeDefException(msg);
+                    throw new InvalidNodeTypeDefinitionException(msg);
                 }
                 /**
                  * build effective (i.e. merged and resolved) node type from
@@ -360,12 +360,12 @@ class DefinitionValidator {
                     String msg = "[" + name + "#" + cnd.getName()
                             + "] failed to validate default primary type";
                     log.debug(msg);
-                    throw new InvalidNodeTypeDefException(msg, e);
+                    throw new InvalidNodeTypeDefinitionException(msg, e);
                 } catch (NoSuchNodeTypeException e) {
                     String msg = "[" + name + "#" + cnd.getName()
                             + "] failed to validate default primary type";
                     log.debug(msg);
-                    throw new InvalidNodeTypeDefException(msg, e);
+                    throw new InvalidNodeTypeDefinitionException(msg, e);
                 }
             }
 
@@ -391,7 +391,7 @@ class DefinitionValidator {
                         String msg = "[" + name + "#" + cnd.getName()
                                 + "] invalid required primary type: " + rpt;
                         log.debug(msg);
-                        throw new InvalidNodeTypeDefException(msg);
+                        throw new InvalidNodeTypeDefinitionException(msg);
                     }
                     /**
                      * check if default primary type satisfies the required
@@ -402,7 +402,7 @@ class DefinitionValidator {
                                 + "] default primary type does not satisfy required primary type constraint "
                                 + rpt;
                         log.debug(msg);
-                        throw new InvalidNodeTypeDefException(msg);
+                        throw new InvalidNodeTypeDefinitionException(msg);
                     }
                     /**
                      * build effective (i.e. merged and resolved) node type from
@@ -425,12 +425,12 @@ class DefinitionValidator {
                         String msg = "[" + name + "#" + cnd.getName()
                                 + "] failed to validate required primary type constraint";
                         log.debug(msg);
-                        throw new InvalidNodeTypeDefException(msg, e);
+                        throw new InvalidNodeTypeDefinitionException(msg, e);
                     } catch (NoSuchNodeTypeException e) {
                         String msg = "[" + name + "#" + cnd.getName()
                                 + "] failed to validate required primary type constraint";
                         log.debug(msg);
-                        throw new InvalidNodeTypeDefException(msg, e);
+                        throw new InvalidNodeTypeDefinitionException(msg, e);
                     }
                 }
             }
@@ -447,11 +447,11 @@ class DefinitionValidator {
             } catch (ConstraintViolationException e) {
                 String msg = "[" + name + "] failed to resolve node type definition";
                 log.debug(msg);
-                throw new InvalidNodeTypeDefException(msg, e);
+                throw new InvalidNodeTypeDefinitionException(msg, e);
             } catch (NoSuchNodeTypeException e) {
                 String msg = "[" + name + "] failed to resolve node type definition";
                 log.debug(msg);
-                throw new InvalidNodeTypeDefException(msg, e);
+                throw new InvalidNodeTypeDefinitionException(msg, e);
             }
         }
         return ent;
@@ -462,11 +462,11 @@ class DefinitionValidator {
      * @param supertypes
      * @param inheritanceChain
      * @param ntdMap
-     * @throws InvalidNodeTypeDefException
+     * @throws InvalidNodeTypeDefinitionException
      * @throws RepositoryException
      */
     private void checkForCircularInheritance(Name[] supertypes, Stack inheritanceChain, Map ntdMap)
-        throws InvalidNodeTypeDefException, RepositoryException {
+        throws InvalidNodeTypeDefinitionException, RepositoryException {
         for (int i = 0; i < supertypes.length; i++) {
             Name stName = supertypes[i];
             int pos = inheritanceChain.lastIndexOf(stName);
@@ -481,7 +481,7 @@ class DefinitionValidator {
                 }
                 buf.append("--> ");
                 buf.append(stName);
-                throw new InvalidNodeTypeDefException("circular inheritance detected: " + buf.toString());
+                throw new InvalidNodeTypeDefinitionException("circular inheritance detected: " + buf.toString());
             }
 
             if (ntdMap.containsKey(stName)) {
@@ -493,7 +493,7 @@ class DefinitionValidator {
                     inheritanceChain.pop();
                 }
             } else {
-                throw new InvalidNodeTypeDefException("Unknown supertype: " + stName);
+                throw new InvalidNodeTypeDefinitionException("Unknown supertype: " + stName);
             }
         }
     }
@@ -503,11 +503,11 @@ class DefinitionValidator {
      * @param childNodeENT
      * @param definingParentNTs
      * @param ntdMap
-     * @throws InvalidNodeTypeDefException
+     * @throws InvalidNodeTypeDefinitionException
      */
     private void checkForCircularNodeAutoCreation(EffectiveNodeType childNodeENT,
                                                   Stack definingParentNTs, Map ntdMap)
-        throws InvalidNodeTypeDefException {
+        throws InvalidNodeTypeDefinitionException {
         // check for circularity through default node types of auto-created child nodes
         // (node type 'a' defines auto-created child node with default node type 'a')
         Name[] childNodeNTs = childNodeENT.getAllNodeTypes();
@@ -527,7 +527,7 @@ class DefinitionValidator {
                 buf.append("--> ");
                 buf.append("node type ");
                 buf.append(nt);
-                throw new InvalidNodeTypeDefException("circular node auto-creation detected: "
+                throw new InvalidNodeTypeDefinitionException("circular node auto-creation detected: "
                     + buf.toString());
             }
         }
@@ -547,11 +547,11 @@ class DefinitionValidator {
             } catch (NoSuchNodeTypeException e) {
                 String msg = definingNT + " defines invalid default node type for child node " + nodeDefs[i].getName();
                 log.debug(msg);
-                throw new InvalidNodeTypeDefException(msg, e);
+                throw new InvalidNodeTypeDefinitionException(msg, e);
             } catch (ConstraintViolationException e) {
                 String msg = definingNT + " defines invalid default node type for child node " + nodeDefs[i].getName();
                 log.debug(msg);
-                throw new InvalidNodeTypeDefException(msg, e);
+                throw new InvalidNodeTypeDefinitionException(msg, e);
             }
         }
     }
