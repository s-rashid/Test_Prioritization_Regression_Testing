diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AccessControlEditor.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AccessControlEditor.java
index cc3dd10..4f3d9e0 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AccessControlEditor.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/security/authorization/AccessControlEditor.java
@@ -22,7 +22,9 @@ import org.apache.jackrabbit.core.security.jsr283.security.Privilege;
 import org.apache.jackrabbit.core.security.jsr283.security.AccessControlEntry;
 
 import javax.jcr.RepositoryException;
-import javax.jcr.ItemNotFoundException;
+import javax.jcr.UnsupportedRepositoryOperationException;
+import javax.jcr.PathNotFoundException;
+import javax.jcr.AccessDeniedException;
 import java.security.Principal;
 
 /**
@@ -44,20 +46,22 @@ public interface AccessControlEditor {
      * the scope of the PolicyTemplate it limited to the Node itself and does
      * not take inherited elements into account.
      *
-     * @param id the id of the Node to retrievethe PolicyTemplate for.
+     * @param nodePath Absolute path to an existing node object.
      * @return the PolicyTemplate or <code>null</code> no policy has been
      * applied to the node before.
-     * @throws AccessControlException If the Node identified by the given id does
-     * not allow ACL modifications.
-     * @throws ItemNotFoundException if no node exists for the given id.
+     * @throws AccessControlException If the Node identified by the given
+     * <code>nodePath</code> does not allow access control modifications (e.g.
+     * the node itself stores the access control information for its parent).
+     * @throws PathNotFoundException if no node exists for the given
+     * <code>nodePath</code>.
      * @throws RepositoryException if an error occurs
      */
-    PolicyTemplate getPolicyTemplate(NodeId id) throws AccessControlException, ItemNotFoundException, RepositoryException;
+    PolicyTemplate getPolicyTemplate(String nodePath) throws AccessControlException, PathNotFoundException, RepositoryException;
 
     /**
-     * Retrieves an editable policy template for the Node identified by the given
+     * Retrieves the policy template for the Node identified by the given
      * <code>NodeId</code>. If the node does not yet have an policy set an
-     * new (empty) template is created (see also {@link #getPolicyTemplate(NodeId)}.<br>
+     * new (empty) template is created (see also {@link #getPolicyTemplate(String)}.<br>
      * The PolicyTemplate returned is detached from the underlying
      * <code>AccessControlProvider</code> and is only an external
      * representation. Modification will therefore not take effect, until it is
@@ -67,98 +71,120 @@ public interface AccessControlEditor {
      * the scope of the PolicyTemplate it limited to the Node itself and does
      * never not take inherited elements into account.
      *
-     * @param id the id of the Node to retrieve (or create) the PolicyTemplate for.
-     * @return the PolicyTemplate
-     * @throws AccessControlException If the Node identified by the given id does
-     * not allow ACL modifications.
-     * @throws ItemNotFoundException if no node exists for the given id.
+     * @param nodePath Absolute path to an existing node object.
+     * @return policy template
+     * @throws AccessControlException If the Node identified by the given
+     * <code>nodePath</code> does not allow access control modifications.
+     * @throws PathNotFoundException if no node exists for the given
+     * <code>nodePath</code>.
      * @throws RepositoryException if an error occurs
      */
-    PolicyTemplate editPolicyTemplate(NodeId id) throws AccessControlException, ItemNotFoundException, RepositoryException;
+    PolicyTemplate editPolicyTemplate(String nodePath) throws AccessControlException, PathNotFoundException, RepositoryException;
+
+    /**
+     * Returns a policy template for the given <code>principal</code>.
+     *
+     * @return policy template for the specified <code>principal.</code>.
+     * @throws AccessControlException if the specified principal does not exist,
+     * if this implementation does provide policy tempates for principals or
+     * if same other access control related exception occurs.
+     * @throws RepositoryException if another error occurs.
+     */
+    PolicyTemplate editPolicyTemplate(Principal principal) throws AccessDeniedException, AccessControlException, RepositoryException;
 
     /**
      * Stores the policy template to the respective node.
      *
-     * @param id the id of the node to write the template for. Note, that a
-     * {@link javax.jcr.Session#save()} is required to persist the changes. Upon
-     * 'setPolicyTemplate' the modifications are applied in the transient space only.
+     * @param nodePath Absolute path to an existing node object.
      * @param template the <code>PolicyTemplate</code> to store.
      * @throws AccessControlException If the PolicyTemplate is <code>null</code> or
-     * if it is not applicable to the Node identified by the given id.
-     * @throws ItemNotFoundException if no node exists for the given id.
+     * if it is not applicable to the Node identified by the given
+     * <code>nodePath</code>.
+     * @throws PathNotFoundException if no node exists for the given
+     * <code>nodePath</code>.
      * @throws RepositoryException if an other error occurs.
      */
-    void setPolicyTemplate(NodeId id, PolicyTemplate template) throws AccessControlException, ItemNotFoundException, RepositoryException;
+    void setPolicyTemplate(String nodePath, PolicyTemplate template) throws AccessControlException, PathNotFoundException, RepositoryException;
 
     /**
      * Removes the template from the respective node.
      *
-     * @param id the id of the node to remove the acl from.
+     * @param nodePath Absolute path to an existing node object.
      * @return the PolicyTemplate that has been remove or <code>null</code>
      * if there was no policy to remove.
-     * @throws AccessControlException If the Node identified by the given id
-     * does not allow policy modifications.
-     * @throws ItemNotFoundException if no node exists for the given id.
+     * @throws AccessControlException If the Node identified by the given
+     * <code>nodePath</code> does not allow policy modifications.
+     * @throws PathNotFoundException if no node exists for the given
+     * <code>nodePath</code>.
      * @throws RepositoryException if an other error occurs
      */
-    PolicyTemplate removePolicyTemplate(NodeId id) throws AccessControlException, ItemNotFoundException, RepositoryException;
+    PolicyTemplate removePolicyTemplate(String nodePath) throws AccessControlException, PathNotFoundException, RepositoryException;
 
     /**
      * Returns the access control entries present with the node
      * identified by  <code>id</code>, that have
-     * been added using {@link #addAccessControlEntry(NodeId,Principal,Privilege[])}.
+     * been added using {@link #addAccessControlEntry(String,Principal,Privilege[])}.
      * The implementation may return other entries, if they can be removed
-     * using {@link #removeAccessControlEntry(NodeId,AccessControlEntry)}.
+     * using {@link #removeAccessControlEntry(String,AccessControlEntry)}.
      *
-     * @param id
+     * @param nodePath Absolute path to an existing node object.
      * @return the (granting) access control entries present with the node
      * identified by  <code>id</code>.
      * @throws AccessControlException
-     * @throws ItemNotFoundException if no node exists for the given id.
+     * @throws PathNotFoundException if no node exists for the given
+     * <code>nodePath</code>.
+     * @throws UnsupportedRepositoryOperationException if only simple access
+     * control is supported.
      * @throws RepositoryException
      */
-    AccessControlEntry[] getAccessControlEntries(NodeId id) throws AccessControlException, ItemNotFoundException, RepositoryException;
+    AccessControlEntry[] getAccessControlEntries(String nodePath) throws AccessControlException, PathNotFoundException, UnsupportedRepositoryOperationException, RepositoryException;
 
     /**
      * Adds an access control entry to the node identified by
      * <code>id</code>. An implementation that always keeps entries with an
      * existing <code>AccessControlPolicy</code> may choose to treat this
-     * method as short-cut for {@link #editPolicyTemplate(NodeId)} and
+     * method as short-cut for {@link #editPolicyTemplate(String)} and
      * subsequent template modification.
      * Note, that in addition an implementation may only allow granting
      * ACEs as specified by JSR 283.
      *
-     * @param id
+     * @param nodePath Absolute path to an existing node object.
      * @param principal
      * @param privileges
      * @return The entry that results from adding the specified
      * privileges for the specified principal.
-     * @throws AccessControlException If the Node identified by the given id
+     * @throws AccessControlException If the Node identified by the given nodePath.
      * does not allow access control modifications, if the principal does not
      * exist or if any of the specified privileges is unknown.
-     * @throws ItemNotFoundException if no node exists for the given id.
+     * @throws PathNotFoundException if no node exists for the given
+     * <code>nodePath</code>.
+     * @throws UnsupportedRepositoryOperationException if only simple access
+     * control is supported.
      * @throws RepositoryException if an other error occurs
      */
-    AccessControlEntry addAccessControlEntry(NodeId id, Principal principal, Privilege[] privileges) throws AccessControlException, ItemNotFoundException, RepositoryException;
+    AccessControlEntry addAccessControlEntry(String nodePath, Principal principal, Privilege[] privileges) throws AccessControlException, PathNotFoundException, UnsupportedRepositoryOperationException, RepositoryException;
 
     /**
      * Removes the access control entry represented by the given
      * <code>template</code> from the node identified by
      * <code>id</code>. An implementation that always keeps entries with an
      * existing <code>AccessControlPolicy</code> may choose to treat this
-     * method as short-cut for {@link #getPolicyTemplate(NodeId)} and
+     * method as short-cut for {@link #getPolicyTemplate(String)} and
      * subsequent template modification.
      * Note that only <code>PolicyEntry</code>s accessible through
-     * {@link #getAccessControlEntries(NodeId)} can be removed by this call.
+     * {@link #getAccessControlEntries(String)} can be removed by this call.
      *
-     * @param id
-     * @param entry
+     * @param nodePath Absolute path to an existing node object.
+     * @param entry The access control entry to be removed.
      * @return true if entry was contained could be successfully removed.
      * @throws AccessControlException If an access control specific exception
      * occurs (e.g. invalid entry implementation, entry cannot be removed
      * by this call, etc.).
-     * @throws ItemNotFoundException if no node exists for the given id.
+     * @throws PathNotFoundException if no node exists for the given
+     * <code>nodePath</code>.
+     * @throws UnsupportedRepositoryOperationException if only simple access
+     * control is supported.
      * @throws RepositoryException if another error occurs.
      */
-    boolean removeAccessControlEntry(NodeId id, AccessControlEntry entry) throws AccessControlException, ItemNotFoundException, RepositoryException;
+    boolean removeAccessControlEntry(String nodePath, AccessControlEntry entry) throws AccessControlException, PathNotFoundException, UnsupportedRepositoryOperationException, RepositoryException;
 }
