diff --git a/jackrabbit-core/src/test/java/org/apache/jackrabbit/api/jsr283/lock/LockManagerTest.java b/jackrabbit-core/src/test/java/org/apache/jackrabbit/api/jsr283/lock/LockManagerTest.java
index a1a63c5..e19bd59 100644
--- a/jackrabbit-core/src/test/java/org/apache/jackrabbit/api/jsr283/lock/LockManagerTest.java
+++ b/jackrabbit-core/src/test/java/org/apache/jackrabbit/api/jsr283/lock/LockManagerTest.java
@@ -19,13 +19,69 @@ package org.apache.jackrabbit.api.jsr283.lock;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.apache.jackrabbit.test.AbstractJCRTest;
+import org.apache.jackrabbit.test.NotExecutableException;
+import org.apache.jackrabbit.core.WorkspaceImpl;
+
+import javax.jcr.Node;
+import javax.jcr.RepositoryException;
+import javax.jcr.InvalidItemStateException;
+import javax.jcr.lock.LockException;
 
 /** <code>LockManagerTest</code>... */
 public class LockManagerTest extends AbstractJCRTest {
 
     private static Logger log = LoggerFactory.getLogger(LockManagerTest.class);
 
-    // TODO - timeout hint
-    // TODO - ownerInfo hint
-    
+    protected LockManager lockMgr;
+    protected Node testNode;
+    protected String testPath;
+
+    protected void setUp() throws Exception {
+        super.setUp();
+
+        testNode = testRootNode.addNode(nodeName1, testNodeType);
+        testRootNode.save();
+        testPath = testNode.getPath();
+
+        // TODO: rm cast and adjust call as soon as 283 is released
+        lockMgr = ((WorkspaceImpl) superuser.getWorkspace()).get283LockManager();
+    }
+
+    protected void tearDown() throws Exception  {
+        if (lockMgr != null && lockMgr.holdsLock(testPath)) {
+            lockMgr.unlock(testPath);
+        }
+        super.tearDown();
+    }
+
+    public void testLockNonLockable() throws NotExecutableException, RepositoryException {
+        if (testNode.isNodeType(mixLockable)) {
+            throw new NotExecutableException();
+        }
+        try {
+            lockMgr.lock(testPath, true, true, Long.MAX_VALUE, superuser.getUserID());
+            fail("Attempt to lock a non-lockable node must throw LockException.");
+        } catch (LockException e) {
+            // success
+        }
+    }
+
+    public void testLockWithPendingChanges() throws RepositoryException {
+        // transient modification
+        testNode.addNode(nodeName2);
+        try {
+            lockMgr.lock(testPath, true, true, Long.MAX_VALUE, superuser.getUserID());
+            fail("Attempt to lock a node with transient modifications must throw InvalidItemStateException.");
+        } catch (InvalidItemStateException e) {
+            // success
+        }
+    }
+
+    public void testNullOwnerHint() throws RepositoryException {
+        testNode.addMixin(mixLockable);
+        testRootNode.save();
+
+        Lock l = lockMgr.lock(testPath, true, true, Long.MAX_VALUE, null);
+        assertNotNull(l.getLockOwner());
+    }
 }
\ No newline at end of file
