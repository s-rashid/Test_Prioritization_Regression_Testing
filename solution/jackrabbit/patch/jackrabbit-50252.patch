diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SearchIndex.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SearchIndex.java
index de9fc4a..f3e312b 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SearchIndex.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SearchIndex.java
@@ -172,6 +172,11 @@ public class SearchIndex extends AbstractQueryHandler {
     public static final int DEFAULT_TERM_INFOS_INDEX_DIVISOR = 1;
 
     /**
+     * The default value for {@link #indexMergerPoolSize}.
+     */
+    public static final int DEFAULT_INDEX_MERGER_POOL_SIZE = 2;
+
+    /**
      * The path factory.
      */
     protected static final PathFactory PATH_FACTORY = PathFactoryImpl.getInstance();
@@ -445,6 +450,11 @@ public class SearchIndex extends AbstractQueryHandler {
     private boolean initializeHierarchyCache = true;
 
     /**
+     * The number of worker threads for merging index segments.
+     */
+    private int indexMergerPoolSize = DEFAULT_INDEX_MERGER_POOL_SIZE;
+
+    /**
      * Indicates if this <code>SearchIndex</code> is closed and cannot be used
      * anymore.
      */
@@ -731,6 +741,8 @@ public class SearchIndex extends AbstractQueryHandler {
     /**
      * This method returns the QueryNodeFactory used to parse Queries. This method
      * may be overridden to provide a customized QueryNodeFactory
+     *
+     * @return the query node factory.
      */
     protected DefaultQueryNodeFactory getQueryNodeFactory() {
         return DEFAULT_QUERY_NODE_FACTORY;
@@ -2169,6 +2181,26 @@ public class SearchIndex extends AbstractQueryHandler {
         this.initializeHierarchyCache = initializeHierarchyCache;
     }
 
+    /**
+     * @return the current size of the index merger pool.
+     */
+    public int getIndexMergerPoolSize() {
+        return indexMergerPoolSize;
+    }
+
+    /**
+     * Sets a new value for the index merger pool size.
+     *
+     * @param indexMergerPoolSize the number of worker threads.
+     * @throws IllegalArgumentException if the size is less than or equal 0.
+     */
+    public void setIndexMergerPoolSize(int indexMergerPoolSize) {
+        if (indexMergerPoolSize <= 0) {
+            throw new IllegalArgumentException("must be greater than 0");
+        }
+        this.indexMergerPoolSize = indexMergerPoolSize;
+    }
+
     //----------------------------< internal >----------------------------------
 
     /**
