diff --git a/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java b/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java
index beac8f4..8c8b23b 100644
--- a/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java
+++ b/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/logging/RepositoryServiceLogger.java
@@ -50,6 +50,8 @@ import org.apache.jackrabbit.spi.SessionInfo;
 import org.apache.jackrabbit.spi.Subscription;
 import org.apache.jackrabbit.spi.QNodeTypeDefinition;
 import org.apache.jackrabbit.spi.QValue;
+import org.apache.jackrabbit.spi.ChildInfo;
+import org.apache.jackrabbit.spi.ItemInfo;
 
 /**
  * Log wrapper for a {@link RepositoryService}.
@@ -107,8 +109,8 @@ public class RepositoryServiceLogger extends AbstractLogger implements Repositor
         }, "getQValueFactory()", new Object[]{});
     }
 
-    public Map getRepositoryDescriptors() throws RepositoryException {
-        return (Map) execute(new Callable() {
+    public Map<String, String> getRepositoryDescriptors() throws RepositoryException {
+        return (Map<String, String>) execute(new Callable() {
             public Object call() throws RepositoryException {
                 return service.getRepositoryDescriptors();
             }
@@ -165,12 +167,11 @@ public class RepositoryServiceLogger extends AbstractLogger implements Repositor
     public boolean isGranted(final SessionInfo sessionInfo, final ItemId itemId, final String[] actions)
             throws RepositoryException {
 
-        return ((Boolean) execute(new Callable() {
+        return (Boolean) execute(new Callable() {
             public Object call() throws RepositoryException {
                 return Boolean.valueOf(service.isGranted(unwrap(sessionInfo), itemId, actions));
             }
-        }, "isGranted(SessionInfo, ItemId, String[])", new Object[] { unwrap(sessionInfo), itemId, actions }))
-                .booleanValue();
+        }, "isGranted(SessionInfo, ItemId, String[])", new Object[] { unwrap(sessionInfo), itemId, actions });
     }
 
     public QNodeDefinition getNodeDefinition(final SessionInfo sessionInfo, final NodeId nodeId)
@@ -203,20 +204,20 @@ public class RepositoryServiceLogger extends AbstractLogger implements Repositor
         }, "getNodeInfo(SessionInfo, NodeId)", new Object[]{unwrap(sessionInfo), nodeId});
     }
 
-    public Iterator getItemInfos(final SessionInfo sessionInfo, final NodeId nodeId)
+    public Iterator<? extends ItemInfo> getItemInfos(final SessionInfo sessionInfo, final NodeId nodeId)
             throws RepositoryException {
 
-        return (Iterator) execute(new Callable() {
+        return (Iterator<? extends ItemInfo>) execute(new Callable() {
             public Object call() throws RepositoryException {
                 return service.getItemInfos(unwrap(sessionInfo), nodeId);
             }
         }, "getItemInfos(SessionInfo, NodeId)", new Object[]{unwrap(sessionInfo), nodeId});
     }
 
-    public Iterator getChildInfos(final SessionInfo sessionInfo, final NodeId parentId)
+    public Iterator<ChildInfo> getChildInfos(final SessionInfo sessionInfo, final NodeId parentId)
             throws RepositoryException {
 
-        return (Iterator) execute(new Callable() {
+        return (Iterator<ChildInfo>) execute(new Callable() {
             public Object call() throws RepositoryException {
                 return service.getChildInfos(unwrap(sessionInfo), parentId);
             }
@@ -224,7 +225,7 @@ public class RepositoryServiceLogger extends AbstractLogger implements Repositor
     }
 
     public Iterator<PropertyId> getReferences(final SessionInfo sessionInfo, final NodeId nodeId, final Name propertyName, final boolean weakReferences) throws RepositoryException {
-        return (Iterator) execute(new Callable() {
+        return (Iterator<PropertyId>) execute(new Callable() {
             public Object call() throws RepositoryException {
                 return service.getReferences(unwrap(sessionInfo), nodeId, propertyName, weakReferences);
             }
@@ -268,7 +269,7 @@ public class RepositoryServiceLogger extends AbstractLogger implements Repositor
                 return null;
             }
         }, "importXml(SessionInfo, NodeId, InputStream, int)",
-                new Object[]{unwrap(sessionInfo), parentId, xmlStream, new Integer(uuidBehaviour)});
+                new Object[]{unwrap(sessionInfo), parentId, xmlStream, uuidBehaviour});
     }
 
     public void move(final SessionInfo sessionInfo, final NodeId srcNodeId, final NodeId destParentNodeId,
@@ -317,8 +318,7 @@ public class RepositoryServiceLogger extends AbstractLogger implements Repositor
                 return null;
             }
         }, "clone(SessionInfo, String, NodeId, NodeId, Name, boolean)",
-                new Object[] { unwrap(sessionInfo), srcWorkspaceName, srcNodeId, destParentNodeId, destName,
-                Boolean.valueOf(removeExisting) });
+                new Object[] { unwrap(sessionInfo), srcWorkspaceName, srcNodeId, destParentNodeId, destName, removeExisting});
     }
 
     public LockInfo getLockInfo(final SessionInfo sessionInfo, final NodeId nodeId)
@@ -339,7 +339,7 @@ public class RepositoryServiceLogger extends AbstractLogger implements Repositor
                 return service.lock(unwrap(sessionInfo), nodeId, deep, sessionScoped);
             }
         }, "lock(SessionInfo, NodeId, boolean, boolean)",
-                new Object[]{unwrap(sessionInfo), nodeId, Boolean.valueOf(deep), Boolean.valueOf(sessionScoped)});
+                new Object[]{unwrap(sessionInfo), nodeId, deep, sessionScoped});
     }
 
     public LockInfo lock(final SessionInfo sessionInfo, final NodeId nodeId, final boolean deep,
@@ -352,7 +352,7 @@ public class RepositoryServiceLogger extends AbstractLogger implements Repositor
             }
         }, "lock(SessionInfo, NodeId, boolean, boolean, long, String)",
                 new Object[] { unwrap(sessionInfo),
-                nodeId, Boolean.valueOf(deep), Boolean.valueOf(sessionScoped), new Long(timeoutHint),
+                nodeId, deep, sessionScoped, timeoutHint,
                 ownerHint });
     }
 
@@ -427,7 +427,7 @@ public class RepositoryServiceLogger extends AbstractLogger implements Repositor
                 return null;
             }
         }, "restore(SessionInfo, NodeId, NodeId, boolean)",
-                new Object[]{unwrap(sessionInfo), nodeId, versionId, Boolean.valueOf(removeExisting)});
+                new Object[]{unwrap(sessionInfo), nodeId, versionId, removeExisting});
     }
 
     public void restore(final SessionInfo sessionInfo, final NodeId[] nodeIds, final boolean removeExisting)
@@ -439,29 +439,29 @@ public class RepositoryServiceLogger extends AbstractLogger implements Repositor
                 return null;
             }
         }, "restore(SessionInfo, NodeId[], boolean)",
-                new Object[]{unwrap(sessionInfo), nodeIds, Boolean.valueOf(removeExisting)});
+                new Object[]{unwrap(sessionInfo), nodeIds, removeExisting});
     }
 
-    public Iterator merge(final SessionInfo sessionInfo, final NodeId nodeId, final String srcWorkspaceName,
+    public Iterator<NodeId> merge(final SessionInfo sessionInfo, final NodeId nodeId, final String srcWorkspaceName,
             final boolean bestEffort) throws RepositoryException {
 
-        return (Iterator) execute(new Callable() {
+        return (Iterator<NodeId>) execute(new Callable() {
             public Object call() throws RepositoryException {
                 return service.merge(unwrap(sessionInfo), nodeId, srcWorkspaceName, bestEffort);
             }
         }, "merge(SessionInfo, NodeId, String, boolean)",
-                new Object[]{unwrap(sessionInfo), nodeId, srcWorkspaceName, Boolean.valueOf(bestEffort)});
+                new Object[]{unwrap(sessionInfo), nodeId, srcWorkspaceName, bestEffort});
     }
 
-    public Iterator merge(final SessionInfo sessionInfo, final NodeId nodeId, final String srcWorkspaceName,
+    public Iterator<NodeId> merge(final SessionInfo sessionInfo, final NodeId nodeId, final String srcWorkspaceName,
             final boolean bestEffort, final boolean isShallow) throws RepositoryException {
 
-        return (Iterator) execute(new Callable() {
+        return (Iterator<NodeId>) execute(new Callable() {
             public Object call() throws RepositoryException {
                 return service.merge(unwrap(sessionInfo), nodeId, srcWorkspaceName, bestEffort, isShallow);
             }
         }, "merge(SessionInfo, NodeId, String, boolean, boolean)",
-                new Object[]{unwrap(sessionInfo), nodeId, srcWorkspaceName, Boolean.valueOf(bestEffort)});
+                new Object[]{unwrap(sessionInfo), nodeId, srcWorkspaceName, bestEffort});
     }
 
     public void resolveMergeConflict(final SessionInfo sessionInfo, final NodeId nodeId,
@@ -485,7 +485,7 @@ public class RepositoryServiceLogger extends AbstractLogger implements Repositor
                 return null;
             }
         }, "addVersionLabel(SessionInfo, NodeId, NodeId, Name, boolean)",
-                new Object[]{unwrap(sessionInfo), versionHistoryId, versionId, label, Boolean.valueOf(moveLabel)});
+                new Object[]{unwrap(sessionInfo), versionHistoryId, versionId, label, moveLabel});
     }
 
     public void removeVersionLabel(final SessionInfo sessionInfo, final NodeId versionHistoryId,
@@ -543,7 +543,7 @@ public class RepositoryServiceLogger extends AbstractLogger implements Repositor
     }
 
     public void checkQueryStatement(final SessionInfo sessionInfo, final String statement,
-            final String language, final Map namespaces) throws RepositoryException {
+            final String language, final Map<String, String> namespaces) throws RepositoryException {
 
         execute(new Callable() {
             public Object call() throws RepositoryException {
@@ -555,7 +555,7 @@ public class RepositoryServiceLogger extends AbstractLogger implements Repositor
     }
 
     public QueryInfo executeQuery(final SessionInfo sessionInfo, final String statement,
-            final String language, final Map namespaces) throws RepositoryException {
+            final String language, final Map<String, String> namespaces) throws RepositoryException {
 
         return (QueryInfo) execute(new Callable() {
             public Object call() throws RepositoryException {
@@ -566,7 +566,7 @@ public class RepositoryServiceLogger extends AbstractLogger implements Repositor
     }
 
     public QueryInfo executeQuery(final SessionInfo sessionInfo, final String statement,
-                                  final String language, final Map namespaces, final long limit, final long offset, final Map<String, QValue> values) throws RepositoryException {
+                                  final String language, final Map<String, String> namespaces, final long limit, final long offset, final Map<String, QValue> values) throws RepositoryException {
 
         return (QueryInfo) execute(new Callable() {
             public Object call() throws RepositoryException {
@@ -586,8 +586,8 @@ public class RepositoryServiceLogger extends AbstractLogger implements Repositor
                        qnodeTypeName, noLocal);
             }
         }, "createEventFilter(SessionInfo, int, Path, boolean, String[], Name[], boolean)",
-                new Object[]{unwrap(sessionInfo), new Integer(eventTypes), absPath, Boolean.valueOf(isDeep), uuid,
-                qnodeTypeName, Boolean.valueOf(noLocal)});
+                new Object[]{unwrap(sessionInfo), eventTypes, absPath, isDeep, uuid,
+                qnodeTypeName, noLocal});
     }
 
     public Subscription createSubscription(final SessionInfo sessionInfo, final EventFilter[] filters)
@@ -605,7 +605,7 @@ public class RepositoryServiceLogger extends AbstractLogger implements Repositor
             throws RepositoryException, InterruptedException {
 
         final String methodName = "getEvents(Subscription, long)";
-        final Object[] args = new Object[]{subscription, new Long(timeout)};
+        final Object[] args = new Object[]{subscription, timeout};
         final InterruptedException[] ex = new InterruptedException[1];
 
         EventBundle[] result = (EventBundle[]) execute(new Callable() {
@@ -648,8 +648,8 @@ public class RepositoryServiceLogger extends AbstractLogger implements Repositor
         }, "dispose(Subscription)", new Object[]{});
     }
 
-    public Map getRegisteredNamespaces(final SessionInfo sessionInfo) throws RepositoryException {
-        return (Map) execute(new Callable() {
+    public Map<String, String> getRegisteredNamespaces(final SessionInfo sessionInfo) throws RepositoryException {
+        return (Map<String, String>) execute(new Callable() {
             public Object call() throws RepositoryException {
                 return service.getRegisteredNamespaces(unwrap(sessionInfo));
             }
@@ -697,15 +697,15 @@ public class RepositoryServiceLogger extends AbstractLogger implements Repositor
         }, "unregisterNamespace(SessionInfo, String)", new Object[]{unwrap(sessionInfo), uri});
     }
 
-    public Iterator getQNodeTypeDefinitions(final SessionInfo sessionInfo) throws RepositoryException {
-        return (Iterator) execute(new Callable() {
+    public Iterator<QNodeTypeDefinition> getQNodeTypeDefinitions(final SessionInfo sessionInfo) throws RepositoryException {
+        return (Iterator<QNodeTypeDefinition>) execute(new Callable() {
             public Object call() throws RepositoryException {
                 return service.getQNodeTypeDefinitions(unwrap(sessionInfo));
             }
         }, "getQNodeTypeDefinitions(SessionInfo)", new Object[]{unwrap(sessionInfo)});
     }
 
-    public Iterator getQNodeTypeDefinitions(final SessionInfo sessionInfo, final Name[] nodetypeNames)
+    public Iterator<QNodeTypeDefinition> getQNodeTypeDefinitions(final SessionInfo sessionInfo, final Name[] nodetypeNames)
             throws RepositoryException {
 
         return (Iterator) execute(new Callable() {
