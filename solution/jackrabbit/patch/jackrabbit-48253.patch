diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/CacheManager.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/CacheManager.java
index bda60bb..d4d0b28 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/CacheManager.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/state/CacheManager.java
@@ -17,7 +17,6 @@
 package org.apache.jackrabbit.core.state;
 
 import java.util.ArrayList;
-import java.util.Iterator;
 import java.util.WeakHashMap;
 
 import org.slf4j.Logger;
@@ -51,7 +50,7 @@ public class CacheManager implements CacheAccessListener {
     private static final long DEFAULT_MAX_MEMORY_PER_CACHE = 4 * 1024 * 1024;
 
     /** The set of caches (weakly referenced). */
-    private WeakHashMap caches = new WeakHashMap();
+    private WeakHashMap<Cache, Object> caches = new WeakHashMap<Cache, Object>();
 
     /** The default minimum resize interval (in ms). */
     private static final int DEFAULT_MIN_RESIZE_INTERVAL = 1000;
@@ -139,10 +138,10 @@ public class CacheManager implements CacheAccessListener {
         // entries in a weak hash map may disappear any time
         // so can't use size() / keySet() directly
         // only using the iterator guarantees that we don't get null references
-        ArrayList list = new ArrayList();
+        ArrayList<Cache> list = new ArrayList<Cache>();
         synchronized (caches) {
-            for (Iterator it = caches.keySet().iterator(); it.hasNext();) {
-                list.add(it.next());
+            for (Cache c: caches.keySet()) {
+                list.add(c);
             }
         }
         if (list.size() == 0) {
@@ -156,9 +155,9 @@ public class CacheManager implements CacheAccessListener {
         // calculate the total access count and memory used
         long totalAccessCount = 0;
         long totalMemoryUsed = 0;
-        for (int i = 0; i < infos.length; i++) {
-            totalAccessCount += infos[i].getAccessCount();
-            totalMemoryUsed += infos[i].getMemoryUsed();
+        for (CacheInfo info : infos) {
+            totalAccessCount += info.getAccessCount();
+            totalMemoryUsed += info.getMemoryUsed();
         }
         // try to distribute the memory based on the access count
         // and memory used (higher numbers - more memory)
@@ -170,8 +169,7 @@ public class CacheManager implements CacheAccessListener {
         double memoryPerUsed = (double) maxMemory / 2.
                 / Math.max(1., (double) totalMemoryUsed);
         int fullCacheCount = 0;
-        for (int i = 0; i < infos.length; i++) {
-            CacheInfo info = infos[i];
+        for (CacheInfo info : infos) {
             long mem = (long) (memoryPerAccess * info.getAccessCount());
             mem += (long) (memoryPerUsed * info.getMemoryUsed());
             mem = Math.min(mem, maxMemoryPerCache);
@@ -186,13 +184,12 @@ public class CacheManager implements CacheAccessListener {
         }
         // calculate the unused memory
         long unusedMemory = maxMemory;
-        for (int i = 0; i < infos.length; i++) {
-            unusedMemory -= infos[i].getMemory();
+        for (CacheInfo info : infos) {
+            unusedMemory -= info.getMemory();
         }
         // distribute the remaining memory evenly across the full caches
         if (unusedMemory > 0 && fullCacheCount > 0) {
-            for (int i = 0; i < infos.length; i++) {
-                CacheInfo info = infos[i];
+            for (CacheInfo info : infos) {
                 if (info.wasFull()) {
                     info.setMemory(info.getMemory() + unusedMemory
                             / fullCacheCount);
@@ -200,8 +197,7 @@ public class CacheManager implements CacheAccessListener {
             }
         }
         // set the new limit
-        for (int i = 0; i < infos.length; i++) {
-            CacheInfo info = infos[i];
+        for (CacheInfo info : infos) {
             Cache cache = info.getCache();
             if (log.isDebugEnabled()) {
                 log.debug(cache + " now:" + cache.getMaxMemorySize() + " used:"
