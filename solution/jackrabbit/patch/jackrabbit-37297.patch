diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/nodetype/NodeTypeManagerImpl.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/nodetype/NodeTypeManagerImpl.java
index 179e5d5..1a8dc62 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/nodetype/NodeTypeManagerImpl.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/nodetype/NodeTypeManagerImpl.java
@@ -17,35 +17,46 @@
 package org.apache.jackrabbit.core.nodetype;
 
 import org.apache.commons.collections.map.ReferenceMap;
+import org.apache.jackrabbit.api.JackrabbitNodeTypeManager;
 import org.apache.jackrabbit.conversion.NameException;
-import org.apache.jackrabbit.spi.Name;
 import org.apache.jackrabbit.conversion.NamePathResolver;
-import org.apache.jackrabbit.util.IteratorHelper;
-import org.apache.jackrabbit.namespace.NamespaceMapping;
-import org.apache.jackrabbit.namespace.NamespaceResolver;
-import org.apache.jackrabbit.api.JackrabbitNodeTypeManager;
 import org.apache.jackrabbit.core.NamespaceRegistryImpl;
 import org.apache.jackrabbit.core.data.DataStore;
 import org.apache.jackrabbit.core.nodetype.compact.CompactNodeTypeDefReader;
 import org.apache.jackrabbit.core.nodetype.compact.ParseException;
+import org.apache.jackrabbit.core.nodetype.jsr283.InvalidNodeTypeDefinitionException;
+import org.apache.jackrabbit.core.nodetype.jsr283.NodeDefinitionTemplate;
+import org.apache.jackrabbit.core.nodetype.jsr283.NodeTypeDefinition;
+import org.apache.jackrabbit.core.nodetype.jsr283.NodeTypeExistsException;
+import org.apache.jackrabbit.core.nodetype.jsr283.NodeTypeTemplate;
+import org.apache.jackrabbit.core.nodetype.jsr283.PropertyDefinitionTemplate;
 import org.apache.jackrabbit.core.nodetype.xml.NodeTypeReader;
 import org.apache.jackrabbit.core.util.Dumpable;
+import org.apache.jackrabbit.core.value.InternalValue;
+import org.apache.jackrabbit.namespace.NamespaceMapping;
+import org.apache.jackrabbit.namespace.NamespaceResolver;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.util.IteratorHelper;
 import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
 
+import javax.jcr.NamespaceException;
 import javax.jcr.RepositoryException;
 import javax.jcr.UnsupportedRepositoryOperationException;
-import javax.jcr.NamespaceException;
+import javax.jcr.Value;
+import javax.jcr.ValueFormatException;
 import javax.jcr.nodetype.NoSuchNodeTypeException;
+import javax.jcr.nodetype.NodeDefinition;
 import javax.jcr.nodetype.NodeType;
 import javax.jcr.nodetype.NodeTypeIterator;
-
+import javax.jcr.nodetype.PropertyDefinition;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.PrintStream;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collection;
 import java.util.Collections;
 import java.util.Enumeration;
 import java.util.HashMap;
@@ -291,7 +302,7 @@ public class NodeTypeManagerImpl implements JackrabbitNodeTypeManager,
                 ArrayList nodeTypes = new ArrayList();
 
                 // register new node types
-                nodeTypes.addAll(Arrays.asList(registerNodeTypes(newNodeTypeDefs)));
+                nodeTypes.addAll(registerNodeTypes(newNodeTypeDefs));
 
                 // reregister already existing node types
                 for (Iterator iter = registeredNodeTypeDefs.iterator(); iter.hasNext();) {
@@ -301,7 +312,8 @@ public class NodeTypeManagerImpl implements JackrabbitNodeTypeManager,
                 }
                 return (NodeType[]) nodeTypes.toArray(new NodeType[nodeTypes.size()]);
             } else {
-                return registerNodeTypes(nodeTypeDefs);
+                Collection types = registerNodeTypes(nodeTypeDefs);
+                return (NodeType[]) types.toArray(new NodeType[types.size()]);
             }
 
         } catch (InvalidNodeTypeDefException e) {
@@ -430,14 +442,14 @@ public class NodeTypeManagerImpl implements JackrabbitNodeTypeManager,
 
     /**
      * Internal helper method for registering a list of node type definitions.
-     * Returns an array containing the registered node types.
+     * Returns a collection containing the registered node types.
      *
      * @param defs a collection of <code>NodeTypeDef<code> objects
      * @returns registered node types
      * @throws InvalidNodeTypeDefException
      * @throws RepositoryException
      */
-    private NodeType[] registerNodeTypes(List defs)
+    private Collection registerNodeTypes(List defs)
             throws InvalidNodeTypeDefException, RepositoryException {
         ntReg.registerNodeTypes(defs);
 
@@ -451,7 +463,7 @@ public class NodeTypeManagerImpl implements JackrabbitNodeTypeManager,
                 // ignore
             }
         }
-        return (NodeType[]) types.toArray(new NodeType[types.size()]);
+        return types;
     }
 
     /**
@@ -507,6 +519,444 @@ public class NodeTypeManagerImpl implements JackrabbitNodeTypeManager,
         }
     }
 
+    //--------------------------------------------------< new JSR 283 methods >
+    /**
+     * Returns an empty <code>NodeTypeTemplate</code> which can then be used to
+     * define a node type and passed to
+     * <code>NodeTypeManager.registerNodeType</code>.
+     * <p/>
+     * Throws an <code>UnsupportedRepositoryOperationException</code> if this
+     * implementation does not support node type registration.
+     * @return A <code>NodeTypeTemplate</code>.
+     * @throws UnsupportedRepositoryOperationException if this implementation
+     *  does not support node type registration.
+     * @throws RepositoryException if another error occurs.
+     * @since JCR 2.0
+     */
+    public NodeTypeTemplate createNodeTypeTemplate()
+            throws UnsupportedRepositoryOperationException, RepositoryException {
+        return new NodeTypeTemplateImpl();
+    }
+
+    /**
+     * Returns a <code>NodeTypeTemplate</code> holding the specified node type
+     * definition. This template can then be altered and passed to
+     * <code>NodeTypeManager.registerNodeType</code>.
+     * <p/>
+     * Throws an <code>UnsupportedRepositoryOperationException</code> if this
+     * implementation does not support node type registration.
+     *
+     * @param ntd a <code>NodeTypeDefinition</code>.
+     * @return A <code>NodeTypeTemplate</code>.
+     * @throws UnsupportedRepositoryOperationException if this implementation
+     *  does not support node type registration.
+     * @throws RepositoryException if another error occurs.
+     * @since JCR 2.0
+     */
+    public NodeTypeTemplate createNodeTypeTemplate(NodeTypeDefinition ntd)
+            throws UnsupportedRepositoryOperationException, RepositoryException {
+        return new NodeTypeTemplateImpl(ntd);
+    }
+
+    /**
+     * Returns an empty <code>NodeDefinitionTemplate</code> which can then be
+     * used to create a child node definition and attached to a
+     * <code>NodeTypeTemplate</code>.
+     * <p/>
+     * Throws an <code>UnsupportedRepositoryOperationException</code> if this
+     * implementation does not support node type registration.
+     *
+     * @return A <code>NodeDefinitionTemplate</code>.
+     * @throws UnsupportedRepositoryOperationException if this implementation
+     *  does not support node type registration.
+     * @throws RepositoryException if another error occurs.
+     * @since JCR 2.0
+     */
+    public NodeDefinitionTemplate createNodeDefinitionTemplate()
+            throws UnsupportedRepositoryOperationException, RepositoryException {
+        return new NodeDefinitionTemplateImpl(this);
+    }
+
+    /**
+     * Returns an empty <code>PropertyDefinitionTemplate</code> which can then
+     * be used to create a property definition and attached to a
+     * <code>NodeTypeTemplate</code>.
+     * <p/>
+     * Throws an <code>UnsupportedRepositoryOperationException</code> if this
+     * implementation does not support node type registration.
+     *
+     * @return A <code>PropertyDefinitionTemplate</code>.
+     * @throws UnsupportedRepositoryOperationException if this implementation
+     *  does not support node type registration.
+     * @throws RepositoryException if another error occurs.
+     * @since JCR 2.0
+     */
+    public PropertyDefinitionTemplate createPropertyDefinitionTemplate()
+            throws UnsupportedRepositoryOperationException, RepositoryException {
+        return new PropertyDefinitionTemplateImpl();
+    }
+
+    /**
+     * Registers a new node type or updates an existing node type using the
+     * specified definition and returns the resulting <code>NodeType</code>
+     * object.
+     * <p/>
+     * Typically, the object passed to this method will be a
+     * <code>NodeTypeTemplate</code> (a subclass of
+     * <code>NodeTypeDefinition</code>) acquired from
+     * <code>NodeTypeManager.createNodeTypeTemplate</code> and then filled-in
+     * with definition information.
+     * <p/>
+     * Throws an <code>InvalidNodeTypeDefinitionException</code> if the
+     * <code>NodeTypeDefinition</code> is invalid.
+     * <p/>
+     * Throws a <code>NodeTypeExistsException</code> if <code>allowUpdate</code>
+     * is <code>false</code> and the <code>NodeTypeDefinition</code> specifies a
+     * node type name that is already registered.
+     * <p/>
+     * Throws an <code>UnsupportedRepositoryOperationException</code> if this
+     * implementation does not support node type registration.
+     *
+     * @param ntd an <code>NodeTypeDefinition</code>.
+     * @param allowUpdate a boolean
+     * @return the registered node type
+     * @throws InvalidNodeTypeDefinitionException if the
+     *  <code>NodeTypeDefinition</code> is invalid.
+     * @throws NodeTypeExistsException if <code>allowUpdate</code> is
+     *  <code>false</code> and the <code>NodeTypeDefinition</code> specifies a
+     *  node type name that is already registered.
+     * @throws UnsupportedRepositoryOperationException if this implementation
+     *  does not support node type registration.
+     * @throws RepositoryException if another error occurs.
+     * @since JCR 2.0
+     */
+    public NodeType registerNodeType(NodeTypeDefinition ntd, boolean allowUpdate)
+            throws InvalidNodeTypeDefinitionException, NodeTypeExistsException,
+            UnsupportedRepositoryOperationException, RepositoryException {
+        HashSet defs = new HashSet();
+        defs.add(ntd);
+        return (NodeType) registerNodeTypes(defs, allowUpdate).next();
+    }
+
+    /**
+     * Registers or updates the specified <code>Collection</code> of
+     * <code>NodeTypeDefinition</code> objects. This method is used to register
+     * or update a set of node types with mutual dependencies. Returns an
+     * iterator over the resulting <code>NodeType</code> objects.
+     * <p/>
+     * The effect of the method is "all or nothing"; if an error occurs, no node
+     * types are registered or updated.
+     * <p/>
+     * Throws an <code>InvalidNodeTypeDefinitionException</code> if a
+     * <code>NodeTypeDefinition</code> within the <code>Collection</code> is
+     * invalid or if the <code>Collection</code> contains an object of a type
+     * other than <code>NodeTypeDefinition</code>.
+     * <p/>
+     * Throws a <code>NodeTypeExistsException</code> if <code>allowUpdate</code>
+     * is <code>false</code> and a <code>NodeTypeDefinition</code> within the
+     * <code>Collection</code> specifies a node type name that is already
+     * registered.
+     * <p/>
+     * Throws an <code>UnsupportedRepositoryOperationException</code> if this
+     * implementation does not support node type registration.
+     *
+     * @param definitions a collection of <code>NodeTypeDefinition</code>s
+     * @param allowUpdate a boolean
+     * @return the registered node types.
+     * @throws InvalidNodeTypeDefinitionException if a
+     *  <code>NodeTypeDefinition</code> within the <code>Collection</code> is
+     *  invalid or if the <code>Collection</code> contains an object of a type
+     *  other than <code>NodeTypeDefinition</code>.
+     * @throws NodeTypeExistsException if <code>allowUpdate</code> is
+     *  <code>false</code> and a <code>NodeTypeDefinition</code> within the
+     *  <code>Collection</code> specifies a node type name that is already
+     *  registered.
+     * @throws UnsupportedRepositoryOperationException if this implementation
+     *  does not support node type registration.
+     * @throws RepositoryException if another error occurs.
+     * @since JCR 2.0
+     */
+    public NodeTypeIterator registerNodeTypes(Collection definitions,
+                                              boolean allowUpdate)
+            throws InvalidNodeTypeDefinitionException, NodeTypeExistsException,
+            UnsupportedRepositoryOperationException, RepositoryException {
+        // split the node types into new and already registered node types.
+        // this way we can register new node types together with already
+        // registered node types which make circular dependencies possible
+        List addedDefs = new ArrayList();
+        List modifiedDefs = new ArrayList();
+        for (Iterator iter = definitions.iterator(); iter.hasNext();) {
+            NodeTypeDefinition definition = (NodeTypeDefinition) iter.next();
+            // convert to NodeTypeDef
+            NodeTypeDef def = toNodeTypeDef(definition);
+            if (ntReg.isRegistered(def.getName())) {
+              if (allowUpdate) {
+                  modifiedDefs.add(def);
+              } else {
+                  throw new NodeTypeExistsException(definition.getName());
+              }
+            } else {
+                addedDefs.add(def);
+            }
+        }
+
+        try {
+            ArrayList result = new ArrayList();
+
+            // register new node types
+            Collection registeredDefs = registerNodeTypes(addedDefs);
+            for (Iterator iter = registeredDefs.iterator(); iter.hasNext();) {
+                NodeTypeDef nodeTypeDef = (NodeTypeDef) iter.next();
+                result.add(getNodeType(nodeTypeDef.getName()));
+            }
+
+            // reregister already existing node types
+            for (Iterator iter = modifiedDefs.iterator(); iter.hasNext();) {
+                NodeTypeDef nodeTypeDef = (NodeTypeDef) iter.next();
+                ntReg.reregisterNodeType(nodeTypeDef);
+                result.add(getNodeType(nodeTypeDef.getName()));
+            }
+            return new IteratorHelper(result);
+        } catch (InvalidNodeTypeDefException e) {
+            throw new InvalidNodeTypeDefinitionException(e.getMessage());
+        }
+    }
+
+    /**
+     * Unregisters the specified node type.
+     * <p/>
+     * Throws a <code>NoSuchNodeTypeException</code> if no registered node type
+     * exists with the specified name.
+     *
+     * @param name a <code>String</code>.
+     * @throws UnsupportedRepositoryOperationException if this implementation
+     *  does not support node type registration.
+     * @throws NoSuchNodeTypeException if no registered node type exists with
+     *  the specified name.
+     * @throws RepositoryException if another error occurs.
+     * @since JCR 2.0
+     */
+    public void unregisterNodeType(String name)
+            throws UnsupportedRepositoryOperationException,
+            NoSuchNodeTypeException, RepositoryException {
+        unregisterNodeTypes(new String[] {name});
+    }
+
+    /**
+     * Unregisters the specified set of node types. Used to unregister a set of node types with mutual dependencies.
+     * <p/>
+     * Throws a <code>NoSuchNodeTypeException</code> if one of the names listed is not a registered node type.
+     * <p/>
+     * Throws an <code>UnsupportedRepositoryOperationException</code> if this implementation does not support node type registration.
+     *
+     * @param names a <code>String</code> array
+     * @throws UnsupportedRepositoryOperationException if this implementation does not support node type registration.
+     * @throws NoSuchNodeTypeException if one of the names listed is not a registered node type.
+     * @throws RepositoryException if another error occurs.
+     * @since JCR 2.0
+     */
+    public void unregisterNodeTypes(String[] names)
+            throws UnsupportedRepositoryOperationException,
+            NoSuchNodeTypeException, RepositoryException {
+        HashSet ntNames = new HashSet();
+        for (int i = 0; i < names.length; i++) {
+            try {
+                ntNames.add(resolver.getQName(names[i]));
+            } catch (NamespaceException e) {
+                throw new RepositoryException("Invalid name: " + names[i], e);
+            } catch (NameException e) {
+                throw new RepositoryException("Invalid name: " + names[i], e);
+            }
+        }
+        getNodeTypeRegistry().unregisterNodeTypes(ntNames);
+    }
+
+    /**
+     * Internal helper method for converting a <code>NodeTypeDefinition</code>
+     * (using prefixed JCR names) to a <code>NodeTypeDef</code> (using
+     * namespace-qualified names).
+     *  
+     * @param definition
+     * @return a <code>NodeTypeDef</code>
+     * @throws InvalidNodeTypeDefinitionException
+     * @throws RepositoryException
+     */
+    private NodeTypeDef toNodeTypeDef(NodeTypeDefinition definition)
+            throws InvalidNodeTypeDefinitionException, RepositoryException {
+        NodeTypeDef def = new NodeTypeDef();
+
+        // name
+        String name = definition.getName();
+        if (name == null) {
+            throw new InvalidNodeTypeDefinitionException("No node type name specified");
+        }
+        try {
+            def.setName(resolver.getQName(name));
+        } catch (NamespaceException e) {
+            throw new InvalidNodeTypeDefinitionException("Invalid name: " + name, e);
+        } catch (NameException e) {
+            throw new InvalidNodeTypeDefinitionException("Invalid name: " + name, e);
+        }
+
+        // supertypes
+        String[] names = definition.getDeclaredSupertypeNames();
+        Name[] qnames = new Name[names.length];
+        for (int i = 0; i < names.length; i++) {
+            try {
+                qnames[i] = resolver.getQName(names[i]);
+            } catch (NamespaceException e) {
+                throw new InvalidNodeTypeDefinitionException("Invalid supertype name: " + names[i], e);
+            } catch (NameException e) {
+                throw new InvalidNodeTypeDefinitionException("Invalid supertype name: " + names[i], e);
+            }
+        }
+        def.setSupertypes(qnames);
+
+        // primary item
+        name = definition.getPrimaryItemName();
+        if (name != null) {
+            try {
+                def.setPrimaryItemName(resolver.getQName(name));
+            } catch (NamespaceException e) {
+                throw new InvalidNodeTypeDefinitionException("Invalid primary item name: " + name, e);
+            } catch (NameException e) {
+                throw new InvalidNodeTypeDefinitionException("Invalid primary item name: " + name, e);
+            }
+        }
+
+        // misc. flags
+        def.setMixin(definition.isMixin());
+        def.setAbstract(definition.isAbstract());
+        def.setOrderableChildNodes(definition.hasOrderableChildNodes());
+
+        // child nodes
+        NodeDefinition[] ndefs = definition.getDeclaredChildNodeDefinitions();
+        if (ndefs != null) {
+            NodeDef[] qndefs = new NodeDef[ndefs.length];
+            for (int i = 0; i < ndefs.length; i++) {
+                NodeDefImpl qndef = new NodeDefImpl();
+                // name
+                name = ndefs[i].getName();
+                if (name != null) {
+                    if (name.equals("*")) {
+                        qndef.setName(ItemDef.ANY_NAME);
+                    } else {
+                        try {
+                            qndef.setName(resolver.getQName(name));
+                        } catch (NamespaceException e) {
+                            throw new InvalidNodeTypeDefinitionException("Invalid node name: " + name, e);
+                        } catch (NameException e) {
+                            throw new InvalidNodeTypeDefinitionException("Invalid node name: " + name, e);
+                        }
+                    }
+                }
+                // default primary type
+                //name = ndefs[i].getDefaultPrimaryTypeName();
+                // FIXME when JCR 2.0 API has been finalized
+                name = ((NodeDefinitionTemplateImpl) ndefs[i]).getDefaultPrimaryTypeName();
+                if (name != null) {
+                    try {
+                        qndef.setDefaultPrimaryType(resolver.getQName(name));
+                    } catch (NamespaceException e) {
+                        throw new InvalidNodeTypeDefinitionException("Invalid default primary type: " + name, e);
+                    } catch (NameException e) {
+                        throw new InvalidNodeTypeDefinitionException("Invalid default primary type: " + name, e);
+                    }
+                }
+                // required primary types
+                //names = ndefs[i].getRequiredPrimaryTypeNames();
+                // FIXME when JCR 2.0 API has been finalized
+                names = ((NodeDefinitionTemplateImpl) ndefs[i]).getRequiredPrimaryTypeNames();
+                qnames = new Name[names.length];
+                for (int j = 0; i < names.length; j++) {
+                    try {
+                        qnames[i] = resolver.getQName(names[i]);
+                    } catch (NamespaceException e) {
+                        throw new InvalidNodeTypeDefinitionException("Invalid required primary type: " + names[i], e);
+                    } catch (NameException e) {
+                        throw new InvalidNodeTypeDefinitionException("Invalid required primary type: " + names[i], e);
+                    }
+                }
+                qndef.setRequiredPrimaryTypes(qnames);
+
+                // misc. flags/attributes
+                qndef.setAutoCreated(ndefs[i].isAutoCreated());
+                qndef.setMandatory(ndefs[i].isMandatory());
+                qndef.setProtected(ndefs[i].isProtected());
+                qndef.setOnParentVersion(ndefs[i].getOnParentVersion());
+                qndef.setAllowsSameNameSiblings(ndefs[i].allowsSameNameSiblings());
+
+                qndefs[i] = qndef;
+            }
+            def.setChildNodeDefs(qndefs);
+        }
+
+        // properties
+        PropertyDefinition[] pdefs = definition.getDeclaredPropertyDefinitions();
+        if (pdefs != null) {
+            PropDef[] qpdefs = new PropDef[pdefs.length];
+            for (int i = 0; i < pdefs.length; i++) {
+                PropDefImpl qpdef = new PropDefImpl();
+                // name
+                name = pdefs[i].getName();
+                if (name != null) {
+                    if (name.equals("*")) {
+                        qpdef.setName(ItemDef.ANY_NAME);
+                    } else {
+                        try {
+                            qpdef.setName(resolver.getQName(name));
+                        } catch (NamespaceException e) {
+                            throw new InvalidNodeTypeDefinitionException("Invalid property name: " + name, e);
+                        } catch (NameException e) {
+                            throw new InvalidNodeTypeDefinitionException("Invalid property name: " + name, e);
+                        }
+                    }
+                }
+                // misc. flags/attributes
+                int type = pdefs[i].getRequiredType();
+                qpdef.setRequiredType(type);
+                qpdef.setAutoCreated(pdefs[i].isAutoCreated());
+                qpdef.setMandatory(pdefs[i].isMandatory());
+                qpdef.setProtected(pdefs[i].isProtected());
+                qpdef.setOnParentVersion(pdefs[i].getOnParentVersion());
+                qpdef.setMultiple(pdefs[i].isMultiple());
+                // value constraints
+                String[] constraints = pdefs[i].getValueConstraints();
+                if (constraints != null) {
+                    ValueConstraint[] qconstraints = new ValueConstraint[constraints.length];
+                    for (int j = 0; j < constraints.length; j++) {
+                        try {
+                            qconstraints[j] = ValueConstraint.create(type, constraints[i], resolver);
+                        } catch (InvalidConstraintException e) {
+                            throw new InvalidNodeTypeDefinitionException(
+                                    "Invalid value constraint " + constraints[i], e);
+                        }
+                    }
+                    qpdef.setValueConstraints(qconstraints);
+                }
+                // default values
+                Value[] values = pdefs[i].getDefaultValues();
+                if (values != null) {
+                    InternalValue[] qvalues = new InternalValue[values.length];
+                    for (int j = 0; j < values.length; j++) {
+                        try {
+                            qvalues[j] = InternalValue.create(values[i], resolver);
+                        } catch (ValueFormatException e) {
+                            throw new InvalidNodeTypeDefinitionException(
+                                    "Invalid default value format", e);
+                        }
+                    }
+                    qpdef.setDefaultValues(qvalues);
+                }
+
+                qpdefs[i] = qpdef;
+            }
+            def.setPropertyDefs(qpdefs);
+        }
+
+        return def;
+    }
+
     //-------------------------------------------------------------< Dumpable >
     /**
      * {@inheritDoc}
