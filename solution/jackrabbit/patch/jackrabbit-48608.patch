diff --git a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/simple/CheckoutTest.java b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/simple/CheckoutTest.java
index bf57977..5962838 100644
--- a/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/simple/CheckoutTest.java
+++ b/jackrabbit-jcr-tests/src/main/java/org/apache/jackrabbit/test/api/version/simple/CheckoutTest.java
@@ -20,6 +20,7 @@ import javax.jcr.ItemNotFoundException;
 import javax.jcr.Node;
 import javax.jcr.RepositoryException;
 import javax.jcr.UnsupportedRepositoryOperationException;
+import javax.jcr.version.VersionManager;
 
 /**
  * <code>SVCheckoutTest</code> covers tests related to {@link
@@ -34,68 +35,140 @@ import javax.jcr.UnsupportedRepositoryOperationException;
 public class CheckoutTest extends AbstractVersionTest {
 
     protected void setUp() throws Exception {
-        super.setUp();
+         super.setUp();
 
-        if (!versionableNode.isCheckedOut()) {
-            fail("A versionable node must be checked-out after persistent creation.");
-        }
-        versionableNode.checkin();
-    }
+         VersionManager versionManager = versionableNode.getSession().getWorkspace().getVersionManager();
+         String path = versionableNode.getPath();
+         if (!versionManager.isCheckedOut(path)) {
+             fail("A versionable node must be checked-out after persistent creation.");
+         }
+         if (!versionableNode.isCheckedOut()) {
+             fail("A versionable node must be checked-out after persistent creation.");
+         }
+         versionManager.checkin(path);
+     }
 
-    /**
-     * Test if Node.isCheckedOut() returns true, if the versionable node has
-     * been checked out before.
-     */
-    public void testIsCheckedOut() throws RepositoryException {
-        versionableNode.checkout();
-        assertTrue("After calling Node.checkout() a versionable node N, N.isCheckedOut() must return true.", versionableNode.isCheckedOut());
-    }
+     /**
+      * Test if Node.isCheckedOut() returns true, if the versionable node has
+      * been checked out before.
+      */
+     public void testIsCheckedOut() throws RepositoryException {
+         versionableNode.checkout();
+         assertTrue("After calling Node.checkout() a versionable node N, N.isCheckedOut() must return true.", versionableNode.isCheckedOut());
+     }
 
-    /**
-     * Test calling Node.isCheckedOut() on a non-versionable.
-     */
-    public void testIsCheckedOutNonVersionableNode() throws RepositoryException {
-        boolean isCheckedOut = nonVersionableNode.isCheckedOut();
-        Node vParent = null;
-        try {
-            vParent = nonVersionableNode.getParent();
-            while (!vParent.isNodeType(mixVersionable)) {
-                vParent = vParent.getParent();
-            }
-        } catch (ItemNotFoundException e) {
-            // root reached.
-        }
+     /**
+      * Test if VersionManager.isCheckedOut(P) returns true if P is the
+      * absolute path of a versionable node that has been checked out before.
+      */
+     public void testIsCheckedOutJcr2() throws RepositoryException {
+         VersionManager versionManager = versionableNode.getSession().getWorkspace().getVersionManager();
+         String path = versionableNode.getPath();
+         versionManager.checkout(path);
+         assertTrue("After successfully calling VersionManager.checkout(P) with P denoting the absolute path of a versionable node, VersionManager.isCheckedOut(P) must return true.", versionManager.isCheckedOut(path));
+     }
 
-        if (vParent != null && vParent.isNodeType(mixVersionable)) {
-            if (vParent.isCheckedOut()) {
-                assertTrue("Node.isCheckedOut() must return true if the node is non-versionable and its nearest versionable ancestor is checked-out.", isCheckedOut);
-            } else {
-                assertFalse("Node.isCheckedOut() must return false if the node is non-versionable and its nearest versionable ancestor is checked-in.", isCheckedOut);
-            }
-        } else {
-            assertTrue("Node.isCheckedOut() must return true if the node is non-versionable and has no versionable ancestor", isCheckedOut);
-        }
-    }
+     /**
+      * Test calling Node.isCheckedOut() on a non-versionable.
+      */
+     public void testIsCheckedOutNonVersionableNode() throws RepositoryException {
+         boolean isCheckedOut = nonVersionableNode.isCheckedOut();
+         Node vParent = null;
+         try {
+             vParent = nonVersionableNode.getParent();
+             while (!vParent.isNodeType(mixVersionable)) {
+                 vParent = vParent.getParent();
+             }
+         } catch (ItemNotFoundException e) {
+             // root reached.
+         }
 
-    /**
-     * Test calling Node.checkout() on a non-versionable node.
-     */
-    public void testCheckoutNonVersionableNode() throws RepositoryException {
-        try {
-            nonVersionableNode.checkout();
-            fail("Node.checkout() on a non versionable node must throw UnsupportedRepositoryOperationException");
-        } catch (UnsupportedRepositoryOperationException e) {
-            //success
-        }
-    }
+         if (vParent != null && vParent.isNodeType(mixVersionable)) {
+             if (vParent.isCheckedOut()) {
+                 assertTrue("Node.isCheckedOut() must return true if the node is non-versionable and its nearest versionable ancestor is checked-out.", isCheckedOut);
+             } else {
+                 assertFalse("Node.isCheckedOut() must return false if the node is non-versionable and its nearest versionable ancestor is checked-in.", isCheckedOut);
+             }
+         } else {
+             assertTrue("Node.isCheckedOut() must return true if the node is non-versionable and has no versionable ancestor", isCheckedOut);
+         }
+     }
 
-    /**
-     * Test if Node.checkout() doesn't throw any exception if the versionable
-     * node has been checked out before.
-     */
-    public void testCheckoutTwiceDoesNotThrow() throws RepositoryException {
-        versionableNode.checkout();
-        versionableNode.checkout();
-    }
+     /**
+      * Test calling VersionManager.isCheckedOut(P) with P denoting the
+      * absolute path of a non-versionable node.
+      */
+     public void testIsCheckedOutNonVersionableNodeJcr2() throws RepositoryException {
+         VersionManager versionManager = nonVersionableNode.getSession().getWorkspace().getVersionManager();
+         String path = nonVersionableNode.getPath();
+         boolean isCheckedOut = versionManager.isCheckedOut(path);
+         Node vParent = null;
+         try {
+             vParent = nonVersionableNode.getParent();
+             while (!vParent.isNodeType(mixVersionable)) {
+                 vParent = vParent.getParent();
+             }
+         } catch (ItemNotFoundException e) {
+             // root reached.
+         }
 
+         if (vParent != null && vParent.isNodeType(mixVersionable)) {
+             String parentPath = vParent.getPath();
+             if (versionManager.isCheckedOut(parentPath)) {
+                 assertTrue("VersionManager.isCheckedOut(P) must return true if P denotes the absolute path of a non-versionable node whose nearest versionable ancestor is checked-out.", isCheckedOut);
+             } else {
+                 assertFalse("VersionManager.isCheckedOut(P) must return false if P denotes the absolute path of a non-versionable node whose nearest versionable ancestor is checked-in.", isCheckedOut);
+             }
+         } else {
+             assertTrue("VersionManager.isCheckedOut(P) must return true if P denotes the absolute path of a non-versionable node that has no versionable ancestor", isCheckedOut);
+         }
+     }
+
+     /**
+      * Test calling Node.checkout() on a non-versionable node.
+      */
+     public void testCheckoutNonVersionableNode() throws RepositoryException {
+         try {
+             nonVersionableNode.checkout();
+             fail("Node.checkout() on a non-versionable node must throw UnsupportedRepositoryOperationException");
+         } catch (UnsupportedRepositoryOperationException e) {
+             //success
+         }
+     }
+
+     /**
+      * Test calling VersionManager.checkout(P) with P denoting the absolute
+      * path of a non-versionable node.
+      */
+     public void testCheckoutNonVersionableNodeJcr2() throws RepositoryException {
+         VersionManager versionManager = nonVersionableNode.getSession().getWorkspace().getVersionManager();
+         String path = nonVersionableNode.getPath();
+         try {
+             versionManager.checkout(path);
+             fail("VersionManager.checkout(P) with P denoting the absolute path of a non-versionable node must throw UnsupportedRepositoryOperationException");
+         } catch (UnsupportedRepositoryOperationException e) {
+             //success
+         }
+     }
+
+     /**
+      * Test if Node.checkout() doesn't throw any exception if the versionable
+      * node has been checked out before.
+      */
+     public void testCheckoutTwiceDoesNotThrow() throws RepositoryException {
+         versionableNode.checkout();
+         versionableNode.checkout();
+     }
+
+     /**
+      * Test if VersionManager.checkout(P) doesn't throw any exception if P
+      * denotes the absolute path of a versionable node that has been checked
+      * out before.
+      */
+     public void testCheckoutTwiceDoesNotThrowJcr2() throws RepositoryException {
+         VersionManager versionManager = versionableNode.getSession().getWorkspace().getVersionManager();
+         String path = versionableNode.getPath();
+         versionManager.checkout(path);
+         versionManager.checkout(path);
+     }
 }
\ No newline at end of file
