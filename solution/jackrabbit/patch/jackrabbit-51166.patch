diff --git a/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/AbstractItemDefinitionTemplate.java b/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/AbstractItemDefinitionTemplate.java
index 004c5c4..8c65525 100644
--- a/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/AbstractItemDefinitionTemplate.java
+++ b/jackrabbit-spi-commons/src/main/java/org/apache/jackrabbit/spi/commons/nodetype/AbstractItemDefinitionTemplate.java
@@ -16,8 +16,18 @@
  */
 package org.apache.jackrabbit.spi.commons.nodetype;
 
+import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
+import org.apache.jackrabbit.spi.commons.name.NameConstants;
+import org.apache.jackrabbit.spi.Name;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import javax.jcr.nodetype.ItemDefinition;
 import javax.jcr.nodetype.NodeType;
+import javax.jcr.nodetype.ConstraintViolationException;
+import javax.jcr.RepositoryException;
+import javax.jcr.NamespaceException;
+import javax.jcr.version.OnParentVersionAction;
 
 /**
  * <code>AbstractItemDefinitionTemplate</code> serves as base class for
@@ -26,25 +36,40 @@ import javax.jcr.nodetype.NodeType;
  */
 abstract class AbstractItemDefinitionTemplate implements ItemDefinition {
 
-    private String name;
+    private static final Logger log = LoggerFactory.getLogger(AbstractItemDefinitionTemplate.class);
+
+    private Name name;
     private boolean autoCreated;
     private boolean mandatory;
-    private int opv;
+    private int opv = OnParentVersionAction.COPY;
     private boolean protectedStatus;
 
+    protected final NamePathResolver resolver;
+
     /**
      * Package private constructor
+     *
+     * @param resolver
      */
-    AbstractItemDefinitionTemplate() {
+    AbstractItemDefinitionTemplate(NamePathResolver resolver) {
+        this.resolver = resolver;
     }
 
     /**
      * Package private constructor
      *
      * @param def
+     * @param resolver
+     * @throws javax.jcr.nodetype.ConstraintViolationException
      */
-    AbstractItemDefinitionTemplate(ItemDefinition def) {
-        name = def.getName();
+    AbstractItemDefinitionTemplate(ItemDefinition def, NamePathResolver resolver) throws ConstraintViolationException {
+        this.resolver = resolver;
+
+        if (def instanceof ItemDefinitionImpl) {
+            name = ((ItemDefinitionImpl) def).itemDef.getName();
+        } else {
+            setName(def.getName());
+        }
         autoCreated = def.isAutoCreated();
         mandatory = def.isMandatory();
         opv = def.getOnParentVersion();
@@ -56,9 +81,20 @@ abstract class AbstractItemDefinitionTemplate implements ItemDefinition {
      * Sets the name of the child item.
      *
      * @param name a <code>String</code>.
+     * @throws ConstraintViolationException
      */
-    public void setName(String name) {
-        this.name = name;
+    public void setName(String name) throws ConstraintViolationException {
+        if (ItemDefinitionImpl.ANY_NAME.equals(name)) {
+            // handle the * special case that isn't a valid JCR name but a valid
+            // name for a ItemDefinition (residual).
+            this.name = NameConstants.ANY_NAME;
+        } else {
+            try {
+                this.name = resolver.getQName(name);
+            } catch (RepositoryException e) {
+                throw new ConstraintViolationException(e);
+            }
+        }
     }
 
     /**
@@ -83,8 +119,11 @@ abstract class AbstractItemDefinitionTemplate implements ItemDefinition {
      * Sets the on-parent-version status of the child item.
      *
      * @param opv an <code>int</code> constant member of <code>OnParentVersionAction</code>.
+     * @throws IllegalArgumentException If the given <code>opv</code> flag isn't valid.
      */
     public void setOnParentVersion(int opv) {
+        // validate the given opv-action
+        OnParentVersionAction.nameFromValue(opv);
         this.opv = opv;
     }
 
@@ -102,7 +141,17 @@ abstract class AbstractItemDefinitionTemplate implements ItemDefinition {
      * {@inheritDoc}
      */
     public String getName() {
-        return name;
+        if (name == null) {
+            return null;
+        } else {
+            try {
+                return resolver.getJCRName(name);
+            } catch (NamespaceException e) {
+                // should never get here
+                log.error("encountered unregistered namespace in item definition name", e);
+                return name.toString();
+            }
+        }
     }
 
     /**
@@ -139,5 +188,4 @@ abstract class AbstractItemDefinitionTemplate implements ItemDefinition {
     public boolean isProtected() {
         return protectedStatus;
     }
-
 }
