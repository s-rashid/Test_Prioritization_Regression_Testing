diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java
index 08cfc84..dee2439 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalVersionHistoryImpl.java
@@ -22,6 +22,8 @@ import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Set;
+import java.util.Arrays;
+import java.util.HashSet;
 
 import javax.jcr.PropertyType;
 import javax.jcr.ReferentialIntegrityException;
@@ -226,7 +228,12 @@ class InternalVersionHistoryImpl extends InternalVersionItemImpl
         if (v != null) {
             v.clear();
         } else {
-            v = new InternalVersionImpl(this, child, child.getName());
+            // check if baseline
+            if (child.getState().getMixinTypeNames().contains(NameConstants.REP_BASELINE)) {
+                v = new InternalBaselineImpl(this, child, child.getName());
+            } else {
+                v = new InternalVersionImpl(this, child, child.getName());
+            }
         }
         return v;
     }
@@ -485,10 +492,11 @@ class InternalVersionHistoryImpl extends InternalVersionItemImpl
      *
      * @param name new version name
      * @param src source node to version
+     * @param configuration the set of versions in case a configuration is checked in
      * @return the newly created version
      * @throws RepositoryException if an error occurs
      */
-    InternalVersionImpl checkin(Name name, NodeStateEx src)
+    InternalVersionImpl checkin(Name name, NodeStateEx src, Set<NodeId> configuration)
             throws RepositoryException {
 
         // copy predecessors from src node
@@ -527,6 +535,16 @@ class InternalVersionHistoryImpl extends InternalVersionItemImpl
             InternalValue act = src.getPropertyValue(NameConstants.JCR_ACTIVITY);
             vNode.setPropertyValue(NameConstants.JCR_ACTIVITY, act);
         }
+        // check configuration
+        if (configuration != null) {
+            vNode.setMixins(new HashSet<Name>(Arrays.asList(NameConstants.REP_BASELINE)));
+            InternalValue[] values = new InternalValue[configuration.size()];
+            int i=0;
+            for (NodeId id: configuration) {
+                values[i++] = InternalValue.create(id);
+            }
+            vNode.setPropertyValues(NameConstants.REP_BASEVERSIONS, PropertyType.REFERENCE, values, true);
+        }
 
         // initialize 'created', 'predecessors' and 'successors'
         vNode.setPropertyValue(NameConstants.JCR_CREATED, InternalValue.create(getCurrentTime()));
@@ -537,7 +555,9 @@ class InternalVersionHistoryImpl extends InternalVersionItemImpl
         InternalFrozenNodeImpl.checkin(vNode, NameConstants.JCR_FROZENNODE, src);
 
         // update version graph
-        InternalVersionImpl version = new InternalVersionImpl(this, vNode, name);
+        InternalVersionImpl version = configuration == null
+                ? new InternalVersionImpl(this, vNode, name)
+                : new InternalBaselineImpl(this, vNode, name);
         version.internalAttach();
 
         // and store
@@ -583,10 +603,14 @@ class InternalVersionHistoryImpl extends InternalVersionItemImpl
         if (copiedFrom != null) {
             pNode.setPropertyValue(NameConstants.JCR_COPIEDFROM, InternalValue.create(copiedFrom, true));
         }
-        
+
         // create root version
         NodeId versionId = new NodeId();
         NodeStateEx vNode = pNode.addNode(NameConstants.JCR_ROOTVERSION, NameConstants.NT_VERSION, versionId, true);
+        if (nodeState.getNodeTypeName().equals(NameConstants.NT_CONFIGURATION)) {
+            // add baseline mixin for configurations
+            vNode.setMixins(new HashSet<Name>(Arrays.asList(NameConstants.REP_BASELINE)));
+        }
 
         // initialize 'created' and 'predecessors'
         vNode.setPropertyValue(NameConstants.JCR_CREATED, InternalValue.create(getCurrentTime()));
