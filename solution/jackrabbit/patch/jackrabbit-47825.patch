diff --git a/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/hierarchy/HierarchyEntry.java b/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/hierarchy/HierarchyEntry.java
index df7dfae..2eb17cb 100644
--- a/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/hierarchy/HierarchyEntry.java
+++ b/jackrabbit-jcr2spi/src/main/java/org/apache/jackrabbit/jcr2spi/hierarchy/HierarchyEntry.java
@@ -16,15 +16,15 @@
  */
 package org.apache.jackrabbit.jcr2spi.hierarchy;
 
-import org.apache.jackrabbit.spi.Name;
-import org.apache.jackrabbit.spi.Path;
-import org.apache.jackrabbit.jcr2spi.state.ItemState;
-import org.apache.jackrabbit.jcr2spi.state.Status;
-import org.apache.jackrabbit.jcr2spi.operation.Operation;
-
-import javax.jcr.RepositoryException;
 import javax.jcr.InvalidItemStateException;
 import javax.jcr.ItemNotFoundException;
+import javax.jcr.RepositoryException;
+
+import org.apache.jackrabbit.jcr2spi.operation.Operation;
+import org.apache.jackrabbit.jcr2spi.state.ItemState;
+import org.apache.jackrabbit.jcr2spi.state.Status;
+import org.apache.jackrabbit.spi.Name;
+import org.apache.jackrabbit.spi.Path;
 
 /**
  * <code>HierarchyEntry</code>...
@@ -112,16 +112,21 @@ public interface HierarchyEntry {
     /**
      * Invalidates the underlying <code>ItemState</code> if available and if it
      * is not transiently modified. If the <code>recursive</code> flag is true,
-     * the hierarchy is traverses and {@link #invalidate(boolean)} is called on
-     * all child entries.<br>
+     * also invalidates the child entries recursively.<br>
      * Note, that in contrast to {@link HierarchyEntry#reload(boolean)}
      * this method only sets the status of this item state to {@link
-     * Status#INVALIDATED} and does not acutally update it with the persistent
+     * Status#INVALIDATED} and does not actually update it with the persistent
      * state in the repository.
      */
     public void invalidate(boolean recursive);
 
     /**
+     * Calculates the status of the underlying <code>ItemState</code>: any pending
+     * changes to the underlying <code>ItemState</code> are applied.
+     */
+    public void calculateStatus();
+
+    /**
      * Traverses the hierarchy and reverts all transient modifications such as
      * adding, modifying or removing item states. 'Existing' item states
      * are reverted to their initial state and their status is reset to {@link Status#EXISTING}.
@@ -167,4 +172,5 @@ public interface HierarchyEntry {
      * @param transientOperation
      */
     public void complete(Operation transientOperation) throws RepositoryException;
-}
\ No newline at end of file
+
+}
