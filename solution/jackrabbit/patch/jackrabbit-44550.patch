diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SharedIndexReader.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SharedIndexReader.java
index 1ba3282..b370f6a 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SharedIndexReader.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SharedIndexReader.java
@@ -30,20 +30,7 @@ import java.io.IOException;
  * clients are disconnected AND the <code>SharedIndexReader</code>s
  * <code>close()</code> method itself has been called.
  */
-class SharedIndexReader extends FilterIndexReader {
-
-    /**
-     * Set to <code>true</code> if this index reader should be closed, when
-     * all connected clients are disconnected.
-     */
-    private boolean closeRequested = false;
-
-    /**
-     * Map of all registered clients to this shared index reader. The Map
-     * is rather used as a Set, because each value is the same Object as its
-     * associated key.
-     */
-    private final Map clients = new IdentityHashMap();
+class SharedIndexReader extends RefCountingIndexReader {
 
     /**
      * Creates a new <code>SharedIndexReader</code> which is based on
@@ -79,46 +66,6 @@ class SharedIndexReader extends FilterIndexReader {
     }
 
     /**
-     * Registeres <code>client</code> with this reader. As long as clients are
-     * registered, this shared reader will not release resources on {@link
-     * #close()} and will not actually close but only marks itself to close when
-     * the last client is unregistered.
-     *
-     * @param client the client to register.
-     */
-    public synchronized void addClient(Object client) {
-        clients.put(client, client);
-    }
-
-    /**
-     * Unregisters the <code>client</code> from this index reader.
-     *
-     * @param client a client of this reader.
-     * @throws IOException if an error occurs while detaching the client from
-     *                     this shared reader.
-     */
-    public synchronized void removeClient(Object client) throws IOException {
-        clients.remove(client);
-        if (clients.isEmpty() && closeRequested) {
-            super.doClose();
-        }
-    }
-
-    /**
-     * Closes this index if no client is registered, otherwise this reader is
-     * marked to close when the last client is disconnected.
-     *
-     * @throws IOException if an error occurs while closing.
-     */
-    protected synchronized void doClose() throws IOException {
-        if (clients.isEmpty()) {
-            super.doClose();
-        } else {
-            closeRequested = true;
-        }
-    }
-
-    /**
      * Simply passes the call to the wrapped reader as is.<br/>
      * If <code>term</code> is for a {@link FieldNames#UUID} field and this
      * <code>SharedIndexReader</code> does not have such a document,
@@ -140,5 +87,4 @@ class SharedIndexReader extends FilterIndexReader {
     public CachingIndexReader getBase() {
         return (CachingIndexReader) in;
     }
-
 }
