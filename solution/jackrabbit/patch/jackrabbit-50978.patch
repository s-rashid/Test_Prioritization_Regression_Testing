diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SearchIndex.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SearchIndex.java
index 63b54ff..bad6112 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SearchIndex.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/SearchIndex.java
@@ -1315,24 +1315,28 @@ public class SearchIndex extends AbstractQueryHandler {
                             String namePrefix = FieldNames.createNamedValue(getNamespaceMappings().translateName(propState.getName()), "");
                             NodeState parent = (NodeState) ism.getItemState(propState.getParentId());
                             Document aDoc = createDocument(parent, getNamespaceMappings(), getIndex().getIndexFormatVersion());
-                            // find the right fields to transfer
-                            Fieldable[] fields = aDoc.getFieldables(FieldNames.PROPERTIES);
-                            Token t = new Token();
-                            for (Fieldable field : fields) {
-                                // assume properties fields use SingleTokenStream
-                                t = field.tokenStreamValue().next(t);
-                                String value = new String(t.termBuffer(), 0, t.termLength());
-                                if (value.startsWith(namePrefix)) {
-                                    // extract value
-                                    value = value.substring(namePrefix.length());
-                                    // create new named value
-                                    Path p = getRelativePath(state, propState);
-                                    String path = getNamespaceMappings().translatePath(p);
-                                    value = FieldNames.createNamedValue(path, value);
-                                    t.setTermBuffer(value);
-                                    doc.add(new Field(field.name(), new SingletonTokenStream(t)));
-                                    doc.add(new Field(FieldNames.AGGREGATED_NODE_UUID, parent.getNodeId().toString(), Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));
+                            try {
+                                // find the right fields to transfer
+                                Fieldable[] fields = aDoc.getFieldables(FieldNames.PROPERTIES);
+                                Token t = new Token();
+                                for (Fieldable field : fields) {
+                                    // assume properties fields use SingleTokenStream
+                                    t = field.tokenStreamValue().next(t);
+                                    String value = new String(t.termBuffer(), 0, t.termLength());
+                                    if (value.startsWith(namePrefix)) {
+                                        // extract value
+                                        value = value.substring(namePrefix.length());
+                                        // create new named value
+                                        Path p = getRelativePath(state, propState);
+                                        String path = getNamespaceMappings().translatePath(p);
+                                        value = FieldNames.createNamedValue(path, value);
+                                        t.setTermBuffer(value);
+                                        doc.add(new Field(field.name(), new SingletonTokenStream(t)));
+                                        doc.add(new Field(FieldNames.AGGREGATED_NODE_UUID, parent.getNodeId().toString(), Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));
+                                    }
                                 }
+                            } finally {
+                                Util.disposeDocument(aDoc);
                             }
                         }
                     }
