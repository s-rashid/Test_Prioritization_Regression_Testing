diff --git a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/qom/SelectorTest.java b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/qom/SelectorTest.java
index 9893d5c..a7d1203 100644
--- a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/qom/SelectorTest.java
+++ b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/qom/SelectorTest.java
@@ -18,7 +18,10 @@ package org.apache.jackrabbit.core.query.qom;
 
 import javax.jcr.RepositoryException;
 import javax.jcr.NodeIterator;
+import javax.jcr.nodetype.NodeTypeManager;
+import javax.jcr.nodetype.NoSuchNodeTypeException;
 import javax.jcr.query.Query;
+import javax.jcr.query.InvalidQueryException;
 
 /**
  * <code>SelectorTest</code>...
@@ -36,4 +39,64 @@ public class SelectorTest extends AbstractQOMTest {
             assertTrue("Wrong node type", it.nextNode().isNodeType(testNodeType));
         }
     }
+
+    public void testSyntacticallyInvalidName() throws RepositoryException {
+        try {
+            Query q = qomFactory.createQuery(
+                    qomFactory.selector(testNodeType + "["), null, null, null);
+            q.execute();
+            fail("Selector with syntactically invalid name must throw InvalidQueryException");
+        } catch (InvalidQueryException e) {
+            // expected
+        }
+    }
+
+    public void testUnknownNodeType() throws RepositoryException {
+        NodeTypeManager ntMgr = superuser.getWorkspace().getNodeTypeManager();
+        String ntName = testNodeType;
+        for (;;) {
+            try {
+                ntMgr.getNodeType(ntName);
+                ntName += "x";
+            } catch (NoSuchNodeTypeException e) {
+                break;
+            }
+        }
+        Query q = qomFactory.createQuery(qomFactory.selector(ntName),
+                null, null, null);
+        assertFalse("Selector must not select nodes for unknown node type",
+                q.execute().getNodes().hasNext());
+    }
+
+    public void testDuplicateNodeType() throws RepositoryException {
+        try {
+            Query q = qomFactory.createQuery(
+                    qomFactory.join(
+                            qomFactory.selector(testNodeType, "nt"),
+                            qomFactory.selector(testNodeType, "nt"),
+                            JOIN_TYPE_INNER,
+                            qomFactory.descendantNodeJoinCondition("nt", "nt")),
+                    null, null, null);
+            q.execute();
+            fail("Selector with two identical selector names must throw InvalidQueryException");
+        } catch (InvalidQueryException e) {
+            // expected
+        }
+
+        // using one argument selector method
+        try {
+            Query q = qomFactory.createQuery(
+                    qomFactory.join(
+                            qomFactory.selector(testNodeType),
+                            qomFactory.selector(testNodeType),
+                            JOIN_TYPE_INNER,
+                            qomFactory.descendantNodeJoinCondition(
+                                    testNodeType, testNodeType)),
+                    null, null, null);
+            q.execute();
+            fail("Selector with two identical selector names must throw InvalidQueryException");
+        } catch (InvalidQueryException e) {
+            // expected
+        }
+    }
 }
