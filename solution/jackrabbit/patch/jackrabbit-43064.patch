diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java
index 1623497..2025065 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/bundle/AbstractBundlePersistenceManager.java
@@ -127,8 +127,8 @@ public abstract class AbstractBundlePersistenceManager implements
     private long bundleCacheSize = 8 * 1024 * 1024;
 
     /**
-     * Returns the size of the bundlecache in megabytes.
-     * @return the size of the bundlecache in megabytes.
+     * Returns the size of the bundle cache in megabytes.
+     * @return the size of the bundle cache in megabytes.
      */
     public String getBundleCacheSize() {
         return String.valueOf(bundleCacheSize / (1024 * 1024));
@@ -408,7 +408,7 @@ public abstract class AbstractBundlePersistenceManager implements
         bundles = new BundleCache(bundleCacheSize);
         missing = new LRUNodeIdCache();
 
-        // init prop defs
+        // init property definitions
         if (context.getNodeTypeRegistry() != null) {
             idJcrUUID = context.getNodeTypeRegistry()
                 .getEffectiveNodeType(NameConstants.MIX_REFERENCEABLE)
@@ -655,7 +655,7 @@ public abstract class AbstractBundlePersistenceManager implements
     }
 
     /**
-     * Gets the bundle for the given nodeid.
+     * Gets the bundle for the given node id.
      *
      * @param id the id of the bundle to retrieve.
      * @return the bundle or <code>null</code> if the bundle does not exist
@@ -719,4 +719,13 @@ public abstract class AbstractBundlePersistenceManager implements
     public void checkConsistency(String[] uuids, boolean recursive, boolean fix) {
     }
 
+    /**
+     * Evicts the bundle with <code>id</code> from the bundle cache.
+     *
+     * @param id the id of the bundle.
+     */
+    protected void evictBundle(NodeId id) {
+        bundles.remove(id);
+    }
+
 }
