diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/PersistenceCopier.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/PersistenceCopier.java
index 5598620..6fc3a6d 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/PersistenceCopier.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/persistence/PersistenceCopier.java
@@ -16,17 +16,20 @@
  */
 package org.apache.jackrabbit.core.persistence;
 
+import java.io.IOException;
 import java.io.InputStream;
 import java.util.HashSet;
 import java.util.Set;
 
 import javax.jcr.PropertyType;
+import javax.jcr.RepositoryException;
 
 import org.apache.jackrabbit.core.data.DataStore;
 import org.apache.jackrabbit.core.id.NodeId;
 import org.apache.jackrabbit.core.id.PropertyId;
 import org.apache.jackrabbit.core.state.ChangeLog;
 import org.apache.jackrabbit.core.state.ChildNodeEntry;
+import org.apache.jackrabbit.core.state.ItemStateException;
 import org.apache.jackrabbit.core.state.NodeReferences;
 import org.apache.jackrabbit.core.state.NodeState;
 import org.apache.jackrabbit.core.state.PropertyState;
@@ -96,18 +99,22 @@ public class PersistenceCopier {
      * are automatically skipped.
      *
      * @param id identifier of the node to be copied
-     * @throws Exception if the copy operation fails
+     * @throws RepositoryException if the copy operation fails
      */
-    public void copy(NodeId id) throws Exception {
+    public void copy(NodeId id) throws RepositoryException {
         if (!exclude.contains(id)) {
-            NodeState node = source.load(id);
+            try {
+                NodeState node = source.load(id);
 
-            for (ChildNodeEntry entry : node.getChildNodeEntries()) {
-                copy(entry.getId());
-            }
+                for (ChildNodeEntry entry : node.getChildNodeEntries()) {
+                    copy(entry.getId());
+                }
 
-            copy(node);
-            exclude.add(id);
+                copy(node);
+                exclude.add(id);
+            } catch (ItemStateException e) {
+                throw new RepositoryException("Unable to copy " + id, e);
+            }
         }
     }
 
@@ -116,64 +123,71 @@ public class PersistenceCopier {
      * to the target persistence manager.
      *
      * @param sourceNode source node state
-     * @throws Exception if the copy operation fails
+     * @throws RepositoryException if the copy operation fails
      */
-    private void copy(NodeState sourceNode) throws Exception {
-        ChangeLog changes = new ChangeLog();
-
-        // Copy the node state
-        NodeState targetNode = target.createNew(sourceNode.getNodeId());
-        targetNode.setParentId(sourceNode.getParentId());
-        targetNode.setDefinitionId(sourceNode.getDefinitionId());
-        targetNode.setNodeTypeName(sourceNode.getNodeTypeName());
-        targetNode.setMixinTypeNames(sourceNode.getMixinTypeNames());
-        targetNode.setPropertyNames(sourceNode.getPropertyNames());
-        targetNode.setChildNodeEntries(sourceNode.getChildNodeEntries());
-        if (target.exists(targetNode.getNodeId())) {
-            changes.modified(targetNode);
-        } else {
-            changes.added(targetNode);
-        }
+    private void copy(NodeState sourceNode) throws RepositoryException {
+        try {
+            ChangeLog changes = new ChangeLog();
+
+            // Copy the node state
+            NodeState targetNode = target.createNew(sourceNode.getNodeId());
+            targetNode.setParentId(sourceNode.getParentId());
+            targetNode.setDefinitionId(sourceNode.getDefinitionId());
+            targetNode.setNodeTypeName(sourceNode.getNodeTypeName());
+            targetNode.setMixinTypeNames(sourceNode.getMixinTypeNames());
+            targetNode.setPropertyNames(sourceNode.getPropertyNames());
+            targetNode.setChildNodeEntries(sourceNode.getChildNodeEntries());
+            if (target.exists(targetNode.getNodeId())) {
+                changes.modified(targetNode);
+            } else {
+                changes.added(targetNode);
+            }
 
-        // Copy all associated property states
-        for (Name name : sourceNode.getPropertyNames()) {
-            PropertyId id = new PropertyId(sourceNode.getNodeId(), name);
-            PropertyState sourceState = source.load(id);
-            PropertyState targetState = target.createNew(id);
-            targetState.setDefinitionId(sourceState.getDefinitionId());
-            targetState.setType(sourceState.getType());
-            targetState.setMultiValued(sourceState.isMultiValued());
-            InternalValue[] values = sourceState.getValues();
-            if (sourceState.getType() == PropertyType.BINARY) {
-                for (int i = 0; i < values.length; i++) {
-                    InputStream stream = values[i].getStream();
-                    try {
-                        values[i] = InternalValue.create(stream, store);
-                    } finally {
-                        stream.close();
+            // Copy all associated property states
+            for (Name name : sourceNode.getPropertyNames()) {
+                PropertyId id = new PropertyId(sourceNode.getNodeId(), name);
+                PropertyState sourceState = source.load(id);
+                PropertyState targetState = target.createNew(id);
+                targetState.setDefinitionId(sourceState.getDefinitionId());
+                targetState.setType(sourceState.getType());
+                targetState.setMultiValued(sourceState.isMultiValued());
+                InternalValue[] values = sourceState.getValues();
+                if (sourceState.getType() == PropertyType.BINARY) {
+                    for (int i = 0; i < values.length; i++) {
+                        InputStream stream = values[i].getStream();
+                        try {
+                            values[i] = InternalValue.create(stream, store);
+                        } finally {
+                            stream.close();
+                        }
                     }
                 }
+                targetState.setValues(values);
+                if (target.exists(targetState.getPropertyId())) {
+                    changes.modified(targetState);
+                } else {
+                    changes.added(targetState);
+                }
             }
-            targetState.setValues(values);
-            if (target.exists(targetState.getPropertyId())) {
-                changes.modified(targetState);
-            } else {
-                changes.added(targetState);
+
+            // Copy all node references
+            if (source.existsReferencesTo(sourceNode.getNodeId())) {
+                changes.modified(source.loadReferencesTo(sourceNode.getNodeId()));
+            } else if (target.existsReferencesTo(sourceNode.getNodeId())) {
+                NodeReferences references =
+                    target.loadReferencesTo(sourceNode.getNodeId());
+                references.clearAllReferences();
+                changes.modified(references);
             }
-        }
 
-        // Copy all node references
-        if (source.existsReferencesTo(sourceNode.getNodeId())) {
-            changes.modified(source.loadReferencesTo(sourceNode.getNodeId()));
-        } else if (target.existsReferencesTo(sourceNode.getNodeId())) {
-            NodeReferences references =
-                target.loadReferencesTo(sourceNode.getNodeId());
-            references.clearAllReferences();
-            changes.modified(references);
+            // Persist the copied states
+            target.store(changes);
+        } catch (IOException e) {
+            throw new RepositoryException(
+                    "Unable to copy binary values of " + sourceNode, e);
+        } catch (ItemStateException e) {
+            throw new RepositoryException("Unable to copy " + sourceNode, e);
         }
-
-        // Persist the copied states
-        target.store(changes);
     }
 
 }
