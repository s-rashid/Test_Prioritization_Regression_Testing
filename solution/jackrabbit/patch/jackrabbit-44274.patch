diff --git a/jackrabbit-ocm/src/test/java/org/apache/jackrabbit/ocm/repository/RepositoryUtil.java b/jackrabbit-ocm/src/test/java/org/apache/jackrabbit/ocm/repository/RepositoryUtil.java
index c97e332..18b563b 100644
--- a/jackrabbit-ocm/src/test/java/org/apache/jackrabbit/ocm/repository/RepositoryUtil.java
+++ b/jackrabbit-ocm/src/test/java/org/apache/jackrabbit/ocm/repository/RepositoryUtil.java
@@ -42,25 +42,25 @@ import org.apache.jackrabbit.util.Text;
 */
 public class RepositoryUtil
 {
-    
+
     /** namespace prefix constant */
     public static final String OCM_NAMESPACE_PREFIX   = "ocm";
 
     /** namespace constant */
-    public static final String OCM_NAMESPACE          = "http://jackrabbit.apache.org/ocm";    
-    
+    public static final String OCM_NAMESPACE          = "http://jackrabbit.apache.org/ocm";
+
     /** Item path separator */
     public static final String PATH_SEPARATOR = "/";
-    
+
     private final static Log log = LogFactory.getLog(RepositoryUtil.class);
-    
+
     /**
-     * Register a new repository 
-     * 
+     * Register a new repository
+     *
      * @param repositoryName The repository unique name
      * @param configFile The JCR config file
      * @param homeDir The directory containing the complete repository settings (workspace, node types, ...)
-     * 
+     *
      * @throws RepositoryException when it is not possible to register the repository
      */
     public static void registerRepository(String repositoryName, String configFile, String homeDir) throws RepositoryException
@@ -75,19 +75,19 @@ public class RepositoryUtil
             RegistryHelper.registerRepository(ctx, repositoryName, configFile, homeDir, true);
         }
         catch (Exception e)
-        {        
-            throw new RepositoryException("Impossible to register the respository : " + 
+        {
+            throw new RepositoryException("Impossible to register the respository : " +
                                            repositoryName + " - config file : " + configFile, e);
-        }        
-        
+        }
+
     }
-    
-    
+
+
     /**
-     * Unregister a repository 
-     * 
+     * Unregister a repository
+     *
      * @param repositoryName The repository unique name
-     * 
+     *
      * @throws RepositoryException when it is not possible to unregister the repository
      */
     public static void unRegisterRepository(String repositoryName) throws RepositoryException
@@ -103,19 +103,19 @@ public class RepositoryUtil
         }
         catch (Exception e)
         {
-            throw new RepositoryException("Impossible to unregister the respository : " + 
+            throw new RepositoryException("Impossible to unregister the respository : " +
                                            repositoryName , e);
-        }        
-        
+        }
+
     }
-    
+
     /**
      * Get a repository
-     * 
+     *
      * @param repositoryName The repository name
      * @return a JCR repository reference
-     * 
-     * @throws RepositoryException when it is not possible to get the repository. 
+     *
+     * @throws RepositoryException when it is not possible to get the repository.
      *         Before calling this method, the repository has to be registered (@see RepositoryUtil#registerRepository(String, String, String)
      */
     public static Repository getRepository(String repositoryName) throws RepositoryException
@@ -126,49 +126,49 @@ public class RepositoryUtil
             env.put(Context.INITIAL_CONTEXT_FACTORY, "org.apache.jackrabbit.core.jndi.provider.DummyInitialContextFactory");
             env.put(Context.PROVIDER_URL, "localhost");
             InitialContext ctx = new InitialContext(env);
-            
+
             Repository repository = (Repository) ctx.lookup(repositoryName);
             return repository;
         }
         catch (Exception e)
         {
             throw new RepositoryException("Impossible to get the repository : " + repositoryName, e);
-        }        
+        }
     }
-    
+
     /**
      * Connect to a JCR repository
-     * 
-     * @param repository The JCR repository 
+     *
+     * @param repository The JCR repository
      * @param user The user name
      * @param password The password
-     * @return a valid JCR session 
-     * 
-     * @throws RepositoryException when it is not possible to connect to the JCR repository 
+     * @return a valid JCR session
+     *
+     * @throws RepositoryException when it is not possible to connect to the JCR repository
      */
     public static Session login(Repository repository, String user, String password) throws RepositoryException
     {
         try
         {
             Session session = repository.login(new SimpleCredentials(user, password.toCharArray()), null);
-            
-           
-            return session; 
+
+
+            return session;
         }
         catch (Exception e)
         {
             throw new RepositoryException("Impossible to login ", e);
         }
     }
-      
-    
-  
 
-    
+
+
+
+
     /**
-     * Setup the session. 
+     * Setup the session.
      * Until now, we check only if the namespace prefix exist in the repository
-     * 
+     *
      */
     public static void setupSession(Session session) throws RepositoryException
     {
@@ -186,18 +186,18 @@ public class RepositoryUtil
                     log.debug("Jackrabbit OCM namespace exists.");
                 }
             }
-             
+
             if (createNamespace)
             {
                 session.getWorkspace().getNamespaceRegistry().registerNamespace(OCM_NAMESPACE_PREFIX, OCM_NAMESPACE);
                 log.info("Successfully created Jackrabbit OCM namespace.");
             }
-            
+
             if (session.getRootNode() != null)
             {
                 log.info("Jcr session setup successfull.");
             }
-            
+
 
         }
         catch (Exception e)
@@ -208,12 +208,12 @@ public class RepositoryUtil
     }
 
     /**
-     * Encode a path 
+     * Encode a path
      * @TODO : drop Jackrabbit dependency
-     * 
+     *
      * @param path the path to encode
-     * @return the encoded path 
-     * 
+     * @return the encoded path
+     *
      */
     public static String encodePath(String path)
     {
