diff --git a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/AbstractIndex.java b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/AbstractIndex.java
index b37cb72..335b268 100644
--- a/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/AbstractIndex.java
+++ b/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/query/lucene/AbstractIndex.java
@@ -20,6 +20,7 @@ import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.Term;
+import org.apache.lucene.index.IndexDeletionPolicy;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
@@ -181,16 +182,16 @@ abstract class AbstractIndex {
                 public Object call() throws Exception {
                     long time = System.currentTimeMillis();
                     writer.addDocument(doc);
-                    return new Long(System.currentTimeMillis() - time);
+                    return System.currentTimeMillis() - time;
                 }
             };
         }
         DynamicPooledExecutor.Result[] results = EXECUTOR.executeAndWait(commands);
         invalidateSharedReader();
         IOException ex = null;
-        for (int i = 0; i < results.length; i++) {
-            if (results[i].getException() != null) {
-                Throwable cause = results[i].getException().getCause();
+        for (DynamicPooledExecutor.Result result : results) {
+            if (result.getException() != null) {
+                Throwable cause = result.getException().getCause();
                 if (ex == null) {
                     // only throw the first exception
                     if (cause instanceof IOException) {
@@ -203,7 +204,7 @@ abstract class AbstractIndex {
                     log.warn("Exception while inverting document", cause);
                 }
             } else {
-                log.debug("Inverted document in {} ms", results[i].get());
+                log.debug("Inverted document in {} ms", result.get());
             }
         }
         if (ex != null) {
@@ -238,7 +239,13 @@ abstract class AbstractIndex {
             indexWriter = null;
         }
         if (indexReader == null) {
-            IndexReader reader = IndexReader.open(getDirectory());
+            IndexDeletionPolicy idp = getIndexDeletionPolicy();
+            IndexReader reader;
+            if (idp != null) {
+                reader = IndexReader.open(getDirectory(), idp);
+            } else {
+                reader = IndexReader.open(getDirectory());
+            }
             reader.setTermInfosIndexDivisor(termInfosIndexDivisor);
             indexReader = new CommittableIndexReader(reader);
         }
@@ -246,6 +253,17 @@ abstract class AbstractIndex {
     }
 
     /**
+     * Returns the index deletion policy for this index. This implementation
+     * always returns <code>null</code>.
+     *
+     * @return the index deletion policy for this index or <code>null</code> if
+     *          none is present.
+     */
+    protected IndexDeletionPolicy getIndexDeletionPolicy() {
+        return null;
+    }
+
+    /**
      * Returns a read-only index reader, that can be used concurrently with
      * other threads writing to this index. The returned index reader is
      * read-only, that is, any attempt to delete a document from the index
