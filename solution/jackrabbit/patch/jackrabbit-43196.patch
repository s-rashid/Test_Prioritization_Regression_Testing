diff --git a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/CachingHierarchyManagerTest.java b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/CachingHierarchyManagerTest.java
index c316438..6a40a2e 100644
--- a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/CachingHierarchyManagerTest.java
+++ b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/CachingHierarchyManagerTest.java
@@ -16,6 +16,9 @@
  */
 package org.apache.jackrabbit.core;
 
+import java.util.ArrayList;
+import java.util.HashMap;
+
 import org.apache.jackrabbit.core.nodetype.NodeDefId;
 import org.apache.jackrabbit.core.state.ItemState;
 import org.apache.jackrabbit.core.state.ItemStateException;
@@ -24,9 +27,11 @@ import org.apache.jackrabbit.core.state.NoSuchItemStateException;
 import org.apache.jackrabbit.core.state.NodeReferences;
 import org.apache.jackrabbit.core.state.NodeReferencesId;
 import org.apache.jackrabbit.core.state.NodeState;
+import org.apache.jackrabbit.core.state.NodeStateListener;
 import org.apache.jackrabbit.spi.Name;
 import org.apache.jackrabbit.spi.Path;
 import org.apache.jackrabbit.spi.PathFactory;
+import org.apache.jackrabbit.spi.commons.name.NameConstants;
 import org.apache.jackrabbit.spi.commons.name.NameFactoryImpl;
 import org.apache.jackrabbit.spi.commons.name.PathFactoryImpl;
 import org.apache.jackrabbit.uuid.UUID;
@@ -90,4 +95,237 @@ public class CachingHierarchyManagerTest extends TestCase {
 
     };
 
+    /**
+     * Clone a node, cache its path and remove it afterwards. Should remove
+     * the cached path as well as no longer resolve the path.
+     */
+    public void testCloneAndRemove() throws Exception {
+        StaticItemStateManager ism = new StaticItemStateManager();
+        cache = new CachingHierarchyManager(ism.getRootNodeId(), ism, null);
+        ism.setContainer(cache);
+        NodeState a1 = ism.addNode(ism.getRoot(), "a1");
+        NodeState a2 = ism.addNode(ism.getRoot(), "a2");
+        NodeState b1 = ism.addNode(a1, "b1");
+        b1.addShare(b1.getParentId());
+        ism.cloneNode(b1, a2, "b2");
+        ItemId id = cache.resolvePath(toPath("{}\t{}a1\t{}b1"));
+        assertEquals(b1.getId(), id);
+        id = cache.resolvePath(toPath("{}\t{}a2\t{}b2"));
+        ism.removeNode(b1);
+        assertNull("Path no longer valid: /a1/b1",
+                cache.resolvePath(toPath("{}\t{}a1\t{}b1")));
+        ism.removeNode((NodeState) ism.getItemState(id));
+    }
+
+    public void testMove() throws Exception {
+        StaticItemStateManager ism = new StaticItemStateManager();
+        cache = new CachingHierarchyManager(ism.getRootNodeId(), ism, null);
+        ism.setContainer(cache);
+        NodeState a1 = ism.addNode(ism.getRoot(), "a1");
+        NodeState a2 = ism.addNode(ism.getRoot(), "a2");
+        NodeState b1 = ism.addNode(a1, "b1");
+        Path path = cache.getPath(b1.getNodeId());
+        assertEquals("{}\t{}a1\t{}b1", path.toString());
+        ism.moveNode(b1, a2, "b2");
+        path = cache.getPath(b1.getNodeId());
+        assertEquals("{}\t{}a2\t{}b2", path.toString());
+    }
+
+    public void testOrderBefore() throws Exception {
+        StaticItemStateManager ism = new StaticItemStateManager();
+        cache = new CachingHierarchyManager(ism.getRootNodeId(), ism, null);
+        ism.setContainer(cache);
+        NodeState a = ism.addNode(ism.getRoot(), "a");
+        NodeState b1 = ism.addNode(a, "b");
+        NodeState b2 = ism.addNode(a, "b");
+        NodeState b3 = ism.addNode(a, "b");
+        Path path = cache.getPath(b1.getNodeId());
+        assertEquals("{}\t{}a\t{}b", path.toString());
+        ism.orderBefore(b2, b1);
+        ism.orderBefore(b1, b3);
+        path = cache.getPath(b1.getNodeId());
+        assertEquals("{}\t{}a\t{}b[2]", path.toString());
+    }
+
+    public void testRemove() throws Exception {
+        StaticItemStateManager ism = new StaticItemStateManager();
+        cache = new CachingHierarchyManager(ism.getRootNodeId(), ism, null);
+        ism.setContainer(cache);
+        NodeState a = ism.addNode(ism.getRoot(), "a");
+        NodeState b = ism.addNode(a, "b");
+        NodeState c = ism.addNode(b, "c");
+        cache.getPath(c.getNodeId());
+        assertTrue(cache.isCached(c.getId()));
+        ism.removeNode(b);
+        assertFalse(cache.isCached(c.getId()));
+    }
+
+    public void testRename() throws Exception {
+        StaticItemStateManager ism = new StaticItemStateManager();
+        cache = new CachingHierarchyManager(ism.getRootNodeId(), ism, null);
+        ism.setContainer(cache);
+        NodeState a1 = ism.addNode(ism.getRoot(), "a1");
+        NodeState b1 = ism.addNode(a1, "b");
+        NodeState b2 = ism.addNode(a1, "b");
+        Path path = cache.getPath(b1.getNodeId());
+        assertEquals("{}\t{}a1\t{}b", path.toString());
+        path = cache.getPath(b2.getNodeId());
+        assertEquals("{}\t{}a1\t{}b[2]", path.toString());
+        ism.renameNode(b1, "b1");
+        assertTrue(cache.isCached(b1.getNodeId()));
+        assertTrue(cache.isCached(b2.getNodeId()));
+        path = cache.getPath(b1.getNodeId());
+        assertEquals("{}\t{}a1\t{}b1", path.toString());
+    }
+
+    static class StaticItemStateManager implements ItemStateManager {
+
+        private final NodeId rootNodeId;
+        private final HashMap states = new HashMap();
+        private long lsbGenerator;
+        private NodeState root;
+        private NodeStateListener listener;
+
+        public StaticItemStateManager() {
+            rootNodeId = new NodeId(nextUUID());
+        }
+
+        public NodeId getRootNodeId() {
+            return rootNodeId;
+        }
+
+        public NodeState getRoot() {
+            if (root == null) {
+                root = new NodeState(rootNodeId, NameConstants.JCR_ROOT,
+                        null, NodeState.STATUS_EXISTING, false);
+                if (listener != null) {
+                    root.setContainer(listener);
+                }
+            }
+            return root;
+        }
+
+        public void setContainer(NodeStateListener listener) {
+            this.listener = listener;
+        }
+
+        public NodeState addNode(NodeState parent, String name) {
+            NodeId id = new NodeId(nextUUID());
+            NodeState child = new NodeState(id, NameConstants.NT_UNSTRUCTURED,
+                    parent.getNodeId(), NodeState.STATUS_EXISTING, false);
+            if (listener != null) {
+                child.setContainer(listener);
+            }
+            states.put(id, child);
+            parent.addChildNodeEntry(toName(name), child.getNodeId());
+            return child;
+        }
+
+        public void cloneNode(NodeState src, NodeState parent, String name) {
+            src.addShare(parent.getNodeId());
+            parent.addChildNodeEntry(toName(name), src.getNodeId());
+        }
+
+        public void moveNode(NodeState child, NodeState newParent, String name)
+                throws ItemStateException {
+
+            NodeState oldParent = (NodeState) getItemState(child.getParentId());
+            NodeState.ChildNodeEntry cne = oldParent.getChildNodeEntry(child.getNodeId());
+            if (cne == null) {
+                throw new ItemStateException(child.getNodeId().toString());
+            }
+            oldParent.removeChildNodeEntry(cne.getName(), cne.getIndex());
+            child.setParentId(newParent.getNodeId());
+            newParent.addChildNodeEntry(toName(name), child.getNodeId());
+        }
+
+        public void orderBefore(NodeState src, NodeState dest)
+                throws ItemStateException {
+
+            NodeState parent = (NodeState) getItemState(src.getParentId());
+
+            ArrayList list = new ArrayList(parent.getChildNodeEntries());
+
+            int srcIndex = -1, destIndex = -1;
+            for (int i = 0; i < list.size(); i++) {
+                NodeState.ChildNodeEntry cne = (NodeState.ChildNodeEntry) list.get(i);
+                if (cne.getId().equals(src.getId())) {
+                    srcIndex = i;
+                } else if (dest != null && cne.getId().equals(dest.getId())) {
+                    destIndex = i;
+                }
+            }
+            if (destIndex == -1) {
+                list.add(list.remove(srcIndex));
+            } else {
+                if (srcIndex < destIndex) {
+                    list.add(destIndex, list.get(srcIndex));
+                    list.remove(srcIndex);
+                } else {
+                    list.add(destIndex, list.remove(srcIndex));
+                }
+            }
+            parent.setChildNodeEntries(list);
+        }
+
+        public void removeNode(NodeState child) throws ItemStateException {
+            NodeState parent = (NodeState) getItemState(child.getParentId());
+            if (child.isShareable()) {
+                if (child.removeShare(parent.getNodeId()) == 0) {
+                    child.setParentId(null);
+                }
+            }
+            parent.removeChildNodeEntry(child.getNodeId());
+        }
+
+        public void renameNode(NodeState child, String newName) throws ItemStateException {
+            NodeState parent = (NodeState) getItemState(child.getParentId());
+            NodeState.ChildNodeEntry cne = parent.getChildNodeEntry(child.getNodeId());
+            if (cne == null) {
+                throw new ItemStateException(child.getNodeId().toString());
+            }
+            parent.renameChildNodeEntry(cne.getName(), cne.getIndex(), toName(newName));
+        }
+
+        private UUID nextUUID() {
+            return new UUID(0, lsbGenerator++);
+        }
+
+        public ItemState getItemState(ItemId id)
+                throws NoSuchItemStateException, ItemStateException {
+
+            if (id.equals(root.getId())) {
+                return root;
+            }
+            ItemState item = (ItemState) states.get(id);
+            if (item == null) {
+                throw new NoSuchItemStateException(id.toString());
+            }
+            return item;
+        }
+
+        public boolean hasItemState(ItemId id) {
+            if (id.equals(root.getId())) {
+                return true;
+            }
+            return states.containsKey(id);
+        }
+
+        public NodeReferences getNodeReferences(NodeReferencesId id)
+                throws NoSuchItemStateException, ItemStateException {
+            return null;
+        }
+
+        public boolean hasNodeReferences(NodeReferencesId id) {
+            return false;
+        }
+    }
+
+    private static Path toPath(String s) {
+        return PathFactoryImpl.getInstance().create(s);
+    }
+
+    private static Name toName(String s) {
+        return NameFactoryImpl.getInstance().create("", s);
+    }
 }
