diff --git a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/AbstractQueryTest.java b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/AbstractQueryTest.java
index 58c0dec..3d45d3d 100644
--- a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/AbstractQueryTest.java
+++ b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/query/AbstractQueryTest.java
@@ -21,6 +21,7 @@ import org.apache.jackrabbit.test.AbstractJCRTest;
 import javax.jcr.query.QueryResult;
 import javax.jcr.query.RowIterator;
 import javax.jcr.query.Query;
+import javax.jcr.query.QueryManager;
 import javax.jcr.NodeIterator;
 import javax.jcr.RepositoryException;
 import javax.jcr.Node;
@@ -36,6 +37,18 @@ import java.util.Iterator;
  */
 public class AbstractQueryTest extends AbstractJCRTest {
 
+    protected QueryManager qm;
+
+    protected void setUp() throws Exception {
+        super.setUp();
+        qm = superuser.getWorkspace().getQueryManager();
+    }
+
+    protected void tearDown() throws Exception {
+        qm = null;
+        super.tearDown();
+    }
+
     /**
      * Checks if the <code>result</code> contains a number of <code>hits</code>.
      *
@@ -115,7 +128,7 @@ public class AbstractQueryTest extends AbstractJCRTest {
      */
     protected void executeXPathQuery(String xpath, Node[] nodes)
             throws RepositoryException {
-        QueryResult res = superuser.getWorkspace().getQueryManager().createQuery(xpath, Query.XPATH).execute();
+        QueryResult res = qm.createQuery(xpath, Query.XPATH).execute();
         checkResult(res, nodes);
     }
 
@@ -127,7 +140,7 @@ public class AbstractQueryTest extends AbstractJCRTest {
      */
     protected void executeSQLQuery(String sql, Node[] nodes)
             throws RepositoryException {
-        QueryResult res = superuser.getWorkspace().getQueryManager().createQuery(sql, Query.SQL).execute();
+        QueryResult res = qm.createQuery(sql, Query.SQL).execute();
         checkResult(res, nodes);
     }
 
@@ -158,4 +171,21 @@ public class AbstractQueryTest extends AbstractJCRTest {
             assertTrue(path + " is not expected to be part of the result set", expectedPaths.contains(path));
         }
     }
+
+    /**
+     * Executes the query specified by <code>statement</code> and returns the
+     * query result.
+     *
+     * @param statement either a SQL or XPath statement.
+     * @return the query result.
+     * @throws RepositoryException if an error occurs.
+     */
+    protected QueryResult executeQuery(String statement)
+            throws RepositoryException {
+        if (statement.trim().toLowerCase().startsWith("select")) {
+            return qm.createQuery(statement, Query.SQL).execute();
+        } else {
+            return qm.createQuery(statement, Query.XPATH).execute();
+        }
+    }
 }
