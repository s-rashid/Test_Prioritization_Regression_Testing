diff --git a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/state/AbstractISMLockingTest.java b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/state/AbstractISMLockingTest.java
index 0584a87..8813393 100644
--- a/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/state/AbstractISMLockingTest.java
+++ b/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/state/AbstractISMLockingTest.java
@@ -17,7 +17,6 @@
 package org.apache.jackrabbit.core.state;
 
 import java.util.ArrayList;
-import java.util.Iterator;
 import java.util.List;
 
 import junit.framework.TestCase;
@@ -51,7 +50,7 @@ public abstract class AbstractISMLockingTest extends TestCase {
     /**
      * List of change logs, each with a different modification for {@link #state}.
      */
-    protected List logs;
+    protected List<ChangeLog> logs;
 
     protected void setUp() throws Exception {
         super.setUp();
@@ -59,7 +58,7 @@ public abstract class AbstractISMLockingTest extends TestCase {
         NodeId id = new NodeId();
         state = new NodeState(id, NameConstants.NT_BASE, null, ItemState.STATUS_EXISTING, true);
         refs = new NodeReferences(state.getNodeId());
-        logs = new ArrayList();
+        logs = new ArrayList<ChangeLog>();
         ChangeLog log = new ChangeLog();
         log.added(state);
         logs.add(log);
@@ -88,8 +87,7 @@ public abstract class AbstractISMLockingTest extends TestCase {
      */
     public void testReadBlocksWrite() throws InterruptedException {
         ReadLock rLock = locking.acquireReadLock(state.getId());
-        for (Iterator it = logs.iterator(); it.hasNext();) {
-            ChangeLog changeLog = (ChangeLog) it.next();
+        for (ChangeLog changeLog : logs) {
             verifyBlocked(startWriterThread(locking, changeLog));
         }
         rLock.release();
@@ -104,8 +102,7 @@ public abstract class AbstractISMLockingTest extends TestCase {
      * @throws InterruptedException on interruption; this will err the test
      */
     public void testWriteBlocksRead() throws InterruptedException {
-        for (Iterator it = logs.iterator(); it.hasNext();) {
-            ChangeLog changeLog = (ChangeLog) it.next();
+        for (ChangeLog changeLog : logs) {
             WriteLock wLock = locking.acquireWriteLock(changeLog);
             verifyBlocked(startReaderThread(locking, state.getId()));
             wLock.release();
@@ -113,10 +110,8 @@ public abstract class AbstractISMLockingTest extends TestCase {
     }
 
     public void testWriteBlocksRead_notIfSameThread() throws InterruptedException {
-        for (Iterator it = logs.iterator(); it.hasNext();) {
-            final ChangeLog changeLog = (ChangeLog) it.next();
+        for (final ChangeLog changeLog : logs) {
             Thread t = new Thread(new Runnable() {
-
                 public void run() {
                     try {
                         WriteLock wLock = locking.acquireWriteLock(changeLog);
@@ -144,8 +139,7 @@ public abstract class AbstractISMLockingTest extends TestCase {
         ChangeLog cl = new ChangeLog();
         cl.added(state);
         WriteLock wLock = locking.acquireWriteLock(cl);
-        for (Iterator it = logs.iterator(); it.hasNext();) {
-            ChangeLog changeLog = (ChangeLog) it.next();
+        for (ChangeLog changeLog : logs) {
             verifyBlocked(startWriterThread(locking, changeLog));
         }
         wLock.release();
@@ -157,8 +151,7 @@ public abstract class AbstractISMLockingTest extends TestCase {
      * @throws InterruptedException on interruption; this will err the test
      */
     public void testDowngrade() throws InterruptedException {
-        for (Iterator it = logs.iterator(); it.hasNext();) {
-            ChangeLog changeLog = (ChangeLog) it.next();
+        for (ChangeLog changeLog : logs) {
             WriteLock wLock = locking.acquireWriteLock(changeLog);
             verifyBlocked(startReaderThread(locking, state.getId()));
             ReadLock rLock = wLock.downgrade();
