diff --git a/jackrabbit-spi2jcr/src/main/java/org/apache/jackrabbit/spi2jcr/EventSubscription.java b/jackrabbit-spi2jcr/src/main/java/org/apache/jackrabbit/spi2jcr/EventSubscription.java
index 063f476..94a389e 100644
--- a/jackrabbit-spi2jcr/src/main/java/org/apache/jackrabbit/spi2jcr/EventSubscription.java
+++ b/jackrabbit-spi2jcr/src/main/java/org/apache/jackrabbit/spi2jcr/EventSubscription.java
@@ -19,40 +19,22 @@ package org.apache.jackrabbit.spi2jcr;
 import org.apache.jackrabbit.spi.EventBundle;
 import org.apache.jackrabbit.spi.EventFilter;
 import org.apache.jackrabbit.spi.Event;
-import org.apache.jackrabbit.spi.ItemId;
-import org.apache.jackrabbit.spi.NodeId;
 import org.apache.jackrabbit.spi.IdFactory;
-import org.apache.jackrabbit.spi.Name;
-import org.apache.jackrabbit.spi.Path;
 import org.apache.jackrabbit.spi.Subscription;
-import org.apache.jackrabbit.spi.QValue;
 import org.apache.jackrabbit.spi.QValueFactory;
-import org.apache.jackrabbit.spi.commons.EventImpl;
 import org.apache.jackrabbit.spi.commons.EventBundleImpl;
 import org.apache.jackrabbit.spi.commons.EventFilterImpl;
-import org.apache.jackrabbit.spi.commons.value.ValueFormat;
-import org.apache.jackrabbit.spi.commons.conversion.NameException;
-import org.apache.jackrabbit.spi.commons.conversion.NameResolver;
-import org.apache.jackrabbit.spi.commons.conversion.NamePathResolver;
 import org.slf4j.LoggerFactory;
 import org.slf4j.Logger;
 
 import javax.jcr.observation.EventListener;
 import javax.jcr.observation.ObservationManager;
-import javax.jcr.Session;
-import javax.jcr.Node;
-import javax.jcr.UnsupportedRepositoryOperationException;
-import javax.jcr.NamespaceException;
 import javax.jcr.RepositoryException;
-import javax.jcr.PropertyType;
-import javax.jcr.nodetype.NodeType;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Iterator;
 import java.util.Arrays;
 import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
 
 /**
  * <code>EventSubscription</code> listens for JCR events and creates SPI event
@@ -76,37 +58,33 @@ class EventSubscription implements Subscription, EventListener {
             | javax.jcr.observation.Event.NODE_MOVED
             | javax.jcr.observation.Event.PERSIST;
 
-    private final List eventBundles = new ArrayList();
-
-    private final IdFactory idFactory;
-
-    private final QValueFactory qValueFactory;
+    private final List<EventBundle> eventBundles = new ArrayList<EventBundle>();
 
     private final SessionInfoImpl sessionInfo;
 
     /**
      * Current list of filters. Copy on write is performed on this list.
      */
-    private volatile List filters;
+    private volatile List<EventFilter> filters;
 
     /**
-     * The resolver of the underlying session.
+     * Set to <code>true</code> if this subscription has been disposed.
      */
-    private final NamePathResolver resolver;
+    private volatile boolean disposed = false;
 
     /**
-     * Set to <code>true</code> if this subscription has been disposed.
+     * The event factory.
      */
-    private volatile boolean disposed = false;
+    private final EventFactory eventFactory;
 
     /**
      * Creates a new subscription for the passed session.
      *
-     * @param idFactory   the id factory.
-     * @param qValueFactory
-     * @param sessionInfo the session info.
-     * @param filters     the filters that should be applied to the generated
-     *                    events.
+     * @param idFactory     the id factory.
+     * @param qValueFactory the QValueFactory.
+     * @param sessionInfo   the session info.
+     * @param filters       the filters that should be applied to the generated
+     *                      events.
      * @throws RepositoryException if an error occurs while an event listener is
      *                             registered with the session.
      */
@@ -114,14 +92,12 @@ class EventSubscription implements Subscription, EventListener {
                       QValueFactory qValueFactory,
                       SessionInfoImpl sessionInfo,
                       EventFilter[] filters) throws RepositoryException {
-        this.idFactory = idFactory;
-        this.qValueFactory = qValueFactory;
         this.sessionInfo = sessionInfo;
-        this.resolver = sessionInfo.getNamePathResolver();
+        this.eventFactory = new EventFactory(sessionInfo.getSession(),
+                sessionInfo.getNamePathResolver(), idFactory, qValueFactory);
         setFilters(filters);
         ObservationManager obsMgr = sessionInfo.getSession().getWorkspace().getObservationManager();
-        obsMgr.addEventListener(this, EventSubscription.ALL_EVENTS,
-                "/", true, null, null, true);
+        obsMgr.addEventListener(this, EventSubscription.ALL_EVENTS, "/", true, null, null, true);
     }
 
     /**
@@ -140,12 +116,12 @@ class EventSubscription implements Subscription, EventListener {
      */
     void setFilters(EventFilter[] filters) throws RepositoryException {
         // check type
-        for (int i = 0; i < filters.length; i++) {
-            if (!(filters[i] instanceof EventFilterImpl)) {
+        for (EventFilter filter : filters) {
+            if (!(filter instanceof EventFilterImpl)) {
                 throw new RepositoryException("Unknown filter implementation");
             }
         }
-        List tmp = new ArrayList(Arrays.asList(filters));
+        List<EventFilter> tmp = new ArrayList<EventFilter>(Arrays.asList(filters));
         this.filters = Collections.unmodifiableList(tmp);
 
     }
@@ -234,76 +210,10 @@ class EventSubscription implements Subscription, EventListener {
         if (disposed) {
             return;
         }
-        List spiEvents = new ArrayList();
+        List<Event> spiEvents = new ArrayList<Event>();
         while (events.hasNext()) {
             try {
-                Session session = sessionInfo.getSession();
-                javax.jcr.observation.Event e = events.nextEvent();
-                Path p = resolver.getQPath(e.getPath());
-                Path parent = p.getAncestor(1);
-                int type = e.getType();
-
-                NodeId parentId = idFactory.createNodeId((String) null, parent);
-                String identifier = e.getIdentifier();
-                ItemId itemId;
-                Node node = null;
-                if (identifier != null) {
-                    itemId = idFactory.fromJcrIdentifier(e.getIdentifier());
-                    try {
-                        node = session.getItem(e.getPath()).getParent();
-                    } catch (RepositoryException re) {
-                        // ignore. TODO improve
-                    }
-                } else {
-                    switch (type) {
-                        case Event.NODE_ADDED:
-                        case Event.NODE_MOVED:
-                            node = session.getItem(e.getPath()).getParent();
-                        case Event.NODE_REMOVED:
-                            itemId = idFactory.createNodeId((String) null, p);
-                            break;
-                        case Event.PROPERTY_ADDED:
-                        case Event.PROPERTY_CHANGED:
-                            node = session.getItem(e.getPath()).getParent();
-                        case Event.PROPERTY_REMOVED:
-                            itemId = idFactory.createPropertyId(parentId,
-                                    p.getNameElement().getName());
-                            break;
-                        case Event.PERSIST:
-                        default:
-                            itemId = null;
-                    }
-                }
-
-                Name nodeTypeName = null;
-                Name[] mixinTypes = new Name[0];
-                if (node != null) {
-                    try {
-                        parentId = idFactory.createNodeId(node.getUUID(), null);
-                    } catch (UnsupportedRepositoryOperationException ex) {
-                        // not referenceable
-                    }
-                    nodeTypeName = resolver.getQName(node.getPrimaryNodeType().getName());
-                    mixinTypes = getNodeTypeNames(node.getMixinNodeTypes(), resolver);
-                }
-                Map<Name, QValue> info = new HashMap();
-                Map jcrInfo = e.getInfo();
-                for (Iterator it = jcrInfo.keySet().iterator(); it.hasNext();) {
-                    String key = it.next().toString();
-                    Object value = jcrInfo.get(key);
-
-                    Name name = resolver.getQName(key);
-                    if (value != null) {
-                        // event information is generated for NODE_MOVED only in which
-                        // case all values are of type PATH.
-                        QValue v = ValueFormat.getQValue(value.toString(), PropertyType.PATH, resolver, qValueFactory);
-                        info.put(name, v);
-                    } else {
-                        info.put(name, null);
-                    }
-                }
-                Event spiEvent = new EventImpl(e.getType(), p, itemId, parentId,
-                        nodeTypeName, mixinTypes, e.getUserID(), e.getUserData(), e.getDate(), info);
+                Event spiEvent = eventFactory.fromJCREvent(events.nextEvent());
                 spiEvents.add(spiEvent);
             } catch (Exception ex) {
                 log.warn("Unable to create SPI Event: " + ex);
@@ -315,25 +225,4 @@ class EventSubscription implements Subscription, EventListener {
             eventBundles.notify();
         }
     }
-
-    /**
-     * Returns the names of the passed node types using the namespace
-     * resolver to parse the names.
-     *
-     * @param nt         the node types
-     * @param resolver
-     * @return the names of the node types.
-     * @throws NameException if a node type returns an illegal name.
-     * @throws NamespaceException if the name of a node type contains a
-     * prefix that is not known to <code>resolver</code>.
-     */
-    private static Name[] getNodeTypeNames(NodeType[] nt, NameResolver resolver)
-            throws NameException, NamespaceException {
-        Name[] names = new Name[nt.length];
-        for (int i = 0; i < nt.length; i++) {
-            Name ntName = resolver.getQName(nt[i].getName());
-            names[i] = ntName;
-        }
-        return names;
-    }
 }
