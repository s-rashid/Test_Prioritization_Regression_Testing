diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java
index 2040418..8f1938c 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java
@@ -14,6 +14,7 @@ import org.eclipse.core.resources.*;
 import org.eclipse.core.runtime.*;
 
 import org.eclipse.jdt.core.JavaCore;
+import org.eclipse.jdt.internal.compiler.ClassFile;
 import org.eclipse.jdt.internal.core.util.Messages;
 import org.eclipse.jdt.internal.core.util.Util;
 
@@ -21,9 +22,14 @@ import java.util.*;
 
 public class BatchImageBuilder extends AbstractImageBuilder {
 
+	IncrementalImageBuilder incrementalBuilder; // if annotations or secondary types have to be processed after the compile loop
+	ArrayList missingSecondaryTypes; // qualified names for any secondary types found after the first compile loop
+
 protected BatchImageBuilder(JavaBuilder javaBuilder, boolean buildStarting) {
 	super(javaBuilder, buildStarting, null);
 	this.nameEnvironment.isIncrementalBuild = false;
+	this.incrementalBuilder = null;
+	this.missingSecondaryTypes = null;
 }
 
 public void build() {
@@ -34,12 +40,12 @@ public void build() {
 		notifier.subTask(Messages.bind(Messages.build_cleaningOutput, this.javaBuilder.currentProject.getName()));
 		JavaBuilder.removeProblemsAndTasksFor(javaBuilder.currentProject);
 		cleanOutputFolders(true);
-		notifier.updateProgressDelta(0.1f);
+		notifier.updateProgressDelta(0.05f);
 
 		notifier.subTask(Messages.build_analyzingSources); 
 		ArrayList sourceFiles = new ArrayList(33);
 		addAllSourceFiles(sourceFiles);
-		notifier.updateProgressDelta(0.15f);
+		notifier.updateProgressDelta(0.10f);
 
 		if (sourceFiles.size() > 0) {
 			SourceFile[] allSourceFiles = new SourceFile[sourceFiles.size()];
@@ -48,6 +54,11 @@ public void build() {
 			notifier.setProgressPerCompilationUnit(0.75f / allSourceFiles.length);
 			workQueue.addAll(allSourceFiles);
 			compile(allSourceFiles);
+
+			if (this.missingSecondaryTypes != null && !this.missingSecondaryTypes.isEmpty())
+				rebuildTypesAffectedByMissingSecondaryTypes();
+			if (this.incrementalBuilder != null)
+				this.incrementalBuilder.buildAfterBatchBuild();
 		}
 
 		if (javaBuilder.javaProject.hasCycleMarker())
@@ -59,6 +70,11 @@ public void build() {
 	}
 }
 
+protected void acceptSecondaryType(ClassFile classFile) {
+	if (this.missingSecondaryTypes != null)
+		this.missingSecondaryTypes.add(classFile.fileName());
+}
+
 protected void addAllSourceFiles(final ArrayList sourceFiles) throws CoreException {
 	for (int i = 0, l = sourceLocations.length; i < l; i++) {
 		final ClasspathMultiDirectory sourceLocation = sourceLocations[i];
@@ -189,6 +205,18 @@ protected void cleanOutputFolders(boolean copyBack) throws CoreException {
 	}
 }
 
+protected void cleanUp() {
+	this.incrementalBuilder = null;
+	this.missingSecondaryTypes = null;
+	super.cleanUp();
+}
+
+protected void compile(SourceFile[] units, SourceFile[] additionalUnits, boolean compilingFirstGroup) {
+	if (!compilingFirstGroup && this.missingSecondaryTypes == null)
+		this.missingSecondaryTypes = new ArrayList(7);
+	super.compile(units, additionalUnits, compilingFirstGroup);
+}
+
 protected void copyExtraResourcesBack(ClasspathMultiDirectory sourceLocation, final boolean deletedAll) throws CoreException {
 	// When, if ever, does a builder need to copy resources files (not .java or .class) into the output folder?
 	// If we wipe the output folder at the beginning of the build then all 'extra' resources must be copied to the output folder.
@@ -288,33 +316,21 @@ protected IResource findOriginalResource(IPath partialPath) {
 }
 
 protected void processAnnotationResults(CompilationParticipantResult[] results) {
-	// called AFTER the build loop once all source files have been compiled
-
 	// to compile the compilation participant results, we need to incrementally recompile all affected types
 	// whenever the generated types are initially added or structurally changed
+	if (this.incrementalBuilder == null)
+		this.incrementalBuilder = new IncrementalImageBuilder(this);
+	this.incrementalBuilder.processAnnotationResults(results);
+}
 
-	// this is a copy of the incremental build loop
-	IncrementalImageBuilder incrementalBuilder = new IncrementalImageBuilder(this);
-	try {
-		incrementalBuilder.resetCollections();
-		incrementalBuilder.processAnnotationResults(results);
-		incrementalBuilder.addAffectedSourceFiles(); // pick up any affected source files of the deleted generated files
-
-		while (incrementalBuilder.sourceFiles.size() > 0) {
-			SourceFile[] allSourceFiles = new SourceFile[incrementalBuilder.sourceFiles.size()];
-			incrementalBuilder.sourceFiles.toArray(allSourceFiles);
-			incrementalBuilder.resetCollections();
-
-			incrementalBuilder.workQueue.addAll(allSourceFiles);
-			incrementalBuilder.compile(allSourceFiles);
-			incrementalBuilder.removeSecondaryTypes();
-			incrementalBuilder.addAffectedSourceFiles();
-		}
-	} catch (CoreException e) {
-		throw internalException(e);
-	} finally {
-		incrementalBuilder.cleanUp();
-	}
+protected void rebuildTypesAffectedByMissingSecondaryTypes() {
+	// to compile types that could not find 'missing' secondary types because of multiple
+	// compile groups, we need to incrementally recompile all affected types as if the missing
+	// secondary types have just been added
+	if (this.incrementalBuilder == null)
+		this.incrementalBuilder = new IncrementalImageBuilder(this);
+	for (int i = this.missingSecondaryTypes.size(); --i >=0; )
+		this.incrementalBuilder.addAffectedSourceFiles((char[]) this.missingSecondaryTypes.get(i));
 }
 
 public String toString() {
