diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/SourceParameterDeclarationImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/SourceParameterDeclarationImpl.java
index faeed38..a91298e 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/SourceParameterDeclarationImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/SourceParameterDeclarationImpl.java
@@ -10,105 +10,108 @@
  *******************************************************************************/
 package org.eclipse.jdt.apt.core.internal.declaration;
 
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
-
 import org.eclipse.core.resources.IFile;
 import org.eclipse.jdt.apt.core.internal.env.BaseProcessorEnv;
-import org.eclipse.jdt.apt.core.internal.util.SourcePositionImpl;
-import org.eclipse.jdt.core.dom.ASTNode;
-import org.eclipse.jdt.core.dom.CompilationUnit;
-import org.eclipse.jdt.core.dom.IExtendedModifier;
+import org.eclipse.jdt.apt.core.internal.util.Factory;
 import org.eclipse.jdt.core.dom.ITypeBinding;
-import org.eclipse.jdt.core.dom.MethodDeclaration;
+import org.eclipse.jdt.core.dom.IVariableBinding;
+import org.eclipse.jdt.core.dom.Name;
 import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
+import org.eclipse.jdt.core.dom.Type;
 
-import com.sun.mirror.declaration.Modifier;
 import com.sun.mirror.declaration.ParameterDeclaration;
-import com.sun.mirror.util.SourcePosition;
+import com.sun.mirror.type.TypeMirror;
+import com.sun.mirror.util.DeclarationVisitor;
 
 /**
  * Represents a formal parameter that came from source
  */
-public class SourceParameterDeclarationImpl extends ParameterDeclarationImpl implements ParameterDeclaration{
-
-    // Ideally, we would store the IVariableBinding, but getting to it could be expensive
-    // since it requires the ast node (SingleVariableDeclaration).
-    // This could have a performance impact if the parameter did not come
-    // from the compilation unit that is in the processor environment. In such a case,
-    // we will have to go parse and resolve the file that contains the declaration.
-    // Currently, the decision is to turn this into a on-demand process. (theodora)
+public class SourceParameterDeclarationImpl 
+	extends ASTBasedDeclarationImpl implements ParameterDeclaration{
    
     /**
      * Parameter declaration from source files
-     * @param the executable that declares this parameter
-     * @param type the type of the parameter
-     * @param index the index of this parameter in <code>executable</code>'s param list.
+     * @param astNode the ast node that defines this parameter
+     * @param file the file where the ast node originates 
+     * @param env
      */
-    public SourceParameterDeclarationImpl(ExecutableDeclarationImpl executable, 
-										  ITypeBinding type, 
-										  int index,
+    public SourceParameterDeclarationImpl(SingleVariableDeclaration astNode,
+    									  IFile file,
 										  BaseProcessorEnv env)
     {	
-		super(executable, type, index, env);	
+    	super( astNode, file, env);
     }
-	
-	public Collection<Modifier> getModifiers()
-	{
-		final SingleVariableDeclaration paramDecl = getAstNode();
-		if( paramDecl == null ) return Collections.emptyList();
-		final List<IExtendedModifier> extMods = paramDecl.modifiers();
-        if( extMods == null || extMods.isEmpty() ) return Collections.emptyList();      
-        for( IExtendedModifier extMod : extMods ){
-            if( extMod.isModifier() ){				
-				final org.eclipse.jdt.core.dom.Modifier mod = 
-					(org.eclipse.jdt.core.dom.Modifier)extMod;
-				if( org.eclipse.jdt.core.dom.Modifier.isFinal(mod.getFlags()) )
-					return Collections.singletonList(Modifier.FINAL);                
-            }
-        }
-		return Collections.emptyList();
-	}
- 
-    public SourcePosition getPosition()
+    
+    public void accept(DeclarationVisitor visitor)
+    {
+        super.accept(visitor);
+        visitor.visitParameterDeclaration(this);
+    }  
+    
+    public TypeMirror getType()
     {
-		final ASTNode node = getAstNode();
-		if( node == null ) return null;
-        final CompilationUnit unit = _executable.getCompilationUnit();
-        final int offset = node.getStartPosition();		
-        return new SourcePositionImpl(node.getStartPosition(),
-                                      node.getLength(),
-                                      unit.lineNumber(offset),
-                                      unit.columnNumber(offset),
-                                      this);
+    	final SingleVariableDeclaration astNode = getAstNode();
+    	final Type  type = astNode.getType();
+    	if( type == null )
+    		return Factory.createErrorClassType(EMPTY_STRING);
+    	final IVariableBinding varBinding = astNode.resolveBinding();
+    	if( varBinding == null ){
+    		String typeName = type.toString();
+			 if( astNode.isVarargs() )
+				 return Factory.createErrorArrayType(typeName, 1);
+			 else
+				 return Factory.createErrorClassType(typeName);
+    	}
+    	else{
+    		 final ITypeBinding typeBinding = varBinding.getType();
+    		 if( typeBinding == null ){
+    			 String typeName = type.toString();
+    			 if( astNode.isVarargs() )
+    				 return Factory.createErrorArrayType(typeName, 1);
+    			 else
+    				 return Factory.createErrorClassType(typeName);
+             }
+    		 else{
+	        	final TypeMirror mirrorType = Factory.createTypeMirror(typeBinding, _env);
+	            if(mirrorType == null )
+	                return Factory.createErrorClassType(type.toString());
+	            return mirrorType;
+    	     }
+    	}
     }
     
+    public String getSimpleName()
+    {
+    	final Name nameNode = getAstNode().getName();
+    	return nameNode == null ? EMPTY_STRING : nameNode.toString();
+    }
+    
+    public String getDocComment()
+    {   
+    	return EMPTY_STRING;
+    }
+    
+    SingleVariableDeclaration getAstNode()
+    {
+    	return (SingleVariableDeclaration)_astNode;
+    }  
+    
+    public MirrorKind kind(){ return MirrorKind.FORMAL_PARAMETER; }
+    
+    public String toString(){
+    	return _astNode.toString();
+    }
+	
 	public boolean equals(Object obj){
         if( obj instanceof SourceParameterDeclarationImpl ){
             final SourceParameterDeclarationImpl otherParam = (SourceParameterDeclarationImpl)obj;
-            return otherParam._paramIndex == _paramIndex  &&
-                   otherParam._executable.getDeclarationBinding().isEqualTo(_executable.getDeclarationBinding()) ;
+            return _astNode == otherParam._astNode;
         }
         return false;
     }
-  	
-	public boolean isFromSource(){ return true; }
-
-    SingleVariableDeclaration getAstNode()
-    {
-        final MethodDeclaration methodDecl = (MethodDeclaration)_executable.getAstNode();
-		if( methodDecl == null ) return null;
-        return (SingleVariableDeclaration)methodDecl.parameters().get(_paramIndex);
-    }
-
-    CompilationUnit getCompilationUnit()
-    {
-        return _executable.getCompilationUnit();
-    }
-
-    public IFile getResource(){
-        return _executable.getResource();
+	
+	public int hashCode(){
+		return _astNode.hashCode();
     }
 }
