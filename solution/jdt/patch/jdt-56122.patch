diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/FieldInfo.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/FieldInfo.java
index 362a9c1..478d1fc 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/FieldInfo.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/FieldInfo.java
@@ -12,136 +12,75 @@ package org.eclipse.jdt.internal.compiler.classfmt;
 
 import org.eclipse.jdt.core.compiler.CharOperation;
 import org.eclipse.jdt.internal.compiler.codegen.AttributeNamesConstants;
-import org.eclipse.jdt.internal.compiler.codegen.ConstantPool;
+import org.eclipse.jdt.internal.compiler.env.IBinaryAnnotation;
 import org.eclipse.jdt.internal.compiler.env.IBinaryField;
-import org.eclipse.jdt.internal.compiler.impl.BooleanConstant;
-import org.eclipse.jdt.internal.compiler.impl.ByteConstant;
-import org.eclipse.jdt.internal.compiler.impl.CharConstant;
-import org.eclipse.jdt.internal.compiler.impl.Constant;
-import org.eclipse.jdt.internal.compiler.impl.DoubleConstant;
-import org.eclipse.jdt.internal.compiler.impl.FloatConstant;
-import org.eclipse.jdt.internal.compiler.impl.IntConstant;
-import org.eclipse.jdt.internal.compiler.impl.LongConstant;
-import org.eclipse.jdt.internal.compiler.impl.ShortConstant;
-import org.eclipse.jdt.internal.compiler.impl.StringConstant;
-import org.eclipse.jdt.internal.compiler.lookup.TagBits;
+import org.eclipse.jdt.internal.compiler.impl.*;
 import org.eclipse.jdt.internal.compiler.lookup.TypeIds;
 import org.eclipse.jdt.internal.compiler.util.Util;
 
 public class FieldInfo extends ClassFileStruct implements IBinaryField, Comparable {
-	private int accessFlags;
-	private int attributeBytes;
-	private Constant constant;
-	private int[] constantPoolOffsets;
-	private char[] descriptor;
-	private char[] name;
-	private char[] signature;
-	private int signatureUtf8Offset;
-	private long tagBits;	
-	private Object wrappedConstantValue;
+	protected int accessFlags;
+	protected int attributeBytes;
+	protected Constant constant;
+	protected char[] descriptor;
+	protected char[] name;
+	protected char[] signature;
+	protected int signatureUtf8Offset;
+	protected long tagBits;	
+	protected Object wrappedConstantValue;	
+
+public static FieldInfo createField(byte classFileBytes[], int offsets[], int offset) {
+	FieldInfo fieldInfo = new FieldInfo(classFileBytes, offsets, offset);
+	AnnotationInfo[] annotations = fieldInfo.readAttributes();
+	if (annotations == null)
+		return fieldInfo;
+	return new FieldInfoWithAnnotation(fieldInfo, annotations);
+}
+
 /**
  * @param classFileBytes byte[]
  * @param offsets int[]
  * @param offset int
  */
-public FieldInfo (byte classFileBytes[], int offsets[], int offset) {
-	super(classFileBytes, offset);
-	constantPoolOffsets = offsets;
-	accessFlags = -1;
-	int attributesCount = u2At(6);
-	int readOffset = 8;
+protected FieldInfo (byte classFileBytes[], int offsets[], int offset) {
+	super(classFileBytes, offsets, offset);
+	this.accessFlags = -1;	
 	this.signatureUtf8Offset = -1;
-	for (int i = 0; i < attributesCount; i++) {
-		// check the name of each attribute
-		int utf8Offset = constantPoolOffsets[u2At(readOffset)] - structOffset;
-		char[] attributeName = utf8At(utf8Offset + 3, u2At(utf8Offset + 1));
-		if (attributeName.length > 0) {
-			switch(attributeName[0]) {
-				case 'S' :
-					if (CharOperation.equals(AttributeNamesConstants.SignatureName, attributeName)) {
-						this.signatureUtf8Offset = constantPoolOffsets[u2At(readOffset + 6)] - structOffset;
-					}
-					break;
-				case 'R' :
-					if (CharOperation.equals(attributeName, AttributeNamesConstants.RuntimeVisibleAnnotationsName)
-							|| CharOperation.equals(attributeName, AttributeNamesConstants.RuntimeInvisibleAnnotationsName)) {
-						decodeStandardAnnotations(readOffset);
-					}
+}
+private AnnotationInfo[] decodeAnnotations(int offset, boolean runtimeVisible) {
+	int numberOfAnnotations = u2At(offset + 6);
+	if (numberOfAnnotations > 0) {
+		int readOffset = offset + 8;
+		AnnotationInfo[] newInfos = null;
+		int newInfoCount = 0;
+		for (int i = 0; i < numberOfAnnotations; i++) {
+			// With the last parameter being 'false', the data structure will not be flushed out
+			AnnotationInfo newInfo = new AnnotationInfo(this.reference, this.constantPoolOffsets,
+				readOffset + this.structOffset, runtimeVisible, false);
+			readOffset += newInfo.readOffset;
+			long standardTagBits = newInfo.standardAnnotationTagBits;
+			if (standardTagBits != 0) {
+				this.tagBits |= standardTagBits;
+			} else {
+				if (newInfos == null)
+					newInfos = new AnnotationInfo[numberOfAnnotations - i];
+				newInfos[newInfoCount++] = newInfo;
 			}
 		}
-		readOffset += (6 + u4At(readOffset + 2));
+		if (newInfos != null) {
+			if (newInfoCount != newInfos.length)
+				System.arraycopy(newInfos, 0, newInfos = new AnnotationInfo[newInfoCount], 0, newInfoCount);
+			return newInfos;
+		}
 	}
-	attributeBytes = readOffset;
+	return null; // nothing to record
 }
-
 public int compareTo(Object o) {
 	if (!(o instanceof FieldInfo)) {
 		throw new ClassCastException();
 	}
 	return new String(this.getName()).compareTo(new String(((FieldInfo) o).getName()));
 }
-private int decodeAnnotation(int offset) {
-	int readOffset = offset;
-	int utf8Offset = this.constantPoolOffsets[u2At(offset)] - structOffset;
-	char[] typeName = utf8At(utf8Offset + 3, u2At(utf8Offset + 1));
-	int numberOfPairs = u2At(offset + 2);
-	readOffset += 4;
-	if (typeName.length == 22 && CharOperation.equals(typeName, ConstantPool.JAVA_LANG_DEPRECATED)) {
-		this.tagBits |= TagBits.AnnotationDeprecated;
-		return readOffset;		
-	}
-	for (int i = 0; i < numberOfPairs; i++) {
-		readOffset += 2;
-		readOffset = decodeElementValue(readOffset);
-	}
-	return readOffset;
-}
-private int decodeElementValue(int offset) {
-	int readOffset = offset;
-	int tag = u1At(readOffset);
-	readOffset++;
-	switch(tag) {
-		case 'B' :
-		case 'C' :
-		case 'D' :
-		case 'F' :
-		case 'I' :
-		case 'J' :
-		case 'S' :
-		case 'Z' :
-		case 's' :
-			readOffset += 2;
-			break;
-		case 'e' :
-			readOffset += 4;
-			break;
-		case 'c' :
-			readOffset += 2;
-			break;
-		case '@' :
-			readOffset = decodeAnnotation(readOffset);
-			break;
-		case '[' :
-			int numberOfValues = u2At(readOffset);
-			readOffset += 2;
-			for (int i = 0; i < numberOfValues; i++) {
-				readOffset = decodeElementValue(readOffset);
-			}
-			break;
-	}
-	return readOffset;
-}
-/**
- * @param offset the offset is located at the beginning of the runtime visible 
- * annotation attribute.
- */
-private void decodeStandardAnnotations(int offset) {
-	int numberOfAnnotations = u2At(offset + 6);
-	int readOffset = offset + 8;
-	for (int i = 0; i < numberOfAnnotations; i++) {
-		readOffset = decodeAnnotation(readOffset);
-	}
-}
 /**
  * Return the constant of the field.
  * Return org.eclipse.jdt.internal.compiler.impl.Constant.NotAConstant if there is none.
@@ -213,6 +152,12 @@ public char[] getTypeName() {
 	return descriptor;
 }
 /**
+ * @return the annotations or null if there is none.
+ */
+public IBinaryAnnotation[] getAnnotations() {
+	return null;
+}
+/**
  * Return a wrapper that contains the constant of the field.
  * @return java.lang.Object
  */
@@ -264,7 +209,7 @@ public boolean hasConstant() {
  * This method is used to fully initialize the contents of the receiver. All methodinfos, fields infos
  * will be therefore fully initialized and we can get rid of the bytes.
  */
-void initialize() {
+protected void initialize() {
 	getModifiers();
 	getName();
 	getConstant();
@@ -279,7 +224,45 @@ void initialize() {
 public boolean isSynthetic() {
 	return (getModifiers() & ClassFileConstants.AccSynthetic) != 0;
 }
-
+private AnnotationInfo[] readAttributes() {
+	int attributesCount = u2At(6);
+	int readOffset = 8;
+	AnnotationInfo[] annotations = null;
+	for (int i = 0; i < attributesCount; i++) {
+		// check the name of each attribute
+		int utf8Offset = this.constantPoolOffsets[u2At(readOffset)] - this.structOffset;
+		char[] attributeName = utf8At(utf8Offset + 3, u2At(utf8Offset + 1));
+		if (attributeName.length > 0) {
+			switch(attributeName[0]) {
+				case 'S' :
+					if (CharOperation.equals(AttributeNamesConstants.SignatureName, attributeName))
+						this.signatureUtf8Offset = this.constantPoolOffsets[u2At(readOffset + 6)] - this.structOffset;
+					break;
+				case 'R' :
+					AnnotationInfo[] decodedAnnotations = null;
+					if (CharOperation.equals(attributeName, AttributeNamesConstants.RuntimeVisibleAnnotationsName)) {
+						decodedAnnotations = decodeAnnotations(readOffset, true);
+					} else if (CharOperation.equals(attributeName, AttributeNamesConstants.RuntimeInvisibleAnnotationsName)) {
+						decodedAnnotations = decodeAnnotations(readOffset, false);
+					}
+					if (decodedAnnotations != null) {
+						if (annotations == null) {
+							annotations = decodedAnnotations;
+						} else {
+							int length = annotations.length;			
+							AnnotationInfo[] combined = new AnnotationInfo[length + decodedAnnotations.length];
+							System.arraycopy(annotations, 0, combined, 0, length);
+							System.arraycopy(decodedAnnotations, 0, combined, length, decodedAnnotations.length);
+							annotations = combined;
+						}
+					}
+			}
+		}
+		readOffset += (6 + u4At(readOffset + 2));
+	}
+	this.attributeBytes = readOffset;
+	return annotations;
+}
 private void readConstantAttribute() {
 	int attributesCount = u2At(6);
 	int readOffset = 8;
@@ -364,10 +347,6 @@ private void readModifierRelatedAttributes() {
 		readOffset += (6 + u4At(readOffset + 2));
 	}
 }
-protected void reset() {
-	this.constantPoolOffsets = null;
-	super.reset();
-}
 /**
  * Answer the size of the receiver in bytes.
  * 
@@ -380,9 +359,13 @@ public void throwFormatException() throws ClassFormatException {
 	throw new ClassFormatException(ClassFormatException.ErrBadFieldInfo);
 }
 public String toString() {
-	StringBuffer buffer = new StringBuffer(this.getClass().getName());
+	StringBuffer buffer = new StringBuffer(this.getClass().getName());	
+	toStringContent(buffer);
+	return buffer.toString();
+}
+protected void toStringContent(StringBuffer buffer) {
 	int modifiers = getModifiers();
-	return buffer
+	buffer
 		.append("{") //$NON-NLS-1$
 		.append(
 			((modifiers & ClassFileConstants.AccDeprecated) != 0 ? "deprecated " : "") //$NON-NLS-1$ //$NON-NLS-2$
@@ -401,5 +384,4 @@ public String toString() {
 		.append("}") //$NON-NLS-1$
 		.toString(); 
 }
-
 }
