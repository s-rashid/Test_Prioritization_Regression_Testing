diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java
index 317393d6..184bace 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java
@@ -68,7 +68,7 @@ public class FieldDeclaration extends AbstractVariableDeclaration {
 		if (this.binding != null
 				&& this.binding.isValidBinding()
 				&& this.binding.isStatic()
-				&& !this.binding.isConstantValue()
+				&& this.binding.constant() == Constant.NotAConstant
 				&& this.binding.declaringClass.isNestedType()
 				&& !this.binding.declaringClass.isStatic()) {
 			initializationScope.problemReporter().unexpectedStaticModifierForField(
@@ -103,7 +103,7 @@ public class FieldDeclaration extends AbstractVariableDeclaration {
 		int pc = codeStream.position;
 		boolean isStatic;
 		if (this.initialization != null
-			&& !((isStatic = this.binding.isStatic()) && this.binding.isConstantValue())) {
+			&& !((isStatic = this.binding.isStatic()) && this.binding.constant() != Constant.NotAConstant)) {
 			// non-static field, need receiver
 			if (!isStatic)
 				codeStream.aload_0();
@@ -241,7 +241,7 @@ public class FieldDeclaration extends AbstractVariableDeclaration {
 							this.binding.setConstant(this.initialization.constant.castTo((this.binding.type.id << 4) + this.initialization.constant.typeID()));
 						}
 					} else {
-						this.binding.setConstant(NotAConstant);
+						this.binding.setConstant(Constant.NotAConstant);
 					}
 				}
 				// Resolve Javadoc comment if one is present
