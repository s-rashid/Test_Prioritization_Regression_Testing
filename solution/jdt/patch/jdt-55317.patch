diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java
index 96e6769..e351cb8 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java
@@ -134,52 +134,52 @@ public ClassFileReader(byte[] classFileBytes, char[] fileName, boolean fullyInit
 		for (int i = 1; i < constantPoolCount; i++) {
 			int tag = this.u1At(readOffset);
 			switch (tag) {
-				case Utf8Tag :
+				case ClassFileConstants.Utf8Tag :
 					this.constantPoolOffsets[i] = readOffset;
 					readOffset += u2At(readOffset + 1);
-					readOffset += ConstantUtf8FixedSize;
+					readOffset += ClassFileConstants.ConstantUtf8FixedSize;
 					break;
-				case IntegerTag :
+				case ClassFileConstants.IntegerTag :
 					this.constantPoolOffsets[i] = readOffset;
-					readOffset += ConstantIntegerFixedSize;
+					readOffset += ClassFileConstants.ConstantIntegerFixedSize;
 					break;
-				case FloatTag :
+				case ClassFileConstants.FloatTag :
 					this.constantPoolOffsets[i] = readOffset;
-					readOffset += ConstantFloatFixedSize;
+					readOffset += ClassFileConstants.ConstantFloatFixedSize;
 					break;
-				case LongTag :
+				case ClassFileConstants.LongTag :
 					this.constantPoolOffsets[i] = readOffset;
-					readOffset += ConstantLongFixedSize;
+					readOffset += ClassFileConstants.ConstantLongFixedSize;
 					i++;
 					break;
-				case DoubleTag :
+				case ClassFileConstants.DoubleTag :
 					this.constantPoolOffsets[i] = readOffset;
-					readOffset += ConstantDoubleFixedSize;
+					readOffset += ClassFileConstants.ConstantDoubleFixedSize;
 					i++;
 					break;
-				case ClassTag :
+				case ClassFileConstants.ClassTag :
 					this.constantPoolOffsets[i] = readOffset;
-					readOffset += ConstantClassFixedSize;
+					readOffset += ClassFileConstants.ConstantClassFixedSize;
 					break;
-				case StringTag :
+				case ClassFileConstants.StringTag :
 					this.constantPoolOffsets[i] = readOffset;
-					readOffset += ConstantStringFixedSize;
+					readOffset += ClassFileConstants.ConstantStringFixedSize;
 					break;
-				case FieldRefTag :
+				case ClassFileConstants.FieldRefTag :
 					this.constantPoolOffsets[i] = readOffset;
-					readOffset += ConstantFieldRefFixedSize;
+					readOffset += ClassFileConstants.ConstantFieldRefFixedSize;
 					break;
-				case MethodRefTag :
+				case ClassFileConstants.MethodRefTag :
 					this.constantPoolOffsets[i] = readOffset;
-					readOffset += ConstantMethodRefFixedSize;
+					readOffset += ClassFileConstants.ConstantMethodRefFixedSize;
 					break;
-				case InterfaceMethodRefTag :
+				case ClassFileConstants.InterfaceMethodRefTag :
 					this.constantPoolOffsets[i] = readOffset;
-					readOffset += ConstantInterfaceMethodRefFixedSize;
+					readOffset += ClassFileConstants.ConstantInterfaceMethodRefFixedSize;
 					break;
-				case NameAndTypeTag :
+				case ClassFileConstants.NameAndTypeTag :
 					this.constantPoolOffsets[i] = readOffset;
-					readOffset += ConstantNameAndTypeFixedSize;
+					readOffset += ClassFileConstants.ConstantNameAndTypeFixedSize;
 			}
 		}
 		// Read and validate access flags
@@ -249,7 +249,7 @@ public ClassFileReader(byte[] classFileBytes, char[] fileName, boolean fullyInit
 			switch(attributeName[0] ) {
 				case 'D' :
 					if (CharOperation.equals(attributeName, AttributeNamesConstants.DeprecatedName)) {
-						this.accessFlags |= AccDeprecated;
+						this.accessFlags |= ClassFileConstants.AccDeprecated;
 					}
 					break;
 				case 'I' :
@@ -282,7 +282,7 @@ public ClassFileReader(byte[] classFileBytes, char[] fileName, boolean fullyInit
 								break;
 							case 'y' :
 								if (CharOperation.equals(attributeName, AttributeNamesConstants.SyntheticName)) {
-									this.accessFlags |= AccSynthetic;
+									this.accessFlags |= ClassFileConstants.AccSynthetic;
 								}
 								break;
 							case 'i' :
@@ -664,7 +664,7 @@ public IBinaryMethod[] getMethods() {
  */
 public int getModifiers() {
 	if (this.innerInfo != null) {
-		return this.innerInfo.getModifiers() | (this.accessFlags & AccDeprecated);
+		return this.innerInfo.getModifiers() | (this.accessFlags & ClassFileConstants.AccDeprecated);
 	}
 	return this.accessFlags;
 }
