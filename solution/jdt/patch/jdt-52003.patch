diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/FilerImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/FilerImpl.java
index 1874ec6..1421625 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/FilerImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/FilerImpl.java
@@ -12,6 +12,7 @@
 package org.eclipse.jdt.apt.core.internal.env;
 
 import java.io.File;
+import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.PrintWriter;
@@ -64,7 +65,28 @@ public class FilerImpl implements Filer {
     {
     	_env.checkValid();
 		_generatedClassFiles = true;
-        throw new UnsupportedOperationException( "Not Yet Implemented" ); //$NON-NLS-1$
+    	GeneratedFileManager gfm = GeneratedFileManager.getGeneratedFileManager( _env.getProject() );
+    	File f = null;
+    	
+    	try 
+    	{
+    		f = gfm.getGeneratedSourceFolderOutputLocation();
+    	}
+    	catch ( Exception e )
+    	{
+    		// TODO - stop throwing this exception
+    		AptPlugin.log(e, "Failure getting the output file"); //$NON-NLS-1$
+    		throw new IOException();
+    	}
+    	
+    	f = new File( f, name.replace( '.', File.separatorChar ) + ".class" ); //$NON-NLS-1$
+  
+        // REVIEW: for no apparent reason it is sometimes necessary to create the
+        // parent dir, else an IOException occurs creating f..
+        File p = f.getParentFile();
+        FileSystemUtil.mkdirs( p );
+    	
+        return new FileOutputStream( f );
     }
 	
 	public boolean hasGeneratedClassFile(){ return _generatedClassFiles; }
@@ -90,10 +112,36 @@ public class FilerImpl implements Filer {
         throws IOException 
     {
     	_env.checkValid();
-    	
-    	// TODO - clean this up
-    	File f = null;
+    	File f = getOutputFileForLocation( loc, pkg, relPath );
+        return charsetName == null ? new PrintWriter( f ) : new PrintWriter( f, charsetName );
+    }
+
+    /**
+     * Creates a new binary file, and returns a stream for writing to it. The 
+     * file is located along with either the newly created source or newly 
+     * created binary files. It may be named relative to some package (as 
+     * are source and binary files), and from there by an arbitrary pathname. 
+     * In a loose sense, the pathname of the new file will be the concatenation 
+     * of loc, pkg, and relPath. 
+     * 
+     * @param loc - location of the new file
+     * @param pkg - package relative to which the file should be named, or the empty string if none
+     * @param relPath - final pathname components of the file 
+     * @return a stream for writing to the new file 
+     */
+    public OutputStream createBinaryFile(Filer.Location loc, String pkg, File relPath)
+        throws IOException 
+    {
+    	_env.checkValid();
+    	File f = getOutputFileForLocation( loc, pkg, relPath );
+    	return new FileOutputStream( f );
+    }
+	
+    private File getOutputFileForLocation( Filer.Location loc, String pkg, File relPath )
+    	throws IOException
+    {
     	GeneratedFileManager gfm = GeneratedFileManager.getGeneratedFileManager( _env.getProject() );
+    	File f = null;
     	if ( loc == Filer.Location.CLASS_TREE )
     	{
     		try 
@@ -109,40 +157,19 @@ public class FilerImpl implements Filer {
     	}
     	else if ( loc == Filer.Location.SOURCE_TREE )
     		f = gfm.getGeneratedSourceFolder().getRawLocation().toFile();
-    			
-
-
+    	
         if( pkg != null )
             f = new File( f, pkg.replace('.', File.separatorChar) );
 
         f = new File( f, relPath.getPath() );
-
+    	
         // REVIEW: for no apparent reason it is sometimes necessary to create the
         // parent dir, else an IOException occurs creating f..
         File p = f.getParentFile();
         FileSystemUtil.mkdirs( p );
-        return charsetName == null ? new PrintWriter( f ) : new PrintWriter( f, charsetName );
+        
+    	return f;
     }
-
-    /**
-     * Creates a new binary file, and returns a stream for writing to it. The 
-     * file is located along with either the newly created source or newly 
-     * created binary files. It may be named relative to some package (as 
-     * are source and binary files), and from there by an arbitrary pathname. 
-     * In a loose sense, the pathname of the new file will be the concatenation 
-     * of loc, pkg, and relPath. 
-     * 
-     * @param loc - location of the new file
-     * @param pkg - package relative to which the file should be named, or the empty string if none
-     * @param relPath - final pathname components of the file 
-     * @return a stream for writing to the new file 
-     */
-    public OutputStream createBinaryFile(Filer.Location loc, String pkg, File relPath)
-        throws IOException 
-    {
-    	_env.checkValid();
-        throw new UnsupportedOperationException( "Not yet implemented"); //$NON-NLS-1$
-    }
-	
+    
     
 }
