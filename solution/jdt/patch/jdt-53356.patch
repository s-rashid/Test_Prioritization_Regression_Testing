diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java
index 0046db1..781432f 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java
@@ -99,15 +99,14 @@ void checkAbstractMethod(MethodBinding abstractMethod) {
 		}
 	}
 }
-void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] otherInheritedMethods) {
-	boolean isAnnotationMember = this.type.isAnnotationType();
+void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] allInheritedMethods) {
+	if (this.type.isAnnotationType()) { // annotation cannot override any method
+		problemReporter().annotationCannotOverrideMethod(currentMethod, methods[length - 1]);
+		return; // do not repoort against subsequent inherited methods
+	}
 	CompilerOptions options = type.scope.compilerOptions();
 	nextMethod : for (int i = length; --i >= 0;) {
 		MethodBinding inheritedMethod = methods[i];
-		if (isAnnotationMember) { // annotation cannot override any method
-			problemReporter().annotationCannotOverrideMethod(currentMethod, inheritedMethod);
-			return; // do not repoort against subsequent inherited methods
-		}
 		if (currentMethod.isStatic() != inheritedMethod.isStatic()) {  // Cannot override a static method or hide an instance method
 			problemReporter(currentMethod).staticAndInstanceConflict(currentMethod, inheritedMethod);
 			continue nextMethod;
@@ -149,7 +148,7 @@ void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] m
 				problemReporter(currentMethod).overridesDeprecatedMethod(currentMethod, inheritedMethod);
 			}
 		}
-		checkForBridgeMethod(currentMethod, inheritedMethod, otherInheritedMethods);
+		checkForBridgeMethod(currentMethod, inheritedMethod, allInheritedMethods);
 	}
 }
 void checkConcreteInheritedMethod(MethodBinding concreteMethod, MethodBinding[] abstractMethods) {
@@ -182,13 +181,7 @@ void checkExceptions(MethodBinding newMethod, MethodBinding inheritedMethod) {
 				problemReporter(newMethod).incompatibleExceptionInThrowsClause(this.type, newMethod, inheritedMethod, newException);
 	}
 }
-void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] otherInheritedMethods) {
-	// no op before 1.5
-}
-void checkForInheritedNameClash(MethodBinding inheritedMethod, MethodBinding otherInheritedMethod) {
-	// no op before 1.5
-}
-void checkForNameClash(MethodBinding currentMethod, MethodBinding inheritedMethod) {
+void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] allInheritedMethods) {
 	// no op before 1.5
 }
 void checkInheritedMethods(MethodBinding[] methods, int length) {
@@ -274,7 +267,6 @@ void checkMethods() {
 		MethodBinding[] matchingInherited = new MethodBinding[inherited.length];
 		if (current != null) {
 			for (int i = 0, length1 = current.length; i < length1; i++) {
-				while (index >= 0) matchingInherited[index--] = null; // clear the previous contents of the matching methods
 				MethodBinding currentMethod = current[i];
 				for (int j = 0, length2 = inherited.length; j < length2; j++) {
 					MethodBinding inheritedMethod = computeSubstituteMethod(inherited[j], currentMethod);
@@ -282,40 +274,39 @@ void checkMethods() {
 						if (areMethodsEqual(currentMethod, inheritedMethod)) {
 							matchingInherited[++index] = inheritedMethod;
 							inherited[j] = null; // do not want to find it again
-						} else {
-							checkForNameClash(currentMethod, inheritedMethod);
 						}
 					}
 				}
-				if (index >= 0)
+				if (index >= 0) {
 					checkAgainstInheritedMethods(currentMethod, matchingInherited, index + 1, inherited); // pass in the length of matching
+					while (index >= 0) matchingInherited[index--] = null; // clear the contents of the matching methods
+				}
 			}
 		}
 
 		for (int i = 0, length = inherited.length; i < length; i++) {
-			while (index >= 0) matchingInherited[index--] = null; // clear the previous contents of the matching methods
 			MethodBinding inheritedMethod = inherited[i];
-			if (inheritedMethod != null) {
-				matchingInherited[++index] = inheritedMethod;
-				for (int j = i + 1; j < length; j++) {
-					MethodBinding otherInheritedMethod = inherited[j];
-					if (canSkipInheritedMethods(inheritedMethod, otherInheritedMethod))
-						continue;
-					otherInheritedMethod = computeSubstituteMethod(otherInheritedMethod, inheritedMethod);
-					if (otherInheritedMethod != null) {
-						if (areMethodsEqual(inheritedMethod, otherInheritedMethod)) {
-							matchingInherited[++index] = otherInheritedMethod;
-							inherited[j] = null; // do not want to find it again
-						} else {
-							checkForInheritedNameClash(inheritedMethod, otherInheritedMethod);
-						}
+			if (inheritedMethod == null) continue;
+
+			matchingInherited[++index] = inheritedMethod;
+			for (int j = i + 1; j < length; j++) {
+				MethodBinding otherInheritedMethod = inherited[j];
+				if (canSkipInheritedMethods(inheritedMethod, otherInheritedMethod))
+					continue;
+				otherInheritedMethod = computeSubstituteMethod(otherInheritedMethod, inheritedMethod);
+				if (otherInheritedMethod != null) {
+					if (areMethodsEqual(inheritedMethod, otherInheritedMethod)) {
+						matchingInherited[++index] = otherInheritedMethod;
+						inherited[j] = null; // do not want to find it again
 					}
 				}
 			}
+			if (index == -1) continue;
 			if (index > 0)
 				checkInheritedMethods(matchingInherited, index + 1); // pass in the length of matching
-			else if (mustImplementAbstractMethods && index == 0 && matchingInherited[0].isAbstract())
+			else if (mustImplementAbstractMethods && matchingInherited[0].isAbstract())
 				checkAbstractMethod(matchingInherited[0]);
+			while (index >= 0) matchingInherited[index--] = null; // clear the contents of the matching methods
 		}
 	}
 }
