diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java
index 7f7983a..43ea427 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java
@@ -61,6 +61,7 @@ import org.eclipse.jdt.internal.core.JarPackageFragmentRoot;
 import org.eclipse.jdt.internal.core.JavaElement;
 import org.eclipse.jdt.internal.core.JavaModelManager;
 import org.eclipse.jdt.internal.core.JavaProject;
+import org.eclipse.jdt.internal.core.LocalVariable;
 import org.eclipse.jdt.internal.core.NameLookup;
 import org.eclipse.jdt.internal.core.Openable;
 import org.eclipse.jdt.internal.core.PackageFragment;
@@ -165,7 +166,6 @@ public class LocalDeclarationVisitor extends ASTVisitor {
 	}
 }
 
-
 public static class WorkingCopyDocument extends JavaSearchDocument {
 	public org.eclipse.jdt.core.ICompilationUnit workingCopy;
 	WorkingCopyDocument(org.eclipse.jdt.core.ICompilationUnit workingCopy, SearchParticipant participant) {
@@ -562,6 +562,34 @@ protected IJavaElement createHandle(FieldDeclaration fieldDeclaration, TypeDecla
 	}
 	return ((IType) parent).getInitializer(occurrenceCount);
 }
+/**
+ * Create an handle for a local variable declartion (may be a local variable or type parameter).
+ */
+protected IJavaElement createHandle(AbstractVariableDeclaration variableDeclaration, IJavaElement parent) {
+	switch (variableDeclaration.getKind()) {
+		case AbstractVariableDeclaration.LOCAL_VARIABLE:
+			return new LocalVariable((JavaElement)parent,
+				new String(variableDeclaration.name),
+				variableDeclaration.declarationSourceStart,
+				variableDeclaration.declarationSourceEnd,
+				variableDeclaration.sourceStart,
+				variableDeclaration.sourceEnd,
+				new String(variableDeclaration.type.resolvedType.signature())
+			);
+		case AbstractVariableDeclaration.PARAMETER:
+			return new LocalVariable((JavaElement)parent,
+				new String(variableDeclaration.name),
+				variableDeclaration.declarationSourceStart,
+				variableDeclaration.declarationSourceEnd,
+				variableDeclaration.sourceStart,
+				variableDeclaration.sourceEnd,
+				new String(variableDeclaration.type.resolvedType.signature())
+			);
+		case AbstractVariableDeclaration.TYPE_PARAMETER:
+			return new org.eclipse.jdt.internal.core.TypeParameter((JavaElement)parent, new String(variableDeclaration.name));
+	}
+	return null;
+}
 /*
  * Creates hierarchy resolver if needed. 
  * Returns whether focus is visible.
@@ -1364,7 +1392,7 @@ public SearchMatch newTypeParameterReferenceMatch(
 	return new TypeParameterReferenceMatch(enclosingElement, accuracy, offset, length, insideDocComment, participant, resource);
 }
 
-public SearchMatch newTypeReferenceMatch(
+public TypeReferenceMatch newTypeReferenceMatch(
 		IJavaElement enclosingElement,
 		Binding enclosingBinding,
 		int accuracy,
@@ -1379,7 +1407,7 @@ public SearchMatch newTypeReferenceMatch(
 	return new TypeReferenceMatch(enclosingElement, accuracy, offset, length, insideDocComment, participant, resource);
 }
 
-public SearchMatch newTypeReferenceMatch(
+public TypeReferenceMatch newTypeReferenceMatch(
 		IJavaElement enclosingElement,
 		Binding enclosingBinding,
 		int accuracy,
@@ -1541,6 +1569,26 @@ protected void report(SearchMatch match) throws CoreException {
 		} catch (Exception e) {
 			// it's just for debug purposes... ignore all exceptions in this area
 		}
+		if (match instanceof TypeReferenceMatch) {
+			try {
+				TypeReferenceMatch typeRefMatch = (TypeReferenceMatch) match;
+				JavaElement local = (JavaElement) typeRefMatch.getLocalElement();
+				if (local != null) {
+					System.out.println("\tLocal element: "+ local.toStringWithAncestors()); //$NON-NLS-1$
+				}
+				IJavaElement[] others = typeRefMatch.getOtherElements();
+				int length = others==null ? 0 : others.length;
+				if (length > 0) {
+					System.out.println("\tOther elements:"); //$NON-NLS-1$
+					for (int i=0; i<length; i++) {
+						JavaElement other = (JavaElement) others[i];
+						System.out.println("\t\t- "+ other.toStringWithAncestors()); //$NON-NLS-1$
+					}
+				}
+			} catch (Exception e) {
+				// it's just for debug purposes... ignore all exceptions in this area
+			}
+		}
 		System.out.println(match.getAccuracy() == SearchMatch.A_ACCURATE
 			? "\tAccuracy: EXACT_MATCH" //$NON-NLS-1$
 			: "\tAccuracy: POTENTIAL_MATCH"); //$NON-NLS-1$
@@ -1848,6 +1896,15 @@ protected void reportMatching(AbstractMethodDeclaration method, IJavaElement par
 		}
 	}
 
+	// report the type parameters
+	TypeParameter[] typeParameters = method.typeParameters();
+	if (typeParameters != null) {
+		if (enclosingElement == null) {
+			enclosingElement = createHandle(method, parent);
+		}
+		reportMatching(typeParameters, enclosingElement, parent, method.binding, nodeSet);
+	}
+
 	// report annotations
 	if (method.annotations != null) {
 		if (enclosingElement == null) {
@@ -1867,7 +1924,7 @@ protected void reportMatching(AbstractMethodDeclaration method, IJavaElement par
 					for (int i = 0, l = nodes.length; i < l; i++) {
 						ASTNode node = nodes[i];
 						Integer level = (Integer) nodeSet.matchingNodes.removeKey(node);
-						this.patternLocator.matchReportReference(node, enclosingElement, method.binding, level.intValue(), this);
+						this.patternLocator.matchReportReference(node, enclosingElement, method.binding, method.scope, level.intValue(), this);
 					}
 					return;
 				}
@@ -2033,7 +2090,7 @@ protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResol
  * Visit the given field declaration and report the nodes that match exactly the
  * search pattern (ie. the ones in the matching nodes set)
  */
-protected void reportMatching(FieldDeclaration field, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException {
+protected void reportMatching(FieldDeclaration field, TypeDeclaration type, IJavaElement parent, IJavaElement[] otherElements, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException {
 	IJavaElement enclosingElement = null;
 	if (accuracy > -1) {
 		enclosingElement = createHandle(field, type, parent);
@@ -2065,17 +2122,39 @@ protected void reportMatching(FieldDeclaration field, TypeDeclaration type, IJav
 	}
 
 	if (typeInHierarchy) {
-		// limit scan to end part position for multiple fields declaration (see bug 73112)
-		int end = field.endPart2Position==0 ? field.declarationSourceEnd : field.endPart2Position;
-		ASTNode[] nodes = nodeSet.matchingNodes(field.declarationSourceStart, end);
+		// Look at field declaration
+		if (field.endPart1Position != 0) { // not necessary if field is an initializer
+			ASTNode[] nodes = nodeSet.matchingNodes(field.declarationSourceStart, field.endPart1Position);
+			if (nodes != null) {
+				if ((this.matchContainer & PatternLocator.FIELD_CONTAINER) == 0) {
+					for (int i = 0, l = nodes.length; i < l; i++)
+						nodeSet.matchingNodes.removeKey(nodes[i]);
+				} else {
+					if (enclosingElement == null)
+						enclosingElement = createHandle(field, type, parent);
+					if (encloses(enclosingElement)) {
+						for (int i = 0, l = nodes.length; i < l; i++) {
+							ASTNode node = nodes[i];
+							Integer level = (Integer) nodeSet.matchingNodes.removeKey(node);
+							this.patternLocator.matchReportReference(node, enclosingElement, null, otherElements, field.binding, level.intValue(), this);
+						}
+					}
+				}
+			}
+		}
+
+		// Look in initializer
+		int fieldEnd = field.endPart2Position == 0 ? field.declarationSourceEnd : field.endPart2Position;
+		ASTNode[] nodes = nodeSet.matchingNodes(field.sourceStart, fieldEnd);
 		if (nodes != null) {
 			if ((this.matchContainer & PatternLocator.FIELD_CONTAINER) == 0) {
 				for (int i = 0, l = nodes.length; i < l; i++)
 					nodeSet.matchingNodes.removeKey(nodes[i]);
 			} else {
-				if (enclosingElement == null)
+				if (enclosingElement == null) {
 					enclosingElement = createHandle(field, type, parent);
-				if (encloses(enclosingElement))
+				}
+				if (encloses(enclosingElement)) {
 					for (int i = 0, l = nodes.length; i < l; i++) {
 						ASTNode node = nodes[i];
 						Integer level = (Integer) nodeSet.matchingNodes.removeKey(node);
@@ -2086,8 +2165,15 @@ protected void reportMatching(FieldDeclaration field, TypeDeclaration type, IJav
 								node = field;
 							}
 						}
-						this.patternLocator.matchReportReference(node, enclosingElement, field.binding, level.intValue(), this);
+						// Set block scope for initializer in case there would have other local and other elements to report
+						BlockScope blockScope = null;
+						if (field.getKind() == AbstractVariableDeclaration.INITIALIZER) {
+							Block block = ((Initializer)field).block;
+							if (block != null) blockScope = block.scope;
+						}
+						this.patternLocator.matchReportReference(node, enclosingElement, field.binding, blockScope, level.intValue(), this);
 					}
+				}
 			}
 		}
 	}
@@ -2121,36 +2207,10 @@ protected void reportMatching(TypeDeclaration type, IJavaElement parent, int acc
 	}
 
 	boolean matchedClassContainer = (this.matchContainer & PatternLocator.CLASS_CONTAINER) != 0;
-	
+
 	// report the type parameters
 	if (type.typeParameters != null) {
-		for (int i=0, l=type.typeParameters.length; i<l; i++) {
-			TypeParameter typeParameter = type.typeParameters[i];
-			if (typeParameter != null) {
-				Integer level = (Integer) nodeSet.matchingNodes.removeKey(typeParameter);
-				if (level != null && matchedClassContainer) {
-					if (level.intValue() > -1 && enclosesElement) {
-						int offset = typeParameter.sourceStart;
-						SearchMatch match = this.patternLocator.newDeclarationMatch(typeParameter, enclosingElement, type.binding, level.intValue(), typeParameter.sourceEnd-offset+1, this);
-						report(match);
-					}
-				}
-				if (typeParameter.type != null) {
-					level = (Integer) nodeSet.matchingNodes.removeKey(typeParameter.type);
-					if (level != null && matchedClassContainer) {
-						this.patternLocator.matchReportReference(typeParameter.type, enclosingElement, type.binding, level.intValue(), this);
-					}
-				}
-				if (typeParameter.bounds != null) {
-					for (int j=0, b=typeParameter.bounds.length; j<b; j++) {
-						level = (Integer) nodeSet.matchingNodes.removeKey(typeParameter.bounds[j]);
-						if (level != null && matchedClassContainer) {
-							this.patternLocator.matchReportReference(typeParameter.bounds[j], enclosingElement, type.binding, level.intValue(), this);
-						}
-					}
-				}
-			}
-		}
+		reportMatching(type.typeParameters, enclosingElement, parent, type.binding, nodeSet);
 	}
 
 	// report annotations
@@ -2202,20 +2262,56 @@ protected void reportMatching(TypeDeclaration type, IJavaElement parent, int acc
 	boolean typeInHierarchy = type.binding == null || typeInHierarchy(type.binding);
 	matchedClassContainer = matchedClassContainer && typeInHierarchy; 
 
+	// Visit fields
 	FieldDeclaration[] fields = type.fields;
 	if (fields != null) {
-		if (nodeSet.matchingNodes.elementSize == 0) return; // reported all the matching nodes
+		if (nodeSet.matchingNodes.elementSize == 0) return;	// end as all matching nodes were reported
+		IJavaElement[] otherElements = null;
+		int first = -1;
 		for (int i = 0, l = fields.length; i < l; i++) {
 			FieldDeclaration field = fields[i];
-			Integer level = (Integer) nodeSet.matchingNodes.removeKey(field);
-			int value = (level != null && matchedClassContainer) ? level.intValue() : -1;
-			reportMatching(field, type, enclosingElement, value, typeInHierarchy, nodeSet);
+			boolean last = field.endPart2Position == 0 || field.declarationEnd == field.endPart2Position;
+			// Store first index of multiple field declaration
+			if (!last) {
+				if (first == -1) {
+					first = i;
+				}
+			}
+			// Mutliple declaration fields
+			if (first >= 0) {
+				// Create handle for all multiple fields except first one as it would be returned through the match
+				if (i > first) {
+					if (otherElements == null) {
+						otherElements = new IJavaElement[] { createHandle(field, type, enclosingElement) };
+					} else {
+						int length = otherElements.length;
+						System.arraycopy(otherElements, 0, otherElements = new IJavaElement[length+1], 0, length);
+						otherElements[length] = createHandle(field, type, enclosingElement);
+					}
+				}
+				// On last field, report match with all other elements
+				if (last) {
+					for (int j=first; j<=i; j++) {
+						Integer level = (Integer) nodeSet.matchingNodes.removeKey(fields[j]);
+						int value = (level != null && matchedClassContainer) ? level.intValue() : -1;
+						reportMatching(fields[j], type, enclosingElement, otherElements, value, typeInHierarchy, nodeSet);
+					}
+					first = -1;
+					otherElements = null;
+				}
+			} else {
+				// Single field, report normally
+				Integer level = (Integer) nodeSet.matchingNodes.removeKey(field);
+				int value = (level != null && matchedClassContainer) ? level.intValue() : -1;
+				reportMatching(field, type, enclosingElement, null, value, typeInHierarchy, nodeSet);
+			}
 		}
 	}
 
+	// Visit methods
 	AbstractMethodDeclaration[] methods = type.methods;
 	if (methods != null) {
-		if (nodeSet.matchingNodes.elementSize == 0) return; // reported all the matching nodes
+		if (nodeSet.matchingNodes.elementSize == 0) return;	// end as all matching nodes were reported
 		for (int i = 0, l = methods.length; i < l; i++) {
 			AbstractMethodDeclaration method = methods[i];
 			Integer level = (Integer) nodeSet.matchingNodes.removeKey(method);
@@ -2224,10 +2320,11 @@ protected void reportMatching(TypeDeclaration type, IJavaElement parent, int acc
 		}
 	}
 
+	// Visit types
 	TypeDeclaration[] memberTypes = type.memberTypes;
 	if (memberTypes != null) {
 		for (int i = 0, l = memberTypes.length; i < l; i++) {
-			if (nodeSet.matchingNodes.elementSize == 0) return; // reported all the matching nodes
+			if (nodeSet.matchingNodes.elementSize == 0) return;	// end as all matching nodes were reported
 			TypeDeclaration memberType = memberTypes[i];
 			Integer level = (Integer) nodeSet.matchingNodes.removeKey(memberType);
 			int value = (level != null && matchedClassContainer) ? level.intValue() : -1;
@@ -2235,6 +2332,41 @@ protected void reportMatching(TypeDeclaration type, IJavaElement parent, int acc
 		}
 	}
 }
+/**
+ * Report matches in type parameters.
+ */
+protected void reportMatching(TypeParameter[] typeParameters, IJavaElement enclosingElement, IJavaElement parent, Binding binding, MatchingNodeSet nodeSet) throws CoreException {
+	if (typeParameters == null) return;
+	for (int i=0, l=typeParameters.length; i<l; i++) {
+		TypeParameter typeParameter = typeParameters[i];
+		if (typeParameter != null) {
+			Integer level = (Integer) nodeSet.matchingNodes.removeKey(typeParameter);
+			if (level != null) {
+				if (level.intValue() > -1 && encloses(enclosingElement)) {
+					int offset = typeParameter.sourceStart;
+					SearchMatch match = this.patternLocator.newDeclarationMatch(typeParameter, enclosingElement, binding, level.intValue(), typeParameter.sourceEnd-offset+1, this);
+					report(match);
+				}
+			}
+			if (typeParameter.type != null) {
+				level = (Integer) nodeSet.matchingNodes.removeKey(typeParameter.type);
+				if (level != null) {
+					IJavaElement localElement = createHandle(typeParameter, enclosingElement);
+					this.patternLocator.matchReportReference(typeParameter.type, enclosingElement, localElement, null, binding, level.intValue(), this);
+				}
+			}
+			if (typeParameter.bounds != null) {
+				for (int j=0, b=typeParameter.bounds.length; j<b; j++) {
+					level = (Integer) nodeSet.matchingNodes.removeKey(typeParameter.bounds[j]);
+					if (level != null) {
+						IJavaElement localElement = createHandle(typeParameter, enclosingElement);
+						this.patternLocator.matchReportReference(typeParameter.bounds[j], enclosingElement, localElement, null, binding, level.intValue(), this);
+					}
+				}
+			}
+		}
+	}
+}
 protected void reportMatchingSuper(TypeReference superReference, IJavaElement enclosingElement, Binding elementBinding, MatchingNodeSet nodeSet, boolean matchedClassContainer) throws CoreException {
 	ASTNode[] nodes = null;
 	if (superReference instanceof ParameterizedSingleTypeReference || superReference instanceof ParameterizedQualifiedTypeReference) {
