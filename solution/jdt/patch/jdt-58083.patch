diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java
index 0c64000..2fab36f 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java
@@ -192,15 +192,15 @@ public PublicScanner() {
 }
 
 public PublicScanner(
-	boolean tokenizeComments, 
-	boolean tokenizeWhiteSpace, 
-	boolean checkNonExternalizedStringLiterals, 
-	long sourceLevel,
-	long complianceLevel,
-	char[][] taskTags,
-	char[][] taskPriorities,
-	boolean isTaskCaseSensitive,
-	boolean checkNullReferences) {
+		boolean tokenizeComments, 
+		boolean tokenizeWhiteSpace, 
+		boolean checkNonExternalizedStringLiterals, 
+		long sourceLevel,
+		long complianceLevel,
+		char[][] taskTags,
+		char[][] taskPriorities,
+		boolean isTaskCaseSensitive,
+		boolean checkNullReferences) {
 
 	this.eofPosition = Integer.MAX_VALUE;
 	this.tokenizeComments = tokenizeComments;
@@ -215,14 +215,14 @@ public PublicScanner(
 }
 
 public PublicScanner(
-	boolean tokenizeComments, 
-	boolean tokenizeWhiteSpace, 
-	boolean checkNonExternalizedStringLiterals, 
-	long sourceLevel,
-	long complianceLevel,
-	char[][] taskTags,
-	char[][] taskPriorities,
-	boolean isTaskCaseSensitive) {
+		boolean tokenizeComments, 
+		boolean tokenizeWhiteSpace, 
+		boolean checkNonExternalizedStringLiterals, 
+		long sourceLevel,
+		long complianceLevel,
+		char[][] taskTags,
+		char[][] taskPriorities,
+		boolean isTaskCaseSensitive) {
 	this(
 		tokenizeComments,
 		tokenizeWhiteSpace,
@@ -236,13 +236,13 @@ public PublicScanner(
 }
 
 public PublicScanner(
-	boolean tokenizeComments, 
-	boolean tokenizeWhiteSpace, 
-	boolean checkNonExternalizedStringLiterals, 
-	long sourceLevel,
-	char[][] taskTags,
-	char[][] taskPriorities,
-	boolean isTaskCaseSensitive) {
+		boolean tokenizeComments, 
+		boolean tokenizeWhiteSpace, 
+		boolean checkNonExternalizedStringLiterals, 
+		long sourceLevel,
+		char[][] taskTags,
+		char[][] taskPriorities,
+		boolean isTaskCaseSensitive) {
 
 	this(
 		tokenizeComments,
@@ -1542,6 +1542,8 @@ public int getNextToken() throws InvalidInputException {
 								return scanIdentifierOrKeyword();
 							case ScannerHelper.C_DIGIT :
 								return scanNumber(false);
+							default :
+								return TokenNameERROR;
 						}
 					}
 					boolean isJavaIdStart;
