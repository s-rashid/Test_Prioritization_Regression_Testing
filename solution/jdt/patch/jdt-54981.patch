diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
index 83a3202..8c10a6b 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
@@ -1244,7 +1244,6 @@ public abstract class Scope implements BaseTypes, TypeConstants, TypeIds {
 			// and foo(X, Y), when the argument types are (int, float, Y)
 			// so answer the method with the most argType matches and least parameter type mismatches
 			int bestArgMatches = -1;
-			int bestParamMatches = -1;
 			MethodBinding bestGuess = (MethodBinding) found.elementAt(0); // if no good match so just use the first one found
 			int argLength = argumentTypes.length;
 			foundSize = found.size;
@@ -1262,19 +1261,9 @@ public abstract class Scope implements BaseTypes, TypeConstants, TypeIds {
 						}
 					}
 				}
-				int paramMatches = 0;
-				next: for (int p = 0; p < paramLength; p++) {
-					TypeBinding param = params[p];
-					for (int a = p == 0 ? 0 : p - 1; a < argLength && a < p + 1; a++) { // look one slot before & after to see if the type matches
-						if (param == argumentTypes[a]) {
-							paramMatches++;
-							continue next;
-						}
-					}
-				}
-				if (argMatches + paramMatches < bestArgMatches + bestParamMatches)
+				if (argMatches < bestArgMatches)
 					continue nextMethod;
-				if (argMatches + paramMatches == bestArgMatches + bestParamMatches) {
+				if (argMatches == bestArgMatches) {
 					int diff1 = paramLength < argLength ? 2 * (argLength - paramLength) : paramLength - argLength;
 					int bestLength = bestGuess.parameters.length;
 					int diff2 = bestLength < argLength ? 2 * (argLength - bestLength) : bestLength - argLength;
@@ -1282,7 +1271,6 @@ public abstract class Scope implements BaseTypes, TypeConstants, TypeIds {
 						continue nextMethod;
 				}
 				bestArgMatches = argMatches;
-				bestParamMatches = paramMatches;
 				bestGuess = methodBinding;
 			}
 			return bestGuess;
@@ -1907,11 +1895,21 @@ public abstract class Scope implements BaseTypes, TypeConstants, TypeIds {
 								if (!isExactMatch) {
 									MethodBinding compatibleMethod = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite);
 									if (compatibleMethod == null) {
-										if (foundMethod == null || foundMethod.problemId() == ProblemReasons.NotVisible)
+										// likely not a match in the first place, 2 cases are possible
+										// first is when methodBinding was found thru inheritance starting from an nested type - in this case do not want to search outer scope
+										// second is when normal search turned up only this selector match so NotFound is expected
+										// except in 1.5 when static import methods can match correctly
+										if (foundMethod == null || foundMethod.problemId() == ProblemReasons.NotVisible) {
+											if (compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5 && !receiverType.isNestedType()) {
+												foundFuzzyProblem = new ProblemMethodBinding(methodBinding, selector, argumentTypes, ProblemReasons.NotFound);
+												break; // need to search for static import method matches
+											}
 											// inherited mismatch is reported directly, not looking at enclosing matches
 											return new ProblemMethodBinding(methodBinding, selector, argumentTypes, ProblemReasons.NotFound);
-										// make the user qualify the method, likely wants the first inherited method (javac generates an ambiguous error instead)
-										fuzzyProblem = new ProblemMethodBinding(methodBinding, selector, methodBinding.parameters, ProblemReasons.InheritedNameHidesEnclosingName);
+										} else {
+											// make the user qualify the method, likely wants the first inherited method (javac generates an ambiguous error instead)
+											fuzzyProblem = new ProblemMethodBinding(methodBinding, selector, methodBinding.parameters, ProblemReasons.InheritedNameHidesEnclosingName);
+										}
 									} else if (!compatibleMethod.isValidBinding()) {
 										fuzzyProblem = compatibleMethod;
 									} else {
@@ -2000,13 +1998,6 @@ public abstract class Scope implements BaseTypes, TypeConstants, TypeIds {
 			scope = scope.parent;
 		}
 
-		if (foundFuzzyProblem != null)
-			return foundFuzzyProblem;
-		if (foundInsideProblem != null)
-			return foundInsideProblem;
-		if (foundMethod != null)
-			return foundMethod;
-
 		if (insideStaticContext && compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5) {
 			// at this point the scope is a compilation unit scope & need to check for imported static methods
 			CompilationUnitScope unitScope = (CompilationUnitScope) scope;
@@ -2091,6 +2082,14 @@ public abstract class Scope implements BaseTypes, TypeConstants, TypeIds {
 				return foundMethod;
 			}
 		}
+
+		if (foundFuzzyProblem != null)
+			return foundFuzzyProblem;
+		if (foundInsideProblem != null)
+			return foundInsideProblem;
+		if (foundMethod != null)
+			return foundMethod;
+
 		return new ProblemMethodBinding(selector, argumentTypes, ProblemReasons.NotFound);
 	}
