diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/PrefixExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/PrefixExpression.java
index 1630a0b..e725a02 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/PrefixExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/PrefixExpression.java
@@ -15,46 +15,42 @@ import org.eclipse.jdt.internal.compiler.lookup.*;
 
 public class PrefixExpression extends CompoundAssignment {
 
-	/**
-	 * PrefixExpression constructor comment.
-	 * @param l org.eclipse.jdt.internal.compiler.ast.Expression
-	 * @param e org.eclipse.jdt.internal.compiler.ast.Expression
-	 * @param op int
-	 */
-	public PrefixExpression(Expression l, Expression e, int op, int pos) {
-
-		super(l, e, op, l.sourceEnd);
-		this.sourceStart = pos;
-		this.sourceEnd = l.sourceEnd;
-	}
-
-	public String operatorToString() {
-
-		switch (operator) {
-			case PLUS :
-				return "++"; //$NON-NLS-1$
-			case MINUS :
-				return "--"; //$NON-NLS-1$
-		} 
-		return "unknown operator"; //$NON-NLS-1$
-	}
-
-	public StringBuffer printExpressionNoParenthesis(int indent, StringBuffer output) {
+/**
+ * PrefixExpression constructor comment.
+ * @param lhs org.eclipse.jdt.internal.compiler.ast.Expression
+ * @param expression org.eclipse.jdt.internal.compiler.ast.Expression
+ * @param operator int
+ */
+public PrefixExpression(Expression lhs, Expression expression, int operator, int pos) {
+	super(lhs, expression, operator, lhs.sourceEnd);
+	this.sourceStart = pos;
+	this.sourceEnd = lhs.sourceEnd;
+}
 
-		output.append(operatorToString()).append(' ');
-		return lhs.printExpression(0, output); 
+public String operatorToString() {
+	switch (this.operator) {
+		case PLUS :
+			return "++"; //$NON-NLS-1$
+		case MINUS :
+			return "--"; //$NON-NLS-1$
 	} 
-	
-	public boolean restrainUsageToNumericTypes() {
+	return "unknown operator"; //$NON-NLS-1$
+}
 
-		return true;
-	}
+public StringBuffer printExpressionNoParenthesis(int indent, StringBuffer output) {
 
-	public void traverse(ASTVisitor visitor, BlockScope scope) {
+	output.append(operatorToString()).append(' ');
+	return this.lhs.printExpression(0, output); 
+} 
 
-		if (visitor.visit(this, scope)) {
-			lhs.traverse(visitor, scope);
-		}
-		visitor.endVisit(this, scope);
+public boolean restrainUsageToNumericTypes() {
+	return true;
+}
+
+public void traverse(ASTVisitor visitor, BlockScope scope) {
+	if (visitor.visit(this, scope)) {
+		this.lhs.traverse(visitor, scope);
 	}
+	visitor.endVisit(this, scope);
+}
 }
