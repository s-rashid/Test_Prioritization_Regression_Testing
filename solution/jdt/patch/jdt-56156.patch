diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/AccessRule.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/AccessRule.java
index 6c02c66..c6bfd13 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/AccessRule.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/AccessRule.java
@@ -15,12 +15,18 @@ import org.eclipse.jdt.core.compiler.IProblem;
 
 public class AccessRule {
 	
+	public static final int IgnoreIfBetter = 0x02000000; // value must be greater than IProblem#ForbiddenReference and DiscouragedReference
+	
 	public char[] pattern;
 	public int problemId;
 	
 	public AccessRule(char[] pattern, int problemId) {
+		this(pattern, problemId, false);
+	}
+	
+	public AccessRule(char[] pattern, int problemId, boolean keepLooking) {
 		this.pattern = pattern;
-		this.problemId = problemId;
+		this.problemId = keepLooking ? problemId | IgnoreIfBetter : problemId;
 	}
 	
 	public int hashCode() {
@@ -34,21 +40,32 @@ public class AccessRule {
 		return CharOperation.equals(this.pattern, other.pattern);
 	}
 
+	public int getProblemId() {
+		return this.problemId & ~IgnoreIfBetter;
+	}
+	
+	public boolean ignoreIfBetter() {
+		return (this.problemId & IgnoreIfBetter) != 0;
+	}
+
 	public String toString() {
 		StringBuffer buffer = new StringBuffer();
 		buffer.append("pattern="); //$NON-NLS-1$
 		buffer.append(this.pattern);
-		switch (this.problemId) {
+		switch (getProblemId()) {
 			case IProblem.ForbiddenReference:
-				buffer.append(" (NON ACCESSIBLE)"); //$NON-NLS-1$
+				buffer.append(" (NON ACCESSIBLE"); //$NON-NLS-1$
 				break;
 			case IProblem.DiscouragedReference:
-				buffer.append(" (DISCOURAGED)"); //$NON-NLS-1$
+				buffer.append(" (DISCOURAGED"); //$NON-NLS-1$
 				break;
 			default:
-				buffer.append(" (ACCESSIBLE)"); //$NON-NLS-1$
+				buffer.append(" (ACCESSIBLE"); //$NON-NLS-1$
 				break;
 		}
+		if (ignoreIfBetter())
+			buffer.append(" | IGNORE IF BETTER"); //$NON-NLS-1$
+		buffer.append(')');
 		return buffer.toString();
 	}
 }
