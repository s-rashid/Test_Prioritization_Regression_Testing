diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java
index cb250f2..fc5548c 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java
@@ -24,7 +24,12 @@ import org.eclipse.jdt.internal.compiler.batch.Main;
 public class BatchCompilerTest extends AbstractRegressionTest {
 	public static final String OUTPUT_DIR_PLACEHOLDER = "---OUTPUT_DIR_PLACEHOLDER---";
 	static final String JRE_HOME_DIR = Util.getJREDirectory();
-	
+
+	static {
+//	TESTS_NAMES = new String[] { "test000" };
+//	TESTS_NUMBERS = new int[] { 27 };
+//	TESTS_RANGE = new int[] { 11, -1 };
+}	
 public BatchCompilerTest(String name) {
 	super(name);
 }
@@ -1454,70 +1459,68 @@ public void _test019(){
 		        true);
 		}
 		
-public void _test027(){
-			this.runNegativeTest(
-				new String[] {
-					"X.java",
-					"/** */\n" + 
-					"public class X {\n" + 
-					"	OK1 ok1;\n" + 
-					"	OK2 ok2;\n" + 
-					"	Warn warn;\n" + 
-					"	KO ko;\n" + 
-			        "	Zork z;\n" + 
-					"}",
-					"OK1.java",
-					"/** */\n" + 
-					"public class OK1 {\n" + 
-					"	// empty\n" + 
-					"}",
-					"OK2.java",
-					"/** */\n" + 
-					"public class OK2 {\n" + 
-					"	// empty\n" + 
-					"}",
-					"p1/Warn.java",
-					"/** */\n" + 
-					"public class Warn {\n" + 
-					"	// empty\n" + 
-					"}",
-					"KO.java",
-					"/** */\n" + 
-					"public class KO {\n" + 
-					"	// empty\n" + 
-					"}",
-				},
-		        "\"" + OUTPUT_DIR +  File.separator + "X.java\""
-		        + " -1.5 -g -preserveAllLocals"
-		        + " -cp \"" + OUTPUT_DIR + "[+OK2" + File.pathSeparator + "-KO]" + File.pathSeparator
-		        + OUTPUT_DIR + File.separator + "p1[~Warn]\""
-		        + " -verbose -warn:+deprecation,syntheticAccess,uselessTypeCheck,unsafe,finalBound,unusedLocal"
-		        + " -proceedOnError -referenceInfo -d \"" + OUTPUT_DIR + "\"",
-		        "[5 .class files generated]\n", 
-		        "----------\n" + 
-		        "1. WARNING in ---OUTPUT_DIR_PLACEHOLDER---" + File.separator + "X.java\n" + 
-		        " (at line 5)\n" + 
-		        "	Warn warn;\n" + 
-		        "	^^^^\n" + 
-		        "Discouraged access: Warn\n" + 
-		        "----------\n" + 
-		        "----------\n" + 
-		        "2. WARNING in ---OUTPUT_DIR_PLACEHOLDER---" + File.separator + "X.java\n" + 
-		        " (at line 6)\n" + 
-		        "	KO ko;\n" + 
-		        "	^^\n" + 
-		        "Access restriction: KO\n" + 
-		        "----------\n" + 
-		        "----------\n" + 
-		        "3. ERROR in ---OUTPUT_DIR_PLACEHOLDER---" + File.separator + "X.java\n" + 
-		        " (at line 7)\n" + 
-		        "	Zork z;\n" + 
-		        "	^^^^\n" + 
-		        "Zork cannot be resolved to a type\n" + 
-		        "----------\n" + 
-		        "3 problems (1 error, 2 warnings)",
-		        true);
-		}
+public void test027(){
+	this.runNegativeTest(
+		new String[] {
+			"X.java",
+			"/** */\n" + 
+			"public class X {\n" + 
+			"	OK1 ok1;\n" + 
+			"	OK2 ok2;\n" + 
+			"	Warn warn;\n" + 
+			"	KO ko;\n" + 
+	        "	Zork z;\n" + 
+			"}",
+			"OK1.java",
+			"/** */\n" + 
+			"public class OK1 {\n" + 
+			"	// empty\n" + 
+			"}",
+			"OK2.java",
+			"/** */\n" + 
+			"public class OK2 {\n" + 
+			"	// empty\n" + 
+			"}",
+			"p1/Warn.java",
+			"/** */\n" + 
+			"public class Warn {\n" + 
+			"	// empty\n" + 
+			"}",
+			"KO.java",
+			"/** */\n" + 
+			"public class KO {\n" + 
+			"	// empty\n" + 
+			"}",
+		},
+        "\"" + OUTPUT_DIR +  File.separator + "X.java\""
+        + " -1.5 -g -preserveAllLocals"
+        + " -cp \"" + OUTPUT_DIR + "[+OK2" + File.pathSeparator + "-KO]" + File.pathSeparator
+        + OUTPUT_DIR + File.separator + "p1[~Warn]\""
+        + " -verbose -warn:+deprecation,syntheticAccess,uselessTypeCheck,unsafe,finalBound,unusedLocal"
+        + " -proceedOnError -referenceInfo -d \"" + OUTPUT_DIR + "\"",
+        "[5 .class files generated]\n", 
+        "----------\n" + 
+        "1. WARNING in ---OUTPUT_DIR_PLACEHOLDER---" + File.separator + "X.java\n" + 
+        " (at line 5)\n" + 
+        "	Warn warn;\n" + 
+        "	^^^^\n" + 
+        "Discouraged access: Warn\n" + 
+        "----------\n" + 
+        "2. WARNING in ---OUTPUT_DIR_PLACEHOLDER---" + File.separator + "X.java\n" + 
+        " (at line 6)\n" + 
+        "	KO ko;\n" + 
+        "	^^\n" + 
+        "Access restriction: KO\n" + 
+        "----------\n" + 
+        "3. ERROR in ---OUTPUT_DIR_PLACEHOLDER---" + File.separator + "X.java\n" + 
+        " (at line 7)\n" + 
+        "	Zork z;\n" + 
+        "	^^^^\n" + 
+        "Zork cannot be resolved to a type\n" + 
+        "----------\n" + 
+        "3 problems (1 error, 2 warnings)",
+        true);
+}
 public void test028(){
 			this.runConformTest(
 				new String[] {
