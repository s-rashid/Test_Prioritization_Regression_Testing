diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java
index e096b3c..bb6eed2 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java
@@ -12,17 +12,13 @@
 package org.eclipse.jdt.apt.core.util;
 
 import java.io.File;
-import java.io.IOException;
-import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.LinkedHashMap;
-import java.util.List;
 import java.util.Map;
 import java.util.WeakHashMap;
 
 import org.eclipse.core.resources.IProject;
 import org.eclipse.core.resources.ProjectScope;
-import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.Platform;
 import org.eclipse.core.runtime.preferences.IEclipsePreferences;
 import org.eclipse.core.runtime.preferences.IPreferencesService;
@@ -33,10 +29,7 @@ import org.eclipse.core.runtime.preferences.IEclipsePreferences.IPreferenceChang
 import org.eclipse.core.runtime.preferences.IEclipsePreferences.NodeChangeEvent;
 import org.eclipse.core.runtime.preferences.IEclipsePreferences.PreferenceChangeEvent;
 import org.eclipse.jdt.apt.core.AptPlugin;
-import org.eclipse.jdt.apt.core.internal.AnnotationProcessorFactoryLoader;
-import org.eclipse.jdt.apt.core.internal.FactoryContainer;
 import org.eclipse.jdt.apt.core.internal.generatedfile.GeneratedFileManager;
-import org.eclipse.jdt.apt.core.internal.util.FactoryPathUtil;
 import org.eclipse.jdt.core.IClasspathEntry;
 import org.eclipse.jdt.core.IJavaProject;
 import org.eclipse.jdt.core.JavaModelException;
@@ -78,69 +71,6 @@ public class AptConfig {
 	
 	
 	/**
-	 * Add factory containers to the list for a project.  If the container
-	 * is already in the project's list, it will remain but will take on
-	 * the new value of the 'enabled' attribute.
-	 * The resulting list will be saved to the appropriate settings file.
-	 * If there is an error accessing the file an exception will be thrown.
-	 * @param jproj a project, or null for the workspace list.
-	 * @param adds a map of factory containers to add to the list.  The value
-	 * indicates whether the container's factories are to be enabled.
-	 */
-	public static synchronized void addContainers(
-			IJavaProject jproj, Map<FactoryContainer, Boolean> adds) 
-			throws IOException, CoreException {
-		Map<FactoryContainer, Boolean> existing = FactoryPathUtil.getAllContainers(jproj);
-		existing.putAll(adds);
-		setContainers(jproj, existing);
-	}
-	
-	/**
-	 * Returns all containers for the provided project, including disabled ones.
-	 * @param jproj The java project in question, or null for the workspace
-	 * @return an ordered map, where the key is the container and the value 
-	 * indicates whether the container is enabled.
-	 */
-	public static synchronized Map<FactoryContainer, Boolean> getAllContainers(IJavaProject jproj) {
-		return FactoryPathUtil.getAllContainers(jproj);
-	}
-	
-	/**
-	 * Get the factory containers for this project. If no project-level configuration
-	 * is set, the workspace config will be returned. Any disabled containers
-	 * will not be returned.
-	 * 
-	 * @param jproj The java project in question. 
-	 * @return an ordered list of all enabled factory containers.
-	 */
-	public static synchronized List<FactoryContainer> getEnabledContainers(IJavaProject jproj) {
-		// this map is ordered.
-		Map<FactoryContainer, Boolean> containers = FactoryPathUtil.getAllContainers(jproj);
-		List<FactoryContainer> result = new ArrayList<FactoryContainer>(containers.size());
-		for (Map.Entry<FactoryContainer, Boolean> entry : containers.entrySet()) {
-			if (entry.getValue()) {
-				result.add(entry.getKey());
-			}
-		}
-		return result;
-	}
-	    
-	/**
-	 * Remove a processor factory container from the list for a project.  
-	 * The resulting list will be saved to the appropriate settings file.
-	 * If there is an error accessing the file an exception will be thrown.
-	 * @param jproj a project, or null for the workspace list.
-	 * @param container a factory container.
-	 */
-	public static synchronized void removeContainer(
-			IJavaProject jproj, FactoryContainer container) 
-			throws IOException, CoreException {
-		Map<FactoryContainer, Boolean> existing = FactoryPathUtil.getAllContainers(jproj);
-		existing.remove(container);
-		setContainers(jproj, existing);
-	}
-	
-	/**
      * Add the equivalent of -Akey=val to the list of processor options.
      * @param key must be a nonempty string.  It should only include the key;
      * that is, it should not start with "-A".
@@ -540,44 +470,5 @@ public class AptConfig {
 		IEclipsePreferences node = context.getNode(AptPlugin.PLUGIN_ID);
 		node.put(optionName, value);
 	}
-
-    /**
-	 * Set or reset the factory containers for a given project or the workspace.
-	 * @param jproj the java project, or null for the workspace
-	 * @param containers an ordered map whose key is a factory container and
-	 * whose value indicates whether the container's factories are enabled;
-	 * or null, to restore defaults.
-	 */
-	public static synchronized void setContainers(IJavaProject jproj, Map<FactoryContainer, Boolean> containers) 
-	throws IOException, CoreException 
-	{
-		FactoryPathUtil.saveFactoryPathFile(jproj, containers);
-		// The factory path isn't saved to the Eclipse preference store,
-		// so we can't rely on the ChangeListener mechanism.
-		AnnotationProcessorFactoryLoader.getLoader().reset();
-	}
-
-	/**
-	 * Has an explicit factory path been set for the specified project, or
-	 * is it just defaulting to the workspace settings? 
-	 * @param project
-	 * @return true if there is a project-specific factory path.
-	 */
-	public static boolean hasProjectSpecificFactoryPath(IJavaProject jproj) {
-		if (null == jproj) {
-			// say no, even if workspace-level factory path does exist. 
-			return false;
-		}
-		return FactoryPathUtil.doesFactoryPathFileExist(jproj);
-	}
-
-	/**
-	 * Get a factory path corresponding to the default values: if jproj is
-	 * non-null, return the current workspace factory path; if jproj is null,
-	 * return the default list of plugin factories.
-	 */
-	public static Map<FactoryContainer, Boolean> getDefaultFactoryPath(IJavaProject jproj) {
-		return FactoryPathUtil.getDefaultFactoryPath(jproj);
-	}
 	
 }
