diff --git a/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/AnnotationValueConversionTests.java b/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/AnnotationValueConversionTests.java
index 1e6d527..5d5d75b 100644
--- a/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/AnnotationValueConversionTests.java
+++ b/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/AnnotationValueConversionTests.java
@@ -17,6 +17,7 @@ import org.eclipse.core.resources.IFolder;
 import org.eclipse.core.resources.IProject;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.jdt.apt.tests.annotations.ProcessorTestStatus;
+import org.eclipse.jdt.core.tests.builder.Problem;
 import org.eclipse.jdt.core.tests.util.Util;
 
 public class AnnotationValueConversionTests extends APTTestBase 
@@ -75,10 +76,6 @@ public class AnnotationValueConversionTests extends APTTestBase
 		return env.getProject(getProjectName());
 	}
 	
-	/**
-	 * Test conversion on byte. 
-	 * @throws Exception
-	 */
 	@SuppressWarnings("nls")
 	public void testByteConversion() throws Exception {
 		// reset the error reset the error;
@@ -86,33 +83,50 @@ public class AnnotationValueConversionTests extends APTTestBase
 		IPath srcRoot = getSourcePath();		
 		String content =  
 			"package sample; \n\n" + 
-			"@Test.Annotation(b=(byte)0,\n" +
-			"				  s=(byte)0,\n" + 
-			"				  i=(byte)0,\n" +
-			"                 l=(byte)0,\n" +
-			"	 	 	      f=(byte)0,\n" +
-			"			      d=(byte)0,\n" +
-			"				  c=(byte)0)\n\n" + 
-			"public class Test {\n" +
-			"	public @interface Annotation\n" +
-			"	{\n" +
-			"		char c();  \n" +
-			"       byte b();  \n" +
-			"		short s(); \n" +
-			"		int i();   \n" +
-			"       long l();  \n" +
-			"		float f(); \n" +
-			"		double d();\n" +
-			"	}\n" +	
-			"}\n";
+			"import org.eclipse.jdt.apt.tests.annotations.valueconversion.Annotation;\n" +
+			"@Annotation(z=(byte)49,\n" +
+			"				  b=(byte)49,\n" +
+			"				  s=(byte)49,\n" + 
+			"				  i=(byte)49,\n" +
+			"                 l=(byte)49,\n" +
+			"	 	 	      f=(byte)49,\n" +
+			"			      d=(byte)49,\n" +
+			"				  c=(byte)49)\n\n" + 
+			"public class Test {}\n";
 		
-		env.addClass( 
-				srcRoot, 
-				"sample", 
-				"Test",
-				content );
+		IPath testPath = env.addClass( srcRoot, "sample", "Test", content );
 		fullBuild( project.getFullPath() );
-		expectingNoProblems();
+		expectingSpecificProblemsFor(testPath, new Problem[]{
+				new Problem("", "Type mismatch: cannot convert from byte to boolean", testPath),
+				new Problem("", "type mismatch for memeber z expected java.lang.Boolean but got java.lang.Byte", testPath)
+		});
+		
+		assertEquals(ProcessorTestStatus.NO_ERRORS, ProcessorTestStatus.getErrors());
+	}
+	
+	@SuppressWarnings("nls")
+	public void testByteConversion_Reflection() throws Exception {
+		IProject project = setupTest();	
+		IPath srcRoot = getSourcePath();		
+		String content =  
+			"package sample; \n\n" + 
+			"import org.eclipse.jdt.apt.tests.annotations.valueconversion.RefAnnotation;\n" +
+			"@RefAnnotation(z=(byte)49,\n" +
+			"				  b=(byte)49,\n" +
+			"				  s=(byte)49,\n" + 
+			"				  i=(byte)49,\n" +
+			"                 l=(byte)49,\n" +
+			"	 	 	      f=(byte)49,\n" +
+			"			      d=(byte)49,\n" +
+			"				  c=(byte)49)\n\n" + 
+			"public class Test {}\n";
+		
+		IPath testPath = env.addClass( srcRoot, "sample", "Test", content );
+		fullBuild( project.getFullPath() );
+		expectingSpecificProblemsFor(testPath, new Problem[]{
+				new Problem("", "Type mismatch: cannot convert from byte to boolean", testPath),
+				new Problem("", "value mismatch for memeber z expected true but got false", testPath)
+		});
 		
 		assertEquals(ProcessorTestStatus.NO_ERRORS, ProcessorTestStatus.getErrors());
 	}
@@ -129,33 +143,52 @@ public class AnnotationValueConversionTests extends APTTestBase
 		
 		String content =  
 			"package sample; \n\n" + 
-			"@Test.Annotation(b=(short)0,\n" +
-			"				  s=(short)0,\n" + 
-			"				  i=(short)0,\n" +
-			"                 l=(short)0,\n" +
-			"	 	 	      f=(short)0,\n" +
-			"			      d=(short)0,\n" +
-			"				  c=(short)0)\n\n" + 
-			"public class Test {\n" +
-			"	public @interface Annotation\n" +
-			"	{\n" +
-			"		char c();  \n" +
-			"       byte b();  \n" +
-			"		short s(); \n" +
-			"		int i();   \n" +
-			"       long l();  \n" +
-			"		float f(); \n" +
-			"		double d();\n" +
-			"	}\n" +	
-			"}\n";
+			"import org.eclipse.jdt.apt.tests.annotations.valueconversion.Annotation;\n" +
+			"@Annotation(z=(short)49,\n" +
+			"				  b=(short)49,\n" +
+			"				  s=(short)49,\n" + 
+			"				  i=(short)49,\n" +
+			"                 l=(short)49,\n" +
+			"	 	 	      f=(short)49,\n" +
+			"			      d=(short)49,\n" +
+			"				  c=(short)49)\n\n" + 
+			"public class Test {}\n";
 		
-		env.addClass( 
-				srcRoot, 
-				"sample", 
-				"Test",
-				content );
+		IPath testPath = env.addClass( srcRoot, "sample", "Test", content );
 		fullBuild( project.getFullPath() );
-		expectingNoProblems();
+		expectingSpecificProblemsFor(testPath, new Problem[]{
+				new Problem("", "Type mismatch: cannot convert from short to boolean", testPath),
+				new Problem("", "type mismatch for memeber z expected java.lang.Boolean but got java.lang.Short", testPath)
+		});
+		
+		assertEquals(ProcessorTestStatus.NO_ERRORS, ProcessorTestStatus.getErrors());
+	}
+	
+	@SuppressWarnings("nls")
+	public void testShortConversion_Reflection() throws Exception {
+		// reset the error reset the error;
+		IProject project = setupTest();	
+		IPath srcRoot = getSourcePath();		
+		
+		String content =  
+			"package sample; \n\n" + 
+			"import org.eclipse.jdt.apt.tests.annotations.valueconversion.RefAnnotation;\n" +
+			"@RefAnnotation(z=(short)49,\n"+
+			"				  b=(short)49,\n" +
+			"				  s=(short)49,\n" + 
+			"				  i=(short)49,\n" +
+			"                 l=(short)49,\n" +
+			"	 	 	      f=(short)49,\n" +
+			"			      d=(short)49,\n" +
+			"				  c=(short)49)\n\n" + 
+			"public class Test {}\n";
+		
+		IPath testPath = env.addClass( srcRoot, "sample", "Test", content );
+		fullBuild( project.getFullPath() );
+		expectingSpecificProblemsFor(testPath, new Problem[]{
+				new Problem("", "Type mismatch: cannot convert from short to boolean", testPath),
+				new Problem("", "value mismatch for memeber z expected true but got false", testPath)
+		});
 		
 		assertEquals(ProcessorTestStatus.NO_ERRORS, ProcessorTestStatus.getErrors());
 	}
@@ -172,33 +205,56 @@ public class AnnotationValueConversionTests extends APTTestBase
 		
 		String content =  
 			"package sample; \n\n" + 
-			"@Test.Annotation(b=(char)0,\n" +
-			"				  s=(char)0,\n" + 
-			"				  i=(char)0,\n" +
-			"                 l=(char)0,\n" +
-			"	 	 	      f=(char)0,\n" +
-			"			      d=(char)0,\n" +
-			"				  c=(char)0)\n\n" + 
-			"public class Test {\n" +
-			"	public @interface Annotation\n" +
-			"	{\n" +
-			"		char c();  \n" +
-			"       byte b();  \n" +
-			"		short s(); \n" +
-			"		int i();   \n" +
-			"       long l();  \n" +
-			"		float f(); \n" +
-			"		double d();\n" +
-			"	}\n" +
-			"}\n";
+			"import org.eclipse.jdt.apt.tests.annotations.valueconversion.Annotation;\n" +
+			"@Annotation(z='1',\n" +
+			"                 b='1',\n" +
+			"				  s='1',\n" + 
+			"				  i='1',\n" +
+			"                 l='1',\n" +
+			"	 	 	      f='1',\n" +
+			"			      d='1',\n" +
+			"				  c='1')\n\n" + 
+			"public class Test {}\n";
 		
-		env.addClass( 
-				srcRoot, 
-				"sample", 
-				"Test",
-				content );
+		IPath testPath = env.addClass( srcRoot, "sample", "Test", content );
 		fullBuild( project.getFullPath() );
-		expectingNoProblems();
+		expectingSpecificProblemsFor(testPath, new Problem[]{
+				new Problem("", "Type mismatch: cannot convert from char to boolean", testPath),
+				new Problem("", "type mismatch for memeber z expected java.lang.Boolean but got java.lang.Character", testPath)
+		});
+		
+		assertEquals(ProcessorTestStatus.NO_ERRORS, ProcessorTestStatus.getErrors());
+	}
+	
+	/**
+	 * Test conversion on char through reflection
+	 * @throws Exception
+	 */
+	@SuppressWarnings("nls")
+	public void testCharConversion_Reflection() throws Exception {
+		// reset the error reset the error;
+		IProject project = setupTest();	
+		IPath srcRoot = getSourcePath();		
+		
+		String content =  
+			"package sample; \n\n" + 
+			"import org.eclipse.jdt.apt.tests.annotations.valueconversion.RefAnnotation;\n" +
+			"@RefAnnotation(z='1',\n" +
+			"				  b='1',\n" +
+			"				  s='1',\n" + 
+			"				  i='1',\n" +
+			"                 l='1',\n" +
+			"	 	 	      f='1',\n" +
+			"			      d='1',\n" +
+			"				  c='1')\n\n" + 
+			"public class Test {}\n";
+		
+		IPath testPath = env.addClass( srcRoot, "sample", "Test", content );
+		fullBuild( project.getFullPath() );
+		expectingSpecificProblemsFor(testPath, new Problem[]{
+				new Problem("", "Type mismatch: cannot convert from char to boolean", testPath),
+				new Problem("", "value mismatch for memeber z expected true but got false", testPath)
+		});
 		
 		assertEquals(ProcessorTestStatus.NO_ERRORS, ProcessorTestStatus.getErrors());
 	}
@@ -215,33 +271,56 @@ public class AnnotationValueConversionTests extends APTTestBase
 		
 		String content =  
 			"package sample; \n\n" + 
-			"@Test.Annotation(b=(int)0,\n" +
-			"				  s=(int)0,\n" + 
-			"				  i=(int)0,\n" +
-			"                 l=(int)0,\n" +
-			"	 	 	      f=(int)0,\n" +
-			"			      d=(int)0,\n" +
-			"				  c=(int)0)\n\n" + 
-			"public class Test {\n" +
-			"	public @interface Annotation\n" +
-			"	{\n" +
-			"		char c();  \n" +
-			"       byte b();  \n" +
-			"		short s(); \n" +
-			"		int i();   \n" +
-			"       long l();  \n" +
-			"		float f(); \n" +
-			"		double d();\n" +
-			"	}\n" +
-			"}\n";
+			"import org.eclipse.jdt.apt.tests.annotations.valueconversion.Annotation;\n" +
+			"@Annotation(z=49,\n" +
+			"				  b=49,\n" +
+			"				  s=49,\n" + 
+			"				  i=49,\n" +
+			"                 l=49,\n" +
+			"	 	 	      f=49,\n" +
+			"			      d=49,\n" +
+			"				  c=49)\n\n" + 
+			"public class Test {}\n";
 		
-		env.addClass( 
-				srcRoot, 
-				"sample", 
-				"Test",
-				content );
+		IPath testPath = env.addClass( srcRoot, "sample", "Test", content );
 		fullBuild( project.getFullPath() );
-		expectingNoProblems();
+		expectingSpecificProblemsFor(testPath, new Problem[]{
+				new Problem("", "Type mismatch: cannot convert from int to boolean", testPath),
+				new Problem("", "type mismatch for memeber z expected java.lang.Boolean but got java.lang.Integer", testPath)
+		});
+		
+		assertEquals(ProcessorTestStatus.NO_ERRORS, ProcessorTestStatus.getErrors());
+	}
+	
+	/**
+	 * Test conversion on int through reflection
+	 * @throws Exception
+	 */
+	@SuppressWarnings("nls")
+	public void testIntConversion_Reflection() throws Exception {
+		// reset the error reset the error;
+		IProject project = setupTest();	
+		IPath srcRoot = getSourcePath();		
+		
+		String content =  
+			"package sample; \n\n" + 
+			"import org.eclipse.jdt.apt.tests.annotations.valueconversion.RefAnnotation;\n" +
+			"@RefAnnotation(z=49,\n" +
+			"				  b=49,\n" +
+			"				  s=49,\n" + 
+			"				  i=49,\n" +
+			"                 l=49,\n" +
+			"	 	 	      f=49,\n" +
+			"			      d=49,\n" +
+			"				  c=49)\n\n" + 
+			"public class Test {}\n";
+		
+		IPath testPath = env.addClass( srcRoot, "sample", "Test", content );
+		fullBuild( project.getFullPath() );
+		expectingSpecificProblemsFor(testPath, new Problem[]{
+				new Problem("", "Type mismatch: cannot convert from int to boolean", testPath),
+				new Problem("", "value mismatch for memeber z expected true but got false", testPath)
+		});
 		
 		assertEquals(ProcessorTestStatus.NO_ERRORS, ProcessorTestStatus.getErrors());
 	}
@@ -258,25 +337,119 @@ public class AnnotationValueConversionTests extends APTTestBase
 		
 		String content =  
 			"package sample; \n\n" + 
-			"@Test.Annotation(l=(long)0,\n" +			
-			"	 	 	      f=(long)0,\n" +
-			"			      d=(long)0)\n" +
-			"public class Test {\n" +
-			"	public @interface Annotation\n" +
-			"	{\n" +		
-			"       long l();  \n" +
-			"		float f(); \n" +
-			"		double d();\n" +
-			"	}\n" +
-			"}\n";
+			"import org.eclipse.jdt.apt.tests.annotations.valueconversion.Annotation;\n" +
+			"@Annotation(z=49l,\n" +
+			"				  c=49l,\n" +
+			"				  b=49l,\n" +
+			"				  s=49l,\n" + 
+			"				  i=49l,\n" +
+			"				  l=49l,\n" +			
+			"	 	 	      f=49l,\n" +
+			"			      d=49l)\n" +
+			"public class Test {}\n";
 		
-		env.addClass( 
+		IPath testPath = env.addClass( srcRoot, "sample", "Test", content );
+		fullBuild( project.getFullPath() );
+		expectingSpecificProblemsFor(testPath, new Problem[]{
+				new Problem("", "Type mismatch: cannot convert from long to boolean", testPath),
+				new Problem("", "Type mismatch: cannot convert from long to char", testPath),
+				new Problem("", "Type mismatch: cannot convert from long to byte", testPath),
+				new Problem("", "Type mismatch: cannot convert from long to short", testPath),
+				new Problem("", "Type mismatch: cannot convert from long to int", testPath),
+				new Problem("", "type mismatch for memeber z expected java.lang.Boolean but got java.lang.Long", testPath),
+				new Problem("", "type mismatch for memeber s expected java.lang.Short but got java.lang.Long", testPath),
+				new Problem("", "type mismatch for memeber i expected java.lang.Integer but got java.lang.Long", testPath),
+				new Problem("", "type mismatch for memeber c expected java.lang.Character but got java.lang.Long", testPath),
+				new Problem("", "type mismatch for memeber b expected java.lang.Byte but got java.lang.Long", testPath),
+		});
+		
+		assertEquals(ProcessorTestStatus.NO_ERRORS, ProcessorTestStatus.getErrors());
+	}
+	
+	/**
+	 * Test conversion on long. 
+	 * @throws Exception
+	 */
+	@SuppressWarnings("nls")
+	public void testLongConversion_Reflection() throws Exception {
+		// reset the error reset the error;
+		IProject project = setupTest();	
+		IPath srcRoot = getSourcePath();		
+		
+		String content =  
+			"package sample; \n\n" + 
+			"import org.eclipse.jdt.apt.tests.annotations.valueconversion.RefAnnotation;\n" +
+			"@RefAnnotation(z=49l,\n" +
+			"				  c=49l,\n" +
+			"				  b=49l,\n" +
+			"				  s=49l,\n" + 
+			"				  i=49l,\n" +
+			"				  l=49l,\n" +			
+			"	 	 	      f=49l,\n" +
+			"			      d=49l)\n" +
+			"public class Test {}\n";
+		
+		IPath testPath = env.addClass( srcRoot, "sample", "Test", content );
+		fullBuild( project.getFullPath() );
+		expectingSpecificProblemsFor(testPath, new Problem[]{
+				new Problem("", "Type mismatch: cannot convert from long to boolean", testPath),
+				new Problem("", "Type mismatch: cannot convert from long to char", testPath),
+				new Problem("", "Type mismatch: cannot convert from long to byte", testPath),
+				new Problem("", "Type mismatch: cannot convert from long to short", testPath),
+				new Problem("", "Type mismatch: cannot convert from long to int", testPath),
+				new Problem("", "value mismatch for memeber z expected true but got false", testPath),
+				new Problem("", "value mismatch for memeber s expected 49 but got 0", testPath),
+				new Problem("", "value mismatch for memeber i expected 49 but got 0", testPath),
+				new Problem("", "value mismatch for memeber c expected 1 but got 0", testPath),
+				new Problem("", "value mismatch for memeber b expected 49 but got 0", testPath),
+		});
+		
+		assertEquals(ProcessorTestStatus.NO_ERRORS, ProcessorTestStatus.getErrors());
+	}
+	
+	/**
+	 * Test conversion on Float. 
+	 * @throws Exception
+	 */
+	@SuppressWarnings("nls")
+	public void testFloatConversion() throws Exception {
+		// reset the error reset the error;
+		IProject project = setupTest();	
+		IPath srcRoot = getSourcePath();		
+		
+		String content =  
+			"package sample; \n\n" + 
+			"import org.eclipse.jdt.apt.tests.annotations.valueconversion.Annotation;\n" +
+			"@Annotation(z=49f,\n" +
+			"				  c=49f,\n" +
+			"				  b=49f,\n" +
+			"				  s=49f,\n" + 
+			"				  i=49f,\n" +
+			"				  l=49f,\n" +	
+			"				  f=49f,\n" +
+			"			      d=49f)\n" +
+			"public class Test {}\n";
+		
+		IPath testPath = env.addClass( 
 				srcRoot, 
 				"sample", 
 				"Test",
 				content );
 		fullBuild( project.getFullPath() );
-		expectingNoProblems();
+		expectingSpecificProblemsFor(testPath, new Problem[]{
+				new Problem("", "Type mismatch: cannot convert from float to boolean", testPath),
+				new Problem("", "Type mismatch: cannot convert from float to int", testPath),
+				new Problem("", "Type mismatch: cannot convert from float to long", testPath),
+				new Problem("", "Type mismatch: cannot convert from float to char", testPath),
+				new Problem("", "Type mismatch: cannot convert from float to byte", testPath),
+				new Problem("", "Type mismatch: cannot convert from float to short", testPath),
+				new Problem("", "type mismatch for memeber z expected java.lang.Boolean but got java.lang.Float", testPath),
+				new Problem("", "type mismatch for memeber s expected java.lang.Short but got java.lang.Float", testPath),
+				new Problem("", "type mismatch for memeber i expected java.lang.Integer but got java.lang.Float", testPath),
+				new Problem("", "type mismatch for memeber c expected java.lang.Character but got java.lang.Float", testPath),
+				new Problem("", "type mismatch for memeber b expected java.lang.Byte but got java.lang.Float", testPath),
+				new Problem("", "type mismatch for memeber l expected java.lang.Long but got java.lang.Float", testPath),
+		});		
 		
 		assertEquals(ProcessorTestStatus.NO_ERRORS, ProcessorTestStatus.getErrors());
 	}
@@ -286,30 +459,44 @@ public class AnnotationValueConversionTests extends APTTestBase
 	 * @throws Exception
 	 */
 	@SuppressWarnings("nls")
-	public void testFloatConversion() throws Exception {
+	public void testFloatConversion_Reflection() throws Exception {
 		// reset the error reset the error;
 		IProject project = setupTest();	
 		IPath srcRoot = getSourcePath();		
 		
 		String content =  
 			"package sample; \n\n" + 
-			"@Test.Annotation(f=(float)0,\n" +
-			"			      d=(float)0)\n" +
-			"public class Test {\n" +
-			"	public @interface Annotation\n" +
-			"	{\n" +		
-			"		float f(); \n" +
-			"		double d();\n" +
-			"	}\n" +
-			"}\n";
+			"import org.eclipse.jdt.apt.tests.annotations.valueconversion.RefAnnotation;\n" +
+			"@RefAnnotation(z=49f,\n" +
+			"				  c=49f,\n" +
+			"				  b=49f,\n" +
+			"				  s=49f,\n" + 
+			"				  i=49f,\n" +
+			"				  l=49f,\n" +	
+			"				  f=49f,\n" +
+			"			      d=49f)\n" +
+			"public class Test {}\n";
 		
-		env.addClass( 
+		IPath testPath = env.addClass( 
 				srcRoot, 
 				"sample", 
 				"Test",
 				content );
 		fullBuild( project.getFullPath() );
-		expectingNoProblems();
+		expectingSpecificProblemsFor(testPath, new Problem[]{
+				new Problem("", "Type mismatch: cannot convert from float to boolean", testPath),
+				new Problem("", "Type mismatch: cannot convert from float to int", testPath),
+				new Problem("", "Type mismatch: cannot convert from float to long", testPath),
+				new Problem("", "Type mismatch: cannot convert from float to char", testPath),
+				new Problem("", "Type mismatch: cannot convert from float to byte", testPath),
+				new Problem("", "Type mismatch: cannot convert from float to short", testPath),
+				new Problem("", "value mismatch for memeber z expected true but got false", testPath),
+				new Problem("", "value mismatch for memeber s expected 49 but got 0", testPath),
+				new Problem("", "value mismatch for memeber i expected 49 but got 0", testPath),
+				new Problem("", "value mismatch for memeber c expected 1 but got 0", testPath),
+				new Problem("", "value mismatch for memeber b expected 49 but got 0", testPath),
+				new Problem("", "value mismatch for memeber l expected 49 but got 0", testPath),
+		});		
 		
 		assertEquals(ProcessorTestStatus.NO_ERRORS, ProcessorTestStatus.getErrors());
 	}
@@ -326,21 +513,80 @@ public class AnnotationValueConversionTests extends APTTestBase
 		
 		String content =  
 			"package sample; \n\n" + 
-			"@Test.Annotation(d=(double)0)\n" +			 
-			"public class Test {\n" +
-			"	public @interface Annotation\n" +
-			"	{\n" +		
-			"		double d();\n" +
-			"	}\n" +
-			"}\n";
+			"import org.eclipse.jdt.apt.tests.annotations.valueconversion.Annotation;\n" +
+			"@Annotation(z=49d," +
+			"				  c=49d,\n" +
+			"				  b=49d,\n" +
+			"				  s=49d,\n" + 
+			"				  i=49d,\n" +
+			"				  l=49d,\n" +	
+			"				  f=49d,\n" +
+			"			      d=49d)\n" +
+			"public class Test {}\n";
 		
-		env.addClass( 
-				srcRoot, 
-				"sample", 
-				"Test",
-				content );
+		IPath testPath = env.addClass(srcRoot, "sample", "Test", content );
 		fullBuild( project.getFullPath() );
-		expectingNoProblems();
+		expectingSpecificProblemsFor(testPath, new Problem[]{
+				new Problem("", "Type mismatch: cannot convert from double to boolean", testPath),
+				new Problem("", "Type mismatch: cannot convert from double to int", testPath),
+				new Problem("", "Type mismatch: cannot convert from double to long", testPath),
+				new Problem("", "Type mismatch: cannot convert from double to char", testPath),
+				new Problem("", "Type mismatch: cannot convert from double to byte", testPath),
+				new Problem("", "Type mismatch: cannot convert from double to short", testPath),
+				new Problem("", "Type mismatch: cannot convert from double to float", testPath),
+				new Problem("", "type mismatch for memeber z expected java.lang.Boolean but got java.lang.Double", testPath),
+				new Problem("", "type mismatch for memeber s expected java.lang.Short but got java.lang.Double", testPath),
+				new Problem("", "type mismatch for memeber i expected java.lang.Integer but got java.lang.Double", testPath),
+				new Problem("", "type mismatch for memeber c expected java.lang.Character but got java.lang.Double", testPath),
+				new Problem("", "type mismatch for memeber b expected java.lang.Byte but got java.lang.Double", testPath),
+				new Problem("", "type mismatch for memeber l expected java.lang.Long but got java.lang.Double", testPath),
+				new Problem("", "type mismatch for memeber f expected java.lang.Float but got java.lang.Double", testPath)
+		});
+		
+		assertEquals(ProcessorTestStatus.NO_ERRORS, ProcessorTestStatus.getErrors());
+	}	
+	
+	/**
+	 * Test conversion on double. No arrayification.
+	 * @throws Exception
+	 */
+	@SuppressWarnings("nls")
+	public void testDoubleConversion_Reflection() throws Exception {
+		// reset the error reset the error;
+		IProject project = setupTest();	
+		IPath srcRoot = getSourcePath();		
+		
+		String content =  
+			"package sample; \n\n" + 
+			"import org.eclipse.jdt.apt.tests.annotations.valueconversion.RefAnnotation;\n" +
+			"@RefAnnotation(z=49d,\n" +
+			"				  c=49d,\n" +
+			"				  b=49d,\n" +
+			"				  s=49d,\n" + 
+			"				  i=49d,\n" +
+			"				  l=49d,\n" +	
+			"				  f=49d,\n" +
+			"			      d=49d)\n" +
+			"public class Test {}\n";
+		
+		IPath testPath = env.addClass(srcRoot, "sample", "Test", content );
+		fullBuild( project.getFullPath() );
+		expectingSpecificProblemsFor(testPath, new Problem[]{
+				new Problem("", "Type mismatch: cannot convert from double to boolean", testPath),
+				new Problem("", "Type mismatch: cannot convert from double to int", testPath),
+				new Problem("", "Type mismatch: cannot convert from double to long", testPath),
+				new Problem("", "Type mismatch: cannot convert from double to char", testPath),
+				new Problem("", "Type mismatch: cannot convert from double to byte", testPath),
+				new Problem("", "Type mismatch: cannot convert from double to short", testPath),
+				new Problem("", "Type mismatch: cannot convert from double to float", testPath),
+				new Problem("", "value mismatch for memeber z expected true but got false", testPath),
+				new Problem("", "value mismatch for memeber s expected 49 but got 0", testPath),
+				new Problem("", "value mismatch for memeber i expected 49 but got 0", testPath),
+				new Problem("", "value mismatch for memeber c expected 1 but got 0", testPath),
+				new Problem("", "value mismatch for memeber b expected 49 but got 0", testPath),
+				new Problem("", "value mismatch for memeber l expected 49 but got 0", testPath),
+				new Problem("", "value mismatch for memeber f expected 49.0 but got 0.0", testPath)
+		});
 		
 		assertEquals(ProcessorTestStatus.NO_ERRORS, ProcessorTestStatus.getErrors());
 	}	
@@ -357,25 +603,76 @@ public class AnnotationValueConversionTests extends APTTestBase
 		
 		String content =  
 			"package sample; \n\n" + 
-			"@Test.Annotation(bytes=(byte)0,\n" +
-			"				  shorts=(byte)0,\n" + 
-			"				  ints=(byte)0,\n" +
-			"                 longs=(byte)0,\n" +
-			"	 	 	      floats=(byte)0,\n" +
-			"			      doubles=(byte)0,\n" +
-			"				  chars=(byte)0)\n\n" + 
-			"public class Test {\n" +
-			"	public @interface Annotation\n" +
-			"	{\n" +
-			"		char[]   chars(); \n" +
-			"       byte[]   bytes(); \n" +
-			"		short[]  shorts();\n" +
-			"		int[]    ints();  \n" +
-			"       long[]   longs(); \n" +
-			"		float[]  floats();\n" +
-			"		double[] doubles();\n" +
-			"	}\n" +
-			"}\n";
+			"import org.eclipse.jdt.apt.tests.annotations.valueconversion.AnnotationWithArray;\n" +
+			"@AnnotationWithArray(booleans=true,\n" +
+			"				  bytes=(byte)49,\n" +
+			"				  shorts=(short)49,\n" + 
+			"				  ints=49,\n" +
+			"                 longs=49,\n" +
+			"	 	 	      floats=49,\n" +
+			"			      doubles=49,\n" +
+			"				  chars='1')\n\n" + 
+			"public class Test {}\n" ;
+		
+		env.addClass( srcRoot, "sample", "Test", content );
+		fullBuild( project.getFullPath() );
+		expectingNoProblems();
+		
+		assertEquals(ProcessorTestStatus.NO_ERRORS, ProcessorTestStatus.getErrors());
+	}	
+	
+	/**
+	 * Convert "singleton" instance to array of the correct type
+	 * @throws Exception
+	 */
+	@SuppressWarnings("nls")
+	public void testArrayification_Reflection() throws Exception {
+		// reset the error reset the error;
+		IProject project = setupTest();	
+		IPath srcRoot = getSourcePath();		
+		
+		String content =  
+			"package sample; \n\n" + 
+			"import org.eclipse.jdt.apt.tests.annotations.valueconversion.RefAnnotationWithArray;\n" +
+			"@RefAnnotationWithArray(booleans=true,\n" +
+			"				  bytes=(byte)49,\n" +
+			"				  shorts=(short)49,\n" + 
+			"				  ints=49,\n" +
+			"                 longs=49,\n" +
+			"	 	 	      floats=49,\n" +
+			"			      doubles=49,\n" +
+			"				  chars='1')\n\n" + 
+			"public class Test {}\n" ;
+		
+		env.addClass( srcRoot, "sample", "Test", content );
+		fullBuild( project.getFullPath() );
+		expectingNoProblems();
+		
+		assertEquals(ProcessorTestStatus.NO_ERRORS, ProcessorTestStatus.getErrors());
+	}	
+	
+	/**
+	 * Test conversion on array elements.
+	 * @throws Exception
+	 */
+	@SuppressWarnings("nls")
+	public void testArrayElementConversion() throws Exception {
+		// reset the error reset the error;
+		IProject project = setupTest();	
+		IPath srcRoot = getSourcePath();		
+		
+		String content =  
+			"package sample; \n\n" + 
+			"import org.eclipse.jdt.apt.tests.annotations.valueconversion.AnnotationWithArray;\n" +
+			"@AnnotationWithArray(booleans={true, true },\n" +
+			"				  bytes=  {(byte)49, 50}, \n" +
+			"				  shorts= {(byte)49, 50},\n" + 
+			"				  ints=   {(byte)49, 50},\n" +
+			"                 longs=  {(byte)49, 50},\n" +
+			"	 	 	      floats= {(byte)49, 50},\n" +
+			"			      doubles={(byte)49, 50},\n" +
+			"				  chars=  {'1','2'})\n\n" + 
+			"public class Test {}\n";
 		
 		env.addClass( 
 				srcRoot, 
@@ -389,36 +686,27 @@ public class AnnotationValueConversionTests extends APTTestBase
 	}	
 	
 	/**
-	 * Test conversion on double.
+	 * Test conversion on array elements.
 	 * @throws Exception
 	 */
 	@SuppressWarnings("nls")
-	public void testArrayElementConversion() throws Exception {
+	public void testArrayElementConversion_Reflection() throws Exception {
 		// reset the error reset the error;
 		IProject project = setupTest();	
 		IPath srcRoot = getSourcePath();		
 		
 		String content =  
 			"package sample; \n\n" + 
-			"@Test.Annotation(bytes=  {(byte)0,(byte)1}, \n" +
-			"				  shorts= {(byte)0,(byte)1},\n" + 
-			"				  ints=   {(byte)0,(byte)1},\n" +
-			"                 longs=  {(byte)0,(byte)1},\n" +
-			"	 	 	      floats= {(byte)0,(byte)1},\n" +
-			"			      doubles={(byte)0,(byte)1},\n" +
-			"				  chars=  {(byte)0,(byte)1})\n\n" + 
-			"public class Test {\n" +
-			"	public @interface Annotation\n" +
-			"	{\n" +
-			"		char[]   chars(); \n" +
-			"       byte[]   bytes(); \n" +
-			"		short[]  shorts();\n" +
-			"		int[]    ints();  \n" +
-			"       long[]   longs(); \n" +
-			"		float[]  floats();\n" +
-			"		double[] doubles();\n" +
-			"	}\n" +
-			"}\n";
+			"import org.eclipse.jdt.apt.tests.annotations.valueconversion.RefAnnotationWithArray;\n" +
+			"@RefAnnotationWithArray(booleans={true, true },\n" +
+			"				  bytes=  {(byte)49, 50}, \n" +
+			"				  shorts= {(byte)49, 50},\n" + 
+			"				  ints=   {(byte)49, 50},\n" +
+			"                 longs=  {(byte)49, 50},\n" +
+			"	 	 	      floats= {(byte)49, 50},\n" +
+			"			      doubles={(byte)49, 50},\n" +
+			"				  chars=  {'1','2'})\n\n" + 
+			"public class Test {}\n" ;
 		
 		env.addClass( 
 				srcRoot, 
@@ -429,5 +717,102 @@ public class AnnotationValueConversionTests extends APTTestBase
 		expectingNoProblems();
 		
 		assertEquals(ProcessorTestStatus.NO_ERRORS, ProcessorTestStatus.getErrors());
-	}	
+	}
+	
+	public void testErrorStringValue() throws Exception {
+
+		IProject project = setupTest();	
+		IPath srcRoot = getSourcePath();		
+		
+		String content =  
+			"package sample; \n\n" + 
+			"import org.eclipse.jdt.apt.tests.annotations.valueconversion.AnnotationWithArray;\n" +
+			"@AnnotationWithArray(booleans={true, true },\n" +
+			"				  bytes=  {(byte)49, 50}, \n" +
+			"				  shorts= {(byte)49, 50},\n" + 
+			"				  ints=   {(byte)49, 50},\n" +
+			"                 longs=  {(byte)49, 50},\n" +
+			"	 	 	      floats= {(byte)49, 50},\n" +
+			"			      doubles={(byte)49, 50},\n" +
+			"				  chars=  {'1','2'},\n" +
+			"                 str=true)\n\n" + 
+			"public class Test {}\n";
+		
+		env.addClass( 
+				srcRoot, 
+				"sample", 
+				"Test",
+				content );
+		IPath testPath = env.addClass( srcRoot, "sample", "Test", content );
+		fullBuild( project.getFullPath() );
+		
+		expectingSpecificProblemsFor(testPath, new Problem[]{
+				new Problem("", "Type mismatch: cannot convert from boolean to String", testPath),
+				new Problem("", "type mismatch for memeber str expected java.lang.String but got java.lang.Boolean", testPath)
+		});
+	}
+	
+	public void testErrorStringValue_Reflection() throws Exception {			
+		IProject project = setupTest();	
+		IPath srcRoot = getSourcePath();		
+		
+		String content =  
+			"package sample; \n\n" + 
+			"import org.eclipse.jdt.apt.tests.annotations.valueconversion.RefAnnotationWithArray;\n" +
+			"@RefAnnotationWithArray(booleans={true, true },\n" +
+			"				  bytes=  {(byte)49, 50}, \n" +
+			"				  shorts= {(byte)49, 50},\n" + 
+			"				  ints=   {(byte)49, 50},\n" +
+			"                 longs=  {(byte)49, 50},\n" +
+			"	 	 	      floats= {(byte)49, 50},\n" +
+			"			      doubles={(byte)49, 50},\n" +
+			"				  chars=  {'1','2'},\n" +
+			"                 str=true)\n\n" + 
+			"public class Test {}\n";
+		
+		IPath testPath = env.addClass( srcRoot, "sample", "Test", content );
+		fullBuild( project.getFullPath() );
+		
+		expectingSpecificProblemsFor(testPath, new Problem[]{
+				new Problem("", "Type mismatch: cannot convert from boolean to String", testPath),
+				new Problem("", "value mismatch for memeber str expected string but got null", testPath)
+		});	
+		assertEquals(ProcessorTestStatus.NO_ERRORS, ProcessorTestStatus.getErrors());
+	}
+	
+	@SuppressWarnings("nls")
+	public void testMissingPrimitiveTypeValues_Reflection() throws Exception {
+		// reset the error reset the error;
+		IProject project = setupTest();	
+		IPath srcRoot = getSourcePath();		
+		
+		String content =  
+			"package sample; \n\n" + 
+			"import org.eclipse.jdt.apt.tests.annotations.valueconversion.RefAnnotation;\n" +
+			"@RefAnnotation()\n"+
+			"public class Test {}\n";
+		
+		IPath testPath = env.addClass( srcRoot, "sample", "Test", content );
+		fullBuild( project.getFullPath() );
+		
+		expectingSpecificProblemsFor(testPath, new Problem[]{
+				new Problem("", "The annotation @RefAnnotation must define the attribute z", testPath),
+				new Problem("", "The annotation @RefAnnotation must define the attribute c", testPath),
+				new Problem("", "The annotation @RefAnnotation must define the attribute b", testPath),
+				new Problem("", "The annotation @RefAnnotation must define the attribute s", testPath),
+				new Problem("", "The annotation @RefAnnotation must define the attribute i", testPath),
+				new Problem("", "The annotation @RefAnnotation must define the attribute l", testPath),
+				new Problem("", "The annotation @RefAnnotation must define the attribute f", testPath),
+				new Problem("", "The annotation @RefAnnotation must define the attribute d", testPath),
+				new Problem("", "value mismatch for memeber z expected true but got false", testPath),
+				new Problem("", "value mismatch for memeber s expected 49 but got 0", testPath),
+				new Problem("", "value mismatch for memeber i expected 49 but got 0", testPath),
+				new Problem("", "value mismatch for memeber c expected 1 but got 0", testPath),
+				new Problem("", "value mismatch for memeber b expected 49 but got 0", testPath),
+				new Problem("", "value mismatch for memeber l expected 49 but got 0", testPath),
+				new Problem("", "value mismatch for memeber f expected 49.0 but got 0.0", testPath),
+				new Problem("", "value mismatch for memeber d expected 49.0 but got 0.0", testPath)
+		});	
+		assertEquals(ProcessorTestStatus.NO_ERRORS, ProcessorTestStatus.getErrors());
+	}
 }
