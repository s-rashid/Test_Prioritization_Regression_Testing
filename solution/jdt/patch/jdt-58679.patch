diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/FloatCache.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/FloatCache.java
index e496fc5..c9b6c29 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/FloatCache.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/FloatCache.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2004 IBM Corporation and others.
+ * Copyright (c) 2000, 2006 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -29,19 +29,19 @@ public FloatCache() {
  *  the initial number of buckets
  */
 public FloatCache(int initialCapacity) {
-	elementSize = 0;
-	keyTable = new float[initialCapacity];
-	valueTable = new int[initialCapacity];
+	this.elementSize = 0;
+	this.keyTable = new float[initialCapacity];
+	this.valueTable = new int[initialCapacity];
 }
 /**
  * Clears the hash table so that it has no more elements in it.
  */
 public void clear() {
-	for (int i = keyTable.length; --i >= 0;) {
-		keyTable[i] = 0.0f;
-		valueTable[i] = 0;
+	for (int i = this.keyTable.length; --i >= 0;) {
+		this.keyTable[i] = 0.0f;
+		this.valueTable[i] = 0;
 	}
-	elementSize = 0;
+	this.elementSize = 0;
 }
 /** Returns true if the collection contains an element for the key.
  *
@@ -50,10 +50,10 @@ public void clear() {
  */
 public boolean containsKey(float key) {
 	if (key == 0.0f) {
-		for (int i = 0, max = elementSize; i < max; i++) {
-			if (keyTable[i] == 0.0f) {
+		for (int i = 0, max = this.elementSize; i < max; i++) {
+			if (this.keyTable[i] == 0.0f) {
 				int value1 = Float.floatToIntBits(key);
-				int value2 = Float.floatToIntBits(keyTable[i]);
+				int value2 = Float.floatToIntBits(this.keyTable[i]);
 				if (value1 == -2147483648 && value2 == -2147483648)
 					return true;
 				if (value1 == 0 && value2 == 0)
@@ -61,8 +61,8 @@ public boolean containsKey(float key) {
 			}
 		}
 	} else {
-		for (int i = 0, max = elementSize; i < max; i++) {
-			if (keyTable[i] == key) {
+		for (int i = 0, max = this.elementSize; i < max; i++) {
+			if (this.keyTable[i] == key) {
 				return true;
 			}
 		}
@@ -78,14 +78,14 @@ public boolean containsKey(float key) {
  * @return int value
  */
 public int put(float key, int value) {
-	if (elementSize == keyTable.length) {
+	if (this.elementSize == this.keyTable.length) {
 		// resize
-		System.arraycopy(keyTable, 0, (keyTable = new float[elementSize * 2]), 0, elementSize);
-		System.arraycopy(valueTable, 0, (valueTable = new int[elementSize * 2]), 0, elementSize);
+		System.arraycopy(this.keyTable, 0, (this.keyTable = new float[this.elementSize * 2]), 0, this.elementSize);
+		System.arraycopy(this.valueTable, 0, (this.valueTable = new int[this.elementSize * 2]), 0, this.elementSize);
 	}
-	keyTable[elementSize] = key;
-	valueTable[elementSize] = value;
-	elementSize++;
+	this.keyTable[this.elementSize] = key;
+	this.valueTable[this.elementSize] = value;
+	this.elementSize++;
 	return value;
 }
 /**
@@ -98,31 +98,31 @@ public int put(float key, int value) {
  */
 public int putIfAbsent(float key, int value) {
 	if (key == 0.0f) {
-		for (int i = 0, max = elementSize; i < max; i++) {
-			if (keyTable[i] == 0.0f) {
+		for (int i = 0, max = this.elementSize; i < max; i++) {
+			if (this.keyTable[i] == 0.0f) {
 				int value1 = Float.floatToIntBits(key);
-				int value2 = Float.floatToIntBits(keyTable[i]);
+				int value2 = Float.floatToIntBits(this.keyTable[i]);
 				if (value1 == -2147483648 && value2 == -2147483648)
-					return valueTable[i];
+					return this.valueTable[i];
 				if (value1 == 0 && value2 == 0)
-					return valueTable[i];
+					return this.valueTable[i];
 			}
 		}
 	} else {
-		for (int i = 0, max = elementSize; i < max; i++) {
-			if (keyTable[i] == key) {
-				return valueTable[i];
+		for (int i = 0, max = this.elementSize; i < max; i++) {
+			if (this.keyTable[i] == key) {
+				return this.valueTable[i];
 			}
 		}
 	}
-	if (elementSize == keyTable.length) {
+	if (this.elementSize == this.keyTable.length) {
 		// resize
-		System.arraycopy(keyTable, 0, (keyTable = new float[elementSize * 2]), 0, elementSize);
-		System.arraycopy(valueTable, 0, (valueTable = new int[elementSize * 2]), 0, elementSize);
+		System.arraycopy(this.keyTable, 0, (this.keyTable = new float[this.elementSize * 2]), 0, this.elementSize);
+		System.arraycopy(this.valueTable, 0, (this.valueTable = new int[this.elementSize * 2]), 0, this.elementSize);
 	}
-	keyTable[elementSize] = key;
-	valueTable[elementSize] = value;
-	elementSize++;
+	this.keyTable[this.elementSize] = key;
+	this.valueTable[this.elementSize] = value;
+	this.elementSize++;
 	return -value; // negative when added, assumes value is > 0
 }
 /**
@@ -131,12 +131,12 @@ public int putIfAbsent(float key, int value) {
  * @return String the ascii representation of the receiver
  */
 public String toString() {
-	int max = elementSize;
+	int max = this.elementSize;
 	StringBuffer buf = new StringBuffer();
 	buf.append("{"); //$NON-NLS-1$
 	for (int i = 0; i < max; ++i) {
-		if ((keyTable[i] != 0) || ((keyTable[i] == 0) && (valueTable[i] != 0))) {
-			buf.append(keyTable[i]).append("->").append(valueTable[i]); //$NON-NLS-1$
+		if ((this.keyTable[i] != 0) || ((this.keyTable[i] == 0) && (this.valueTable[i] != 0))) {
+			buf.append(this.keyTable[i]).append("->").append(this.valueTable[i]); //$NON-NLS-1$
 		}
 		if (i < max) {
 			buf.append(", "); //$NON-NLS-1$
