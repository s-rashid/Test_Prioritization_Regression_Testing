diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java
index bbb6be1..7f7a14e 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java
@@ -10,8 +10,11 @@
  *******************************************************************************/
 package org.eclipse.jdt.core.tests.model;
 
+import java.util.Hashtable;
+
 import junit.framework.Test;
 
+import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.JavaModelException;
 import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 
@@ -2380,37 +2383,55 @@ public void test157() throws JavaModelException {
  * @tests Tests for camel case completion
  */
 public void test160() throws JavaModelException {
-	String source =
-		"package javadoc.methods.tags;\n" + 
-		"public class BasicTestMethods {\n" + 
-		"	void foo() {}\n" + 
-		"	/**\n" + 
-		"	 * Completion after:\n" + 
-		"	 * 	@see #BTM\n" + 
-		"	 * \n" + 
-		"	 */\n" + 
-		"	BasicTestMethods(int xxx, float real, Class clazz) {}\n" + 
-		"}\n";
-	completeInJavadoc("/Completion/src/javadoc/methods/tags/BasicTestMethods.java", source, true, "BTM");
-	assertResults(
-		"BasicTestMethods[METHOD_REF<CONSTRUCTOR>]{BasicTestMethods(int, float, Class), Ljavadoc.methods.tags.BasicTestMethods;, (IFLjava.lang.Class;)V, BasicTestMethods, (xxx, real, clazz), "+this.positions+JAVADOC_RELEVANCE+"}"
-	);
+	this.oldOptions = JavaCore.getOptions();
+	try {
+		Hashtable options = new Hashtable(oldOptions);
+		options.put(JavaCore.CODEASSIST_CAMEL_CASE_MATCH, JavaCore.ENABLED);
+		JavaCore.setOptions(options);
+		
+		String source =
+			"package javadoc.methods.tags;\n" + 
+			"public class BasicTestMethods {\n" + 
+			"	void foo() {}\n" + 
+			"	/**\n" + 
+			"	 * Completion after:\n" + 
+			"	 * 	@see #BTM\n" + 
+			"	 * \n" + 
+			"	 */\n" + 
+			"	BasicTestMethods(int xxx, float real, Class clazz) {}\n" + 
+			"}\n";
+		completeInJavadoc("/Completion/src/javadoc/methods/tags/BasicTestMethods.java", source, true, "BTM");
+		assertResults(
+			"BasicTestMethods[METHOD_REF<CONSTRUCTOR>]{BasicTestMethods(int, float, Class), Ljavadoc.methods.tags.BasicTestMethods;, (IFLjava.lang.Class;)V, BasicTestMethods, (xxx, real, clazz), "+this.positions+JAVADOC_RELEVANCE+"}"
+		);
+	} finally {
+		JavaCore.setOptions(oldOptions);
+	}
 }
 public void test161() throws JavaModelException {
-	String source =
-		"package javadoc.methods.tags;\n" + 
-		"public class BasicTestMethods {\n" + 
-		"	void oneTwoThree(int i) {}\n" + 
-		"	/**\n" + 
-		"	 * Completion after:\n" + 
-		"	 * 	@see #oTT\n" + 
-		"	 * \n" + 
-		"	 */\n" + 
-		"	BasicTestMethods() {}\n" + 
-		"}\n";
-	completeInJavadoc("/Completion/src/javadoc/methods/tags/BasicTestMethods.java", source, true, "oTT");
-	assertResults(
-		"oneTwoThree[METHOD_REF]{oneTwoThree(int), Ljavadoc.methods.tags.BasicTestMethods;, (I)V, oneTwoThree, (i), "+this.positions+"24}"
-	);
+	this.oldOptions = JavaCore.getOptions();
+	try {
+		Hashtable options = new Hashtable(oldOptions);
+		options.put(JavaCore.CODEASSIST_CAMEL_CASE_MATCH, JavaCore.ENABLED);
+		JavaCore.setOptions(options);
+		
+		String source =
+			"package javadoc.methods.tags;\n" + 
+			"public class BasicTestMethods {\n" + 
+			"	void oneTwoThree(int i) {}\n" + 
+			"	/**\n" + 
+			"	 * Completion after:\n" + 
+			"	 * 	@see #oTT\n" + 
+			"	 * \n" + 
+			"	 */\n" + 
+			"	BasicTestMethods() {}\n" + 
+			"}\n";
+		completeInJavadoc("/Completion/src/javadoc/methods/tags/BasicTestMethods.java", source, true, "oTT");
+		assertResults(
+			"oneTwoThree[METHOD_REF]{oneTwoThree(int), Ljavadoc.methods.tags.BasicTestMethods;, (I)V, oneTwoThree, (i), "+this.positions+"24}"
+		);
+	} finally {
+		JavaCore.setOptions(oldOptions);
+	}
 }
 }
