diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
index 85fa8d9..68b15cd 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
@@ -698,6 +698,16 @@ public void constantOutOfRange(Literal literal, TypeBinding literalType) {
 		literal.sourceStart,
 		literal.sourceEnd);
 }
+private boolean containEmptyName(char[][] qualifiedName) {
+	// recovered name aren't null but can contain empty name
+	if(qualifiedName == null) return false;
+	
+	for (int i = 0; i < qualifiedName.length; i++) {
+		if(qualifiedName[i] != null && qualifiedName.length == 0) return true;
+	}
+	
+	return false;
+}
 public void corruptedSignature(TypeBinding enclosingType, char[] signature, int position) {
 	this.handle(
 		IProblem.CorruptedSignature,
@@ -2681,7 +2691,7 @@ public void invalidExpressionAsStatement(Expression expression){
 		expression.sourceEnd);
 }
 public void invalidField(FieldReference fieldRef, TypeBinding searchedType) {
-	if(fieldRef.token.length == 0) return;
+	if(fieldRef.token != null && fieldRef.token.length == 0) return;
 	
 	int id = IProblem.UndefinedField;
 	FieldBinding field = fieldRef.binding;
@@ -2740,11 +2750,10 @@ public void invalidField(FieldReference fieldRef, TypeBinding searchedType) {
 public void invalidField(NameReference nameRef, FieldBinding field) {
 	if (nameRef instanceof QualifiedNameReference) {
 		QualifiedNameReference ref = (QualifiedNameReference) nameRef;
-		char[] lastToken = ref.tokens[ref.tokens.length - 1];
-		if (lastToken.length == 0) return;
+		if (containEmptyName(ref.tokens)) return;
 	} else {
 		SingleNameReference ref = (SingleNameReference) nameRef;
-		if (ref.token.length == 0) return;
+		if (ref.token != null && ref.token.length == 0) return;
 	}
 	int id = IProblem.UndefinedField;
 	switch (field.problemId()) {
@@ -2803,9 +2812,8 @@ public void invalidField(QualifiedNameReference nameRef, FieldBinding field, int
 	//NotVisibleField
 	//AmbiguousField
 	
-	char[] lastToken = nameRef.tokens[nameRef.tokens.length - 1];
-	if (lastToken.length == 0) return;
-
+	if (containEmptyName(nameRef.tokens)) return;
+	
 	if (searchedType.isBaseType()) {
 		this.handle(
 			IProblem.NoFieldOnBaseType,
@@ -2882,7 +2890,7 @@ public void invalidFileNameForPackageAnnotations(Annotation annotation) {
 			annotation.sourceEnd);	
 }
 public void invalidMethod(MessageSend messageSend, MethodBinding method) {
-	if(messageSend.selector.length == 0) return;
+	if(messageSend.selector != null && messageSend.selector.length == 0) return;
 	
 	int id = IProblem.UndefinedMethod; //default...
     MethodBinding shownMethod = method;
@@ -3169,31 +3177,31 @@ public void invalidType(ASTNode location, TypeBinding type) {
 	int end = location.sourceEnd;
 	if (location instanceof QualifiedNameReference) {
 		QualifiedNameReference ref = (QualifiedNameReference) location;
-		if(ref.tokens[ref.tokens.length - 1].length == 0) return;
+		if (containEmptyName(ref.tokens)) return;
 		if (ref.indexOfFirstFieldBinding >= 1)
 			end = (int) ref.sourcePositions[ref.indexOfFirstFieldBinding - 1];
 	} else if (location instanceof ArrayQualifiedTypeReference) {
 		ArrayQualifiedTypeReference arrayQualifiedTypeReference = (ArrayQualifiedTypeReference) location;
-		if(arrayQualifiedTypeReference.tokens[arrayQualifiedTypeReference.tokens.length - 1].length == 0) return;
+		if (containEmptyName(arrayQualifiedTypeReference.tokens)) return;
 		long[] positions = arrayQualifiedTypeReference.sourcePositions;
 		end = (int) positions[positions.length - 1];
 	} else if (location instanceof QualifiedTypeReference) {
 		QualifiedTypeReference ref = (QualifiedTypeReference) location;
-		if(ref.tokens[ref.tokens.length - 1].length == 0) return;
+		if (containEmptyName(ref.tokens)) return;
 		if (type instanceof ReferenceBinding) {
 			char[][] name = ((ReferenceBinding) type).compoundName;
 			end = (int) ref.sourcePositions[name.length - 1];
 		}
 	} else if (location instanceof ImportReference) {
 		ImportReference ref = (ImportReference) location;
-		if (ref.tokens[ref.tokens.length - 1].length == 0) return;
+		if (containEmptyName(ref.tokens)) return;
 		if (type instanceof ReferenceBinding) {
 			char[][] name = ((ReferenceBinding) type).compoundName;
 			end = (int) ref.sourcePositions[name.length - 1];
 		}
 	} else if (location instanceof ArrayTypeReference) {
 		ArrayTypeReference arrayTypeReference = (ArrayTypeReference) location;
-		if (arrayTypeReference.token.length == 0) return;
+		if (arrayTypeReference.token != null && arrayTypeReference.token.length == 0) return;
 		end = arrayTypeReference.originalSourceEnd;
 	}
 	this.handle(
@@ -5309,7 +5317,7 @@ private String typesAsString(boolean isVarargs, TypeBinding[] types, boolean mak
 }
 public void undefinedAnnotationValue(TypeBinding annotationType, MemberValuePair memberValuePair) {
 	String name = 	new String(memberValuePair.name);
-	if(name.length() == 0) return;
+	if(name != null && name.length() == 0) return;
 	this.handle(
 		IProblem.UndefinedAnnotationMember,
 		new String[] { name, new String(annotationType.readableName())},
@@ -5319,7 +5327,7 @@ public void undefinedAnnotationValue(TypeBinding annotationType, MemberValuePair
 }
 public void undefinedLabel(BranchStatement statement) {
 	String[] arguments = new String[] {new String(statement.label)};
-	if (statement.label.length == 0) return;
+	if (statement.label != null && statement.label.length == 0) return;
 	this.handle(
 		IProblem.UndefinedLabel,
 		arguments,
@@ -5503,13 +5511,12 @@ public void unresolvableReference(NameReference nameRef, Binding binding) {
 	int end = nameRef.sourceEnd;
 	if (nameRef instanceof QualifiedNameReference) {
 		QualifiedNameReference ref = (QualifiedNameReference) nameRef;
-		char[] lastToken = ref.tokens[ref.tokens.length - 1];
-		if (lastToken.length == 0) return;
+		if (containEmptyName(ref.tokens)) return;
 		if (ref.indexOfFirstFieldBinding >= 1)
 			end = (int) ref.sourcePositions[ref.indexOfFirstFieldBinding - 1];
 	} else {
 		SingleNameReference ref = (SingleNameReference) nameRef;
-		if (ref.token.length == 0) return;
+		if (ref.token != null && ref.token.length == 0) return;
 	}
 	this.handle(
 		IProblem.UndefinedName,
