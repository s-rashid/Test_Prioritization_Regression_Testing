diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java
index 20063dd..4585ecc 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java
@@ -299,6 +299,63 @@ public class BlockScope extends Scope {
 		}
 	}
 
+	/**
+	 * Returns all declarations of most specific locals containing a given position in their source range.
+	 * This code does not recurse in nested types.
+	 * Returned array may have null values at trailing indexes.
+	 */
+	public LocalDeclaration[] findLocalVariableDeclarations(int position) {
+
+		// local variable init
+		int ilocal = 0, maxLocals = this.localIndex;
+		boolean hasMoreVariables = maxLocals > 0;
+		LocalDeclaration[] localDeclarations = null;
+		int declPtr = 0;
+
+		// scope init
+		int iscope = 0, maxScopes = this.subscopeCount;
+		boolean hasMoreScopes = maxScopes > 0;
+
+		// iterate scopes and variables in parallel
+		while (hasMoreVariables || hasMoreScopes) {
+			if (hasMoreScopes
+				&& (!hasMoreVariables || (subscopes[iscope].startIndex() <= ilocal))) {
+				// consider subscope first
+				Scope subscope = subscopes[iscope];
+				if (subscope.kind == Scope.BLOCK_SCOPE) { // do not dive in nested types
+					localDeclarations = ((BlockScope)subscope).findLocalVariableDeclarations(position);
+					if (localDeclarations != null) {
+						return localDeclarations;
+					}
+				}
+				hasMoreScopes = ++iscope < maxScopes;
+			} else {
+				// consider variable first
+				LocalVariableBinding local = locals[ilocal]; // if no local at all, will be locals[ilocal]==null
+				if (local != null) {
+					LocalDeclaration localDecl = local.declaration;
+					if (localDecl != null) {
+						if (localDecl.declarationSourceStart <= position) {
+							if (position <= localDecl.declarationSourceEnd) {
+								if (localDeclarations == null) {
+									localDeclarations = new LocalDeclaration[maxLocals];
+								}
+								localDeclarations[declPtr++] = localDecl;
+							}
+						} else {
+							return localDeclarations;
+						}
+					}
+				}
+				hasMoreVariables = ++ilocal < maxLocals;
+				if (!hasMoreVariables && localDeclarations != null) {
+					return localDeclarations;
+				}
+			}
+		}
+		return null;
+	}
+
 	/* Note that it must never produce a direct access to the targetEnclosingType,
 	 * but instead a field sequence (this$2.this$1.this$0) so as to handle such a test case:
 	 *
