diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ExecutableDeclarationImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ExecutableDeclarationImpl.java
index 3f63d56..01c6c4c 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ExecutableDeclarationImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ExecutableDeclarationImpl.java
@@ -11,10 +11,7 @@
 
 package org.eclipse.jdt.apt.core.internal.declaration;
 
-import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
 
 import org.eclipse.jdt.apt.core.internal.env.BaseProcessorEnv;
 import org.eclipse.jdt.apt.core.internal.util.Factory;
@@ -28,7 +25,8 @@ import com.sun.mirror.declaration.TypeParameterDeclaration;
 import com.sun.mirror.type.ReferenceType;
 import com.sun.mirror.util.DeclarationVisitor;
 
-public abstract class ExecutableDeclarationImpl extends MemberDeclarationImpl implements ExecutableDeclaration
+public abstract class ExecutableDeclarationImpl 
+	extends MemberDeclarationImpl implements ExecutableDeclaration
 {
     public ExecutableDeclarationImpl(final IMethodBinding binding, final BaseProcessorEnv env)
     {     
@@ -49,46 +47,16 @@ public abstract class ExecutableDeclarationImpl extends MemberDeclarationImpl im
 
     public Collection<TypeParameterDeclaration> getFormalTypeParameters()
     {
-        final IMethodBinding methodBinding = getDeclarationBinding();
-		final ITypeBinding[] typeParams = methodBinding.getTypeParameters();        
-        if( typeParams == null || typeParams.length == 0 )
-            return Collections.emptyList();
-        final List<TypeParameterDeclaration> result = new ArrayList<TypeParameterDeclaration>();
-        for( ITypeBinding typeVar : typeParams ){
-            final TypeParameterDeclaration typeParamDecl = (TypeParameterDeclaration)Factory.createDeclaration(typeVar, _env);
-            if( typeParamDecl != null )
-                result.add(typeParamDecl);
-        }
-        return result;
+    	return ExecutableUtil.getFormalTypeParameters(this, _env);
     }
     public Collection<ParameterDeclaration> getParameters()
     {
-        final IMethodBinding methodBinding = getDeclarationBinding();
-        final ITypeBinding[] paramTypes = methodBinding.getParameterTypes();
-        if( paramTypes == null || paramTypes.length == 0 )
-            return Collections.emptyList();        
-        final List<ParameterDeclaration> result = new ArrayList<ParameterDeclaration>(paramTypes.length);        
-        
-        for( int i=0; i<paramTypes.length; i++ ){
-            final ITypeBinding type = paramTypes[i];
-            final ParameterDeclaration param = Factory.createParameterDeclaration(this, i, type, _env);
-            result.add(param);
-        }
-
-        return result;
+    	return ExecutableUtil.getParameters(this, _env);
     }
 
     public Collection<ReferenceType> getThrownTypes()
     {
-        final IMethodBinding methodBinding = getDeclarationBinding();
-        final ITypeBinding[] exceptions = methodBinding.getExceptionTypes();
-        final List<ReferenceType> results = new ArrayList<ReferenceType>(4);
-        for( ITypeBinding exception : exceptions ){
-            final TypeDeclaration mirrorDecl = Factory.createReferenceType(exception, _env);
-            if( mirrorDecl != null)
-                results.add((ReferenceType)mirrorDecl);
-        }
-        return results;
+    	return ExecutableUtil.getThrownTypes(this, _env);
     }
 
     public boolean isVarArgs()
