diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelCompletionTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelCompletionTests.java
index b2a903c..d9f40db 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelCompletionTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelCompletionTests.java
@@ -10,11 +10,14 @@
  *******************************************************************************/
 package org.eclipse.jdt.core.tests.model;
 
+import java.io.IOException;
 import java.util.Hashtable;
 import java.util.List;
 
+import org.eclipse.core.resources.IProject;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.Path;
 import org.eclipse.jdt.core.*;
-import org.eclipse.jdt.core.ICompilationUnit;
 import org.eclipse.jdt.internal.codeassist.RelevanceConstants;
 
 import junit.framework.*;
@@ -34,6 +37,38 @@ public abstract class AbstractJavaModelCompletionTests extends AbstractJavaModel
 public AbstractJavaModelCompletionTests(String name) {
 	super(name);
 }
+protected void addLibrary(String projectName, String jarName, String sourceZipName, String docZipName, boolean exported) throws JavaModelException {
+	IJavaProject javaProject = getJavaProject(projectName);
+	IProject project = javaProject.getProject();
+	String projectPath = '/' + project.getName() + '/';
+	
+	IClasspathAttribute[] extraAttributes;
+	if(docZipName == null) {
+		extraAttributes = new IClasspathAttribute[0];
+	} else {
+		extraAttributes =
+			new IClasspathAttribute[]{
+				JavaCore.newClasspathAttribute(
+						IClasspathAttribute.JAVADOC_LOCATION_ATTRIBUTE_NAME,
+						"jar:platform:/resource"+projectPath+docZipName+"!/")};
+	}
+	
+	addLibraryEntry(
+			javaProject,
+			new Path(projectPath + jarName),
+			sourceZipName == null ? null : new Path(projectPath + sourceZipName),
+			sourceZipName == null ? null : new Path(""),
+			null,
+			null,
+			extraAttributes,
+			exported);
+} 
+protected void removeLibrary(String projectName, String jarName) throws CoreException, IOException {
+	IJavaProject javaProject = getJavaProject(projectName);		
+	IProject project = javaProject.getProject();
+	String projectPath = '/' + project.getName() + '/';
+	removeLibraryEntry(javaProject, new Path(projectPath + jarName));
+}
 public ICompilationUnit getWorkingCopy(String path, String source) throws JavaModelException {
 	return super.getWorkingCopy(path, source, this.wcOwner, null);
 }
