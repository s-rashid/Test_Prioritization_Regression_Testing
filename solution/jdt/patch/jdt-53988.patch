diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
index daeb8d6..00a7468 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
@@ -407,7 +407,8 @@ public abstract class Scope implements BaseTypes, TypeConstants, TypeIds {
 				problemReporter().boundCannotBeArray(typeRef, superType);
 				continue nextVariable;
 			}
-			if (superType.isTypeVariable()) {
+			boolean isTypeVariableFirstBound =  superType.isTypeVariable();
+			if (isTypeVariableFirstBound) {
 				TypeVariableBinding varSuperType = (TypeVariableBinding) superType;
 				if (varSuperType.rank >= typeVariable.rank && varSuperType.declaringElement == typeVariable.declaringElement) {
 					problemReporter().forwardTypeVariableReference(typeParameter, varSuperType);
@@ -439,6 +440,9 @@ public abstract class Scope implements BaseTypes, TypeConstants, TypeIds {
 					}
 					typeRef.resolvedType = superType; // hold onto the problem type
 					types[0] = superType;
+					if (isTypeVariableFirstBound && j == 0) {
+						problemReporter().noAdditionalBoundAfterTypeVariable(typeRef);
+					}
 					if (superType.isArrayType()) {
 						problemReporter().boundCannotBeArray(typeRef, superType);
 						continue nextVariable;
