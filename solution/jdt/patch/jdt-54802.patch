diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnit.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnit.java
index 30ac5ae..5532a7b 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnit.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnit.java
@@ -232,24 +232,27 @@ public class CompilationUnit extends ASTNode {
 	/**
 	 * Returns the column number corresponding to the given source character
 	 * position in the original source string. Column number are zero-based. 
-	 * Return zero if it is beyond the valid range.
+	 * Return <code>-1</code> if it is beyond the valid range or <code>-2</code>
+	 * if the column number information is unknown.
 	 * 
 	 * @param position a 0-based character position, possibly
 	 *   negative or out of range
-	 * @return the 0-based coloumn number, or <code>0</code> if the character
+	 * @return the 0-based coloumn number, or <code>-1</code> if the character
 	 *    position does not correspond to a source line in the original
-	 *    source file or if column number information is not known for this
+	 *    source file or <code>-2</code> if column number information is unknown for this
 	 *    compilation unit
 	 * @see ASTParser
 	 * @since 3.2
 	 */
-	public int columnNumber(final int position) {
-		final int line = lineNumber(position);
-		if (this.lineEndTable == null) return 0;
-		final int length = this.lineEndTable.length;
+	public int getColumnNumber(final int position) {
+		final int length;
+		if (this.lineEndTable == null || ((length = this.lineEndTable.length) == 0)) return -2;
+		final int line = getLineNumber(position);
+		if (line == -1) {
+			return -1;
+		}
 		if (line == 1) {
-			if (length == 0 || position >= getStartPosition() + getLength())
-				return 0;
+			if (position >= getStartPosition() + getLength()) return -1;
 			return position;
 		}
 		// -1 to for one-based to zero-based conversion.
@@ -259,7 +262,7 @@ public class CompilationUnit extends ASTNode {
 		final int offsetForLine = previousLineOffset + 1;
 		final int currentLineEnd = line == length + 1 ? getStartPosition() + getLength() - 1 :	this.lineEndTable[line - 1];
 		if (offsetForLine > currentLineEnd) {
-			return 0;
+			return -1;
 		} else {
 			return position - offsetForLine;
 		}
@@ -541,31 +544,32 @@ public class CompilationUnit extends ASTNode {
 	/**
 	 * Given a line number and column number, returns the corresponding 
 	 * position in the original source string.
-	 * Returns 0 if no line number information is available for this
+	 * Returns -2 if no line number information is available for this
 	 * compilation unit or the requested line number is less than one. 
 	 * Returns the total size of the source string if <code>line</code>
 	 * is greater than the actual number lines in the unit.
-	 * Returns 0 if <code>column</code> is less than 0,  
+	 * Returns -1 if <code>column</code> is less than 0,  
 	 * or the position of the last character of the line if <code>column</code>
 	 * is beyond the legal range. 
 	 * 
 	 * @param line the one-based line number
 	 * @param column the zero-based column number
 	 * @return the 0-based character position in the source string; 
-	 * returns <code>0</code> if line/column number information is not known 
-	 * for this compilation unit or the inputs are not valid
+	 * <code>-2</code> if line/column number information is not known 
+	 * for this compilation unit or <code>-1</code> the inputs are not valid
 	 * @since 3.2
 	 */
 	 public int getPosition(int line, int column) {
-		if (line < 1 || column < 0 || this.lineEndTable == null) return 0;
+		if (this.lineEndTable == null) return -2;
+		if (line < 1 || column < 0) return -1;
 		final int length = this.lineEndTable.length;
-		if (length == 0) return 0;
+		if (length == 0) return -2;
 		if (line == 1) {
 			final int endOfLine = this.lineEndTable[0];
-			return column > endOfLine ? 0 : column;			
+			return column > endOfLine ? -1 : column;			
 		} else if( line > length + 1 ) {
 			// greater than the number of lines in the source string.
-			return 0;
+			return -1;
 		}		
 		// -1 to for one-based to zero-based conversion.
 		// -1, again, to get previous line.
@@ -574,7 +578,7 @@ public class CompilationUnit extends ASTNode {
 		final int offsetForLine = previousLineOffset + 1;
 		final int currentLineEnd = line == length + 1 ? getStartPosition() + getLength() - 1 : this.lineEndTable[line-1];
 		if ((offsetForLine + column) > currentLineEnd) {  
-			return 0;
+			return -1;
 		} else {  
 			return offsetForLine + column;
 		}
@@ -716,18 +720,49 @@ public class CompilationUnit extends ASTNode {
 	 *    position does not correspond to a source line in the original
 	 *    source file or if line number information is not known for this
 	 *    compilation unit
+	 * @deprecated Use getLineNumber(int) instead.
 	 * @see ASTParser
+	 * @see #getLineNumber(int) 
 	 */
 	public int lineNumber(int position) {
-		if (this.lineEndTable == null) return 1;
+		int lineNumber = getLineNumber(position);
+		return lineNumber < 1 ? 1 : lineNumber;
+	}
+	
+	/**
+	 * Returns the line number corresponding to the given source character
+	 * position in the original source string. The initial line of the 
+	 * compilation unit is numbered 1, and each line extends through the
+	 * last character of the end-of-line delimiter. The very last line extends
+	 * through the end of the source string and has no line delimiter.
+	 * For example, the source string <code>class A\n{\n}</code> has 3 lines
+	 * corresponding to inclusive character ranges [0,7], [8,9], and [10,10].
+	 * Returns -1 for a character position that does not correspond to any
+	 * source line, or -2 if no line number information is available for this
+	 * compilation unit.
+	 * 
+	 * @param position a 0-based character position, possibly
+	 *   negative or out of range
+	 * @return the 1-based line number, or <code>-1</code> if the character
+	 *    position does not correspond to a source line in the original
+	 *    source file or <code>-2</code> if line number information is not known for this
+	 *    compilation unit
+	 * @see ASTParser
+	 */
+	public int getLineNumber(int position) {
+		if (this.lineEndTable == null) return -2;
 		int length = this.lineEndTable.length;
 		if (length == 0) {
 			// no line number info
-			return 1;
+			return -2;
 		}
 		int low = 0;
+		if (position < 0) {
+			// position illegal 
+			return -1;
+		}
 		if (position <= this.lineEndTable[low]) {
-			// position illegal or before the first line delimiter
+			// before the first line delimiter
 			return 1;
 		}
 		// assert position > lineEndTable[low+1]  && low == 0
@@ -736,7 +771,7 @@ public class CompilationUnit extends ASTNode {
 			// position beyond the last line separator
 			if (position >= getStartPosition() + getLength()) {
 				// this is beyond the end of the source length
-				return 1;
+				return -1;
 			} else {
 				return length + 1;
 			}
