diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java
index 9e65a5f..03d84be 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java
@@ -13,11 +13,13 @@
 package org.eclipse.jdt.apt.core.internal;
 
 import java.util.Collection;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Set;
 
+import org.eclipse.core.resources.IFile;
 import org.eclipse.core.resources.IMarker;
 import org.eclipse.core.resources.IProject;
 import org.eclipse.core.resources.IResource;
@@ -48,7 +50,15 @@ public class AptCompilationParticipant extends CompilationParticipant
 	 */
 	private Set<AnnotationProcessorFactory> _previousRoundsBatchFactories = new LinkedHashSet<AnnotationProcessorFactory>();
 	private int _buildRound = 0;
+	private boolean _isBatch = false; 
 	private static AptCompilationParticipant INSTANCE;
+	/** 
+	 * Files that has been processed by apt during the current build.
+	 * Files that has been compiled may need re-compilation (from jdt's perspective) 
+	 * because of newly generated types. APT only process each file once during a build and 
+	 * this set will prevent unnecessary/incorrect compilation of already processed files.
+	 */
+	private Set<IFile> _processedFiles = null;
 	
 	public static AptCompilationParticipant getInstance() {
 		return INSTANCE;
@@ -68,10 +78,24 @@ public class AptCompilationParticipant extends CompilationParticipant
 		return true;
 	}
 	
-	public void processAnnotations(ICompilationParticipantResult[] filesWithAnnotations, boolean isBatchBuild) {
-		if( filesWithAnnotations == null || filesWithAnnotations.length == 0 )
+	public void buildStarting(ICompilationParticipantResult[] files, boolean isBatch){
+		// this gets called multiple times during a build.
+		// This gets called:
+		// 1) after "aboutToBuild" is called.
+        // 2) everytime an incremental build occur because of newly generated files
+        // this gets called.
+		if( _buildRound == 0 )
+			_isBatch = isBatch;
+	}
+	
+	public void processAnnotations(ICompilationParticipantResult[] allfiles) {	
+		// This should not happen. There should always be file that that needs 
+		// building when 
+		final int total = allfiles == null ? 0 : allfiles.length;
+		if( total == 0 )
 			return;
-		final IProject project = filesWithAnnotations[0].getFile().getProject();
+
+		final IProject project = allfiles[0].getFile().getProject();
 		final IJavaProject javaProject = JavaCore.create(project);
 		// Don't dispatch on pre-1.5 project. They cannot legally have annotations
 		String javaVersion = javaProject.getOption("org.eclipse.jdt.core.compiler.source", true); //$NON-NLS-1$		
@@ -79,24 +103,71 @@ public class AptCompilationParticipant extends CompilationParticipant
 		// is a possibility
 		if ("1.3".equals(javaVersion) || "1.4".equals(javaVersion)) { //$NON-NLS-1$ //$NON-NLS-2$
 			return;
-		}			
+		}
+		
+		if ( _isBatch && _buildRound == 0 ) {
+			AnnotationProcessorFactoryLoader.getLoader().resetBatchProcessors(javaProject);
+			_previousRoundsBatchFactories.clear();
+		}
 		
 		try {
-			if (isBatchBuild && _buildRound == 0 ) {
-				AnnotationProcessorFactoryLoader.getLoader().resetBatchProcessors(javaProject);
-				_previousRoundsBatchFactories.clear();
+		
+			// split up the list of files with annotations from those that don't
+			// also exclude files that has already been processed.
+			int annoFileCount = 0;
+			int noAnnoFileCount = 0;
+			for( int i=0; i<total; i++ ){
+				if( _buildRound > 0 && _processedFiles.contains( allfiles[i].getFile() )){
+					continue;
+				}
+				if( allfiles[i].hasAnnotations() )
+					annoFileCount ++;
+				else
+					noAnnoFileCount ++;
 			}
+			// apt has already processed all files
+			// files that are reported at this point is triggered by
+			// dependencies introduced by type creation. 
+			if( annoFileCount == 0 && noAnnoFileCount == 0 )
+				return;
+			
+			ICompilationParticipantResult[] withAnnotation = null;
+			ICompilationParticipantResult[] withoutAnnotation = null;
+			
+			if( annoFileCount != 0 )
+				withAnnotation = new ICompilationParticipantResult[annoFileCount];
+			if(noAnnoFileCount != 0 )
+				withoutAnnotation = new ICompilationParticipantResult[noAnnoFileCount];
+			int wIndex = 0; // index for 'withAnnotation' array
+			int woIndex = 0; // index of 'withoutAnnotation' array
+			for( int i=0; i<total; i++ ){		
+				if( _processedFiles.contains( allfiles[i].getFile() ) )
+					continue;
+				if( allfiles[i].hasAnnotations() )
+					withAnnotation[wIndex ++] = allfiles[i];
+				else
+					withoutAnnotation[woIndex ++] = allfiles[i];
+			}
+			
+			for( ICompilationParticipantResult file : allfiles )
+				_processedFiles.add(file.getFile());
 		
 			Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories =
 				AnnotationProcessorFactoryLoader.getLoader().getFactoriesAndAttributesForProject(javaProject);
 			
-			AptProject aptProject = AptPlugin.getAptProject(javaProject);
+			AptProject aptProject = AptPlugin.getAptProject(javaProject);			
 			Set<AnnotationProcessorFactory> dispatchedBatchFactories = 
-				APTDispatchRunnable.runAPTDuringBuild(filesWithAnnotations, aptProject, factories, _previousRoundsBatchFactories, isBatchBuild);
+				APTDispatchRunnable.runAPTDuringBuild(
+						withAnnotation, 
+						withoutAnnotation,
+						aptProject, 
+						factories, 
+						_previousRoundsBatchFactories, 
+						_isBatch);
 			_previousRoundsBatchFactories.addAll(dispatchedBatchFactories);
 		}
 		finally {
-			if (isBatchBuild) {
+			if (_isBatch) {
 				// In order to keep from locking jars, we explicitly close any batch-based
 				// classloaders we opened
 				AnnotationProcessorFactoryLoader.getLoader().closeBatchClassLoader();
@@ -184,9 +255,8 @@ public class AptCompilationParticipant extends CompilationParticipant
 		AptPlugin.getAptProject(project).compilationStarted();
 		}		
 		_buildRound = 0; // reset
+		_processedFiles = new HashSet<IFile>();
 		// TODO: (wharley) if the factory path is different we need a full build
 		return CompilationParticipant.READY_FOR_BUILD;
 	}
-    
-    private final static String DOT_JAVA = ".java"; //$NON-NLS-1$
 }
