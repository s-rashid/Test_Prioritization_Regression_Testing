diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java
index 2725b01..7b51435 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java
@@ -752,24 +752,29 @@ public class Util {
 				JAVA_LIKE_EXTENSIONS = new char[][] {SuffixConstants.EXTENSION_java.toCharArray()};
 			else {
 				IContentType javaContentType = Platform.getContentTypeManager().getContentType(JavaCore.JAVA_SOURCE_CONTENT_TYPE);
-				String[] fileExtensions = javaContentType == null ? null : javaContentType.getFileSpecs(IContentType.FILE_EXTENSION_SPEC);
+				HashSet fileExtensions = new HashSet();
+				// content types derived from java content type should be included (https://bugs.eclipse.org/bugs/show_bug.cgi?id=121715)
+				IContentType[] contentTypes = Platform.getContentTypeManager().getAllContentTypes();
+				for (int i = 0, length = contentTypes.length; i < length; i++) {
+					if (contentTypes[i].isKindOf(javaContentType)) { // note that javaContentType.isKindOf(javaContentType) == true
+						String[] fileExtension = contentTypes[i].getFileSpecs(IContentType.FILE_EXTENSION_SPEC);
+						for (int j = 0, length2 = fileExtension.length; j < length2; j++) {
+							fileExtensions.add(fileExtension[j]);
+						}
+					}
+				}
+				int length = fileExtensions.size();
 				// note that file extensions contains "java" as it is defined in JDT Core's plugin.xml
-				int length = fileExtensions == null ? 0 : fileExtensions.length;
 				char[][] extensions = new char[length][];
-				SimpleWordSet knownExtensions = new SimpleWordSet(length); // used to ensure no duplicate extensions
 				extensions[0] = SuffixConstants.EXTENSION_java.toCharArray(); // ensure that "java" is first
-				knownExtensions.add(extensions[0]);
 				int index = 1;
-				for (int i = 0; i < length; i++) {
-					String fileExtension = fileExtensions[i];
-					char[] extension = fileExtension.toCharArray();
-					if (!knownExtensions.includes(extension)) {
-						extensions[index++] = extension;
-						knownExtensions.add(extension);
-					}
+				Iterator iterator = fileExtensions.iterator();
+				while (iterator.hasNext()) {
+					String fileExtension = (String) iterator.next();
+					if (SuffixConstants.EXTENSION_java.equals(fileExtension))
+						continue;
+					extensions[index++] = fileExtension.toCharArray();
 				}
-				if (index != length)
-					System.arraycopy(extensions, 0, extensions = new char[index][], 0, index);
 				JAVA_LIKE_EXTENSIONS = extensions;
 			}
 		}
