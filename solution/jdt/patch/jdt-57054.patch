diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/OverflowingLRUCache.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/OverflowingLRUCache.java
index 4e91f55..bc604c1 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/OverflowingLRUCache.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/OverflowingLRUCache.java
@@ -151,6 +151,9 @@ public double getLoadFactor() {
 	public int getOverflow() {
 		return fOverflow;
 	}
+	protected boolean isSpaceAvailable(int space, int limit) {
+		return fOverflow == 0 && fCurrentSpace + space <= limit;
+	}
 	/**
 	 * Ensures there is the specified amount of free space in the receiver,
 	 * by removing old entries if necessary.  Returns true if the requested space was
@@ -162,15 +165,13 @@ public double getLoadFactor() {
 	protected boolean makeSpace(int space) {
 	
 		int limit = fSpaceLimit;
-		if (fOverflow == 0) {
+		if (isSpaceAvailable(space, limit)) {
 			/* if space is already available */
-			if (fCurrentSpace + space <= limit) {
-				return true;
-			}
+			return true;
 		}
 	
 		/* Free up space by removing oldest entries */
-		int spaceNeeded = (int)((1 - fLoadFactor) * fSpaceLimit);
+		int spaceNeeded = (int)((1 - fLoadFactor) * limit);
 		spaceNeeded = (spaceNeeded > space) ? spaceNeeded : space;
 		LRUCacheEntry entry = fEntryQueueTail;
