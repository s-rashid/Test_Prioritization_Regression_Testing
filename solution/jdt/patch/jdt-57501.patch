diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/CompilationParticipantResult.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/CompilationParticipantResult.java
index 51beebb..9f797dd 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/CompilationParticipantResult.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/CompilationParticipantResult.java
@@ -15,15 +15,15 @@ package org.eclipse.jdt.internal.core.builder;
 import org.eclipse.core.resources.IFile;
 import org.eclipse.jdt.core.compiler.*;
 
-public class CompilationParticipantResult implements ICompilationParticipantResult {
-	SourceFile sourceFile;
-	boolean hasAnnotations; // only set during processAnnotations
-	IFile[] addedFiles; // added/changed generated source files that need to be compiled
-	IFile[] deletedFiles; // previously generated source files that should be deleted
-	IProblem[] problems; // new problems to report against this compilationUnit
-	String[] dependencies; // fully-qualified type names of any new dependencies, each name is of the form 'p1.p2.A.B'
-
-CompilationParticipantResult(SourceFile sourceFile) {
+public class CompilationParticipantResult {
+	protected SourceFile sourceFile;
+	protected boolean hasAnnotations; // only set during processAnnotations
+	protected IFile[] addedFiles; // added/changed generated source files that need to be compiled
+	protected IFile[] deletedFiles; // previously generated source files that should be deleted
+	protected IProblem[] problems; // new problems to report against this compilationUnit
+	protected String[] dependencies; // fully-qualified type names of any new dependencies, each name is of the form 'p1.p2.A.B'
+
+protected CompilationParticipantResult(SourceFile sourceFile) {
 	this.sourceFile = sourceFile;
 	this.hasAnnotations = false;
 	this.addedFiles = null;
@@ -32,66 +32,6 @@ CompilationParticipantResult(SourceFile sourceFile) {
 	this.dependencies = null;
 }
 
-public char[] getContents() {
-	return this.sourceFile.getContents();
-}
-
-public IFile getFile() {
-	return this.sourceFile.resource;
-}
-
-public boolean hasAnnotations() {
-	return this.hasAnnotations; // only set during processAnnotations
-}
-
-public void recordAddedGeneratedFiles(IFile[] addedGeneratedFiles) {
-	int length2 = addedGeneratedFiles.length;
-	if (length2 == 0) return;
-
-	int length1 = this.addedFiles == null ? 0 : this.addedFiles.length;
-	IFile[] merged = new IFile[length1 + length2];
-	if (length1 > 0) // always make a copy even if currently empty
-		System.arraycopy(this.addedFiles, 0, merged, 0, length1);
-	System.arraycopy(addedGeneratedFiles, 0, merged, length1, length2);
-	this.addedFiles = merged;
-}
-
-public void recordDeletedGeneratedFiles(IFile[] deletedGeneratedFiles) {
-	int length2 = deletedGeneratedFiles.length;
-	if (length2 == 0) return;
-
-	int length1 = this.deletedFiles == null ? 0 : this.deletedFiles.length;
-	IFile[] merged = new IFile[length1 + length2];
-	if (length1 > 0) // always make a copy even if currently empty
-		System.arraycopy(this.deletedFiles, 0, merged, 0, length1);
-	System.arraycopy(deletedGeneratedFiles, 0, merged, length1, length2);
-	this.deletedFiles = merged;
-}
-
-public void recordDependencies(String[] typeNameDependencies) {
-	int length2 = typeNameDependencies.length;
-	if (length2 == 0) return;
-
-	int length1 = this.dependencies == null ? 0 : this.dependencies.length;
-	String[] merged = new String[length1 + length2];
-	if (length1 > 0) // always make a copy even if currently empty
-		System.arraycopy(this.dependencies, 0, merged, 0, length1);
-	System.arraycopy(typeNameDependencies, 0, merged, length1, length2);
-	this.dependencies = merged;
-}
-
-public void recordNewProblems(IProblem[] newProblems) {
-	int length2 = newProblems.length;
-	if (length2 == 0) return;
-
-	int length1 = this.problems == null ? 0 : this.problems.length;
-	IProblem[] merged = new IProblem[length1 + length2];
-	if (length1 > 0) // always make a copy even if currently empty
-		System.arraycopy(this.problems, 0, merged, 0, length1);	
-	System.arraycopy(newProblems, 0, merged, length1, length2);	
-	this.problems = merged;
-}
-
 void reset(boolean detectedAnnotations) {
 	// called prior to processAnnotations
 	this.hasAnnotations = detectedAnnotations;
@@ -104,4 +44,5 @@ void reset(boolean detectedAnnotations) {
 public String toString() {
 	return this.sourceFile.toString();
 }
+
 }
