diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java
index 27d55f1..226704d 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java
@@ -85,10 +85,11 @@ public class CaptureBinding extends TypeVariableBinding {
 				if (substitutedVariableInterfaces[i] == this) substitutedVariableInterfaces[i] = originalVariableInterfaces[i];
 			}
 		}
+		// no substitution for wildcard bound (only formal bounds from type variables are to be substituted: 104082)
 		TypeBinding originalWildcardBound = wildcard.bound;
 		// prevent cyclic capture: given X<T>, capture(X<? extends T> could yield a circular type
-		TypeBinding substitutedWildcardBound = originalWildcardBound == null ? null : Scope.substitute(capturedParameterizedType, originalWildcardBound);
-		if (substitutedWildcardBound == this) substitutedWildcardBound = originalWildcardBound;
+//		TypeBinding substitutedWildcardBound = originalWildcardBound == null ? null : Scope.substitute(capturedParameterizedType, originalWildcardBound);
+//		if (substitutedWildcardBound == this) substitutedWildcardBound = originalWildcardBound;
 		
 		switch (wildcard.boundKind) {
 			case Wildcard.EXTENDS :
@@ -96,20 +97,20 @@ public class CaptureBinding extends TypeVariableBinding {
 					this.superclass = substitutedVariableSuperclass;
 					// merge wildcard bound into variable superinterfaces using glb
 					if (substitutedVariableInterfaces == NoSuperInterfaces) {
-						this.superInterfaces = new ReferenceBinding[] { (ReferenceBinding) substitutedWildcardBound };
+						this.superInterfaces = new ReferenceBinding[] { (ReferenceBinding) originalWildcardBound };
 					} else {
 						int length = substitutedVariableInterfaces.length;
 						System.arraycopy(substitutedVariableInterfaces, 0, substitutedVariableInterfaces = new ReferenceBinding[length+1], 1, length);
-						substitutedVariableInterfaces[0] =  (ReferenceBinding) substitutedWildcardBound;
+						substitutedVariableInterfaces[0] =  (ReferenceBinding) originalWildcardBound;
 						this.superInterfaces = Scope.greaterLowerBound(substitutedVariableInterfaces);
 					}
 				} else {
 					// per construction the wildcard bound is a subtype of variable superclass
-					this.superclass = wildcard.bound.isArrayType() ? substitutedVariableSuperclass : (ReferenceBinding)substitutedWildcardBound;
+					this.superclass = wildcard.bound.isArrayType() ? substitutedVariableSuperclass : (ReferenceBinding)originalWildcardBound;
 					this.superInterfaces = substitutedVariableInterfaces;
 				}
-				this.firstBound =  substitutedWildcardBound;
-				if ((substitutedWildcardBound.tagBits & HasTypeVariable) == 0)
+				this.firstBound =  originalWildcardBound;
+				if ((originalWildcardBound.tagBits & HasTypeVariable) == 0)
 					this.tagBits &= ~HasTypeVariable;
 				break;
 			case Wildcard.UNBOUND :
@@ -119,12 +120,12 @@ public class CaptureBinding extends TypeVariableBinding {
 				break;
 			case Wildcard.SUPER :
 				this.superclass = substitutedVariableSuperclass;
-				if (wildcardVariable.firstBound == substitutedVariableSuperclass || substitutedWildcardBound == substitutedVariableSuperclass) {
+				if (wildcardVariable.firstBound == substitutedVariableSuperclass || originalWildcardBound == substitutedVariableSuperclass) {
 					this.firstBound = substitutedVariableSuperclass;
 				}
 				this.superInterfaces = substitutedVariableInterfaces;
-				this.lowerBound = substitutedWildcardBound;
-				if ((substitutedWildcardBound.tagBits & HasTypeVariable) == 0)
+				this.lowerBound = originalWildcardBound;
+				if ((originalWildcardBound.tagBits & HasTypeVariable) == 0)
 					this.tagBits &= ~HasTypeVariable;
 				break;
 		}
