diff --git a/org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/IncrementalTests.java b/org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/IncrementalTests.java
index 53210f4..2a01789 100644
--- a/org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/IncrementalTests.java
+++ b/org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/IncrementalTests.java
@@ -15,6 +15,7 @@ import junit.framework.TestSuite;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.Path;
 import org.eclipse.jdt.core.JavaModelException;
+import org.eclipse.jdt.core.compiler.CategorizedProblem;
 import org.eclipse.jdt.core.tests.util.Util;
 
 public class IncrementalTests extends Tests {
@@ -56,7 +57,7 @@ public class IncrementalTests extends Tests {
 
 		incrementalBuild(projectPath);
 		expectingProblemsFor(new IPath[]{ pathToD });
-		expectingSpecificProblemsFor(pathToD, new Problem[] {new Problem("", "The type CC is already defined", pathToD, 37, 39)}, true);
+		expectingSpecificProblemsFor(pathToD, new Problem[] {new Problem("", "The type CC is already defined", pathToD, 37, 39, -1)});
 	}
 
 	public void testDefaultPackage() throws JavaModelException {
@@ -123,7 +124,7 @@ public class IncrementalTests extends Tests {
 			
 
 		incrementalBuild();
-		expectingSpecificProblemFor(object, new Problem("java.lang", "This compilation unit indirectly references the missing type java.lang.Throwable (typically some required class file is referencing a type outside the classpath)", object)); //$NON-NLS-1$ //$NON-NLS-2$
+		expectingSpecificProblemFor(object, new Problem("java.lang", "This compilation unit indirectly references the missing type java.lang.Throwable (typically some required class file is referencing a type outside the classpath)", object, 1, 2, 3)); //$NON-NLS-1$ //$NON-NLS-2$
 		
 		//----------------------------
 		//           Step 3
@@ -136,8 +137,8 @@ public class IncrementalTests extends Tests {
 			
 
 		incrementalBuild();
-		expectingSpecificProblemFor(object, new Problem("java.lang", "This compilation unit indirectly references the missing type java.lang.RuntimeException (typically some required class file is referencing a type outside the classpath)", object)); //$NON-NLS-1$ //$NON-NLS-2$
-		expectingSpecificProblemFor(throwable, new Problem("java.lang", "This compilation unit indirectly references the missing type java.lang.RuntimeException (typically some required class file is referencing a type outside the classpath)", throwable)); //$NON-NLS-1$ //$NON-NLS-2$
+		expectingSpecificProblemFor(object, new Problem("java.lang", "This compilation unit indirectly references the missing type java.lang.RuntimeException (typically some required class file is referencing a type outside the classpath)", object, 1, 2, 3)); //$NON-NLS-1$ //$NON-NLS-2$
+		expectingSpecificProblemFor(throwable, new Problem("java.lang", "This compilation unit indirectly references the missing type java.lang.RuntimeException (typically some required class file is referencing a type outside the classpath)", throwable, 1, 2, 3)); //$NON-NLS-1$ //$NON-NLS-2$
 	}
 
 	/*
@@ -182,9 +183,9 @@ public class IncrementalTests extends Tests {
 
 		incrementalBuild(projectPath);
 		expectingProblemsFor(new IPath[]{ pathToA, pathToB, pathToC });
-		expectingSpecificProblemFor(pathToA, new Problem("_A", "The public type _A must be defined in its own file", pathToA)); //$NON-NLS-1$ //$NON-NLS-2$
-		expectingSpecificProblemFor(pathToB, new Problem("B", "A cannot be resolved to a type", pathToB)); //$NON-NLS-1$ //$NON-NLS-2$
-		expectingSpecificProblemFor(pathToC, new Problem("C", "The hierarchy of the type C is inconsistent", pathToC)); //$NON-NLS-1$ //$NON-NLS-2$
+		expectingSpecificProblemFor(pathToA, new Problem("_A", "The public type _A must be defined in its own file", pathToA, 25, 27, CategorizedProblem.CAT_TYPE)); //$NON-NLS-1$ //$NON-NLS-2$
+		expectingSpecificProblemFor(pathToB, new Problem("B", "A cannot be resolved to a type", pathToB, 35, 36, CategorizedProblem.CAT_TYPE)); //$NON-NLS-1$ //$NON-NLS-2$
+		expectingSpecificProblemFor(pathToC, new Problem("C", "The hierarchy of the type C is inconsistent", pathToC, 25, 26, CategorizedProblem.CAT_TYPE)); //$NON-NLS-1$ //$NON-NLS-2$
 
 		/* Touch both A and C, removing A main type */
 		pathToA = env.addClass(root, "p", "A", //$NON-NLS-1$ //$NON-NLS-2$
@@ -251,7 +252,7 @@ public class IncrementalTests extends Tests {
 
 		incrementalBuild(projectPath);
 		expectingProblemsFor(new IPath[]{ pathToAB });
-		expectingSpecificProblemFor(pathToAB, new Problem("AB", "AZ cannot be resolved to a type", pathToAB)); //$NON-NLS-1$ //$NON-NLS-2$
+		expectingSpecificProblemFor(pathToAB, new Problem("AB", "AZ cannot be resolved to a type", pathToAB, 36, 38, CategorizedProblem.CAT_TYPE)); //$NON-NLS-1$ //$NON-NLS-2$
 
 		env.addClass(root, "p", "AA", //$NON-NLS-1$ //$NON-NLS-2$
 			"package p;	\n"+ //$NON-NLS-1$
@@ -318,7 +319,7 @@ public class IncrementalTests extends Tests {
 
 		incrementalBuild(projectPath);
 		expectingProblemsFor(new IPath[]{ pathToBB });
-		expectingSpecificProblemFor(pathToBB, new Problem("BB.foo()", "ZA cannot be resolved to a type", pathToBB)); //$NON-NLS-1$ //$NON-NLS-2$
+		expectingSpecificProblemFor(pathToBB, new Problem("BB.foo()", "ZA cannot be resolved to a type", pathToBB, 104, 106, CategorizedProblem.CAT_TYPE)); //$NON-NLS-1$ //$NON-NLS-2$
 
 		env.addClass(root, "p", "ZZ", //$NON-NLS-1$ //$NON-NLS-2$
 			"package p;	\n"+ //$NON-NLS-1$
@@ -412,7 +413,7 @@ public class IncrementalTests extends Tests {
 		expectingOnlySpecificProblemsFor(
 			root, 
 			new Problem[]{ 
-				new Problem("", "The import p.ZA is never used", new Path("/Project/src/p/AB.java")), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
+				new Problem("", "The import p.ZA is never used", new Path("/Project/src/p/AB.java"), 35, 39, CategorizedProblem.CAT_UNNECESSARY_CODE), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
 			});
 
 		/* Move M from AA to ZZ */
@@ -430,7 +431,7 @@ public class IncrementalTests extends Tests {
 		expectingOnlySpecificProblemsFor(
 			root, 
 			new Problem[]{ 
-				new Problem("", "The import p.AZ is never used", new Path("/Project/src/p/AB.java")), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
+				new Problem("", "The import p.AZ is never used", new Path("/Project/src/p/AB.java"), 19, 23, CategorizedProblem.CAT_UNNECESSARY_CODE), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
 			});
 
 		/* Move M from ZZ to AA */
@@ -448,7 +449,7 @@ public class IncrementalTests extends Tests {
 		expectingOnlySpecificProblemsFor(
 			root, 
 			new Problem[]{ 
-				new Problem("", "The import p.ZA is never used", new Path("/Project/src/p/AB.java")), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
+				new Problem("", "The import p.ZA is never used", new Path("/Project/src/p/AB.java"), 35, 39, CategorizedProblem.CAT_UNNECESSARY_CODE), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
 			});
 	}
 
@@ -551,7 +552,7 @@ public class IncrementalTests extends Tests {
 			expectingOnlySpecificProblemsFor(
 				root, 
 				new Problem[]{
-					new Problem("", "The type java.lang.Object cannot have a superclass or superinterfaces", new Path("/Project/src/java/lang/Object.java")), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$				
+					new Problem("", "The type java.lang.Object cannot have a superclass or superinterfaces", new Path("/Project/src/java/lang/Object.java"), 33, 39, CategorizedProblem.CAT_UNSPECIFIED), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$				
 				});
 	
 			env.addClass(root, "p", "X", //$NON-NLS-1$ //$NON-NLS-2$
@@ -563,7 +564,7 @@ public class IncrementalTests extends Tests {
 			expectingOnlySpecificProblemsFor(
 				root, 
 				new Problem[]{
-					new Problem("", "The type java.lang.Object cannot have a superclass or superinterfaces", new Path("/Project/src/java/lang/Object.java")), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$				
+					new Problem("", "The type java.lang.Object cannot have a superclass or superinterfaces", new Path("/Project/src/java/lang/Object.java"), 33, 39, CategorizedProblem.CAT_UNSPECIFIED), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$				
 				});
 
 			env.addClass(root, "p", "Y", //$NON-NLS-1$ //$NON-NLS-2$
@@ -575,7 +576,7 @@ public class IncrementalTests extends Tests {
 			expectingOnlySpecificProblemsFor(
 				root, 
 				new Problem[]{
-					new Problem("", "The type java.lang.Object cannot have a superclass or superinterfaces", new Path("/Project/src/java/lang/Object.java")), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$				
+					new Problem("", "The type java.lang.Object cannot have a superclass or superinterfaces", new Path("/Project/src/java/lang/Object.java"), 33, 39, CategorizedProblem.CAT_UNSPECIFIED), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$				
 				});
 
 		} catch(StackOverflowError e){
