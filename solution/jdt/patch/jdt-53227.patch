diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
index 774f82c..9aab303 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
@@ -55,7 +55,6 @@ public class Parser implements  ParserBasicInformation, TerminalTokens, Compiler
     
 	public static short check_table[] = null;
 	public static final int CurlyBracket = 2;
-	// TODO remove once testing is done
 	private static final boolean DEBUG = false;
 	private static final String EOF_TOKEN = "$eof" ; //$NON-NLS-1$
 	private static final String ERROR_TOKEN = "$error" ; //$NON-NLS-1$
@@ -906,7 +905,7 @@ protected void checkNonNLSAfterBodyEnd(int declarationEnd){
 		}
 	}
 }
-protected void classInstanceCreation(boolean hasClassBody) {
+protected void classInstanceCreation(boolean isQualified) {
 	// ClassInstanceCreationExpression ::= 'new' ClassType '(' ArgumentListopt ')' ClassBodyopt
 
 	// ClassBodyopt produces a null item on the astStak if it produces NO class body
@@ -918,7 +917,7 @@ protected void classInstanceCreation(boolean hasClassBody) {
 		&& (this.astStack[this.astPtr] == null)) {
 		//NO ClassBody
 		this.astPtr--;
-		if (hasClassBody) {
+		if (isQualified) {
 			alloc = new QualifiedAllocationExpression();
 		} else {
 			alloc = new AllocationExpression();
@@ -6654,6 +6653,7 @@ protected void consumeStaticOnly() {
 	jumpOverMethodBody();
 	this.nestedMethod[this.nestedType]++;
 	resetModifiers();
+	this.expressionLengthPtr--; // remove the 0 pushed in consumeToken() for the static modifier
 
 	// recovery
 	if (this.currentElement != null){
