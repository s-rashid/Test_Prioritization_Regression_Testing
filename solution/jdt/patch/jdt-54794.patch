diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTPositionsTest.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTPositionsTest.java
index 66b8fc7..a843e17 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTPositionsTest.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTPositionsTest.java
@@ -63,17 +63,24 @@ public class ASTPositionsTest extends ConverterTestSetup {
     	CompilationUnit compilationUnit = (CompilationUnit) node;
     	assertEquals("Wrong char", 'X', contents.charAt(compilationUnit.getPosition(2, 13)));
     	assertEquals("Wrong char", 'i', contents.charAt(compilationUnit.getPosition(1, 0)));
-    	assertEquals("Wrong position", 0, compilationUnit.getPosition(1, -1));
-    	assertEquals("Wrong position", 0, compilationUnit.getPosition(-1, 0));
-    	assertEquals("Wrong position", 0, compilationUnit.getPosition(5, 0));
-    	assertEquals("Wrong position", 0, compilationUnit.getPosition(4, 1));
+    	assertEquals("Wrong position", -1, compilationUnit.getPosition(1, -1));
+    	assertEquals("Wrong position", -1, compilationUnit.getPosition(-1, 0));
+    	assertEquals("Wrong position", -1, compilationUnit.getPosition(5, 0));
+    	assertEquals("Wrong position", -1, compilationUnit.getPosition(4, 1));
     	assertEquals("Wrong char", '}', contents.charAt(compilationUnit.getPosition(4, 0)));
     	assertEquals("Wrong char", '\r', contents.charAt(compilationUnit.getPosition(1, 21)));
     	
-    	for (int i = 0, max = contents.length(); i < max; i++) {
-    		final int lineNumber = compilationUnit.lineNumber(i);
-    		final int columnNumber = compilationUnit.columnNumber(i);
+    	sanityCheck(contents, compilationUnit);
+	}
+
+	private void sanityCheck(final String contents, CompilationUnit compilationUnit) {
+		for (int i = 0, max = contents.length(); i < max; i++) {
+    		final int lineNumber = compilationUnit.getLineNumber(i);
+    		assertTrue("Wrong value for char at " + i, lineNumber >= 1);
+    		final int columnNumber = compilationUnit.getColumnNumber(i);
+    		assertTrue("Wrong value for char at " + i, columnNumber >= 0);
     		final int position = compilationUnit.getPosition(lineNumber, columnNumber);
+    		assertTrue("Wrong value for char at i", position >= 0);
     		if (position == 0) {
     			assertEquals("Only true for first character", 0, i);
     		}
@@ -94,15 +101,7 @@ public class ASTPositionsTest extends ConverterTestSetup {
     			false);
     	assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
     	CompilationUnit compilationUnit = (CompilationUnit) node;
-    	for (int i = 0, max = contents.length(); i < max; i++) {
-    		final int lineNumber = compilationUnit.lineNumber(i);
-    		final int columnNumber = compilationUnit.columnNumber(i);
-    		final int position = compilationUnit.getPosition(lineNumber, columnNumber);
-    		if (position == 0) {
-    			assertEquals("Only true for first character", 0, i);
-    		}
-			assertEquals("Wrong char", contents.charAt(i), contents.charAt(position));
-    	}
+    	sanityCheck(contents, compilationUnit);
 	}
 	
 	public void test003() throws JavaModelException {
@@ -118,14 +117,6 @@ public class ASTPositionsTest extends ConverterTestSetup {
     			false);
     	assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
     	CompilationUnit compilationUnit = (CompilationUnit) node;
-    	for (int i = 0, max = contents.length(); i < max; i++) {
-    		final int lineNumber = compilationUnit.lineNumber(i);
-    		final int columnNumber = compilationUnit.columnNumber(i);
-    		final int position = compilationUnit.getPosition(lineNumber, columnNumber);
-    		if (position == 0) {
-    			assertEquals("Only true for first character", 0, i);
-    		}
-			assertEquals("Wrong char", contents.charAt(i), contents.charAt(position));
-    	}
+    	sanityCheck(contents, compilationUnit);
 	}
 }
\ No newline at end of file
