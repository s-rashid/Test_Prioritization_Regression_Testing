diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/OR_OR_Expression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/OR_OR_Expression.java
index 657af40..234817c 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/OR_OR_Expression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/OR_OR_Expression.java
@@ -101,7 +101,7 @@ public class OR_OR_Expression extends BinaryExpression {
 			return;
 		}
 		
-		Label trueLabel = new Label(codeStream), endLabel;
+		BranchLabel trueLabel = new BranchLabel(codeStream), endLabel;
 		cst = left.optimizedBooleanConstant();
 		boolean leftIsConst = cst != Constant.NotAConstant;
 		boolean leftIsTrue = leftIsConst && cst.booleanValue() == true;
@@ -155,7 +155,7 @@ public class OR_OR_Expression extends BinaryExpression {
 						trueLabel.place();
 						codeStream.iconst_1();
 					} else {
-						codeStream.goto_(endLabel = new Label(codeStream));
+						codeStream.goto_(endLabel = new BranchLabel(codeStream));
 						codeStream.decrStackSize(1);
 						trueLabel.place();
 						codeStream.iconst_1();
@@ -175,7 +175,7 @@ public class OR_OR_Expression extends BinaryExpression {
 	/**
 	 * Boolean operator code generation Optimized operations are: ||
 	 */
-	public void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired) {
+	public void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired) {
 
 		if (constant != Constant.NotAConstant) {
 			super.generateOptimizedBoolean(currentScope, codeStream, trueLabel, falseLabel, valueRequired);
@@ -227,7 +227,7 @@ public class OR_OR_Expression extends BinaryExpression {
 			} else {
 				// implicit falling through the TRUE case
 				if (trueLabel == null) {
-					Label internalTrueLabel = new Label(codeStream);
+					BranchLabel internalTrueLabel = new BranchLabel(codeStream);
 					left.generateOptimizedBoolean(currentScope, codeStream, internalTrueLabel, null, !leftIsConst); 
 					// need value, e.g. if (a == 1 || ((b = 2) > 0)) {} -> shouldn't initialize 'b' if a==1
 					if (leftIsConst && leftIsTrue) {
