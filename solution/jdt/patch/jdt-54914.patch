diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTestAST3_2.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTestAST3_2.java
index 70cb465..c4f79ad 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTestAST3_2.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTestAST3_2.java
@@ -106,7 +106,7 @@ public class ASTConverterTestAST3_2 extends ConverterTestSetup {
 
 	static {
 //		TESTS_NAMES = new String[] {"test0602"};
-//		TESTS_NUMBERS =  new int[] { 620 };
+//		TESTS_NUMBERS =  new int[] { 623 };
 	}
 	public static Test suite() {
 		return buildTestSuite(ASTConverterTestAST3_2.class);
@@ -6964,4 +6964,57 @@ public class ASTConverterTestAST3_2 extends ConverterTestSetup {
 				workingCopy.discardWorkingCopy();
 		}
 	}
+	
+	/**
+	 * http://dev.eclipse.org/bugs/show_bug.cgi?id=116573
+	 */
+	public void _test0623() throws JavaModelException {
+		ICompilationUnit workingCopy = null;
+		try {
+			String contents =
+				"class X {\n" + 
+				"        X(boolean x, String y, String z) {}\n" + 
+				"        X(int x, String y) {}\n" + 
+				"        X(String x) {\n" + 
+				"                this(first, second);\n" + 
+				"        }\n" + 
+				"        void test() {\n" + 
+				"                new X(first, second);\n" + 
+				"        }\n" + 
+				"        class Z extends X {\n" + 
+				"                public Z() {\n" + 
+				"                        super(first, second);\n" + 
+				"                }\n" + 
+				"        }\n" + 
+				"}";
+			workingCopy = getWorkingCopy("/Converter/src/X.java", true/*resolve*/);
+			ASTNode node = buildAST(
+				contents,
+				workingCopy,
+				false);
+			assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
+			CompilationUnit unit = (CompilationUnit) node;
+			String expectedOutput =
+				"first cannot be resolved\n" + 
+				"second cannot be resolved\n" + 
+				"first cannot be resolved\n" + 
+				"second cannot be resolved\n" + 
+				"first cannot be resolved\n" + 
+				"second cannot be resolved";
+			assertProblemsSize(unit, 6, expectedOutput);
+			unit.accept(new ASTVisitor() {
+				public boolean visit(ConstructorInvocation constructorInvocation) {
+					assertNotNull("No binding", constructorInvocation.resolveConstructorBinding());
+					return false;
+				}
+				public boolean visit(ClassInstanceCreation classInstanceCreation) {
+					assertNotNull("No binding", classInstanceCreation.resolveConstructorBinding());
+					return false;
+				}
+			});
+		} finally {
+			if (workingCopy != null)
+				workingCopy.discardWorkingCopy();
+		}
+	}
 }
