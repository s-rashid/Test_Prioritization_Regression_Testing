diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MultiTypeDeclarationPattern.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MultiTypeDeclarationPattern.java
index 545e07a..36938f7 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MultiTypeDeclarationPattern.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MultiTypeDeclarationPattern.java
@@ -49,7 +49,7 @@ public MultiTypeDeclarationPattern(
 	}
 	if (simpleNames == null) {
 		this.simpleNames = CharOperation.NO_CHAR_CHAR;
-	} else if (isCaseSensitive()) {
+	} else if ((isCaseSensitive() || isCamelCase()) ) {
 		this.simpleNames = simpleNames;
 	} else {
 		int length = simpleNames.length;
@@ -155,13 +155,19 @@ EntryResult[] queryIn(Index index) throws IOException {
 				// do a prefix query with the simpleName
 				break;
 			case R_EXACT_MATCH :
-				matchRule = matchRule - R_EXACT_MATCH + R_PREFIX_MATCH;
-				key = CharOperation.append(key, SEPARATOR);
-				break; // do a prefix query with the simpleName
+				if (!this.isCamelCase) {
+					// do a prefix query with the simpleName
+					matchRule = matchRule - R_EXACT_MATCH + R_PREFIX_MATCH;
+					key = CharOperation.append(key, SEPARATOR);
+				}
+				break;
 			case R_PATTERN_MATCH :
 				if (key[key.length - 1] != '*')
 					key = CharOperation.concat(key, ONE_STAR, SEPARATOR);
 				break;
+			case R_REGEXP_MATCH :
+				// TODO (frederic) implement regular expression match
+				break;
 		}
 
 		EntryResult[] entries = index.query(getIndexCategories(), key, matchRule); // match rule is irrelevant when the key is null
