diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java
index e60fcae..66e852b 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java
@@ -289,14 +289,11 @@ public static final boolean camelCaseMatch(char[] pattern, int patternStart, int
 	nextPatternChar: while (iPattern < patternEnd) {
 		// check patternChar, keep camelCasing only if uppercase
 		if ((patternChar = pattern[iPattern]) < ScannerHelper.MAX_OBVIOUS) {
-			switch (ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[patternChar]) {
-				case ScannerHelper.C_UPPER_LETTER :
-					// still uppercase
-					break;
-				default:
-					// end of camelCase part of pattern
-					break nextPatternChar;
+			if (ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[patternChar] != ScannerHelper.C_UPPER_LETTER) {
+				// end of camelCase part of pattern
+				break nextPatternChar;
 			}
+			// still uppercase
 		} else if (Character.isJavaIdentifierPart(patternChar) 
 						&& !Character.isUpperCase(patternChar)) {
 			// end of camelCase part of pattern
@@ -305,7 +302,7 @@ public static final boolean camelCaseMatch(char[] pattern, int patternStart, int
 		nextNameChar: while (iName < nameEnd) {
 			if ((nameChar = name[iName]) != patternChar) {
 				if (nameChar < ScannerHelper.MAX_OBVIOUS) {
-					if ((ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[nameChar] & ScannerHelper.C_LOWER_LETTER|ScannerHelper.C_IDENT_PART|ScannerHelper.C_DIGIT) != 0) {
+					if ((ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[nameChar] & (ScannerHelper.C_LOWER_LETTER|ScannerHelper.C_IDENT_PART|ScannerHelper.C_DIGIT)) != 0) {
 						// lowercase/digit char is ignored
 						iName++;
 						continue nextNameChar;
