diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AND_AND_Expression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AND_AND_Expression.java
index 33c14ce..de883d6 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AND_AND_Expression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AND_AND_Expression.java
@@ -98,7 +98,7 @@ public class AND_AND_Expression extends BinaryExpression {
 			return;
 		}
 		
-		Label falseLabel = new Label(codeStream), endLabel;
+		BranchLabel falseLabel = new BranchLabel(codeStream), endLabel;
 		cst = left.optimizedBooleanConstant();
 		boolean leftIsConst = cst != Constant.NotAConstant;
 		boolean leftIsTrue = leftIsConst && cst.booleanValue() == true;
@@ -152,7 +152,7 @@ public class AND_AND_Expression extends BinaryExpression {
 						falseLabel.place();
 						codeStream.iconst_0();
 					} else {
-						codeStream.goto_(endLabel = new Label(codeStream));
+						codeStream.goto_(endLabel = new BranchLabel(codeStream));
 						codeStream.decrStackSize(1);
 						falseLabel.place();
 						codeStream.iconst_0();
@@ -173,7 +173,7 @@ public class AND_AND_Expression extends BinaryExpression {
 	 * Boolean operator code generation Optimized operations are: &&
 	 */
 	public void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream,
-			Label trueLabel, Label falseLabel, boolean valueRequired) {
+			BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired) {
 
 		if (constant != Constant.NotAConstant) {
 			super.generateOptimizedBoolean(currentScope, codeStream, trueLabel, falseLabel,
@@ -205,7 +205,7 @@ public class AND_AND_Expression extends BinaryExpression {
 			if (falseLabel == null) {
 				if (trueLabel != null) {
 					// implicit falling through the FALSE case
-					Label internalFalseLabel = new Label(codeStream);
+					BranchLabel internalFalseLabel = new BranchLabel(codeStream);
 					left.generateOptimizedBoolean(currentScope, codeStream, null,
 							internalFalseLabel, !leftIsConst); 
 					// need value, e.g. if (a == 1 && ((b = 2) > 0)) {} -> shouldn't initialize 'b' if a!=1
