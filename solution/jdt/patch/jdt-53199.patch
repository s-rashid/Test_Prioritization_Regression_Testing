diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDelta.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDelta.java
index 401810c..d228b1a 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDelta.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDelta.java
@@ -23,8 +23,8 @@ public class JavaElementDelta extends SimpleDelta implements IJavaElementDelta {
 	/**
 	 * @see #getAffectedChildren()
 	 */
-	protected IJavaElementDelta[] fAffectedChildren = fgEmptyDelta;
-
+	protected IJavaElementDelta[] affectedChildren = EMPTY_DELTA;
+	
 	/*
 	 * The element that this delta describes the change to.
 	 */
@@ -42,15 +42,15 @@ public class JavaElementDelta extends SimpleDelta implements IJavaElementDelta {
 	/**
 	 * @see #getMovedFromElement()
 	 */
-	protected IJavaElement fMovedFromHandle = null;
+	protected IJavaElement movedFromHandle = null;
 	/**
 	 * @see #getMovedToElement()
 	 */
-	protected IJavaElement fMovedToHandle = null;
+	protected IJavaElement movedToHandle = null;
 	/**
 	 * Empty array of IJavaElementDelta
 	 */
-	protected static  IJavaElementDelta[] fgEmptyDelta= new IJavaElementDelta[] {};
+	protected static  IJavaElementDelta[] EMPTY_DELTA= new IJavaElementDelta[] {};
 /**
  * Creates the root delta. To create the nested delta
  * hierarchies use the following convenience methods. The root
@@ -91,23 +91,23 @@ protected void addAffectedChild(JavaElementDelta child) {
 		this.fineGrained();
 	}
 	
-	if (fAffectedChildren.length == 0) {
-		fAffectedChildren = new IJavaElementDelta[] {child};
+	if (this.affectedChildren.length == 0) {
+		this.affectedChildren = new IJavaElementDelta[] {child};
 		return;
 	}
 	JavaElementDelta existingChild = null;
 	int existingChildIndex = -1;
-	if (fAffectedChildren != null) {
-		for (int i = 0; i < fAffectedChildren.length; i++) {
-			if (this.equalsAndSameParent(fAffectedChildren[i].getElement(), child.getElement())) { // handle case of two jars that can be equals but not in the same project
-				existingChild = (JavaElementDelta)fAffectedChildren[i];
+	if (this.affectedChildren != null) {
+		for (int i = 0; i < this.affectedChildren.length; i++) {
+			if (this.equalsAndSameParent(this.affectedChildren[i].getElement(), child.getElement())) { // handle case of two jars that can be equals but not in the same project
+				existingChild = (JavaElementDelta)this.affectedChildren[i];
 				existingChildIndex = i;
 				break;
 			}
 		}
 	}
 	if (existingChild == null) { //new affected child
-		fAffectedChildren= growAndAddToArray(fAffectedChildren, child);
+		this.affectedChildren= growAndAddToArray(this.affectedChildren, child);
 	} else {
 		switch (existingChild.getKind()) {
 			case ADDED:
@@ -116,7 +116,7 @@ protected void addAffectedChild(JavaElementDelta child) {
 					case CHANGED: // child was added then changed -> it is added
 						return;
 					case REMOVED: // child was added then removed -> noop
-						fAffectedChildren = this.removeAndShrinkArray(fAffectedChildren, existingChildIndex);
+						this.affectedChildren = this.removeAndShrinkArray(this.affectedChildren, existingChildIndex);
 						return;
 				}
 				break;
@@ -124,7 +124,7 @@ protected void addAffectedChild(JavaElementDelta child) {
 				switch (child.getKind()) {
 					case ADDED: // child was removed then added -> it is changed
 						child.kind = CHANGED;
-						fAffectedChildren[existingChildIndex] = child;
+						this.affectedChildren[existingChildIndex] = child;
 						return;
 					case CHANGED: // child was removed then changed -> it is removed
 					case REMOVED: // child was removed then removed -> it is removed
@@ -135,7 +135,7 @@ protected void addAffectedChild(JavaElementDelta child) {
 				switch (child.getKind()) {
 					case ADDED: // child was changed then added -> it is added
 					case REMOVED: // child was changed then removed -> it is removed
-						fAffectedChildren[existingChildIndex] = child;
+						this.affectedChildren[existingChildIndex] = child;
 						return;
 					case CHANGED: // child was changed then changed -> it is changed
 						IJavaElementDelta[] children = child.getAffectedChildren();
@@ -170,7 +170,7 @@ protected void addAffectedChild(JavaElementDelta child) {
 			default: 
 				// unknown -> existing child becomes the child with the existing child's flags
 				int flags = existingChild.getFlags();
-				fAffectedChildren[existingChildIndex] = child;
+				this.affectedChildren[existingChildIndex] = child;
 				child.changeFlags |= flags;
 		}
 	}
@@ -257,8 +257,8 @@ protected JavaElementDelta createDeltaTree(IJavaElement element, JavaElementDelt
 			// the element being changed is the root element
 			this.kind= delta.kind;
 			this.changeFlags = delta.changeFlags;
-			fMovedToHandle = delta.fMovedToHandle;
-			fMovedFromHandle = delta.fMovedFromHandle;
+			this.movedToHandle = delta.movedToHandle;
+			this.movedFromHandle = delta.movedFromHandle;
 		}
 	} else {
 		for (int i = 0, size = ancestors.size(); i < size; i++) {
@@ -285,8 +285,8 @@ protected JavaElementDelta find(IJavaElement e) {
 	if (this.equalsAndSameParent(this.changedElement, e)) { // handle case of two jars that can be equals but not in the same project
 		return this;
 	} else {
-		for (int i = 0; i < fAffectedChildren.length; i++) {
-			JavaElementDelta delta = ((JavaElementDelta)fAffectedChildren[i]).find(e);
+		for (int i = 0; i < this.affectedChildren.length; i++) {
+			JavaElementDelta delta = ((JavaElementDelta)this.affectedChildren[i]).find(e);
 			if (delta != null) {
 				return delta;
 			}
@@ -310,7 +310,7 @@ public IJavaElementDelta[] getAddedChildren() {
  * @see IJavaElementDelta
  */
 public IJavaElementDelta[] getAffectedChildren() {
-	return fAffectedChildren;
+	return this.affectedChildren;
 }
 /**
  * Returns a collection of all the parents of this element up to (but
@@ -344,14 +344,14 @@ public IJavaElementDelta[] getChangedChildren() {
  * @see IJavaElementDelta
  */
 protected IJavaElementDelta[] getChildrenOfType(int type) {
-	int length = fAffectedChildren.length;
+	int length = this.affectedChildren.length;
 	if (length == 0) {
 		return new IJavaElementDelta[] {};
 	}
 	ArrayList children= new ArrayList(length);
 	for (int i = 0; i < length; i++) {
-		if (fAffectedChildren[i].getKind() == type) {
-			children.add(fAffectedChildren[i]);
+		if (this.affectedChildren[i].getKind() == type) {
+			children.add(this.affectedChildren[i]);
 		}
 	}
 
@@ -367,11 +367,11 @@ protected IJavaElementDelta[] getChildrenOfType(int type) {
 protected JavaElementDelta getDeltaFor(IJavaElement element) {
 	if (this.equalsAndSameParent(getElement(), element)) // handle case of two jars that can be equals but not in the same project
 		return this;
-	if (fAffectedChildren.length == 0)
+	if (this.affectedChildren.length == 0)
 		return null;
-	int childrenCount = fAffectedChildren.length;
+	int childrenCount = this.affectedChildren.length;
 	for (int i = 0; i < childrenCount; i++) {
-		JavaElementDelta delta = (JavaElementDelta)fAffectedChildren[i];
+		JavaElementDelta delta = (JavaElementDelta)this.affectedChildren[i];
 		if (this.equalsAndSameParent(delta.getElement(), element)) { // handle case of two jars that can be equals but not in the same project
 			return delta;
 		} else {
@@ -392,13 +392,13 @@ public IJavaElement getElement() {
  * @see IJavaElementDelta
  */
 public IJavaElement getMovedFromElement() {
-	return fMovedFromHandle;
+	return this.movedFromHandle;
 }
 /**
  * @see IJavaElementDelta
  */
 public IJavaElement getMovedToElement() {
-	return fMovedToHandle;
+	return movedToHandle;
 }
 /**
  * @see IJavaElementDelta
@@ -447,7 +447,7 @@ public void movedFrom(IJavaElement movedFromElement, IJavaElement movedToElement
 	JavaElementDelta removedDelta = new JavaElementDelta(movedFromElement);
 	removedDelta.kind = REMOVED;
 	removedDelta.changeFlags |= F_MOVED_TO;
-	removedDelta.fMovedToHandle = movedToElement;
+	removedDelta.movedToHandle = movedToElement;
 	insertDeltaTree(movedFromElement, removedDelta);
 }
 /**
@@ -460,7 +460,7 @@ public void movedTo(IJavaElement movedToElement, IJavaElement movedFromElement)
 	JavaElementDelta addedDelta = new JavaElementDelta(movedToElement);
 	addedDelta.kind = ADDED;
 	addedDelta.changeFlags |= F_MOVED_FROM;
-	addedDelta.fMovedFromHandle = movedFromElement;
+	addedDelta.movedFromHandle = movedFromElement;
 	insertDeltaTree(movedToElement, addedDelta);
 }
 /**
@@ -476,16 +476,16 @@ public void opened(IJavaElement element) {
  */
 protected void removeAffectedChild(JavaElementDelta child) {
 	int index = -1;
-	if (fAffectedChildren != null) {
-		for (int i = 0; i < fAffectedChildren.length; i++) {
-			if (this.equalsAndSameParent(fAffectedChildren[i].getElement(), child.getElement())) { // handle case of two jars that can be equals but not in the same project
+	if (this.affectedChildren != null) {
+		for (int i = 0; i < this.affectedChildren.length; i++) {
+			if (this.equalsAndSameParent(this.affectedChildren[i].getElement(), child.getElement())) { // handle case of two jars that can be equals but not in the same project
 				index = i;
 				break;
 			}
 		}
 	}
 	if (index >= 0) {
-		fAffectedChildren= removeAndShrinkArray(fAffectedChildren, index);
+		this.affectedChildren= removeAndShrinkArray(this.affectedChildren, index);
 	}
 }
 /**
@@ -517,7 +517,7 @@ public void removed(IJavaElement element, int flags) {
 	if (actualDelta != null) {
 		actualDelta.removed();
 		actualDelta.changeFlags |= flags;
-		actualDelta.fAffectedChildren = fgEmptyDelta;
+		actualDelta.affectedChildren = EMPTY_DELTA;
 	}
 }
 /**
