diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
index b87bc35..9569583 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
@@ -395,7 +395,6 @@ public ReferenceBinding convertToParameterizedType(ReferenceBinding originalType
 }
 
 public TypeBinding convertToRawType(TypeBinding type) {
-
 	int dimension;
 	TypeBinding originalType;
 	switch(type.kind()) {
@@ -439,10 +438,7 @@ public TypeBinding convertToRawType(TypeBinding type) {
 		} else if (needToConvert || ((ReferenceBinding)originalType).isStatic()) {
 			convertedEnclosing = (ReferenceBinding) convertToRawType(originalEnclosing);
 		} else {
-//		} else if (originalEnclosing instanceof SourceTypeBinding){
 			convertedEnclosing = convertToParameterizedType(originalEnclosing);
-//		} else {
-//			convertedEnclosing = originalEnclosing;
 		}
 		ReferenceBinding originalGeneric = (ReferenceBinding) originalType.erasure();
 		if (needToConvert) {
@@ -459,6 +455,58 @@ public TypeBinding convertToRawType(TypeBinding type) {
 	return type;
 }
 
+// variation for unresolved types in binaries (consider generic type as raw)
+public TypeBinding convertUnresolvedBinaryToRawType(TypeBinding type) {
+	int dimension;
+	TypeBinding originalType;
+	switch(type.kind()) {
+		case Binding.BASE_TYPE :
+		case Binding.TYPE_PARAMETER:
+		case Binding.WILDCARD_TYPE:
+		case Binding.RAW_TYPE:
+			return type;
+		case Binding.ARRAY_TYPE:
+			dimension = type.dimensions();
+			originalType = type.leafComponentType();
+			break;
+		default:
+			dimension = 0;
+			originalType = type;
+	}
+	boolean needToConvert;
+	switch (originalType.kind()) {
+		case Binding.BASE_TYPE :
+			return type;
+		case Binding.GENERIC_TYPE :
+			needToConvert = true;
+			break;
+		case Binding.PARAMETERIZED_TYPE :
+			ParameterizedTypeBinding paramType = (ParameterizedTypeBinding) originalType;
+			needToConvert = paramType.type.isGenericType(); // only recursive call to enclosing type can find parameterizedType with arguments
+			break;
+		default :
+			needToConvert = false;
+			break;
+	}
+	ReferenceBinding originalEnclosing = originalType.enclosingType();
+	TypeBinding convertedType;
+	if (originalEnclosing == null) {
+		convertedType = needToConvert ? createRawType((ReferenceBinding)originalType.erasure(), null) : originalType;
+	} else {
+		ReferenceBinding convertedEnclosing = (ReferenceBinding) convertUnresolvedBinaryToRawType(originalEnclosing);
+		ReferenceBinding originalGeneric = (ReferenceBinding) originalType.erasure();
+		if (needToConvert || originalEnclosing != convertedEnclosing) {
+			convertedType = createRawType(originalGeneric, convertedEnclosing);
+		} else {
+			convertedType = originalType;
+		}
+	}
+	if (originalType != convertedType) {
+		return dimension > 0 ? (TypeBinding)createArrayType(convertedType, dimension) : convertedType;
+	}
+	return type;
+}
+
 /* Used to guarantee array type identity.
 */
 public ArrayBinding createArrayType(TypeBinding leafComponentType, int dimensionCount) {
