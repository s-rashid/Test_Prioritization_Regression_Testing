diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedSourceFolderManager.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedSourceFolderManager.java
index 7d728a1..142a577 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedSourceFolderManager.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedSourceFolderManager.java
@@ -11,20 +11,15 @@
 
 package org.eclipse.jdt.apt.core.internal.generatedfile;
 
-import org.eclipse.core.resources.IContainer;
 import org.eclipse.core.resources.IFolder;
 import org.eclipse.core.resources.IResource;
-import org.eclipse.core.resources.IWorkspace;
-import org.eclipse.core.resources.IWorkspaceRunnable;
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IPath;
-import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.core.runtime.OperationCanceledException;
+import org.eclipse.core.runtime.IStatus;
 import org.eclipse.jdt.apt.core.AptPlugin;
 import org.eclipse.jdt.apt.core.internal.AptProject;
 import org.eclipse.jdt.apt.core.internal.util.FileSystemUtil;
 import org.eclipse.jdt.apt.core.util.AptConfig;
-import org.eclipse.jdt.apt.core.util.AptPreferenceConstants;
 import org.eclipse.jdt.core.IClasspathEntry;
 import org.eclipse.jdt.core.IJavaProject;
 import org.eclipse.jdt.core.JavaModelException;
@@ -47,7 +42,7 @@ import org.eclipse.jdt.core.JavaModelException;
  * </ul>
  * We attempt to change the classpath entry and the folder on disk whenever
  * the enabled/disabled state or the folder name change.  These changes are
- * discovered via the handlePreferenceChange() method. 
+ * discovered via the preferenceChanged() method. 
  * <p>
  * GeneratedSourceFolderManager is responsible only for the folder itself, not
  * its contents.  Contents are managed by @see GeneratedFileManager.
@@ -58,21 +53,26 @@ public class GeneratedSourceFolderManager {
 	private final AptProject _aptProject;
 
 	/**
-	 * The folder where generated source files are placed.  This will be null until
-	 * the folder is actually created and the project's source path is updated to 
-	 * include the folder.  It will also be null if there was an error creating the
-	 * folder.
+	 * The folder where generated source files are placed.  This will be
+	 * null if APT is disabled, or in any other error state (e.g., folder
+	 * does not exist on disk; folder exists on disk but classpath entry
+	 * does not exist).
+	 * <p>
+	 * In general, if we see that this member is null but the ENABLED
+	 * preference is true, we will try to create the folder and add it to
+	 * the classpath; if we see that this member is non-null but the
+	 * ENABLED preference is false, we will try to delete this folder's
+	 * contents and remove it from the classpath; and if we see that the
+	 * ENABLED preference is true, but the GENSRCDIR folder name preference
+	 * is different than the name of this folder, we will try to delete
+	 * this folder's contents, remove it from the classpath, and create a
+	 * new folder and add it to the classpath.  When we do this work depends
+	 * on when we get notified of relevant changes and on what locks we are
+	 * able to obtain.
 	 */
 	private IFolder _generatedSourceFolder = null;
 	
 	/**
-	 * The name of the generated source folder, relative to the project.  This
-	 * will be identical to the value of the APT_GENSRCDIR preference, except when 
-	 * the preference has changed and this object has not yet been informed.
-	 */
-	private String _generatedSourceFolderName = null;
-	
-	/**
 	 * Should be constructed only by AptProject.  Other clients should call
 	 * @see AptProject#getGeneratedSourceFolderManager() to get this object.
 	 */
@@ -81,244 +81,219 @@ public class GeneratedSourceFolderManager {
 		_aptProject = aptProject;
 		final IJavaProject javaProject = aptProject.getJavaProject();
 		
-		// get generated source dir from config 
-		// default value is set in org.eclipse.jdt.apt.core.internal.util.AptCorePreferenceInitializer
-		_generatedSourceFolderName = AptConfig.getString( javaProject, AptPreferenceConstants.APT_GENSRCDIR);
-		// properly initialize the GeneratedFileManager if project path is up-to-date and the generated 
-		// source folder is there.
-		final IFolder folder = getFolder();
-		if(folder.exists()){
-			boolean uptodate = false;
-			try{
-				uptodate = ClasspathUtil.isProjectClassPathUpToDate(javaProject, null, folder.getFullPath(), null);
-			}catch(JavaModelException e){
-				e.printStackTrace();
+		// Set _generatedSourceFolder only if APT is enabled, the folder exists,
+		// and the folder is on the classpath.  
+		// Otherwise leave it null, which will cause us to try to fix things later on.
+		if (AptConfig.isEnabled(javaProject)) {
+			final IFolder folder = getFolder();
+			if (folder.exists()) {
+				if (isOnClasspath(folder)) {
+					_generatedSourceFolder = folder;
+				}
 			}
-			if( uptodate )
-				_generatedSourceFolder = folder;
-		}	
+		}
 	}
 	
 	/**
-	 * Sets the name of the generated soruce folder.  The source folder will not be created 
-	 * and will not be added to the project's source paths.  If there is an existing source
-	 * folder, it will be deleted.
-	 * To properly have the new generated source folder configured, call #ensureGeneratedSourceFolder(). 
-	 * 
-	 * @param newValue The string name of the new generated source folder.  This should be relative 
-	 * to the project root.  Absolute paths are not supported.  The specified string should be 
-	 * a valid folder name for the file system, and should not be an existing source folder for the 
-	 * project.  
-	 * 
-	 * @see #getFolder()
-	 * @see #getFolderName()
+	 * Add the folder to the classpath, unless it's already there.
+	 * @param srcFolder the folder to add to the classpath.  Must not be null.
+	 * @return true if, at the end of the routine, the folder is on the classpath.
 	 */
-	private void configure( String newValue, String oldValue ) 
-	{
-		
-		// bail if they specify null, empty-string or don't change the name of the source folder
-		if ( newValue == null || 
-			 newValue.length() == 0 || 
-			 newValue.equals(oldValue) )
-			return;
-		
-		_aptProject.projectClean( true );
-
-		IFolder srcFolder = null;
-		synchronized ( this )
-		{
-			_generatedSourceFolderName = newValue;
-			srcFolder = _generatedSourceFolder;
+	private boolean addToClasspath(IFolder srcFolder) {
+		boolean onClasspath = false;
+		try {
+			ClasspathUtil.updateProjectClasspath( _aptProject.getJavaProject(), srcFolder, null );
+			if(AptPlugin.DEBUG)
+				AptPlugin.trace("Ensured classpath has an entry for " + srcFolder); //$NON-NLS-1$
+			onClasspath = true;
 		}
-		
-		// if the preference change occur before we actually
-		// initialized the _generatedSourceFolder. 
-		// This may happen when the pre-processor resource change event occurs after
-		// the preference change event.
-		if( oldValue != null && srcFolder == null ){
-			srcFolder = _aptProject.getJavaProject().getProject().getFolder( oldValue );
+		catch (CoreException e) {						
+			e.printStackTrace();
+			AptPlugin.log(e, "Failed to add classpath entry for generated source folder " + srcFolder.getName()); //$NON-NLS-1$
 		}
-		
-		resetGeneratedSrcFolder(srcFolder, true);		
+		return onClasspath;
 	}
 	
 	/**
-	 * Creates the generated source folder if it doesn't exist. 
-	 * No changes to the classpath will be made.
+	 * Call this to create the folder and add it to the classpath, when APT is enabled
+	 * (in which case the folder did not previously exist) or when the folder name is
+	 * changed (in which case the old stuff must also be removed).  
+	 * <p>
+	 * This method will take a resource lock if the generated source folder needs 
+	 * to be created on disk, and it will take a java model lock if the project's 
+	 * source paths need to be updated.  Care should be taken when calling this 
+	 * method to ensure that locking behavior is correct.
+	 * <p>
+ 	 * This should only be called on an event thread, with no locks on the project
+	 * or classpath.
 	 */
-	public void createGeneratedSourceFolder(){
-		IFolder srcFolder = getFolder();
-		// This most likely means the preference change event hasn't occured yet
-		// and we don't know about the name of the generated source directory.
-		if( srcFolder == null )
+	private void configure() {
+		
+		assert(_generatedSourceFolder == null): "Should have already removed old folder by now"; //$NON-NLS-1$
+		IFolder srcFolder = getFolderPreference();
+		if (srcFolder == null) {
+			IStatus status = AptPlugin.createStatus(null, "Could not create generated source folder (" + //$NON-NLS-1$
+					AptConfig.getGenSrcDir(_aptProject.getJavaProject()) + ")"); //$NON-NLS-1$
+			AptPlugin.log(status);
 			return;
-		try{
-			srcFolder.refreshLocal( IResource.DEPTH_INFINITE, null );
-			if (!srcFolder.exists()) {
-				if( AptPlugin.DEBUG )
-					AptPlugin.trace("creating " + srcFolder.getProjectRelativePath()); //$NON-NLS-1$
-					
-				FileSystemUtil.makeDerivedParentFolders(srcFolder);
-			}
-		}
-		catch(CoreException ce){
-			AptPlugin.log(ce, "Failure during refreshLocal on " + srcFolder.getProjectRelativePath()); //$NON-NLS-1$
 		}
-		synchronized (this) {
-			_generatedSourceFolder = srcFolder;
+		
+		// Ensure that the new folder exists on disk.
+		if (createOnDisk(srcFolder)) {
+			// Add it to the classpath.
+			if (addToClasspath(srcFolder)) {
+				// Only if we get this far do we actually set _generatedSourceFolder.
+				synchronized ( this ) {
+					_generatedSourceFolder = srcFolder;
+				}
+			}
 		}
 	}
 	
+	
 	/**
-	 *  Creates the generated source folder if it doesn't exist, and adds it as a source path
-	 *  to the project.  To access the generated source folder, but not have it be created
-	 *  or added as a source path, use getGeneratedSourceFolder().  Note that this method 
-	 *  will take a resource lock if the generated source folder needs to be created on disk, 
-	 *  and it will take a java model lock if the project's source paths need to be updated.
-	 *  Care should be taken when calling this method to ensure that locking behavior is correct.    
-	 *  
-	 *  @return <code>true</code> iff the any resource or classpath has been modified. 
-	 *  return <code>false</code> otherwise.
-	 *  
-	 *  @see #getFolder()
-	 *  @see #isGeneratedSourceFolderConfigured()
+	 * Creates the generated source folder if necessary.  This should be called just
+	 * before doing a build.
+	 * No changes to the classpath will be made.
 	 */
-	private boolean ensureGeneratedSourceFolder(){
+	public void ensureFolderExists(){
+		// If APT is disabled, do nothing.
+		if (!AptConfig.isEnabled(_aptProject.getJavaProject())) {
+			return;
+		}
 		
-		boolean reset = false;
-		IFolder curSrcFolder = null;
-	
-		// Determine current state of affairs, with respect to
-		// folder, folder name, and classpath.
-		synchronized( this )
-		{
-			if( _generatedSourceFolder != null ){
-				final IPath srcFolderPath = _generatedSourceFolder.getProjectRelativePath();
-				
-				if( !_generatedSourceFolderName.equals( srcFolderPath.toString()) ){
-					// Folder name has been changed!  Save the current folder so we can clear it out later.
-					reset = true;
-					curSrcFolder = _generatedSourceFolder;
-					_generatedSourceFolder = null;
-				}
-				else {
-					// Folder name and folder are in sync.  Check that folder is on classpath.
-					
-					// If the folder doesn't exist on disk, there is no point examining the classpath.
-					try{
-						_generatedSourceFolder.refreshLocal( IResource.DEPTH_INFINITE, null );
-					}
-					catch(CoreException ce){
-						AptPlugin.log(ce, "Failure during refreshLocal on " + srcFolderPath); //$NON-NLS-1$
-					}
-					if (!_generatedSourceFolder.exists()) {
-						return false;
-					}
-					
-					try {
-						IJavaProject jp = _aptProject.getJavaProject();
-						IClasspathEntry[] cp = jp.getRawClasspath();
-						IPath path = _generatedSourceFolder.getFullPath();
-						if (ClasspathUtil.isProjectClassPathUpToDate(jp, cp, path, null)) {
-							return false;
-						}
-					}
-					catch (JavaModelException jme) {
-						AptPlugin.log(jme, "Failure examining the classpath"); //$NON-NLS-1$
-					}
-				}
-			}
+		// In principle we could bail out here, if (_generatedSourceFolder != null).
+		// However, this method is an opportunity to detect and fix problems such 
+		// as the folder getting deleted without generatedSourceFolderDeleted() 
+		// getting called (e.g., without user having done a refresh).
+		IFolder srcFolder = getFolder();
+		if (srcFolder == null) {
+			IStatus status = AptPlugin.createStatus(null, "Could not create generated source folder (" + //$NON-NLS-1$
+					AptConfig.getGenSrcDir(_aptProject.getJavaProject()) + ")"); //$NON-NLS-1$
+			AptPlugin.log(status);
+			return;
 		}
 		
-		IFolder srcFolder = null;
-		try{
-			if( reset ){
-				// Folder name was out of sync with folder.  Delete the old folder and classpath entry.
-				ClasspathUtil.removeFromProjectClasspath(_aptProject.getJavaProject(), curSrcFolder, null );
-				if ( curSrcFolder.exists() ){
-					if( AptPlugin.DEBUG )
-						AptPlugin.trace("deleting gen src dir " + curSrcFolder.getName() ); //$NON-NLS-1$
-					curSrcFolder.delete( true, false, null );
+		if (createOnDisk(srcFolder)) {
+			if (isOnClasspath(srcFolder)) {
+				synchronized (this) {
+					// Only set _generatedSourceFolder if folder is on disk and on classpath.
+					_generatedSourceFolder = srcFolder;
 				}
 			}
-				
+		}
+	}
+
+	/**
+	 * Create a folder on disk, unless it already exists.
+	 * <p>
+	 * This method will frequently be called on multiple threads simultaneously
+	 * (e.g., build thread and UI thread).
+	 * @param srcFolder the folder to create.  Must not be null.
+	 * @return true if, at the end of the routine, the folder exists on disk.
+	 */
+	private boolean createOnDisk(IFolder srcFolder) {
+		boolean exists = false;
+		try {
 			// don't take any locks while creating the folder, since we are doing file-system operations
-			srcFolder = getFolder();
 			srcFolder.refreshLocal( IResource.DEPTH_INFINITE, null );
 			if (!srcFolder.exists()) {
 				FileSystemUtil.makeDerivedParentFolders(srcFolder);
+				if(AptPlugin.DEBUG)
+					AptPlugin.trace("Created folder " + srcFolder + " on disk"); //$NON-NLS-1$ //$NON-NLS-2$
 			}
-				
-			//
-			// make sure __generated_src dir is on the cp if not already
-			//
-			ClasspathUtil.updateProjectClasspath( _aptProject.getJavaProject(), srcFolder, null );
-			
-			if(AptPlugin.DEBUG)
-				AptPlugin.trace("Added directory " + srcFolder.getName() + " and updated classpath" ); //$NON-NLS-1$ //$NON-NLS-2$
+			exists = true;
 		}
-		catch(CoreException e){						
+		catch (CoreException e) {						
 			e.printStackTrace();
-			AptPlugin.log(e, "Failed to create generated source directory"); //$NON-NLS-1$
-			return false;
+			AptPlugin.log(e, "Failed to ensure existence of generated source folder " + srcFolder.getName()); //$NON-NLS-1$
+		}
+		return exists;
+	}
+
+	/**
+	 * Call this method when the APT_ENABLED preference has changed.
+	 * 
+	 * Configure the generated source folder according to whether APT is enabled
+	 * or disabled.  If enabled, the folder will be created and a classpath entry
+	 * will be added.  If disabled, the folder and classpath entry will be removed.
+	 * <p>
+	 * This should only be called on an event thread, with no locks on the project
+	 * or classpath.
+	 * @param enable
+	 */
+	public void enabledPreferenceChanged()
+	{
+		final boolean enable = AptConfig.isEnabled(_aptProject.getJavaProject());
+		// Short-circuit if nothing changed.
+		if (enable == (_generatedSourceFolder != null)) {
+			if( AptPlugin.DEBUG ) {
+				AptPlugin.trace("enabledChanged() doing nothing; state is already " + enable); //$NON-NLS-1$
+			}
+			// no change in state
+			return;
 		}
 		
-		synchronized ( this )
-		{
-			_generatedSourceFolder = srcFolder;
-			return true;
+		if ( AptPlugin.DEBUG ) {
+			AptPlugin.trace("enabledChanged() changing state to " + enable +  //$NON-NLS-1$
+					" for " + _aptProject.getJavaProject().getElementName()); //$NON-NLS-1$
+		}
+		if( enable ) {
+			configure();
+		} 
+		else {
+			removeFolder();
 		}
 	}
-	
+
+	/**
+	 * Respond to a change in the name of the generated source folder.  
+	 * If APT is enabled, remove the old folder and classpath entry and 
+	 * create new ones.
+	 * <p>
+ 	 * This should only be called on an event thread, with no locks on the project
+	 * or classpath.
+	 */
+	public void folderNamePreferenceChanged()
+	{
+		// if APT is disabled, we don't need to do anything
+		final boolean aptEnabled = AptConfig.isEnabled(_aptProject.getJavaProject());
+		if (!aptEnabled) {
+			return;
+		}
+		
+		// if name didn't change, we don't need to do anything
+		if (_generatedSourceFolder != null && _generatedSourceFolder.equals(getFolderPreference())) {
+			if( AptPlugin.DEBUG ) {
+				AptPlugin.trace("folderNameChanged() doing nothing; name is already " +  //$NON-NLS-1$
+						_generatedSourceFolder.getProjectRelativePath());
+			}
+			return;
+		}
+		
+		removeFolder();
+		configure();
+	}
 	
 	/**
 	 *  Invoked when the generated source folder has been deleted.  This will 
-	 *  flush any in-memory state tracking generated files and clean up the project classpath.
+	 *  flush any in-memory state tracking generated files, and cause the
+	 *  generated source folder to be recreated the next time we build.
 	 *  
 	 *  Note: this should only be called within a resource change event to ensure that the classpath
 	 *  is correct during any build. Resource change event never occurs during a build.
 	 */
-	public void generatedSourceFolderDeleted()
+	public void folderDeleted()
 	{
 		_aptProject.projectClean( false );
 		
 		IFolder srcFolder;
 		synchronized(this){
-			srcFolder = getFolder();
+			srcFolder = _generatedSourceFolder;
 			_generatedSourceFolder = null;
 		}
 		if(AptPlugin.DEBUG)
-			AptPlugin.trace("nulled out gen src dir " + srcFolder.getName() ); //$NON-NLS-1$
-	}
-
-	/**
-	 * @return get the generated source folder. May return null if
-	 * creation has failed, the folder has been deleted or has not been created.
-	 */
-	public IFolder getFolder(){
-		
-		final String folderName;
-		synchronized (this) {
-			if( _generatedSourceFolder != null )
-				return _generatedSourceFolder;
-			folderName = getFolderName();
-		}		
-		if(folderName == null)
-			return null;
-		
-		return _aptProject.getJavaProject().getProject().getFolder( folderName );
-	}
-	
-	/**
-	 * returns the name of the folder for generated source files.  The name is relative
-	 * to the project root.
-	 * 
-	 * @see #getFolder()
-	 * @see #isGeneratedSourceFolderConfigured()
-	 */
-	public synchronized String getFolderName() 
-	{ 
-		return _generatedSourceFolderName; 
+			AptPlugin.trace("set _generatedSourceFolder to null; was " + srcFolder ); //$NON-NLS-1$
 	}
 	
 	/**
@@ -357,78 +332,42 @@ public class GeneratedSourceFolderManager {
 		
 		return outputRootPath;
 	}
-
+	
 	/**
-	 * Configure the generated source folder according to whether APT is enabled
-	 * or disabled.  If enabled, the folder will be created and a classpath entry
-	 * will be added.  If disabled, the folder and classpath entry will be removed.
-	 * <p>
-	 * This should only be called on an event thread, with no locks on the project
-	 * or classpath.
-	 * @param enable
+	 * Get the current generated source folder; or if it is null, return
+	 * an IFolder corresponding to the current generated source folder name.
+	 * This is a handle-only operation and does not have anything to do with
+	 * whether the folder exists on disk.
+	 * @throws IllegalArgumentException if the name is invalid (e.g., "..").
 	 */
-	public void setEnabled(boolean enable)
-	{
-		if( AptPlugin.DEBUG ){
-			if( enable )
-				AptPlugin.trace("enabling APT for " + _aptProject.getJavaProject().getElementName()); //$NON-NLS-1$
-			else
-				AptPlugin.trace("disabling APT for " + _aptProject.getJavaProject().getElementName()); //$NON-NLS-1$
-		}
-		if( enable ) {
-			final String folderName = _generatedSourceFolderName;
-			if( AptPlugin.DEBUG ){
-				AptPlugin.trace("configure generated source folder to be " + folderName ); //$NON-NLS-1$
-			}
-			configure(folderName, null);
-		} else{
-			final IFolder srcFolder = getFolder();
-			_aptProject.projectClean(true);
-			resetGeneratedSrcFolder(srcFolder, false);
+	public IFolder getFolder(){
+		
+		synchronized (this) {
+			if( _generatedSourceFolder != null )
+				return _generatedSourceFolder;
 		}
+		
+		return getFolderPreference();
 	}
-	
+
 	/**
-	 * Configure the name of the generated source folder.  If APT is enabled,
-	 * remove the old folder and classpath entry and create new ones.  If
-	 * disabled, simply record the new name.
-	 * <p>
- 	 * This should only be called on an event thread, with no locks on the project
-	 * or classpath.
-	 * TODO: why does this need to know the old name?  Didn't we get it in the constructor?
-	 * @param oldName can be null if the old value is not known.
-	 * @param newName
+	 * Get an IFolder that corresponds to the folder name preference.
+	 * This has nothing to do with whether APT is enabled or disabled,
+	 * nothing to do with whether the folder exists on disk; it's just
+	 * a handle corresponding to a name.
+	 * @return null if the IFolder could not be created, which probably
+	 * means that the name is something illegal like "..".
 	 */
-	public void changeFolderName(String oldName, String newName)
-	{
-		if (newName == null) {
-			// Null is used to indicate this preference has
-			// been removed, as the project has been deleted.
-			// We do nothing
-			return;
+	private IFolder getFolderPreference() {
+		final String folderName = AptConfig.getGenSrcDir(_aptProject.getJavaProject());
+		IFolder folder = null;
+		try {
+			folder = _aptProject.getJavaProject().getProject().getFolder( folderName );
 		}
-		if (newName.equals(oldName)) {
-			// No-op -- same config
-			return;
+		catch (IllegalArgumentException e) {
+			// In the event that the folderName is invalid, just return null.
 		}
-		
-		final boolean aptEnabled = AptConfig.isEnabled(_aptProject.getJavaProject());
-		if( AptPlugin.DEBUG )
-			AptPlugin.trace("configure generated source directory new value = " +  //$NON-NLS-1$
-					newName + 
-					" old value = "  + oldName + //$NON-NLS-1$
-					" APT is enabled = " + aptEnabled); //$NON-NLS-1$
-		if( aptEnabled )
-			// If APT is enabled, 
-			// clean up the old cp entry, delete the old folder, 
-			// create the new one and update the classpath.
-			configure( newName, oldName );
-		else
-			// If APT is not enabled, the folder should not exist
-			// and there should be no entry on the classpath.
-			synchronized (this) {
-				_generatedSourceFolderName = newName;
-			}
+		return folder;
 	}
 	
 	/**
@@ -444,79 +383,64 @@ public class GeneratedSourceFolderManager {
 	{
 		return folder != null && folder.equals( getFolder() );
 	}
-	
+
+	private boolean isOnClasspath(IFolder srcFolder) {
+		boolean found = false;
+		try {
+			if (ClasspathUtil.doesClasspathContainEntry(
+					_aptProject.getJavaProject(), null, srcFolder.getFullPath(), null)) {
+				found = true;
+			}
+		} catch (JavaModelException e) {
+			e.printStackTrace();
+		}
+		return found;
+	}
+
 	/**
-	 * Cleanup the classpath and schedule a job to delete the generated source folder.
-	 * @param recreate if <code>true</code> configure the generated source directory.
+	 * Remove a folder from disk and from the classpath.
+	 * @param srcFolder
 	 */
-	private void resetGeneratedSrcFolder(final IFolder srcFolder, boolean recreate){
-		// clean up the classpath first so that when we actually delete the 
-		// generated source folder and won't cause a classpath error.
-		if( srcFolder != null ){
-			try{	
-				ClasspathUtil.removeFromProjectClasspath( _aptProject.getJavaProject(), srcFolder, null );		
-			}catch(JavaModelException e){
-				AptPlugin.log( e, "Error occurred deleting old generated src folder " + srcFolder.getName() ); //$NON-NLS-1$
-			}
+	private void removeFolder() {
+		IFolder srcFolder = null;
+		synchronized ( this )
+		{
+			srcFolder = _generatedSourceFolder;
+			_generatedSourceFolder = null;
+		}
+		if (srcFolder == null) {
+			return;
 		}
 		
-		if( recreate )
-			ensureGeneratedSourceFolder();
+		// Clear out the generated file maps
+		_aptProject.projectClean(false);
 		
-		// delete the generated source folder as well as
-		// all of its derived ancestors that are containers only to the 
-		// generated source folder
-		if( srcFolder != null ){
-			IFolder folderToDelete = srcFolder;		
-			for( IContainer c = srcFolder.getParent(); 
-			 	 c != null && (c instanceof IFolder); 
-			 	 c = c.getParent() ){
-				
-				try{
-					// members can't be empty, there has to be at least 1.
-					// will only delete the parent if it contains only the 
-					// folder that we want to delete.
-					if( c.isDerived() && c.members().length == 1 ){
-						folderToDelete = (IFolder)c;
-					}
-					else
-						break;
-				}catch(CoreException e){
-					AptPlugin.log(e, "failure while accessing member of " + c.getName() ); //$NON-NLS-1$
-					break;
-				}
-			}
-			removeFolder(folderToDelete);
+		// clean up the classpath first so that when we actually delete the 
+		// generated source folder we won't cause a classpath error.
+		try {	
+			ClasspathUtil.removeFromProjectClasspath( _aptProject.getJavaProject(), srcFolder, null );		
+		} catch (JavaModelException e) {
+			AptPlugin.log( e, "Failed to remove classpath entry for old generated src folder " + srcFolder.getName() ); //$NON-NLS-1$
 		}
+		
+		FileSystemUtil.deleteFolder(srcFolder);
 	}
 
 	/**
-	 * Remove the specified folder from disk.
-	 * @param srcFolder
+	 * Check whether the proposed name is permitted.
+	 * @param dirString can be anything, including null.
+	 * @return true if attempting to set the generated source folder to 
+	 * <code>dirString</code> is likely to succeed.
 	 */
-	private void removeFolder(final IFolder srcFolder) {
-		if( srcFolder != null ){
-			final IWorkspaceRunnable runnable = new IWorkspaceRunnable(){
-	            public void run(IProgressMonitor monitor)
-	            {		
-	            	if( srcFolder != null ){
-		            	try{
-		            		srcFolder.delete(true, false, null);
-		            	}catch(CoreException e){
-		            		AptPlugin.log(e, "failed to delete old generated source folder " + srcFolder.getName() ); //$NON-NLS-1$
-		            	}catch(OperationCanceledException cancel){
-		            		AptPlugin.log(cancel, "deletion of generated source folder got cancelled"); //$NON-NLS-1$
-		            	}
-	            	}
-	            };
-	        };
-	        IWorkspace ws = _aptProject.getJavaProject().getProject().getWorkspace();
-	        try{
-	        	ws.run(runnable, ws.getRoot(), IWorkspace.AVOID_UPDATE, null);
-	        }catch(CoreException e){
-	    		AptPlugin.log(e, "Runnable for deleting old generated source folder " + srcFolder.getName() + " failed."); //$NON-NLS-1$ //$NON-NLS-2$
-	    	}
+	public static boolean validate(final IJavaProject jproj, final String folderName) {
+		IFolder folder = null;
+		try {
+			folder = jproj.getProject().getFolder( folderName );
+		}
+		catch (IllegalArgumentException e) {
+			return false;
 		}
+		return folder != null;
 	}
-	
+
 }
