diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java
index cb72533..0e20090 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java
@@ -28,82 +28,165 @@ public class LoopingFlowContext extends SwitchFlowContext {
 	
 	public Label continueLabel;
 	public UnconditionalFlowInfo initsOnContinue = FlowInfo.DEAD_END;
+	private UnconditionalFlowInfo upstreamNullFlowInfo;
+	private LoopingFlowContext innerFlowContexts[] = null;
+	private UnconditionalFlowInfo innerFlowInfos[] = null;
+	private int innerFlowContextsNb = 0;
+	
 	Reference finalAssignments[];
 	VariableBinding finalVariables[];
 	int assignCount = 0;
 	
+	LocalVariableBinding[] nullLocals;
 	Expression[] nullReferences;
-	int[] nullStatus;
+	int[] nullCheckTypes;
 	int nullCount;
 	
 	Scope associatedScope;
 	
 	public LoopingFlowContext(
 		FlowContext parent,
+		FlowInfo upstreamNullFlowInfo,
 		ASTNode associatedNode,
 		Label breakLabel,
 		Label continueLabel,
 		Scope associatedScope) {
 		super(parent, associatedNode, breakLabel);
+		preemptNullDiagnostic = true; 
+			// children will defer to this, which may defer to its own parent 
 		this.continueLabel = continueLabel;
 		this.associatedScope = associatedScope;
+		this.upstreamNullFlowInfo = upstreamNullFlowInfo.unconditionalCopy();
 	}
-	
-	public void complainOnDeferredChecks(BlockScope scope, FlowInfo flowInfo) {
-		
-		// complain on final assignments in loops
-		for (int i = 0; i < assignCount; i++) {
-			VariableBinding variable = finalVariables[i];
-			if (variable == null) continue;
-			boolean complained = false; // remember if have complained on this final assignment
-			if (variable instanceof FieldBinding) {
-				if (flowInfo.isPotentiallyAssigned((FieldBinding) variable)) {
-					complained = true;
-					scope.problemReporter().duplicateInitializationOfBlankFinalField(
-						(FieldBinding) variable,
-						finalAssignments[i]);
-				}
-			} else {
-				if (flowInfo.isPotentiallyAssigned((LocalVariableBinding) variable)) {
-					complained = true;
-					scope.problemReporter().duplicateInitializationOfFinalLocal(
-						(LocalVariableBinding) variable,
-						finalAssignments[i]);
-				}
+
+/**
+ * Perform deferred checks relative to final variables duplicate initialization 
+ * of lack of initialization.
+ * @param scope the scope to which this context is associated
+ * @param flowInfo the flow info against which checks must be performed
+ */
+public void complainOnDeferredFinalChecks(BlockScope scope, FlowInfo flowInfo) {
+	// complain on final assignments in loops
+	for (int i = 0; i < assignCount; i++) {
+		VariableBinding variable = finalVariables[i];
+		if (variable == null) continue;
+		boolean complained = false; // remember if have complained on this final assignment
+		if (variable instanceof FieldBinding) {
+			if (flowInfo.isPotentiallyAssigned((FieldBinding) variable)) {
+				complained = true;
+				scope.problemReporter().duplicateInitializationOfBlankFinalField(
+					(FieldBinding) variable,
+					finalAssignments[i]);
 			}
-			// any reference reported at this level is removed from the parent context where it 
-			// could also be reported again
-			if (complained) {
-				FlowContext context = parent;
-				while (context != null) {
-					context.removeFinalAssignmentIfAny(finalAssignments[i]);
-					context = context.parent;
-				}
+		} else {
+			if (flowInfo.isPotentiallyAssigned((LocalVariableBinding) variable)) {
+				complained = true;
+				scope.problemReporter().duplicateInitializationOfFinalLocal(
+					(LocalVariableBinding) variable,
+					finalAssignments[i]);
+			}
+		}
+		// any reference reported at this level is removed from the parent context where it 
+		// could also be reported again
+		if (complained) {
+			FlowContext context = parent;
+			while (context != null) {
+				context.removeFinalAssignmentIfAny(finalAssignments[i]);
+				context = context.parent;
 			}
 		}
-		// check inconsistent null checks
-		for (int i = 0; i < nullCount; i++) {
-			Expression expression = nullReferences[i];
-			if (expression == null) continue;
+	}
+}
+
+/**
+ * Perform deferred checks relative to the null status of local variables.
+ * @param scope the scope to which this context is associated
+ * @param flowInfo the flow info against which checks must be performed
+ */
+public void complainOnDeferredNullChecks(BlockScope scope, FlowInfo flowInfo) {
+	for (int i = 0 ; i < this.innerFlowContextsNb ; i++) {
+		this.upstreamNullFlowInfo.
+			addPotentialNullInfoFrom(
+				this.innerFlowContexts[i].upstreamNullFlowInfo).
+			addPotentialNullInfoFrom(this.innerFlowInfos[i]);
+	}
+	this.innerFlowContextsNb = 0;
+	flowInfo = this.upstreamNullFlowInfo.
+		addPotentialNullInfoFrom(
+			flowInfo.unconditionalInitsWithoutSideEffect());
+	if (this.deferNullDiagnostic) {
+		// check only immutable null checks on innermost looping context
+		for (int i = 0; i < this.nullCount; i++) {
+			LocalVariableBinding local = this.nullLocals[i];
+			Expression expression = this.nullReferences[i];
 			// final local variable
-			LocalVariableBinding local = expression.localVariableBinding();
-			switch (nullStatus[i]) {
-				case FlowInfo.NULL :
+			switch (this.nullCheckTypes[i]) {
+				case CAN_ONLY_NULL_NON_NULL :
+					if (flowInfo.isDefinitelyNonNull(local)) {
+						this.nullReferences[i] = null;
+						scope.problemReporter().localVariableCannotBeNull(local, expression);
+						continue;
+					}
+				case CAN_ONLY_NULL :
+					if (flowInfo.isDefinitelyNull(local)) {
+						this.nullReferences[i] = null;
+						scope.problemReporter().localVariableCanOnlyBeNull(local, expression);
+						continue;
+					}
+					break;
+				case MAY_NULL:
 					if (flowInfo.isDefinitelyNull(local)) {
-						nullReferences[i] = null;
-						this.parent.recordUsingNullReference(scope, local, expression, nullStatus[i], flowInfo);
+						this.nullReferences[i] = null;
+						scope.problemReporter().localVariableCanOnlyBeNull(local, expression);
+						continue;
 					}
 					break;
-				case FlowInfo.NON_NULL :
+				default:
+					// never happens	
+			}
+			this.parent.recordUsingNullReference(scope, local, expression, 
+					this.nullCheckTypes[i], flowInfo);
+		}
+	}
+	else {
+		// check inconsistent null checks on outermost looping context
+		for (int i = 0; i < this.nullCount; i++) {
+			Expression expression = this.nullReferences[i];
+			// final local variable
+			LocalVariableBinding local = this.nullLocals[i];
+			switch (this.nullCheckTypes[i]) {
+				case CAN_ONLY_NULL_NON_NULL :
 					if (flowInfo.isDefinitelyNonNull(local)) {
-						nullReferences[i] = null;
-						this.parent.recordUsingNullReference(scope, local, expression, nullStatus[i], flowInfo);
+						this.nullReferences[i] = null;
+						scope.problemReporter().localVariableCannotBeNull(local, expression);
+						continue;
+					}
+				case CAN_ONLY_NULL :
+					if (flowInfo.isDefinitelyNull(local)) {
+						this.nullReferences[i] = null;
+						scope.problemReporter().localVariableCanOnlyBeNull(local, expression);
+						continue;
+					}
+					break;
+				case MAY_NULL:
+					if (flowInfo.isDefinitelyNull(local)) {
+						this.nullReferences[i] = null;
+						scope.problemReporter().localVariableCanOnlyBeNull(local, expression);
+						continue;
+					}
+					if (flowInfo.isPotentiallyNull(local)) {
+						this.nullReferences[i] = null;
+						scope.problemReporter().localVariableMayBeNull(local, expression);
+						continue;
 					}
 					break;
+				default:
+					// never happens	
 			}
-		}		
+		}
 	}
-
+}
+	
 	public Label continueLabel() {
 		return continueLabel;
 	}
@@ -125,15 +208,45 @@ public class LoopingFlowContext extends SwitchFlowContext {
 		return initsOnContinue != FlowInfo.DEAD_END;
 	}
 
-	public void recordContinueFrom(FlowInfo flowInfo) {
-
-		if (!flowInfo.isReachable()) return;
-		if (initsOnContinue == FlowInfo.DEAD_END) {
-			initsOnContinue = flowInfo.copy().unconditionalInits();
-		} else {
-			initsOnContinue = initsOnContinue.mergedWith(flowInfo.copy().unconditionalInits());
+public void recordContinueFrom(FlowContext innerFlowContext, FlowInfo flowInfo) {
+	if ((flowInfo.tagBits & FlowInfo.UNREACHABLE) == 0)	{
+	if ((initsOnContinue.tagBits & FlowInfo.UNREACHABLE) == 0) {
+		initsOnContinue = initsOnContinue.
+			mergedWith(flowInfo.unconditionalInitsWithoutSideEffect());
+	} 
+	else {
+		initsOnContinue = flowInfo.unconditionalCopy();
+	}
+	FlowContext inner = innerFlowContext;
+	while (inner != this && !(inner instanceof LoopingFlowContext)) {
+		inner = inner.parent;
+	}
+	if (inner == this) {
+		this.upstreamNullFlowInfo.
+			addPotentialNullInfoFrom(
+				flowInfo.unconditionalInitsWithoutSideEffect());
+	}
+	else {
+		int length = 0;
+		if (this.innerFlowContexts == null) {
+			this.innerFlowContexts = new LoopingFlowContext[5];
+			this.innerFlowInfos = new UnconditionalFlowInfo[5];
 		}
+		else if (this.innerFlowContextsNb == 
+				(length = this.innerFlowContexts.length) - 1) {
+			System.arraycopy(this.innerFlowContexts, 0, 
+				(this.innerFlowContexts = new LoopingFlowContext[length + 5]), 
+				0, length);
+			System.arraycopy(this.innerFlowInfos, 0, 
+				(this.innerFlowInfos= new UnconditionalFlowInfo[length + 5]), 
+				0, length);
+		}
+		this.innerFlowContexts[this.innerFlowContextsNb] = (LoopingFlowContext) inner;
+		this.innerFlowInfos[this.innerFlowContextsNb++] = 
+			flowInfo.unconditionalInitsWithoutSideEffect();
+	}
 	}
+}
 
 	protected boolean recordFinalAssignment(
 		VariableBinding binding,
@@ -170,20 +283,68 @@ public class LoopingFlowContext extends SwitchFlowContext {
 		return true;
 	}
 
-	protected boolean recordNullReference(Expression expression, int status) {
-		if (nullCount == 0) {
-			nullReferences = new Expression[5];
-			nullStatus = new int[5];
-		} else {
-			if (nullCount == nullReferences.length) {
-				System.arraycopy(nullReferences, 0, nullReferences = new Expression[nullCount * 2], 0, nullCount);
-				System.arraycopy(nullStatus, 0, nullStatus = new int[nullCount * 2], 0, nullCount);
+protected void recordNullReference(LocalVariableBinding local, 
+	Expression expression, int status) {
+	if (nullCount == 0) {
+		nullLocals = new LocalVariableBinding[5];
+		nullReferences = new Expression[5];
+		nullCheckTypes = new int[5];
+	} 
+	else if (nullCount == nullLocals.length) {
+		System.arraycopy(nullLocals, 0, 
+			nullLocals = new LocalVariableBinding[nullCount * 2], 0, nullCount);
+		System.arraycopy(nullReferences, 0, 
+			nullReferences = new Expression[nullCount * 2], 0, nullCount);
+		System.arraycopy(nullCheckTypes, 0, 
+			nullCheckTypes = new int[nullCount * 2], 0, nullCount);
+	}
+	nullLocals[nullCount] = local;
+	nullReferences[nullCount] = expression;
+	nullCheckTypes[nullCount++] = status;
+}
+	
+public void recordUsingNullReference(Scope scope, LocalVariableBinding local,
+		Expression reference, int checkType, FlowInfo flowInfo) {
+	if ((flowInfo.tagBits & FlowInfo.UNREACHABLE) != 0 || 
+			flowInfo.isDefinitelyUnknown(local)) {
+		return;
+	}
+	switch (checkType) {
+		case CAN_ONLY_NULL_NON_NULL :
+		case CAN_ONLY_NULL:
+			if (flowInfo.isDefinitelyNonNull(local)) {
+				if (checkType == CAN_ONLY_NULL_NON_NULL) {
+					scope.problemReporter().localVariableCannotBeNull(local, reference);
+				}
+				return;
 			}
-		}
-		nullReferences[nullCount] = expression;
-		nullStatus[nullCount++] = status;
-		return true;
-	}	
+			if (flowInfo.isDefinitelyNull(local)) {
+				scope.problemReporter().localVariableCanOnlyBeNull(local, reference);
+				return;
+			}
+			if (flowInfo.isPotentiallyUnknown(local)) {
+				return;
+			}
+			recordNullReference(local, reference, checkType);
+			return;
+		case MAY_NULL :
+			if (flowInfo.isDefinitelyNonNull(local)) {
+				return;
+			}
+			if (flowInfo.isDefinitelyNull(local)) {
+				scope.problemReporter().localVariableCanOnlyBeNull(local, reference);
+				return;
+			}
+			if (flowInfo.isPotentiallyNull(local)) {
+				scope.problemReporter().localVariableMayBeNull(local, reference);
+				return;
+			}
+			recordNullReference(local, reference, checkType);
+			return;
+		default:
+			// never happens
+	}
+}
 	
 	void removeFinalAssignmentIfAny(Reference reference) {
 		for (int i = 0; i < assignCount; i++) {
