diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java
index 7d1d092..b2f61ca 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java
@@ -307,6 +307,7 @@ public void checkTaskTag(int commentStart, int commentEnd) throws InvalidInputEx
 		}
 		previous = src[i];
 	}
+	boolean containsEmptyTask = false;
 	for (int i = foundTaskIndex; i < this.foundTaskCount; i++) {
 		// retrieve message start and end positions
 		int msgStart = this.foundTaskPositions[i][0] + this.foundTaskTags[i].length;
@@ -335,8 +336,12 @@ public void checkTaskTag(int commentStart, int commentEnd) throws InvalidInputEx
 			if (end == -1)
 				end = max_value;
 		}
-		if (msgStart == end)
-			continue; // empty
+		if (msgStart == end) {
+			// if the description is empty, we might want to see if two tags are not sharing the same message
+			// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=110797
+			containsEmptyTask = true;
+			continue;
+		}
 		// trim the message
 		while (CharOperation.isWhitespace(src[end]) && msgStart <= end)
 			end--;
@@ -350,6 +355,19 @@ public void checkTaskTag(int commentStart, int commentEnd) throws InvalidInputEx
 		System.arraycopy(src, msgStart, message, 0, messageLength);
 		this.foundTaskMessages[i] = message;
 	}
+	if (containsEmptyTask) {
+		for (int i = foundTaskIndex, max = this.foundTaskCount; i < max; i++) {
+			if (this.foundTaskMessages[i].length == 0) {
+				loop: for (int j = i + 1; j < max; j++) {
+					if (this.foundTaskMessages[j].length != 0) {
+						this.foundTaskMessages[i] = this.foundTaskMessages[j];
+						this.foundTaskPositions[i][1] = this.foundTaskPositions[j][1];
+						break loop;
+					}
+				}
+			}
+		}
+	}
 }
 
 public char[] getCurrentIdentifierSource() {
@@ -428,7 +446,7 @@ public final String getCurrentTokenString() {
 		this.startPosition, 
 		this.currentPosition - this.startPosition); 
 }
-public final char[] getCurrentTokenSourceString() {
+public char[] getCurrentTokenSourceString() {
 	//return the token REAL source (aka unicodes are precomputed).
 	//REMOVE the two " that are at the beginning and the end.
 
@@ -2201,7 +2219,7 @@ private void parseTags() {
 				try {
 					currentTag = new NLSTag(pos + sourceDelta, end + sourceDelta, currentLine, extractInt(s, start, end));
 				} catch (NumberFormatException e) {
-					currentTag = new NLSTag(pos + currentStartPosition, currentStartPosition + end, currentLine, -1);
+					currentTag = new NLSTag(pos + sourceDelta, end + sourceDelta, currentLine, -1);
 				}
 				if (this.nlsTagsPtr == this.nlsTags.length) {
 					// resize
