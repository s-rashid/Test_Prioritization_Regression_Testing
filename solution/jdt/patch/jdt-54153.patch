diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java
index 5791ba4..317393d6 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java
@@ -12,6 +12,7 @@ package org.eclipse.jdt.internal.compiler.ast;
 
 import org.eclipse.jdt.internal.compiler.ASTVisitor;
 import org.eclipse.jdt.internal.compiler.impl.*;
+import org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants;
 import org.eclipse.jdt.internal.compiler.codegen.*;
 import org.eclipse.jdt.internal.compiler.flow.*;
 import org.eclipse.jdt.internal.compiler.lookup.*;
@@ -129,7 +130,7 @@ public class FieldDeclaration extends AbstractVariableDeclaration {
 
 		if (this.binding != null)
 			return this.binding.isStatic();
-		return (this.modifiers & AccStatic) != 0;
+		return (this.modifiers & ClassFileConstants.AccStatic) != 0;
 	}
 
 	public StringBuffer printStatement(int indent, StringBuffer output) {
@@ -225,7 +226,7 @@ public class FieldDeclaration extends AbstractVariableDeclaration {
 							}								
 						} else if (initializationScope.isBoxingCompatibleWith(initializationType, fieldType) 
 											|| (initializationType.isBaseType()  // narrowing then boxing ?
-													&& initializationScope.compilerOptions().sourceLevel >= JDK1_5 // autoboxing
+													&& initializationScope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5 // autoboxing
 													&& !fieldType.isBaseType()
 													&& initialization.isConstantValueOfTypeAssignableToType(initializationType, initializationScope.environment().computeBoxingType(fieldType)))) {
 							this.initialization.computeConversion(initializationScope, fieldType, initializationType);
