diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java
index 3e60bd7..a87d979 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java
@@ -84,15 +84,19 @@ public class WildcardBinding extends ReferenceBinding {
 	/**
 	 * Collect the substitutes into a map for certain type variables inside the receiver type
 	 * e.g.   Collection<T>.collectSubstitutes(Collection<List<X>>, Map), will populate Map with: T --> List<X>
+	 * Constraints:
+	 *   A << F   corresponds to:   F.collectSubstitutes(..., A, ..., 1)
+	 *   A = F   corresponds to:      F.collectSubstitutes(..., A, ..., 0)
+	 *   A >> F   corresponds to:   F.collectSubstitutes(..., A, ..., 2)
 	 */
-	public void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint) {
+	public void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint) {
 
 		if ((this.tagBits & TagBits.HasTypeVariable) == 0) return;
-		if (otherType == NullBinding) return;
+		if (actualType == NullBinding) return;
 	
-		if (otherType.isCapture()) {
-			CaptureBinding capture = (CaptureBinding) otherType;
-			otherType = capture.wildcard;
+		if (actualType.isCapture()) {
+			CaptureBinding capture = (CaptureBinding) actualType;
+			actualType = capture.wildcard;
 		}
 		
 		switch (constraint) {
@@ -113,41 +117,41 @@ public class WildcardBinding extends ReferenceBinding {
 //						}
 						break;
 					case Wildcard.EXTENDS: // F={? extends U}
-						if (otherType.isWildcard()) {
-							WildcardBinding otherWildcard = (WildcardBinding) otherType;
-							switch(otherWildcard.boundKind) {
+						if (actualType.isWildcard()) {
+							WildcardBinding actualWildcard = (WildcardBinding) actualType;
+							switch(actualWildcard.boundKind) {
 								case Wildcard.UNBOUND: // A={?} << F={? extends U}  --> 0
 									break;
 								case Wildcard.EXTENDS: // A={? extends V} << F={? extends U} ---> V << U
-									this.bound.collectSubstitutes(scope, otherWildcard.bound, substitutes, CONSTRAINT_EXTENDS);
-						        	for (int i = 0, length = otherWildcard.otherBounds == null ? 0 : otherWildcard.otherBounds.length; i < length; i++) {
-										this.bound.collectSubstitutes(scope, otherWildcard.otherBounds[i], substitutes, CONSTRAINT_EXTENDS);
+									this.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, CONSTRAINT_EXTENDS);
+						        	for (int i = 0, length = actualWildcard.otherBounds == null ? 0 : actualWildcard.otherBounds.length; i < length; i++) {
+										this.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, CONSTRAINT_EXTENDS);
 						        	}									
 									break;
 								case Wildcard.SUPER: // A={? super V} << F={? extends U} ---> 0
 									break;
 							}
 						} else { // A=V << F={? extends U} ---> V << U
-							this.bound.collectSubstitutes(scope, otherType, substitutes, CONSTRAINT_EXTENDS);
+							this.bound.collectSubstitutes(scope, actualType, substitutes, CONSTRAINT_EXTENDS);
 						}
 						break;
 					case Wildcard.SUPER: // F={? super U}
-						if (otherType.isWildcard()) {
-							WildcardBinding otherWildcard = (WildcardBinding) otherType;
-							switch(otherWildcard.boundKind) {
+						if (actualType.isWildcard()) {
+							WildcardBinding actualWildcard = (WildcardBinding) actualType;
+							switch(actualWildcard.boundKind) {
 								case Wildcard.UNBOUND: // A={?} << F={? super U}  --> 0
 									break;
 								case Wildcard.EXTENDS: // A={? extends V} << F={? super U} ---> 0
 									break;
 								case Wildcard.SUPER: // A={? super V} << F={? super U} ---> 0
-									this.bound.collectSubstitutes(scope, otherWildcard.bound, substitutes, CONSTRAINT_SUPER);
-						        	for (int i = 0, length = otherWildcard.otherBounds == null ? 0 : otherWildcard.otherBounds.length; i < length; i++) {
-										this.bound.collectSubstitutes(scope, otherWildcard.otherBounds[i], substitutes, CONSTRAINT_SUPER);
+									this.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, CONSTRAINT_SUPER);
+						        	for (int i = 0, length = actualWildcard.otherBounds == null ? 0 : actualWildcard.otherBounds.length; i < length; i++) {
+										this.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, CONSTRAINT_SUPER);
 						        	}									
 									break;
 							}
 						} else { // A=V << F={? super U} ---> V >> U
-							this.bound.collectSubstitutes(scope, otherType, substitutes, CONSTRAINT_SUPER);							
+							this.bound.collectSubstitutes(scope, actualType, substitutes, CONSTRAINT_SUPER);							
 						}						
 						break;
 				}
@@ -169,15 +173,15 @@ public class WildcardBinding extends ReferenceBinding {
 //						}
 						break;
 					case Wildcard.EXTENDS: // F={? extends U}
-						if (otherType.isWildcard()) {
-							WildcardBinding otherWildcard = (WildcardBinding) otherType;
-							switch(otherWildcard.boundKind) {
+						if (actualType.isWildcard()) {
+							WildcardBinding actualWildcard = (WildcardBinding) actualType;
+							switch(actualWildcard.boundKind) {
 								case Wildcard.UNBOUND: // A={?} == F={? extends U}  --> 0
 									break;
 								case Wildcard.EXTENDS: // A={? extends V} == F={? extends U} ---> V == U
-									this.bound.collectSubstitutes(scope, otherWildcard.bound, substitutes, CONSTRAINT_EQUAL);
-						        	for (int i = 0, length = otherWildcard.otherBounds == null ? 0 : otherWildcard.otherBounds.length; i < length; i++) {
-										this.bound.collectSubstitutes(scope, otherWildcard.otherBounds[i], substitutes, CONSTRAINT_EQUAL);
+									this.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, CONSTRAINT_EQUAL);
+						        	for (int i = 0, length = actualWildcard.otherBounds == null ? 0 : actualWildcard.otherBounds.length; i < length; i++) {
+										this.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, CONSTRAINT_EQUAL);
 						        	}											
 									break;
 								case Wildcard.SUPER: // A={? super V} == F={? extends U} ---> 0
@@ -187,17 +191,17 @@ public class WildcardBinding extends ReferenceBinding {
 						}
 						break;
 					case Wildcard.SUPER: // F={? super U}
-						if (otherType.isWildcard()) {
-							WildcardBinding otherWildcard = (WildcardBinding) otherType;
-							switch(otherWildcard.boundKind) {
+						if (actualType.isWildcard()) {
+							WildcardBinding actualWildcard = (WildcardBinding) actualType;
+							switch(actualWildcard.boundKind) {
 								case Wildcard.UNBOUND: // A={?} == F={? super U}  --> 0
 									break;
 								case Wildcard.EXTENDS: // A={? extends V} == F={? super U} ---> 0
 									break;
 								case Wildcard.SUPER: // A={? super V} == F={? super U} ---> 0
-									this.bound.collectSubstitutes(scope, otherWildcard.bound, substitutes, CONSTRAINT_EQUAL);
-						        	for (int i = 0, length = otherWildcard.otherBounds == null ? 0 : otherWildcard.otherBounds.length; i < length; i++) {
-										this.bound.collectSubstitutes(scope, otherWildcard.otherBounds[i], substitutes, CONSTRAINT_EQUAL);
+									this.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, CONSTRAINT_EQUAL);
+						        	for (int i = 0, length = actualWildcard.otherBounds == null ? 0 : actualWildcard.otherBounds.length; i < length; i++) {
+										this.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, CONSTRAINT_EQUAL);
 						        	}	
 						        	break;
 							}
@@ -223,15 +227,15 @@ public class WildcardBinding extends ReferenceBinding {
 //						}
 						break;
 					case Wildcard.EXTENDS: // F={? extends U}
-						if (otherType.isWildcard()) {
-							WildcardBinding otherWildcard = (WildcardBinding) otherType;
-							switch(otherWildcard.boundKind) {
+						if (actualType.isWildcard()) {
+							WildcardBinding actualWildcard = (WildcardBinding) actualType;
+							switch(actualWildcard.boundKind) {
 								case Wildcard.UNBOUND: // A={?} >> F={? extends U}  --> 0
 									break;
 								case Wildcard.EXTENDS: // A={? extends V} >> F={? extends U} ---> V >> U
-									this.bound.collectSubstitutes(scope, otherWildcard.bound, substitutes, CONSTRAINT_SUPER);
-						        	for (int i = 0, length = otherWildcard.otherBounds == null ? 0 : otherWildcard.otherBounds.length; i < length; i++) {
-										this.bound.collectSubstitutes(scope, otherWildcard.otherBounds[i], substitutes, CONSTRAINT_SUPER);
+									this.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, CONSTRAINT_SUPER);
+						        	for (int i = 0, length = actualWildcard.otherBounds == null ? 0 : actualWildcard.otherBounds.length; i < length; i++) {
+										this.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, CONSTRAINT_SUPER);
 						        	}										
 									break;
 								case Wildcard.SUPER: // A={? super V} >> F={? extends U} ---> 0
@@ -241,17 +245,17 @@ public class WildcardBinding extends ReferenceBinding {
 						}
 						break;
 					case Wildcard.SUPER: // F={? super U}
-						if (otherType.isWildcard()) {
-							WildcardBinding otherWildcard = (WildcardBinding) otherType;
-							switch(otherWildcard.boundKind) {
+						if (actualType.isWildcard()) {
+							WildcardBinding actualWildcard = (WildcardBinding) actualType;
+							switch(actualWildcard.boundKind) {
 								case Wildcard.UNBOUND: // A={?} >> F={? super U}  --> 0
 									break;
 								case Wildcard.EXTENDS: // A={? extends V} >> F={? super U} ---> 0
 									break;
 								case Wildcard.SUPER: // A={? super V} >> F={? super U} ---> V >> U
-									this.bound.collectSubstitutes(scope, otherWildcard.bound, substitutes, CONSTRAINT_SUPER);
-						        	for (int i = 0, length = otherWildcard.otherBounds == null ? 0 : otherWildcard.otherBounds.length; i < length; i++) {
-										this.bound.collectSubstitutes(scope, otherWildcard.otherBounds[i], substitutes, CONSTRAINT_SUPER);
+									this.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, CONSTRAINT_SUPER);
+						        	for (int i = 0, length = actualWildcard.otherBounds == null ? 0 : actualWildcard.otherBounds.length; i < length; i++) {
+										this.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, CONSTRAINT_SUPER);
 						        	}	
 						        	break;
 							}
