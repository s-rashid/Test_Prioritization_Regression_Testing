diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java
index 8dde0ed..61fb81b 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java
@@ -102,15 +102,10 @@ public class SourceMapper
 	protected String rootPath = ""; //$NON-NLS-1$
 
 	/**
-	 * Used for efficiency
-	 */
-	protected static String[] fgEmptyStringArray = new String[0];
-
-	/**
 	 * Table that maps a binary method to its parameter names.
 	 * Keys are the method handles, entries are <code>char[][]</code>.
 	 */
-	protected HashMap fParameterNames;
+	protected HashMap parameterNames;
 	
 	/**
 	 * Table that maps a binary element to its <code>SourceRange</code>s.
@@ -118,37 +113,37 @@ public class SourceMapper
 	 * is a two element array; the first being source range, the second
 	 * being name range.
 	 */
-	protected HashMap fSourceRanges;
+	protected HashMap sourceRanges;
 	
 
 	/**
 	 * The unknown source range {-1, 0}
 	 */
-	public static SourceRange fgUnknownRange = new SourceRange(-1, 0);
+	public static final SourceRange UNKNOWN_RANGE = new SourceRange(-1, 0);
 
 	/**
 	 * The position within the source of the start of the
 	 * current member element, or -1 if we are outside a member.
 	 */
-	protected int[] fMemberDeclarationStart;
+	protected int[] memberDeclarationStart;
 	/**
 	 * The <code>SourceRange</code> of the name of the current member element.
 	 */
-	protected SourceRange[] fMemberNameRange;
+	protected SourceRange[] memberNameRange;
 	/**
 	 * The name of the current member element.
 	 */
-	protected String[] fMemberName;
+	protected String[] memberName;
 	
 	/**
 	 * The parameter names for the current member method element.
 	 */
-	protected char[][][] fMethodParameterNames;
+	protected char[][][] methodParameterNames;
 	
 	/**
 	 * The parameter types for the current member method element.
 	 */
-	protected char[][][] fMethodParameterTypes;
+	protected char[][][] methodParameterTypes;
 	
 
 	/**
@@ -208,8 +203,8 @@ public class SourceMapper
 			this.rootPaths.add(rootPath);
 		}
 		this.sourcePath = sourcePath;
-		this.fSourceRanges = new HashMap();
-		this.fParameterNames = new HashMap();
+		this.sourceRanges = new HashMap();
+		this.parameterNames = new HashMap();
 		this.importsTable = new HashMap();
 		this.importsCounterTable = new HashMap();
 	}
@@ -279,8 +274,8 @@ public class SourceMapper
 	 * <code>SourceMapper</code> cannot be used again.
 	 */
 	public void close() {
-		fSourceRanges = null;
-		fParameterNames = null;
+		this.sourceRanges = null;
+		this.parameterNames = null;
 	}
 
 	/**
@@ -291,10 +286,10 @@ public class SourceMapper
 	 */
 	private String[] convertTypeNamesToSigs(char[][] typeNames) {
 		if (typeNames == null)
-			return fgEmptyStringArray;
+			return CharOperation.NO_STRINGS;
 		int n = typeNames.length;
 		if (n == 0)
-			return fgEmptyStringArray;
+			return CharOperation.NO_STRINGS;
 		String[] typeSigs = new String[n];
 		for (int i = 0; i < n; ++i) {
 			String typeSig = Signature.createTypeSignature(typeNames[i], false);
@@ -556,33 +551,33 @@ public class SourceMapper
 				0,
 				this.typeDepth);
 			System.arraycopy(
-				this.fMemberName,
+				this.memberName,
 				0,
-				this.fMemberName = new String[this.typeDepth * 2],
+				this.memberName = new String[this.typeDepth * 2],
 				0,
 				this.typeDepth);
 			System.arraycopy(
-				this.fMemberDeclarationStart,
+				this.memberDeclarationStart,
 				0,
-				this.fMemberDeclarationStart = new int[this.typeDepth * 2],
+				this.memberDeclarationStart = new int[this.typeDepth * 2],
 				0,
 				this.typeDepth);							
 			System.arraycopy(
-				this.fMemberNameRange,
+				this.memberNameRange,
 				0,
-				this.fMemberNameRange = new SourceRange[this.typeDepth * 2],
+				this.memberNameRange = new SourceRange[this.typeDepth * 2],
 				0,
 				this.typeDepth);
 			System.arraycopy(
-				this.fMethodParameterTypes,
+				this.methodParameterTypes,
 				0,
-				this.fMethodParameterTypes = new char[this.typeDepth * 2][][],
+				this.methodParameterTypes = new char[this.typeDepth * 2][][],
 				0,
 				this.typeDepth);
 			System.arraycopy(
-				this.fMethodParameterNames,
+				this.methodParameterNames,
 				0,
-				this.fMethodParameterNames = new char[this.typeDepth * 2][][],
+				this.methodParameterNames = new char[this.typeDepth * 2][][],
 				0,
 				this.typeDepth);					
 		}
@@ -636,10 +631,10 @@ public class SourceMapper
 	 */
 	public void enterField(FieldInfo fieldInfo) {
 		if (typeDepth >= 0) {
-			fMemberDeclarationStart[typeDepth] = fieldInfo.declarationStart;
-			fMemberNameRange[typeDepth] =
+			this.memberDeclarationStart[typeDepth] = fieldInfo.declarationStart;
+			this.memberNameRange[typeDepth] =
 				new SourceRange(fieldInfo.nameSourceStart, fieldInfo.nameSourceEnd - fieldInfo.nameSourceStart + 1);
-			fMemberName[typeDepth] = new String(fieldInfo.name);
+			this.memberName[typeDepth] = new String(fieldInfo.name);
 		}
 	}
 	
@@ -660,18 +655,18 @@ public class SourceMapper
 	}
 	private void enterAbstractMethod(MethodInfo methodInfo) {
 		if (typeDepth >= 0) {
-			fMemberName[typeDepth] = new String(methodInfo.name);
-			fMemberNameRange[typeDepth] =
+			this.memberName[typeDepth] = new String(methodInfo.name);
+			this.memberNameRange[typeDepth] =
 				new SourceRange(methodInfo.nameSourceStart, methodInfo.nameSourceEnd - methodInfo.nameSourceStart + 1);
-			fMemberDeclarationStart[typeDepth] = methodInfo.declarationStart;
-			fMethodParameterTypes[typeDepth] = methodInfo.parameterTypes;
-			fMethodParameterNames[typeDepth] = methodInfo. parameterNames;
+			this.memberDeclarationStart[typeDepth] = methodInfo.declarationStart;
+			this.methodParameterTypes[typeDepth] = methodInfo.parameterTypes;
+			this.methodParameterNames[typeDepth] = methodInfo. parameterNames;
 			
 			if (methodInfo.typeParameters != null) {
 				final IType currentType = this.types[typeDepth];
 				IMethod method = currentType.getMethod(
-						fMemberName[typeDepth],
-						convertTypeNamesToSigs(fMethodParameterTypes[typeDepth]));
+						this.memberName[typeDepth],
+						convertTypeNamesToSigs(this.methodParameterTypes[typeDepth]));
 				if (method == null) return;
 				
 				for (int i = 0, length = methodInfo.typeParameters.length; i < length; i++) {
@@ -727,11 +722,11 @@ public class SourceMapper
 		if (typeDepth >= 0) {
 			IType currentType = this.types[typeDepth];
 			setSourceRange(
-				currentType.getField(fMemberName[typeDepth]),
+				currentType.getField(this.memberName[typeDepth]),
 				new SourceRange(
-					fMemberDeclarationStart[typeDepth],
-					declarationEnd - fMemberDeclarationStart[typeDepth] + 1),
-				fMemberNameRange[typeDepth]);
+					this.memberDeclarationStart[typeDepth],
+					declarationEnd - this.memberDeclarationStart[typeDepth] + 1),
+				this.memberNameRange[typeDepth]);
 		}
 	}
 	
@@ -753,18 +748,18 @@ public class SourceMapper
 			IType currentType = this.types[typeDepth];
 			SourceRange sourceRange =
 				new SourceRange(
-					fMemberDeclarationStart[typeDepth],
-					declarationEnd - fMemberDeclarationStart[typeDepth] + 1);
+					this.memberDeclarationStart[typeDepth],
+					declarationEnd - this.memberDeclarationStart[typeDepth] + 1);
 			IMethod method = currentType.getMethod(
-					fMemberName[typeDepth],
-					convertTypeNamesToSigs(fMethodParameterTypes[typeDepth]));
+					this.memberName[typeDepth],
+					convertTypeNamesToSigs(this.methodParameterTypes[typeDepth]));
 			setSourceRange(
 				method,
 				sourceRange,
-				fMemberNameRange[typeDepth]);
+				this.memberNameRange[typeDepth]);
 			setMethodParameterNames(
 				method,
-				fMethodParameterNames[typeDepth]);
+				this.methodParameterNames[typeDepth]);
 		}
 	}
 	
@@ -907,7 +902,7 @@ public class SourceMapper
 			case IJavaElement.METHOD :
 				if (((IMember) element).isBinary()) {
 					IJavaElement[] el = getUnqualifiedMethodHandle((IMethod) element, false);
-					if(el[1] != null && fSourceRanges.get(el[0]) == null) {
+					if(el[1] != null && this.sourceRanges.get(el[0]) == null) {
 						element = getUnqualifiedMethodHandle((IMethod) element, true)[0];
 					} else {
 						element = el[0];
@@ -920,7 +915,7 @@ public class SourceMapper
 					IMethod method = (IMethod) parent;
 					if (method.isBinary()) {
 						IJavaElement[] el = getUnqualifiedMethodHandle(method, false);
-						if(el[1] != null && fSourceRanges.get(el[0]) == null) {
+						if(el[1] != null && this.sourceRanges.get(el[0]) == null) {
 							method = (IMethod) getUnqualifiedMethodHandle(method, true)[0];
 						} else {
 							method = (IMethod) el[0];
@@ -929,9 +924,9 @@ public class SourceMapper
 					}
 				}
 		}
-		SourceRange[] ranges = (SourceRange[]) fSourceRanges.get(element);
+		SourceRange[] ranges = (SourceRange[]) this.sourceRanges.get(element);
 		if (ranges == null) {
-			return fgUnknownRange;
+			return UNKNOWN_RANGE;
 		} else {
 			return ranges[1];
 		}
@@ -944,17 +939,17 @@ public class SourceMapper
 	public char[][] getMethodParameterNames(IMethod method) {
 		if (method.isBinary()) {
 			IJavaElement[] el = getUnqualifiedMethodHandle(method, false);
-			if(el[1] != null && fParameterNames.get(el[0]) == null) {
+			if(el[1] != null && this.parameterNames.get(el[0]) == null) {
 				method = (IMethod) getUnqualifiedMethodHandle(method, true)[0];
 			} else {
 				method = (IMethod) el[0];
 			}
 		}
-		char[][] parameterNames = (char[][]) fParameterNames.get(method);
-		if (parameterNames == null) {
+		char[][] parameters = (char[][]) this.parameterNames.get(method);
+		if (parameters == null) {
 			return null;
 		} else {
-			return parameterNames;
+			return parameters;
 		}
 	}
 	
@@ -967,7 +962,7 @@ public class SourceMapper
 			case IJavaElement.METHOD :
 				if (((IMember) element).isBinary()) {
 					IJavaElement[] el = getUnqualifiedMethodHandle((IMethod) element, false);
-					if(el[1] != null && fSourceRanges.get(el[0]) == null) {
+					if(el[1] != null && this.sourceRanges.get(el[0]) == null) {
 						element = getUnqualifiedMethodHandle((IMethod) element, true)[0];
 					} else {
 						element = el[0];
@@ -980,7 +975,7 @@ public class SourceMapper
 					IMethod method = (IMethod) parent;
 					if (method.isBinary()) {
 						IJavaElement[] el = getUnqualifiedMethodHandle(method, false);
-						if(el[1] != null && fSourceRanges.get(el[0]) == null) {
+						if(el[1] != null && this.sourceRanges.get(el[0]) == null) {
 							method = (IMethod) getUnqualifiedMethodHandle(method, true)[0];
 						} else {
 							method = (IMethod) el[0];
@@ -989,9 +984,9 @@ public class SourceMapper
 					}
 				}
 		}
-		SourceRange[] ranges = (SourceRange[]) fSourceRanges.get(element);
+		SourceRange[] ranges = (SourceRange[]) this.sourceRanges.get(element);
 		if (ranges == null) {
-			return fgUnknownRange;
+			return UNKNOWN_RANGE;
 		} else {
 			return ranges[0];
 		}
@@ -1102,7 +1097,7 @@ public class SourceMapper
 		this.binaryType = (BinaryType) type;
 		
 		// check whether it is already mapped
-		if (this.fSourceRanges.get(type) != null) return (elementToFind != null) ? this.getNameRange(elementToFind) : null;
+		if (this.sourceRanges.get(type) != null) return (elementToFind != null) ? getNameRange(elementToFind) : null;
 		
 		this.importsTable.remove(this.binaryType);
 		this.importsCounterTable.remove(this.binaryType);
@@ -1111,14 +1106,14 @@ public class SourceMapper
 		this.typeDeclarationStarts = new int[1];
 		this.typeNameRanges = new SourceRange[1];
 		this.typeDepth = -1;
-		this.fMemberDeclarationStart = new int[1];
-		this.fMemberName = new String[1];
-		this.fMemberNameRange = new SourceRange[1];
-		this.fMethodParameterTypes = new char[1][][];
-		this.fMethodParameterNames = new char[1][][];
+		this.memberDeclarationStart = new int[1];
+		this.memberName = new String[1];
+		this.memberNameRange = new SourceRange[1];
+		this.methodParameterTypes = new char[1][][];
+		this.methodParameterNames = new char[1][][];
 		this.anonymousCounter = 0;
 		
-		HashMap oldSourceRanges = (HashMap) fSourceRanges.clone();
+		HashMap oldSourceRanges = (HashMap) this.sourceRanges.clone();
 		try {
 			IProblemFactory factory = new DefaultProblemFactory();
 			SourceElementParser parser = null;
@@ -1158,7 +1153,7 @@ public class SourceMapper
 			}
 		} finally {
 			if (elementToFind != null) {
-				fSourceRanges = oldSourceRanges;
+				this.sourceRanges = oldSourceRanges;
 			}
 			this.binaryType = null;
 			this.searchedElement = null;
@@ -1183,7 +1178,7 @@ public class SourceMapper
 	/** 
 	 * Sets the mapping for this method to its parameter names.
 	 *
-	 * @see #fParameterNames
+	 * @see #parameterNames
 	 */
 	protected void setMethodParameterNames(
 		IMethod method,
@@ -1191,20 +1186,20 @@ public class SourceMapper
 		if (parameterNames == null) {
 			parameterNames = CharOperation.NO_CHAR_CHAR;
 		}
-		fParameterNames.put(method, parameterNames);
+		this.parameterNames.put(method, parameterNames);
 	}
 	
 	/** 
 	 * Sets the mapping for this element to its source ranges for its source range
 	 * and name range.
 	 *
-	 * @see #fSourceRanges
+	 * @see #sourceRanges
 	 */
 	protected void setSourceRange(
 		IJavaElement element,
 		SourceRange sourceRange,
 		SourceRange nameRange) {
-		fSourceRanges.put(element, new SourceRange[] { sourceRange, nameRange });
+		this.sourceRanges.put(element, new SourceRange[] { sourceRange, nameRange });
 	}
 
 	/**
