diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
index c0ae0ef..7beb681 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
@@ -97,91 +97,92 @@ import org.eclipse.jdt.internal.compiler.lookup.ProblemReasons;
  */
 public interface IProblem { 
 	
-	/**
-	 * Answer back the original arguments recorded into the problem.
-	 * @return the original arguments recorded into the problem
-	 */
-	String[] getArguments();
+/**
+ * Answer back the original arguments recorded into the problem.
+ * @return the original arguments recorded into the problem
+ */
+String[] getArguments();
 
-	/**
-	 * Returns the problem id
-	 * 
-	 * @return the problem id
-	 */
-	int getID();
+/**
+ * Returns the problem id
+ * 
+ * @return the problem id
+ */
+int getID();
 
-	/**
-	 * Answer a localized, human-readable message string which describes the problem.
-	 * 
-	 * @return a localized, human-readable message string which describes the problem
-	 */
-	String getMessage();
+/**
+ * Answer a localized, human-readable message string which describes the problem.
+ * 
+ * @return a localized, human-readable message string which describes the problem
+ */
+String getMessage();
 
-	/**
-	 * Answer the file name in which the problem was found.
-	 * 
-	 * @return the file name in which the problem was found
-	 */
-	char[] getOriginatingFileName();
-	
-	/**
-	 * Answer the end position of the problem (inclusive), or -1 if unknown.
-	 * 
-	 * @return the end position of the problem (inclusive), or -1 if unknown
-	 */
-	int getSourceEnd();
+/**
+ * Answer the file name in which the problem was found.
+ * 
+ * @return the file name in which the problem was found
+ */
+char[] getOriginatingFileName();
 
-	/**
-	 * Answer the line number in source where the problem begins.
-	 * 
-	 * @return the line number in source where the problem begins
-	 */
-	int getSourceLineNumber();
+/**
+ * Answer the end position of the problem (inclusive), or -1 if unknown.
+ * 
+ * @return the end position of the problem (inclusive), or -1 if unknown
+ */
+int getSourceEnd();
 
-	/**
-	 * Answer the start position of the problem (inclusive), or -1 if unknown.
-	 * 
-	 * @return the start position of the problem (inclusive), or -1 if unknown
-	 */
-	int getSourceStart();
+/**
+ * Answer the line number in source where the problem begins.
+ * 
+ * @return the line number in source where the problem begins
+ */
+int getSourceLineNumber();
 
-	/**
-	 * Checks the severity to see if the Error bit is set.
-	 * 
-	 * @return true if the Error bit is set for the severity, false otherwise
-	 */
-	boolean isError();
+/**
+ * Answer the start position of the problem (inclusive), or -1 if unknown.
+ * 
+ * @return the start position of the problem (inclusive), or -1 if unknown
+ */
+int getSourceStart();
 
-	/**
-	 * Checks the severity to see if the Error bit is not set.
-	 * 
-	 * @return true if the Error bit is not set for the severity, false otherwise
-	 */
-	boolean isWarning();
+/**
+ * Checks the severity to see if the Error bit is set.
+ * 
+ * @return true if the Error bit is set for the severity, false otherwise
+ */
+boolean isError();
 
-	/**
-	 * Set the end position of the problem (inclusive), or -1 if unknown.
-	 * Used for shifting problem positions.
-	 * 
-	 * @param sourceEnd the given end position
-	 */
-	void setSourceEnd(int sourceEnd);
+/**
+ * Checks the severity to see if the Error bit is not set.
+ * 
+ * @return true if the Error bit is not set for the severity, false otherwise
+ */
+boolean isWarning();
+
+/**
+ * Set the end position of the problem (inclusive), or -1 if unknown.
+ * Used for shifting problem positions.
+ * 
+ * @param sourceEnd the given end position
+ */
+void setSourceEnd(int sourceEnd);
+
+/**
+ * Set the line number in source where the problem begins.
+ * 
+ * @param lineNumber the given line number
+ */
+void setSourceLineNumber(int lineNumber);
+
+/**
+ * Set the start position of the problem (inclusive), or -1 if unknown.
+ * Used for shifting problem positions.
+ * 
+ * @param sourceStart the given start position
+ */
+void setSourceStart(int sourceStart);
 
-	/**
-	 * Set the line number in source where the problem begins.
-	 * 
-	 * @param lineNumber the given line number
-	 */
-	void setSourceLineNumber(int lineNumber);
 
-	/**
-	 * Set the start position of the problem (inclusive), or -1 if unknown.
-	 * Used for shifting problem positions.
-	 * 
-	 * @param sourceStart the given start position
-	 */
-	void setSourceStart(int sourceStart);
-	
 	/**
 	 * Problem Categories
 	 * The high bits of a problem ID contains information about the category of a problem.
