diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java
index 0447e26..c2e07d5 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java
@@ -95,7 +95,7 @@ static {
 //	JavaModelManager.VERBOSE = true;
 //	org.eclipse.jdt.internal.core.search.BasicSearchEngine.VERBOSE = true;
 //	TESTS_PREFIX = "testIgnoreIfBetterNonAccessibleRule";
-//	TESTS_NAMES = new String[] { "testCategories4" };
+//	TESTS_NAMES = new String[] { "testTypeWithDollarName2" };
 //	TESTS_NUMBERS = new int[] { 118823 };
 //	TESTS_RANGE = new int[] { 16, -1 };
 }
@@ -2666,6 +2666,38 @@ public void testTypeWithDollarName() throws CoreException {
 	}
 }
 /*
+ * Ensures that a working copy with a type with a dollar name can be reconciled against without errors.
+ * (regression test for bug 125301 Handling of classes with $ in class name.)
+ */
+public void testTypeWithDollarName2() throws CoreException {
+	ICompilationUnit workingCopy2 = null; 
+	try {
+		workingCopy2 = getWorkingCopy(
+			"/Reconciler/src/p1/Y$Z.java",
+			"package p1;\n" +
+			"public class Y$Z {\n" +
+			"}",
+			this.workingCopy.getOwner(),
+			false/*don't compute problems*/
+		);
+		setWorkingCopyContents(
+			"package p1;\n" +
+			"public class X {\n" +
+			"  Y$Z field;\n" +
+			"}"
+		);
+		this.workingCopy.reconcile(ICompilationUnit.NO_AST, false, null, null);
+		assertProblems(
+			"Unexpected problems",
+			"----------\n" + 
+			"----------\n"
+		);
+	} finally {
+		if (workingCopy2 != null)
+			workingCopy2.discardWorkingCopy();
+	}
+}
+/*
  * Ensures that a varargs method can be referenced from another working copy.
  */
 public void testVarargs() throws CoreException {
