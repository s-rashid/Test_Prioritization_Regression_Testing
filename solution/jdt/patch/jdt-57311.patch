diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/LRUCache.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/LRUCache.java
index 405afa5..2dd3d04 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/LRUCache.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/LRUCache.java
@@ -10,6 +10,7 @@
  *******************************************************************************/
 package org.eclipse.jdt.internal.core.util;
 
+import java.text.NumberFormat;
 import java.util.Enumeration;
 import java.util.Hashtable;
 
@@ -160,6 +161,9 @@ public class LRUCache implements Cloneable {
 		}
 		return newCache;
 	}
+	public double fillingRatio() {
+		return (fCurrentSpace) * 100.0 / fSpaceLimit;
+	}
 	/**
 	 * Flushes all entries from the cache.
 	 */
@@ -290,6 +294,20 @@ public class LRUCache implements Cloneable {
 		return new LRUCache(size);
 	}
 	/**
+	 * Answers the value in the cache at the given key.
+	 * If the value is not in the cache, returns null
+	 *
+	 * This function does not modify timestamps.
+	 */
+	public Object peek(Object key) {
+		
+		LRUCacheEntry entry = (LRUCacheEntry) fEntryTable.get(key);
+		if (entry == null) {
+			return null;
+		}
+		return entry._fValue;
+	}
+	/**
 	 * Adds an entry for the given key/value/space.
 	 */
 	protected void privateAdd (Object key, Object value, int space) {
@@ -443,45 +461,57 @@ public class LRUCache implements Cloneable {
 			return 1;
 		}
 	}
-/**
- * Returns a String that represents the value of this object.  This method
- * is for debugging purposes only.
- */
-public String toString() {
-	return 
-		"LRUCache " + (fCurrentSpace * 100.0 / fSpaceLimit) + "% full\n" + //$NON-NLS-1$ //$NON-NLS-2$
-		this.toStringContents();
-}
-/**
- * Returns a String that represents the contents of this object.  This method
- * is for debugging purposes only.
- */
-protected String toStringContents() {
-	StringBuffer result = new StringBuffer();
-	int length = fEntryTable.size();
-	Object[] unsortedKeys = new Object[length];
-	String[] unsortedToStrings = new String[length];
-	Enumeration e = this.keys();
-	for (int i = 0; i < length; i++) {
-		Object key = e.nextElement();
-		unsortedKeys[i] = key;
-		unsortedToStrings[i] = 
-			(key instanceof org.eclipse.jdt.internal.core.JavaElement) ?
-				((org.eclipse.jdt.internal.core.JavaElement)key).getElementName() :
-				key.toString();
+	/**
+	 * Returns a String that represents the value of this object.  This method
+	 * is for debugging purposes only.
+	 */
+	public String toString() {
+		return 
+			toStringFillingRation("LRUCache") + //$NON-NLS-1$
+			toStringContents();
+	}
+	
+	/**
+	 * Returns a String that represents the contents of this object.  This method
+	 * is for debugging purposes only.
+	 */
+	protected String toStringContents() {
+		StringBuffer result = new StringBuffer();
+		int length = fEntryTable.size();
+		Object[] unsortedKeys = new Object[length];
+		String[] unsortedToStrings = new String[length];
+		Enumeration e = this.keys();
+		for (int i = 0; i < length; i++) {
+			Object key = e.nextElement();
+			unsortedKeys[i] = key;
+			unsortedToStrings[i] = 
+				(key instanceof org.eclipse.jdt.internal.core.JavaElement) ?
+					((org.eclipse.jdt.internal.core.JavaElement)key).getElementName() :
+					key.toString();
+		}
+		ToStringSorter sorter = new ToStringSorter();
+		sorter.sort(unsortedKeys, unsortedToStrings);
+		for (int i = 0; i < length; i++) {
+			String toString = sorter.sortedStrings[i];
+			Object value = this.get(sorter.sortedObjects[i]);
+			result.append(toString);		
+			result.append(" -> "); //$NON-NLS-1$
+			result.append(value);
+			result.append("\n"); //$NON-NLS-1$
+		}
+		return result.toString();
 	}
-	ToStringSorter sorter = new ToStringSorter();
-	sorter.sort(unsortedKeys, unsortedToStrings);
-	for (int i = 0; i < length; i++) {
-		String toString = sorter.sortedStrings[i];
-		Object value = this.get(sorter.sortedObjects[i]);
-		result.append(toString);		
-		result.append(" -> "); //$NON-NLS-1$
-		result.append(value);
-		result.append("\n"); //$NON-NLS-1$
+	
+	public String toStringFillingRation(String cacheName) {
+		StringBuffer buffer = new StringBuffer(cacheName);
+		buffer.append('[');
+		buffer.append(getSpaceLimit());
+		buffer.append("]: "); //$NON-NLS-1$
+		buffer.append(NumberFormat.getInstance().format(fillingRatio()));
+		buffer.append("% full"); //$NON-NLS-1$
+		return buffer.toString();
 	}
-	return result.toString();
-}
+
 	/**
 	 * Updates the timestamp for the given entry, ensuring that the queue is 
 	 * kept in correct order.  The entry must exist
