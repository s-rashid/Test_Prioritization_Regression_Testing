diff --git a/org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiProjectTests.java b/org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiProjectTests.java
index a5b5ac3..dc00f44 100644
--- a/org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiProjectTests.java
+++ b/org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiProjectTests.java
@@ -20,6 +20,7 @@ import org.eclipse.core.runtime.Path;
 import org.eclipse.jdt.core.IAccessRule;
 import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.JavaModelException;
+import org.eclipse.jdt.core.compiler.CategorizedProblem;
 import org.eclipse.jdt.core.tests.util.Util;
 
 
@@ -205,7 +206,7 @@ public class MultiProjectTests extends Tests {
 			);
 			
 		incrementalBuild();
-		expectingSpecificProblemFor(b, new Problem("B.foo()", "x cannot be resolved or is not a field", b)); //$NON-NLS-1$ //$NON-NLS-2$
+		expectingSpecificProblemFor(b, new Problem("B.foo()", "x cannot be resolved or is not a field", b, 61, 62, CategorizedProblem.CAT_MEMBER)); //$NON-NLS-1$ //$NON-NLS-2$
 	}
 	
 	public void testCompileOrder() throws JavaModelException {
@@ -272,9 +273,9 @@ public class MultiProjectTests extends Tests {
 		expectingCompilingOrder(new String[]{"p1.X", "p3.Z", "p2.Y"}); //$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$
 		IPath workspaceRootPath = env.getWorkspaceRootPath();
 		expectingOnlySpecificProblemsFor(workspaceRootPath,new Problem[]{
-				new Problem("p3", "W cannot be resolved to a type", c3),//$NON-NLS-1$ //$NON-NLS-2$
-				new Problem("p2", "W cannot be resolved to a type", c2),//$NON-NLS-1$ //$NON-NLS-2$
-				new Problem("p1", "W cannot be resolved to a type", c1)//$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("p3", "W cannot be resolved to a type", c3, 31, 32, CategorizedProblem.CAT_TYPE),//$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("p2", "W cannot be resolved to a type", c2, 31, 32, CategorizedProblem.CAT_TYPE),//$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("p1", "W cannot be resolved to a type", c1, 31, 32, CategorizedProblem.CAT_TYPE)//$NON-NLS-1$ //$NON-NLS-2$
 		});	
 		JavaCore.setOptions(options);
 	}
@@ -363,9 +364,9 @@ public class MultiProjectTests extends Tests {
 			fullBuild();
 			
 			expectingCompilingOrder(new String[]{"p1.X", "p2.Y", "p3.Z", "p1.X", "p2.Y", "p3.Z", "p1.X"});//$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$//$NON-NLS-4$//$NON-NLS-5$//$NON-NLS-6$//$NON-NLS-7$
-			expectingOnlySpecificProblemFor(p1,new Problem("p1", "A cycle was detected in the build path of project: P1", p1));//$NON-NLS-1$ //$NON-NLS-2$
-			expectingOnlySpecificProblemFor(p2,new Problem("p2", "A cycle was detected in the build path of project: P2", p2));//$NON-NLS-1$ //$NON-NLS-2$
-			expectingOnlySpecificProblemFor(p3,new Problem("p3", "A cycle was detected in the build path of project: P3", p3));//$NON-NLS-1$ //$NON-NLS-2$
+			expectingOnlySpecificProblemFor(p1,new Problem("p1", "A cycle was detected in the build path of project: P1", p1, -1, -1, -1));//$NON-NLS-1$ //$NON-NLS-2$
+			expectingOnlySpecificProblemFor(p2,new Problem("p2", "A cycle was detected in the build path of project: P2", p2, -1, -1, -1));//$NON-NLS-1$ //$NON-NLS-2$
+			expectingOnlySpecificProblemFor(p3,new Problem("p3", "A cycle was detected in the build path of project: P3", p3, -1, -1, -1));//$NON-NLS-1$ //$NON-NLS-2$
 			
 			JavaCore.setOptions(options);
 		} finally {
@@ -457,12 +458,12 @@ public class MultiProjectTests extends Tests {
 			fullBuild();
 			
 			expectingCompilingOrder(new String[]{"p1.X", "p2.Y", "p3.Z", "p1.X", "p2.Y", "p3.Z", "p1.X"});//$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$ //$NON-NLS-4$//$NON-NLS-5$ //$NON-NLS-6$//$NON-NLS-7$
-			expectingOnlySpecificProblemFor(p1,new Problem("p1", "A cycle was detected in the build path of project: P1", p1));//$NON-NLS-1$ //$NON-NLS-2$
+			expectingOnlySpecificProblemFor(p1,new Problem("p1", "A cycle was detected in the build path of project: P1", p1, -1, -1, -1));//$NON-NLS-1$ //$NON-NLS-2$
 			expectingOnlySpecificProblemsFor(p2,new Problem[]{
-					new Problem("p2", "The method bar(Y, int) in the type X is not applicable for the arguments (Y)", c2),//$NON-NLS-1$ //$NON-NLS-2$
-					new Problem("p2", "A cycle was detected in the build path of project: P2", p2)//$NON-NLS-1$ //$NON-NLS-2$
+					new Problem("p2", "The method bar(Y, int) in the type X is not applicable for the arguments (Y)", c2, 106, 109, CategorizedProblem.CAT_MEMBER),//$NON-NLS-1$ //$NON-NLS-2$
+					new Problem("p2", "A cycle was detected in the build path of project: P2", p2, -1, -1, -1)//$NON-NLS-1$ //$NON-NLS-2$
 			});
-			expectingOnlySpecificProblemFor(p3,new Problem("p3", "A cycle was detected in the build path of project: P3", p3));//$NON-NLS-1$ //$NON-NLS-2$
+			expectingOnlySpecificProblemFor(p3,new Problem("p3", "A cycle was detected in the build path of project: P3", p3, -1, -1, -1));//$NON-NLS-1$ //$NON-NLS-2$
 			
 			JavaCore.setOptions(options);
 		} finally {
@@ -554,9 +555,9 @@ public class MultiProjectTests extends Tests {
 			fullBuild();
 			
 			expectingCompilingOrder(new String[]{"p1.X", "p2.Y", "p3.Z", "p1.X", "p2.Y", "p3.Z", "p1.X"});//$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$ //$NON-NLS-4$//$NON-NLS-5$ //$NON-NLS-6$//$NON-NLS-7$
-			expectingOnlySpecificProblemFor(p1,new Problem("p1", "A cycle was detected in the build path of project: P1", p1));//$NON-NLS-1$ //$NON-NLS-2$
-			expectingOnlySpecificProblemFor(p2,new Problem("p2", "A cycle was detected in the build path of project: P2", p2));//$NON-NLS-1$ //$NON-NLS-2$
-			expectingOnlySpecificProblemFor(p3,new Problem("p3", "A cycle was detected in the build path of project: P3", p3));//$NON-NLS-1$ //$NON-NLS-2$
+			expectingOnlySpecificProblemFor(p1,new Problem("p1", "A cycle was detected in the build path of project: P1", p1, -1, -1, -1));//$NON-NLS-1$ //$NON-NLS-2$
+			expectingOnlySpecificProblemFor(p2,new Problem("p2", "A cycle was detected in the build path of project: P2", p2, -1, -1, -1));//$NON-NLS-1$ //$NON-NLS-2$
+			expectingOnlySpecificProblemFor(p3,new Problem("p3", "A cycle was detected in the build path of project: P3", p3, -1, -1, -1));//$NON-NLS-1$ //$NON-NLS-2$
 			
 			env.addClass(root1, "p1", "X", //$NON-NLS-1$ //$NON-NLS-2$
 				"package p1;\n"+ //$NON-NLS-1$
@@ -570,12 +571,12 @@ public class MultiProjectTests extends Tests {
 			incrementalBuild();
 			
 			expectingCompilingOrder(new String[]{"p1.X", "p2.Y", "p3.Z"}); //$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$ 
-			expectingOnlySpecificProblemFor(p1,new Problem("p1", "A cycle was detected in the build path of project: P1", p1));//$NON-NLS-1$ //$NON-NLS-2$
+			expectingOnlySpecificProblemFor(p1,new Problem("p1", "A cycle was detected in the build path of project: P1", p1, -1, -1, -1));//$NON-NLS-1$ //$NON-NLS-2$
 			expectingOnlySpecificProblemsFor(p2,new Problem[]{
-					new Problem("p2", "The method bar(Y, int) in the type X is not applicable for the arguments (Y)", c2),//$NON-NLS-1$ //$NON-NLS-2$
-					new Problem("p2", "A cycle was detected in the build path of project: P2", p2)//$NON-NLS-1$ //$NON-NLS-2$
+					new Problem("p2", "The method bar(Y, int) in the type X is not applicable for the arguments (Y)", c2, 106, 109, CategorizedProblem.CAT_MEMBER),//$NON-NLS-1$ //$NON-NLS-2$
+					new Problem("p2", "A cycle was detected in the build path of project: P2", p2, -1, -1, -1)//$NON-NLS-1$ //$NON-NLS-2$
 			});
-			expectingOnlySpecificProblemFor(p3,new Problem("p3", "A cycle was detected in the build path of project: P3", p3));//$NON-NLS-1$ //$NON-NLS-2$
+			expectingOnlySpecificProblemFor(p3,new Problem("p3", "A cycle was detected in the build path of project: P3", p3, -1, -1, -1));//$NON-NLS-1$ //$NON-NLS-2$
 	
 			JavaCore.setOptions(options);
 		} finally {
@@ -656,18 +657,18 @@ public class MultiProjectTests extends Tests {
 			fullBuild();
 			
 			expectingCompilingOrder(new String[]{"p2.Y", "p3.Z", "p2.Y"});//$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$
-			expectingOnlySpecificProblemFor(p1,new Problem("p1", "A cycle was detected in the build path of project: P1", p1));//$NON-NLS-1$ //$NON-NLS-2$
+			expectingOnlySpecificProblemFor(p1,new Problem("p1", "A cycle was detected in the build path of project: P1", p1, -1, -1, -1));//$NON-NLS-1$ //$NON-NLS-2$
 			expectingOnlySpecificProblemsFor(p2,new Problem[]{
-				new Problem("p2", "The import p1 cannot be resolved", c2),//$NON-NLS-1$ //$NON-NLS-2$
-				new Problem("p2", "X cannot be resolved to a type", c2),//$NON-NLS-1$ //$NON-NLS-2$
-				new Problem("p2", "X cannot be resolved to a type", c2),//$NON-NLS-1$ //$NON-NLS-2$
-				new Problem("p2", "The method foo() is undefined for the type Y", c2),//$NON-NLS-1$ //$NON-NLS-2$
-				new Problem("p2", "A cycle was detected in the build path of project: P2", p2)//$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("p2", "The import p1 cannot be resolved", c2, 19, 21, CategorizedProblem.CAT_IMPORT),//$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("p2", "X cannot be resolved to a type", c2, 73, 74, CategorizedProblem.CAT_TYPE),//$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("p2", "X cannot be resolved to a type", c2, 87, 88, CategorizedProblem.CAT_TYPE),//$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("p2", "The method foo() is undefined for the type Y", c2, 93, 96, CategorizedProblem.CAT_MEMBER),//$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("p2", "A cycle was detected in the build path of project: P2", p2, -1, -1, -1)//$NON-NLS-1$ //$NON-NLS-2$
 			});
 			expectingOnlySpecificProblemsFor(p3,new Problem[]{
-				new Problem("p3", "X cannot be resolved to a type", c3),//$NON-NLS-1$ //$NON-NLS-2$
-				new Problem("p3", "The import p1 cannot be resolved", c3),//$NON-NLS-1$ //$NON-NLS-2$
-				new Problem("p3", "A cycle was detected in the build path of project: P3", p3)//$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("p3", "X cannot be resolved to a type", c3, 51, 52, CategorizedProblem.CAT_TYPE),//$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("p3", "The import p1 cannot be resolved", c3, 19, 21, CategorizedProblem.CAT_IMPORT),//$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("p3", "A cycle was detected in the build path of project: P3", p3, -1, -1, -1)//$NON-NLS-1$ //$NON-NLS-2$
 			});
 	
 			env.addClass(root1, "p1", "X", //$NON-NLS-1$ //$NON-NLS-2$
@@ -681,9 +682,9 @@ public class MultiProjectTests extends Tests {
 				);
 			incrementalBuild();
 			expectingCompilingOrder(new String[]{"p1.X", "p2.Y", "p3.Z", "p1.X", "p2.Y"}); //$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$ //$NON-NLS-4$//$NON-NLS-5$ 
-			expectingOnlySpecificProblemFor(p1,new Problem("p1", "A cycle was detected in the build path of project: P1", p1));//$NON-NLS-1$ //$NON-NLS-2$
-			expectingOnlySpecificProblemFor(p2,new Problem("p2", "A cycle was detected in the build path of project: P2", p2));//$NON-NLS-1$ //$NON-NLS-2$
-			expectingOnlySpecificProblemFor(p3,new Problem("p3", "A cycle was detected in the build path of project: P3", p3));//$NON-NLS-1$ //$NON-NLS-2$
+			expectingOnlySpecificProblemFor(p1,new Problem("p1", "A cycle was detected in the build path of project: P1", p1, -1, -1, -1));//$NON-NLS-1$ //$NON-NLS-2$
+			expectingOnlySpecificProblemFor(p2,new Problem("p2", "A cycle was detected in the build path of project: P2", p2, -1, -1, -1));//$NON-NLS-1$ //$NON-NLS-2$
+			expectingOnlySpecificProblemFor(p3,new Problem("p3", "A cycle was detected in the build path of project: P3", p3, -1, -1, -1));//$NON-NLS-1$ //$NON-NLS-2$
 	
 			JavaCore.setOptions(options);
 		} finally {
@@ -748,12 +749,12 @@ public class MultiProjectTests extends Tests {
 			
 			expectingCompilingOrder(new String[]{"p1.X", "p2.Y", "p1.X", "p2.Y"});//$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$ //$NON-NLS-4$ 
 			expectingOnlySpecificProblemsFor(p1,new Problem[]{
-				new Problem("p1", "The import p22 cannot be resolved", c1),//$NON-NLS-1$ //$NON-NLS-2$
-				new Problem("p1", "A cycle was detected in the build path of project: P1", p1)//$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("p1", "The import p22 cannot be resolved", c1, 32, 35, CategorizedProblem.CAT_IMPORT),//$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("p1", "A cycle was detected in the build path of project: P1", p1, -1, -1, -1)//$NON-NLS-1$ //$NON-NLS-2$
 			});
 			expectingOnlySpecificProblemsFor(p2,new Problem[]{
-				new Problem("p2", "The import p11 cannot be resolved", c2),//$NON-NLS-1$ //$NON-NLS-2$
-				new Problem("p2", "A cycle was detected in the build path of project: P2", p2)//$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("p2", "The import p11 cannot be resolved", c2, 32, 35, CategorizedProblem.CAT_IMPORT),//$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("p2", "A cycle was detected in the build path of project: P2", p2, -1, -1, -1)//$NON-NLS-1$ //$NON-NLS-2$
 			});
 			
 			env.addClass(root1, "p11", "XX", //$NON-NLS-1$ //$NON-NLS-2$
@@ -771,12 +772,12 @@ public class MultiProjectTests extends Tests {
 			
 			expectingCompilingOrder(new String[]{"p11.XX", "p22.YY", "p2.Y", "p1.X"});//$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$ //$NON-NLS-4$
 			expectingOnlySpecificProblemsFor(p1,new Problem[]{
-				new Problem("p1", "The import p22 is never used", c1),//$NON-NLS-1$ //$NON-NLS-2$
-				new Problem("p1", "A cycle was detected in the build path of project: P1", p1)//$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("p1", "The import p22 is never used", c1, 32, 35, CategorizedProblem.CAT_UNNECESSARY_CODE),//$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("p1", "A cycle was detected in the build path of project: P1", p1, -1, -1, -1)//$NON-NLS-1$ //$NON-NLS-2$
 			});
 			expectingOnlySpecificProblemsFor(p2,new Problem[]{
-				new Problem("p2", "The import p11 is never used", c2),//$NON-NLS-1$ //$NON-NLS-2$
-				new Problem("p2", "A cycle was detected in the build path of project: P2", p2)//$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("p2", "The import p11 is never used", c2, 32, 35, CategorizedProblem.CAT_UNNECESSARY_CODE),//$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("p2", "A cycle was detected in the build path of project: P2", p2, -1, -1, -1)//$NON-NLS-1$ //$NON-NLS-2$
 			});
 			
 			JavaCore.setOptions(options);
@@ -823,7 +824,7 @@ public class MultiProjectTests extends Tests {
 			);
 		
 		fullBuild();
-		expectingSpecificProblemFor(project2Path, new Problem("", "Access restriction: The type B is not accessible due to restriction on required project Project1", d)); //$NON-NLS-1$ //$NON-NLS-2$
+		expectingSpecificProblemFor(project2Path, new Problem("", "Access restriction: The type B is not accessible due to restriction on required project Project1", d, 23, 35, CategorizedProblem.CAT_BUILDPATH)); //$NON-NLS-1$ //$NON-NLS-2$
 	}
 	
 	/*
@@ -874,7 +875,7 @@ public class MultiProjectTests extends Tests {
 			);
 			
 		incrementalBuild();
-		expectingSpecificProblemFor(project2Path, new Problem("", "Access restriction: The type B is not accessible due to restriction on required project Project1", d)); //$NON-NLS-1$ //$NON-NLS-2$
+		expectingSpecificProblemFor(project2Path, new Problem("", "Access restriction: The type B is not accessible due to restriction on required project Project1", d, 23, 35, CategorizedProblem.CAT_BUILDPATH)); //$NON-NLS-1$ //$NON-NLS-2$
 	}
 	
 	/*
@@ -918,7 +919,7 @@ public class MultiProjectTests extends Tests {
 			);
 		
 		fullBuild();
-		expectingSpecificProblemFor(project2Path, new Problem("", "Access restriction: The type B is not accessible due to restriction on required project Project1", d)); //$NON-NLS-1$ //$NON-NLS-2$
+		expectingSpecificProblemFor(project2Path, new Problem("", "Access restriction: The type B is not accessible due to restriction on required project Project1", d, 23, 35, CategorizedProblem.CAT_BUILDPATH)); //$NON-NLS-1$ //$NON-NLS-2$
 		
 		//----------------------------
 		//           Step 2
@@ -968,7 +969,7 @@ public class MultiProjectTests extends Tests {
 			);
 		
 		fullBuild();
-		expectingSpecificProblemFor(project2Path, new Problem("", "Access restriction: The type B is not accessible due to restriction on required project Project1", d)); //$NON-NLS-1$ //$NON-NLS-2$
+		expectingSpecificProblemFor(project2Path, new Problem("", "Access restriction: The type B is not accessible due to restriction on required project Project1", d, 23, 35, CategorizedProblem.CAT_BUILDPATH)); //$NON-NLS-1$ //$NON-NLS-2$
 	}
 	
 	/*
@@ -1019,7 +1020,7 @@ public class MultiProjectTests extends Tests {
 			);
 			
 		incrementalBuild();
-		expectingSpecificProblemFor(project2Path, new Problem("", "Access restriction: The type B is not accessible due to restriction on required project Project1", d)); //$NON-NLS-1$ //$NON-NLS-2$
+		expectingSpecificProblemFor(project2Path, new Problem("", "Access restriction: The type B is not accessible due to restriction on required project Project1", d, 23, 35, CategorizedProblem.CAT_BUILDPATH)); //$NON-NLS-1$ //$NON-NLS-2$
 	}
 	
 	/*
@@ -1063,7 +1064,7 @@ public class MultiProjectTests extends Tests {
 			);
 		
 		fullBuild();
-		expectingSpecificProblemFor(project2Path, new Problem("", "Access restriction: The type B is not accessible due to restriction on required project Project1", d)); //$NON-NLS-1$ //$NON-NLS-2$
+		expectingSpecificProblemFor(project2Path, new Problem("", "Access restriction: The type B is not accessible due to restriction on required project Project1", d, 23, 35, CategorizedProblem.CAT_BUILDPATH)); //$NON-NLS-1$ //$NON-NLS-2$
 		
 		//----------------------------
 		//           Step 2
@@ -1168,7 +1169,7 @@ public class MultiProjectTests extends Tests {
 			);
 
 		fullBuild();
-		expectingSpecificProblemFor(project3Path, new Problem("", "Discouraged access: The type A is not accessible due to restriction on required project Project2", b)); //$NON-NLS-1$ //$NON-NLS-2$
+		expectingSpecificProblemFor(project3Path, new Problem("", "Discouraged access: The type A is not accessible due to restriction on required project Project2", b, 35, 38, CategorizedProblem.CAT_BUILDPATH)); //$NON-NLS-1$ //$NON-NLS-2$
 	}
 	
 	public void testMissingRequiredBinaries() throws JavaModelException {
@@ -1221,8 +1222,8 @@ public class MultiProjectTests extends Tests {
 			fullBuild();
 			
 			expectingOnlySpecificProblemsFor(p1,new Problem[]{
-				new Problem("p1", "The type p3.Z cannot be resolved. It is indirectly referenced from required .class files", x),//$NON-NLS-1$ //$NON-NLS-2$
-				new Problem("p1", "The project was not built since its build path is incomplete. Cannot find the class file for p3.Z. Fix the build path then try building this project", p1)//$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("p1", "The type p3.Z cannot be resolved. It is indirectly referenced from required .class files", x, 48, 49, CategorizedProblem.CAT_BUILDPATH),//$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("p1", "The project was not built since its build path is incomplete. Cannot find the class file for p3.Z. Fix the build path then try building this project", p1, -1, -1, -1)//$NON-NLS-1$ //$NON-NLS-2$
 			});
 		} finally {
 			env.setBuildOrder(null);
