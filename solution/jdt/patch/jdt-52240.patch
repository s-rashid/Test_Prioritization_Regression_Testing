diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchMultipleProjectsTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchMultipleProjectsTests.java
index 216a81fa..9d95e31 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchMultipleProjectsTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchMultipleProjectsTests.java
@@ -36,9 +36,10 @@ public static Test suite() {
 // Use this static initializer to specify subset for tests
 // All specified tests which do not belong to the class are skipped...
 static {
-//	TESTS_NAMES = new String[] { "testMethodOccurences" };
+//	TESTS_NAMES = new String[] { "testJavaSearchScopeBug101426" };
 //	TESTS_NUMBERS = new int[] { 101426 };
 //	TESTS_RANGE = new int[] { 16, -1 };
+//	TESTS_PREFIX = "testScopeEncloses";
 }
 protected void tearDown() throws Exception {
 	// Cleanup caches
@@ -48,13 +49,6 @@ protected void tearDown() throws Exception {
 
 	super.tearDown();
 }
-protected void assertScopeEquals(String expected, IJavaSearchScope scope) {
-	String actual = scope.toString();
-	if (!expected.equals(actual)) {
-		System.out.println(displayString(actual, 3) + ",");
-	}
-	assertEquals("Unexpected scope", expected, actual);
-}
 /**
  * Field occurences in 2 working copies within 2 projects (one prereq this other one).
  * (regression test for bug 41534 incorrect shadowing reported by rename [refactoring])
@@ -359,239 +353,6 @@ public void testHierarchyScope4() throws CoreException {
 		deleteProjects(new String[] {"P0", "P1", "P2", "P3"});
 	}
 }
-/*
- * Ensures that a Java search scope with SOURCES only is correct.
- */
-public void testJavaSearchScope1() throws CoreException {
-	try {
-		IJavaProject project = createJavaProject("P");
-		IJavaSearchScope scope = SearchEngine.createJavaSearchScope(new IJavaElement[] {project}, IJavaSearchScope.SOURCES);
-		assertScopeEquals(
-			"JavaSearchScope on [\n" + 
-			"	/P\n" + 
-			"]",
-			scope);
-	} finally {
-		deleteProject("P");
-	}
-}
-/*
- * Ensures that a Java search scope with APPLICATION_LIBRARIES only is correct
- * (external jar case)
- */
-public void testJavaSearchScope2() throws CoreException {
-	try {
-		IJavaProject project = createJavaProject("P");
-		IJavaSearchScope scope = SearchEngine.createJavaSearchScope(new IJavaElement[] {project}, IJavaSearchScope.APPLICATION_LIBRARIES);
-		assertScopeEquals(
-			"JavaSearchScope on [\n" + 
-			"	"+  getExternalJCLPath().toOSString() +"\n" + 
-			"]",
-			scope);
-	} finally {
-		deleteProject("P");
-	}
-}
-/*
- * Ensures that a Java search scope with APPLICATION_LIBRARIES only is correct
- * (internal jar and class folder cases)
- */
-public void testJavaSearchScope3() throws CoreException {
-	try {
-		IJavaProject project = createJavaProject("P", new String[] {"src"}, new String[] {"/P/internal.jar", "/P/classfolder"}, "bin");
-		IJavaSearchScope scope = SearchEngine.createJavaSearchScope(new IJavaElement[] {project}, IJavaSearchScope.APPLICATION_LIBRARIES);
-		assertScopeEquals(
-			"JavaSearchScope on [\n" + 
-			"	/P/internal.jar\n" + 
-			"	/P/classfolder\n" + 
-			"]",
-			scope);
-	} finally {
-		deleteProject("P");
-	}
-}
-/*
- * Ensures that a Java search scope with APPLICATION_LIBRARIES only is correct
- * (classpath variable case)
- */
-public void testJavaSearchScope4() throws CoreException {
-	try {
-		VariablesInitializer.setInitializer(new ClasspathInitializerTests.DefaultVariableInitializer(new String[] {"TEST_LIB", "/P/lib.jar"}));
-		IJavaProject project = createJavaProject("P", new String[] {}, new String[] {"TEST_LIB"}, "");
-		IJavaSearchScope scope = SearchEngine.createJavaSearchScope(new IJavaElement[] {project}, IJavaSearchScope.APPLICATION_LIBRARIES);
-		assertScopeEquals(
-			"JavaSearchScope on [\n" + 
-			"	/P/lib.jar\n" + 
-			"]",
-			scope);
-	} finally {
-		deleteProject("P");
-		VariablesInitializer.reset();
-	}
-}
-/*
- * Ensures that a Java search scope with APPLICATION_LIBRARIES only is correct
- * (classpath container case)
- */
-public void testJavaSearchScope5() throws CoreException {
-	try {
-		ContainerInitializer.setInitializer(new ClasspathInitializerTests.DefaultContainerInitializer(new String[] {"P", "/P/lib.jar"}));
-		IJavaProject project = createJavaProject("P", new String[] {}, new String[] {"org.eclipse.jdt.core.tests.model.TEST_CONTAINER"}, "");
-		IJavaSearchScope scope = SearchEngine.createJavaSearchScope(new IJavaElement[] {project}, IJavaSearchScope.APPLICATION_LIBRARIES);
-		assertScopeEquals(
-			"JavaSearchScope on [\n" + 
-			"	/P/lib.jar\n" + 
-			"]",
-			scope);
-	} finally {
-		deleteProject("P");
-	}
-}
-/*
- * Ensures that a Java search scope with SYSTEM_LIBRARIES only is correct
- * (classpath container case)
- */
-public void testJavaSearchScope6() throws CoreException {
-	try {
-		ClasspathInitializerTests.DefaultContainerInitializer intializer = new ClasspathInitializerTests.DefaultContainerInitializer(new String[] {"P", "/P/lib.jar"}) {
-			protected DefaultContainer newContainer(char[][] libPaths) {
-				return new DefaultContainer(libPaths) {
-					public int getKind() {
-						return IClasspathContainer.K_SYSTEM;
-					}
-				};
-			}
-		};
-		ContainerInitializer.setInitializer(intializer);
-		IJavaProject project = createJavaProject("P", new String[] {}, new String[] {"org.eclipse.jdt.core.tests.model.TEST_CONTAINER"}, "");
-		IJavaSearchScope scope = SearchEngine.createJavaSearchScope(new IJavaElement[] {project}, IJavaSearchScope.SYSTEM_LIBRARIES);
-		assertScopeEquals(
-			"JavaSearchScope on [\n" + 
-			"	/P/lib.jar\n" + 
-			"]",
-			scope);
-	} finally {
-		deleteProject("P");
-	}
-}
-/*
- * Ensures that a Java search scope with SOURCES | REFERENCED_PROJECTS is correct
- * (direct reference case)
- */
-public void testJavaSearchScope7() throws CoreException {
-	try {
-		createJavaProject("P1");
-		IJavaProject project = createJavaProject("P2", new String[] {"src"}, new String[] {}, new String[] {"/P1"}, "bin");
-		IJavaSearchScope scope = SearchEngine.createJavaSearchScope(new IJavaElement[] {project}, IJavaSearchScope.SOURCES | IJavaSearchScope.REFERENCED_PROJECTS);
-		assertScopeEquals(
-			"JavaSearchScope on [\n" + 
-			"	/P1\n" + 
-			"	/P2/src\n" + 
-			"]",
-			scope);
-	} finally {
-		deleteProject("P1");
-		deleteProject("P2");
-	}
-}
-/*
- * Ensures that a Java search scope with SOURCES | REFERENCED_PROJECTS is correct
- * (reference through a container case)
- */
-public void testJavaSearchScope8() throws CoreException {
-	try {
-		createJavaProject("P1");
-		ContainerInitializer.setInitializer(new ClasspathInitializerTests.DefaultContainerInitializer(new String[] {"P2", "/P1"}));
-		IJavaProject project = createJavaProject("P2", new String[] {"src"}, new String[] {"org.eclipse.jdt.core.tests.model.TEST_CONTAINER"}, "bin");
-		IJavaSearchScope scope = SearchEngine.createJavaSearchScope(new IJavaElement[] {project}, IJavaSearchScope.SOURCES | IJavaSearchScope.REFERENCED_PROJECTS);
-		assertScopeEquals(
-			"JavaSearchScope on [\n" + 
-			"	/P1\n" + 
-			"	/P2/src\n" + 
-			"]",
-			scope);
-	} finally {
-		deleteProject("P1");
-		deleteProject("P2");
-	}
-}
-
-/**
- * Bug 101022: [search] JUnit Test Runner on folder runs tests outside directory
- * @see "https://bugs.eclipse.org/bugs/show_bug.cgi?id=101022"
- */
-public void testJavaSearchScopeBug101022() throws CoreException {
-	try {
-		IJavaProject project = createJavaProject("P1", new String[] {"src", "test", "test2"}, "bin");
-		createFile(
-			"/P1/src/Test.java",
-			"public class Test {\n" +
-			"	protected void foo() {}\n" +
-			"}" 
-		);
-		createFile(
-			"/P1/test/Test.java",
-			"public class Test {\n" +
-			"	protected void foo() {}\n" +
-			"}" 
-		);
-		createFile(
-			"/P1/test2/Test.java",
-			"public class Test {\n" +
-			"	protected void foo() {}\n" +
-			"}" 
-		);
-		IPackageFragmentRoot root = project.getPackageFragmentRoot(getFolder("/P1/test"));
-		IJavaSearchScope scope = SearchEngine.createJavaSearchScope(new IJavaElement[] {root});
-		JavaSearchResultCollector resultCollector = new JavaSearchResultCollector();
-		resultCollector.showProject = true;
-		search("foo", METHOD, DECLARATIONS, scope, resultCollector);
-		assertSearchResults(
-			"test/Test.java [in P1] void Test.foo() [foo]",
-			resultCollector);
-	}
-	finally {
-		deleteProject("P1");
-	}
-}
-
-/**
- * Bug 101426: Search doesn't work with imported plugin
- * @see "https://bugs.eclipse.org/bugs/show_bug.cgi?id=101426"
- */
-public void testJavaSearchScopeBug101426() throws CoreException {
-	try {
-		IJavaProject project = createJavaProject("P1", new String[] {"src/", "test/", "test2/"}, "bin");
-		createFile(
-			"/P1/src/Test.java",
-			"public interface ITest {\n" +
-			"}" 
-		);
-		createFile(
-			"/P1/test/Test.java",
-			"public class Test {\n" +
-			"	ITest test;\n" +
-			"}" 
-		);
-		createFile(
-			"/P1/test2/Test.java",
-			"public class Test2 {\n" +
-			"	ITest test;\n" +
-			"}" 
-		);
-		IJavaSearchScope scope = SearchEngine.createJavaSearchScope(new IJavaElement[] {project});
-		JavaSearchResultCollector resultCollector = new JavaSearchResultCollector();
-		resultCollector.showProject = true;
-		search("ITest", TYPE, REFERENCES, scope, resultCollector);
-		assertSearchResults(
-			"test/Test.java [in P1] Test.test [ITest]\n" + 
-			"test2/Test.java [in P1] Test2.test [ITest]",
-			resultCollector);
-	}
-	finally {
-		deleteProject("P1");
-	}
-}
 /**
  * Method occurences with 2 unrelated projects that contain the same source.
  * (regression test for bug 33800 search: reporting too many method occurrences)
