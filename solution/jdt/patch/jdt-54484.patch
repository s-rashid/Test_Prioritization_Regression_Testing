diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java
index 37d248b..6bbd5ec 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java
@@ -11,8 +11,11 @@
 package org.eclipse.jdt.internal.core;
 
 import java.net.URL;
+import java.util.ArrayList;
+import java.util.StringTokenizer;
 
 import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.core.runtime.OperationCanceledException;
 import org.eclipse.jdt.core.*;
 import org.eclipse.jdt.core.compiler.CharOperation;
@@ -192,6 +195,42 @@ public String[] getParameterNames() throws JavaModelException {
 				}
 			}
 		}
+		if (this.parameterNames == null) {
+			// try to see if we can retrieve the names from the attached javadoc
+			IBinaryMethod info = (IBinaryMethod) getElementInfo();
+			final int paramCount = Signature.getParameterCount(new String(info.getMethodDescriptor()));
+			if (paramCount != 0) {
+				String javadoc = this.getAttachedJavadoc(new NullProgressMonitor(), "UTF-8"); //$NON-NLS-1$
+				if (javadoc != null) {
+					final int indexOfOpenParen = javadoc.indexOf('(');
+					if (indexOfOpenParen != -1) {
+						final int indexOfClosingParen = javadoc.indexOf(')', indexOfOpenParen);
+						if (indexOfClosingParen != -1) {
+							final char[] paramsSource =
+								CharOperation.replace(
+									javadoc.substring(indexOfOpenParen + 1, indexOfClosingParen).toCharArray(),
+									"&nbsp;".toCharArray(), //$NON-NLS-1$
+									new char[] {' '});
+							final StringTokenizer tokenizer = new StringTokenizer(String.valueOf(paramsSource), ", \n\r"); //$NON-NLS-1$
+							int index = 0;
+							final ArrayList paramNames = new ArrayList(paramCount);
+							while (tokenizer.hasMoreTokens()) {
+								final String token = tokenizer.nextToken();
+								if ((index & 1) != 0) {
+									// if odd then this is a parameter name
+									paramNames.add(token);
+								}
+								index++;
+							}
+							if (!paramNames.isEmpty()) {
+								this.parameterNames = new String[paramNames.size()];
+								paramNames.toArray(this.parameterNames);
+							}
+	 					}
+					}
+				}
+			}
+		}		
 		// if still no parameter names, produce fake ones
 		if (this.parameterNames == null) {
 			IBinaryMethod info = (IBinaryMethod) getElementInfo();
@@ -438,9 +477,9 @@ public String getAttachedJavadoc(IProgressMonitor monitor, String encoding) thro
 			anchor = anchor.substring(0, indexOfOpeningParen) + anchor.substring(index);
 		}
 	}
-	if (monitor.isCanceled()) throw new OperationCanceledException();
+	if (monitor != null && monitor.isCanceled()) throw new OperationCanceledException();
 	final String contents = getURLContents(String.valueOf(pathBuffer), encoding);
-	if (monitor.isCanceled()) throw new OperationCanceledException();
+	if (monitor != null && monitor.isCanceled()) throw new OperationCanceledException();
 	if (contents == null) throw new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.CANNOT_RETRIEVE_ATTACHED_JAVADOC, this));
 	int indexAnchor = contents.indexOf(JavadocConstants.ANCHOR_PREFIX_START + anchor + JavadocConstants.ANCHOR_PREFIX_END);
 	if (indexAnchor == -1) throw new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.UNRECOGNIZED_JAVADOC_FORMAT, this));
