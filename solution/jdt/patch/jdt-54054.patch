diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java
index aa9ba6e..e1431e1 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java
@@ -44,7 +44,7 @@ import org.eclipse.jdt.internal.compiler.util.Messages;
  *      such as DietClassFileReader
  */
 public class ClassFile
-	implements AttributeNamesConstants, CompilerModifiers, TypeConstants, TypeIds {
+	implements AttributeNamesConstants, TypeConstants, TypeIds {
 	public static final int INITIAL_CONTENTS_SIZE = 400;
 	public static final int INITIAL_HEADER_SIZE = 1500;
 	public static final int INNER_CLASSES_SIZE = 5;
@@ -370,24 +370,24 @@ public class ClassFile
 		// Modifier manipulations for classfile
 		int accessFlags = aType.getAccessFlags();
 		if (aType.isPrivate()) { // rewrite private to non-public
-			accessFlags &= ~AccPublic;
+			accessFlags &= ~ClassFileConstants.AccPublic;
 		}
 		if (aType.isProtected()) { // rewrite protected into public
-			accessFlags |= AccPublic;
+			accessFlags |= ClassFileConstants.AccPublic;
 		}
 		// clear all bits that are illegal for a class or an interface
 		accessFlags
 			&= ~(
-				AccStrictfp
-					| AccProtected
-					| AccPrivate
-					| AccStatic
-					| AccSynchronized
-					| AccNative);
+				ClassFileConstants.AccStrictfp
+					| ClassFileConstants.AccProtected
+					| ClassFileConstants.AccPrivate
+					| ClassFileConstants.AccStatic
+					| ClassFileConstants.AccSynchronized
+					| ClassFileConstants.AccNative);
 					
 		// set the AccSuper flag (has to be done after clearing AccSynchronized - since same value)
 		if (!aType.isInterface()) { // class or enum
-			accessFlags |= AccSuper;
+			accessFlags |= ClassFileConstants.AccSuper;
 		}
 		
 		this.enclosingClassFile = enclosingClassFile;
@@ -444,7 +444,7 @@ public class ClassFile
 		MethodBinding methodBinding) {
 
 		// force the modifiers to be public and abstract
-		methodBinding.modifiers = AccPublic | AccAbstract;
+		methodBinding.modifiers = ClassFileConstants.AccPublic | ClassFileConstants.AccAbstract;
 
 		this.generateMethodInfoHeader(methodBinding);
 		int methodAttributeOffset = this.contentsOffset;
@@ -568,11 +568,11 @@ public class ClassFile
 				}
 				// access flag
 				if (innerClass.isAnonymousType()) {
-					accessFlags |= AccPrivate;
+					accessFlags |= ClassFileConstants.AccPrivate;
 				} else if (innerClass.isLocalType() && !innerClass.isMemberType()) {
-					accessFlags |= AccPrivate;
+					accessFlags |= ClassFileConstants.AccPrivate;
 				} else if (innerClass.isMemberType() && innerClass.isInterface()) {
-					accessFlags |= AccStatic; // implicitely static
+					accessFlags |= ClassFileConstants.AccStatic; // implicitely static
 				}
 				contents[contentsOffset++] = (byte) (accessFlags >> 8);
 				contents[contentsOffset++] = (byte) accessFlags;
@@ -837,7 +837,7 @@ public class ClassFile
 		int accessFlags = fieldBinding.getAccessFlags();
 		if (targetJDK < ClassFileConstants.JDK1_5) {
 		    // pre 1.5, synthetic was an attribute, not a modifier
-		    accessFlags &= ~AccSynthetic;
+		    accessFlags &= ~ClassFileConstants.AccSynthetic;
 		}		
 		contents[contentsOffset++] = (byte) (accessFlags >> 8);
 		contents[contentsOffset++] = (byte) accessFlags;
@@ -923,7 +923,7 @@ public class ClassFile
 	
 	private void addMissingAbstractProblemMethod(MethodDeclaration methodDeclaration, MethodBinding methodBinding, IProblem problem, CompilationResult compilationResult) {
 		// always clear the strictfp/native/abstract bit for a problem method
-		generateMethodInfoHeader(methodBinding, methodBinding.modifiers & ~(AccStrictfp | AccNative | AccAbstract));
+		generateMethodInfoHeader(methodBinding, methodBinding.modifiers & ~(ClassFileConstants.AccStrictfp | ClassFileConstants.AccNative | ClassFileConstants.AccAbstract));
 		int methodAttributeOffset = contentsOffset;
 		int attributeNumber = generateMethodInfoAttribute(methodBinding);
 		
@@ -1019,7 +1019,7 @@ public class ClassFile
 		IProblem[] problems) {
 
 		// always clear the strictfp/native/abstract bit for a problem method
-		generateMethodInfoHeader(methodBinding, methodBinding.modifiers & ~(AccStrictfp | AccNative | AccAbstract));
+		generateMethodInfoHeader(methodBinding, methodBinding.modifiers & ~(ClassFileConstants.AccStrictfp | ClassFileConstants.AccNative | ClassFileConstants.AccAbstract));
 		int methodAttributeOffset = contentsOffset;
 		int attributeNumber = generateMethodInfoAttribute(methodBinding, true);
 		
@@ -1104,7 +1104,7 @@ public class ClassFile
 			method.abort(ProblemSeverities.AbortType, null);
 		}
 		// always clear the strictfp/native/abstract bit for a problem method
-		generateMethodInfoHeader(methodBinding, methodBinding.modifiers & ~(AccStrictfp | AccNative | AccAbstract));
+		generateMethodInfoHeader(methodBinding, methodBinding.modifiers & ~(ClassFileConstants.AccStrictfp | ClassFileConstants.AccNative | ClassFileConstants.AccAbstract));
 		int methodAttributeOffset = contentsOffset;
 		int attributeNumber = generateMethodInfoAttribute(methodBinding, true);
 		
@@ -3250,7 +3250,7 @@ public class ClassFile
 	public int generateMethodInfoAttribute(MethodBinding methodBinding, AnnotationMethodDeclaration declaration) {
 		int attributesNumber = generateMethodInfoAttribute(methodBinding);
 		int attributeOffset = contentsOffset;
-		if ((declaration.modifiers & AccAnnotationDefault) != 0) {
+		if ((declaration.modifiers & ClassFileConstants.AccAnnotationDefault) != 0) {
 			// add an annotation default attribute
 			int annotationDefaultNameIndex =
 				constantPool.literalIndex(AttributeNamesConstants.AnnotationDefaultName);
@@ -3305,10 +3305,10 @@ public class ClassFile
 		}
 		if (targetJDK < ClassFileConstants.JDK1_5) {
 		    // pre 1.5, synthetic was an attribute, not a modifier
-		    accessFlags &= ~AccSynthetic;
+		    accessFlags &= ~ClassFileConstants.AccSynthetic;
 		}
 		if (methodBinding.isRequiredToClearPrivateModifier()) {
-			accessFlags &= ~AccPrivate;
+			accessFlags &= ~ClassFileConstants.AccPrivate;
 		}
 		contents[contentsOffset++] = (byte) (accessFlags >> 8);
 		contents[contentsOffset++] = (byte) accessFlags;
@@ -3335,8 +3335,8 @@ public class ClassFile
 		if (contentsOffset + 10 >= this.contents.length) {
 			resizeContents(10);
 		}
-		contents[contentsOffset++] = (byte) ((AccDefault | AccStatic) >> 8);
-		contents[contentsOffset++] = (byte) (AccDefault | AccStatic);
+		contents[contentsOffset++] = (byte) ((ClassFileConstants.AccDefault | ClassFileConstants.AccStatic) >> 8);
+		contents[contentsOffset++] = (byte) (ClassFileConstants.AccDefault | ClassFileConstants.AccStatic);
 		int nameIndex = constantPool.literalIndex(ConstantPool.Clinit);
 		contents[contentsOffset++] = (byte) (nameIndex >> 8);
 		contents[contentsOffset++] = (byte) nameIndex;
