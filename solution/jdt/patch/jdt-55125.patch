diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClassFileTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClassFileTests.java
index e1b7c62..e401e91 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClassFileTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClassFileTests.java
@@ -15,6 +15,9 @@ import java.io.IOException;
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.jdt.core.*;
+import org.eclipse.jdt.core.search.IJavaSearchConstants;
+import org.eclipse.jdt.core.search.IJavaSearchScope;
+import org.eclipse.jdt.core.search.SearchEngine;
 
 import junit.framework.Test;
 
@@ -32,7 +35,7 @@ public ClassFileTests(String name) {
 // All specified tests which do not belong to the class are skipped...
 static {
 //	TESTS_PREFIX = "testBug";
-//	TESTS_NAMES = new String[] { "testParameterNames01"};
+//	TESTS_NAMES = new String[] { "testWorkingCopy11"};
 //	TESTS_NUMBERS = new int[] { 13 };
 //	TESTS_RANGE = new int[] { 16, -1 };
 }
@@ -636,7 +639,7 @@ public void testWorkingCopy08() throws CoreException {
 }
 
 /*
- * Ensures that types in a class file are hidden if the class file working copy is empty.
+ * Ensures that types in a class file are hidden when reconciling against if the class file working copy is empty.
  */
 public void testWorkingCopy09() throws CoreException {
 	IClassFile clazz = this.jarRoot.getPackageFragment("workingcopy").getClassFile("X.class");
@@ -698,4 +701,21 @@ public void testWorkingCopy10() throws CoreException {
 	}
 }
 
+/*
+ * Ensures that types in a class file are not found by a search if the class file working copy is empty.
+ */
+public void testWorkingCopy11() throws CoreException {
+	IPackageFragment pkg = this.jarRoot.getPackageFragment("workingcopy");
+	IClassFile clazz = pkg.getClassFile("X.class");
+	this.workingCopy = clazz.becomeWorkingCopy(null/*no problem requestor*/, null/*primary owner*/, null/*no progress*/);
+	this.workingCopy.getBuffer().setContents(	"");
+	this.workingCopy.makeConsistent(null);
+	
+	IJavaSearchScope scope = SearchEngine.createJavaSearchScope(new IJavaElement[] {pkg});
+	AbstractJavaSearchTests.JavaSearchResultCollector requestor = new AbstractJavaSearchTests.JavaSearchResultCollector();
+	search("*", IJavaSearchConstants.TYPE, IJavaSearchConstants.DECLARATIONS, scope, requestor);
+	assertSearchResults(
+		"lib.jar workingcopy.Y",
+		requestor);
+}
 }
