diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedMethodDeclarationImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedMethodDeclarationImpl.java
index b77713f..70d4a4f 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedMethodDeclarationImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedMethodDeclarationImpl.java
@@ -10,28 +10,18 @@
  *******************************************************************************/
 package org.eclipse.jdt.apt.core.internal.declaration;
 
-
-import java.util.Collection;
-import java.util.List;
-
 import org.eclipse.core.resources.IFile;
 import org.eclipse.jdt.apt.core.internal.env.BaseProcessorEnv;
 import org.eclipse.jdt.apt.core.internal.util.Factory;
 import org.eclipse.jdt.core.dom.ITypeBinding;
-import org.eclipse.jdt.core.dom.SimpleName;
-import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
 import org.eclipse.jdt.core.dom.Type;
-import org.eclipse.jdt.core.dom.TypeParameter;
 
 import com.sun.mirror.declaration.MethodDeclaration;
-import com.sun.mirror.declaration.ParameterDeclaration;
-import com.sun.mirror.declaration.TypeParameterDeclaration;
-import com.sun.mirror.type.ReferenceType;
 import com.sun.mirror.type.TypeMirror;
 import com.sun.mirror.util.DeclarationVisitor;
 
 public class ASTBasedMethodDeclarationImpl 
-	extends ASTBasedMemberDeclarationImpl 
+	extends ASTBasedExecutableDeclarationImpl 
 	implements MethodDeclaration{
 
 	public ASTBasedMethodDeclarationImpl(
@@ -45,37 +35,9 @@ public class ASTBasedMethodDeclarationImpl
 	public void accept(DeclarationVisitor visitor)
     {
         super.accept(visitor);
-        visitor.visitExecutableDeclaration(this);
         visitor.visitMethodDeclaration(this);
     }
 	
-    public Collection<TypeParameterDeclaration> getFormalTypeParameters()
-    {
-    	return ExecutableUtil.getFormalTypeParameters(this, _env);
-    }
-    
-    public Collection<ParameterDeclaration> getParameters()
-    {
-    	return ExecutableUtil.getParameters(this, _env);
-    }
-
-    public Collection<ReferenceType> getThrownTypes()
-    {
-    	return ExecutableUtil.getThrownTypes(this, _env);
-    }
-
-    public boolean isVarArgs()
-    {
-        return getMethodAstNode().isVarargs();
-    }
-
-    public String getSimpleName()
-    {
-    	final org.eclipse.jdt.core.dom.MethodDeclaration methodAstNode = getMethodAstNode(); 
-    	final SimpleName nameNode = methodAstNode.getName();
-    	return nameNode == null ? EMPTY_STRING : nameNode.getIdentifier();
-    }  
-    
     public TypeMirror getReturnType()
     {
     	final org.eclipse.jdt.core.dom.MethodDeclaration methodAstNode = getMethodAstNode();
@@ -97,42 +59,5 @@ public class ASTBasedMethodDeclarationImpl
     }
     
     public MirrorKind kind(){ return MirrorKind.METHOD; }
-	
-	private org.eclipse.jdt.core.dom.MethodDeclaration getMethodAstNode(){ 
-		return (org.eclipse.jdt.core.dom.MethodDeclaration)_astNode; 
-	}
-	
-	public String toString()
-    {
-        final StringBuilder buffer = new StringBuilder();
-        final org.eclipse.jdt.core.dom.MethodDeclaration methodAstNode = getMethodAstNode();
-        @SuppressWarnings("unchecked")
-    	final List<TypeParameter> typeParams = methodAstNode.typeParameters();
-        if( typeParams != null && typeParams.size() > 0 ){
-        	 buffer.append('<');
-             for(int i=0, size=typeParams.size(); i<size; i++ ){
-                 if( i != 0 )
-                     buffer.append(", "); //$NON-NLS-1$
-                 buffer.append(typeParams.get(i).toString());
-             }
-             buffer.append('>');
-        }
 
-        if( methodAstNode.getReturnType2() != null )
-            buffer.append(methodAstNode.getReturnType2());
-        buffer.append(' ');
-        buffer.append(methodAstNode.getName());
-        buffer.append('(');
-        int i=0;
-        @SuppressWarnings("unchecked")
-    	final List<SingleVariableDeclaration> params = methodAstNode.parameters();
-        for( SingleVariableDeclaration param : params ){
-            if( i++ != 0 )
-                buffer.append(", "); //$NON-NLS-1$
-            buffer.append(param.getName());
-        }
-        buffer.append(')');
-
-        return buffer.toString();
-    }
 }
