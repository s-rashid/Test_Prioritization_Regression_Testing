diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/Constant.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/Constant.java
index a53545d..5b61767 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/Constant.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/Constant.java
@@ -17,12 +17,8 @@ import org.eclipse.jdt.internal.compiler.util.Messages;
 
 public abstract class Constant implements TypeIds, OperatorIds {
 	
-	public static final Constant NotAConstant = new DoubleConstant(Double.NaN);
+	public static final Constant NotAConstant = DoubleConstant.fromValue(Double.NaN);
 
-	public static final IntConstant Zero = new IntConstant(0);
-	public static final IntConstant Two = new IntConstant(2);
-	public static final IntConstant One = new IntConstant(1);
-	
 	public boolean booleanValue() {
 
 		throw new ShouldNotImplement(Messages.bind(Messages.constant_cannotCastedInto, new String[] { typeName(), "boolean" })); //$NON-NLS-1$
@@ -57,42 +53,42 @@ public abstract class Constant implements TypeIds, OperatorIds {
 		
 	//	    case (T_byte<<4)+T_undefined  	 : return NotAConstant;   
 		    case (T_byte<<4)+T_byte  		 : return this;  
-		    case (T_byte<<4)+T_long  		 : return Constant.fromValue((byte)this.longValue()); 
-		    case (T_byte<<4)+T_short  		 : return Constant.fromValue((byte)this.shortValue());    
+		    case (T_byte<<4)+T_long  		 : return ByteConstant.fromValue((byte)this.longValue()); 
+		    case (T_byte<<4)+T_short  		 : return ByteConstant.fromValue((byte)this.shortValue());    
 	//	    case (T_byte<<4)+T_void  		 : return NotAConstant;   
 	//	    case (T_byte<<4)+T_String  	 	 : return NotAConstant;   
 	//	    case (T_byte<<4)+T_Object  	 	 : return NotAConstant;   
-		    case (T_byte<<4)+T_double  	 	 : return Constant.fromValue((byte)this.doubleValue());    
-		    case (T_byte<<4)+T_float  		 : return Constant.fromValue((byte)this.floatValue());    
+		    case (T_byte<<4)+T_double  	 	 : return ByteConstant.fromValue((byte)this.doubleValue());    
+		    case (T_byte<<4)+T_float  		 : return ByteConstant.fromValue((byte)this.floatValue());    
 	//	    case (T_byte<<4)+T_boolean  	 : return NotAConstant;   
-		    case (T_byte<<4)+T_char  		 : return Constant.fromValue((byte)this.charValue());    
-		    case (T_byte<<4)+T_int  		 : return Constant.fromValue((byte)this.intValue());    
+		    case (T_byte<<4)+T_char  		 : return ByteConstant.fromValue((byte)this.charValue());    
+		    case (T_byte<<4)+T_int  		 : return ByteConstant.fromValue((byte)this.intValue());    
 	
 	//	    case (T_long<<4)+T_undefined  	 : return NotAConstant;   
-		    case (T_long<<4)+T_byte  		 : return Constant.fromValue((long)this.byteValue()); 
+		    case (T_long<<4)+T_byte  		 : return LongConstant.fromValue(this.byteValue()); 
 		    case (T_long<<4)+T_long  		 : return this; 
-		    case (T_long<<4)+T_short  		 : return Constant.fromValue((long)this.shortValue()); 
+		    case (T_long<<4)+T_short  		 : return LongConstant.fromValue(this.shortValue()); 
 	//	    case (T_long<<4)+T_void  		 : return NotAConstant;   
 	//	    case (T_long<<4)+T_String  		 : return NotAConstant;   
 	//	    case (T_long<<4)+T_Object  		 : return NotAConstant;   
-		    case (T_long<<4)+T_double  		 : return Constant.fromValue((long)this.doubleValue());   
-		    case (T_long<<4)+T_float  		 : return Constant.fromValue((long)this.floatValue());  
+		    case (T_long<<4)+T_double  		 : return LongConstant.fromValue((long)this.doubleValue());   
+		    case (T_long<<4)+T_float  		 : return LongConstant.fromValue((long)this.floatValue());  
 	//	    case (T_long<<4)+T_boolean  	 : return NotAConstant;   
-		    case (T_long<<4)+T_char  		 : return Constant.fromValue((long)this.charValue()); 
-		    case (T_long<<4)+T_int  		 : return Constant.fromValue((long)this.intValue()); 
+		    case (T_long<<4)+T_char  		 : return LongConstant.fromValue(this.charValue()); 
+		    case (T_long<<4)+T_int  		 : return LongConstant.fromValue(this.intValue()); 
 	
 	//	    case (T_short<<4)+T_undefined  	 : return NotAConstant;   
-		    case (T_short<<4)+T_byte  		 : return Constant.fromValue((short)this.byteValue());
-		    case (T_short<<4)+T_long  		 : return Constant.fromValue((short)this.longValue()); 
+		    case (T_short<<4)+T_byte  		 : return ShortConstant.fromValue(this.byteValue());
+		    case (T_short<<4)+T_long  		 : return ShortConstant.fromValue((short)this.longValue()); 
 		    case (T_short<<4)+T_short  		 : return this;  
 	//	    case (T_short<<4)+T_void  		 : return NotAConstant;   
 	//	    case (T_short<<4)+T_String  	 : return NotAConstant;   
 	//	    case (T_short<<4)+T_Object  	 : return NotAConstant;   
-		    case (T_short<<4)+T_double  	 : return Constant.fromValue((short)this.doubleValue());   
-		    case (T_short<<4)+T_float  		 : return Constant.fromValue((short)this.floatValue());   
+		    case (T_short<<4)+T_double  	 : return ShortConstant.fromValue((short)this.doubleValue());   
+		    case (T_short<<4)+T_float  		 : return ShortConstant.fromValue((short)this.floatValue());   
 	//	    case (T_short<<4)+T_boolean 	 : return NotAConstant;   
-		    case (T_short<<4)+T_char  		 : return Constant.fromValue((short)this.charValue());  
-		    case (T_short<<4)+T_int  		 : return Constant.fromValue((short)this.intValue());  
+		    case (T_short<<4)+T_char  		 : return ShortConstant.fromValue((short)this.charValue());  
+		    case (T_short<<4)+T_int  		 : return ShortConstant.fromValue((short)this.intValue());  
 	
 	//	    case (T_void<<4)+T_undefined  	 : return NotAConstant;   
 	//	    case (T_void<<4)+T_byte  		 : return NotAConstant;   
@@ -134,30 +130,30 @@ public abstract class Constant implements TypeIds, OperatorIds {
 	//	    case (T_Object<<4)+T_int  			: return NotAConstant;   
 	
 	//	    case (T_double<<4)+T_undefined  	: return NotAConstant;   
-		    case (T_double<<4)+T_byte  		 	: return Constant.fromValue((double)this.byteValue());   
-		    case (T_double<<4)+T_long  		 	: return Constant.fromValue((double)this.longValue());   
-		    case (T_double<<4)+T_short  		: return Constant.fromValue((double)this.shortValue());   
+		    case (T_double<<4)+T_byte  		 	: return DoubleConstant.fromValue(this.byteValue());   
+		    case (T_double<<4)+T_long  		 	: return DoubleConstant.fromValue(this.longValue());   
+		    case (T_double<<4)+T_short  		: return DoubleConstant.fromValue(this.shortValue());   
 	//	    case (T_double<<4)+T_void  		 	: return NotAConstant;   
 	//	    case (T_double<<4)+T_String  		: return NotAConstant;   
 	//	    case (T_double<<4)+T_Object  		: return NotAConstant;   
 		    case (T_double<<4)+T_double  		: return this;   
-		    case (T_double<<4)+T_float  		: return Constant.fromValue((double)this.floatValue());   
+		    case (T_double<<4)+T_float  		: return DoubleConstant.fromValue(this.floatValue());   
 	//	    case (T_double<<4)+T_boolean  		: return NotAConstant;   
-		    case (T_double<<4)+T_char  		 	: return Constant.fromValue((double)this.charValue());   
-		    case (T_double<<4)+T_int  			: return Constant.fromValue((double)this.intValue());  
+		    case (T_double<<4)+T_char  		 	: return DoubleConstant.fromValue(this.charValue());   
+		    case (T_double<<4)+T_int  			: return DoubleConstant.fromValue(this.intValue());  
 	
 	//	    case (T_float<<4)+T_undefined  	 : return NotAConstant;   
-		    case (T_float<<4)+T_byte  		 : return Constant.fromValue((float)this.byteValue());   
-		    case (T_float<<4)+T_long  		 : return Constant.fromValue((float)this.longValue());   
-		    case (T_float<<4)+T_short  		 : return Constant.fromValue((float)this.shortValue());   
+		    case (T_float<<4)+T_byte  		 : return FloatConstant.fromValue(this.byteValue());   
+		    case (T_float<<4)+T_long  		 : return FloatConstant.fromValue(this.longValue());   
+		    case (T_float<<4)+T_short  		 : return FloatConstant.fromValue(this.shortValue());   
 	//	    case (T_float<<4)+T_void  		 : return NotAConstant;   
 	//	    case (T_float<<4)+T_String  	 : return NotAConstant;   
 	//	    case (T_float<<4)+T_Object  	 : return NotAConstant;   
-		    case (T_float<<4)+T_double  	 : return Constant.fromValue((float)this.doubleValue());   
+		    case (T_float<<4)+T_double  	 : return FloatConstant.fromValue((float)this.doubleValue());   
 		    case (T_float<<4)+T_float  		 : return this;   
 	//	    case (T_float<<4)+T_boolean 	 : return NotAConstant;   
-		    case (T_float<<4)+T_char  		 : return Constant.fromValue((float)this.charValue());   
-		    case (T_float<<4)+T_int  		 : return Constant.fromValue((float)this.intValue());   
+		    case (T_float<<4)+T_char  		 : return FloatConstant.fromValue(this.charValue());   
+		    case (T_float<<4)+T_int  		 : return FloatConstant.fromValue(this.intValue());   
 	
 	//	    case (T_boolean<<4)+T_undefined  		 : return NotAConstant;   
 	//	    case (T_boolean<<4)+T_byte  			 : return NotAConstant;   
@@ -173,29 +169,29 @@ public abstract class Constant implements TypeIds, OperatorIds {
 	//	    case (T_boolean<<4)+T_int  				 : return NotAConstant;   
 		
 	//	    case (T_char<<4)+T_undefined  	 : return NotAConstant;   
-		    case (T_char<<4)+T_byte  		 : return Constant.fromValue((char)this.byteValue());  
-		    case (T_char<<4)+T_long  		 : return Constant.fromValue((char)this.longValue());  
-		    case (T_char<<4)+T_short  		 : return Constant.fromValue((char)this.shortValue());  
+		    case (T_char<<4)+T_byte  		 : return CharConstant.fromValue((char)this.byteValue());  
+		    case (T_char<<4)+T_long  		 : return CharConstant.fromValue((char)this.longValue());  
+		    case (T_char<<4)+T_short  		 : return CharConstant.fromValue((char)this.shortValue());  
 	//	    case (T_char<<4)+T_void  		 : return NotAConstant;   
 	//	    case (T_char<<4)+T_String  		 : return NotAConstant;   
 	//	    case (T_char<<4)+T_Object  		 : return NotAConstant;   
-		    case (T_char<<4)+T_double  		 : return Constant.fromValue((char)this.doubleValue());   
-		    case (T_char<<4)+T_float  		 : return Constant.fromValue((char)this.floatValue());   
+		    case (T_char<<4)+T_double  		 : return CharConstant.fromValue((char)this.doubleValue());   
+		    case (T_char<<4)+T_float  		 : return CharConstant.fromValue((char)this.floatValue());   
 	//	    case (T_char<<4)+T_boolean  	 : return NotAConstant;   
 		    case (T_char<<4)+T_char  		 : return this;  
-		    case (T_char<<4)+T_int  		 : return Constant.fromValue((char)this.intValue());  
+		    case (T_char<<4)+T_int  		 : return CharConstant.fromValue((char)this.intValue());  
 		
 	//	    case (T_int<<4)+T_undefined  	 : return NotAConstant;   
-		    case (T_int<<4)+T_byte  		 : return Constant.fromValue((int)this.byteValue());  
-		    case (T_int<<4)+T_long  		 : return Constant.fromValue((int)this.longValue());  
-		    case (T_int<<4)+T_short  		 : return Constant.fromValue((int)this.shortValue());  
+		    case (T_int<<4)+T_byte  		 : return IntConstant.fromValue(this.byteValue());  
+		    case (T_int<<4)+T_long  		 : return IntConstant.fromValue((int) this.longValue());  
+		    case (T_int<<4)+T_short  		 : return IntConstant.fromValue(this.shortValue());  
 	//	    case (T_int<<4)+T_void  		 : return NotAConstant;   
 	//	    case (T_int<<4)+T_String  		 : return NotAConstant;   
 	//	    case (T_int<<4)+T_Object  		 : return NotAConstant;   
-		    case (T_int<<4)+T_double  		 : return Constant.fromValue((int)this.doubleValue());   
-		    case (T_int<<4)+T_float  		 : return Constant.fromValue((int)this.floatValue());   
+		    case (T_int<<4)+T_double  		 : return IntConstant.fromValue((int) this.doubleValue());   
+		    case (T_int<<4)+T_float  		 : return IntConstant.fromValue((int) this.floatValue());   
 	//	    case (T_int<<4)+T_boolean  	 	 : return NotAConstant;   
-		    case (T_int<<4)+T_char  		 : return Constant.fromValue((int)this.charValue());  
+		    case (T_int<<4)+T_char  		 : return IntConstant.fromValue(this.charValue());  
 		    case (T_int<<4)+T_int  		 	 : return this;  
 	
 		}
@@ -212,36 +208,36 @@ public abstract class Constant implements TypeIds, OperatorIds {
 
 		switch (operator) {
 			case NOT	: 	
-							return Constant.fromValue(!cst.booleanValue());
+							return BooleanConstant.fromValue(!cst.booleanValue());
 			case PLUS	:
-							return computeConstantOperationPLUS(Zero,T_int,cst,id);
+							return computeConstantOperationPLUS(IntConstant.fromValue(0),T_int,cst,id);
 			case MINUS	:	//the two special -9223372036854775808L and -2147483648 are inlined at parseTime
 							switch (id){
 								case T_float  :	float f;
 												if ( (f= cst.floatValue()) == 0.0f)
 												{ //positive and negative 0....
 													if (Float.floatToIntBits(f) == 0)
-														return Constant.fromValue(-0.0f);
+														return FloatConstant.fromValue(-0.0f);
 													else
-														return Constant.fromValue(0.0f);}
+														return FloatConstant.fromValue(0.0f);}
 												break; //default case
 								case T_double : double d;
 												if ( (d= cst.doubleValue()) == 0.0d)
 												{ //positive and negative 0....
 													if (Double.doubleToLongBits(d) == 0)
-														return Constant.fromValue(-0.0d);
+														return DoubleConstant.fromValue(-0.0d);
 													else
-														return Constant.fromValue(0.0d);}
+														return DoubleConstant.fromValue(0.0d);}
 												break; //default case
 							}
-							return computeConstantOperationMINUS(Zero,T_int,cst,id);
+							return computeConstantOperationMINUS(IntConstant.fromValue(0),T_int,cst,id);
 			case TWIDDLE:	
 				switch (id){
-					case T_char :	return Constant.fromValue(~ cst.charValue());
-					case T_byte:	return Constant.fromValue(~ cst.byteValue());
-					case T_short:	return Constant.fromValue(~ cst.shortValue());
-					case T_int:		return Constant.fromValue(~ cst.intValue());
-					case T_long:	return Constant.fromValue(~ cst.longValue());
+					case T_char :	return IntConstant.fromValue(~ cst.charValue());
+					case T_byte:	return IntConstant.fromValue(~ cst.byteValue());
+					case T_short:	return IntConstant.fromValue(~ cst.shortValue());
+					case T_int:		return IntConstant.fromValue(~ cst.intValue());
+					case T_long:	return LongConstant.fromValue(~ cst.longValue());
 					default : return NotAConstant;
 				} 
 			default : return NotAConstant;
@@ -276,50 +272,50 @@ public abstract class Constant implements TypeIds, OperatorIds {
 	public static final Constant computeConstantOperationAND(Constant left, int leftId, Constant right, int rightId) {
 		
 		switch (leftId){
-			case T_boolean :		return Constant.fromValue(left.booleanValue() & right.booleanValue());
+			case T_boolean :		return BooleanConstant.fromValue(left.booleanValue() & right.booleanValue());
 			case T_char :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.charValue() & right.charValue());
-					case T_byte:	return Constant.fromValue(left.charValue() & right.byteValue());
-					case T_short:	return Constant.fromValue(left.charValue() & right.shortValue());
-					case T_int:		return Constant.fromValue(left.charValue() & right.intValue());
-					case T_long:	return Constant.fromValue(left.charValue() & right.longValue());
+					case T_char :	return IntConstant.fromValue(left.charValue() & right.charValue());
+					case T_byte:	return IntConstant.fromValue(left.charValue() & right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.charValue() & right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.charValue() & right.intValue());
+					case T_long:	return LongConstant.fromValue(left.charValue() & right.longValue());
 				}
 			break;
 			case T_byte :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.byteValue() & right.charValue());
-					case T_byte:	return Constant.fromValue(left.byteValue() & right.byteValue());
-					case T_short:	return Constant.fromValue(left.byteValue() & right.shortValue());
-					case T_int:		return Constant.fromValue(left.byteValue() & right.intValue());
-					case T_long:	return Constant.fromValue(left.byteValue() & right.longValue());
+					case T_char :	return IntConstant.fromValue(left.byteValue() & right.charValue());
+					case T_byte:	return IntConstant.fromValue(left.byteValue() & right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.byteValue() & right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.byteValue() & right.intValue());
+					case T_long:	return LongConstant.fromValue(left.byteValue() & right.longValue());
 				}
 			break;
 			case T_short :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.shortValue() & right.charValue());
-					case T_byte:	return Constant.fromValue(left.shortValue() & right.byteValue());
-					case T_short:	return Constant.fromValue(left.shortValue() & right.shortValue());
-					case T_int:		return Constant.fromValue(left.shortValue() & right.intValue());
-					case T_long:	return Constant.fromValue(left.shortValue() & right.longValue());
+					case T_char :	return IntConstant.fromValue(left.shortValue() & right.charValue());
+					case T_byte:	return IntConstant.fromValue(left.shortValue() & right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.shortValue() & right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.shortValue() & right.intValue());
+					case T_long:	return LongConstant.fromValue(left.shortValue() & right.longValue());
 				}
 			break;
 			case T_int :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.intValue() & right.charValue());
-					case T_byte:	return Constant.fromValue(left.intValue() & right.byteValue());
-					case T_short:	return Constant.fromValue(left.intValue() & right.shortValue());
-					case T_int:		return Constant.fromValue(left.intValue() & right.intValue());
-					case T_long:	return Constant.fromValue(left.intValue() & right.longValue());
+					case T_char :	return IntConstant.fromValue(left.intValue() & right.charValue());
+					case T_byte:	return IntConstant.fromValue(left.intValue() & right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.intValue() & right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.intValue() & right.intValue());
+					case T_long:	return LongConstant.fromValue(left.intValue() & right.longValue());
 				}
 			break;
 			case T_long :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.longValue() & right.charValue());
-					case T_byte:	return Constant.fromValue(left.longValue() & right.byteValue());
-					case T_short:	return Constant.fromValue(left.longValue() & right.shortValue());
-					case T_int:		return Constant.fromValue(left.longValue() & right.intValue());
-					case T_long:	return Constant.fromValue(left.longValue() & right.longValue());
+					case T_char :	return LongConstant.fromValue(left.longValue() & right.charValue());
+					case T_byte:	return LongConstant.fromValue(left.longValue() & right.byteValue());
+					case T_short:	return LongConstant.fromValue(left.longValue() & right.shortValue());
+					case T_int:		return LongConstant.fromValue(left.longValue() & right.intValue());
+					case T_long:	return LongConstant.fromValue(left.longValue() & right.longValue());
 				}
 			}
 		
@@ -328,7 +324,7 @@ public abstract class Constant implements TypeIds, OperatorIds {
 		
 	public static final Constant computeConstantOperationAND_AND(Constant left, int leftId, Constant right, int rightId) {
 	
-		return Constant.fromValue(left.booleanValue() && right.booleanValue());
+		return BooleanConstant.fromValue(left.booleanValue() && right.booleanValue());
 	}
 		
 	public static final Constant computeConstantOperationDIVIDE(Constant left, int leftId, Constant right, int rightId) {
@@ -337,79 +333,79 @@ public abstract class Constant implements TypeIds, OperatorIds {
 		switch (leftId){
 			case T_char :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.charValue() / right.charValue());
-					case T_float:	return Constant.fromValue(left.charValue() / right.floatValue());
-					case T_double:	return Constant.fromValue(left.charValue() / right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.charValue() / right.byteValue());
-					case T_short:	return Constant.fromValue(left.charValue() / right.shortValue());
-					case T_int:		return Constant.fromValue(left.charValue() / right.intValue());
-					case T_long:	return Constant.fromValue(left.charValue() / right.longValue());
+					case T_char :	return IntConstant.fromValue(left.charValue() / right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.charValue() / right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.charValue() / right.doubleValue());
+					case T_byte:	return IntConstant.fromValue(left.charValue() / right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.charValue() / right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.charValue() / right.intValue());
+					case T_long:	return LongConstant.fromValue(left.charValue() / right.longValue());
 				}
 			break;
 			case T_float :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.floatValue() / right.charValue());
-					case T_float:	return Constant.fromValue(left.floatValue() / right.floatValue());
-					case T_double:	return Constant.fromValue(left.floatValue() / right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.floatValue() / right.byteValue());
-					case T_short:	return Constant.fromValue(left.floatValue() / right.shortValue());
-					case T_int:		return Constant.fromValue(left.floatValue() / right.intValue());
-					case T_long:	return Constant.fromValue(left.floatValue() / right.longValue());
+					case T_char :	return FloatConstant.fromValue(left.floatValue() / right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.floatValue() / right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.floatValue() / right.doubleValue());
+					case T_byte:	return FloatConstant.fromValue(left.floatValue() / right.byteValue());
+					case T_short:	return FloatConstant.fromValue(left.floatValue() / right.shortValue());
+					case T_int:		return FloatConstant.fromValue(left.floatValue() / right.intValue());
+					case T_long:	return FloatConstant.fromValue(left.floatValue() / right.longValue());
 				}
 			break;
 			case T_double :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.doubleValue() / right.charValue());
-					case T_float:	return Constant.fromValue(left.doubleValue() / right.floatValue());
-					case T_double:	return Constant.fromValue(left.doubleValue() / right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.doubleValue() / right.byteValue());
-					case T_short:	return Constant.fromValue(left.doubleValue() / right.shortValue());
-					case T_int:		return Constant.fromValue(left.doubleValue() / right.intValue());
-					case T_long:	return Constant.fromValue(left.doubleValue() / right.longValue());
+					case T_char :	return DoubleConstant.fromValue(left.doubleValue() / right.charValue());
+					case T_float:	return DoubleConstant.fromValue(left.doubleValue() / right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.doubleValue() / right.doubleValue());
+					case T_byte:	return DoubleConstant.fromValue(left.doubleValue() / right.byteValue());
+					case T_short:	return DoubleConstant.fromValue(left.doubleValue() / right.shortValue());
+					case T_int:		return DoubleConstant.fromValue(left.doubleValue() / right.intValue());
+					case T_long:	return DoubleConstant.fromValue(left.doubleValue() / right.longValue());
 				}
 			break;
 			case T_byte :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.byteValue() / right.charValue());
-					case T_float:	return Constant.fromValue(left.byteValue() / right.floatValue());
-					case T_double:	return Constant.fromValue(left.byteValue() / right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.byteValue() / right.byteValue());
-					case T_short:	return Constant.fromValue(left.byteValue() / right.shortValue());
-					case T_int:		return Constant.fromValue(left.byteValue() / right.intValue());
-					case T_long:	return Constant.fromValue(left.byteValue() / right.longValue());
+					case T_char :	return IntConstant.fromValue(left.byteValue() / right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.byteValue() / right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.byteValue() / right.doubleValue());
+					case T_byte:	return IntConstant.fromValue(left.byteValue() / right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.byteValue() / right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.byteValue() / right.intValue());
+					case T_long:	return LongConstant.fromValue(left.byteValue() / right.longValue());
 				}
 			break;
 			case T_short :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.shortValue() / right.charValue());
-					case T_float:	return Constant.fromValue(left.shortValue() / right.floatValue());
-					case T_double:	return Constant.fromValue(left.shortValue() / right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.shortValue() / right.byteValue());
-					case T_short:	return Constant.fromValue(left.shortValue() / right.shortValue());
-					case T_int:		return Constant.fromValue(left.shortValue() / right.intValue());
-					case T_long:	return Constant.fromValue(left.shortValue() / right.longValue());
+					case T_char :	return IntConstant.fromValue(left.shortValue() / right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.shortValue() / right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.shortValue() / right.doubleValue());
+					case T_byte:	return IntConstant.fromValue(left.shortValue() / right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.shortValue() / right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.shortValue() / right.intValue());
+					case T_long:	return LongConstant.fromValue(left.shortValue() / right.longValue());
 				}
 			break;
 			case T_int :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.intValue() / right.charValue());
-					case T_float:	return Constant.fromValue(left.intValue() / right.floatValue());
-					case T_double:	return Constant.fromValue(left.intValue() / right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.intValue() / right.byteValue());
-					case T_short:	return Constant.fromValue(left.intValue() / right.shortValue());
-					case T_int:		return Constant.fromValue(left.intValue() / right.intValue());
-					case T_long:	return Constant.fromValue(left.intValue() / right.longValue());
+					case T_char :	return IntConstant.fromValue(left.intValue() / right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.intValue() / right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.intValue() / right.doubleValue());
+					case T_byte:	return IntConstant.fromValue(left.intValue() / right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.intValue() / right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.intValue() / right.intValue());
+					case T_long:	return LongConstant.fromValue(left.intValue() / right.longValue());
 				}
 			break;
 			case T_long :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.longValue() / right.charValue());
-					case T_float:	return Constant.fromValue(left.longValue() / right.floatValue());
-					case T_double:	return Constant.fromValue(left.longValue() / right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.longValue() / right.byteValue());
-					case T_short:	return Constant.fromValue(left.longValue() / right.shortValue());
-					case T_int:		return Constant.fromValue(left.longValue() / right.intValue());
-					case T_long:	return Constant.fromValue(left.longValue() / right.longValue());
+					case T_char :	return LongConstant.fromValue(left.longValue() / right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.longValue() / right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.longValue() / right.doubleValue());
+					case T_byte:	return LongConstant.fromValue(left.longValue() / right.byteValue());
+					case T_short:	return LongConstant.fromValue(left.longValue() / right.shortValue());
+					case T_int:		return LongConstant.fromValue(left.longValue() / right.intValue());
+					case T_long:	return LongConstant.fromValue(left.longValue() / right.longValue());
 				}
 	
 			}
@@ -422,103 +418,103 @@ public abstract class Constant implements TypeIds, OperatorIds {
 		switch (leftId){
 			case T_boolean :
 				if (rightId == T_boolean) {
-					return Constant.fromValue(left.booleanValue() == right.booleanValue());
+					return BooleanConstant.fromValue(left.booleanValue() == right.booleanValue());
 				}
 			break;
 			case T_char :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.charValue() == right.charValue());
-					case T_float:	return Constant.fromValue(left.charValue() == right.floatValue());
-					case T_double:	return Constant.fromValue(left.charValue() == right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.charValue() == right.byteValue());
-					case T_short:	return Constant.fromValue(left.charValue() == right.shortValue());
-					case T_int:		return Constant.fromValue(left.charValue() == right.intValue());
-					case T_long:	return Constant.fromValue(left.charValue() == right.longValue());}
+					case T_char :	return BooleanConstant.fromValue(left.charValue() == right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.charValue() == right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.charValue() == right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.charValue() == right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.charValue() == right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.charValue() == right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.charValue() == right.longValue());}
 			break;
 			case T_float :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.floatValue() == right.charValue());
-					case T_float:	return Constant.fromValue(left.floatValue() == right.floatValue());
-					case T_double:	return Constant.fromValue(left.floatValue() == right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.floatValue() == right.byteValue());
-					case T_short:	return Constant.fromValue(left.floatValue() == right.shortValue());
-					case T_int:		return Constant.fromValue(left.floatValue() == right.intValue());
-					case T_long:	return Constant.fromValue(left.floatValue() == right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.floatValue() == right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.floatValue() == right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.floatValue() == right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.floatValue() == right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.floatValue() == right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.floatValue() == right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.floatValue() == right.longValue());
 				}
 			break;
 			case T_double :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.doubleValue() == right.charValue());
-					case T_float:	return Constant.fromValue(left.doubleValue() == right.floatValue());
-					case T_double:	return Constant.fromValue(left.doubleValue() == right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.doubleValue() == right.byteValue());
-					case T_short:	return Constant.fromValue(left.doubleValue() == right.shortValue());
-					case T_int:		return Constant.fromValue(left.doubleValue() == right.intValue());
-					case T_long:	return Constant.fromValue(left.doubleValue() == right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.doubleValue() == right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.doubleValue() == right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.doubleValue() == right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.doubleValue() == right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.doubleValue() == right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.doubleValue() == right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.doubleValue() == right.longValue());
 				}
 			break;
 			case T_byte :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.byteValue() == right.charValue());
-					case T_float:	return Constant.fromValue(left.byteValue() == right.floatValue());
-					case T_double:	return Constant.fromValue(left.byteValue() == right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.byteValue() == right.byteValue());
-					case T_short:	return Constant.fromValue(left.byteValue() == right.shortValue());
-					case T_int:		return Constant.fromValue(left.byteValue() == right.intValue());
-					case T_long:	return Constant.fromValue(left.byteValue() == right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.byteValue() == right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.byteValue() == right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.byteValue() == right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.byteValue() == right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.byteValue() == right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.byteValue() == right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.byteValue() == right.longValue());
 				}
 			break;			
 			case T_short :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.shortValue() == right.charValue());
-					case T_float:	return Constant.fromValue(left.shortValue() == right.floatValue());
-					case T_double:	return Constant.fromValue(left.shortValue() == right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.shortValue() == right.byteValue());
-					case T_short:	return Constant.fromValue(left.shortValue() == right.shortValue());
-					case T_int:		return Constant.fromValue(left.shortValue() == right.intValue());
-					case T_long:	return Constant.fromValue(left.shortValue() == right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.shortValue() == right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.shortValue() == right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.shortValue() == right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.shortValue() == right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.shortValue() == right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.shortValue() == right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.shortValue() == right.longValue());
 				}
 			break;
 			case T_int :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.intValue() == right.charValue());
-					case T_float:	return Constant.fromValue(left.intValue() == right.floatValue());
-					case T_double:	return Constant.fromValue(left.intValue() == right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.intValue() == right.byteValue());
-					case T_short:	return Constant.fromValue(left.intValue() == right.shortValue());
-					case T_int:		return Constant.fromValue(left.intValue() == right.intValue());
-					case T_long:	return Constant.fromValue(left.intValue() == right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.intValue() == right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.intValue() == right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.intValue() == right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.intValue() == right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.intValue() == right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.intValue() == right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.intValue() == right.longValue());
 				}
 			break;		
 			case T_long :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.longValue() == right.charValue());
-					case T_float:	return Constant.fromValue(left.longValue() == right.floatValue());
-					case T_double:	return Constant.fromValue(left.longValue() == right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.longValue() == right.byteValue());
-					case T_short:	return Constant.fromValue(left.longValue() == right.shortValue());
-					case T_int:		return Constant.fromValue(left.longValue() == right.intValue());
-					case T_long:	return Constant.fromValue(left.longValue() == right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.longValue() == right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.longValue() == right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.longValue() == right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.longValue() == right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.longValue() == right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.longValue() == right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.longValue() == right.longValue());
 				}
 			break;
 			case T_JavaLangString :
 				if (rightId == T_JavaLangString) {
 					//String are interned in th compiler==>thus if two string constant
 					//get to be compared, it is an equal on the vale which is done
-					return Constant.fromValue(((StringConstant)left).hasSameValue(right));
+					return BooleanConstant.fromValue(((StringConstant)left).hasSameValue(right));
 				}
 			break;	
 			case T_null :
 				if (rightId == T_JavaLangString) { 
-					return Constant.fromValue(false);
+					return BooleanConstant.fromValue(false);
 				} else {
 					if (rightId == T_null) { 
-						return Constant.fromValue(true);
+						return BooleanConstant.fromValue(true);
 					}
 				}
 			}
 		
-		return Constant.fromValue(false);
+		return BooleanConstant.fromValue(false);
 	}
 		
 	public static final Constant computeConstantOperationGREATER(Constant left, int leftId, Constant right, int rightId) {
@@ -526,79 +522,79 @@ public abstract class Constant implements TypeIds, OperatorIds {
 		switch (leftId){
 			case T_char : 
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.charValue() > right.charValue());
-					case T_float:	return Constant.fromValue(left.charValue() > right.floatValue());
-					case T_double:	return Constant.fromValue(left.charValue() > right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.charValue() > right.byteValue());
-					case T_short:	return Constant.fromValue(left.charValue() > right.shortValue());
-					case T_int:		return Constant.fromValue(left.charValue() > right.intValue());
-					case T_long:	return Constant.fromValue(left.charValue() > right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.charValue() > right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.charValue() > right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.charValue() > right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.charValue() > right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.charValue() > right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.charValue() > right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.charValue() > right.longValue());
 				}
 			break;
 			case T_float :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.floatValue() > right.charValue());
-					case T_float:	return Constant.fromValue(left.floatValue() > right.floatValue());
-					case T_double:	return Constant.fromValue(left.floatValue() > right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.floatValue() > right.byteValue());
-					case T_short:	return Constant.fromValue(left.floatValue() > right.shortValue());
-					case T_int:		return Constant.fromValue(left.floatValue() > right.intValue());
-					case T_long:	return Constant.fromValue(left.floatValue() > right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.floatValue() > right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.floatValue() > right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.floatValue() > right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.floatValue() > right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.floatValue() > right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.floatValue() > right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.floatValue() > right.longValue());
 				}
 			break;
 			case T_double :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.doubleValue() > right.charValue());
-					case T_float:	return Constant.fromValue(left.doubleValue() > right.floatValue());
-					case T_double:	return Constant.fromValue(left.doubleValue() > right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.doubleValue() > right.byteValue());
-					case T_short:	return Constant.fromValue(left.doubleValue() > right.shortValue());
-					case T_int:		return Constant.fromValue(left.doubleValue() > right.intValue());
-					case T_long:	return Constant.fromValue(left.doubleValue() > right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.doubleValue() > right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.doubleValue() > right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.doubleValue() > right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.doubleValue() > right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.doubleValue() > right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.doubleValue() > right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.doubleValue() > right.longValue());
 				}
 			break;
 			case T_byte :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.byteValue() > right.charValue());
-					case T_float:	return Constant.fromValue(left.byteValue() > right.floatValue());
-					case T_double:	return Constant.fromValue(left.byteValue() > right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.byteValue() > right.byteValue());
-					case T_short:	return Constant.fromValue(left.byteValue() > right.shortValue());
-					case T_int:		return Constant.fromValue(left.byteValue() > right.intValue());
-					case T_long:	return Constant.fromValue(left.byteValue() > right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.byteValue() > right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.byteValue() > right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.byteValue() > right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.byteValue() > right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.byteValue() > right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.byteValue() > right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.byteValue() > right.longValue());
 				}
 			break;			
 			case T_short :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.shortValue() > right.charValue());
-					case T_float:	return Constant.fromValue(left.shortValue() > right.floatValue());
-					case T_double:	return Constant.fromValue(left.shortValue() > right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.shortValue() > right.byteValue());
-					case T_short:	return Constant.fromValue(left.shortValue() > right.shortValue());
-					case T_int:		return Constant.fromValue(left.shortValue() > right.intValue());
-					case T_long:	return Constant.fromValue(left.shortValue() > right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.shortValue() > right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.shortValue() > right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.shortValue() > right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.shortValue() > right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.shortValue() > right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.shortValue() > right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.shortValue() > right.longValue());
 				}
 			break;
 			case T_int :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.intValue() > right.charValue());
-					case T_float:	return Constant.fromValue(left.intValue() > right.floatValue());
-					case T_double:	return Constant.fromValue(left.intValue() > right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.intValue() > right.byteValue());
-					case T_short:	return Constant.fromValue(left.intValue() > right.shortValue());
-					case T_int:		return Constant.fromValue(left.intValue() > right.intValue());
-					case T_long:	return Constant.fromValue(left.intValue() > right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.intValue() > right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.intValue() > right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.intValue() > right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.intValue() > right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.intValue() > right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.intValue() > right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.intValue() > right.longValue());
 				}
 			break;		
 			case T_long :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.longValue() > right.charValue());
-					case T_float:	return Constant.fromValue(left.longValue() > right.floatValue());
-					case T_double:	return Constant.fromValue(left.longValue() > right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.longValue() > right.byteValue());
-					case T_short:	return Constant.fromValue(left.longValue() > right.shortValue());
-					case T_int:		return Constant.fromValue(left.longValue() > right.intValue());
-					case T_long:	return Constant.fromValue(left.longValue() > right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.longValue() > right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.longValue() > right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.longValue() > right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.longValue() > right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.longValue() > right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.longValue() > right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.longValue() > right.longValue());
 				}
 				
 			}
@@ -611,79 +607,79 @@ public abstract class Constant implements TypeIds, OperatorIds {
 		switch (leftId){
 			case T_char : 
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.charValue() >= right.charValue());
-					case T_float:	return Constant.fromValue(left.charValue() >= right.floatValue());
-					case T_double:	return Constant.fromValue(left.charValue() >= right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.charValue() >= right.byteValue());
-					case T_short:	return Constant.fromValue(left.charValue() >= right.shortValue());
-					case T_int:		return Constant.fromValue(left.charValue() >= right.intValue());
-					case T_long:	return Constant.fromValue(left.charValue() >= right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.charValue() >= right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.charValue() >= right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.charValue() >= right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.charValue() >= right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.charValue() >= right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.charValue() >= right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.charValue() >= right.longValue());
 				}
 			break;
 			case T_float :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.floatValue() >= right.charValue());
-					case T_float:	return Constant.fromValue(left.floatValue() >= right.floatValue());
-					case T_double:	return Constant.fromValue(left.floatValue() >= right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.floatValue() >= right.byteValue());
-					case T_short:	return Constant.fromValue(left.floatValue() >= right.shortValue());
-					case T_int:		return Constant.fromValue(left.floatValue() >= right.intValue());
-					case T_long:	return Constant.fromValue(left.floatValue() >= right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.floatValue() >= right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.floatValue() >= right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.floatValue() >= right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.floatValue() >= right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.floatValue() >= right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.floatValue() >= right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.floatValue() >= right.longValue());
 				}
 			break;
 			case T_double :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.doubleValue() >= right.charValue());
-					case T_float:	return Constant.fromValue(left.doubleValue() >= right.floatValue());
-					case T_double:	return Constant.fromValue(left.doubleValue() >= right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.doubleValue() >= right.byteValue());
-					case T_short:	return Constant.fromValue(left.doubleValue() >= right.shortValue());
-					case T_int:		return Constant.fromValue(left.doubleValue() >= right.intValue());
-					case T_long:	return Constant.fromValue(left.doubleValue() >= right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.doubleValue() >= right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.doubleValue() >= right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.doubleValue() >= right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.doubleValue() >= right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.doubleValue() >= right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.doubleValue() >= right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.doubleValue() >= right.longValue());
 				}
 			break;
 			case T_byte :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.byteValue() >= right.charValue());
-					case T_float:	return Constant.fromValue(left.byteValue() >= right.floatValue());
-					case T_double:	return Constant.fromValue(left.byteValue() >= right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.byteValue() >= right.byteValue());
-					case T_short:	return Constant.fromValue(left.byteValue() >= right.shortValue());
-					case T_int:		return Constant.fromValue(left.byteValue() >= right.intValue());
-					case T_long:	return Constant.fromValue(left.byteValue() >= right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.byteValue() >= right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.byteValue() >= right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.byteValue() >= right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.byteValue() >= right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.byteValue() >= right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.byteValue() >= right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.byteValue() >= right.longValue());
 				}
 			break;			
 			case T_short :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.shortValue() >= right.charValue());
-					case T_float:	return Constant.fromValue(left.shortValue() >= right.floatValue());
-					case T_double:	return Constant.fromValue(left.shortValue() >= right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.shortValue() >= right.byteValue());
-					case T_short:	return Constant.fromValue(left.shortValue() >= right.shortValue());
-					case T_int:		return Constant.fromValue(left.shortValue() >= right.intValue());
-					case T_long:	return Constant.fromValue(left.shortValue() >= right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.shortValue() >= right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.shortValue() >= right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.shortValue() >= right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.shortValue() >= right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.shortValue() >= right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.shortValue() >= right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.shortValue() >= right.longValue());
 				}
 			break;
 			case T_int :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.intValue() >= right.charValue());
-					case T_float:	return Constant.fromValue(left.intValue() >= right.floatValue());
-					case T_double:	return Constant.fromValue(left.intValue() >= right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.intValue() >= right.byteValue());
-					case T_short:	return Constant.fromValue(left.intValue() >= right.shortValue());
-					case T_int:		return Constant.fromValue(left.intValue() >= right.intValue());
-					case T_long:	return Constant.fromValue(left.intValue() >= right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.intValue() >= right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.intValue() >= right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.intValue() >= right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.intValue() >= right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.intValue() >= right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.intValue() >= right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.intValue() >= right.longValue());
 				}
 			break;		
 			case T_long :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.longValue() >= right.charValue());
-					case T_float:	return Constant.fromValue(left.longValue() >= right.floatValue());
-					case T_double:	return Constant.fromValue(left.longValue() >= right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.longValue() >= right.byteValue());
-					case T_short:	return Constant.fromValue(left.longValue() >= right.shortValue());
-					case T_int:		return Constant.fromValue(left.longValue() >= right.intValue());
-					case T_long:	return Constant.fromValue(left.longValue() >= right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.longValue() >= right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.longValue() >= right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.longValue() >= right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.longValue() >= right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.longValue() >= right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.longValue() >= right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.longValue() >= right.longValue());
 				}
 				
 			}
@@ -696,47 +692,47 @@ public abstract class Constant implements TypeIds, OperatorIds {
 		switch (leftId){
 			case T_char :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.charValue() << right.charValue());
-					case T_byte:	return Constant.fromValue(left.charValue() << right.byteValue());
-					case T_short:	return Constant.fromValue(left.charValue() << right.shortValue());
-					case T_int:		return Constant.fromValue(left.charValue() << right.intValue());
-					case T_long:	return Constant.fromValue(left.charValue() << right.longValue());
+					case T_char :	return IntConstant.fromValue(left.charValue() << right.charValue());
+					case T_byte:	return IntConstant.fromValue(left.charValue() << right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.charValue() << right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.charValue() << right.intValue());
+					case T_long:	return IntConstant.fromValue(left.charValue() << right.longValue());
 				}
 			break;
 			case T_byte :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.byteValue() << right.charValue());
-					case T_byte:	return Constant.fromValue(left.byteValue() << right.byteValue());
-					case T_short:	return Constant.fromValue(left.byteValue() << right.shortValue());
-					case T_int:		return Constant.fromValue(left.byteValue() << right.intValue());
-					case T_long:	return Constant.fromValue(left.byteValue() << right.longValue());
+					case T_char :	return IntConstant.fromValue(left.byteValue() << right.charValue());
+					case T_byte:	return IntConstant.fromValue(left.byteValue() << right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.byteValue() << right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.byteValue() << right.intValue());
+					case T_long:	return IntConstant.fromValue(left.byteValue() << right.longValue());
 				}
 			break;
 			case T_short :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.shortValue() << right.charValue());
-					case T_byte:	return Constant.fromValue(left.shortValue() << right.byteValue());
-					case T_short:	return Constant.fromValue(left.shortValue() << right.shortValue());
-					case T_int:		return Constant.fromValue(left.shortValue() << right.intValue());
-					case T_long:	return Constant.fromValue(left.shortValue() << right.longValue());
+					case T_char :	return IntConstant.fromValue(left.shortValue() << right.charValue());
+					case T_byte:	return IntConstant.fromValue(left.shortValue() << right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.shortValue() << right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.shortValue() << right.intValue());
+					case T_long:	return IntConstant.fromValue(left.shortValue() << right.longValue());
 				}
 			break;
 			case T_int :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.intValue() << right.charValue());
-					case T_byte:	return Constant.fromValue(left.intValue() << right.byteValue());
-					case T_short:	return Constant.fromValue(left.intValue() << right.shortValue());
-					case T_int:		return Constant.fromValue(left.intValue() << right.intValue());
-					case T_long:	return Constant.fromValue(left.intValue() << right.longValue());
+					case T_char :	return IntConstant.fromValue(left.intValue() << right.charValue());
+					case T_byte:	return IntConstant.fromValue(left.intValue() << right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.intValue() << right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.intValue() << right.intValue());
+					case T_long:	return IntConstant.fromValue(left.intValue() << right.longValue());
 				}
 			break;
 			case T_long :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.longValue() << right.charValue());
-					case T_byte:	return Constant.fromValue(left.longValue() << right.byteValue());
-					case T_short:	return Constant.fromValue(left.longValue() << right.shortValue());
-					case T_int:		return Constant.fromValue(left.longValue() << right.intValue());
-					case T_long:	return Constant.fromValue(left.longValue() << right.longValue());
+					case T_char :	return LongConstant.fromValue(left.longValue() << right.charValue());
+					case T_byte:	return LongConstant.fromValue(left.longValue() << right.byteValue());
+					case T_short:	return LongConstant.fromValue(left.longValue() << right.shortValue());
+					case T_int:		return LongConstant.fromValue(left.longValue() << right.intValue());
+					case T_long:	return LongConstant.fromValue(left.longValue() << right.longValue());
 				}
 	
 			}
@@ -749,79 +745,79 @@ public abstract class Constant implements TypeIds, OperatorIds {
 		switch (leftId){
 			case T_char : 
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.charValue() < right.charValue());
-					case T_float:	return Constant.fromValue(left.charValue() < right.floatValue());
-					case T_double:	return Constant.fromValue(left.charValue() < right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.charValue() < right.byteValue());
-					case T_short:	return Constant.fromValue(left.charValue() < right.shortValue());
-					case T_int:		return Constant.fromValue(left.charValue() < right.intValue());
-					case T_long:	return Constant.fromValue(left.charValue() < right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.charValue() < right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.charValue() < right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.charValue() < right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.charValue() < right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.charValue() < right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.charValue() < right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.charValue() < right.longValue());
 				}
 			break;
 			case T_float :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.floatValue() < right.charValue());
-					case T_float:	return Constant.fromValue(left.floatValue() < right.floatValue());
-					case T_double:	return Constant.fromValue(left.floatValue() < right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.floatValue() < right.byteValue());
-					case T_short:	return Constant.fromValue(left.floatValue() < right.shortValue());
-					case T_int:		return Constant.fromValue(left.floatValue() < right.intValue());
-					case T_long:	return Constant.fromValue(left.floatValue() < right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.floatValue() < right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.floatValue() < right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.floatValue() < right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.floatValue() < right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.floatValue() < right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.floatValue() < right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.floatValue() < right.longValue());
 				}
 			break;
 			case T_double :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.doubleValue() < right.charValue());
-					case T_float:	return Constant.fromValue(left.doubleValue() < right.floatValue());
-					case T_double:	return Constant.fromValue(left.doubleValue() < right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.doubleValue() < right.byteValue());
-					case T_short:	return Constant.fromValue(left.doubleValue() < right.shortValue());
-					case T_int:		return Constant.fromValue(left.doubleValue() < right.intValue());
-					case T_long:	return Constant.fromValue(left.doubleValue() < right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.doubleValue() < right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.doubleValue() < right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.doubleValue() < right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.doubleValue() < right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.doubleValue() < right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.doubleValue() < right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.doubleValue() < right.longValue());
 				}
 			break;
 			case T_byte :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.byteValue() < right.charValue());
-					case T_float:	return Constant.fromValue(left.byteValue() < right.floatValue());
-					case T_double:	return Constant.fromValue(left.byteValue() < right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.byteValue() < right.byteValue());
-					case T_short:	return Constant.fromValue(left.byteValue() < right.shortValue());
-					case T_int:		return Constant.fromValue(left.byteValue() < right.intValue());
-					case T_long:	return Constant.fromValue(left.byteValue() < right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.byteValue() < right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.byteValue() < right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.byteValue() < right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.byteValue() < right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.byteValue() < right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.byteValue() < right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.byteValue() < right.longValue());
 				}
 			break;			
 			case T_short :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.shortValue() < right.charValue());
-					case T_float:	return Constant.fromValue(left.shortValue() < right.floatValue());
-					case T_double:	return Constant.fromValue(left.shortValue() < right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.shortValue() < right.byteValue());
-					case T_short:	return Constant.fromValue(left.shortValue() < right.shortValue());
-					case T_int:		return Constant.fromValue(left.shortValue() < right.intValue());
-					case T_long:	return Constant.fromValue(left.shortValue() < right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.shortValue() < right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.shortValue() < right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.shortValue() < right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.shortValue() < right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.shortValue() < right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.shortValue() < right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.shortValue() < right.longValue());
 				}
 			break;
 			case T_int :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.intValue() < right.charValue());
-					case T_float:	return Constant.fromValue(left.intValue() < right.floatValue());
-					case T_double:	return Constant.fromValue(left.intValue() < right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.intValue() < right.byteValue());
-					case T_short:	return Constant.fromValue(left.intValue() < right.shortValue());
-					case T_int:		return Constant.fromValue(left.intValue() < right.intValue());
-					case T_long:	return Constant.fromValue(left.intValue() < right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.intValue() < right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.intValue() < right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.intValue() < right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.intValue() < right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.intValue() < right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.intValue() < right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.intValue() < right.longValue());
 				}
 			break;		
 			case T_long :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.longValue() < right.charValue());
-					case T_float:	return Constant.fromValue(left.longValue() < right.floatValue());
-					case T_double:	return Constant.fromValue(left.longValue() < right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.longValue() < right.byteValue());
-					case T_short:	return Constant.fromValue(left.longValue() < right.shortValue());
-					case T_int:		return Constant.fromValue(left.longValue() < right.intValue());
-					case T_long:	return Constant.fromValue(left.longValue() < right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.longValue() < right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.longValue() < right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.longValue() < right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.longValue() < right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.longValue() < right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.longValue() < right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.longValue() < right.longValue());
 				}
 				
 			}
@@ -834,79 +830,79 @@ public abstract class Constant implements TypeIds, OperatorIds {
 		switch (leftId){
 			case T_char : 
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.charValue() <= right.charValue());
-					case T_float:	return Constant.fromValue(left.charValue() <= right.floatValue());
-					case T_double:	return Constant.fromValue(left.charValue() <= right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.charValue() <= right.byteValue());
-					case T_short:	return Constant.fromValue(left.charValue() <= right.shortValue());
-					case T_int:		return Constant.fromValue(left.charValue() <= right.intValue());
-					case T_long:	return Constant.fromValue(left.charValue() <= right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.charValue() <= right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.charValue() <= right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.charValue() <= right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.charValue() <= right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.charValue() <= right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.charValue() <= right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.charValue() <= right.longValue());
 				}
 			break;
 			case T_float :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.floatValue() <= right.charValue());
-					case T_float:	return Constant.fromValue(left.floatValue() <= right.floatValue());
-					case T_double:	return Constant.fromValue(left.floatValue() <= right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.floatValue() <= right.byteValue());
-					case T_short:	return Constant.fromValue(left.floatValue() <= right.shortValue());
-					case T_int:		return Constant.fromValue(left.floatValue() <= right.intValue());
-					case T_long:	return Constant.fromValue(left.floatValue() <= right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.floatValue() <= right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.floatValue() <= right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.floatValue() <= right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.floatValue() <= right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.floatValue() <= right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.floatValue() <= right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.floatValue() <= right.longValue());
 				}
 			break;
 			case T_double :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.doubleValue() <= right.charValue());
-					case T_float:	return Constant.fromValue(left.doubleValue() <= right.floatValue());
-					case T_double:	return Constant.fromValue(left.doubleValue() <= right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.doubleValue() <= right.byteValue());
-					case T_short:	return Constant.fromValue(left.doubleValue() <= right.shortValue());
-					case T_int:		return Constant.fromValue(left.doubleValue() <= right.intValue());
-					case T_long:	return Constant.fromValue(left.doubleValue() <= right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.doubleValue() <= right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.doubleValue() <= right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.doubleValue() <= right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.doubleValue() <= right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.doubleValue() <= right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.doubleValue() <= right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.doubleValue() <= right.longValue());
 				}
 			break;
 			case T_byte :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.byteValue() <= right.charValue());
-					case T_float:	return Constant.fromValue(left.byteValue() <= right.floatValue());
-					case T_double:	return Constant.fromValue(left.byteValue() <= right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.byteValue() <= right.byteValue());
-					case T_short:	return Constant.fromValue(left.byteValue() <= right.shortValue());
-					case T_int:		return Constant.fromValue(left.byteValue() <= right.intValue());
-					case T_long:	return Constant.fromValue(left.byteValue() <= right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.byteValue() <= right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.byteValue() <= right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.byteValue() <= right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.byteValue() <= right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.byteValue() <= right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.byteValue() <= right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.byteValue() <= right.longValue());
 				}
 			break;			
 			case T_short :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.shortValue() <= right.charValue());
-					case T_float:	return Constant.fromValue(left.shortValue() <= right.floatValue());
-					case T_double:	return Constant.fromValue(left.shortValue() <= right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.shortValue() <= right.byteValue());
-					case T_short:	return Constant.fromValue(left.shortValue() <= right.shortValue());
-					case T_int:		return Constant.fromValue(left.shortValue() <= right.intValue());
-					case T_long:	return Constant.fromValue(left.shortValue() <= right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.shortValue() <= right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.shortValue() <= right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.shortValue() <= right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.shortValue() <= right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.shortValue() <= right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.shortValue() <= right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.shortValue() <= right.longValue());
 				}
 			break;
 			case T_int :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.intValue() <= right.charValue());
-					case T_float:	return Constant.fromValue(left.intValue() <= right.floatValue());
-					case T_double:	return Constant.fromValue(left.intValue() <= right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.intValue() <= right.byteValue());
-					case T_short:	return Constant.fromValue(left.intValue() <= right.shortValue());
-					case T_int:		return Constant.fromValue(left.intValue() <= right.intValue());
-					case T_long:	return Constant.fromValue(left.intValue() <= right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.intValue() <= right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.intValue() <= right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.intValue() <= right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.intValue() <= right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.intValue() <= right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.intValue() <= right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.intValue() <= right.longValue());
 				}
 			break;		
 			case T_long :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.longValue() <= right.charValue());
-					case T_float:	return Constant.fromValue(left.longValue() <= right.floatValue());
-					case T_double:	return Constant.fromValue(left.longValue() <= right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.longValue() <= right.byteValue());
-					case T_short:	return Constant.fromValue(left.longValue() <= right.shortValue());
-					case T_int:		return Constant.fromValue(left.longValue() <= right.intValue());
-					case T_long:	return Constant.fromValue(left.longValue() <= right.longValue());
+					case T_char :	return BooleanConstant.fromValue(left.longValue() <= right.charValue());
+					case T_float:	return BooleanConstant.fromValue(left.longValue() <= right.floatValue());
+					case T_double:	return BooleanConstant.fromValue(left.longValue() <= right.doubleValue());
+					case T_byte:	return BooleanConstant.fromValue(left.longValue() <= right.byteValue());
+					case T_short:	return BooleanConstant.fromValue(left.longValue() <= right.shortValue());
+					case T_int:		return BooleanConstant.fromValue(left.longValue() <= right.intValue());
+					case T_long:	return BooleanConstant.fromValue(left.longValue() <= right.longValue());
 				}
 			}
 		
@@ -918,79 +914,79 @@ public abstract class Constant implements TypeIds, OperatorIds {
 		switch (leftId){
 			case T_char : 
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.charValue() - right.charValue());
-					case T_float:	return Constant.fromValue(left.charValue() - right.floatValue());
-					case T_double:	return Constant.fromValue(left.charValue() - right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.charValue() - right.byteValue());
-					case T_short:	return Constant.fromValue(left.charValue() - right.shortValue());
-					case T_int:		return Constant.fromValue(left.charValue() - right.intValue());
-					case T_long:	return Constant.fromValue(left.charValue() - right.longValue());
+					case T_char :	return IntConstant.fromValue(left.charValue() - right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.charValue() - right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.charValue() - right.doubleValue());
+					case T_byte:	return IntConstant.fromValue(left.charValue() - right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.charValue() - right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.charValue() - right.intValue());
+					case T_long:	return LongConstant.fromValue(left.charValue() - right.longValue());
 				}
 			break;
 			case T_float :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.floatValue() - right.charValue());
-					case T_float:	return Constant.fromValue(left.floatValue() - right.floatValue());
-					case T_double:	return Constant.fromValue(left.floatValue() - right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.floatValue() - right.byteValue());
-					case T_short:	return Constant.fromValue(left.floatValue() - right.shortValue());
-					case T_int:		return Constant.fromValue(left.floatValue() - right.intValue());
-					case T_long:	return Constant.fromValue(left.floatValue() - right.longValue());
+					case T_char :	return FloatConstant.fromValue(left.floatValue() - right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.floatValue() - right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.floatValue() - right.doubleValue());
+					case T_byte:	return FloatConstant.fromValue(left.floatValue() - right.byteValue());
+					case T_short:	return FloatConstant.fromValue(left.floatValue() - right.shortValue());
+					case T_int:		return FloatConstant.fromValue(left.floatValue() - right.intValue());
+					case T_long:	return FloatConstant.fromValue(left.floatValue() - right.longValue());
 				}
 			break;
 			case T_double :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.doubleValue() - right.charValue());
-					case T_float:	return Constant.fromValue(left.doubleValue() - right.floatValue());
-					case T_double:	return Constant.fromValue(left.doubleValue() - right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.doubleValue() - right.byteValue());
-					case T_short:	return Constant.fromValue(left.doubleValue() - right.shortValue());
-					case T_int:		return Constant.fromValue(left.doubleValue() - right.intValue());
-					case T_long:	return Constant.fromValue(left.doubleValue() - right.longValue());
+					case T_char :	return DoubleConstant.fromValue(left.doubleValue() - right.charValue());
+					case T_float:	return DoubleConstant.fromValue(left.doubleValue() - right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.doubleValue() - right.doubleValue());
+					case T_byte:	return DoubleConstant.fromValue(left.doubleValue() - right.byteValue());
+					case T_short:	return DoubleConstant.fromValue(left.doubleValue() - right.shortValue());
+					case T_int:		return DoubleConstant.fromValue(left.doubleValue() - right.intValue());
+					case T_long:	return DoubleConstant.fromValue(left.doubleValue() - right.longValue());
 				}
 			break;
 			case T_byte :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.byteValue() - right.charValue());
-					case T_float:	return Constant.fromValue(left.byteValue() - right.floatValue());
-					case T_double:	return Constant.fromValue(left.byteValue() - right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.byteValue() - right.byteValue());
-					case T_short:	return Constant.fromValue(left.byteValue() - right.shortValue());
-					case T_int:		return Constant.fromValue(left.byteValue() - right.intValue());
-					case T_long:	return Constant.fromValue(left.byteValue() - right.longValue());
+					case T_char :	return IntConstant.fromValue(left.byteValue() - right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.byteValue() - right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.byteValue() - right.doubleValue());
+					case T_byte:	return IntConstant.fromValue(left.byteValue() - right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.byteValue() - right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.byteValue() - right.intValue());
+					case T_long:	return LongConstant.fromValue(left.byteValue() - right.longValue());
 				}
 			break;			
 			case T_short :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.shortValue() - right.charValue());
-					case T_float:	return Constant.fromValue(left.shortValue() - right.floatValue());
-					case T_double:	return Constant.fromValue(left.shortValue() - right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.shortValue() - right.byteValue());
-					case T_short:	return Constant.fromValue(left.shortValue() - right.shortValue());
-					case T_int:		return Constant.fromValue(left.shortValue() - right.intValue());
-					case T_long:	return Constant.fromValue(left.shortValue() - right.longValue());
+					case T_char :	return IntConstant.fromValue(left.shortValue() - right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.shortValue() - right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.shortValue() - right.doubleValue());
+					case T_byte:	return IntConstant.fromValue(left.shortValue() - right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.shortValue() - right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.shortValue() - right.intValue());
+					case T_long:	return LongConstant.fromValue(left.shortValue() - right.longValue());
 				}
 			break;
 			case T_int :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.intValue() - right.charValue());
-					case T_float:	return Constant.fromValue(left.intValue() - right.floatValue());
-					case T_double:	return Constant.fromValue(left.intValue() - right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.intValue() - right.byteValue());
-					case T_short:	return Constant.fromValue(left.intValue() - right.shortValue());
-					case T_int:		return Constant.fromValue(left.intValue() - right.intValue());
-					case T_long:	return Constant.fromValue(left.intValue() - right.longValue());
+					case T_char :	return IntConstant.fromValue(left.intValue() - right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.intValue() - right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.intValue() - right.doubleValue());
+					case T_byte:	return IntConstant.fromValue(left.intValue() - right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.intValue() - right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.intValue() - right.intValue());
+					case T_long:	return LongConstant.fromValue(left.intValue() - right.longValue());
 				}
 			break;		
 			case T_long :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.longValue() - right.charValue());
-					case T_float:	return Constant.fromValue(left.longValue() - right.floatValue());
-					case T_double:	return Constant.fromValue(left.longValue() - right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.longValue() - right.byteValue());
-					case T_short:	return Constant.fromValue(left.longValue() - right.shortValue());
-					case T_int:		return Constant.fromValue(left.longValue() - right.intValue());
-					case T_long:	return Constant.fromValue(left.longValue() - right.longValue());
+					case T_char :	return LongConstant.fromValue(left.longValue() - right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.longValue() - right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.longValue() - right.doubleValue());
+					case T_byte:	return LongConstant.fromValue(left.longValue() - right.byteValue());
+					case T_short:	return LongConstant.fromValue(left.longValue() - right.shortValue());
+					case T_int:		return LongConstant.fromValue(left.longValue() - right.intValue());
+					case T_long:	return LongConstant.fromValue(left.longValue() - right.longValue());
 				}
 				
 			}
@@ -1003,79 +999,79 @@ public abstract class Constant implements TypeIds, OperatorIds {
 		switch (leftId){
 			case T_char :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.charValue() * right.charValue());
-					case T_float:	return Constant.fromValue(left.charValue() * right.floatValue());
-					case T_double:	return Constant.fromValue(left.charValue() * right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.charValue() * right.byteValue());
-					case T_short:	return Constant.fromValue(left.charValue() * right.shortValue());
-					case T_int:		return Constant.fromValue(left.charValue() * right.intValue());
-					case T_long:	return Constant.fromValue(left.charValue() * right.longValue());
+					case T_char :	return IntConstant.fromValue(left.charValue() * right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.charValue() * right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.charValue() * right.doubleValue());
+					case T_byte:	return IntConstant.fromValue(left.charValue() * right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.charValue() * right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.charValue() * right.intValue());
+					case T_long:	return LongConstant.fromValue(left.charValue() * right.longValue());
 				}
 			break;
 			case T_float :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.floatValue() * right.charValue());
-					case T_float:	return Constant.fromValue(left.floatValue() * right.floatValue());
-					case T_double:	return Constant.fromValue(left.floatValue() * right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.floatValue() * right.byteValue());
-					case T_short:	return Constant.fromValue(left.floatValue() * right.shortValue());
-					case T_int:		return Constant.fromValue(left.floatValue() * right.intValue());
-					case T_long:	return Constant.fromValue(left.floatValue() * right.longValue());
+					case T_char :	return FloatConstant.fromValue(left.floatValue() * right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.floatValue() * right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.floatValue() * right.doubleValue());
+					case T_byte:	return FloatConstant.fromValue(left.floatValue() * right.byteValue());
+					case T_short:	return FloatConstant.fromValue(left.floatValue() * right.shortValue());
+					case T_int:		return FloatConstant.fromValue(left.floatValue() * right.intValue());
+					case T_long:	return FloatConstant.fromValue(left.floatValue() * right.longValue());
 				}
 			break;
 			case T_double :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.doubleValue() * right.charValue());
-					case T_float:	return Constant.fromValue(left.doubleValue() * right.floatValue());
-					case T_double:	return Constant.fromValue(left.doubleValue() * right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.doubleValue() * right.byteValue());
-					case T_short:	return Constant.fromValue(left.doubleValue() * right.shortValue());
-					case T_int:		return Constant.fromValue(left.doubleValue() * right.intValue());
-					case T_long:	return Constant.fromValue(left.doubleValue() * right.longValue());
+					case T_char :	return DoubleConstant.fromValue(left.doubleValue() * right.charValue());
+					case T_float:	return DoubleConstant.fromValue(left.doubleValue() * right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.doubleValue() * right.doubleValue());
+					case T_byte:	return DoubleConstant.fromValue(left.doubleValue() * right.byteValue());
+					case T_short:	return DoubleConstant.fromValue(left.doubleValue() * right.shortValue());
+					case T_int:		return DoubleConstant.fromValue(left.doubleValue() * right.intValue());
+					case T_long:	return DoubleConstant.fromValue(left.doubleValue() * right.longValue());
 				}
 			break;
 			case T_byte :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.byteValue() * right.charValue());
-					case T_float:	return Constant.fromValue(left.byteValue() * right.floatValue());
-					case T_double:	return Constant.fromValue(left.byteValue() * right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.byteValue() * right.byteValue());
-					case T_short:	return Constant.fromValue(left.byteValue() * right.shortValue());
-					case T_int:		return Constant.fromValue(left.byteValue() * right.intValue());
-					case T_long:	return Constant.fromValue(left.byteValue() * right.longValue());
+					case T_char :	return IntConstant.fromValue(left.byteValue() * right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.byteValue() * right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.byteValue() * right.doubleValue());
+					case T_byte:	return IntConstant.fromValue(left.byteValue() * right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.byteValue() * right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.byteValue() * right.intValue());
+					case T_long:	return LongConstant.fromValue(left.byteValue() * right.longValue());
 				}
 			break;
 			case T_short :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.shortValue() * right.charValue());
-					case T_float:	return Constant.fromValue(left.shortValue() * right.floatValue());
-					case T_double:	return Constant.fromValue(left.shortValue() * right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.shortValue() * right.byteValue());
-					case T_short:	return Constant.fromValue(left.shortValue() * right.shortValue());
-					case T_int:		return Constant.fromValue(left.shortValue() * right.intValue());
-					case T_long:	return Constant.fromValue(left.shortValue() * right.longValue());
+					case T_char :	return IntConstant.fromValue(left.shortValue() * right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.shortValue() * right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.shortValue() * right.doubleValue());
+					case T_byte:	return IntConstant.fromValue(left.shortValue() * right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.shortValue() * right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.shortValue() * right.intValue());
+					case T_long:	return LongConstant.fromValue(left.shortValue() * right.longValue());
 				}
 			break;
 			case T_int :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.intValue() * right.charValue());
-					case T_float:	return Constant.fromValue(left.intValue() * right.floatValue());
-					case T_double:	return Constant.fromValue(left.intValue() * right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.intValue() * right.byteValue());
-					case T_short:	return Constant.fromValue(left.intValue() * right.shortValue());
-					case T_int:		return Constant.fromValue(left.intValue() * right.intValue());
-					case T_long:	return Constant.fromValue(left.intValue() * right.longValue());
+					case T_char :	return IntConstant.fromValue(left.intValue() * right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.intValue() * right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.intValue() * right.doubleValue());
+					case T_byte:	return IntConstant.fromValue(left.intValue() * right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.intValue() * right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.intValue() * right.intValue());
+					case T_long:	return LongConstant.fromValue(left.intValue() * right.longValue());
 				}
 			break;
 			case T_long :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.longValue() * right.charValue());
-					case T_float:	return Constant.fromValue(left.longValue() * right.floatValue());
-					case T_double:	return Constant.fromValue(left.longValue() * right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.longValue() * right.byteValue());
-					case T_short:	return Constant.fromValue(left.longValue() * right.shortValue());
-					case T_int:		return Constant.fromValue(left.longValue() * right.intValue());
-					case T_long:	return Constant.fromValue(left.longValue() * right.longValue());
+					case T_char :	return LongConstant.fromValue(left.longValue() * right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.longValue() * right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.longValue() * right.doubleValue());
+					case T_byte:	return LongConstant.fromValue(left.longValue() * right.byteValue());
+					case T_short:	return LongConstant.fromValue(left.longValue() * right.shortValue());
+					case T_int:		return LongConstant.fromValue(left.longValue() * right.intValue());
+					case T_long:	return LongConstant.fromValue(left.longValue() * right.longValue());
 				}
 			}
 	
@@ -1085,50 +1081,50 @@ public abstract class Constant implements TypeIds, OperatorIds {
 	public static final Constant computeConstantOperationOR(Constant left, int leftId, Constant right, int rightId) {
 		
 		switch (leftId){
-			case T_boolean :		return Constant.fromValue(left.booleanValue() | right.booleanValue());
+			case T_boolean :		return BooleanConstant.fromValue(left.booleanValue() | right.booleanValue());
 			case T_char :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.charValue() | right.charValue());
-					case T_byte:	return Constant.fromValue(left.charValue() | right.byteValue());
-					case T_short:	return Constant.fromValue(left.charValue() | right.shortValue());
-					case T_int:		return Constant.fromValue(left.charValue() | right.intValue());
-					case T_long:	return Constant.fromValue(left.charValue() | right.longValue());
+					case T_char :	return IntConstant.fromValue(left.charValue() | right.charValue());
+					case T_byte:	return IntConstant.fromValue(left.charValue() | right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.charValue() | right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.charValue() | right.intValue());
+					case T_long:	return LongConstant.fromValue(left.charValue() | right.longValue());
 				}
 			break;
 			case T_byte :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.byteValue() | right.charValue());
-					case T_byte:	return Constant.fromValue(left.byteValue() | right.byteValue());
-					case T_short:	return Constant.fromValue(left.byteValue() | right.shortValue());
-					case T_int:		return Constant.fromValue(left.byteValue() | right.intValue());
-					case T_long:	return Constant.fromValue(left.byteValue() | right.longValue());
+					case T_char :	return IntConstant.fromValue(left.byteValue() | right.charValue());
+					case T_byte:	return IntConstant.fromValue(left.byteValue() | right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.byteValue() | right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.byteValue() | right.intValue());
+					case T_long:	return LongConstant.fromValue(left.byteValue() | right.longValue());
 				}
 			break;
 			case T_short :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.shortValue() | right.charValue());
-					case T_byte:	return Constant.fromValue(left.shortValue() | right.byteValue());
-					case T_short:	return Constant.fromValue(left.shortValue() | right.shortValue());
-					case T_int:		return Constant.fromValue(left.shortValue() | right.intValue());
-					case T_long:	return Constant.fromValue(left.shortValue() | right.longValue());
+					case T_char :	return IntConstant.fromValue(left.shortValue() | right.charValue());
+					case T_byte:	return IntConstant.fromValue(left.shortValue() | right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.shortValue() | right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.shortValue() | right.intValue());
+					case T_long:	return LongConstant.fromValue(left.shortValue() | right.longValue());
 				}
 			break;
 			case T_int :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.intValue() | right.charValue());
-					case T_byte:	return Constant.fromValue(left.intValue() | right.byteValue());
-					case T_short:	return Constant.fromValue(left.intValue() | right.shortValue());
-					case T_int:		return Constant.fromValue(left.intValue() | right.intValue());
-					case T_long:	return Constant.fromValue(left.intValue() | right.longValue());
+					case T_char :	return IntConstant.fromValue(left.intValue() | right.charValue());
+					case T_byte:	return IntConstant.fromValue(left.intValue() | right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.intValue() | right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.intValue() | right.intValue());
+					case T_long:	return LongConstant.fromValue(left.intValue() | right.longValue());
 				}
 			break;
 			case T_long :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.longValue() | right.charValue());
-					case T_byte:	return Constant.fromValue(left.longValue() | right.byteValue());
-					case T_short:	return Constant.fromValue(left.longValue() | right.shortValue());
-					case T_int:		return Constant.fromValue(left.longValue() | right.intValue());
-					case T_long:	return Constant.fromValue(left.longValue() | right.longValue());
+					case T_char :	return LongConstant.fromValue(left.longValue() | right.charValue());
+					case T_byte:	return LongConstant.fromValue(left.longValue() | right.byteValue());
+					case T_short:	return LongConstant.fromValue(left.longValue() | right.shortValue());
+					case T_int:		return LongConstant.fromValue(left.longValue() | right.intValue());
+					case T_long:	return LongConstant.fromValue(left.longValue() | right.longValue());
 				}
 	
 			}	
@@ -1138,7 +1134,7 @@ public abstract class Constant implements TypeIds, OperatorIds {
 	
 	public static final Constant computeConstantOperationOR_OR(Constant left, int leftId, Constant right, int rightId) {
 	
-		return Constant.fromValue(left.booleanValue() || right.booleanValue());
+		return BooleanConstant.fromValue(left.booleanValue() || right.booleanValue());
 	}
 		
 	public static final Constant computeConstantOperationPLUS(Constant left, int leftId, Constant right, int rightId) {
@@ -1146,109 +1142,109 @@ public abstract class Constant implements TypeIds, OperatorIds {
 		switch (leftId){
 			case T_JavaLangObject :
 				if (rightId == T_JavaLangString) {
-					return Constant.fromValue(left.stringValue() + right.stringValue());
+					return StringConstant.fromValue(left.stringValue() + right.stringValue());
 				}
 			case T_boolean :
 				if (rightId == T_JavaLangString) {
-					return Constant.fromValue(left.stringValue() + right.stringValue());
+					return StringConstant.fromValue(left.stringValue() + right.stringValue());
 				}
 			break;
 			case T_char :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.charValue() + right.charValue());
-					case T_float:	return Constant.fromValue(left.charValue() + right.floatValue());
-					case T_double:	return Constant.fromValue(left.charValue() + right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.charValue() + right.byteValue());
-					case T_short:	return Constant.fromValue(left.charValue() + right.shortValue());
-					case T_int:		return Constant.fromValue(left.charValue() + right.intValue());
-					case T_long:	return Constant.fromValue(left.charValue() + right.longValue());
-					case T_JavaLangString:	return Constant.fromValue(left.stringValue() + right.stringValue());
+					case T_char :	return IntConstant.fromValue(left.charValue() + right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.charValue() + right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.charValue() + right.doubleValue());
+					case T_byte:	return IntConstant.fromValue(left.charValue() + right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.charValue() + right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.charValue() + right.intValue());
+					case T_long:	return LongConstant.fromValue(left.charValue() + right.longValue());
+					case T_JavaLangString:	return StringConstant.fromValue(left.stringValue() + right.stringValue());
 				}
 			break;
 			case T_float :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.floatValue() + right.charValue());
-					case T_float:	return Constant.fromValue(left.floatValue() + right.floatValue());
-					case T_double:	return Constant.fromValue(left.floatValue() + right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.floatValue() + right.byteValue());
-					case T_short:	return Constant.fromValue(left.floatValue() + right.shortValue());
-					case T_int:		return Constant.fromValue(left.floatValue() + right.intValue());
-					case T_long:	return Constant.fromValue(left.floatValue() + right.longValue());
-					case T_JavaLangString:	return Constant.fromValue(left.stringValue() + right.stringValue()); 
+					case T_char :	return FloatConstant.fromValue(left.floatValue() + right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.floatValue() + right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.floatValue() + right.doubleValue());
+					case T_byte:	return FloatConstant.fromValue(left.floatValue() + right.byteValue());
+					case T_short:	return FloatConstant.fromValue(left.floatValue() + right.shortValue());
+					case T_int:		return FloatConstant.fromValue(left.floatValue() + right.intValue());
+					case T_long:	return FloatConstant.fromValue(left.floatValue() + right.longValue());
+					case T_JavaLangString:	return StringConstant.fromValue(left.stringValue() + right.stringValue()); 
 				}
 			break;
 			case T_double :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.doubleValue() + right.charValue());
-					case T_float:	return Constant.fromValue(left.doubleValue() + right.floatValue());
-					case T_double:	return Constant.fromValue(left.doubleValue() + right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.doubleValue() + right.byteValue());
-					case T_short:	return Constant.fromValue(left.doubleValue() + right.shortValue());
-					case T_int:		return Constant.fromValue(left.doubleValue() + right.intValue());
-					case T_long:	return Constant.fromValue(left.doubleValue() + right.longValue());
-					case T_JavaLangString:	return Constant.fromValue(left.stringValue() + right.stringValue());
+					case T_char :	return DoubleConstant.fromValue(left.doubleValue() + right.charValue());
+					case T_float:	return DoubleConstant.fromValue(left.doubleValue() + right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.doubleValue() + right.doubleValue());
+					case T_byte:	return DoubleConstant.fromValue(left.doubleValue() + right.byteValue());
+					case T_short:	return DoubleConstant.fromValue(left.doubleValue() + right.shortValue());
+					case T_int:		return DoubleConstant.fromValue(left.doubleValue() + right.intValue());
+					case T_long:	return DoubleConstant.fromValue(left.doubleValue() + right.longValue());
+					case T_JavaLangString:	return StringConstant.fromValue(left.stringValue() + right.stringValue());
 				}
 			break;
 			case T_byte :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.byteValue() + right.charValue());
-					case T_float:	return Constant.fromValue(left.byteValue() + right.floatValue());
-					case T_double:	return Constant.fromValue(left.byteValue() + right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.byteValue() + right.byteValue());
-					case T_short:	return Constant.fromValue(left.byteValue() + right.shortValue());
-					case T_int:		return Constant.fromValue(left.byteValue() + right.intValue());
-					case T_long:	return Constant.fromValue(left.byteValue() + right.longValue());
-					case T_JavaLangString:	return Constant.fromValue(left.stringValue() + right.stringValue()); 
+					case T_char :	return IntConstant.fromValue(left.byteValue() + right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.byteValue() + right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.byteValue() + right.doubleValue());
+					case T_byte:	return IntConstant.fromValue(left.byteValue() + right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.byteValue() + right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.byteValue() + right.intValue());
+					case T_long:	return LongConstant.fromValue(left.byteValue() + right.longValue());
+					case T_JavaLangString:	return StringConstant.fromValue(left.stringValue() + right.stringValue()); 
 				}
 	
 			break;			
 			case T_short :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.shortValue() + right.charValue());
-					case T_float:	return Constant.fromValue(left.shortValue() + right.floatValue());
-					case T_double:	return Constant.fromValue(left.shortValue() + right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.shortValue() + right.byteValue());
-					case T_short:	return Constant.fromValue(left.shortValue() + right.shortValue());
-					case T_int:		return Constant.fromValue(left.shortValue() + right.intValue());
-					case T_long:	return Constant.fromValue(left.shortValue() + right.longValue());
-					case T_JavaLangString:	return Constant.fromValue(left.stringValue() + right.stringValue());
+					case T_char :	return IntConstant.fromValue(left.shortValue() + right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.shortValue() + right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.shortValue() + right.doubleValue());
+					case T_byte:	return IntConstant.fromValue(left.shortValue() + right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.shortValue() + right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.shortValue() + right.intValue());
+					case T_long:	return LongConstant.fromValue(left.shortValue() + right.longValue());
+					case T_JavaLangString:	return StringConstant.fromValue(left.stringValue() + right.stringValue());
 				}
 			break;
 			case T_int :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.intValue() + right.charValue());
-					case T_float:	return Constant.fromValue(left.intValue() + right.floatValue());
-					case T_double:	return Constant.fromValue(left.intValue() + right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.intValue() + right.byteValue());
-					case T_short:	return Constant.fromValue(left.intValue() + right.shortValue());
-					case T_int:		return Constant.fromValue(left.intValue() + right.intValue());
-					case T_long:	return Constant.fromValue(left.intValue() + right.longValue());
-					case T_JavaLangString:	return Constant.fromValue(left.stringValue() + right.stringValue());
+					case T_char :	return IntConstant.fromValue(left.intValue() + right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.intValue() + right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.intValue() + right.doubleValue());
+					case T_byte:	return IntConstant.fromValue(left.intValue() + right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.intValue() + right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.intValue() + right.intValue());
+					case T_long:	return LongConstant.fromValue(left.intValue() + right.longValue());
+					case T_JavaLangString:	return StringConstant.fromValue(left.stringValue() + right.stringValue());
 				}
 			break;		
 			case T_long :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.longValue() + right.charValue());
-					case T_float:	return Constant.fromValue(left.longValue() + right.floatValue());
-					case T_double:	return Constant.fromValue(left.longValue() + right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.longValue() + right.byteValue());
-					case T_short:	return Constant.fromValue(left.longValue() + right.shortValue());
-					case T_int:		return Constant.fromValue(left.longValue() + right.intValue());
-					case T_long:	return Constant.fromValue(left.longValue() + right.longValue());
-					case T_JavaLangString:	return Constant.fromValue(left.stringValue() + right.stringValue()); 
+					case T_char :	return LongConstant.fromValue(left.longValue() + right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.longValue() + right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.longValue() + right.doubleValue());
+					case T_byte:	return LongConstant.fromValue(left.longValue() + right.byteValue());
+					case T_short:	return LongConstant.fromValue(left.longValue() + right.shortValue());
+					case T_int:		return LongConstant.fromValue(left.longValue() + right.intValue());
+					case T_long:	return LongConstant.fromValue(left.longValue() + right.longValue());
+					case T_JavaLangString:	return StringConstant.fromValue(left.stringValue() + right.stringValue()); 
 				}
 			break;
 			case T_JavaLangString :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.stringValue() + String.valueOf(right.charValue()));
-					case T_float:	return Constant.fromValue(left.stringValue() + String.valueOf(right.floatValue()));
-					case T_double:	return Constant.fromValue(left.stringValue() + String.valueOf(right.doubleValue()));
-					case T_byte:	return Constant.fromValue(left.stringValue() + String.valueOf(right.byteValue()));
-					case T_short:	return Constant.fromValue(left.stringValue() + String.valueOf(right.shortValue()));
-					case T_int:		return Constant.fromValue(left.stringValue() + String.valueOf(right.intValue()));
-					case T_long:	return Constant.fromValue(left.stringValue() + String.valueOf(right.longValue()));
-					case T_JavaLangString:	return Constant.fromValue(left.stringValue() + right.stringValue()); 
-					case T_boolean:	return Constant.fromValue(left.stringValue() + right.booleanValue());
+					case T_char :	return StringConstant.fromValue(left.stringValue() + String.valueOf(right.charValue()));
+					case T_float:	return StringConstant.fromValue(left.stringValue() + String.valueOf(right.floatValue()));
+					case T_double:	return StringConstant.fromValue(left.stringValue() + String.valueOf(right.doubleValue()));
+					case T_byte:	return StringConstant.fromValue(left.stringValue() + String.valueOf(right.byteValue()));
+					case T_short:	return StringConstant.fromValue(left.stringValue() + String.valueOf(right.shortValue()));
+					case T_int:		return StringConstant.fromValue(left.stringValue() + String.valueOf(right.intValue()));
+					case T_long:	return StringConstant.fromValue(left.stringValue() + String.valueOf(right.longValue()));
+					case T_JavaLangString:	return StringConstant.fromValue(left.stringValue() + right.stringValue()); 
+					case T_boolean:	return StringConstant.fromValue(left.stringValue() + right.booleanValue());
 				}
 			break;	
 //			case T_null :
@@ -1273,79 +1269,79 @@ public abstract class Constant implements TypeIds, OperatorIds {
 		switch (leftId){
 			case T_char : 
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.charValue() % right.charValue());
-					case T_float:	return Constant.fromValue(left.charValue() % right.floatValue());
-					case T_double:	return Constant.fromValue(left.charValue() % right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.charValue() % right.byteValue());
-					case T_short:	return Constant.fromValue(left.charValue() % right.shortValue());
-					case T_int:		return Constant.fromValue(left.charValue() % right.intValue());
-					case T_long:	return Constant.fromValue(left.charValue() % right.longValue());
+					case T_char :	return IntConstant.fromValue(left.charValue() % right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.charValue() % right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.charValue() % right.doubleValue());
+					case T_byte:	return IntConstant.fromValue(left.charValue() % right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.charValue() % right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.charValue() % right.intValue());
+					case T_long:	return LongConstant.fromValue(left.charValue() % right.longValue());
 				}
 			break;
 			case T_float :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.floatValue() % right.charValue());
-					case T_float:	return Constant.fromValue(left.floatValue() % right.floatValue());
-					case T_double:	return Constant.fromValue(left.floatValue() % right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.floatValue() % right.byteValue());
-					case T_short:	return Constant.fromValue(left.floatValue() % right.shortValue());
-					case T_int:		return Constant.fromValue(left.floatValue() % right.intValue());
-					case T_long:	return Constant.fromValue(left.floatValue() % right.longValue());
+					case T_char :	return FloatConstant.fromValue(left.floatValue() % right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.floatValue() % right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.floatValue() % right.doubleValue());
+					case T_byte:	return FloatConstant.fromValue(left.floatValue() % right.byteValue());
+					case T_short:	return FloatConstant.fromValue(left.floatValue() % right.shortValue());
+					case T_int:		return FloatConstant.fromValue(left.floatValue() % right.intValue());
+					case T_long:	return FloatConstant.fromValue(left.floatValue() % right.longValue());
 				}
 			break;
 			case T_double :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.doubleValue() % right.charValue());
-					case T_float:	return Constant.fromValue(left.doubleValue() % right.floatValue());
-					case T_double:	return Constant.fromValue(left.doubleValue() % right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.doubleValue() % right.byteValue());
-					case T_short:	return Constant.fromValue(left.doubleValue() % right.shortValue());
-					case T_int:		return Constant.fromValue(left.doubleValue() % right.intValue());
-					case T_long:	return Constant.fromValue(left.doubleValue() % right.longValue());
+					case T_char :	return DoubleConstant.fromValue(left.doubleValue() % right.charValue());
+					case T_float:	return DoubleConstant.fromValue(left.doubleValue() % right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.doubleValue() % right.doubleValue());
+					case T_byte:	return DoubleConstant.fromValue(left.doubleValue() % right.byteValue());
+					case T_short:	return DoubleConstant.fromValue(left.doubleValue() % right.shortValue());
+					case T_int:		return DoubleConstant.fromValue(left.doubleValue() % right.intValue());
+					case T_long:	return DoubleConstant.fromValue(left.doubleValue() % right.longValue());
 				}
 			break;
 			case T_byte :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.byteValue() % right.charValue());
-					case T_float:	return Constant.fromValue(left.byteValue() % right.floatValue());
-					case T_double:	return Constant.fromValue(left.byteValue() % right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.byteValue() % right.byteValue());
-					case T_short:	return Constant.fromValue(left.byteValue() % right.shortValue());
-					case T_int:		return Constant.fromValue(left.byteValue() % right.intValue());
-					case T_long:	return Constant.fromValue(left.byteValue() % right.longValue());
+					case T_char :	return IntConstant.fromValue(left.byteValue() % right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.byteValue() % right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.byteValue() % right.doubleValue());
+					case T_byte:	return IntConstant.fromValue(left.byteValue() % right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.byteValue() % right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.byteValue() % right.intValue());
+					case T_long:	return LongConstant.fromValue(left.byteValue() % right.longValue());
 				}
 			break;			
 			case T_short :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.shortValue() % right.charValue());
-					case T_float:	return Constant.fromValue(left.shortValue() % right.floatValue());
-					case T_double:	return Constant.fromValue(left.shortValue() % right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.shortValue() % right.byteValue());
-					case T_short:	return Constant.fromValue(left.shortValue() % right.shortValue());
-					case T_int:		return Constant.fromValue(left.shortValue() % right.intValue());
-					case T_long:	return Constant.fromValue(left.shortValue() % right.longValue());
+					case T_char :	return IntConstant.fromValue(left.shortValue() % right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.shortValue() % right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.shortValue() % right.doubleValue());
+					case T_byte:	return IntConstant.fromValue(left.shortValue() % right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.shortValue() % right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.shortValue() % right.intValue());
+					case T_long:	return LongConstant.fromValue(left.shortValue() % right.longValue());
 				}
 			break;
 			case T_int :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.intValue() % right.charValue());
-					case T_float:	return Constant.fromValue(left.intValue() % right.floatValue());
-					case T_double:	return Constant.fromValue(left.intValue() % right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.intValue() % right.byteValue());
-					case T_short:	return Constant.fromValue(left.intValue() % right.shortValue());
-					case T_int:		return Constant.fromValue(left.intValue() % right.intValue());
-					case T_long:	return Constant.fromValue(left.intValue() % right.longValue());
+					case T_char :	return IntConstant.fromValue(left.intValue() % right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.intValue() % right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.intValue() % right.doubleValue());
+					case T_byte:	return IntConstant.fromValue(left.intValue() % right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.intValue() % right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.intValue() % right.intValue());
+					case T_long:	return LongConstant.fromValue(left.intValue() % right.longValue());
 				}
 			break;		
 			case T_long :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.longValue() % right.charValue());
-					case T_float:	return Constant.fromValue(left.longValue() % right.floatValue());
-					case T_double:	return Constant.fromValue(left.longValue() % right.doubleValue());
-					case T_byte:	return Constant.fromValue(left.longValue() % right.byteValue());
-					case T_short:	return Constant.fromValue(left.longValue() % right.shortValue());
-					case T_int:		return Constant.fromValue(left.longValue() % right.intValue());
-					case T_long:	return Constant.fromValue(left.longValue() % right.longValue());
+					case T_char :	return LongConstant.fromValue(left.longValue() % right.charValue());
+					case T_float:	return FloatConstant.fromValue(left.longValue() % right.floatValue());
+					case T_double:	return DoubleConstant.fromValue(left.longValue() % right.doubleValue());
+					case T_byte:	return LongConstant.fromValue(left.longValue() % right.byteValue());
+					case T_short:	return LongConstant.fromValue(left.longValue() % right.shortValue());
+					case T_int:		return LongConstant.fromValue(left.longValue() % right.intValue());
+					case T_long:	return LongConstant.fromValue(left.longValue() % right.longValue());
 				}
 				
 			}
@@ -1358,47 +1354,47 @@ public abstract class Constant implements TypeIds, OperatorIds {
 		switch (leftId){
 			case T_char :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.charValue() >> right.charValue());
-					case T_byte:	return Constant.fromValue(left.charValue() >> right.byteValue());
-					case T_short:	return Constant.fromValue(left.charValue() >> right.shortValue());
-					case T_int:		return Constant.fromValue(left.charValue() >> right.intValue());
-					case T_long:	return Constant.fromValue(left.charValue() >> right.longValue());
+					case T_char :	return IntConstant.fromValue(left.charValue() >> right.charValue());
+					case T_byte:	return IntConstant.fromValue(left.charValue() >> right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.charValue() >> right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.charValue() >> right.intValue());
+					case T_long:	return IntConstant.fromValue(left.charValue() >> right.longValue());
 				}
 			break;
 			case T_byte :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.byteValue() >> right.charValue());
-					case T_byte:	return Constant.fromValue(left.byteValue() >> right.byteValue());
-					case T_short:	return Constant.fromValue(left.byteValue() >> right.shortValue());
-					case T_int:		return Constant.fromValue(left.byteValue() >> right.intValue());
-					case T_long:	return Constant.fromValue(left.byteValue() >> right.longValue());
+					case T_char :	return IntConstant.fromValue(left.byteValue() >> right.charValue());
+					case T_byte:	return IntConstant.fromValue(left.byteValue() >> right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.byteValue() >> right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.byteValue() >> right.intValue());
+					case T_long:	return IntConstant.fromValue(left.byteValue() >> right.longValue());
 				}
 			break;
 			case T_short :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.shortValue() >> right.charValue());
-					case T_byte:	return Constant.fromValue(left.shortValue() >> right.byteValue());
-					case T_short:	return Constant.fromValue(left.shortValue() >> right.shortValue());
-					case T_int:		return Constant.fromValue(left.shortValue() >> right.intValue());
-					case T_long:	return Constant.fromValue(left.shortValue() >> right.longValue());
+					case T_char :	return IntConstant.fromValue(left.shortValue() >> right.charValue());
+					case T_byte:	return IntConstant.fromValue(left.shortValue() >> right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.shortValue() >> right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.shortValue() >> right.intValue());
+					case T_long:	return IntConstant.fromValue(left.shortValue() >> right.longValue());
 				}
 			break;
 			case T_int :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.intValue() >> right.charValue());
-					case T_byte:	return Constant.fromValue(left.intValue() >> right.byteValue());
-					case T_short:	return Constant.fromValue(left.intValue() >> right.shortValue());
-					case T_int:		return Constant.fromValue(left.intValue() >> right.intValue());
-					case T_long:	return Constant.fromValue(left.intValue() >> right.longValue());
+					case T_char :	return IntConstant.fromValue(left.intValue() >> right.charValue());
+					case T_byte:	return IntConstant.fromValue(left.intValue() >> right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.intValue() >> right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.intValue() >> right.intValue());
+					case T_long:	return IntConstant.fromValue(left.intValue() >> right.longValue());
 				}
 			break;
 			case T_long :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.longValue() >> right.charValue());
-					case T_byte:	return Constant.fromValue(left.longValue() >> right.byteValue());
-					case T_short:	return Constant.fromValue(left.longValue() >> right.shortValue());
-					case T_int:		return Constant.fromValue(left.longValue() >> right.intValue());
-					case T_long:	return Constant.fromValue(left.longValue() >> right.longValue());
+					case T_char :	return LongConstant.fromValue(left.longValue() >> right.charValue());
+					case T_byte:	return LongConstant.fromValue(left.longValue() >> right.byteValue());
+					case T_short:	return LongConstant.fromValue(left.longValue() >> right.shortValue());
+					case T_int:		return LongConstant.fromValue(left.longValue() >> right.intValue());
+					case T_long:	return LongConstant.fromValue(left.longValue() >> right.longValue());
 				}
 	
 			}
@@ -1411,47 +1407,47 @@ public abstract class Constant implements TypeIds, OperatorIds {
 		switch (leftId){
 			case T_char :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.charValue() >>> right.charValue());
-					case T_byte:	return Constant.fromValue(left.charValue() >>> right.byteValue());
-					case T_short:	return Constant.fromValue(left.charValue() >>> right.shortValue());
-					case T_int:		return Constant.fromValue(left.charValue() >>> right.intValue());
-					case T_long:	return Constant.fromValue(left.charValue() >>> right.longValue());
+					case T_char :	return IntConstant.fromValue(left.charValue() >>> right.charValue());
+					case T_byte:	return IntConstant.fromValue(left.charValue() >>> right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.charValue() >>> right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.charValue() >>> right.intValue());
+					case T_long:	return IntConstant.fromValue(left.charValue() >>> right.longValue());
 				}
 			break;
 			case T_byte :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.byteValue() >>> right.charValue());
-					case T_byte:	return Constant.fromValue(left.byteValue() >>> right.byteValue());
-					case T_short:	return Constant.fromValue(left.byteValue() >>> right.shortValue());
-					case T_int:		return Constant.fromValue(left.byteValue() >>> right.intValue());
-					case T_long:	return Constant.fromValue(left.byteValue() >>> right.longValue());
+					case T_char :	return IntConstant.fromValue(left.byteValue() >>> right.charValue());
+					case T_byte:	return IntConstant.fromValue(left.byteValue() >>> right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.byteValue() >>> right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.byteValue() >>> right.intValue());
+					case T_long:	return IntConstant.fromValue(left.byteValue() >>> right.longValue());
 				}
 			break;
 			case T_short :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.shortValue() >>> right.charValue());
-					case T_byte:	return Constant.fromValue(left.shortValue() >>> right.byteValue());
-					case T_short:	return Constant.fromValue(left.shortValue() >>> right.shortValue());
-					case T_int:		return Constant.fromValue(left.shortValue() >>> right.intValue());
-					case T_long:	return Constant.fromValue(left.shortValue() >>> right.longValue());
+					case T_char :	return IntConstant.fromValue(left.shortValue() >>> right.charValue());
+					case T_byte:	return IntConstant.fromValue(left.shortValue() >>> right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.shortValue() >>> right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.shortValue() >>> right.intValue());
+					case T_long:	return IntConstant.fromValue(left.shortValue() >>> right.longValue());
 				}
 			break;
 			case T_int :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.intValue() >>> right.charValue());
-					case T_byte:	return Constant.fromValue(left.intValue() >>> right.byteValue());
-					case T_short:	return Constant.fromValue(left.intValue() >>> right.shortValue());
-					case T_int:		return Constant.fromValue(left.intValue() >>> right.intValue());
-					case T_long:	return Constant.fromValue(left.intValue() >>> right.longValue());
+					case T_char :	return IntConstant.fromValue(left.intValue() >>> right.charValue());
+					case T_byte:	return IntConstant.fromValue(left.intValue() >>> right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.intValue() >>> right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.intValue() >>> right.intValue());
+					case T_long:	return IntConstant.fromValue(left.intValue() >>> right.longValue());
 				}
 			break;
 			case T_long :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.longValue() >>> right.charValue());
-					case T_byte:	return Constant.fromValue(left.longValue() >>> right.byteValue());
-					case T_short:	return Constant.fromValue(left.longValue() >>> right.shortValue());
-					case T_int:		return Constant.fromValue(left.longValue() >>> right.intValue());
-					case T_long:	return Constant.fromValue(left.longValue() >>> right.longValue());
+					case T_char :	return LongConstant.fromValue(left.longValue() >>> right.charValue());
+					case T_byte:	return LongConstant.fromValue(left.longValue() >>> right.byteValue());
+					case T_short:	return LongConstant.fromValue(left.longValue() >>> right.shortValue());
+					case T_int:		return LongConstant.fromValue(left.longValue() >>> right.intValue());
+					case T_long:	return LongConstant.fromValue(left.longValue() >>> right.longValue());
 				}
 	
 			}
@@ -1462,50 +1458,50 @@ public abstract class Constant implements TypeIds, OperatorIds {
 	public static final Constant computeConstantOperationXOR(Constant left, int leftId, Constant right, int rightId) {
 		
 		switch (leftId){
-			case T_boolean :		return Constant.fromValue(left.booleanValue() ^ right.booleanValue());
+			case T_boolean :		return BooleanConstant.fromValue(left.booleanValue() ^ right.booleanValue());
 			case T_char :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.charValue() ^ right.charValue());
-					case T_byte:	return Constant.fromValue(left.charValue() ^ right.byteValue());
-					case T_short:	return Constant.fromValue(left.charValue() ^ right.shortValue());
-					case T_int:		return Constant.fromValue(left.charValue() ^ right.intValue());
-					case T_long:	return Constant.fromValue(left.charValue() ^ right.longValue());
+					case T_char :	return IntConstant.fromValue(left.charValue() ^ right.charValue());
+					case T_byte:	return IntConstant.fromValue(left.charValue() ^ right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.charValue() ^ right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.charValue() ^ right.intValue());
+					case T_long:	return LongConstant.fromValue(left.charValue() ^ right.longValue());
 				}
 			break;
 			case T_byte :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.byteValue() ^ right.charValue());
-					case T_byte:	return Constant.fromValue(left.byteValue() ^ right.byteValue());
-					case T_short:	return Constant.fromValue(left.byteValue() ^ right.shortValue());
-					case T_int:		return Constant.fromValue(left.byteValue() ^ right.intValue());
-					case T_long:	return Constant.fromValue(left.byteValue() ^ right.longValue());
+					case T_char :	return IntConstant.fromValue(left.byteValue() ^ right.charValue());
+					case T_byte:	return IntConstant.fromValue(left.byteValue() ^ right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.byteValue() ^ right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.byteValue() ^ right.intValue());
+					case T_long:	return LongConstant.fromValue(left.byteValue() ^ right.longValue());
 				}
 			break;
 			case T_short :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.shortValue() ^ right.charValue());
-					case T_byte:	return Constant.fromValue(left.shortValue() ^ right.byteValue());
-					case T_short:	return Constant.fromValue(left.shortValue() ^ right.shortValue());
-					case T_int:		return Constant.fromValue(left.shortValue() ^ right.intValue());
-					case T_long:	return Constant.fromValue(left.shortValue() ^ right.longValue());
+					case T_char :	return IntConstant.fromValue(left.shortValue() ^ right.charValue());
+					case T_byte:	return IntConstant.fromValue(left.shortValue() ^ right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.shortValue() ^ right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.shortValue() ^ right.intValue());
+					case T_long:	return LongConstant.fromValue(left.shortValue() ^ right.longValue());
 				}
 			break;
 			case T_int :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.intValue() ^ right.charValue());
-					case T_byte:	return Constant.fromValue(left.intValue() ^ right.byteValue());
-					case T_short:	return Constant.fromValue(left.intValue() ^ right.shortValue());
-					case T_int:		return Constant.fromValue(left.intValue() ^ right.intValue());
-					case T_long:	return Constant.fromValue(left.intValue() ^ right.longValue());
+					case T_char :	return IntConstant.fromValue(left.intValue() ^ right.charValue());
+					case T_byte:	return IntConstant.fromValue(left.intValue() ^ right.byteValue());
+					case T_short:	return IntConstant.fromValue(left.intValue() ^ right.shortValue());
+					case T_int:		return IntConstant.fromValue(left.intValue() ^ right.intValue());
+					case T_long:	return LongConstant.fromValue(left.intValue() ^ right.longValue());
 				}
 			break;
 			case T_long :
 				switch (rightId){
-					case T_char :	return Constant.fromValue(left.longValue() ^ right.charValue());
-					case T_byte:	return Constant.fromValue(left.longValue() ^ right.byteValue());
-					case T_short:	return Constant.fromValue(left.longValue() ^ right.shortValue());
-					case T_int:		return Constant.fromValue(left.longValue() ^ right.intValue());
-					case T_long:	return Constant.fromValue(left.longValue() ^ right.longValue());
+					case T_char :	return LongConstant.fromValue(left.longValue() ^ right.charValue());
+					case T_byte:	return LongConstant.fromValue(left.longValue() ^ right.byteValue());
+					case T_short:	return LongConstant.fromValue(left.longValue() ^ right.shortValue());
+					case T_int:		return LongConstant.fromValue(left.longValue() ^ right.intValue());
+					case T_long:	return LongConstant.fromValue(left.longValue() ^ right.longValue());
 				}
 			}
 	
@@ -1521,70 +1517,6 @@ public abstract class Constant implements TypeIds, OperatorIds {
 
 		throw new ShouldNotImplement(Messages.bind(Messages.constant_cannotCastedInto, new String[] { typeName(), "float" })); //$NON-NLS-1$
 	}
-
-	public static Constant fromValue(byte value) {
-
-		return new ByteConstant(value);
-	}
-
-	public static Constant fromValue(char value) {
-
-		return new CharConstant(value);
-	}
-
-	public static Constant fromValue(double value) {
-
-		return new DoubleConstant(value);
-	}
-
-	public static Constant fromValue(float value) {
-
-		return new FloatConstant(value);
-	}
-
-	public static Constant fromValue(int value) {
-
-		switch (value) {
-			case -4 : return IntConstant.MINUS_FOUR;
-			case -3 : return IntConstant.MINUS_THREE;
-			case -2 : return IntConstant.MINUS_TWO;
-			case -1 : return IntConstant.MINUS_ONE;
-			case 0 : return IntConstant.ZERO;
-			case 1 : return IntConstant.ONE;
-			case 2 : return IntConstant.TWO;
-			case 3 : return IntConstant.THREE;
-			case 4 : return IntConstant.FOUR;
-			case 5 : return IntConstant.FIVE;
-			case 6 : return IntConstant.SIX;
-			case 7 : return IntConstant.SEVEN;
-			case 8 : return IntConstant.EIGHT;
-			case 9 : return IntConstant.NINE;
-			case 10 : return IntConstant.TEN;
-		}
-		return new IntConstant(value);
-	}
-
-	public static Constant fromValue(long value) {
-
-		return new LongConstant(value);
-	}
-
-	public static Constant fromValue(String value) {
-		
-		return new StringConstant(value);
-	}
-
-	public static Constant fromValue(short value) {
-
-		return new ShortConstant(value);
-	}
-
-	public static Constant fromValue(boolean value) {
-
-		return value ? BooleanConstant.TRUE : BooleanConstant.FALSE;
-		//return new BooleanConstant(value);
-	}
-
 	/**
 	 * Returns true if both constants have the same type and the same actual value
 	 * @param otherConstant
