diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/InsideSubRoutineFlowContext.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/InsideSubRoutineFlowContext.java
index 66779c7..967f840 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/InsideSubRoutineFlowContext.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/InsideSubRoutineFlowContext.java
@@ -21,39 +21,38 @@ public class InsideSubRoutineFlowContext extends FlowContext {
 
 	public UnconditionalFlowInfo initsOnReturn;
 	
-	public InsideSubRoutineFlowContext(
-		FlowContext parent,
-		ASTNode associatedNode) {
-		super(parent, associatedNode);
-		this.initsOnReturn = FlowInfo.DEAD_END;				
-	}
+public InsideSubRoutineFlowContext(
+	FlowContext parent,
+	ASTNode associatedNode) {
+	super(parent, associatedNode);
+	this.initsOnReturn = FlowInfo.DEAD_END;
+}
 
-	public String individualToString() {
-		
-		StringBuffer buffer = new StringBuffer("Inside SubRoutine flow context"); //$NON-NLS-1$
-		buffer.append("[initsOnReturn -").append(initsOnReturn.toString()).append(']'); //$NON-NLS-1$
-		return buffer.toString();
-	}
-		
-	public UnconditionalFlowInfo initsOnReturn(){
-		return this.initsOnReturn;
-	}
-		
-	public boolean isNonReturningContext() {
-		return subRoutine().isSubRoutineEscaping();
-	}
+public String individualToString() {
+	StringBuffer buffer = new StringBuffer("Inside SubRoutine flow context"); //$NON-NLS-1$
+	buffer.append("[initsOnReturn -").append(this.initsOnReturn.toString()).append(']'); //$NON-NLS-1$
+	return buffer.toString();
+}
+
+public UnconditionalFlowInfo initsOnReturn(){
+	return this.initsOnReturn;
+}
 	
-	public SubRoutineStatement subRoutine() {
-		return (SubRoutineStatement)associatedNode;
-	}
+public boolean isNonReturningContext() {
+	return ((SubRoutineStatement) this.associatedNode).isSubRoutineEscaping();
+}
 	
 public void recordReturnFrom(UnconditionalFlowInfo flowInfo) {
 	if ((flowInfo.tagBits & FlowInfo.UNREACHABLE) == 0)	{
-	if (initsOnReturn == FlowInfo.DEAD_END) {
-		initsOnReturn = (UnconditionalFlowInfo) flowInfo.copy();
+	if (this.initsOnReturn == FlowInfo.DEAD_END) {
+		this.initsOnReturn = (UnconditionalFlowInfo) flowInfo.copy();
 	} else {
-		initsOnReturn = initsOnReturn.mergedWith(flowInfo);
+		this.initsOnReturn = this.initsOnReturn.mergedWith(flowInfo);
 	}
 	}
 }
+
+public SubRoutineStatement subroutine() {
+	return (SubRoutineStatement) this.associatedNode;
+}
 }
