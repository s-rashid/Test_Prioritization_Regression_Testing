diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
index cf75732..223869e 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
@@ -139,9 +139,9 @@ public BinaryTypeBinding(PackageBinding packageBinding, IBinaryType binaryType,
 		this.tagBits |= MemberTypeMask;   // must be a member type not a top-level or local type
 		this.tagBits |= 	HasUnresolvedEnclosingType;
 		if (this.enclosingType().isStrictfp())
-			this.modifiers |= AccStrictfp;
+			this.modifiers |= ClassFileConstants.AccStrictfp;
 		if (this.enclosingType().isDeprecated())
-			this.modifiers |= AccDeprecatedImplicitly;
+			this.modifiers |= ExtraCompilerModifiers.AccDeprecatedImplicitly;
 	}	
 }
 
@@ -236,7 +236,7 @@ void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods) {
 			this.typeVariables = createTypeVariables(wrapper, this);
 			wrapper.start++; // skip '>'
 			this.tagBits |=  HasUnresolvedTypeVariables;
-			this.modifiers |= AccGenericSignature;
+			this.modifiers |= ExtraCompilerModifiers.AccGenericSignature;
 		}
 
 		// attempt to find the superclass if it exists in the cache (otherwise - resolve it when requested)
@@ -282,25 +282,25 @@ private void createFields(IBinaryField[] iFields, long sourceLevel) {
 					new FieldBinding(
 						binaryField.getName(), 
 						type, 
-						binaryField.getModifiers() | AccUnresolved, 
+						binaryField.getModifiers() | ExtraCompilerModifiers.AccUnresolved, 
 						this, 
 						binaryField.getConstant());
 				field.id = i; // ordinal
 				if (use15specifics)
 					field.tagBits |= binaryField.getTagBits();
 				if (isViewedAsDeprecated && !field.isDeprecated())
-					field.modifiers |= AccDeprecatedImplicitly;
+					field.modifiers |= ExtraCompilerModifiers.AccDeprecatedImplicitly;
 				if (fieldSignature != null)
-					field.modifiers |= AccGenericSignature;
+					field.modifiers |= ExtraCompilerModifiers.AccGenericSignature;
 				this.fields[i] = field;
 			}
 		}
 	}
 }
 private MethodBinding createMethod(IBinaryMethod method, long sourceLevel) {
-	int methodModifiers = method.getModifiers() | AccUnresolved;
+	int methodModifiers = method.getModifiers() | ExtraCompilerModifiers.AccUnresolved;
 	if (sourceLevel < ClassFileConstants.JDK1_5)
-		methodModifiers &= ~AccVarargs; // vararg methods are not recognized until 1.5
+		methodModifiers &= ~ClassFileConstants.AccVarargs; // vararg methods are not recognized until 1.5
 	ReferenceBinding[] exceptions = NoExceptions;
 	TypeBinding[] parameters = NoParameters;
 	TypeVariableBinding[] typeVars = NoTypeVariables;
@@ -352,7 +352,7 @@ private MethodBinding createMethod(IBinaryMethod method, long sourceLevel) {
 		if (!method.isConstructor())
 			returnType = environment.getTypeFromSignature(methodDescriptor, index + 1, -1, false, this);   // index is currently pointing at the ')'
 	} else {
-		methodModifiers |= AccGenericSignature;
+		methodModifiers |= ExtraCompilerModifiers.AccGenericSignature;
 		// MethodTypeSignature = ParameterPart(optional) '(' TypeSignatures ')' return_typeSignature ['^' TypeSignature (optional)]
 		SignatureWrapper wrapper = new SignatureWrapper(methodSignature);
 		if (wrapper.signature[wrapper.start] == '<') {
@@ -423,7 +423,7 @@ private void createMethods(IBinaryMethod[] iMethods, long sourceLevel) {
 		total = initialTotal = iMethods.length;
 		for (int i = total; --i >= 0;) {
 			IBinaryMethod method = iMethods[i];
-			if ((method.getModifiers() & AccSynthetic) != 0) {
+			if ((method.getModifiers() & ClassFileConstants.AccSynthetic) != 0) {
 				// discard synthetics methods
 				if (toSkip == null) toSkip = new int[iMethods.length];
 				toSkip[i] = -1;
@@ -449,7 +449,7 @@ private void createMethods(IBinaryMethod[] iMethods, long sourceLevel) {
 		for (int i = 0; i < initialTotal; i++) {
 			MethodBinding method = createMethod(iMethods[i], sourceLevel);
 			if (isViewedAsDeprecated && !method.isDeprecated())
-				method.modifiers |= AccDeprecatedImplicitly;
+				method.modifiers |= ExtraCompilerModifiers.AccDeprecatedImplicitly;
 			this.methods[i] = method;
 		}
 	} else {
@@ -457,7 +457,7 @@ private void createMethods(IBinaryMethod[] iMethods, long sourceLevel) {
 			if (iClinit != i && (toSkip == null || toSkip[i] != -1)) {
 				MethodBinding method = createMethod(iMethods[i], sourceLevel);
 				if (isViewedAsDeprecated && !method.isDeprecated())
-					method.modifiers |= AccDeprecatedImplicitly;
+					method.modifiers |= ExtraCompilerModifiers.AccDeprecatedImplicitly;
 				this.methods[index++] = method;
 			}
 		}
@@ -666,7 +666,7 @@ private void initializeTypeVariable(TypeVariableBinding variable, TypeVariableBi
 	}
 
 	// variable is visible to its bounds
-	variable.modifiers |= AccUnresolved;
+	variable.modifiers |= ExtraCompilerModifiers.AccUnresolved;
 	variable.superclass = type;
 
 	ReferenceBinding[] bounds = null;
@@ -683,7 +683,7 @@ private void initializeTypeVariable(TypeVariableBinding variable, TypeVariableBi
 	variable.superInterfaces = bounds == null ? NoSuperInterfaces : bounds;
 	if (firstBound == null) {
 		firstBound = variable.superInterfaces.length == 0 ? null : variable.superInterfaces[0];
-		variable.modifiers |= AccInterface;
+		variable.modifiers |= ClassFileConstants.AccInterface;
 	}
 	variable.firstBound = firstBound;
 }
@@ -734,15 +734,15 @@ public MethodBinding[] methods() {
 	return methods;
 }
 private FieldBinding resolveTypeFor(FieldBinding field) {
-	if ((field.modifiers & AccUnresolved) == 0)
+	if ((field.modifiers & ExtraCompilerModifiers.AccUnresolved) == 0)
 		return field;
 
 	field.type = resolveType(field.type, this.environment, null, 0);
-	field.modifiers &= ~AccUnresolved;
+	field.modifiers &= ~ExtraCompilerModifiers.AccUnresolved;
 	return field;
 }
 MethodBinding resolveTypesFor(MethodBinding method) {
-	if ((method.modifiers & AccUnresolved) == 0)
+	if ((method.modifiers & ExtraCompilerModifiers.AccUnresolved) == 0)
 		return method;
 
 	if (!method.isConstructor())
@@ -753,7 +753,7 @@ MethodBinding resolveTypesFor(MethodBinding method) {
 		method.thrownExceptions[i] = resolveType(method.thrownExceptions[i], this.environment, true);
 	for (int i = method.typeVariables.length; --i >= 0;)
 		method.typeVariables[i].resolve(this.environment);
-	method.modifiers &= ~AccUnresolved;
+	method.modifiers &= ~ExtraCompilerModifiers.AccUnresolved;
 	return method;
 }
 /* Answer the receiver's superclass... null if the receiver is Object or an interface.
