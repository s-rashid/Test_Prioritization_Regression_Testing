diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
index f16e74c..aa8c4af 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
@@ -643,7 +643,7 @@ public void arrayConstantsOnlyInArrayInitializers(int sourceStart, int sourceEnd
 		sourceStart,
 		sourceEnd);
 }
-public void assignmentHasNoEffect(ASTNode location, char[] name){
+public void assignmentHasNoEffect(Assignment location, char[] name){
 	int severity = computeSeverity(IProblem.AssignmentHasNoEffect);
 	if (severity == ProblemSeverities.Ignore) return;
 	String[] arguments = new String[] { new String(name) };	
@@ -655,6 +655,23 @@ public void assignmentHasNoEffect(ASTNode location, char[] name){
 			location.sourceStart,
 			location.sourceEnd);
 }
+public void assignmentHasNoEffect(AbstractVariableDeclaration location, char[] name){
+	int severity = computeSeverity(IProblem.AssignmentHasNoEffect);
+	if (severity == ProblemSeverities.Ignore) return;
+	String[] arguments = new String[] { new String(name) };
+	int start = location.sourceStart;
+	int end = location.sourceEnd;
+	if (location.initialization != null) {
+		end = location.initialization.sourceEnd;
+	}
+	this.handle(
+			IProblem.AssignmentHasNoEffect,
+			arguments,
+			arguments,
+			severity,
+			start,
+			end);
+}
 public void attemptToReturnNonVoidExpression(ReturnStatement returnStatement, TypeBinding expectedType) {
 	this.handle(
 		IProblem.VoidMethodReturnsValue,
