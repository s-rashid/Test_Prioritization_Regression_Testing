diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/NameLookupTests2.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/NameLookupTests2.java
index 30be96d..89c2a94 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/NameLookupTests2.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/NameLookupTests2.java
@@ -11,12 +11,10 @@
 package org.eclipse.jdt.core.tests.model;
 
 import java.io.IOException;
-import java.util.ArrayList;
 
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.Path;
 import org.eclipse.jdt.core.*;
-import org.eclipse.jdt.internal.core.IJavaElementRequestor;
 import org.eclipse.jdt.internal.core.JavaProject;
 import org.eclipse.jdt.internal.core.NameLookup;
 
@@ -37,7 +35,7 @@ public NameLookupTests2(String name) {
 	static {
 //		org.eclipse.jdt.internal.core.search.matching.MatchLocator.PRINT_BUFFER = false;
 //		TESTS_PREFIX =  "testArray";
-//		TESTS_NAMES = new String[] { "testFindBinaryTypeWithSameNameAsMember" };
+//		TESTS_NAMES = new String[] { "testFindBinaryTypeWithDollarName" };
 //		TESTS_NUMBERS = new int[] { 8 };
 //		TESTS_RANGE = new int[] { 6, -1 };
 	}
@@ -267,68 +265,5 @@ public void testFindBinaryTypeWithSameNameAsMember() throws CoreException, IOExc
 		deleteProject("P");
 	}
 }
-/*
- * Performance test for looking up package fragments
- * (see bug 72683 Slow code assist in Display view)
- */
-public void testPerfSeekPackageFragments() throws CoreException {
-	try {
-		// setup projects with 100 source folders and 10 packages per source folder
-		final int rootLength = 100;
-		final String[] sourceFolders = new String[rootLength];
-		for (int i = 0; i < rootLength; i++) {
-			sourceFolders[i] = "src" + i;
-		}
-		String path = getWorkspaceRoot().getLocation().toString() + "/P/src";
-		for (int i = 0; i < rootLength; i++) {
-			for (int j = 0; j < 10; j++) {
-				new java.io.File(path + i + "/org/eclipse/jdt/core/tests" + i + "/performance" + j).mkdirs();
-			}
-		}
-		JavaProject project = (JavaProject)createJavaProject("P", sourceFolders, "bin");
-		
-		class PackageRequestor implements IJavaElementRequestor {
-			ArrayList pkgs = new ArrayList();
-			public void acceptField(IField field) {}
-			public void acceptInitializer(IInitializer initializer) {}
-			public void acceptMemberType(IType type) {}
-			public void acceptMethod(IMethod method) {}
-			public void acceptPackageFragment(IPackageFragment packageFragment) {
-				if (pkgs != null)
-					pkgs.add(packageFragment);
-			}
-			public void acceptType(IType type) {}
-			public boolean isCanceled() {
-				return false;
-			}
-		}
-		
-		// first pass: ensure all class are loaded, and ensure that the test works as expected
-		PackageRequestor requestor = new PackageRequestor();
-		getNameLookup(project).seekPackageFragments("org.eclipse.jdt.core.tests78.performance5", false/*not partial match*/, requestor);
-		int size = requestor.pkgs.size();
-		IJavaElement[] result = new IJavaElement[size];
-		requestor.pkgs.toArray(result);
-		assertElementsEqual(
-			"Unexpected packages",
-			"org.eclipse.jdt.core.tests78.performance5 [in src78 [in P]]",
-			result
-		);
-		
-		// measure performance
-		requestor.pkgs = null;
-		for (int i = 0; i < 100; i++) {
-			startMeasuring();
-			for (int j = 0; j < 40; j++) {
-				getNameLookup(project).seekPackageFragments("org.eclipse.jdt.core.tests" + j + "0.performance" + j, false/*not partial match*/, requestor);
-			}
-			stopMeasuring();
-		}
-		commitMeasurements();
-		assertPerformance();
-	} finally {
-		deleteProject("P");
-	}
-}
 }
