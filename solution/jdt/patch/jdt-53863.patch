diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/Index.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/Index.java
index 816ecb1..a864686 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/Index.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/Index.java
@@ -41,24 +41,32 @@ static final int MATCH_RULE_INDEX_MASK = SearchPattern.R_EXACT_MATCH +
 	SearchPattern.R_PREFIX_MATCH +
 	SearchPattern.R_PATTERN_MATCH +
 	SearchPattern.R_REGEXP_MATCH +
-	SearchPattern.R_CASE_SENSITIVE;
+	SearchPattern.R_CASE_SENSITIVE +
+	SearchPattern.R_CAMELCASE_MATCH;
 
 public static boolean isMatch(char[] pattern, char[] word, int matchRule) {
 	if (pattern == null) return true;
 
+	// First test camel case if necessary
+	boolean isCamelCase = (matchRule & SearchPattern.R_CAMELCASE_MATCH) != 0;
+	if (isCamelCase && pattern[0] == word[0] && CharOperation.camelCaseMatch(pattern, word)) {
+		return true;
+	}
+
 	// need to mask some bits of pattern rule (bug 79790)
+	matchRule &= ~SearchPattern.R_CAMELCASE_MATCH;
 	switch(matchRule & MATCH_RULE_INDEX_MASK) {
 		case SearchPattern.R_EXACT_MATCH :
+			if (isCamelCase) return false;
 			return CharOperation.equals(pattern, word, false);
 		case SearchPattern.R_PREFIX_MATCH :
 			return CharOperation.prefixEquals(pattern, word, false);
 		case SearchPattern.R_PATTERN_MATCH :
 			return CharOperation.match(pattern, word, false);
 		case SearchPattern.R_EXACT_MATCH + SearchPattern.R_CASE_SENSITIVE :
-			// avoid message send by comparing first character
+			if (isCamelCase) return false;
 			return pattern[0] == word[0] && CharOperation.equals(pattern, word);
 		case SearchPattern.R_PREFIX_MATCH + SearchPattern.R_CASE_SENSITIVE :
-			// avoid message send by comparing first character
 			return pattern[0] == word[0] && CharOperation.prefixEquals(pattern, word);
 		case SearchPattern.R_PATTERN_MATCH + SearchPattern.R_CASE_SENSITIVE :
 			return CharOperation.match(pattern, word, true);
