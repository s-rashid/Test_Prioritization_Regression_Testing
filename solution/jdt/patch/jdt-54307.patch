diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java
index a077af2..7853e33 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java
@@ -28,6 +28,9 @@ public abstract class AbstractCommentParser implements JavadocTagConstants {
 	public final static int SELECTION_PARSER = 3;
 	public final static int COMPLETION_PARSER = 4;
 	public final static int SOURCE_PARSER = 5;
+	protected final static int PARSER_KIND = 0x00FF;
+	protected final static int TEXT_PARSE = 0x0100; // flag saying that text must be stored
+	protected final static int TEXT_VERIF = 0x0200; // flag saying that text must be verified
 	
 	// Parser recovery states
 	protected final static int QUALIFIED_NAME_RECOVERY = 1;
@@ -141,6 +144,9 @@ public abstract class AbstractCommentParser implements JavadocTagConstants {
 			char previousChar = 0;
 			int invalidTagLineEnd = -1;
 			int invalidInlineTagLineEnd = -1;
+			boolean pushText = (this.kind & TEXT_PARSE) != 0;
+			boolean verifText = (this.kind & TEXT_VERIF) != 0;
+			boolean isDomParser = (this.kind & DOM_PARSER) != 0;
 			
 			// Loop on each comment character
 			while (!abort && this.index < this.javadocEnd) {
@@ -188,18 +194,18 @@ public abstract class AbstractCommentParser implements JavadocTagConstants {
 								}
 								validComment = false;
 								if (this.textStart != -1 && this.textStart < previousPosition) {
-									if (this.kind != COMPIL_PARSER) pushText(this.textStart, previousPosition);
+									if (pushText) pushText(this.textStart, previousPosition);
 								}
-								if (this.kind == DOM_PARSER) refreshInlineTagPosition(previousPosition);
+								if (isDomParser) refreshInlineTagPosition(previousPosition);
 							}
 							if (previousChar == '{') {
 								if (this.textStart != -1 && this.textStart < this.inlineTagStart) {
-									if (this.kind != COMPIL_PARSER) pushText(this.textStart, this.inlineTagStart);
+									if (pushText) pushText(this.textStart, this.inlineTagStart);
 								}
 								this.inlineTagStarted = true;
 								invalidInlineTagLineEnd = this.lineEnd;
 							} else if (this.textStart != -1 && this.textStart < invalidTagLineEnd) {
-								if (this.kind != COMPIL_PARSER) pushText(this.textStart, invalidTagLineEnd);
+								if (pushText) pushText(this.textStart, invalidTagLineEnd);
 							}
 							this.scanner.resetTo(this.index, this.javadocEnd);
 							this.currentTokenType = -1; // flush token cache at line begin
@@ -210,7 +216,7 @@ public abstract class AbstractCommentParser implements JavadocTagConstants {
 									validComment = false;
 									// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=51600
 									// for DOM AST node, store tag as text in case of invalid syntax
-									if (this.kind == DOM_PARSER) {
+									if (isDomParser) {
 										createTag();
 										this.textStart = this.tagSourceEnd+1;
 										invalidTagLineEnd  = this.lineEnd;
@@ -219,28 +225,26 @@ public abstract class AbstractCommentParser implements JavadocTagConstants {
 							} catch (InvalidInputException e) {
 								consumeToken();
 							}
-						} else {
-							if (this.kind == COMPIL_PARSER && this.tagValue == TAG_RETURN_VALUE && this.returnStatement != null) {
-								refreshReturnStatement();
-							}
+						} else if (verifText && this.tagValue == TAG_RETURN_VALUE && this.returnStatement != null) {
+							refreshReturnStatement();
 						}
 						this.lineStarted = true;
 						break;
 					case '\r':
 					case '\n':
 						if (this.lineStarted && this.textStart < previousPosition) {
-							if (this.kind != COMPIL_PARSER) pushText(this.textStart, previousPosition);
+							if (pushText) pushText(this.textStart, previousPosition);
 						}
 						this.lineStarted = false;
 						// Fix bug 51650
 						this.textStart = -1;
 						break;
 					case '}' :
-						if (this.kind == COMPIL_PARSER && this.tagValue == TAG_RETURN_VALUE && this.returnStatement != null) {
+						if (verifText && this.tagValue == TAG_RETURN_VALUE && this.returnStatement != null) {
 							refreshReturnStatement();
 						}
 						if (this.inlineTagStarted) {
-							if (this.kind != COMPIL_PARSER) {
+							if (pushText) {
 								if (this.lineStarted && this.textStart != -1 && this.textStart < previousPosition) {
 								pushText(this.textStart, previousPosition);
 								}
@@ -256,7 +260,7 @@ public abstract class AbstractCommentParser implements JavadocTagConstants {
 						this.lineStarted = true;
 						break;
 					case '{' :
-						if (this.kind == COMPIL_PARSER && this.tagValue == TAG_RETURN_VALUE && this.returnStatement != null) {
+						if (verifText && this.tagValue == TAG_RETURN_VALUE && this.returnStatement != null) {
 							refreshReturnStatement();
 						}
 						if (this.inlineTagStarted) {
@@ -267,7 +271,7 @@ public abstract class AbstractCommentParser implements JavadocTagConstants {
 								int end = previousPosition<invalidInlineTagLineEnd ? previousPosition : invalidInlineTagLineEnd;
 								this.sourceParser.problemReporter().javadocUnterminatedInlineTag(this.inlineTagStart, end);
 							}
-							if (this.kind != COMPIL_PARSER) {
+							if (pushText) {
 								if (this.lineStarted && this.textStart != -1 && this.textStart < previousPosition) {
 									pushText(this.textStart, previousPosition);
 								}
@@ -287,7 +291,7 @@ public abstract class AbstractCommentParser implements JavadocTagConstants {
 						// do nothing for space or '*' characters
 						break;
 					default :
-						if (this.kind == COMPIL_PARSER && this.tagValue == TAG_RETURN_VALUE && this.returnStatement != null) {
+						if (verifText && this.tagValue == TAG_RETURN_VALUE && this.returnStatement != null) {
 							refreshReturnStatement();
 						}
 						if (!this.lineStarted) {
@@ -306,13 +310,13 @@ public abstract class AbstractCommentParser implements JavadocTagConstants {
 					if (this.index >= this.javadocEnd) end = invalidInlineTagLineEnd;
 					this.sourceParser.problemReporter().javadocUnterminatedInlineTag(this.inlineTagStart, end);
 				}
-				if (this.kind != COMPIL_PARSER) {
+				if (pushText) {
 					if (this.lineStarted && this.textStart != -1 && this.textStart < previousPosition) {
 						pushText(this.textStart, previousPosition);
 					}
 					refreshInlineTagPosition(previousPosition);
 				}
-			} else if (this.kind != COMPIL_PARSER && this.lineStarted && this.textStart < previousPosition) {
+			} else if (pushText && this.lineStarted && this.textStart < previousPosition) {
 				pushText(this.textStart, previousPosition);
 			}
 			updateDocComment();
@@ -690,9 +694,10 @@ public abstract class AbstractCommentParser implements JavadocTagConstants {
 		
 		// Verify that there are whitespaces after tag
 		int token = readToken();
+		boolean isCompletionParser = (this.kind & COMPLETION_PARSER) != 0;
 		if (token != TerminalTokens.TokenNameWHITESPACE) {
 			if (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidTag(start, this.scanner.getCurrentTokenEndPosition());
-			if (this.kind != COMPLETION_PARSER) this.scanner.currentPosition = start;
+			if (!isCompletionParser) this.scanner.currentPosition = start;
 			this.index = start;
 			this.currentTokenType = -1;
 			this.scanner.tokenizeWhiteSpace = tokenWhiteSpace;
@@ -861,7 +866,7 @@ public abstract class AbstractCommentParser implements JavadocTagConstants {
 		
 		// Report problem
 		this.currentTokenType = -1;
-		if (this.kind == COMPLETION_PARSER) return false;
+		if (isCompletionParser) return false;
 		end = hasMultiLines ? this.lineEnd: this.scanner.getCurrentTokenEndPosition();
 		while ((token=readToken()) != TerminalTokens.TokenNameWHITESPACE && token != TerminalTokens.TokenNameEOF) {
 			this.currentTokenType = -1;
@@ -892,6 +897,7 @@ public abstract class AbstractCommentParser implements JavadocTagConstants {
 
 		// Scan tokens
 		int primitiveToken = -1;
+		int parserKind = this.kind & PARSER_KIND;
 		nextToken : for (int iToken = 0; ; iToken++) {
 			int token = readTokenSafely();
 			switch (token) {
@@ -932,7 +938,7 @@ public abstract class AbstractCommentParser implements JavadocTagConstants {
 						return null;
 					}
 					if ((iToken % 2) == 0) { // cannot leave on a dot
-						switch (this.kind) {
+						switch (parserKind) {
 							case COMPLETION_PARSER:
 								return syntaxRecoverQualifiedName();
 							case DOM_PARSER:
@@ -950,7 +956,7 @@ public abstract class AbstractCommentParser implements JavadocTagConstants {
 			}
 		}
 		// Reset position: we want to rescan last token
-		if (this.kind != COMPLETION_PARSER && this.currentTokenType != -1) {
+		if (parserKind != COMPLETION_PARSER && this.currentTokenType != -1) {
 			this.index = this.tokenPreviousPosition;
 			this.scanner.currentPosition = this.tokenPreviousPosition;
 			this.currentTokenType = -1;
@@ -1057,7 +1063,7 @@ public abstract class AbstractCommentParser implements JavadocTagConstants {
 				this.scanner.currentPosition = this.tokenPreviousPosition;
 				this.currentTokenType = -1;
 				if (this.tagValue == TAG_VALUE_VALUE) {
-					if (this.kind == DOM_PARSER) createTag();
+					if ((this.kind & DOM_PARSER) != 0) createTag();
 					return true;
 				}
 				if (this.reportProblems) {
@@ -1406,11 +1412,12 @@ public abstract class AbstractCommentParser implements JavadocTagConstants {
 	 * Note that end of comment may be preceeding by several contiguous '*' chars.
 	 */
 	private boolean verifyEndLine(int textPosition) {
+		boolean domParser = (this.kind & DOM_PARSER) != 0;
 		// Special case for inline tag
 		if (this.inlineTagStarted) {
 			// expecting closing brace
 			if (peekChar() == '}') {
-				if (this.kind == DOM_PARSER) {
+				if (domParser) {
 					createTag();
 					pushText(textPosition, this.starPosition);
 				}
@@ -1427,7 +1434,7 @@ public abstract class AbstractCommentParser implements JavadocTagConstants {
 			switch (ch) {
 				case '\r':
 				case '\n':
-					if (this.kind == DOM_PARSER) {
+					if (domParser) {
 						createTag();
 						pushText(textPosition, previousPosition);
 					}
@@ -1443,7 +1450,7 @@ public abstract class AbstractCommentParser implements JavadocTagConstants {
 					break;
 				case '/':
 					if (this.starPosition >= textPosition) {
-						if (this.kind == DOM_PARSER) {
+						if (domParser) {
 							createTag();
 							pushText(textPosition, this.starPosition);
 						}
