diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/LongCache.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/LongCache.java
index 8746bbf..184fbc5 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/LongCache.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/LongCache.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2004 IBM Corporation and others.
+ * Copyright (c) 2000, 2006 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -30,20 +30,20 @@ public LongCache() {
  *  the initial number of buckets
  */
 public LongCache(int initialCapacity) {
-	elementSize = 0;
-	threshold = (int) (initialCapacity * 0.66);
-	keyTable = new long[initialCapacity];
-	valueTable = new int[initialCapacity];
+	this.elementSize = 0;
+	this.threshold = (int) (initialCapacity * 0.66);
+	this.keyTable = new long[initialCapacity];
+	this.valueTable = new int[initialCapacity];
 }
 /**
  * Clears the hash table so that it has no more elements in it.
  */
 public void clear() {
-	for (int i = keyTable.length; --i >= 0;) {
-		keyTable[i] = 0;
-		valueTable[i] = 0;
+	for (int i = this.keyTable.length; --i >= 0;) {
+		this.keyTable[i] = 0;
+		this.valueTable[i] = 0;
 	}
-	elementSize = 0;
+	this.elementSize = 0;
 }
 /** Returns true if the collection contains an element for the key.
  *
@@ -51,9 +51,9 @@ public void clear() {
  * @return boolean
  */
 public boolean containsKey(long key) {
-	int index = hash(key), length = keyTable.length;
-	while ((keyTable[index] != 0) || ((keyTable[index] == 0) &&(valueTable[index] != 0))) {
-		if (keyTable[index] == key)
+	int index = hash(key), length = this.keyTable.length;
+	while ((this.keyTable[index] != 0) || ((this.keyTable[index] == 0) &&(this.valueTable[index] != 0))) {
+		if (this.keyTable[index] == key)
 			return true;
 		if (++index == length) {
 			index = 0;
@@ -67,7 +67,7 @@ public boolean containsKey(long key) {
  * @return int the hash code corresponding to the key value
  */
 public int hash(long key) {
-	return ((int) key & 0x7FFFFFFF) % keyTable.length;
+	return ((int) key & 0x7FFFFFFF) % this.keyTable.length;
 }
 /**
  * Puts the specified element into the hashtable, using the specified
@@ -78,19 +78,19 @@ public int hash(long key) {
  * @return int value
  */
 public int put(long key, int value) {
-	int index = hash(key), length = keyTable.length;
-	while ((keyTable[index] != 0) || ((keyTable[index] == 0) && (valueTable[index] != 0))) {
-		if (keyTable[index] == key)
-			return valueTable[index] = value;
+	int index = hash(key), length = this.keyTable.length;
+	while ((this.keyTable[index] != 0) || ((this.keyTable[index] == 0) && (this.valueTable[index] != 0))) {
+		if (this.keyTable[index] == key)
+			return this.valueTable[index] = value;
 		if (++index == length) {
 			index = 0;
 		}
 	}
-	keyTable[index] = key;
-	valueTable[index] = value;
+	this.keyTable[index] = key;
+	this.valueTable[index] = value;
 
 	// assumes the threshold is never equal to the size of the table
-	if (++elementSize > threshold) {
+	if (++this.elementSize > this.threshold) {
 		rehash();
 	}
 	return value;
@@ -104,19 +104,19 @@ public int put(long key, int value) {
  * @return int value
  */
 public int putIfAbsent(long key, int value) {
-	int index = hash(key), length = keyTable.length;
-	while ((keyTable[index] != 0) || ((keyTable[index] == 0) && (valueTable[index] != 0))) {
-		if (keyTable[index] == key)
-			return valueTable[index];
+	int index = hash(key), length = this.keyTable.length;
+	while ((this.keyTable[index] != 0) || ((this.keyTable[index] == 0) && (this.valueTable[index] != 0))) {
+		if (this.keyTable[index] == key)
+			return this.valueTable[index];
 		if (++index == length) {
 			index = 0;
 		}	
 	}
-	keyTable[index] = key;
-	valueTable[index] = value;
+	this.keyTable[index] = key;
+	this.valueTable[index] = value;
 
 	// assumes the threshold is never equal to the size of the table
-	if (++elementSize > threshold) {
+	if (++this.elementSize > this.threshold) {
 		rehash();
 	}
 	return -value; // negative when added, assumes value is > 0
@@ -127,10 +127,10 @@ public int putIfAbsent(long key, int value) {
  * size exceeds the threshold.
  */
 private void rehash() {
-	LongCache newHashtable = new LongCache(keyTable.length * 2);
-	for (int i = keyTable.length; --i >= 0;) {
-		long key = keyTable[i];
-		int value = valueTable[i];
+	LongCache newHashtable = new LongCache(this.keyTable.length * 2);
+	for (int i = this.keyTable.length; --i >= 0;) {
+		long key = this.keyTable[i];
+		int value = this.valueTable[i];
 		if ((key != 0) || ((key == 0) && (value != 0))) {
 			newHashtable.put(key, value);
 		}
@@ -145,7 +145,7 @@ private void rehash() {
  * @return <CODE>int</CODE> The size of the table
  */
 public int size() {
-	return elementSize;
+	return this.elementSize;
 }
 /**
  * Converts to a rather lengthy String.
@@ -157,8 +157,8 @@ public String toString() {
 	StringBuffer buf = new StringBuffer();
 	buf.append("{"); //$NON-NLS-1$
 	for (int i = 0; i < max; ++i) {
-		if ((keyTable[i] != 0) || ((keyTable[i] == 0) && (valueTable[i] != 0))) {
-			buf.append(keyTable[i]).append("->").append(valueTable[i]); //$NON-NLS-1$
+		if ((this.keyTable[i] != 0) || ((this.keyTable[i] == 0) && (this.valueTable[i] != 0))) {
+			buf.append(this.keyTable[i]).append("->").append(this.valueTable[i]); //$NON-NLS-1$
 		}
 		if (i < max) {
 			buf.append(", "); //$NON-NLS-1$
