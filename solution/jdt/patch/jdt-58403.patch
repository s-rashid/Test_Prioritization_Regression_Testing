diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/HashtableOfLong.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/HashtableOfLong.java
index 3f621fa..331a253 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/HashtableOfLong.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/HashtableOfLong.java
@@ -34,30 +34,39 @@ public HashtableOfLong(int size) {
 	this.valueTable = new Object[extraRoom];
 }
 public boolean containsKey(long key) {
-	int index = ((int)(key >>> 32)) % valueTable.length;
+	int length = keyTable.length,
+		index = ((int)(key >>> 32)) % length;
 	long currentKey;
 	while ((currentKey = keyTable[index]) != 0) {
 		if (currentKey == key)
 			return true;
-		index = (index + 1) % keyTable.length;
+		if (++index == length) {
+			index = 0;
+		}
 	}
 	return false;
 }
 public Object get(long key) {
-	int index = ((int)(key >>> 32)) % valueTable.length;
+	int length = keyTable.length,
+		index = ((int)(key >>> 32)) % length;
 	long currentKey;
 	while ((currentKey = keyTable[index]) != 0) {
 		if (currentKey == key)  return valueTable[index];
-		index = (index + 1) % keyTable.length;
+		if (++index == length) {
+			index = 0;
+		}
 	}
 	return null;
 }
 public Object put(long key, Object value) {
-	int index = ((int)(key >>> 32)) % valueTable.length;
+	int length = keyTable.length,
+		index = ((int)(key >>> 32)) % length;
 	long currentKey;
 	while ((currentKey = keyTable[index]) != 0) {
 		if (currentKey == key)  return valueTable[index] = value;
-		index = (index + 1) % keyTable.length;
+		if (++index == length) {
+			index = 0;
+		}
 	}
 	keyTable[index] = key;
 	valueTable[index] = value;
