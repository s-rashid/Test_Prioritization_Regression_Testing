diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java
index 1d8d2cb..d58953c 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java
@@ -48,14 +48,14 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 				if (arguments[i] instanceof UnresolvedReferenceBinding)
 					((UnresolvedReferenceBinding) arguments[i]).addWrapper(this);
 		}
-		this.tagBits |=  HasUnresolvedTypeVariables; // cleared in resolve()
+		this.tagBits |=  TagBits.HasUnresolvedTypeVariables; // cleared in resolve()
 	}
 
 	/**
 	 * Iterate type arguments, and validate them according to corresponding variable bounds.
 	 */
 	public void boundCheck(Scope scope, TypeReference[] argumentReferences) {
-		if ((this.tagBits & PassedBoundCheck) == 0) {
+		if ((this.tagBits & TagBits.PassedBoundCheck) == 0) {
 			boolean hasErrors = false;
 			TypeVariableBinding[] typeVariables = this.type.typeVariables();
 			if (this.arguments != null && typeVariables != null) { // arguments may be null in error cases
@@ -66,7 +66,7 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 				    }
 				}
 			}	
-			if (!hasErrors) this.tagBits |= PassedBoundCheck; // no need to recheck it in the future
+			if (!hasErrors) this.tagBits |= TagBits.PassedBoundCheck; // no need to recheck it in the future
 		}
 	}
 	
@@ -74,7 +74,7 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 	 * @see org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding#canBeInstantiated()
 	 */
 	public boolean canBeInstantiated() {
-		return ((this.tagBits & HasDirectWildcard) == 0) && super.canBeInstantiated(); // cannot instantiate param type with wildcard arguments
+		return ((this.tagBits & TagBits.HasDirectWildcard) == 0) && super.canBeInstantiated(); // cannot instantiate param type with wildcard arguments
 	}
 	public int kind() {
 		return PARAMETERIZED_TYPE;
@@ -123,19 +123,19 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 	public void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint) {
 		
 		if ((this.tagBits & TagBits.HasTypeVariable) == 0) return;
-		if (actualType == NullBinding) return;
+		if (actualType == TypeBinding.NULL) return;
 	
 		if (this.arguments == null) return;
 		if (!(actualType instanceof ReferenceBinding)) return;
 		ReferenceBinding formalEquivalent, actualEquivalent;
 		switch (constraint) {
-			case CONSTRAINT_EQUAL :
-			case CONSTRAINT_EXTENDS :
+			case TypeConstants.CONSTRAINT_EQUAL :
+			case TypeConstants.CONSTRAINT_EXTENDS :
 				formalEquivalent = this;
 		        actualEquivalent = ((ReferenceBinding)actualType).findSuperTypeWithSameErasure(this.type);
 		        if (actualEquivalent == null) return;
 		        break;
-			case CONSTRAINT_SUPER :
+			case TypeConstants.CONSTRAINT_SUPER :
 	        default:
 		        formalEquivalent = this.findSuperTypeWithSameErasure(actualType);
 		        if (formalEquivalent == null) return;
@@ -166,8 +166,8 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
         		break;
         	case Binding.RAW_TYPE :
         		substitutes.clear(); // clear all variables to indicate raw generic method in the end
-        		if (constraint == CONSTRAINT_EQUAL) {
-        			substitutes.put(VoidBinding, NoTypes); // marker for impossible inference
+        		if (constraint == TypeConstants.CONSTRAINT_EQUAL) {
+        			substitutes.put(TypeBinding.VOID, Binding.NO_TYPES); // marker for impossible inference
         		}
         		return;
         	default :
@@ -182,13 +182,13 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
         	} else if (actualArgument.isWildcard()){
     			WildcardBinding actualWildcardArgument = (WildcardBinding) actualArgument;
     			if (actualWildcardArgument.otherBounds == null) {
-    				if (constraint == CONSTRAINT_SUPER) { // JLS 15.12.7, p.459
+    				if (constraint == TypeConstants.CONSTRAINT_SUPER) { // JLS 15.12.7, p.459
 						switch(actualWildcardArgument.boundKind) {
 		    				case Wildcard.EXTENDS :
-		    					formalArgument.collectSubstitutes(scope, actualWildcardArgument.bound, substitutes, CONSTRAINT_SUPER);
+		    					formalArgument.collectSubstitutes(scope, actualWildcardArgument.bound, substitutes, TypeConstants.CONSTRAINT_SUPER);
 		    					continue;
 		    				case Wildcard.SUPER :
-		    					formalArgument.collectSubstitutes(scope, actualWildcardArgument.bound, substitutes, CONSTRAINT_EXTENDS);
+		    					formalArgument.collectSubstitutes(scope, actualWildcardArgument.bound, substitutes, TypeConstants.CONSTRAINT_EXTENDS);
 		    					continue;
 		    				default :
 		    					continue; // cannot infer anything further from unbound wildcard
@@ -199,7 +199,7 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
     			}
         	}
         	// by default, use EQUAL constraint
-            formalArgument.collectSubstitutes(scope, actualArgument, substitutes, CONSTRAINT_EQUAL);
+            formalArgument.collectSubstitutes(scope, actualArgument, substitutes, TypeConstants.CONSTRAINT_EQUAL);
         }
 	}
 	
@@ -207,7 +207,7 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 	 * @see org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding#computeId()
 	 */
 	public void computeId() {
-		this.id = NoId;		
+		this.id = TypeIds.NoId;		
 	}
 	
 	public char[] computeUniqueKey(boolean isLeaf) {
@@ -314,7 +314,7 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 	 * @see org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding#fields()
 	 */
 	public FieldBinding[] fields() {
-		if ((tagBits & AreFieldsComplete) != 0)
+		if ((tagBits & TagBits.AreFieldsComplete) != 0)
 			return this.fields;
 
 		try {
@@ -328,8 +328,8 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 		} finally {
 			// if the original fields cannot be retrieved (ex. AbortCompilation), then assume we do not have any fields
 			if (this.fields == null) 
-				this.fields = NoFields;
-			tagBits |= AreFieldsComplete;
+				this.fields = Binding.NO_FIELDS;
+			tagBits |= TagBits.AreFieldsComplete;
 		}
 		return this.fields;
 	}
@@ -377,7 +377,7 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 	public MethodBinding getExactConstructor(TypeBinding[] argumentTypes) {
 		int argCount = argumentTypes.length;
 
-		if ((tagBits & AreMethodsComplete) != 0) { // have resolved all arg types & return type of the methods
+		if ((tagBits & TagBits.AreMethodsComplete) != 0) { // have resolved all arg types & return type of the methods
 			nextMethod : for (int m = methods.length; --m >= 0;) {
 				MethodBinding method = methods[m];
 				if (method.selector == TypeConstants.INIT && method.parameters.length == argCount) {
@@ -414,7 +414,7 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 		boolean foundNothing = true;
 		MethodBinding match = null;
 
-		if ((tagBits & AreMethodsComplete) != 0) { // have resolved all arg types & return type of the methods
+		if ((tagBits & TagBits.AreMethodsComplete) != 0) { // have resolved all arg types & return type of the methods
 			nextMethod : for (int m = methods.length; --m >= 0;) {
 				MethodBinding method = methods[m];
 				if (method.selector.length == selectorLength && CharOperation.equals(method.selector, selector)) {
@@ -431,7 +431,7 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 			}
 		} else {
 			MethodBinding[] matchingMethods = getMethods(selector); // takes care of duplicates & default abstract methods
-			foundNothing = matchingMethods == NoMethods;
+			foundNothing = matchingMethods == Binding.NO_METHODS;
 			nextMethod : for (int m = matchingMethods.length; --m >= 0;) {
 				MethodBinding method = matchingMethods[m];
 				TypeBinding[] toMatch = method.parameters;
@@ -515,14 +515,14 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 				return result;
 			}
 		}
-		if ((tagBits & AreMethodsComplete) != 0)
-			return NoMethods; // have created all the methods and there are no matches
+		if ((tagBits & TagBits.AreMethodsComplete) != 0)
+			return Binding.NO_METHODS; // have created all the methods and there are no matches
 
 		MethodBinding[] parameterizedMethods = null;
 		try {
 		    MethodBinding[] originalMethods = this.type.getMethods(selector);
 		    int length = originalMethods.length;
-		    if (length == 0) return NoMethods; 
+		    if (length == 0) return Binding.NO_METHODS; 
 
 		    parameterizedMethods = new MethodBinding[length];
 		    for (int i = 0; i < length; i++)
@@ -542,7 +542,7 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 		} finally {
 			// if the original methods cannot be retrieved (ex. AbortCompilation), then assume we do not have any methods
 		    if (parameterizedMethods == null) 
-		        this.methods = parameterizedMethods = NoMethods;
+		        this.methods = parameterizedMethods = Binding.NO_METHODS;
 		}
 	}
 
@@ -580,16 +580,16 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 				TypeBinding someArgument = someArguments[i];
 				boolean isWildcardArgument = someArgument.isWildcard();
 				if (isWildcardArgument) {
-					this.tagBits |= HasDirectWildcard;
+					this.tagBits |= TagBits.HasDirectWildcard;
 				}
 				if (!isWildcardArgument || ((WildcardBinding) someArgument).boundKind != Wildcard.UNBOUND) {
-					this.tagBits |= IsBoundParameterizedType;
+					this.tagBits |= TagBits.IsBoundParameterizedType;
 				}
-			    this.tagBits |= someArgument.tagBits & HasTypeVariable;
+			    this.tagBits |= someArgument.tagBits & TagBits.HasTypeVariable;
 			}
 		}	    
-		this.tagBits |= someType.tagBits & (IsLocalType| IsMemberType | IsNestedType);
-		this.tagBits &= ~(AreFieldsComplete|AreMethodsComplete);
+		this.tagBits |= someType.tagBits & (TagBits.IsLocalType| TagBits.IsMemberType | TagBits.IsNestedType);
+		this.tagBits &= ~(TagBits.AreFieldsComplete|TagBits.AreMethodsComplete);
 	}
 
 	protected void initializeArguments() {
@@ -615,7 +615,7 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 	            	if (enclosing != null) {
 	            		ReferenceBinding otherEnclosing = otherParamType.enclosingType();
 	            		if (otherEnclosing == null) return false;
-	            		if ((otherEnclosing.tagBits & HasDirectWildcard) == 0) {
+	            		if ((otherEnclosing.tagBits & TagBits.HasDirectWildcard) == 0) {
 							if (enclosing != otherEnclosing) return false;
 	            		} else {
 	            			if (!enclosing.isEquivalentTo(otherParamType.enclosingType())) return false;
@@ -655,7 +655,7 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 	            	if (enclosing != null) {
 	            		ReferenceBinding otherEnclosing = otherParamType.enclosingType();
 	            		if (otherEnclosing == null) return false;
-	            		if ((otherEnclosing.tagBits & HasDirectWildcard) == 0) {
+	            		if ((otherEnclosing.tagBits & TagBits.HasDirectWildcard) == 0) {
 							if (enclosing != otherEnclosing) return false;
 	            		} else {
 	            			if (!enclosing.isEquivalentTo(otherParamType.enclosingType())) return false;
@@ -682,7 +682,7 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 	            	if (enclosing != null) {
 	            		ReferenceBinding otherEnclosing = otherGenericType.enclosingType();
 	            		if (otherEnclosing == null) return false;
-	            		if ((otherEnclosing.tagBits & HasDirectWildcard) == 0) {
+	            		if ((otherEnclosing.tagBits & TagBits.HasDirectWildcard) == 0) {
 							if (enclosing != otherEnclosing) return false;
 	            		} else {
 	            			if (!enclosing.isEquivalentTo(otherGenericType.enclosingType())) return false;
@@ -739,7 +739,7 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 			} finally {
 				// if the original fields cannot be retrieved (ex. AbortCompilation), then assume we do not have any fields
 				if (this.memberTypes == null) 
-					this.memberTypes = NoMemberTypes;
+					this.memberTypes = Binding.NO_MEMBER_TYPES;
 			}
 		}
 		return this.memberTypes;
@@ -749,7 +749,7 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 	 * @see org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding#methods()
 	 */
 	public MethodBinding[] methods() {
-		if ((tagBits & AreMethodsComplete) != 0)
+		if ((tagBits & TagBits.AreMethodsComplete) != 0)
 			return this.methods;
 
 		try {
@@ -763,9 +763,9 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 		} finally {
 			// if the original methods cannot be retrieved (ex. AbortCompilation), then assume we do not have any methods
 		    if (this.methods == null) 
-		        this.methods = NoMethods;
+		        this.methods = Binding.NO_METHODS;
 
-			tagBits |=  AreMethodsComplete;
+			tagBits |=  TagBits.AreMethodsComplete;
 		}		
 		return this.methods;
 	}
@@ -802,10 +802,10 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 	}
 
 	ReferenceBinding resolve() {
-		if ((this.tagBits & HasUnresolvedTypeVariables) == 0)
+		if ((this.tagBits & TagBits.HasUnresolvedTypeVariables) == 0)
 			return this;
 
-		this.tagBits &= ~HasUnresolvedTypeVariables; // can be recursive so only want to call once
+		this.tagBits &= ~TagBits.HasUnresolvedTypeVariables; // can be recursive so only want to call once
 		ReferenceBinding resolvedType = BinaryTypeBinding.resolveType(this.type, this.environment, false); // still part of parameterized type ref
 		if (this.arguments != null) {
 			int argLength = this.arguments.length;
@@ -813,7 +813,7 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 				BinaryTypeBinding.resolveType(this.arguments[i], this.environment, this, i);
 			// arity check
 			TypeVariableBinding[] refTypeVariables = resolvedType.typeVariables();
-			if (refTypeVariables == NoTypeVariables) { // check generic
+			if (refTypeVariables == Binding.NO_TYPE_VARIABLES) { // check generic
 				this.environment.problemReporter.nonGenericTypeCannotBeParameterized(null, resolvedType, this.arguments);
 				return this; // cannot reach here as AbortCompilation is thrown
 			} else if (argLength != refTypeVariables.length) { // check arity
@@ -988,7 +988,7 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 		buffer.append((superclass != null) ? superclass.debugName() : "NULL TYPE"); //$NON-NLS-1$
 	
 		if (superInterfaces != null) {
-			if (superInterfaces != NoSuperInterfaces) {
+			if (superInterfaces != Binding.NO_SUPERINTERFACES) {
 				buffer.append("\n\timplements : "); //$NON-NLS-1$
 				for (int i = 0, length = superInterfaces.length; i < length; i++) {
 					if (i  > 0)
@@ -1006,7 +1006,7 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 		}
 	
 		if (fields != null) {
-			if (fields != NoFields) {
+			if (fields != Binding.NO_FIELDS) {
 				buffer.append("\n/*   fields   */"); //$NON-NLS-1$
 				for (int i = 0, length = fields.length; i < length; i++)
 				    buffer.append('\n').append((fields[i] != null) ? fields[i].toString() : "NULL FIELD"); //$NON-NLS-1$ 
@@ -1016,7 +1016,7 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 		}
 	
 		if (methods != null) {
-			if (methods != NoMethods) {
+			if (methods != Binding.NO_METHODS) {
 				buffer.append("\n/*   methods   */"); //$NON-NLS-1$
 				for (int i = 0, length = methods.length; i < length; i++)
 					buffer.append('\n').append((methods[i] != null) ? methods[i].toString() : "NULL METHOD"); //$NON-NLS-1$
@@ -1045,6 +1045,6 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 			// retain original type variables if not substituted (member type of parameterized type)
 			return this.type.typeVariables();
 		} 
-		return NoTypeVariables;
+		return Binding.NO_TYPE_VARIABLES;
 	}	
 }
