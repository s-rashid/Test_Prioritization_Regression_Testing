diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java
index 325b79c..b0c36c4 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java
@@ -88,7 +88,7 @@ public class CastExpression extends Expression {
 	
 		// check need for left operand cast
 		int alternateLeftTypeId = expressionTypeId;
-		if ((expression.bits & UnnecessaryCastMASK) == 0 && expression.resolvedType.isBaseType()) {
+		if ((expression.bits & UnnecessaryCast) == 0 && expression.resolvedType.isBaseType()) {
 			// narrowing conversion on base type may change value, thus necessary
 			return;
 		} else  {
@@ -130,7 +130,7 @@ public class CastExpression extends Expression {
 			Expression argument = arguments[i];
 			if (argument instanceof CastExpression) {
  				// narrowing conversion on base type may change value, thus necessary
-				if ((argument.bits & UnnecessaryCastMASK) == 0 && argument.resolvedType.isBaseType()) {
+				if ((argument.bits & UnnecessaryCast) == 0 && argument.resolvedType.isBaseType()) {
 					continue;
 				}		
 				TypeBinding castedExpressionType = ((CastExpression)argument).expression.resolvedType;
@@ -165,7 +165,7 @@ public class CastExpression extends Expression {
 		// check need for left operand cast
 		int alternateLeftTypeId = leftTypeId;
 		if (leftIsCast) {
-			if ((left.bits & UnnecessaryCastMASK) == 0 && left.resolvedType.isBaseType()) {
+			if ((left.bits & UnnecessaryCast) == 0 && left.resolvedType.isBaseType()) {
  				// narrowing conversion on base type may change value, thus necessary
  				leftIsCast = false;
 			} else  {
@@ -183,7 +183,7 @@ public class CastExpression extends Expression {
 		// check need for right operand cast
 		int alternateRightTypeId = rightTypeId;
 		if (rightIsCast) {
-			if ((right.bits & UnnecessaryCastMASK) == 0 && right.resolvedType.isBaseType()) {
+			if ((right.bits & UnnecessaryCast) == 0 && right.resolvedType.isBaseType()) {
  				// narrowing conversion on base type may change value, thus necessary
  				rightIsCast = false;
 			} else {
@@ -277,24 +277,24 @@ public class CastExpression extends Expression {
 				return false; 
 			}
 			if (isNarrowing ? !expressionType.isEquivalentTo(match) : !match.isEquivalentTo(castType)) {
-				this.bits |= UnsafeCastMask;
+				this.bits |= UnsafeCast;
 				return true;
 			}
 			if ((castType.tagBits & TagBits.HasDirectWildcard) == 0) {
 				if ((!match.isParameterizedType() && !match.isGenericType())
 						|| expressionType.isRawType()) {
-					this.bits |= UnsafeCastMask;
+					this.bits |= UnsafeCast;
 					return true;
 				}
 			}
 		} else if (isNarrowing) {
 			TypeBinding leafType = castType.leafComponentType();
 			if (expressionType.id == T_JavaLangObject && castType.isArrayType() && (leafType.isBoundParameterizedType() || leafType.isGenericType())) {
-				this.bits |= UnsafeCastMask;
+				this.bits |= UnsafeCast;
 				return true;
 			}
 			if (leafType.isTypeVariable()) {
-				this.bits |= UnsafeCastMask;
+				this.bits |= UnsafeCast;
 				return true;
 			}
 		}
@@ -317,7 +317,7 @@ public class CastExpression extends Expression {
 		boolean valueRequired) {
 	
 		int pc = codeStream.position;
-		boolean needRuntimeCheckcast = (this.bits & NeedRuntimeCheckCastMASK) != 0;
+		boolean needRuntimeCheckcast = (this.bits & GenerateCheckcast) != 0;
 		if (constant != NotAConstant) {
 			if (valueRequired || needRuntimeCheckcast) { // Added for: 1F1W9IG: IVJCOM:WINNT - Compiler omits casting check
 				codeStream.generateConstant(constant, implicitConversion);
@@ -410,13 +410,13 @@ public class CastExpression extends Expression {
 					boolean isLegal = checkCastTypesCompatibility(scope, castType, expressionType, this.expression);
 					if (isLegal) {
 						this.expression.computeConversion(scope, castType, expressionType);
-						if ((this.bits & UnsafeCastMask) != 0) { // unsafe cast
+						if ((this.bits & UnsafeCast) != 0) { // unsafe cast
 							scope.problemReporter().unsafeCast(this, scope);
 						} else {
 //							if (castType.isRawType() && scope.compilerOptions().reportRawTypeReference){
 //								scope.problemReporter().rawTypeReference(this.type, castType);			
 //							}
-							if ((this.bits & (UnnecessaryCastMASK|IgnoreNeedForCastCheckMASK)) == UnnecessaryCastMASK) { // unnecessary cast 
+							if ((this.bits & (UnnecessaryCast|DisableUnnecessaryCastCheck)) == UnnecessaryCast) { // unnecessary cast 
 								if (!isIndirectlyUsed()) // used for generic type inference or boxing ?
 									scope.problemReporter().unnecessaryCast(this);
 							}
@@ -469,7 +469,7 @@ public class CastExpression extends Expression {
 	 * @see org.eclipse.jdt.internal.compiler.ast.Expression#tagAsNeedCheckCast()
 	 */
 	public void tagAsNeedCheckCast() {
-		this.bits |= NeedRuntimeCheckCastMASK;
+		this.bits |= GenerateCheckcast;
 	}
 	
 	/**
@@ -477,7 +477,7 @@ public class CastExpression extends Expression {
 	 */
 	public void tagAsUnnecessaryCast(Scope scope, TypeBinding castType) {
 		if (this.expression.resolvedType == null) return; // cannot do better if expression is not bound
-		this.bits |= UnnecessaryCastMASK;
+		this.bits |= UnnecessaryCast;
 	}
 	
 	public void traverse(
