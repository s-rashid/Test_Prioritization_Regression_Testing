diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java
index ec94d22..98021e2 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java
@@ -815,21 +815,21 @@ public class TypeDeclaration
 		// always need a <clinit> when assertions are present
 		if ((this.bits & ContainsAssertion) != 0)
 			return true;
-		if (fields == null)
-			return false;
 		
 		switch (kind(this.modifiers)) {
 			case TypeDeclaration.INTERFACE_DECL:
 			case TypeDeclaration.ANNOTATION_TYPE_DECL:
-				return true; // fields are implicitly statics
+				return this.fields != null; // fields are implicitly statics
+			case TypeDeclaration.ENUM_DECL:
+				return true; // even if no enum constants, need to set $VALUES array
 		}
-		for (int i = fields.length; --i >= 0;) {
-			FieldDeclaration field = fields[i];
-			//need to test the modifier directly while there is no binding yet
-			if ((field.modifiers & ClassFileConstants.AccStatic) != 0)
-				return true; // TODO (philippe) shouldn't it check whether field is initializer or has some initial value ?
-			if (field.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT)
-				return true;
+		if (this.fields != null) {
+			for (int i = this.fields.length; --i >= 0;) {
+				FieldDeclaration field = this.fields[i];
+				//need to test the modifier directly while there is no binding yet
+				if ((field.modifiers & ClassFileConstants.AccStatic) != 0)
+					return true; // TODO (philippe) shouldn't it check whether field is initializer or has some initial value ?
+			}
 		}
 		return false;
 	}
