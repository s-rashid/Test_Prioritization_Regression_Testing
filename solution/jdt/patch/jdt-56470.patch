diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/CompilationParticipantResult.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/CompilationParticipantResult.java
index 6450835..23571c4 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/CompilationParticipantResult.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/CompilationParticipantResult.java
@@ -17,6 +17,7 @@ import org.eclipse.jdt.core.compiler.*;
 
 public class CompilationParticipantResult implements ICompilationParticipantResult {
 	SourceFile sourceFile;
+	boolean hasAnnotations; // only set during processAnnotations
 	IFile[] addedFiles; // added/changed generated source files that need to be compiled
 	IFile[] deletedFiles; // previously generated source files that should be deleted
 	IProblem[] problems; // new problems to report against this compilationUnit
@@ -24,6 +25,7 @@ public class CompilationParticipantResult implements ICompilationParticipantResu
 
 CompilationParticipantResult(SourceFile sourceFile) {
 	this.sourceFile = sourceFile;
+	this.hasAnnotations = false;
 	this.addedFiles = null;
 	this.deletedFiles = null;
 	this.problems = null;
@@ -38,6 +40,10 @@ public IFile getFile() {
 	return this.sourceFile.resource;
 }
 
+public boolean hasAnnotations() {
+	return this.hasAnnotations; // only set during processAnnotations
+}
+
 public void recordAddedGeneratedFiles(IFile[] addedGeneratedFiles) {
 	int length2 = addedGeneratedFiles.length;
 	if (length2 == 0) return;
@@ -86,6 +92,15 @@ public void recordNewProblems(IProblem[] newProblems) {
 	this.problems = merged;
 }
 
+void reset(boolean detectedAnnotations) {
+	// called prior to processAnnotations
+	this.hasAnnotations = detectedAnnotations;
+	this.addedFiles = null;
+	this.deletedFiles = null;
+	this.problems = null;
+	this.dependencies = null;
+}
+
 public String toString() {
 	return this.sourceFile.toString();
 }
