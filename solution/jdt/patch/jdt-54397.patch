diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java
index 3fc4204..62f2109 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java
@@ -69,60 +69,60 @@ public class MethodScope extends BlockScope {
 		
 		int modifiers = methodBinding.modifiers;
 		final ReferenceBinding declaringClass = methodBinding.declaringClass;
-		if ((modifiers & AccAlternateModifierProblem) != 0)
+		if ((modifiers & ExtraCompilerModifiers.AccAlternateModifierProblem) != 0)
 			problemReporter().duplicateModifierForMethod(declaringClass, (AbstractMethodDeclaration) referenceContext);
 
 		if (((ConstructorDeclaration) referenceContext).isDefaultConstructor) {
 			if (declaringClass.isEnum())
-				modifiers = AccPrivate;
+				modifiers = ClassFileConstants.AccPrivate;
 			else if (declaringClass.isPublic())
-				modifiers |= AccPublic;
+				modifiers |= ClassFileConstants.AccPublic;
 			else if (declaringClass.isProtected())
-				modifiers |= AccProtected;
+				modifiers |= ClassFileConstants.AccProtected;
 		}
 
 		// after this point, tests on the 16 bits reserved.
-		int realModifiers = modifiers & AccJustFlag;
+		int realModifiers = modifiers & ExtraCompilerModifiers.AccJustFlag;
 
 		// check for abnormal modifiers
-		int unexpectedModifiers = ~(AccPublic | AccPrivate | AccProtected | AccStrictfp);
+		int unexpectedModifiers = ~(ClassFileConstants.AccPublic | ClassFileConstants.AccPrivate | ClassFileConstants.AccProtected | ClassFileConstants.AccStrictfp);
 		if (declaringClass.isEnum() && !((ConstructorDeclaration) referenceContext).isDefaultConstructor) {
-			unexpectedModifiers = ~(AccPrivate | AccStrictfp);
+			unexpectedModifiers = ~(ClassFileConstants.AccPrivate | ClassFileConstants.AccStrictfp);
 			if ((realModifiers & unexpectedModifiers) != 0) {
 				problemReporter().illegalModifierForEnumConstructor((AbstractMethodDeclaration) referenceContext);
-				modifiers &= ~AccJustFlag | ~unexpectedModifiers;
-			} else if ((((AbstractMethodDeclaration) referenceContext).modifiers & AccStrictfp) != 0) {
+				modifiers &= ~ExtraCompilerModifiers.AccJustFlag | ~unexpectedModifiers;
+			} else if ((((AbstractMethodDeclaration) referenceContext).modifiers & ClassFileConstants.AccStrictfp) != 0) {
 				// must check the parse node explicitly
 				problemReporter().illegalModifierForMethod((AbstractMethodDeclaration) referenceContext);
 			}
-			modifiers |= AccPrivate; // enum constructor is implicitly private
+			modifiers |= ClassFileConstants.AccPrivate; // enum constructor is implicitly private
 		} else if ((realModifiers & unexpectedModifiers) != 0) {
 			problemReporter().illegalModifierForMethod((AbstractMethodDeclaration) referenceContext);
-			modifiers &= ~AccJustFlag | ~unexpectedModifiers;
-		} else if ((((AbstractMethodDeclaration) referenceContext).modifiers & AccStrictfp) != 0) {
+			modifiers &= ~ExtraCompilerModifiers.AccJustFlag | ~unexpectedModifiers;
+		} else if ((((AbstractMethodDeclaration) referenceContext).modifiers & ClassFileConstants.AccStrictfp) != 0) {
 			// must check the parse node explicitly
 			problemReporter().illegalModifierForMethod((AbstractMethodDeclaration) referenceContext);
 		}
 
 		// check for incompatible modifiers in the visibility bits, isolate the visibility bits
-		int accessorBits = realModifiers & (AccPublic | AccProtected | AccPrivate);
+		int accessorBits = realModifiers & (ClassFileConstants.AccPublic | ClassFileConstants.AccProtected | ClassFileConstants.AccPrivate);
 		if ((accessorBits & (accessorBits - 1)) != 0) {
 			problemReporter().illegalVisibilityModifierCombinationForMethod(declaringClass, (AbstractMethodDeclaration) referenceContext);
 
 			// need to keep the less restrictive so disable Protected/Private as necessary
-			if ((accessorBits & AccPublic) != 0) {
-				if ((accessorBits & AccProtected) != 0)
-					modifiers &= ~AccProtected;
-				if ((accessorBits & AccPrivate) != 0)
-					modifiers &= ~AccPrivate;
-			} else if ((accessorBits & AccProtected) != 0 && (accessorBits & AccPrivate) != 0) {
-				modifiers &= ~AccPrivate;
+			if ((accessorBits & ClassFileConstants.AccPublic) != 0) {
+				if ((accessorBits & ClassFileConstants.AccProtected) != 0)
+					modifiers &= ~ClassFileConstants.AccProtected;
+				if ((accessorBits & ClassFileConstants.AccPrivate) != 0)
+					modifiers &= ~ClassFileConstants.AccPrivate;
+			} else if ((accessorBits & ClassFileConstants.AccProtected) != 0 && (accessorBits & ClassFileConstants.AccPrivate) != 0) {
+				modifiers &= ~ClassFileConstants.AccPrivate;
 			}
 		}
 
 		// if the receiver's declaring class is a private nested type, then make sure the receiver is not private (causes problems for inner type emulation)
-		if (declaringClass.isPrivate() && (modifiers & AccPrivate) != 0)
-			modifiers &= ~AccPrivate;
+		if (declaringClass.isPrivate() && (modifiers & ClassFileConstants.AccPrivate) != 0)
+			modifiers &= ~ClassFileConstants.AccPrivate;
 
 		methodBinding.modifiers = modifiers;
 	}
@@ -133,16 +133,16 @@ public class MethodScope extends BlockScope {
 		
 		int modifiers = methodBinding.modifiers;
 		final ReferenceBinding declaringClass = methodBinding.declaringClass;
-		if ((modifiers & AccAlternateModifierProblem) != 0)
+		if ((modifiers & ExtraCompilerModifiers.AccAlternateModifierProblem) != 0)
 			problemReporter().duplicateModifierForMethod(declaringClass, (AbstractMethodDeclaration) referenceContext);
 
 		// after this point, tests on the 16 bits reserved.
-		int realModifiers = modifiers & AccJustFlag;
+		int realModifiers = modifiers & ExtraCompilerModifiers.AccJustFlag;
 
 		// set the requested modifiers for a method in an interface/annotation
 		if (declaringClass.isInterface()) {
-			if ((realModifiers & ~(AccPublic | AccAbstract)) != 0) {
-				if ((declaringClass.modifiers & AccAnnotation) != 0)
+			if ((realModifiers & ~(ClassFileConstants.AccPublic | ClassFileConstants.AccAbstract)) != 0) {
+				if ((declaringClass.modifiers & ClassFileConstants.AccAnnotation) != 0)
 					problemReporter().illegalModifierForAnnotationMember((AbstractMethodDeclaration) referenceContext);
 				else
 					problemReporter().illegalModifierForInterfaceMethod((AbstractMethodDeclaration) referenceContext);
@@ -151,32 +151,32 @@ public class MethodScope extends BlockScope {
 		}
 
 		// check for abnormal modifiers
-		int unexpectedModifiers = ~(AccPublic | AccPrivate | AccProtected
-			| AccAbstract | AccStatic | AccFinal | AccSynchronized | AccNative | AccStrictfp);
+		int unexpectedModifiers = ~(ClassFileConstants.AccPublic | ClassFileConstants.AccPrivate | ClassFileConstants.AccProtected
+			| ClassFileConstants.AccAbstract | ClassFileConstants.AccStatic | ClassFileConstants.AccFinal | ClassFileConstants.AccSynchronized | ClassFileConstants.AccNative | ClassFileConstants.AccStrictfp);
 		if ((realModifiers & unexpectedModifiers) != 0) {
 			problemReporter().illegalModifierForMethod((AbstractMethodDeclaration) referenceContext);
-			modifiers &= ~AccJustFlag | ~unexpectedModifiers;
+			modifiers &= ~ExtraCompilerModifiers.AccJustFlag | ~unexpectedModifiers;
 		}
 
 		// check for incompatible modifiers in the visibility bits, isolate the visibility bits
-		int accessorBits = realModifiers & (AccPublic | AccProtected | AccPrivate);
+		int accessorBits = realModifiers & (ClassFileConstants.AccPublic | ClassFileConstants.AccProtected | ClassFileConstants.AccPrivate);
 		if ((accessorBits & (accessorBits - 1)) != 0) {
 			problemReporter().illegalVisibilityModifierCombinationForMethod(declaringClass, (AbstractMethodDeclaration) referenceContext);
 
 			// need to keep the less restrictive so disable Protected/Private as necessary
-			if ((accessorBits & AccPublic) != 0) {
-				if ((accessorBits & AccProtected) != 0)
-					modifiers &= ~AccProtected;
-				if ((accessorBits & AccPrivate) != 0)
-					modifiers &= ~AccPrivate;
-			} else if ((accessorBits & AccProtected) != 0 && (accessorBits & AccPrivate) != 0) {
-				modifiers &= ~AccPrivate;
+			if ((accessorBits & ClassFileConstants.AccPublic) != 0) {
+				if ((accessorBits & ClassFileConstants.AccProtected) != 0)
+					modifiers &= ~ClassFileConstants.AccProtected;
+				if ((accessorBits & ClassFileConstants.AccPrivate) != 0)
+					modifiers &= ~ClassFileConstants.AccPrivate;
+			} else if ((accessorBits & ClassFileConstants.AccProtected) != 0 && (accessorBits & ClassFileConstants.AccPrivate) != 0) {
+				modifiers &= ~ClassFileConstants.AccPrivate;
 			}
 		}
 
 		// check for modifiers incompatible with abstract modifier
-		if ((modifiers & AccAbstract) != 0) {
-			int incompatibleWithAbstract = AccPrivate | AccStatic | AccFinal | AccSynchronized | AccNative | AccStrictfp;
+		if ((modifiers & ClassFileConstants.AccAbstract) != 0) {
+			int incompatibleWithAbstract = ClassFileConstants.AccPrivate | ClassFileConstants.AccStatic | ClassFileConstants.AccFinal | ClassFileConstants.AccSynchronized | ClassFileConstants.AccNative | ClassFileConstants.AccStrictfp;
 			if ((modifiers & incompatibleWithAbstract) != 0)
 				problemReporter().illegalAbstractModifierCombinationForMethod(declaringClass, (AbstractMethodDeclaration) referenceContext);
 			if (!methodBinding.declaringClass.isAbstract())
@@ -189,11 +189,11 @@ public class MethodScope extends BlockScope {
 			modifiers |= AccFinal;
 		*/
 		// native methods cannot also be tagged as strictfp
-		if ((modifiers & AccNative) != 0 && (modifiers & AccStrictfp) != 0)
+		if ((modifiers & ClassFileConstants.AccNative) != 0 && (modifiers & ClassFileConstants.AccStrictfp) != 0)
 			problemReporter().nativeMethodsCannotBeStrictfp(declaringClass, (AbstractMethodDeclaration) referenceContext);
 
 		// static members are only authorized in a static member or top level type
-		if (((realModifiers & AccStatic) != 0) && declaringClass.isNestedType() && !declaringClass.isStatic())
+		if (((realModifiers & ClassFileConstants.AccStatic) != 0) && declaringClass.isNestedType() && !declaringClass.isStatic())
 			problemReporter().unexpectedStaticModifierForMethod(declaringClass, (AbstractMethodDeclaration) referenceContext);
 
 		methodBinding.modifiers = modifiers;
@@ -281,15 +281,15 @@ public class MethodScope extends BlockScope {
 		this.referenceContext = method;
 		method.scope = this;
 		SourceTypeBinding declaringClass = referenceType().binding;
-		int modifiers = method.modifiers | AccUnresolved;
+		int modifiers = method.modifiers | ExtraCompilerModifiers.AccUnresolved;
 		if (method.isConstructor()) {
 			if (method.isDefaultConstructor())
-				modifiers |= AccIsDefaultConstructor;
+				modifiers |= ExtraCompilerModifiers.AccIsDefaultConstructor;
 			method.binding = new MethodBinding(modifiers, null, null, declaringClass);
 			checkAndSetModifiersForConstructor(method.binding);
 		} else {
 			if (declaringClass.isInterface()) // interface or annotation type
-				modifiers |= AccPublic | AccAbstract;
+				modifiers |= ClassFileConstants.AccPublic | ClassFileConstants.AccAbstract;
 			method.binding =
 				new MethodBinding(modifiers, method.selector, null, null, null, declaringClass);
 			checkAndSetModifiersForMethod(method.binding);
@@ -300,7 +300,7 @@ public class MethodScope extends BlockScope {
 		int argLength = argTypes == null ? 0 : argTypes.length;
 		if (argLength > 0 && compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5) {
 			if (argTypes[--argLength].isVarArgs())
-				method.binding.modifiers |= AccVarargs;
+				method.binding.modifiers |= ClassFileConstants.AccVarargs;
 			while (--argLength >= 0) {
 				if (argTypes[argLength].isVarArgs())
 					problemReporter().illegalVararg(argTypes[argLength], method);
@@ -313,7 +313,7 @@ public class MethodScope extends BlockScope {
 		    method.binding.typeVariables = NoTypeVariables;
 		} else {
 			method.binding.typeVariables = createTypeVariables(typeParameters, method.binding);
-			method.binding.modifiers |= AccGenericSignature;
+			method.binding.modifiers |= ExtraCompilerModifiers.AccGenericSignature;
 		}
 		return method.binding;
 	}
@@ -350,7 +350,7 @@ public class MethodScope extends BlockScope {
 				field, // closest match
 				field.declaringClass,
 				fieldName,
-				NonStaticReferenceInConstructorInvocation);
+				ProblemReasons.NonStaticReferenceInConstructorInvocation);
 		if (invocationSite instanceof QualifiedNameReference) {
 			// look to see if the field is the first binding
 			QualifiedNameReference name = (QualifiedNameReference) invocationSite;
@@ -360,7 +360,7 @@ public class MethodScope extends BlockScope {
 					field, // closest match
 					field.declaringClass,
 					fieldName,
-					NonStaticReferenceInConstructorInvocation);
+					ProblemReasons.NonStaticReferenceInConstructorInvocation);
 		}
 		return field;
 	}
