diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/FieldBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/FieldBinding.java
index 4f52d40..973d2f8 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/FieldBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/FieldBinding.java
@@ -180,6 +180,38 @@ public char[] computeUniqueKey(boolean isLeaf) {
 	System.arraycopy(returnTypeKey, 0, uniqueKey, index, returnTypeLength);
 	return uniqueKey;
 }
+
+public Constant constant() {
+	Constant fieldConstant = this.constant;
+	if (fieldConstant == null) {
+		if (this.isFinal()) {
+			//The field has not been yet type checked.
+			//It also means that the field is not coming from a class that
+			//has already been compiled. It can only be from a class within
+			//compilation units to process. Thus the field is NOT from a BinaryTypeBinbing
+			FieldBinding originalField = this.original();
+			if (originalField.declaringClass instanceof SourceTypeBinding) {
+				SourceTypeBinding sourceType = (SourceTypeBinding) originalField.declaringClass;
+				if (sourceType.scope != null) {
+					TypeDeclaration typeDecl = sourceType.scope.referenceContext;
+					FieldDeclaration fieldDecl = typeDecl.declarationOf(originalField);
+					fieldDecl.resolve(originalField.isStatic() //side effect on binding 
+							? typeDecl.staticInitializerScope
+							: typeDecl.initializerScope);
+					fieldConstant = originalField.constant();
+				} else {
+					fieldConstant = Constant.NotAConstant; // shouldn't occur per construction (paranoid null check)
+				} 
+			} else {
+				fieldConstant = Constant.NotAConstant; // shouldn't occur per construction (paranoid null check)
+			}
+		} else {
+			fieldConstant = Constant.NotAConstant;
+		}
+		this.constant = fieldConstant;
+	}
+	return fieldConstant;
+}
 /**
  * X<T> t   -->  LX<TT;>;
  */
