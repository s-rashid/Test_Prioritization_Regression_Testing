diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java
index 4b93802..55137ce 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java
@@ -155,6 +155,10 @@ public class Scanner implements TerminalTokens {
 	private NLSTag[] nlsTags = null;
 	protected int nlsTagsPtr;
 	public boolean checkNonExternalizedStringLiterals;
+	
+	// support for tagging references as non null
+	boolean checkNullReferences;
+	public boolean gotNonNullTag;
 
 	// generic support
 	public boolean returnOnlyGreater = false;
@@ -198,7 +202,8 @@ public Scanner(
 	long complianceLevel,
 	char[][] taskTags,
 	char[][] taskPriorities,
-	boolean isTaskCaseSensitive) {
+	boolean isTaskCaseSensitive,
+	boolean checkNullReferences) {
 
 	this.eofPosition = Integer.MAX_VALUE;
 	this.tokenizeComments = tokenizeComments;
@@ -209,6 +214,28 @@ public Scanner(
 	this.taskTags = taskTags;
 	this.taskPriorities = taskPriorities;
 	this.isTaskCaseSensitive = isTaskCaseSensitive;
+	this.checkNullReferences = checkNullReferences;
+}
+
+public Scanner(
+	boolean tokenizeComments, 
+	boolean tokenizeWhiteSpace, 
+	boolean checkNonExternalizedStringLiterals, 
+	long sourceLevel,
+	long complianceLevel,
+	char[][] taskTags,
+	char[][] taskPriorities,
+	boolean isTaskCaseSensitive) {
+	this(
+		tokenizeComments,
+		tokenizeWhiteSpace,
+		checkNonExternalizedStringLiterals,
+		sourceLevel,
+		complianceLevel,
+		taskTags,
+		taskPriorities,
+		isTaskCaseSensitive,
+		false);
 }
 
 public Scanner(
@@ -228,7 +255,8 @@ public Scanner(
 		sourceLevel,
 		taskTags,
 		taskPriorities,
-		isTaskCaseSensitive);
+		isTaskCaseSensitive,
+		false);
 }
 
 public  final boolean atEnd() {
@@ -237,6 +265,72 @@ public  final boolean atEnd() {
 
 	return this.source.length == this.currentPosition;
 }
+
+// Check presence of non null tags.
+private final void checkNonNullTag(int commentStart, int commentEnd) {
+	for (int i = commentStart + 2, state = 0; state < 9;) {
+		if (i >= commentEnd || i >= this.eofPosition) {
+			return;
+		}
+		char currentChar = this.source[i++];
+		switch (state) {
+			case 0: // start
+				if (currentChar == 'N') {
+					state++;
+				}
+				else if (!CharOperation.isWhitespace(currentChar)) {
+					return;
+				}
+				continue;
+			case 1: // got a N
+				switch (currentChar) {
+					case 'O':
+						state++;
+						continue;
+					case 'N':
+						state = 8;
+						continue;
+					default:
+						return;
+				}
+				// never get there
+			case 2: // got NO
+			case 4: // got NON-
+				if (currentChar == 'N') {
+					state++;
+					continue;
+				}
+				return;
+			case 3: // got NON
+				if (currentChar == '-') {
+					state++;
+					continue;
+				}
+				return;
+			case 5: // got NON-N
+				if (currentChar == 'U') {
+					state++;
+					continue;
+				}
+				return;
+			case 6: // got NON-NU
+			case 7: // got NON-NUL
+				if (currentChar == 'L') {
+					state++;
+					continue;
+				}
+				return;
+			case 8:	// got NON-NULL or NN
+				if (currentChar != '*' && !CharOperation.isWhitespace(currentChar)) {
+					return;
+				}
+				state = 9; // got a marker
+		}
+	}
+	// got a non null marker
+	this.gotNonNullTag = true;
+}
+
 // chech presence of task: tags
 // TODO (frederic) see if we need to take unicode characters into account...
 public void checkTaskTag(int commentStart, int commentEnd) throws InvalidInputException {
@@ -1282,6 +1376,10 @@ public int getNextToken() throws InvalidInputException {
 							   	}
 								recordComment(TokenNameCOMMENT_LINE);
 								if (this.taskTags != null) checkTaskTag(this.startPosition, this.currentPosition);
+								if (this.checkNullReferences) {
+									checkNonNullTag(this.startPosition, 
+											this.currentPosition);
+								}
 								if ((this.currentCharacter == '\r') || (this.currentCharacter == '\n')) {
 									if (this.checkNonExternalizedStringLiterals) {
 										parseTags();
@@ -1301,6 +1399,10 @@ public int getNextToken() throws InvalidInputException {
 								this.currentPosition--;
 								recordComment(TokenNameCOMMENT_LINE);
 								if (this.taskTags != null) checkTaskTag(this.startPosition, this.currentPosition);
+								if (this.checkNullReferences) {
+									checkNonNullTag(this.startPosition, 
+											this.currentPosition);
+								}
 								if (this.checkNonExternalizedStringLiterals) {
 									parseTags();
 								}
@@ -1406,6 +1508,10 @@ public int getNextToken() throws InvalidInputException {
 								recordComment(token);
 								this.commentTagStarts[this.commentPtr] = firstTag;
 								if (this.taskTags != null) checkTaskTag(this.startPosition, this.currentPosition);
+								if (this.checkNullReferences) {
+									checkNonNullTag(this.startPosition, 
+											this.currentPosition);
+								}
 								if (this.tokenizeComments) {
 									/*
 									if (isJavadoc)
@@ -1738,7 +1844,7 @@ public final void jumpOverMethodBody() {
 										getNextUnicodeChar();
 									}
 							   	}
-								recordComment(TokenNameCOMMENT_LINE);
+								recordComment(TokenNameCOMMENT_LINE);  // REVIEW why do we record comments while jumping over (method bodies)?
 								if (this.recordLineSeparator
 									&& ((this.currentCharacter == '\r') || (this.currentCharacter == '\n'))) {
 										if (this.checkNonExternalizedStringLiterals) {
