diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java
index 11dcf12..fcbbf61 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java
@@ -127,35 +127,44 @@ public class AptCompilationParticipant implements ICompilationParticipant
 		// If we're in batch mode, we need to reset the classloaders
 		// for the batch processors before we begin
 		boolean isFullBuild = pbce.isFullBuild();
-		if (isFullBuild && pbce.getRound() == 0) {
-			AnnotationProcessorFactoryLoader.getLoader().resetBatchProcessors(pbce.getJavaProject());
-			_previousRoundsBatchFactories.clear();
+		try {
+			if (isFullBuild && pbce.getRound() == 0) {
+				AnnotationProcessorFactoryLoader.getLoader().resetBatchProcessors(pbce.getJavaProject());
+				_previousRoundsBatchFactories.clear();
+			}
+			
+			Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories =
+				AnnotationProcessorFactoryLoader.getLoader().getFactoriesAndAttributesForProject(javaProject);
+			
+			APTResult result = APTDispatch.runAPTDuringBuild(factories, _previousRoundsBatchFactories, buildFiles, javaProject, isFullBuild);
+			Set<IFile> newFiles = result.getNewFiles();			
+			Set<IFile> deletedFiles = new HashSet<IFile>();
+			_previousRoundsBatchFactories.addAll(result.getDispatchedBatchFactory());
+			
+			// see if APT updated a project's source path
+			boolean sourcePathChanged = result.getSourcePathChanged();
+			
+			// for apt, new files will always trump deleted files
+			for ( IFile df : result.getDeletedFiles() ){
+				if ( !newFiles.contains( df ) ){
+					deletedFiles.add(df);
+				}
+			}
+	
+			return new PreBuildCompilationResult( 
+					newFiles.toArray( new IFile[ newFiles.size() ] ), 
+					deletedFiles.toArray( new IFile[ deletedFiles.size() ] ), 
+					result.getNewDependencies(), 
+					result.getProblems(), 
+					sourcePathChanged );
 		}
-		
-		Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories =
-			AnnotationProcessorFactoryLoader.getLoader().getFactoriesAndAttributesForProject(javaProject);
-		
-		APTResult result = APTDispatch.runAPTDuringBuild(factories, _previousRoundsBatchFactories, buildFiles, javaProject, isFullBuild);
-		Set<IFile> newFiles = result.getNewFiles();			
-		Set<IFile> deletedFiles = new HashSet<IFile>();
-		_previousRoundsBatchFactories.addAll(result.getDispatchedBatchFactory());
-		
-		// see if APT updated a project's source path
-		boolean sourcePathChanged = result.getSourcePathChanged();
-		
-		// for apt, new files will always trump deleted files
-		for ( IFile df : result.getDeletedFiles() ){
-			if ( !newFiles.contains( df ) ){
-				deletedFiles.add(df);
+		finally {
+			if (isFullBuild) {
+				// In order to keep from locking jars, we explicitly close any batch-based
+				// classloaders we opened
+				AnnotationProcessorFactoryLoader.getLoader().closeBatchClassLoader();
 			}
 		}
-
-		return new PreBuildCompilationResult( 
-				newFiles.toArray( new IFile[ newFiles.size() ] ), 
-				deletedFiles.toArray( new IFile[ deletedFiles.size() ] ), 
-				result.getNewDependencies(), 
-				result.getProblems(), 
-				sourcePathChanged );
 	}
 	
 	/**
