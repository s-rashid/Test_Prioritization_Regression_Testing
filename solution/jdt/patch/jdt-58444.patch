diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/HashtableOfArrayToObject.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/HashtableOfArrayToObject.java
index a7a6bad..50ef980 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/HashtableOfArrayToObject.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/HashtableOfArrayToObject.java
@@ -53,39 +53,45 @@ public final class HashtableOfArrayToObject implements Cloneable {
 	}
 
 	public boolean containsKey(Object[] key) {
-
-		int index = hashCode(key) % this.valueTable.length;
+		int length = this.keyTable.length;
+		int index = hashCode(key) % length;
 		int keyLength = key.length;
 		Object[] currentKey;
 		while ((currentKey = this.keyTable[index]) != null) {
 			if (currentKey.length == keyLength && Util.equalArraysOrNull(currentKey, key))
 				return true;
-			index = (index + 1) % this.keyTable.length;
+			if (++index == length) {
+				index = 0;
+			}
 		}
 		return false;
 	}
 
 	public Object get(Object[] key) {
-
-		int index = hashCode(key) % this.valueTable.length;
+		int length = this.keyTable.length;
+		int index = hashCode(key) % length;
 		int keyLength = key.length;
 		Object[] currentKey;
 		while ((currentKey = this.keyTable[index]) != null) {
 			if (currentKey.length == keyLength && Util.equalArraysOrNull(currentKey, key))
 				return this.valueTable[index];
-			index = (index + 1) % keyTable.length;
+			if (++index == length) {
+				index = 0;
+			}
 		}
 		return null;
 	}
 
 	public Object[] getKey(Object[] key, int keyLength) {
-
-		int index = hashCode(key, keyLength) % this.valueTable.length;
+		int length = this.keyTable.length;
+		int index = hashCode(key, keyLength) % length;
 		Object[] currentKey;
 		while ((currentKey = this.keyTable[index]) != null) {
 			if (currentKey.length == keyLength && Util.equalArrays(currentKey, key, keyLength))
 				return currentKey;
-			index = (index + 1) % this.keyTable.length;
+			if (++index == length) {
+				index = 0;
+			}
 		}
 		return null;
 	}
@@ -102,14 +108,16 @@ public final class HashtableOfArrayToObject implements Cloneable {
 	}
 	
 	public Object put(Object[] key, Object value) {
-
-		int index = hashCode(key) % this.valueTable.length;
+		int length = this.keyTable.length;
+		int index = hashCode(key) % length;
 		int keyLength = key.length;
 		Object[] currentKey;
 		while ((currentKey = this.keyTable[index]) != null) {
 			if (currentKey.length == keyLength && Util.equalArraysOrNull(currentKey, key))
 				return this.valueTable[index] = value;
-			index = (index + 1) % keyTable.length;
+			if (++index == length) {
+				index = 0;
+			}
 		}
 		this.keyTable[index] = key;
 		this.valueTable[index] = value;
@@ -121,8 +129,8 @@ public final class HashtableOfArrayToObject implements Cloneable {
 	}
 
 	public Object removeKey(Object[] key) {
-
-		int index = hashCode(key) % this.valueTable.length;
+		int length = this.keyTable.length;
+		int index = hashCode(key) % length;
 		int keyLength = key.length;
 		Object[] currentKey;
 		while ((currentKey = this.keyTable[index]) != null) {
@@ -134,7 +142,9 @@ public final class HashtableOfArrayToObject implements Cloneable {
 				rehash();
 				return value;
 			}
-			index = (index + 1) % this.keyTable.length;
+			if (++index == length) {
+				index = 0;
+			}
 		}
 		return null;
 	}
