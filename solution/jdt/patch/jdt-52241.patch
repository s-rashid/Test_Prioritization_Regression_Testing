diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFormatter.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFormatter.java
index ffb0621..c08bf55 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFormatter.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFormatter.java
@@ -371,23 +371,23 @@ import org.eclipse.jdt.core.dom.Statement;
 //				wiat for bug 93644 
 //				case ASTNode.MEMBER_REF:
 //				case ASTNode.METHOD_REF:
-//					prefix= "/**\n * @see "; //$NON-NLS-1$
-//					suffix= "\n*/"; //$NON-NLS-1$
+//					prefix= "/**\n * @see ";
+//					suffix= "\n*/";
 //					code= CodeFormatter.K_JAVA_DOC;
 //					break;
 //				case ASTNode.METHOD_REF_PARAMETER:
-//					prefix= "/**\n * @see A#foo("; //$NON-NLS-1$
-//					suffix= ")\n*/"; //$NON-NLS-1$
+//					prefix= "/**\n * @see A#foo(";
+//					suffix= ")\n*/";
 //					code= CodeFormatter.K_JAVA_DOC;
 //					break;
 //				case ASTNode.TAG_ELEMENT:
 //				case ASTNode.TEXT_ELEMENT:
-//					prefix= "/**\n * "; //$NON-NLS-1$
-//					suffix= "\n*/"; //$NON-NLS-1$
+//					prefix= "/**\n * ";
+//					suffix= "\n*/";
 //					code= CodeFormatter.K_JAVA_DOC;
 //					break;
 				default:
-					//Assert.isTrue(false, "Node type not covered: " + node.getClass().getName()); //$NON-NLS-1$
+					//Assert.isTrue(false, "Node type not covered: " + node.getClass().getName());
 					return null;
 			}
 		}
@@ -577,12 +577,12 @@ import org.eclipse.jdt.core.dom.Statement;
 	public final Prefix ANNOTATION_SEPARATION= new FormattingPrefix("@A @B class C {}", "A @" , CodeFormatter.K_COMPILATION_UNIT); //$NON-NLS-1$ //$NON-NLS-2$
 
 	public final BlockContext IF_BLOCK_WITH_ELSE= new BlockFormattingPrefixSuffix("if (true)", "else{}", 8); //$NON-NLS-1$ //$NON-NLS-2$
-	public final BlockContext IF_BLOCK_NO_ELSE= new BlockFormattingPrefix("if (true)", 8); //$NON-NLS-1$ //$NON-NLS-2$
-	public final BlockContext ELSE_AFTER_STATEMENT= new BlockFormattingPrefix("if (true) foo(); else ", 15); //$NON-NLS-1$ //$NON-NLS-2$
-	public final BlockContext ELSE_AFTER_BLOCK= new BlockFormattingPrefix("if (true) {} else ", 11); //$NON-NLS-1$ //$NON-NLS-2$
+	public final BlockContext IF_BLOCK_NO_ELSE= new BlockFormattingPrefix("if (true)", 8); //$NON-NLS-1$
+	public final BlockContext ELSE_AFTER_STATEMENT= new BlockFormattingPrefix("if (true) foo(); else ", 15); //$NON-NLS-1$
+	public final BlockContext ELSE_AFTER_BLOCK= new BlockFormattingPrefix("if (true) {} else ", 11); //$NON-NLS-1$
 
-	public final BlockContext FOR_BLOCK= new BlockFormattingPrefix("for (;;) ", 7); //$NON-NLS-1$ //$NON-NLS-2$
-	public final BlockContext WHILE_BLOCK= new BlockFormattingPrefix("while (true)", 11); //$NON-NLS-1$ //$NON-NLS-2$
+	public final BlockContext FOR_BLOCK= new BlockFormattingPrefix("for (;;) ", 7); //$NON-NLS-1$
+	public final BlockContext WHILE_BLOCK= new BlockFormattingPrefix("while (true)", 11); //$NON-NLS-1$
 	public final BlockContext DO_BLOCK= new BlockFormattingPrefixSuffix("do ", "while (true);", 1); //$NON-NLS-1$ //$NON-NLS-2$
 
 }
