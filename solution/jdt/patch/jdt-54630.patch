diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java
index d78ce77..6683fc5 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java
@@ -36,6 +36,9 @@ public class CompletionScanner extends Scanner {
 	public int completedIdentifierStart = 0;
 	public int completedIdentifierEnd = -1;
 	public int unicodeCharSize;
+	
+	public boolean whitespacesBeforeCompletedTokenFound = false;
+	public boolean completedTokenFound = false;
 
 	public static final char[] EmptyCompletionIdentifier = {};
 	
@@ -134,9 +137,12 @@ public int getNextToken() throws InvalidInputException {
 					}
 					if (this.currentPosition > this.eofPosition) {
 						/* might be completing at eof (e.g. behind a dot) */
-						if (this.completionIdentifier == null && 
+						if (!this.completedTokenFound && 
 							this.startPosition == this.cursorLocation + 1){
 							this.currentPosition = this.startPosition; // for being detected as empty free identifier
+							this.completedTokenFound = true;
+							this.completedIdentifierStart = this.startPosition;
+							this.completedIdentifierEnd = this.currentPosition - 1;
 							return TokenNameIdentifier;
 						}	
 						return TokenNameEOF;
@@ -161,17 +167,24 @@ public int getNextToken() throws InvalidInputException {
 				}
 				/* completion requesting strictly inside blanks */
 				if ((whiteStart != this.currentPosition)
-					//&& (previousToken == TokenNameDOT)
-					&& (this.completionIdentifier == null)
-					&& (whiteStart <= this.cursorLocation+1)
-					&& (this.cursorLocation < this.startPosition)
-					&& !Character.isJavaIdentifierStart(this.currentCharacter)){
+						//&& (previousToken == TokenNameDOT)
+						&& (!this.completedTokenFound)
+						&& (whiteStart <= this.cursorLocation+1)
+						&& (this.cursorLocation < this.startPosition)
+						&& !Character.isJavaIdentifierStart(this.currentCharacter)){
+
+					if (this.tokenizeWhiteSpace && hasWhiteSpaces && !this.whitespacesBeforeCompletedTokenFound) {
+						// reposition scanner in case we are interested by spaces as tokens
+						this.currentPosition-=offset;
+						this.startPosition = whiteStart;
+						this.whitespacesBeforeCompletedTokenFound = true;
+						return TokenNameWHITESPACE;
+					}
 					this.currentPosition = this.startPosition; // for next token read
-					/* Warning:
-					 * Above statement reset scanner position at token start which can make
-					 * scanner enter in an infinite loop if completionIdentifier is still null!
-					 * (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=114115)
-					 */
+					this.completedTokenFound = true;
+					this.completedIdentifierStart = this.startPosition;
+					this.completedIdentifierEnd = this.currentPosition - 1;
+					this.whitespacesBeforeCompletedTokenFound = false;
 					return TokenNameIdentifier;
 				}
 			} while (isWhiteSpace);
@@ -184,7 +197,7 @@ public int getNextToken() throws InvalidInputException {
 			//little trick to get out in the middle of a source computation
 			if (this.currentPosition > this.eofPosition){
 				/* might be completing at eof (e.g. behind a dot) */
-				if (this.completionIdentifier == null && 
+				if (!this.completedTokenFound  && 
 					this.startPosition == this.cursorLocation + 1){
 					// compute end of empty identifier.
 					// if the empty identifier is at the start of a next token the end of
@@ -192,6 +205,9 @@ public int getNextToken() throws InvalidInputException {
 				 	while(getNextCharAsJavaIdentifierPart()){/*empty*/}
 				 	this.endOfEmptyToken = this.currentPosition - 1;
 					this.currentPosition = this.startPosition; // for being detected as empty free identifier
+					this.completedTokenFound = true;
+					this.completedIdentifierStart = this.startPosition;
+					this.completedIdentifierEnd = this.currentPosition - 1;
 					return TokenNameIdentifier;
 				}				
 				return TokenNameEOF;
@@ -441,6 +457,9 @@ public int getNextToken() throws InvalidInputException {
 											&& this.cursorLocation <= this.currentPosition-1) {
 										this.currentPosition = start;
 										// complete inside a string literal
+										this.completedTokenFound = true;
+										this.completedIdentifierStart = this.startPosition;
+										this.completedIdentifierEnd = this.currentPosition - 1;
 										return TokenNameStringLiteral;
 									}
 									start = this.currentPosition;
@@ -468,6 +487,9 @@ public int getNextToken() throws InvalidInputException {
 									if(this.startPosition <= this.cursorLocation
 											&& this.cursorLocation <= this.currentPosition-1) {
 										// complete inside a string literal
+										this.completedTokenFound = true;
+										this.completedIdentifierStart = this.startPosition;
+										this.completedIdentifierEnd = this.currentPosition - 1;
 										return TokenNameStringLiteral;
 									}
 								}
@@ -517,6 +539,9 @@ public int getNextToken() throws InvalidInputException {
 						if(this.startPosition <= this.cursorLocation
 							&& this.cursorLocation < this.currentPosition) {
 							// complete inside a string literal
+							this.completedTokenFound = true;
+							this.completedIdentifierStart = this.startPosition;
+							this.completedIdentifierEnd = this.currentPosition - 1;
 							return TokenNameStringLiteral;
 						}
 						throw new InvalidInputException(UNTERMINATED_STRING);
@@ -537,8 +562,11 @@ public int getNextToken() throws InvalidInputException {
 						}
 						throw e; // rethrow
 					}
-//					if (this.startPosition <= this.cursorLocation && this.cursorLocation <= this.currentPosition-1){
-//					}
+					if (this.startPosition <= this.cursorLocation && this.cursorLocation <= this.currentPosition-1){
+						this.completedTokenFound = true;
+						this.completedIdentifierStart = this.startPosition;
+						this.completedIdentifierEnd = this.currentPosition - 1;
+					}
 					return TokenNameStringLiteral;
 				case '/' :
 					{
@@ -796,9 +824,12 @@ public int getNextToken() throws InvalidInputException {
 		}
 	}
 	/* might be completing at very end of file (e.g. behind a dot) */
-	if (this.completionIdentifier == null && 
+	if (!this.completedTokenFound && 
 		this.startPosition == this.cursorLocation + 1){
 		this.currentPosition = this.startPosition; // for being detected as empty free identifier
+		this.completedTokenFound = true;
+		this.completedIdentifierStart = this.startPosition;
+		this.completedIdentifierEnd = this.currentPosition - 1;
 		return TokenNameIdentifier;
 	}
 	return TokenNameEOF;
@@ -813,6 +844,14 @@ public final void getNextUnicodeChar() throws InvalidInputException {
 		throw new InvalidCursorLocation(InvalidCursorLocation.NO_COMPLETION_INSIDE_UNICODE);
 	}
 }
+public void resetTo(int begin, int end) {
+	super.resetTo(begin, end);
+	if(this.completedTokenFound && this.completedIdentifierStart >= begin) {
+		this.completedTokenFound = false;
+		this.whitespacesBeforeCompletedTokenFound = false;
+	}
+}
+
 ///*
 // * In case we actually read a keyword, but the cursor is located inside,
 // * we pretend we read an identifier.
@@ -822,10 +861,17 @@ public int scanIdentifierOrKeyword() {
 	int id = super.scanIdentifierOrKeyword();
 
 	// convert completed keyword into an identifier
-	if (id != TokenNameIdentifier
-		&& this.startPosition <= this.cursorLocation+1 
+	if (this.startPosition <= this.cursorLocation+1 
 		&& this.cursorLocation < this.currentPosition){
-		return TokenNameIdentifier;
+		if(!this.completedTokenFound) {
+			this.completedTokenFound = true;
+			this.completedIdentifierStart = this.startPosition;
+			this.completedIdentifierEnd = this.currentPosition - 1;
+			return TokenNameIdentifier;
+		} else if(this.completedIdentifierStart == this.startPosition
+				&& this.completedIdentifierEnd == this.currentPosition - 1) {
+				return TokenNameIdentifier;
+		}
 	}
 	return id;
 }
