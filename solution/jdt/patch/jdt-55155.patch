diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java
index 2840162..d49c0a2 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java
@@ -26997,4 +26997,69 @@ public void test873() {
 		},
 		"");
 }
+//https://bugs.eclipse.org/bugs/show_bug.cgi?id=115693
+public void test874() {
+	this.runConformTest(
+		new String[] {
+			"X.java", // =================
+			"class A {}\n" + 
+			"abstract class B<T> {\n" + 
+			"    public B<T> label(String s) { return this; }\n" + 
+			"}\n" + 
+			"final class C extends B<A> {\n" + 
+			"    public static C instance(String s) { return new C(); }\n" + 
+			"    @Override public String toString() {\n" + 
+			"    	return \"SUCCESS\";\n" + 
+			"    }\n" + 
+			"}\n" + 
+			"public class X {\n" + 
+			"    public static void main(String[] args) {\n" + 
+			"        C c = (C)C.instance(\"X\").label(\"Y\");\n" + 
+			"        System.out.println(c.toString());\n" + 
+			"    }\n" + 
+			"}\n",
+		},
+		"SUCCESS");
+	// 	ensure proper declaring class for #run() invocation
+	String expectedOutput =
+		"  // Method descriptor #15 ([Ljava/lang/String;)V\n" + 
+		"  // Stack: 2, Locals: 2\n" + 
+		"  public static void main(java.lang.String[] args);\n" + 
+		"     0  ldc <String \"X\"> [16]\n" + 
+		"     2  invokestatic C.instance(java.lang.String) : C [17]\n" + 
+		"     5  ldc <String \"Y\"> [23]\n" + 
+		"     7  invokevirtual C.label(java.lang.String) : B [25]\n" + 
+		"    10  checkcast C [18]\n" + 
+		"    13  astore_1 [c]\n" + 
+		"    14  getstatic java.lang.System.out : java.io.PrintStream [29]\n" + 
+		"    17  aload_1 [c]\n" + 
+		"    18  invokevirtual C.toString() : java.lang.String [35]\n" + 
+		"    21  invokevirtual java.io.PrintStream.println(java.lang.String) : void [39]\n" + 
+		"    24  return\n" + 
+		"      Line numbers:\n" + 
+		"        [pc: 0, line: 13]\n" + 
+		"        [pc: 14, line: 14]\n" + 
+		"        [pc: 24, line: 15]\n" + 
+		"      Local variable table:\n" + 
+		"        [pc: 0, pc: 25] local: args index: 0 type: java.lang.String[]\n" + 
+		"        [pc: 14, pc: 25] local: c index: 1 type: C\n";
+	
+	try {
+		File f = new File(OUTPUT_DIR + File.separator + "X.class");
+		byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
+		ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
+		String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
+		int index = result.indexOf(expectedOutput);
+		if (index == -1 || expectedOutput.length() == 0) {
+			System.out.println(Util.displayString(result, 3));
+		}
+		if (index == -1) {
+			assertEquals("Wrong contents", expectedOutput, result);
+		}
+	} catch (org.eclipse.jdt.core.util.ClassFormatException e) {
+		assertTrue(false);
+	} catch (IOException e) {
+		assertTrue(false);
+	}		
+}
 }
