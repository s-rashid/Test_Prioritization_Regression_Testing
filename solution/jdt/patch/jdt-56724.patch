diff --git a/org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/BuildpathTests.java b/org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/BuildpathTests.java
index c85a093..a9b6198 100644
--- a/org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/BuildpathTests.java
+++ b/org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/BuildpathTests.java
@@ -15,9 +15,7 @@ import junit.framework.*;
 import org.eclipse.core.resources.ResourcesPlugin;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.jdt.core.*;
-import org.eclipse.jdt.core.IJavaProject;
-import org.eclipse.jdt.core.JavaCore;
-import org.eclipse.jdt.core.JavaModelException;
+import org.eclipse.jdt.core.compiler.CategorizedProblem;
 import org.eclipse.jdt.core.tests.util.Util;
 
 import java.io.File;
@@ -58,7 +56,7 @@ public class BuildpathTests extends Tests {
 		);
 
 		fullBuild();
-		expectingSpecificProblemFor(classTest1, new Problem("src", "Zork1 cannot be resolved to a type", classTest1)); //$NON-NLS-1$ //$NON-NLS-2$
+		expectingSpecificProblemFor(classTest1, new Problem("src", "Zork1 cannot be resolved to a type", classTest1,39, 44, CategorizedProblem.CAT_TYPE)); //$NON-NLS-1$ //$NON-NLS-2$
 
 		//----------------------------
 		//           Step 2
@@ -112,14 +110,14 @@ public class BuildpathTests extends Tests {
 		expectingOnlyProblemsFor(new IPath[] {project2Path, project3Path});
 		expectingOnlySpecificProblemsFor(project2Path,
 			new Problem[] {
-				new Problem("", "The project cannot be built until build path errors are resolved", project2Path), //$NON-NLS-1$ //$NON-NLS-2$
-				new Problem("Build path", "Project CP2 is missing required Java project: 'CP1'", project2Path) //$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("", "The project cannot be built until build path errors are resolved", project2Path, -1, -1, -1), //$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("Build path", "Project CP2 is missing required Java project: 'CP1'", project2Path, -1, -1, -1) //$NON-NLS-1$ //$NON-NLS-2$
 			}
 		);
 		expectingOnlySpecificProblemsFor(project3Path,
 			new Problem[] {
-				new Problem("", "The project cannot be built until build path errors are resolved", project3Path), //$NON-NLS-1$ //$NON-NLS-2$
-				new Problem("Build path", "Project CP3 is missing required library: '/CP1/temp.jar'", project3Path) //$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("", "The project cannot be built until build path errors are resolved", project3Path, -1, -1, -1), //$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("Build path", "Project CP3 is missing required library: '/CP1/temp.jar'", project3Path, -1, -1, -1) //$NON-NLS-1$ //$NON-NLS-2$
 			}
 		);
 
@@ -138,10 +136,10 @@ public class BuildpathTests extends Tests {
 		incrementalBuild();
 		expectingOnlyProblemsFor(new IPath[] {project2Path, project3Path});
 		expectingOnlySpecificProblemFor(project2Path,
-			new Problem("Build path", "Project CP2 is missing required Java project: 'CP1'", project2Path) //$NON-NLS-1$ //$NON-NLS-2$
+			new Problem("Build path", "Project CP2 is missing required Java project: 'CP1'", project2Path, -1, -1, -1) //$NON-NLS-1$ //$NON-NLS-2$
 		);
 		expectingOnlySpecificProblemFor(project3Path,
-			new Problem("Build path", "Project CP3 is missing required library: '/CP1/temp.jar'", project3Path) //$NON-NLS-1$ //$NON-NLS-2$
+			new Problem("Build path", "Project CP3 is missing required library: '/CP1/temp.jar'", project3Path, -1, -1, -1) //$NON-NLS-1$ //$NON-NLS-2$
 		);
 
 		env.openProject(project1Path);
@@ -228,8 +226,8 @@ public class BuildpathTests extends Tests {
 		expectingOnlyProblemsFor(new IPath[] {projectPath, classTest1});
 		expectingOnlySpecificProblemsFor(projectPath,
 			new Problem[] {
-				new Problem("", "The project was not built since its build path is incomplete. Cannot find the class file for java.lang.Object. Fix the build path then try building this project", projectPath), //$NON-NLS-1$ //$NON-NLS-2$
-				new Problem("p1", "The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files", classTest1) //$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("", "The project was not built since its build path is incomplete. Cannot find the class file for java.lang.Object. Fix the build path then try building this project", projectPath, -1, -1, -1), //$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("p1", "The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files", classTest1, 0, 1, CategorizedProblem.CAT_BUILDPATH) //$NON-NLS-1$ //$NON-NLS-2$
 			}
 		);
 
@@ -266,18 +264,18 @@ public class BuildpathTests extends Tests {
 		fullBuild();
 		expectingSpecificProblemFor(
 			projectPath,
-			new Problem("", "The project was not built since its build path is incomplete. Cannot find the class file for java.lang.Object. Fix the build path then try building this project", projectPath)); //$NON-NLS-1$ //$NON-NLS-2$
+			new Problem("", "The project was not built since its build path is incomplete. Cannot find the class file for java.lang.Object. Fix the build path then try building this project", projectPath, -1, -1, -1)); //$NON-NLS-1$ //$NON-NLS-2$
 		
 		Problem[] prob1 = env.getProblemsFor(classTest1);
 		Problem[] prob2 = env.getProblemsFor(classTest2);
 		Problem[] prob3 = env.getProblemsFor(classTest3);
 		assertEquals("too many problems", prob1.length + prob2.length + prob3.length,1); //$NON-NLS-1$
 		if(prob1.length == 1) {
-			expectingSpecificProblemFor(classTest1, new Problem("p1", "The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files", classTest1)); //$NON-NLS-1$ //$NON-NLS-2$
+			expectingSpecificProblemFor(classTest1, new Problem("p1", "The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files", classTest1, -1, -1, -1)); //$NON-NLS-1$ //$NON-NLS-2$
 		} else if (prob2.length == 1) {
-			expectingSpecificProblemFor(classTest2, new Problem("p2", "The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files", classTest2)); //$NON-NLS-1$ //$NON-NLS-2$
+			expectingSpecificProblemFor(classTest2, new Problem("p2", "The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files", classTest2, -1, -1, -1)); //$NON-NLS-1$ //$NON-NLS-2$
 		} else {
-			expectingSpecificProblemFor(classTest3, new Problem("p2", "The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files", classTest3)); //$NON-NLS-1$ //$NON-NLS-2$
+			expectingSpecificProblemFor(classTest3, new Problem("p2", "The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files", classTest3, 0, 1, CategorizedProblem.CAT_BUILDPATH)); //$NON-NLS-1$ //$NON-NLS-2$
 		}
 
 		//----------------------------
@@ -314,8 +312,8 @@ public class BuildpathTests extends Tests {
 		expectingOnlyProblemsFor(project2Path);
 		expectingOnlySpecificProblemsFor(project2Path,
 			new Problem[] {
-				new Problem("", "The project cannot be built until build path errors are resolved", project2Path), //$NON-NLS-1$ //$NON-NLS-2$
-				new Problem("Build path", "Project MP2 is missing required Java project: 'MP1'", project2Path) //$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("", "The project cannot be built until build path errors are resolved", project2Path, -1, -1, -1), //$NON-NLS-1$ //$NON-NLS-2$
+				new Problem("Build path", "Project MP2 is missing required Java project: 'MP1'", project2Path, -1, -1, -1) //$NON-NLS-1$ //$NON-NLS-2$
 			}
 		);
 
@@ -336,7 +334,7 @@ public class BuildpathTests extends Tests {
 		incrementalBuild();
 		expectingOnlyProblemsFor(project2Path);
 		expectingOnlySpecificProblemFor(project2Path,
-			new Problem("Build path", "Project MP2 is missing required Java project: 'MP1'", project2Path) //$NON-NLS-1$ //$NON-NLS-2$
+			new Problem("Build path", "Project MP2 is missing required Java project: 'MP1'", project2Path, -1, -1, -1) //$NON-NLS-1$ //$NON-NLS-2$
 		);
 
 		project1Path = env.addProject("MP1"); //$NON-NLS-1$
