diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredMethod.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredMethod.java
index 9528988..0726296 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredMethod.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredMethod.java
@@ -20,9 +20,11 @@ import org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall;
 import org.eclipse.jdt.internal.compiler.ast.FieldDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.LocalDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.MemberValuePair;
+import org.eclipse.jdt.internal.compiler.ast.MethodDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.Statement;
 import org.eclipse.jdt.internal.compiler.ast.SuperReference;
 import org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;
+import org.eclipse.jdt.internal.compiler.ast.TypeParameter;
 import org.eclipse.jdt.internal.compiler.ast.TypeReference;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants;
 import org.eclipse.jdt.internal.compiler.lookup.BaseTypes;
@@ -485,4 +487,24 @@ public void updateSourceEndIfNecessary(int braceStart, int braceEnd){
 		}
 	}
 }
+void attach(TypeParameter[] parameters, int startPos) {
+	if(methodDeclaration.modifiers != ClassFileConstants.AccDefault) return;
+	
+	int lastParameterEnd = parameters[parameters.length - 1].sourceEnd;
+	
+	Parser parser = this.parser();
+	if(parser.scanner.getLineNumber(methodDeclaration.declarationSourceStart)
+			!= parser.scanner.getLineNumber(lastParameterEnd)) return;
+	
+	if(parser.modifiersSourceStart > lastParameterEnd
+			&& parser.modifiersSourceStart < methodDeclaration.declarationSourceStart) return;
+	
+	if (this.methodDeclaration instanceof MethodDeclaration) {
+		((MethodDeclaration)this.methodDeclaration).typeParameters = parameters;
+		this.methodDeclaration.declarationSourceStart = startPos;
+	} else if (this.methodDeclaration instanceof ConstructorDeclaration){
+		((ConstructorDeclaration)this.methodDeclaration).typeParameters = parameters;
+		this.methodDeclaration.declarationSourceStart = startPos;
+	}
+}
 }
