diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/AptPlugin.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/AptPlugin.java
index 0155413..0a36f75 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/AptPlugin.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/AptPlugin.java
@@ -11,22 +11,52 @@
 
 package org.eclipse.jdt.apt.core;
 
-import org.eclipse.core.runtime.Platform;
-import org.eclipse.core.runtime.Plugin;
+import java.io.IOException;
+import java.io.InputStream;
+
+import org.eclipse.core.runtime.*;
 import org.eclipse.jdt.apt.core.util.AptConfig;
 import org.osgi.framework.BundleContext;
 
 public class AptPlugin extends Plugin {
-	public static final String PLUGIN_ID= "org.eclipse.jdt.apt.core"; //$NON-NLS-1$
+	public static final String PLUGIN_ID = "org.eclipse.jdt.apt.core"; //$NON-NLS-1$
+	
+	private static final String TOOLSJARNAME = "./tools.jar"; //$NON-NLS-1$
+	
+	/**
+	 * Status IDs for system log entries.  Must be unique per plugin.
+	 */
+	public static final int STATUS_EXCEPTION = 1;
+	public static final int STATUS_NOTOOLSJAR = 2;
+	public static final String ERRTXT_NOTOOLSJAR = "Could not find tools.jar in plugin directory: org.eclipse.jdt.apt.core will not load";
+	
 	private static AptPlugin thePlugin = null; // singleton object
 	
 	public void start(BundleContext context) throws Exception {
 		thePlugin = this;
 		super.start(context);
 		initDebugTracing();
+		checkToolsJar();
 		AptConfig.initialize();
 	}
 
+	/**
+	 * Check for the Sun mirror interfaces.  If they aren't found,
+	 * log an error.
+	 */
+	private void checkToolsJar() {
+		boolean foundToolsJar = true;
+		try {
+			InputStream is = thePlugin.openStream(new Path(TOOLSJARNAME));
+		}
+		catch (IOException e) {
+			foundToolsJar = false;
+		}
+		if (!foundToolsJar) {
+			log(new Status(IStatus.ERROR, PLUGIN_ID, STATUS_NOTOOLSJAR, ERRTXT_NOTOOLSJAR, null));
+		}
+	}
+
 	public void stop(BundleContext context) throws Exception {
 		super.stop(context);
 	}
@@ -34,6 +64,21 @@ public class AptPlugin extends Plugin {
 	public static AptPlugin getPlugin() {
 		return thePlugin;
 	}
+
+	/**
+	 * Log a status message to the platform log.  Use this for reporting exceptions.
+	 * @param status
+	 */
+	public static void log(IStatus status) {
+		thePlugin.getLog().log(status);
+	}
+	
+	/**
+	 * Convenience wrapper around log(IStatus), to log an exception.
+	 */
+	public static void log(Throwable e) {
+		log(new Status(IStatus.ERROR, PLUGIN_ID, STATUS_EXCEPTION, e.getLocalizedMessage(), e)); 
+	}
 	
 	private void initDebugTracing() {		
 		String option = Platform.getDebugOption(APT_DEBUG_OPTION);
