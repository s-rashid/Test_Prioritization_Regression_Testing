diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java
index b5affab..68c06c4 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java
@@ -429,14 +429,6 @@ protected Compiler newCompiler() {
 
 	// enable the compiler reference info support
 	options.produceReferenceInfo = true;
-	
-	org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment env = newCompiler.lookupEnvironment;
-	synchronized (env) {
-		// enable shared byte[]'s used by ClassFile to avoid allocating MBs during a build
-		env.sharedArraysUsed = false;
-		env.sharedClassFileHeader = new byte[30000];
-		env.sharedClassFileContents = new byte[30000];
-	}
 
 	return newCompiler;
 }
@@ -656,13 +648,9 @@ protected char[] writeClassFile(ClassFile classFile, SourceFile compilationUnit,
 
 	IFile file = container.getFile(filePath.addFileExtension(SuffixConstants.EXTENSION_class));
 	writeClassFileBytes(classFile.getBytes(), file, fileName, isTopLevelType, compilationUnit.updateClassFile);
-	if (classFile.ownSharedArrays) {
-		org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment env = this.compiler.lookupEnvironment;
-		synchronized (env) {
-			env.sharedArraysUsed = false;
-		}
+	if (classFile.isShared) {
+		this.compiler.lookupEnvironment.classFilePool.release(classFile);
 	}
-
 	// answer the name of the class file as in Y or Y$M
 	return filePath.lastSegment().toCharArray();
 }
