diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SubRoutineStatement.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SubRoutineStatement.java
index 4df0bda..2e8755c 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SubRoutineStatement.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SubRoutineStatement.java
@@ -19,9 +19,7 @@ import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
  */
 public abstract class SubRoutineStatement extends Statement {
 	
-	public static final ExceptionLabel[] NO_EXCEPTION_HANDLER = new ExceptionLabel[0];
-	ExceptionLabel[] anyExceptionLabels = NO_EXCEPTION_HANDLER;
-	int anyExceptionLabelsCount = 0;
+	ExceptionLabel anyExceptionLabel = null;
 	
 	public abstract boolean isSubRoutineEscaping();
 
@@ -29,35 +27,24 @@ public abstract class SubRoutineStatement extends Statement {
 	
 	public ExceptionLabel enterAnyExceptionHandler(CodeStream codeStream) {
 		
-		int length;
-		if ((length = this.anyExceptionLabelsCount) == this.anyExceptionLabels.length) {
-			System.arraycopy(this.anyExceptionLabels, 0 , this.anyExceptionLabels=new ExceptionLabel[length*2 + 1], 0, length);
+		if (this.anyExceptionLabel == null) {
+			this.anyExceptionLabel = new ExceptionLabel(codeStream, null /*any exception*/);
 		}
-		ExceptionLabel exceptionLabel = new ExceptionLabel(codeStream, null);
-		this.anyExceptionLabels[this.anyExceptionLabelsCount++] = exceptionLabel;
-		return exceptionLabel;
+		this.anyExceptionLabel.placeStart();
+		return this.anyExceptionLabel;
 	}
 
 	public void exitAnyExceptionHandler() {
-		if (this.anyExceptionLabelsCount == 0) return;
-		ExceptionLabel currentLabel = this.anyExceptionLabels[this.anyExceptionLabelsCount-1];
-		if (currentLabel.start == currentLabel.codeStream.position) {
-			// discard empty exception handler
-			this.anyExceptionLabels[--this.anyExceptionLabelsCount] = null;
-			currentLabel.codeStream.removeExceptionHandler(currentLabel);
-		} else {
-			currentLabel.placeEnd();
+		if (this.anyExceptionLabel != null) {
+			this.anyExceptionLabel.placeEnd();
 		}
 	}
 	
-	public void placeAllAnyExceptionHandlers() {
-		
-		for (int i = 0; i < this.anyExceptionLabelsCount; i++) {
-			this.anyExceptionLabels[i].place();
-		}
+	public void placeAllAnyExceptionHandler() {
+		this.anyExceptionLabel.place();
 	}
 	
-	public static void reenterExceptionHandlers(SubRoutineStatement[] subroutines, int max, CodeStream codeStream) {
+	public static void reenterAnyExceptionHandlers(SubRoutineStatement[] subroutines, int max, CodeStream codeStream) {
 		if (subroutines == null) return;
 		if (max < 0) max = subroutines.length;
 		for (int i = 0; i < max; i++) {
