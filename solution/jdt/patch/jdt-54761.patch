diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SearchParticipantTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SearchParticipantTests.java
index f5854b9..5b81db3 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SearchParticipantTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SearchParticipantTests.java
@@ -14,21 +14,25 @@ import junit.framework.Test;
 
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.runtime.*;
-import org.eclipse.core.runtime.CoreException;
-import org.eclipse.core.runtime.IPath;
-import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.jdt.core.ICompilationUnit;
 import org.eclipse.jdt.core.IJavaElement;
+import org.eclipse.jdt.core.IJavaProject;
 import org.eclipse.jdt.core.JavaModelException;
 import org.eclipse.jdt.core.search.*;
 import org.eclipse.jdt.core.tests.model.AbstractJavaSearchTests.JavaSearchResultCollector;
 import org.eclipse.jdt.core.tests.util.Util;
+import org.eclipse.jdt.internal.core.search.indexing.SourceIndexer;
+import org.eclipse.jdt.internal.core.search.processing.JobManager;
 
 /**
  * Tests the search participant supprt.
  */
 public class SearchParticipantTests extends ModifyingResourceTests implements IJavaSearchConstants {
-	
+
+	IJavaProject project;
+	boolean deleteProject = true;
+	boolean restart = true;
+
 	public class TestSearchParticipant extends SearchParticipant {
 		
 		class WrapperDocument  extends SearchDocument {
@@ -61,7 +65,11 @@ public class SearchParticipantTests extends ModifyingResourceTests implements IJ
 
 		public void indexDocument(SearchDocument document, IPath indexLocation) {
 			((TestSearchDocument) document).indexingRequested = true;
-			this.defaultSearchParticipant.indexDocument(new WrapperDocument(document, this), indexLocation);
+			document.removeAllIndexEntries();
+			String documentPath = document.getPath();
+			if (documentPath.endsWith(".test")) {
+				new SourceIndexer(document).indexDocument();
+			}
 		}
 
 		public void locateMatches(SearchDocument[] documents, SearchPattern pattern, IJavaSearchScope scope, SearchRequestor requestor, IProgressMonitor monitor) throws CoreException {
@@ -120,26 +128,54 @@ public class SearchParticipantTests extends ModifyingResourceTests implements IJ
 	// Use this static initializer to specify subset for tests
 	// All specified tests which do not belong to the class are skipped...
 	static {
-		// Names of tests to run: can be "testBugXXXX" or "BugXXXX")
 	//	TESTS_NAMES = new String[] { "testSearch"};
 	//	TESTS_NUMBERS = new int[] { 23, 28, 38 };
 	//	TESTS_RANGE = new int[] { 21, 38 };
 	}
-	
+
 	public static Test suite() {
 		return buildTestSuite(SearchParticipantTests.class);
 	}
-	
+
 	public void setUpSuite() throws Exception {
 		super.setUpSuite();
 		deleteFile(getIndexLocation().toFile());
 	}
-	
+
+	public void tearDownSuite() throws Exception {
+		super.tearDownSuite();
+		if (this.project != null) {
+			deleteProject("P");
+		}
+	}
+
+	protected void setUp() throws Exception {
+		super.setUp();
+		if (this.restart) {
+			simulateRestart();
+			this.restart = false;
+		}
+		if (this.project == null) {
+			this.project = createJavaProject("P");
+		}
+		this.deleteProject = true;
+		if (JobManager.VERBOSE) {
+			System.out.println("--------------------------------------------------------------------------------");
+			System.out.println("Run test "+getName()+"...");
+		}
+	}
+
 	protected void tearDown() throws Exception {
-		deleteFile(getIndexLocation().toFile());
+		// Do not delete specific index file between tests as corresponding still lives in IndexManager cache
+		// TODO (frederic) Uncomment when bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=116650 will be fixed
+		//deleteFile(getIndexLocation().toFile());
+		if (this.deleteProject) {
+			deleteProject("P");
+			this.project = null;
+		}
 		super.tearDown();
 	}
-	
+
 	public SearchParticipantTests(String name) {
 		super(name);
 	}
@@ -147,23 +183,18 @@ public class SearchParticipantTests extends ModifyingResourceTests implements IJ
 	IPath getIndexLocation() {
 		return new Path(getExternalPath() + "test.index");
 	}
-	
+
 	/*
 	 * Ensures that scheduleDocumentIndexing(...) triggers a call to indexDocument(...)
 	 * (case of document existing on disk)
 	 */
 	public void testScheduleDocumentIndexing1() throws CoreException {
-		try {
-			createJavaProject("P");
-			createFile("/P/X.test", "");
-			TestSearchParticipant participant = new TestSearchParticipant();
-			TestSearchDocument document = new TestSearchDocument("/P/X.test", participant);
-			participant.scheduleDocumentIndexing(document, getIndexLocation());
-			waitUntilIndexesReady();
-			assertTrue("Should have requested to index document", document.indexingRequested);
-		} finally {
-			deleteProject("P");
-		}
+		createFile("/P/X.test", "");
+		TestSearchParticipant participant = new TestSearchParticipant();
+		TestSearchDocument document = new TestSearchDocument("/P/X.test", participant);
+		participant.scheduleDocumentIndexing(document, getIndexLocation());
+		waitUntilIndexesReady();
+		assertTrue("Should have requested to index document", document.indexingRequested);
 	}
 
 	/*
@@ -171,77 +202,106 @@ public class SearchParticipantTests extends ModifyingResourceTests implements IJ
 	 * (case of document that doesn't exist on disk)
 	 */
 	public void testScheduleDocumentIndexing2() throws CoreException {
-		try {
-			createJavaProject("P");
-			TestSearchParticipant participant = new TestSearchParticipant();
-			TestSearchDocument document = new TestSearchDocument("/P/X.test", participant);
-			participant.scheduleDocumentIndexing(document, getIndexLocation());
-			waitUntilIndexesReady();
-			assertTrue("Should have requested to index document", document.indexingRequested);
-		} finally {
-			deleteProject("P");
-		}
+		TestSearchParticipant participant = new TestSearchParticipant();
+		TestSearchDocument document = new TestSearchDocument("/P/X.test", participant);
+		participant.scheduleDocumentIndexing(document, getIndexLocation());
+		waitUntilIndexesReady();
+		assertTrue("Should have requested to index document", document.indexingRequested);
 	}
-	
+
 	/*
 	 * Ensures that adding index entries through indexDocument() updates the index file.
-	 * TODO (frederic) investigate why this test is failing
 	 */
-	public synchronized void _testIndexDocument() throws CoreException, InterruptedException {
-		try {
-			createJavaProject("P");
-			TestSearchParticipant participant = new TestSearchParticipant(){
-				public void indexDocument(SearchDocument document, IPath indexLocation) {
-					if (!document.getPath().equals("/P/no")) {
-						for (int i = 0; i < 1000; i++) {
-							document.addIndexEntry(("category" + i).toCharArray(), ("key" + i).toCharArray());
-						}
+	public synchronized void testIndexDocument01() throws CoreException, InterruptedException {
+		createFile(
+			"/P/X.test",
+			"public class X {\n" +
+			"}"
+		);
+		TestSearchParticipant participant = new TestSearchParticipant();
+		TestSearchDocument document = new TestSearchDocument("/P/X.test", participant);
+		participant.scheduleDocumentIndexing(document, getIndexLocation());
+		waitUntilIndexesReady();
+		wait(1100); // wait more than 1000ms so as to allow for the index to be saved on disk
+		document = new TestSearchDocument("/P/no", participant);
+		participant.scheduleDocumentIndexing(document, getIndexLocation());
+		waitUntilIndexesReady();
+		assertTrue("Index file should have been written",  getIndexLocation().toFile().length() > 0);
+	}
+
+	/*
+	 * Ensures that adding index entries through indexDocument() updates the index file
+	 * and that exit session keeps it.
+	 */
+	public synchronized void testIndexDocument02() throws CoreException, InterruptedException {
+		TestSearchParticipant participant = new TestSearchParticipant(){
+			public void indexDocument(SearchDocument document, IPath indexLocation) {
+				if (!document.getPath().equals("/P/no")) {
+					for (int i = 0; i < 1000; i++) {
+						document.addIndexEntry(("category" + i).toCharArray(), ("key" + i).toCharArray());
 					}
 				}
-			};
-			TestSearchDocument document = new TestSearchDocument("/P/X.test", participant);
-			participant.scheduleDocumentIndexing(document, getIndexLocation());
-			waitUntilIndexesReady();
-			wait(1100); // wait more than 1000ms so as to allow for the index to be saved on disk
-			document = new TestSearchDocument("/P/no", participant);
-			participant.scheduleDocumentIndexing(document, getIndexLocation());
-			waitUntilIndexesReady();
-			assertTrue("Index file should have been written",  getIndexLocation().toFile().length() > 0);
-		} finally {
-			deleteProject("P");
-		}
+			}
+		};
+		TestSearchDocument document = new TestSearchDocument("/P/X.test", participant);
+		participant.scheduleDocumentIndexing(document, getIndexLocation());
+		waitUntilIndexesReady();
+		wait(1100); // wait more than 1000ms so as to allow for the index to be saved on disk
+		document = new TestSearchDocument("/P/no", participant);
+		participant.scheduleDocumentIndexing(document, getIndexLocation());
+		waitUntilIndexesReady();
+		wait(1100); // wait more than 1000ms so as to allow for the index to be saved on disk
+		assertTrue("Index file should have been written",  getIndexLocation().toFile().length() > 0);
+	
+		simulateExit();
+		assertTrue("Index file should stay after shutdown",  getIndexLocation().toFile().length() > 0);
+		this.deleteProject = false;
+		this.restart = true;
 	}
 
 	/*
-	 * Ensures that a simple search that forwards queries to the default participant works as expected
-	 * TODO (frederic) investigate why this test is failing
+	 * Ensures that adding index entries through indexDocument() updates the index file.
 	 */
-	public void _testSearch() throws CoreException {
-		try {
-			createJavaProject("P");
-			createFile(
-				"/P/X.test",
-				"public class X {\n" +
-				"}"
-			);
-			
-			// index file
-			TestSearchParticipant participant = new TestSearchParticipant();
-			TestSearchDocument document = new TestSearchDocument("/P/X.test", participant);
-			participant.scheduleDocumentIndexing(document, getIndexLocation());
-			waitUntilIndexesReady();
-			
-			// search for declaration of X
-			SearchPattern pattern = SearchPattern.createPattern("X", IJavaSearchConstants.DECLARATIONS, IJavaSearchConstants.TYPE, SearchPattern.R_EXACT_MATCH);
-			IJavaSearchScope scope = SearchEngine.createWorkspaceScope();
-			SearchRequestor requestor =  new TestResultCollector();
-			new SearchEngine().search(pattern, new SearchParticipant[] {participant}, scope, requestor, null);
-			assertSearchResults(
-				"X.test X [X]",
-				requestor);
-		} finally {
-			deleteProject("P");
-		}
+	public synchronized void testIndexDocument03() throws CoreException, InterruptedException {
+		createFile(
+			"/P/X.test",
+			"public class X {\n" +
+			"}"
+		);
+		TestSearchParticipant participant = new TestSearchParticipant();
+		TestSearchDocument document = new TestSearchDocument("/P/X.test", participant);
+		participant.scheduleDocumentIndexing(document, getIndexLocation());
+		waitUntilIndexesReady();
+		wait(1100); // wait more than 1000ms so as to allow for the index to be saved on disk
+		document = new TestSearchDocument("/P/no", participant);
+		participant.scheduleDocumentIndexing(document, getIndexLocation());
+		waitUntilIndexesReady();
+		assertTrue("Index file should have been written",  getIndexLocation().toFile().length() > 0);
 	}
 	
+	/*
+	 * Ensures that a simple search that forwards queries to the default participant works as expected
+	 */
+	public void testSearch() throws CoreException {
+		createFile(
+			"/P/X.test",
+			"public class X {\n" +
+			"}"
+		);
+
+		// index file
+		TestSearchParticipant participant = new TestSearchParticipant();
+		TestSearchDocument document = new TestSearchDocument("/P/X.test", participant);
+		participant.scheduleDocumentIndexing(document, getIndexLocation());
+		waitUntilIndexesReady();
+
+		// search for declaration of X
+		SearchPattern pattern = SearchPattern.createPattern("X", IJavaSearchConstants.DECLARATIONS, IJavaSearchConstants.TYPE, SearchPattern.R_EXACT_MATCH);
+		IJavaSearchScope scope = SearchEngine.createWorkspaceScope();
+		SearchRequestor requestor =  new TestResultCollector();
+		new SearchEngine().search(pattern, new SearchParticipant[] {participant}, scope, requestor, null);
+		assertSearchResults(
+			"X.test X [X]",
+			requestor);
+	}
 }
