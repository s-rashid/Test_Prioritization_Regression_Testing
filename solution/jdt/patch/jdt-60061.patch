diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java
index d014ef1..c5dd629 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java
@@ -307,59 +307,79 @@ public static final boolean camelCaseMatch(String pattern, int patternStart, int
 		// first char must strictly match (upper/lower)
 		return false;
 	}
+
 	char patternChar, nameChar;
-	int iPattern = patternStart+1;
-	int iName = nameStart+1;
-	nextPatternChar: while (iPattern < patternEnd) {
-		// check patternChar, keep camelCasing only if uppercase
-		if ((patternChar = pattern.charAt(iPattern)) < ScannerHelper.MAX_OBVIOUS) {
+	int iPattern = patternStart;
+	int iName = nameStart;
+
+	// Main loop is on pattern characters
+	while (true) {
+
+		iPattern++;
+		iName++;
+
+		if (iPattern == patternEnd) {
+			// We have exhausted pattern, so it's a match
+			return true;
+		}
+
+		if (iName == nameEnd){
+			// We have exhausted name (and not pattern), so it's not a match 
+			return false;
+		}
+
+		// For as long as we're exactly matching, bring it on (even if it's a lower case character)
+		if ((patternChar = pattern.charAt(iPattern)) == name.charAt(iName)) {
+			continue;
+		}
+
+		// If characters are not equals, then it's not a match if patternChar is lowercase
+		if (patternChar < ScannerHelper.MAX_OBVIOUS) {
 			if ((ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[patternChar] & ScannerHelper.C_UPPER_LETTER) == 0) {
-				// end of camelCase part of pattern
-				break nextPatternChar;
+				return false;
 			}
-			// still uppercase
-		} else if (ScannerHelper.isJavaIdentifierPart(patternChar) 
-						&& !ScannerHelper.isUpperCase(patternChar)) {
-			// end of camelCase part of pattern
-			break nextPatternChar;
 		}
-		nextNameChar: while (iName < nameEnd) {
-			if ((nameChar = name.charAt(iName)) != patternChar) {
-				if (nameChar < ScannerHelper.MAX_OBVIOUS) {
-					if ((ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[nameChar] & (ScannerHelper.C_LOWER_LETTER|ScannerHelper.C_SPECIAL |ScannerHelper.C_DIGIT)) != 0) {
-						// lowercase/digit char is ignored
-						iName++;
-						continue nextNameChar;
-					}
-				} else if (ScannerHelper.isJavaIdentifierPart(nameChar) 
-								&& !ScannerHelper.isUpperCase(nameChar)) {
-					// lowercase name char is ignored
+		else if (Character.isJavaIdentifierPart(patternChar) && !Character.isUpperCase(patternChar)) {
+			return false;
+		}
+
+		// patternChar is uppercase, so let's find the next uppercase in name
+		while (true) {
+			if (iName == nameEnd){
+	            //	We have exhausted name (and not pattern), so it's not a match
+				return false;
+			}
+
+			nameChar = name.charAt(iName);
+
+			if (nameChar < ScannerHelper.MAX_OBVIOUS) {
+				if ((ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[nameChar] & (ScannerHelper.C_LOWER_LETTER | ScannerHelper.C_SPECIAL | ScannerHelper.C_DIGIT)) != 0) {
+					// nameChar is lowercase    
 					iName++;
-					continue nextNameChar;
+				// nameChar is uppercase...
+				} else  if (patternChar != nameChar) {
+					//.. and it does not match patternChar, so it's not a match
+					return false;
+				} else {
+					//.. and it matched patternChar. Back to the big loop
+					break;
 				}
-				// mismatch, either uppercase in name or non case char ('/' etc)--> reject
+			}
+			else if (Character.isJavaIdentifierPart(nameChar) && !Character.isUpperCase(nameChar)) {
+				// nameChar is lowercase    
+				iName++;
+			// nameChar is uppercase...
+			} else  if (patternChar != nameChar) {
+				//.. and it does not match patternChar, so it's not a match
 				return false;
 			} else {
-				// pattern char == name char (uppercase)
-				iName++;
-				iPattern++;
-				continue nextPatternChar;
-			}	
-		}
-		if (iPattern == patternEnd) return true;
-		if (iName == nameEnd) return false;
-		continue nextPatternChar;
-	}
-		
-	// check trailing part in case sensitive way
-	while (iPattern < patternEnd && iName < nameEnd) {
-		if (pattern.charAt(iPattern) != name.charAt(iName)) {
-			return false;
+				//.. and it matched patternChar. Back to the big loop
+				break;
+			}
 		}
-		iPattern++;
-		iName++;
+		// At this point, either name has been exhausted, or it is at an uppercase letter.
+		// Since pattern is also at an uppercase letter
 	}
-	return iPattern == patternEnd;
 }	
 
 /**
@@ -1715,6 +1735,8 @@ public boolean matchesName(char[] pattern, char[] name) {
 		boolean isCaseSensitive = (this.matchRule & R_CASE_SENSITIVE) != 0;
 		boolean isCamelCase = (this.matchRule & R_CAMELCASE_MATCH) != 0;
 		int matchMode = this.matchRule & MODE_MASK;
+		boolean sameLength = pattern.length == name.length;
+		boolean canBePrefix = name.length >= pattern.length;
 		boolean matchFirstChar = !isCaseSensitive || pattern.length == 0 || (name.length > 0 &&  pattern[0] == name[0]);
 		if (isCamelCase && matchFirstChar && CharOperation.camelCaseMatch(pattern, name)) {
 			return true;
@@ -1722,11 +1744,16 @@ public boolean matchesName(char[] pattern, char[] name) {
 		switch (matchMode) {
 			case R_EXACT_MATCH :
 			case R_FULL_MATCH :
-				if (isCamelCase) return false;
-				return matchFirstChar && CharOperation.equals(pattern, name, isCaseSensitive);
+				if (!isCamelCase && sameLength && matchFirstChar) {
+					return CharOperation.equals(pattern, name, isCaseSensitive);
+				}
+				break;
 
 			case R_PREFIX_MATCH :
-				return matchFirstChar && CharOperation.prefixEquals(pattern, name, isCaseSensitive);
+				if (canBePrefix && matchFirstChar) {
+					return CharOperation.prefixEquals(pattern, name, isCaseSensitive);
+				}
+				break;
 
 			case R_PATTERN_MATCH :
 				if (!isCaseSensitive)
@@ -1805,22 +1832,10 @@ public static int validateMatchRule(String stringPattern, int matchRule) {
 	if ((matchRule & R_CAMELCASE_MATCH) != 0) {
 		// Verify sting pattern validity
 		int length = stringPattern.length();
-		boolean validCamelCase = false;
-		if (length > 1) {
-			int idx = 0;
-			char ch = stringPattern.charAt(idx++);
-			if (ScannerHelper.isJavaIdentifierStart(ch)) {
-				ch = stringPattern.charAt(idx++);
-				if (ScannerHelper.isUpperCase(ch)) {
-					while (idx<length && ScannerHelper.isUpperCase(stringPattern.charAt(idx))) {
-						idx++;
-					}
-					while (idx<length && (!ScannerHelper.isUpperCase(ch=stringPattern.charAt(idx)) && ScannerHelper.isJavaIdentifierPart(ch))) {
-						idx++;
-					}
-					validCamelCase = idx == length;
-				}
-			}
+		boolean validCamelCase = true;
+		for (int i=0; i<length && validCamelCase; i++) {
+			char ch = stringPattern.charAt(i++);
+			validCamelCase = ScannerHelper.isJavaIdentifierStart(ch);
 		}
 		// Verify bits compatibility
 		if (validCamelCase) {
