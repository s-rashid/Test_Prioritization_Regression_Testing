diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java
index c17f878..b4ae6ad 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java
@@ -10,8 +10,6 @@
  *******************************************************************************/
 package org.eclipse.jdt.internal.core.util;
 
-import java.text.NumberFormat;
-
 import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.Signature;
 import org.eclipse.jdt.core.compiler.CharOperation;
@@ -1023,7 +1021,7 @@ public class Disassembler extends ClassFileBytesDisassembler {
 			for (int i = 0; i < length; i++) {
 				IClassFileAttribute attribute = attributes[i];
 				if (CharOperation.equals(attribute.getAttributeName(), IAttributeNamesConstants.STACK_MAP_TABLE)) {
-					disassemble((StackMapTableAttribute) attribute, buffer, lineSeparator, tabNumber + 1);
+					disassemble((StackMapTableAttribute) attribute, buffer, lineSeparator, tabNumber + 1, mode);
 				} else if (attribute != lineNumberAttribute
 						&& attribute != localVariableAttribute
 						&& attribute != localVariableTypeAttribute) {
@@ -1498,15 +1496,133 @@ public class Disassembler extends ClassFileBytesDisassembler {
 	}
 
 
-	private void disassemble(StackMapTableAttribute attribute, StringBuffer buffer, String lineSeparator, int tabNumber) {
+	private void disassemble(IStackMapTableAttribute attribute, StringBuffer buffer, String lineSeparator, int tabNumber, int mode) {
 		writeNewLine(buffer, lineSeparator, tabNumber + 1);
-		buffer.append(Messages.bind(Messages.disassembler_stackmaptableattributeheader,
-			new String[] {
-				Long.toString(attribute.getAttributeLength()),
-				getBytesAsString(attribute.getBytes(), lineSeparator, tabNumber)
-			}));
+		int numberOfEntries = attribute.getNumberOfEntries();
+		buffer.append(Messages.bind(Messages.disassembler_stackmaptableattributeheader, Integer.toString(numberOfEntries)));
+		if (numberOfEntries != 0) {
+			writeNewLine(buffer, lineSeparator, tabNumber + 2);
+			final IStackMapFrame[] stackMapFrames = attribute.getStackMapFrame();
+			for (int i = 0; i < numberOfEntries; i++) {
+				disassemble(stackMapFrames[i], buffer, lineSeparator, tabNumber + 2, mode);
+			}
+		}
 	}
 
+	private String disassemble(IVerificationTypeInfo[] infos, String lineSeparator, int tabNumber, int mode) {
+		StringBuffer buffer = new StringBuffer();
+		for (int i = 0, max = infos.length; i < max; i++) {
+			if(i != 0) buffer.append(',');
+			switch(infos[i].getTag()) {
+				case IVerificationTypeInfo.ITEM_DOUBLE :
+					buffer.append("double"); //$NON-NLS-1$
+					break;
+				case IVerificationTypeInfo.ITEM_FLOAT :
+					buffer.append("float"); //$NON-NLS-1$
+					break;
+				case IVerificationTypeInfo.ITEM_INTEGER :
+					buffer.append("int"); //$NON-NLS-1$
+					break;
+				case IVerificationTypeInfo.ITEM_LONG :
+					buffer.append("long"); //$NON-NLS-1$
+					break;
+				case IVerificationTypeInfo.ITEM_NULL :
+					buffer.append("null"); //$NON-NLS-1$
+					break;
+				case IVerificationTypeInfo.ITEM_OBJECT :
+					final char[] classTypeName = infos[i].getClassTypeName();
+					CharOperation.replace(classTypeName, '/', '.');
+					buffer.append(returnClassName(classTypeName, '.', mode));
+					break;
+				case IVerificationTypeInfo.ITEM_TOP :
+					buffer.append("top"); //$NON-NLS-1$
+					break;
+				case IVerificationTypeInfo.ITEM_UNINITIALIZED :
+					buffer.append("uninitialized"); //$NON-NLS-1$
+					break;
+				case IVerificationTypeInfo.ITEM_UNINITIALIZED_THIS :
+					buffer.append("uninitialized_this"); //$NON-NLS-1$
+			}
+		}
+		return String.valueOf(buffer);
+	}
+	private void disassemble(IStackMapFrame frame, StringBuffer buffer, String lineSeparator, int tabNumber, int mode) {
+		// disassemble each frame
+		int type = frame.getFrameType();
+		switch(type) {
+			case 247 : // SAME_LOCALS_1_STACK_ITEM_EXTENDED
+				buffer.append(
+					Messages.bind(
+						Messages.disassembler_frame_same_locals_1_stack_item_extended,
+						Integer.toString(frame.getOffsetDelta()),
+						disassemble(frame.getStackItems(), lineSeparator, tabNumber + 1, mode)));
+				writeNewLine(buffer, lineSeparator, tabNumber);
+				break;
+			case 248 :
+			case 249 :
+			case 250:
+				// CHOP
+				buffer.append(
+						Messages.bind(
+							Messages.disassembler_frame_chop,
+							Integer.toString(frame.getOffsetDelta()),
+							Integer.toString(251 - type)));
+				writeNewLine(buffer, lineSeparator, tabNumber);
+				break;
+			case 251 :
+				// SAME_FRAME_EXTENDED
+				buffer.append(
+						Messages.bind(
+							Messages.disassembler_frame_same_frame_extended,
+							Integer.toString(frame.getOffsetDelta())));
+				writeNewLine(buffer, lineSeparator, tabNumber);
+				break;
+			case 252 :
+			case 253 :
+			case 254 :
+				// APPEND
+				buffer.append(
+						Messages.bind(
+							Messages.disassembler_frame_append,
+							Integer.toString(frame.getOffsetDelta()),
+							disassemble(frame.getLocals(), lineSeparator, tabNumber + 1, mode)));
+				writeNewLine(buffer, lineSeparator, tabNumber);
+				break;
+			case 255 :
+				// FULL_FRAME
+				buffer.append(
+						Messages.bind(
+							Messages.disassembler_frame_full_frame,
+							new String[] {
+								Integer.toString(frame.getOffsetDelta()),
+								Integer.toString(frame.getNumberOfLocals()),
+								disassemble(frame.getLocals(), lineSeparator, tabNumber + 1, mode),
+								Integer.toString(frame.getNumberOfStackItems()),
+								disassemble(frame.getStackItems(), lineSeparator, tabNumber + 1, mode),
+								dumpNewLineWithTabs(lineSeparator, tabNumber + 2)
+							}));
+				writeNewLine(buffer, lineSeparator, tabNumber);
+				break;
+			default:
+				if (type <= 63) {
+					// SAME_FRAME
+					buffer.append(
+							Messages.bind(
+								Messages.disassembler_frame_same_frame,
+								Integer.toString(type)));
+					writeNewLine(buffer, lineSeparator, tabNumber);
+				} else if (type <= 127) {
+					// SAME_LOCALS_1_STACK_ITEM
+					buffer.append(
+							Messages.bind(
+								Messages.disassembler_frame_same_locals_1_stack_item,
+								Integer.toString(type - 64),
+								disassemble(frame.getStackItems(), lineSeparator, tabNumber + 1, mode)));
+					writeNewLine(buffer, lineSeparator, tabNumber);
+				}
+		}
+	}
+	
 	private void disassembleAsModifier(IAnnotation annotation, StringBuffer buffer, String lineSeparator, int tabNumber, int mode) {
 		final char[] typeName = CharOperation.replaceOnCopy(annotation.getTypeName(), '/', '.');
 		buffer.append('@').append(returnClassName(Signature.toCharArray(typeName), '.', mode));
@@ -1622,52 +1738,6 @@ public class Disassembler extends ClassFileBytesDisassembler {
 		}
 	}
 
-	private String getBytesAsString(final byte[] bytes, final String lineSeparator, final int tabNumber) {
-		StringBuffer buffer = new StringBuffer();
-		NumberFormat format = NumberFormat.getInstance();
-		format.setMaximumIntegerDigits(3);
-		format.setMinimumIntegerDigits(3);
-		final int length = bytes.length;
-		if (length == 0) {
-			return "{}"; //$NON-NLS-1$
-		} else {
-			buffer.append('{');
-			writeNewLine(buffer, lineSeparator, tabNumber + 2);
-			String hexString = Integer.toHexString(bytes[0] & 0xFF);
-			switch(hexString.length()) {
-				case 1 :
-					buffer.append('0');
-					break;
-			}
-			buffer.append(hexString).append(' ');
-			hexString = Integer.toHexString(bytes[1] & 0xFF);
-			switch(hexString.length()) {
-				case 1 :
-					buffer.append('0');
-					break;
-			}
-			buffer.append(hexString);
-			for (int i = 2; i < length; i++) {
-				if ((i - 2) % 11 == 0) {
-					writeNewLine(buffer, lineSeparator, tabNumber + 2);
-				} else {
-					buffer.append(' ');
-				}
-				final int currentByte = bytes[i] & 0xFF;
-				hexString = Integer.toHexString(currentByte).toUpperCase();
-				switch(hexString.length()) {
-					case 1 :
-						buffer.append('0');
-						break;
-				}
-				buffer.append(hexString).append('(').append(format.format(currentByte)).append(')');
-			}
-			writeNewLine(buffer, lineSeparator, tabNumber + 1);
-			buffer.append('}');
-		}
-		return String.valueOf(buffer);
-	}
-
 	private void disassembleTypeMembers(IClassFileReader classFileReader, char[] className, StringBuffer buffer, String lineSeparator, int tabNumber, int mode, boolean isEnum) {
 		IFieldInfo[] fields = classFileReader.getFieldInfos();
 		if (isEnum && checkMode(mode, WORKING_COPY)) {
@@ -1760,6 +1830,12 @@ public class Disassembler extends ClassFileBytesDisassembler {
 		for (int i = 0; i < tabNumber; i++) {
 			buffer.append(Messages.disassembler_indentation); 
 		}
+	}
+	
+	private final String dumpNewLineWithTabs(String lineSeparator, int tabNumber) {
+		StringBuffer buffer = new StringBuffer();
+		writeNewLine(buffer, lineSeparator, tabNumber);
+		return String.valueOf(buffer);
 	} 
 	
 	/**
