diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java
index e359b57..07b4754 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java
@@ -10,19 +10,16 @@
  *******************************************************************************/
 package org.eclipse.jdt.internal.core;
 
+import java.util.HashMap;
 import java.util.Map;
 
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.OperationCanceledException;
-import org.eclipse.jdt.core.ICompilationUnit;
 import org.eclipse.jdt.core.*;
+import org.eclipse.jdt.core.compiler.CategorizedProblem;
 import org.eclipse.jdt.core.compiler.IProblem;
 import org.eclipse.jdt.internal.compiler.*;
-import org.eclipse.jdt.internal.compiler.CompilationResult;
 import org.eclipse.jdt.internal.compiler.Compiler;
-import org.eclipse.jdt.internal.compiler.ICompilerRequestor;
-import org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy;
-import org.eclipse.jdt.internal.compiler.IProblemFactory;
 import org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;
 import org.eclipse.jdt.internal.compiler.env.AccessRestriction;
 import org.eclipse.jdt.internal.compiler.env.INameEnvironment;
@@ -136,7 +133,7 @@ public class CompilationUnitProblemFinder extends Compiler {
 		char[] contents,
 		Parser parser,
 		WorkingCopyOwner workingCopyOwner,
-		IProblemRequestor problemRequestor,
+		HashMap problems,
 		boolean creatingAST,
 		IProgressMonitor monitor)
 		throws JavaModelException {
@@ -181,7 +178,21 @@ public class CompilationUnitProblemFinder extends Compiler {
 					true, // analyze code
 					true); // generate code
 			}
-			reportProblems(unit, problemRequestor, monitor);
+			CompilationResult unitResult = unit.compilationResult;
+			IProblem[] unitProblems = unitResult.getProblems();
+			int length = unitProblems == null ? 0 : unitProblems.length;
+			if (length > 0) {
+				CategorizedProblem[] categorizedProblems = new CategorizedProblem[length];
+				System.arraycopy(unitProblems, 0, categorizedProblems, 0, length);
+				problems.put(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, categorizedProblems);
+			}
+			unitProblems = unitResult.getTasks();
+			length = unitProblems == null ? 0 : unitProblems.length;
+			if (length > 0) {
+				CategorizedProblem[] categorizedProblems = new CategorizedProblem[length];
+				System.arraycopy(unitProblems, 0, categorizedProblems, 0, length);
+				problems.put(IJavaModelMarker.TASK_MARKER, categorizedProblems);
+			}
 			if (NameLookup.VERBOSE) {
 				System.out.println(Thread.currentThread() + " TIME SPENT in NameLoopkup#seekTypesInSourcePackage: " + environment.nameLookup.timeSpentInSeekTypesInSourcePackage + "ms");  //$NON-NLS-1$ //$NON-NLS-2$
 				System.out.println(Thread.currentThread() + " TIME SPENT in NameLoopkup#seekTypesInBinaryPackage: " + environment.nameLookup.timeSpentInSeekTypesInBinaryPackage + "ms");  //$NON-NLS-1$ //$NON-NLS-2$
@@ -208,25 +219,12 @@ public class CompilationUnitProblemFinder extends Compiler {
 		ICompilationUnit unitElement, 
 		char[] contents,
 		WorkingCopyOwner workingCopyOwner,
-		IProblemRequestor problemRequestor,
+		HashMap problems,
 		boolean creatingAST,
 		IProgressMonitor monitor)
 		throws JavaModelException {
 			
-		return process(null/*no CompilationUnitDeclaration*/, unitElement, contents, null/*use default Parser*/, workingCopyOwner, problemRequestor, creatingAST, monitor);
-	}
-
-	
-	private static void reportProblems(CompilationUnitDeclaration unit, IProblemRequestor problemRequestor, IProgressMonitor monitor) {
-		CompilationResult unitResult = unit.compilationResult;
-		IProblem[] problems = unitResult.getAllProblems();
-		for (int i = 0, problemLength = problems == null ? 0 : problems.length; i < problemLength; i++) {
-			if (JavaModelManager.VERBOSE){
-				System.out.println("PROBLEM FOUND while reconciling : "+problems[i].getMessage());//$NON-NLS-1$
-			}
-			if (monitor != null && monitor.isCanceled()) break;
-			problemRequestor.acceptProblem(problems[i]);				
-		}
+		return process(null/*no CompilationUnitDeclaration*/, unitElement, contents, null/*use default Parser*/, workingCopyOwner, problems, creatingAST, monitor);
 	}
 
 	/* (non-Javadoc)
