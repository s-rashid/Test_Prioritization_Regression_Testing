diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java
index 4eb7aa7..382aee0 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java
@@ -613,6 +613,19 @@ protected IJavaElement createImportHandle(ImportReference importRef) {
 	return createTypeHandle(typeName.substring(0, lastDollar));
 }
 /**
+ * Creates an IImportDeclaration from the given import statement
+ */
+protected IJavaElement createPackageDeclarationHandle(CompilationUnitDeclaration unit) {
+	if (unit.isPackageInfo()) {
+		char[] packName = CharOperation.concatWith(unit.currentPackage.getImportName(), '.');
+		Openable openable = this.currentPossibleMatch.openable;
+		if (openable instanceof CompilationUnit) {
+			return ((CompilationUnit) openable).getPackageDeclaration(new String(packName));
+		}
+	}
+	return createTypeHandle(new String(unit.getMainTypeName()));
+}
+/**
  * Creates an IType from the given simple top level type name. 
  */
 protected IType createTypeHandle(String simpleTypeName) {
@@ -986,6 +999,7 @@ protected void locateMatches(JavaProject javaProject, PossibleMatchSet matchSet,
 		locateMatches(javaProject, possibleMatches, index, max);
 		index += max;
 	}
+	this.patternLocator.clear();
 }
 /**
  * Locate the matches in the given files and report them using the search requestor. 
@@ -1968,7 +1982,7 @@ protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResol
 				for (int i = 0, l = nodes.length; i < l; i++)
 					nodeSet.matchingNodes.removeKey(nodes[i]);
 			} else {
-				IJavaElement element = createTypeHandle(new String(unit.getMainTypeName()));
+				IJavaElement element = createPackageDeclarationHandle(unit);
 				for (int i = 0, l = nodes.length; i < l; i++) {
 					ASTNode node = nodes[i];
 					Integer level = (Integer) nodeSet.matchingNodes.removeKey(node);
@@ -1982,7 +1996,7 @@ protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResol
 	if (matchedUnitContainer) {
 		ImportReference pkg = unit.currentPackage;
 		if (pkg != null && pkg.annotations != null) {
-			IJavaElement element = createTypeHandle(new String(unit.getMainTypeName()));
+			IJavaElement element = createPackageDeclarationHandle(unit);
 			if (element != null) {
 				reportMatching(pkg.annotations, element, null, nodeSet, true, encloses(element));
 			}
@@ -2014,7 +2028,6 @@ protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResol
 	this.methodHandles = null;
 	this.bindings.removeKey(this.pattern);
 	this.patternLocator.mustResolve = locatorMustResolve;
-	this.patternLocator.clear();
 }
 /**
  * Visit the given field declaration and report the nodes that match exactly the
