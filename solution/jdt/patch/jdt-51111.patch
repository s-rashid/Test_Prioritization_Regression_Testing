diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java
index cde018d..68f6098 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java
@@ -657,6 +657,10 @@ public void testRegion2() throws JavaModelException {
 		h.getAllTypes()
 	);
 }
+/*
+ * Ensures that a type hierarchy on a region contains anonymous/local types in this region
+ * (regression test for bug 48395 Hierarchy on region misses local classes)
+ */
 public void testRegion3() throws JavaModelException {
 	IPackageFragment pkg = getPackageFragment("TypeHierarchy", "src", "p9");
 	IRegion region = JavaCore.newRegion();
@@ -707,10 +711,40 @@ public void testRegion4() throws CoreException {
 		deleteProjects(new String[] {"P1", "P2", "P3"});
 	}
 }
+
 /*
- * Ensures that a type hierarchy on a region contains anonymous/local types in this region
- * (regression test for bug 48395 Hierarchy on region misses local classes)
+ * Ensures that a type hierarchy on a member type with subtypes in another project is correct
+ * (regression test for bug 101019 RC3: Type Hierarchy does not find implementers/extenders of inner class/interface in other project)
  */
+public void testMemberTypeSubtypeDifferentProject() throws CoreException {
+	try {
+		createJavaProject("P1");
+		createFile(
+			"/P1/X.java",
+			"public class X {\n" +
+			"  public class Member {\n" +
+			"  }\n" +
+			"}"
+			);
+		createJavaProject("P2", new String[] {""}, new String[] {"JCL_LIB"}, new String[] {"/P1"}, "");
+		createFile(
+			"/P2/Y.java",
+			"public class Y extends X.Member {\n" +
+			"}"
+		);
+		IType focus = getCompilationUnit("/P1/X.java").getType("X").getType("Member");
+		ITypeHierarchy hierarchy = focus.newTypeHierarchy(null/*no progress*/);
+		assertHierarchyEquals(
+			"Focus: Member [in X [in X.java [in <default> [in <project root> [in P1]]]]]\n" + 
+			"Super types:\n" + 
+			"  Object [in Object.class [in java.lang [in "+ getExternalJCLPathString() + " [in P1]]]]\n" + 
+			"Sub types:\n" + 
+			"  Y [in Y.java [in <default> [in <project root> [in P2]]]]\n",
+			hierarchy);
+	} finally {
+		deleteProjects(new String[] {"P1", "P2"});
+	}
+}
 
 /**
  * Ensures that the superclass can be retrieved for a source type's unqualified superclass.
