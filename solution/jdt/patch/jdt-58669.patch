diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java
index 040dc7f..d5309e8 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java
@@ -38,120 +38,73 @@ public class AbstractCompilerTest extends TestCase {
 
 	protected String complianceLevel;
 
-	/*
-	 * Returns the highest compliance level this VM instance can run.
+	/**
+	 * Build a test suite made of test suites for all possible running VM compliances .
+	 * 
+	 * @see #buildUniqueComplianceTestSuite(Class, String) for test suite children content.
+	 * 
+	 * @param evaluationTestClass The main test suite to build.
+	 * @return built test suite (see {@link TestSuite}
 	 */
-	public static String highestComplianceLevels() {
+	public static Test buildAllCompliancesTestSuite(Class evaluationTestClass) {
+		TestSuite suite = new TestSuite(evaluationTestClass.getName());
 		int complianceLevels = AbstractCompilerTest.getPossibleComplianceLevels();
-		if ((complianceLevels & AbstractCompilerTest.F_1_6) != 0) {
-			return COMPLIANCE_1_6;
-		}
-		if ((complianceLevels & AbstractCompilerTest.F_1_5) != 0) {
-			return COMPLIANCE_1_5;
+		if ((complianceLevels & AbstractCompilerTest.F_1_3) != 0) {
+			suite.addTest(buildUniqueComplianceTestSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_3));
 		}
 		if ((complianceLevels & AbstractCompilerTest.F_1_4) != 0) {
-			return COMPLIANCE_1_4;
+			suite.addTest(buildUniqueComplianceTestSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_4));
 		}
-		return COMPLIANCE_1_3;
-	}
-
-	/*
-	 * Returns the possible compliance levels this VM instance can run.
-	 */
-	public static int getPossibleComplianceLevels() {
-		if (possibleComplianceLevels == -1) {
-			String compliance = System.getProperty("compliance");
-			if (compliance != null) {
-				if (COMPLIANCE_1_3.equals(compliance)) {
-					possibleComplianceLevels = F_1_3;
-				} else if (COMPLIANCE_1_4.equals(compliance)) {
-					possibleComplianceLevels = F_1_4;
-				} else if (COMPLIANCE_1_5.equals(compliance)) {
-					possibleComplianceLevels = F_1_5;
-				} else if (COMPLIANCE_1_6.equals(compliance)) {
-					possibleComplianceLevels = F_1_6;
-				} else {
-					System.out.println("Invalid compliance specified (" + compliance + ")");
-					System.out.println("Use one of " + COMPLIANCE_1_3 + ", " + COMPLIANCE_1_4 + ", " + COMPLIANCE_1_5);
-					System.out.println("Defaulting to all possible compliances");
-				}
-			}
-			if (possibleComplianceLevels == -1) {
-				possibleComplianceLevels = F_1_3;
-				String specVersion = System.getProperty("java.specification.version");
-				boolean canRun1_4 = !"1.0".equals(specVersion) && !"1.1".equals(specVersion) && !"1.2".equals(specVersion) && !"1.3".equals(specVersion);
-				if (canRun1_4) {
-					possibleComplianceLevels |= F_1_4;
-				}
-				boolean canRun1_5 = canRun1_4 && !"1.4".equals(specVersion);
-				if (canRun1_5) {
-					possibleComplianceLevels |= F_1_5;
-				}
-				boolean canRun1_6 = "1.6".equals(specVersion);
-				if (canRun1_6) {
-					possibleComplianceLevels |= F_1_6;
-				}
-			}
+		if ((complianceLevels & AbstractCompilerTest.F_1_5) != 0) {
+			suite.addTest(buildUniqueComplianceTestSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_5));
 		}
-		return possibleComplianceLevels;
+		if ((complianceLevels & AbstractCompilerTest.F_1_6) != 0) {
+			suite.addTest(buildUniqueComplianceTestSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_6));
+		}
+		return suite;
 	}
 
 	/**
 	 * Build a test suite made of test suites for all possible running VM compliances .
 	 * 
-	 * @see #buildComplianceSetupTestSuite(List, Class, String) for test suite children content.
+	 * @see #buildComplianceTestSuite(List, Class, String) for test suite children content.
 	 * 
 	 * @param testSuiteClass The main test suite to build.
 	 * @param setupClass The compiler setup to class to use to bundle given tets suites tests.
 	 * @param testClasses The list of test suites to include in main test suite.
 	 * @return built test suite (see {@link TestSuite}
 	 */
-	public static Test buildAllCompliancesSetupSuite(Class testSuiteClass, Class setupClass, List testClasses) {
+	public static Test buildAllCompliancesTestSuite(Class testSuiteClass, Class setupClass, List testClasses) {
 		TestSuite suite = new TestSuite(testSuiteClass.getName());
 		int complianceLevels = AbstractCompilerTest.getPossibleComplianceLevels();
 		if ((complianceLevels & AbstractCompilerTest.F_1_3) != 0) {
-			suite.addTest(buildComplianceSetupTestSuite(testClasses, setupClass, COMPLIANCE_1_3));
+			suite.addTest(buildComplianceTestSuite(testClasses, setupClass, COMPLIANCE_1_3));
 		}
 		if ((complianceLevels & AbstractCompilerTest.F_1_4) != 0) {
-			suite.addTest(buildComplianceSetupTestSuite(testClasses, setupClass, COMPLIANCE_1_4));
+			suite.addTest(buildComplianceTestSuite(testClasses, setupClass, COMPLIANCE_1_4));
 		}
 		if ((complianceLevels & AbstractCompilerTest.F_1_5) != 0) {
-			suite.addTest(buildComplianceSetupTestSuite(testClasses, setupClass, COMPLIANCE_1_5));
+			suite.addTest(buildComplianceTestSuite(testClasses, setupClass, COMPLIANCE_1_5));
 		}
 		if ((complianceLevels & AbstractCompilerTest.F_1_6) != 0) {
-			suite.addTest(buildComplianceSetupTestSuite(testClasses, setupClass, COMPLIANCE_1_6));
+			suite.addTest(buildComplianceTestSuite(testClasses, setupClass, COMPLIANCE_1_6));
 		}
 		return suite;
 	}
 
 	/**
 	 * Build a test suite for a compliance and a list of test suites.
-	 * Returned test suite has only one child: {@link CompilerTestSetup} test suite.
-	 * Name of returned suite is the given compliance level.
-	 * 
-	 * @see #buildComplianceSetupTestSuite(List, Class, String) for child test suite content.
-	 * 
-	 * @param complianceLevel The compliance level used for this test suite.
-	 * @param testClasses The list of test suites to include in main test suite.
-	 * @return built test suite (see {@link TestSuite}
-	 */
-	public static Test buildComplianceCompilerTestSetupSuite(String complianceLevel, List testClasses) {
-		return buildComplianceSetupTestSuite(testClasses, CompilerTestSetup.class, complianceLevel);
-	}
-
-	/**
-	 * Build a test suite for a compliance and a list of test suites.
 	 * Returned test suite has only one child: {@link RegressionTestSetup} test suite.
 	 * Name of returned suite is the given compliance level.
 	 * 
-	 * @see #buildComplianceSetupTestSuite(List, Class, String) for child test suite content.
+	 * @see #buildComplianceTestSuite(List, Class, String) for child test suite content.
 	 * 
 	 * @param complianceLevel The compliance level used for this test suite.
 	 * @param testClasses The list of test suites to include in main test suite.
 	 * @return built test suite (see {@link TestSuite}
 	 */
-	public static Test buildComplianceRegressionTestSetupSuite(String complianceLevel, List testClasses) {
-		return buildComplianceSetupTestSuite(testClasses, RegressionTestSetup.class, complianceLevel);
+	public static Test buildComplianceTestSuite(String complianceLevel, List testClasses) {
+		return buildComplianceTestSuite(testClasses, RegressionTestSetup.class, complianceLevel);
 	}
 
 	/**
@@ -163,7 +116,7 @@ public class AbstractCompilerTest extends TestCase {
 	 * @param testClasses The list of test suites to include in main test suite.
 	 * @return built test suite (see {@link TestSuite}
 	 */
-	private static Test buildComplianceSetupTestSuite(List testClasses, Class setupClass, String complianceLevel) {
+	private static Test buildComplianceTestSuite(List testClasses, Class setupClass, String complianceLevel) {
 		TestSuite complianceSuite = new TestSuite(complianceLevel);
 		for (int i=0, m=testClasses.size(); i<m ; i++) {
 			Class testClass = (Class)testClasses.get(i);
@@ -194,27 +147,49 @@ public class AbstractCompilerTest extends TestCase {
 	}
 
 	/**
-	 * Build a test suite made of test suites for all possible running VM compliances .
-	 * 
-	 * @see #buildComplianceRegressionSetupSuite(Class, String) for test suite children content.
+	 * Build a regression test setup suite for a minimal compliance and a test suite to run.
+	 * Returned test suite has only one child: {@link RegressionTestSetup} test suite.
+	 * Name of returned suite is the name of given test suite class.
+	 * The test suite will be run iff the compliance is at least the specified one.
 	 * 
-	 * @param evaluationTestClass The main test suite to build.
+	 * @param minimalCompliance The unqie compliance level used for this test suite.
+	 * @param evaluationTestClass The test suite to run.
 	 * @return built test suite (see {@link TestSuite}
 	 */
-	public static Test buildAllCompliancesRegressionTestSetupSuite(Class evaluationTestClass) {
+	public static Test buildMinimalComplianceTestSuite(Class evaluationTestClass, int minimalCompliance) {
 		TestSuite suite = new TestSuite(evaluationTestClass.getName());
 		int complianceLevels = AbstractCompilerTest.getPossibleComplianceLevels();
-		if ((complianceLevels & AbstractCompilerTest.F_1_3) != 0) {
-			suite.addTest(buildComplianceRegressionSetupSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_3));
+		int level13 = complianceLevels & AbstractCompilerTest.F_1_3;
+		if (level13 != 0) {
+			if (level13 < minimalCompliance) {
+				System.err.println("Cannot run "+evaluationTestClass.getName()+" at compliance "+COMPLIANCE_1_3+"!");
+			} else {
+				suite.addTest(buildUniqueComplianceTestSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_3));
+			}
 		}
-		if ((complianceLevels & AbstractCompilerTest.F_1_4) != 0) {
-			suite.addTest(buildComplianceRegressionSetupSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_4));
+		int level14 = complianceLevels & AbstractCompilerTest.F_1_4;
+		if (level14 != 0) {
+			if (level14 < minimalCompliance) {
+				System.err.println("Cannot run "+evaluationTestClass.getName()+" at compliance "+COMPLIANCE_1_4+"!");
+			} else {
+				suite.addTest(buildUniqueComplianceTestSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_4));
+			}
 		}
-		if ((complianceLevels & AbstractCompilerTest.F_1_5) != 0) {
-			suite.addTest(buildComplianceRegressionSetupSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_5));
+		int level15 = complianceLevels & AbstractCompilerTest.F_1_5;
+		if (level15 != 0) {
+			if (level15 < minimalCompliance) {
+				System.err.println("Cannot run "+evaluationTestClass.getName()+" at compliance "+COMPLIANCE_1_5+"!");
+			} else {
+				suite.addTest(buildUniqueComplianceTestSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_5));
+			}
 		}
-		if ((complianceLevels & AbstractCompilerTest.F_1_6) != 0) {
-			suite.addTest(buildComplianceRegressionSetupSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_6));
+		int level16 = complianceLevels & AbstractCompilerTest.F_1_6;
+		if (level16 != 0) {
+			if (level16 < minimalCompliance) {
+				System.err.println("Cannot run "+evaluationTestClass.getName()+" at compliance "+COMPLIANCE_1_6+"!");
+			} else {
+				suite.addTest(buildUniqueComplianceTestSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_6));
+			}
 		}
 		return suite;
 	}
@@ -228,7 +203,7 @@ public class AbstractCompilerTest extends TestCase {
 	 * @param evaluationTestClass The test suite to run.
 	 * @return built test suite (see {@link TestSuite}
 	 */
-	public static Test buildComplianceRegressionSetupSuite(Class evaluationTestClass, String uniqueCompliance) {
+	public static Test buildUniqueComplianceTestSuite(Class evaluationTestClass, String uniqueCompliance) {
 		String highestLevel = highestComplianceLevels();
 		if (highestLevel.compareTo(uniqueCompliance) < 0) {
 			System.err.println("Cannot run "+evaluationTestClass.getName()+" at compliance "+highestLevel+"!");
@@ -244,52 +219,62 @@ public class AbstractCompilerTest extends TestCase {
 		return suite;
 	}
 
-	/**
-	 * Build a regression test setup suite for a minimal compliance and a test suite to run.
-	 * Returned test suite has only one child: {@link RegressionTestSetup} test suite.
-	 * Name of returned suite is the name of given test suite class.
-	 * The test suite will be run iff the compliance is at least the specified one.
-	 * 
-	 * @param minimalCompliance The unqie compliance level used for this test suite.
-	 * @param evaluationTestClass The test suite to run.
-	 * @return built test suite (see {@link TestSuite}
+	/*
+	 * Returns the highest compliance level this VM instance can run.
 	 */
-	public static Test buildComplianceRegressionTestSetupSuite(Class evaluationTestClass, int minimalCompliance) {
-		TestSuite suite = new TestSuite(evaluationTestClass.getName());
+	public static String highestComplianceLevels() {
 		int complianceLevels = AbstractCompilerTest.getPossibleComplianceLevels();
-		int level13 = complianceLevels & AbstractCompilerTest.F_1_3;
-		if (level13 != 0) {
-			if (level13 < minimalCompliance) {
-				System.err.println("Cannot run "+evaluationTestClass.getName()+" at compliance "+COMPLIANCE_1_3+"!");
-			} else {
-				suite.addTest(buildComplianceRegressionSetupSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_3));
-			}
+		if ((complianceLevels & AbstractCompilerTest.F_1_6) != 0) {
+			return COMPLIANCE_1_6;
 		}
-		int level14 = complianceLevels & AbstractCompilerTest.F_1_4;
-		if (level14 != 0) {
-			if (level14 < minimalCompliance) {
-				System.err.println("Cannot run "+evaluationTestClass.getName()+" at compliance "+COMPLIANCE_1_4+"!");
-			} else {
-				suite.addTest(buildComplianceRegressionSetupSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_4));
-			}
+		if ((complianceLevels & AbstractCompilerTest.F_1_5) != 0) {
+			return COMPLIANCE_1_5;
 		}
-		int level15 = complianceLevels & AbstractCompilerTest.F_1_5;
-		if (level15 != 0) {
-			if (level15 < minimalCompliance) {
-				System.err.println("Cannot run "+evaluationTestClass.getName()+" at compliance "+COMPLIANCE_1_5+"!");
-			} else {
-				suite.addTest(buildComplianceRegressionSetupSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_5));
-			}
+		if ((complianceLevels & AbstractCompilerTest.F_1_4) != 0) {
+			return COMPLIANCE_1_4;
 		}
-		int level16 = complianceLevels & AbstractCompilerTest.F_1_6;
-		if (level16 != 0) {
-			if (level16 < minimalCompliance) {
-				System.err.println("Cannot run "+evaluationTestClass.getName()+" at compliance "+COMPLIANCE_1_6+"!");
-			} else {
-				suite.addTest(buildComplianceRegressionSetupSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_6));
+		return COMPLIANCE_1_3;
+	}
+
+	/*
+	 * Returns the possible compliance levels this VM instance can run.
+	 */
+	public static int getPossibleComplianceLevels() {
+		if (possibleComplianceLevels == -1) {
+			String compliance = System.getProperty("compliance");
+			if (compliance != null) {
+				if (COMPLIANCE_1_3.equals(compliance)) {
+					possibleComplianceLevels = F_1_3;
+				} else if (COMPLIANCE_1_4.equals(compliance)) {
+					possibleComplianceLevels = F_1_4;
+				} else if (COMPLIANCE_1_5.equals(compliance)) {
+					possibleComplianceLevels = F_1_5;
+				} else if (COMPLIANCE_1_6.equals(compliance)) {
+					possibleComplianceLevels = F_1_6;
+				} else {
+					System.out.println("Invalid compliance specified (" + compliance + ")");
+					System.out.println("Use one of " + COMPLIANCE_1_3 + ", " + COMPLIANCE_1_4 + ", " + COMPLIANCE_1_5);
+					System.out.println("Defaulting to all possible compliances");
+				}
+			}
+			if (possibleComplianceLevels == -1) {
+				possibleComplianceLevels = F_1_3;
+				String specVersion = System.getProperty("java.specification.version");
+				boolean canRun1_4 = !"1.0".equals(specVersion) && !"1.1".equals(specVersion) && !"1.2".equals(specVersion) && !"1.3".equals(specVersion);
+				if (canRun1_4) {
+					possibleComplianceLevels |= F_1_4;
+				}
+				boolean canRun1_5 = canRun1_4 && !"1.4".equals(specVersion);
+				if (canRun1_5) {
+					possibleComplianceLevels |= F_1_5;
+				}
+				boolean canRun1_6 = "1.6".equals(specVersion);
+				if (canRun1_6) {
+					possibleComplianceLevels |= F_1_6;
+				}
 			}
 		}
-		return suite;
+		return possibleComplianceLevels;
 	}
 
 	public AbstractCompilerTest(String name) {
