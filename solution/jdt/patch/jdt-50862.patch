diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptUtil.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptUtil.java
index 0e99679..8738ec5 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptUtil.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptUtil.java
@@ -6,139 +6,62 @@
  * http://www.eclipse.org/legal/epl-v10.html
  *
  * Contributors:
- *    mkaufman@bea.com - initial API and implementation
+ *    jgarms@bea.com - initial API and implementation
  *    
  *******************************************************************************/
-
 package org.eclipse.jdt.apt.core.util;
 
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.util.HashSet;
-import java.util.Set;
+import java.util.Collection;
+import java.util.List;
 
-import org.eclipse.core.resources.IFile;
-import org.eclipse.jdt.apt.core.internal.env.ProcessorEnvImpl;
-import org.eclipse.jdt.core.IBuffer;
-import org.eclipse.jdt.core.ICompilationUnit;
-import org.eclipse.jdt.core.JavaCore;
-import org.eclipse.jdt.core.JavaModelException;
-import org.eclipse.jdt.core.ToolFactory;
-import org.eclipse.jdt.core.compiler.IScanner;
-import org.eclipse.jdt.core.compiler.ITerminalSymbols;
-import org.eclipse.jdt.core.compiler.InvalidInputException;
+import org.eclipse.core.resources.IProject;
+import org.eclipse.jdt.apt.core.internal.AptCompilationParticipant;
 
-public class AptUtil {
+import com.sun.mirror.apt.AnnotationProcessorFactory;
 
+public class AptUtil {
+	
+	// Private c-tor to prevent construction
+	private AptUtil() {}
+	
 	/**
-	 * scan the source code to see if there are any annotation tokens
+	 * Returns the matching annotation processor factory for a given
+	 * annotation in a given project.
+	 * 
+	 * @param fullyQualifiedAnnotation the annotation for which a factory
+	 * is desired. This must be fully qualfied -- e.g. "org.eclipse.annotation.Foo"
+	 * @param project the project in which the annotation was found
 	 */
-	public static boolean hasAnnotationInstance( IFile f ) {
+	public static AnnotationProcessorFactory getFactoryForAnnotation(
+			final String fullyQualifiedAnnotation,
+			final IProject project) {
 		
-		InputStreamReader reader = null;
-		InputStream input = null;
-		try {
-			AnnotationScanner scanner;
-			// If this is a single byte encoding, we can deal directly 
-			// with the bytes, which is *much* faster
-			if (SINGLE_BYTE_ENCODINGS.contains(f.getCharset())) {
-				input = ProcessorEnvImpl.getInputStream(f);
-				scanner = new InputStreamAnnotationScanner(input);
-			}
-			else {
-				reader = ProcessorEnvImpl.getFileReader( f );
-				scanner = new ReaderAnnotationScanner(reader);
-			}
-			return scanner.containsAnnotations();
-		}
-		catch( Exception ioe ) {
-			return false;
-		}
-		finally {
-			if (reader != null) { try {reader.close();} catch (IOException ioe) {} }
-			if (input != null) { try {input.close();} catch (IOException ioe) {} }
-		}
-	}
-	
-	
-	public static boolean hasAnnotationInstance( ICompilationUnit cu ) {
-		try {
-			IBuffer b = cu.getBuffer();
-			if ( b == null )
-				return false;
-			char[] source = b.getCharacters();
-			return hasAnnotationInstance( source );
-		}
-		catch( JavaModelException jme ) {
-			return false;
-		}
-	}
-
-	
-	public static boolean hasAnnotationInstance( char[] source ) {
-		try {		
-			if ( source == null )
-				return false;
-			IScanner scanner = ToolFactory.createScanner( 
-				false, false, false, JavaCore.VERSION_1_5 );
-			scanner.setSource( source );
-			int token = scanner.getNextToken();
-			while ( token != ITerminalSymbols.TokenNameEOF ) {
-				token = scanner.getNextToken();
-				if ( token == ITerminalSymbols.TokenNameAT )
-				{
-					//
-					// found an @ sign, see if next token is "interface"
-					// @interface is an annotation decl and not an annotation
-					// instance.  
-					//
-					token = scanner.getNextToken();
-					if ( token != ITerminalSymbols.TokenNameinterface )
-						return true;
+		// TODO: go to config for project to pull out factories
+		List<AnnotationProcessorFactory> allFactories = 
+			AptCompilationParticipant.getInstance().getAllFactories();
+		
+		for (AnnotationProcessorFactory factory : allFactories) {
+			Collection<String> supportedAnnos = factory.supportedAnnotationTypes();
+			for (String anno : supportedAnnos) {
+				if (anno.equals(fullyQualifiedAnnotation)) {
+					return factory;
+				}
+				else if ("*".equals(anno)) {
+						return factory;
+				}
+				else if (anno.endsWith("*")) {
+					final String prefix = anno.substring(0,
+							anno.length() - 2);
+					if (fullyQualifiedAnnotation.startsWith(prefix)) {
+						return factory;
+					}
 				}
 			}
-			return false;
-		}
-		catch( InvalidInputException iie )
-		{
-			// lex error, so report false
-			return false;
 		}
-		catch( Exception e )
-		{
-			// TODO:  deal with this exception
-			e.printStackTrace();
-			return false;
-		}
-	}
-	
-	private static final String[] SINGLE_BYTE_ENCODING_ARRAY = {
-		"ASCII",
-		"Cp1250",
-		"Cp1251",
-		"Cp1252",
-		"Cp1253",
-		"Cp1254",
-		"Cp1257",
-		"ISO8859_1",
-		"ISO8859_2",
-		"ISO8859_4",
-		"ISO8859_5",
-		"ISO8859_7",
-		"ISO8859_9",
-		"ISO8859_13",
-		"ISO8859_15",
-		"UTF8"
-	};
-	
-	private static final Set<String> SINGLE_BYTE_ENCODINGS = 
-		new HashSet<String>(SINGLE_BYTE_ENCODING_ARRAY.length);
 		
-	static {
-		for (String encoding : SINGLE_BYTE_ENCODING_ARRAY) {
-			SINGLE_BYTE_ENCODINGS.add(encoding);
-		}
+		return null;
 	}
 	
+	
+
 }
