diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java
index 366f3cb..b397948 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java
@@ -11,11 +11,6 @@
 
 package org.eclipse.jdt.apt.core.internal;
 
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.net.URLClassLoader;
@@ -24,8 +19,6 @@ import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
-import java.util.jar.JarEntry;
-import java.util.jar.JarFile;
 
 import org.eclipse.core.resources.IProject;
 import org.eclipse.core.runtime.CoreException;
@@ -47,11 +40,6 @@ public class AnnotationProcessorFactoryLoader {
 	private static AnnotationProcessorFactoryLoader _factoryLoader;
 	
 	private static boolean _verboseLoad = false;
-	
-    /** List of jar file entries that specify autoloadable service providers */
-    private static final String[] AUTOLOAD_SERVICES = {
-        "META-INF/services/com.sun.mirror.apt.AnnotationProcessorFactory"
-    };
 
     public static synchronized AnnotationProcessorFactoryLoader getLoader() {
     	if ( _factoryLoader == null )
@@ -61,8 +49,8 @@ public class AnnotationProcessorFactoryLoader {
     
     private AnnotationProcessorFactoryLoader() {
     	loadPluginFactoryMap();
-    	List<FactoryContainer> containers = getPluginFactoryContainers();
-    	setWorkspaceAnnotationProcessorFactories( containers );
+    	List<FactoryContainer> containers = getPluginFactoryContainers();    	
+    	setWorkspaceAnnotationProcessorFactories( containers );    	
     }
     
     public List<AnnotationProcessorFactory> getFactoriesForProject( IProject p ) {
@@ -136,10 +124,16 @@ public class AnnotationProcessorFactoryLoader {
 			Class c = cl.loadClass( factoryName );
 			f = (AnnotationProcessorFactory)c.newInstance();
 		}
-		catch( Exception e )
+		catch(Exception e )
 		{
+			// TODO:  log this error
 			e.printStackTrace();
 		}
+		catch( NoClassDefFoundError ncdfe )
+		{
+			// TODO:  log this error
+			ncdfe.printStackTrace();
+		}
 		return f;
 	}
 	
@@ -167,8 +161,8 @@ public class AnnotationProcessorFactoryLoader {
 		ClassLoader cl = null;
 		if ( urlList.size() > 0 )
 		{
-			URL[] urls = (URL[])urlList.toArray();
-			cl = new URLClassLoader( urls );
+			URL[] urls = (URL[])urlList.toArray( new URL[ urlList.size() ]);
+			cl = new URLClassLoader( urls, this.getClass().getClassLoader() );
 		}
 		return cl;
 	}
@@ -239,62 +233,4 @@ public class AnnotationProcessorFactoryLoader {
 		}
 		return factories;
 	}
-  
-    /**
-     * Given a jar file, get the names of any AnnotationProcessorFactory
-     * implementations it offers.  The information is based on the Sun
-     * <a href="http://java.sun.com/j2se/1.5.0/docs/guide/jar/jar.html#Service%20Provider">
-     * Jar Service Provider spec</a>: the jar file contains a META-INF/services
-     * directory; that directory contains text files named according to the desired
-     * interfaces; and each file contains the names of the classes implementing
-     * the specified service.  The files may also contain whitespace (which is to
-     * be ignored).  The '#' character indicates the beginning of a line comment,
-     * also to be ignored.  Implied but not stated in the spec is that this routine
-     * also ignores anything after the first nonwhitespace token on a line.
-     * @param jar the jar file.
-     * @return a list, possibly empty, of fully qualified classnames to be instantiated.
-     */
-    private List<String> _getServiceClassnamesFromJar(File jar)
-    {
-        List<String> classNames = new ArrayList<String>();
-        JarFile jarFile;
-        try {
-            jarFile = new JarFile(jar);
-
-            for (String providerName : AUTOLOAD_SERVICES) {
-                JarEntry provider = jarFile.getJarEntry(providerName);
-                if (provider == null) {
-                    continue;
-                }
-                // Extract classnames from this text file.
-                InputStream is = jarFile.getInputStream(provider);
-                BufferedReader rd;
-                rd = new BufferedReader(new InputStreamReader(is, "UTF-8"));
-                for (String line = rd.readLine(); line != null; line = rd.readLine()) {
-                    // hack off any comments
-                    int iComment = line.indexOf('#');
-                    if (iComment >= 0) {
-                        line = line.substring(0, iComment);
-                    }
-                    // add the first non-whitespace token to the list
-                    final String[] tokens = line.split("\\s", 2);
-                    if (tokens[0].length() > 0) {
-                        if (_verboseLoad) {
-                            System.err.println("Found provider classname: " + tokens[0]);
-                        }
-                        classNames.add(tokens[0]);
-                    }
-                }
-                rd.close();
-            }
-            jarFile.close();
-        }
-        catch (IOException e) {
-            if (_verboseLoad) {
-                System.err.println("\tUnable to extract provider names from \"" + jar + "\"; skipping because of: " + e);
-            }
-            return classNames;
-        }
-        return classNames;
-    }    
 }
