diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java
index 5285e18..23b8974 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java
@@ -121,12 +121,25 @@ public void complainOnDeferredNullChecks(BlockScope scope, FlowInfo flowInfo) {
 			Expression expression = this.nullReferences[i];
 			// final local variable
 			switch (this.nullCheckTypes[i]) {
+				case CAN_ONLY_NON_NULL :
+					if (flowInfo.isDefinitelyNonNull(local)) {
+						this.nullReferences[i] = null;
+						scope.problemReporter().localVariableCannotBeNull(local, expression);
+						continue;
+					}
+					break;
 				case CAN_ONLY_NULL_NON_NULL :
 					if (flowInfo.isDefinitelyNonNull(local)) {
 						this.nullReferences[i] = null;
 						scope.problemReporter().localVariableCannotBeNull(local, expression);
 						continue;
 					}
+					if (flowInfo.isDefinitelyNull(local)) {
+						this.nullReferences[i] = null;
+						scope.problemReporter().localVariableCanOnlyBeNull(local, expression);
+						continue;
+					}
+					break;
 				case CAN_ONLY_NULL :
 					if (flowInfo.isDefinitelyNull(local)) {
 						this.nullReferences[i] = null;
@@ -311,11 +324,8 @@ public void recordUsingNullReference(Scope scope, LocalVariableBinding local,
 	}
 	switch (checkType) {
 		case CAN_ONLY_NULL_NON_NULL :
-		case CAN_ONLY_NULL:
 			if (flowInfo.isDefinitelyNonNull(local)) {
-				if (checkType == CAN_ONLY_NULL_NON_NULL) {
-					scope.problemReporter().localVariableCannotBeNull(local, reference);
-				}
+				scope.problemReporter().localVariableCannotBeNull(local, reference);
 				return;
 			}
 			if (flowInfo.isDefinitelyNull(local)) {
@@ -325,6 +335,21 @@ public void recordUsingNullReference(Scope scope, LocalVariableBinding local,
 			if (flowInfo.isPotentiallyUnknown(local)) {
 				return;
 			}
+			if (flowInfo.isPotentiallyNonNull(local)) {
+			  recordNullReference(local, reference,CAN_ONLY_NON_NULL);
+			} else {
+			  recordNullReference(local, reference, checkType);
+			}
+			return;
+		case CAN_ONLY_NULL:
+			if (flowInfo.isPotentiallyNonNull(local)
+					|| flowInfo.isPotentiallyUnknown(local)) {
+				return;
+			}
+			if (flowInfo.isDefinitelyNull(local)) {
+				scope.problemReporter().localVariableCanOnlyBeNull(local, reference);
+				return;
+			}
 			recordNullReference(local, reference, checkType);
 			return;
 		case MAY_NULL :
