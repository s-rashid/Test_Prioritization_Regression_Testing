diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java
index 5ba7ab3..2a7ff99 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java
@@ -16,11 +16,10 @@ import org.eclipse.jdt.internal.compiler.*;
 import org.eclipse.jdt.internal.compiler.impl.*;
 import org.eclipse.jdt.internal.compiler.ast.*;
 import org.eclipse.jdt.internal.compiler.classfmt.*;
-import org.eclipse.jdt.internal.compiler.env.IConstants;
 import org.eclipse.jdt.internal.compiler.flow.*;
 import org.eclipse.jdt.internal.compiler.lookup.*;
 
-public class CodeStream implements OperatorIds, ClassFileConstants, Opcodes, BaseTypes, TypeConstants, TypeIds {
+public class CodeStream implements OperatorIds, Opcodes, BaseTypes, TypeConstants, TypeIds {
 
 	public static final boolean DEBUG = false;
 	
@@ -1816,9 +1815,9 @@ public void generateSyntheticEnclosingInstanceValues(
 		// deny access to enclosing instance argument for allocation and super constructor call (if 1.4)
 		// always consider it if complying to 1.5
 		boolean denyEnclosingArgInConstructorCall;
-		if (compliance <= JDK1_3) {
+		if (compliance <= ClassFileConstants.JDK1_3) {
 			denyEnclosingArgInConstructorCall = invocationSite instanceof AllocationExpression;
-		} else if (compliance == JDK1_4){
+		} else if (compliance == ClassFileConstants.JDK1_4){
 			denyEnclosingArgInConstructorCall = invocationSite instanceof AllocationExpression
 				|| invocationSite instanceof ExplicitConstructorCall && ((ExplicitConstructorCall)invocationSite).isSuperAccess();
 		} else {
@@ -2020,13 +2019,13 @@ public void generateSyntheticBodyForSwitchTable(SyntheticMethodBinding methodBin
 	signature = CharOperation.concat(signature, arrayBinding.constantPoolName());
 	this.invoke(OPC_invokestatic, 0, 1, enumBinding.constantPoolName(), TypeConstants.VALUES, signature);
 	this.arraylength();
-	this.newarray(INT_ARRAY);
+	this.newarray(ClassFileConstants.INT_ARRAY);
 	this.astore_0();
 	final FieldBinding[] fields = enumBinding.fields();
 	if (fields != null) {
 		for (int i = 0, max = fields.length; i < max; i++) {
 			FieldBinding fieldBinding = fields[i];
-			if ((fieldBinding.getAccessFlags() & IConstants.AccEnum) != 0) {
+			if ((fieldBinding.getAccessFlags() & ClassFileConstants.AccEnum) != 0) {
 				final Label endLabel = new Label(this);
 				final ExceptionLabel anyExceptionHandler = new ExceptionLabel(this, BaseTypes.LongBinding /* represents NoSuchFieldError*/);
 				this.aload_0();
@@ -3491,7 +3490,7 @@ final public void invokestatic(MethodBinding methodBinding) {
  */
 public void invokeStringConcatenationAppendForType(int typeID) {
 	if (DEBUG) {
-		if (this.targetLevel >= JDK1_5) {
+		if (this.targetLevel >= ClassFileConstants.JDK1_5) {
 			System.out.println(position + "\t\tinvokevirtual: java.lang.StringBuilder.append(...)"); //$NON-NLS-1$
 		} else {
 			System.out.println(position + "\t\tinvokevirtual: java.lang.StringBuffer.append(...)"); //$NON-NLS-1$
@@ -3506,7 +3505,7 @@ public void invokeStringConcatenationAppendForType(int typeID) {
 		case T_int :
 		case T_byte :
 		case T_short :
-			if (this.targetLevel >= JDK1_5) {
+			if (this.targetLevel >= ClassFileConstants.JDK1_5) {
 				declarinClass = ConstantPool.JavaLangStringBuilderConstantPoolName;
 				signature = ConstantPool.StringBuilderAppendIntSignature;
 			} else {
@@ -3515,7 +3514,7 @@ public void invokeStringConcatenationAppendForType(int typeID) {
 			}
 			break;
 		case T_long :
-			if (this.targetLevel >= JDK1_5) {
+			if (this.targetLevel >= ClassFileConstants.JDK1_5) {
 				declarinClass = ConstantPool.JavaLangStringBuilderConstantPoolName;
 				signature = ConstantPool.StringBuilderAppendLongSignature;
 			} else {
@@ -3525,7 +3524,7 @@ public void invokeStringConcatenationAppendForType(int typeID) {
 			argCount = 2;
 			break;
 		case T_float :
-			if (this.targetLevel >= JDK1_5) {
+			if (this.targetLevel >= ClassFileConstants.JDK1_5) {
 				declarinClass = ConstantPool.JavaLangStringBuilderConstantPoolName;
 				signature = ConstantPool.StringBuilderAppendFloatSignature;
 			} else {
@@ -3534,7 +3533,7 @@ public void invokeStringConcatenationAppendForType(int typeID) {
 			}
 			break;
 		case T_double :
-			if (this.targetLevel >= JDK1_5) {
+			if (this.targetLevel >= ClassFileConstants.JDK1_5) {
 				declarinClass = ConstantPool.JavaLangStringBuilderConstantPoolName;
 				signature = ConstantPool.StringBuilderAppendDoubleSignature;
 			} else {
@@ -3544,7 +3543,7 @@ public void invokeStringConcatenationAppendForType(int typeID) {
 			argCount = 2;
 			break;
 		case T_char :
-			if (this.targetLevel >= JDK1_5) {
+			if (this.targetLevel >= ClassFileConstants.JDK1_5) {
 				declarinClass = ConstantPool.JavaLangStringBuilderConstantPoolName;
 				signature = ConstantPool.StringBuilderAppendCharSignature;
 			} else {
@@ -3553,7 +3552,7 @@ public void invokeStringConcatenationAppendForType(int typeID) {
 			}
 			break;
 		case T_boolean :
-			if (this.targetLevel >= JDK1_5) {
+			if (this.targetLevel >= ClassFileConstants.JDK1_5) {
 				declarinClass = ConstantPool.JavaLangStringBuilderConstantPoolName;
 				signature = ConstantPool.StringBuilderAppendBooleanSignature;
 			} else {
@@ -3564,7 +3563,7 @@ public void invokeStringConcatenationAppendForType(int typeID) {
 		case T_undefined :
 		case T_JavaLangObject :
 		case T_null :
-			if (this.targetLevel >= JDK1_5) {
+			if (this.targetLevel >= ClassFileConstants.JDK1_5) {
 				declarinClass = ConstantPool.JavaLangStringBuilderConstantPoolName;
 				signature = ConstantPool.StringBuilderAppendObjectSignature;
 			} else {
@@ -3573,7 +3572,7 @@ public void invokeStringConcatenationAppendForType(int typeID) {
 			}
 			break;
 		case T_JavaLangString :
-			if (this.targetLevel >= JDK1_5) {
+			if (this.targetLevel >= ClassFileConstants.JDK1_5) {
 				declarinClass = ConstantPool.JavaLangStringBuilderConstantPoolName;
 				signature = ConstantPool.StringBuilderAppendStringSignature;
 			} else {
@@ -3693,14 +3692,14 @@ public void invokeJavaUtilIteratorNext() {
 public void invokeStringConcatenationDefaultConstructor() {
 	// invokespecial: java.lang.StringBuffer.<init>()V
 	if (DEBUG) {
-		if (this.targetLevel >= JDK1_5) {
+		if (this.targetLevel >= ClassFileConstants.JDK1_5) {
 			System.out.println(position + "\t\tinvokespecial: java.lang.StringBuilder.<init>()V"); //$NON-NLS-1$
 		} else {
 			System.out.println(position + "\t\tinvokespecial: java.lang.StringBuffer.<init>()V"); //$NON-NLS-1$
 		}
 	}
 	char[] declaringClass = ConstantPool.JavaLangStringBufferConstantPoolName;
-	if (this.targetLevel >= JDK1_5) {
+	if (this.targetLevel >= ClassFileConstants.JDK1_5) {
 		declaringClass = ConstantPool.JavaLangStringBuilderConstantPoolName;
 	}
 	this.invoke(
@@ -3713,14 +3712,14 @@ public void invokeStringConcatenationDefaultConstructor() {
 }
 public void invokeStringConcatenationStringConstructor() {
 	if (DEBUG) {
-		if (this.targetLevel >= JDK1_5) {
+		if (this.targetLevel >= ClassFileConstants.JDK1_5) {
 			System.out.println(position + "\t\tjava.lang.StringBuilder.<init>(Ljava.lang.String;)V"); //$NON-NLS-1$
 		} else {
 			System.out.println(position + "\t\tjava.lang.StringBuffer.<init>(Ljava.lang.String;)V"); //$NON-NLS-1$
 		}
 	}
 	char[] declaringClass = ConstantPool.JavaLangStringBufferConstantPoolName;
-	if (this.targetLevel >= JDK1_5) {
+	if (this.targetLevel >= ClassFileConstants.JDK1_5) {
 		declaringClass = ConstantPool.JavaLangStringBuilderConstantPoolName;
 	}
 	this.invoke(
@@ -3734,14 +3733,14 @@ public void invokeStringConcatenationStringConstructor() {
 
 public void invokeStringConcatenationToString() {
 	if (DEBUG) {
-		if (this.targetLevel >= JDK1_5) {
+		if (this.targetLevel >= ClassFileConstants.JDK1_5) {
 			System.out.println(position + "\t\tinvokevirtual: StringBuilder.toString()Ljava.lang.String;"); //$NON-NLS-1$
 		} else {
 			System.out.println(position + "\t\tinvokevirtual: StringBuffer.toString()Ljava.lang.String;"); //$NON-NLS-1$
 		}
 	}
 	char[] declaringClass = ConstantPool.JavaLangStringBufferConstantPoolName;
-	if (this.targetLevel >= JDK1_5) {
+	if (this.targetLevel >= ClassFileConstants.JDK1_5) {
 		declaringClass = ConstantPool.JavaLangStringBuilderConstantPoolName;
 	}
 	this.invoke(
@@ -5131,28 +5130,28 @@ public void newArray(ArrayBinding arrayBinding) {
 	TypeBinding component = arrayBinding.elementsType();
 	switch (component.id) {
 		case T_int :
-			this.newarray(INT_ARRAY);
+			this.newarray(ClassFileConstants.INT_ARRAY);
 			break;
 		case T_byte :
-			this.newarray(BYTE_ARRAY);
+			this.newarray(ClassFileConstants.BYTE_ARRAY);
 			break;
 		case T_boolean :
-			this.newarray(BOOLEAN_ARRAY);
+			this.newarray(ClassFileConstants.BOOLEAN_ARRAY);
 			break;
 		case T_short :
-			this.newarray(SHORT_ARRAY);
+			this.newarray(ClassFileConstants.SHORT_ARRAY);
 			break;
 		case T_char :
-			this.newarray(CHAR_ARRAY);
+			this.newarray(ClassFileConstants.CHAR_ARRAY);
 			break;
 		case T_long :
-			this.newarray(LONG_ARRAY);
+			this.newarray(ClassFileConstants.LONG_ARRAY);
 			break;
 		case T_float :
-			this.newarray(FLOAT_ARRAY);
+			this.newarray(ClassFileConstants.FLOAT_ARRAY);
 			break;
 		case T_double :
-			this.newarray(DOUBLE_ARRAY);
+			this.newarray(ClassFileConstants.DOUBLE_ARRAY);
 			break;
 		default :
 			this.anewarray(component);
@@ -5219,7 +5218,7 @@ public void newStringContatenation() {
 	// new: java.lang.StringBuffer
 	// new: java.lang.StringBuilder
 	if (DEBUG) {
-		if (this.targetLevel >= JDK1_5) {
+		if (this.targetLevel >= ClassFileConstants.JDK1_5) {
 			System.out.println(position + "\t\tnew: java.lang.StringBuilder"); //$NON-NLS-1$
 		} else {
 			System.out.println(position + "\t\tnew: java.lang.StringBuffer"); //$NON-NLS-1$
@@ -5235,7 +5234,7 @@ public void newStringContatenation() {
 	}
 	position++;
 	bCodeStream[classFileOffset++] = OPC_new;
-	if (this.targetLevel >= JDK1_5) {
+	if (this.targetLevel >= ClassFileConstants.JDK1_5) {
 		writeUnsignedShort(constantPool.literalIndexForType(ConstantPool.JavaLangStringBuilderConstantPoolName));
 	} else {
 		writeUnsignedShort(constantPool.literalIndexForType(ConstantPool.JavaLangStringBufferConstantPoolName));
