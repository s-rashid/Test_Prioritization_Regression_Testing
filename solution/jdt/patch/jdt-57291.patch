diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java
index 3e28798..cb777ac 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java
@@ -36,7 +36,7 @@ public class InternalNamingConventions {
 				null/*taskPriorities*/,
 				true/*taskCaseSensitive*/);
 	}
-	public static void suggestArgumentNames(IJavaProject javaProject, char[] packageName, char[] qualifiedTypeName, int dim, char[][] excludedNames, INamingRequestor requestor) {
+	public static void suggestArgumentNames(IJavaProject javaProject, char[] packageName, char[] qualifiedTypeName, int dim, char[] internalPrefix, char[][] excludedNames, INamingRequestor requestor) {
 		Map options = javaProject.getOptions(true);
 		CompilerOptions compilerOptions = new CompilerOptions(options);
 		AssistOptions assistOptions = new AssistOptions(options);
@@ -45,13 +45,14 @@ public class InternalNamingConventions {
 			packageName,
 			qualifiedTypeName,
 			dim,
+			internalPrefix,
 			assistOptions.argumentPrefixes,
 			assistOptions.argumentSuffixes,
 			excludedNames,
 			getNameScanner(compilerOptions),
 			requestor);
 	}
-	public static void suggestFieldNames(IJavaProject javaProject, char[] packageName, char[] qualifiedTypeName, int dim, int modifiers, char[][] excludedNames, INamingRequestor requestor) {
+	public static void suggestFieldNames(IJavaProject javaProject, char[] packageName, char[] qualifiedTypeName, int dim, int modifiers, char[] internalPrefix, char[][] excludedNames, INamingRequestor requestor) {
 		boolean isStatic = Flags.isStatic(modifiers);
 		
 		Map options = javaProject.getOptions(true);
@@ -62,13 +63,14 @@ public class InternalNamingConventions {
 			packageName,
 			qualifiedTypeName,
 			dim,
+			internalPrefix,
 			isStatic ? assistOptions.staticFieldPrefixes : assistOptions.fieldPrefixes,
 			isStatic ? assistOptions.staticFieldSuffixes : assistOptions.fieldSuffixes,
 			excludedNames,
 			getNameScanner(compilerOptions),
 			requestor);
 	}
-	public static void suggestLocalVariableNames(IJavaProject javaProject, char[] packageName, char[] qualifiedTypeName, int dim, char[][] excludedNames, INamingRequestor requestor) {
+	public static void suggestLocalVariableNames(IJavaProject javaProject, char[] packageName, char[] qualifiedTypeName, int dim, char[] internalPrefix, char[][] excludedNames, INamingRequestor requestor) {
 		Map options = javaProject.getOptions(true);
 		CompilerOptions compilerOptions = new CompilerOptions(options);
 		AssistOptions assistOptions = new AssistOptions(options);
@@ -77,6 +79,7 @@ public class InternalNamingConventions {
 			packageName,
 			qualifiedTypeName,
 			dim,
+			internalPrefix,
 			assistOptions.localPrefixes,
 			assistOptions.localSuffixes,
 			excludedNames,
@@ -88,6 +91,7 @@ public class InternalNamingConventions {
 		char[] packageName,
 		char[] qualifiedTypeName,
 		int dim,
+		char[] internalPrefix,
 		char[][] prefixes,
 		char[][] suffixes,
 		char[][] excludedNames,
@@ -97,6 +101,12 @@ public class InternalNamingConventions {
 		if(qualifiedTypeName == null || qualifiedTypeName.length == 0)
 			return;
 		
+		if(internalPrefix == null) {
+			internalPrefix = CharOperation.NO_CHAR;
+		} else {
+			internalPrefix = removePrefix(internalPrefix, prefixes);
+		}
+		
 		char[] typeName = CharOperation.lastSegment(qualifiedTypeName, '.');
 	
 		if(prefixes == null || prefixes.length == 0) {
@@ -146,7 +156,7 @@ public class InternalNamingConventions {
 	
 		boolean acceptDefaultName = true;
 		
-		for (int i = 0; i < tempNames.length; i++) {
+		next : for (int i = 0; i < tempNames.length; i++) {
 			char[] tempName = tempNames[i];
 			if(dim > 0) {
 				int length = tempName.length;
@@ -167,50 +177,57 @@ public class InternalNamingConventions {
 				}
 			}
 		
-			for (int j = 0; j < prefixes.length; j++) {
-				if(prefixes[j].length > 0
-					&& Character.isLetterOrDigit(prefixes[j][prefixes[j].length - 1])) {
-					tempName[0] = Character.toUpperCase(tempName[0]);
-				} else {
-					tempName[0] = Character.toLowerCase(tempName[0]);
-				}
-				char[] prefixName = CharOperation.concat(prefixes[j], tempName);
-				for (int k = 0; k < suffixes.length; k++) {
-					char[] suffixName = CharOperation.concat(prefixName, suffixes[k]);
-					suffixName =
-						excludeNames(
-							suffixName,
-							prefixName,
-							suffixes[k],
-							excludedNames);
-					if(JavaConventions.validateFieldName(new String(suffixName)).isOK()) {
-						acceptName(suffixName, prefixes[j], suffixes[k],  j == 0, k == 0, requestor);
-						acceptDefaultName = false;
-					} else {
-						suffixName = CharOperation.concat(
-							prefixName,
-							String.valueOf(1).toCharArray(),
-							suffixes[k]
-						);
-						suffixName =
-							excludeNames(
-								suffixName,
-								prefixName,
-								suffixes[k],
-								excludedNames);
-						if(JavaConventions.validateFieldName(new String(suffixName)).isOK()) {
-							acceptName(suffixName, prefixes[j], suffixes[k], j == 0, k == 0, requestor);
-							acceptDefaultName = false;
+			char[] unprefixedName = tempName;
+			for (int j = 0; j <= internalPrefix.length; j++) {
+				if(j == internalPrefix.length || CharOperation.prefixEquals(CharOperation.subarray(internalPrefix, j, -1), unprefixedName, false)) {
+					tempName = CharOperation.concat(CharOperation.subarray(internalPrefix, 0, j), unprefixedName);
+					if(j != 0) tempName[j] = Character.toUpperCase(tempName[j]);
+					for (int k = 0; k < prefixes.length; k++) {
+						if(prefixes[k].length > 0
+							&& Character.isLetterOrDigit(prefixes[k][prefixes[k].length - 1])) {
+							tempName[0] = Character.toUpperCase(tempName[0]);
+						} else {
+							tempName[0] = Character.toLowerCase(tempName[0]);
+						}
+						char[] prefixName = CharOperation.concat(prefixes[k], tempName);
+						for (int l = 0; l < suffixes.length; l++) {
+							char[] suffixName = CharOperation.concat(prefixName, suffixes[l]);
+							suffixName =
+								excludeNames(
+									suffixName,
+									prefixName,
+									suffixes[l],
+									excludedNames);
+							if(JavaConventions.validateFieldName(new String(suffixName)).isOK()) {
+								acceptName(suffixName, prefixes[k], suffixes[l],  k == 0, l == 0, internalPrefix.length - j, requestor);
+								acceptDefaultName = false;
+							} else {
+								suffixName = CharOperation.concat(
+									prefixName,
+									String.valueOf(1).toCharArray(),
+									suffixes[l]
+								);
+								suffixName =
+									excludeNames(
+										suffixName,
+										prefixName,
+										suffixes[l],
+										excludedNames);
+								if(JavaConventions.validateFieldName(new String(suffixName)).isOK()) {
+									acceptName(suffixName, prefixes[k], suffixes[l], k == 0, l == 0, internalPrefix.length - j, requestor);
+									acceptDefaultName = false;
+								}
+							}
 						}
 					}
+					continue next;
 				}
-			
 			}
 		}
 		// if no names were found
 		if(acceptDefaultName) {
 			char[] name = excludeNames(DEFAULT_NAME, DEFAULT_NAME, CharOperation.NO_CHAR, excludedNames);
-			requestor.acceptNameWithoutPrefixAndSuffix(name);
+			requestor.acceptNameWithoutPrefixAndSuffix(name, 0);
 		}
 	}
 	
@@ -220,15 +237,16 @@ public class InternalNamingConventions {
 		char[] suffix,
 		boolean isFirstPrefix,
 		boolean isFirstSuffix,
+		int reusedCharacters,
 		INamingRequestor requestor) {
 		if(prefix.length > 0 && suffix.length > 0) {
-			requestor.acceptNameWithPrefixAndSuffix(name, isFirstPrefix, isFirstSuffix);
+			requestor.acceptNameWithPrefixAndSuffix(name, isFirstPrefix, isFirstSuffix, reusedCharacters);
 		} else if(prefix.length > 0){
-			requestor.acceptNameWithPrefix(name, isFirstPrefix);
+			requestor.acceptNameWithPrefix(name, isFirstPrefix, reusedCharacters);
 		} else if(suffix.length > 0){
-			requestor.acceptNameWithSuffix(name, isFirstSuffix);
+			requestor.acceptNameWithSuffix(name, isFirstSuffix, reusedCharacters);
 		} else {
-			requestor.acceptNameWithoutPrefixAndSuffix(name);
+			requestor.acceptNameWithoutPrefixAndSuffix(name, reusedCharacters);
 		}
 	}
 	
@@ -298,4 +316,50 @@ public class InternalNamingConventions {
 		}
 		return suffixName;
 	}
+	
+	private static char[] removePrefix(char[] name, char[][] prefixes) {
+		// remove longer prefix
+		char[] withoutPrefixName = name;
+		if (prefixes != null) {
+			int bestLength = 0;
+			for (int i= 0; i < prefixes.length; i++) {
+				char[] prefix = prefixes[i];
+				int max = prefix.length < name.length ? prefix.length : name.length;
+				int currLen = 0;
+				for (; currLen < max; currLen++) {
+					if(Character.toLowerCase(prefix[currLen]) != Character.toLowerCase(name[currLen])) {
+						if (currLen > bestLength) {
+							bestLength = currLen;
+						}
+						break;
+					}
+				}
+				if(currLen == max && currLen > bestLength) {
+					bestLength = max;
+				}
+			}
+			if(bestLength > 0) {
+				if(bestLength == name.length) {
+					withoutPrefixName = CharOperation.NO_CHAR;
+				} else {
+					withoutPrefixName = CharOperation.subarray(name, bestLength, name.length);
+				}
+			}
+		}
+		
+		return withoutPrefixName;
+	}
+	
+	public static final boolean prefixEquals(char[] prefix, char[] name) {
+
+		int max = prefix.length;
+		if (name.length < max)
+			return false;
+		for (int i = max;
+			--i >= 0;
+			) // assumes the prefix is not larger than the name
+				if (prefix[i] != name[i])
+					return false;
+			return true;
+	}
 }
