diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/compiler/ReconcileContext.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/compiler/ReconcileContext.java
index edf4b7b..237fc26 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/compiler/ReconcileContext.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/compiler/ReconcileContext.java
@@ -155,15 +155,16 @@ public ICompilationUnit getWorkingCopy() {
 
 /**
  * Resets the AST carried by this context.
- * A compilation participant that modifies another entity that would result in different bindings 
- * for the AST is expected to reset the AST on this context, so that other participants
+ * A compilation participant that modifies the buffer of the working copy,
+ * or that modifies another entity that would result in different bindings for the AST
+ * is expected to reset the AST on this context, so that other participants
  * don't get a stale AST.
  * <p>
- * Note that participants are not expected to modify the buffer of the working copy
- * being reconciled during the reconcile process.
- * </p><p>
- * Note also that resetting the AST will not restart the reconcile process. Only further 
- * participants will see the new AST.
+ * Note that resetting the AST will not restart the reconcile process. Only further 
+ * participants will see the new AST. Thus participants running before the one that
+ * resets the AST will have a stale view of the AST and its problems. See 
+ * {@link CompilationParticipant#configure(java.util.List)} to order the
+ * participants.
  * </p>
  */
 public void resetAST() {
