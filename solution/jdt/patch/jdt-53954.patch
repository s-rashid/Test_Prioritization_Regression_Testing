diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Member.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Member.java
index a290626..cb2c6cd 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Member.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Member.java
@@ -15,6 +15,9 @@ import java.util.HashMap;
 
 import org.eclipse.jdt.core.*;
 import org.eclipse.jdt.core.compiler.CharOperation;
+import org.eclipse.jdt.core.compiler.IScanner;
+import org.eclipse.jdt.core.compiler.ITerminalSymbols;
+import org.eclipse.jdt.core.compiler.InvalidInputException;
 import org.eclipse.jdt.internal.compiler.impl.Constant;
 import org.eclipse.jdt.internal.compiler.lookup.TypeIds;
 import org.eclipse.jdt.internal.core.util.MementoTokenizer;
@@ -247,6 +250,44 @@ public Member getOuterMostLocalContext() {
 	} 
 	return lastLocalContext;
 }
+public ISourceRange getJavadocRange() throws JavaModelException {
+	ISourceRange range= this.getSourceRange();
+	if (range == null) return null;
+	IBuffer buf= this.isBinary() ? this.getClassFile().getBuffer() : this.getCompilationUnit().getBuffer();
+	final int start= range.getOffset();
+	final int length= range.getLength();
+	if (length > 0 && buf.getChar(start) == '/') {
+		IScanner scanner= ToolFactory.createScanner(true, false, false, false);
+		scanner.setSource(buf.getText(start, length).toCharArray());
+		try {
+			int docOffset= -1;
+			int docEnd= -1;
+			
+			int terminal= scanner.getNextToken();
+			loop: while (true) {
+				switch(terminal) {
+					case ITerminalSymbols.TokenNameCOMMENT_JAVADOC :
+						docOffset= scanner.getCurrentTokenStartPosition();
+						docEnd= scanner.getCurrentTokenEndPosition() + 1;
+						terminal= scanner.getNextToken();
+						break;
+					case ITerminalSymbols.TokenNameCOMMENT_LINE :
+					case ITerminalSymbols.TokenNameCOMMENT_BLOCK :
+						terminal= scanner.getNextToken();
+						continue loop;
+					default :
+						break loop;
+				}
+			}
+			if (docOffset != -1) {
+				return new SourceRange(docOffset + start, docEnd - docOffset + 1);
+			}
+		} catch (InvalidInputException ex) {
+			// try if there is inherited Javadoc
+		}
+	}
+	return null;
+}
 /**
  * @see IMember
  */
