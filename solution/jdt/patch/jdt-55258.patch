diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/compiler/CompilationParticipant.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/compiler/CompilationParticipant.java
index ba5e0fd..53e4b72 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/compiler/CompilationParticipant.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/compiler/CompilationParticipant.java
@@ -37,9 +37,8 @@ public static int READY_FOR_BUILD = 1;
 public static int NEEDS_FULL_BUILD = 2;
 
 /**
- * Notifies this participant that a build is about to start and provides
- * the opportunity for the participant to create missing source folders
- * for generated source files.
+ * Notifies this participant that a build is about to start and provides it the opportunity to
+ * create missing source folders for generated source files.
  * Only sent to participants interested in the project.
  * <p>
  * Default is to return <code>READY_FOR_BUILD</code>.
@@ -52,8 +51,8 @@ public int buildStarting(IJavaProject project) {
 }
 
 /**
- * Notifies this participant that a clean is about to start and provides
- * the opportunity for the participant to delete generated source files.
+ * Notifies this participant that a clean is about to start and provides it the opportunity to
+ * delete generated source files.
  * Only sent to participants interested in the project.
  * @param project the project about to be cleaned
  */
@@ -62,6 +61,17 @@ public void cleanStarting(IJavaProject project) {
 }
 
 /**
+ * Notifies this participant that a compile operation is about to start and provides it the opportunity to
+ * generate source files based on the source files about to be compiled.
+ * Only sent to participants interested in the current build project and answer false to isAnnotationProcessor().
+ *
+ * @param files is an array of CompilationParticipantResult
+  */
+public void compileStarting(ICompilationParticipantResult[] files) {
+	// do nothing by default
+}
+
+/**
  * Returns whether this participant is active for a given project.
  * <p>
  * Default is to return <code>false</code>.
@@ -75,7 +85,30 @@ public void cleanStarting(IJavaProject project) {
 public boolean isActive(IJavaProject project) {
 	return false;
 }
-	
+
+/**
+ * Returns whether this participant is interested in only Annotations.
+ * <p>
+ * Default is to return <code>false</code>.
+ * </p>
+ * @return whether this participant is interested in only Annotations.
+ */
+public boolean isAnnotationProcessor() {
+	return false;
+}
+
+/**
+ * Notifies this participant that a compile operation has found source files that define Annotations.
+ * When isBatchBuild is true, then filesWithAnnotations contains all source files in the project that
+ * declare annotations.
+ * Only sent to participants interested in the current build project and answer true to isAnnotationProcessor().
+ *
+ * @param filesWithAnnotations is an array of CompilationParticipantResult
+  */
+public void processAnnotations(ICompilationParticipantResult[] filesWithAnnotations, boolean isBatchBuild) {
+	// do nothing by default
+}
+
 /**
  * Notifies this participant that a reconcile operation is happening. The participant can act on this reconcile
  * operation by using the given context. Other participant can then see the result of this participation
