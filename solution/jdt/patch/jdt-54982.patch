diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java
index ce1b86c..d3b76f7 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java
@@ -31,579 +31,478 @@ public class FieldReference extends Reference implements InvocationSite {
 	public TypeBinding receiverType;
 	public TypeBinding genericCast;
 	
-	public FieldReference(char[] source, long pos) {
+public FieldReference(char[] source, long pos) {
+	token = source;
+	nameSourcePosition = pos;
+	//by default the position are the one of the field (not true for super access)
+	sourceStart = (int) (pos >>> 32);
+	sourceEnd = (int) (pos & 0x00000000FFFFFFFFL);
+	bits |= Binding.FIELD;
 
-		token = source;
-		nameSourcePosition = pos;
-		//by default the position are the one of the field (not true for super access)
-		sourceStart = (int) (pos >>> 32);
-		sourceEnd = (int) (pos & 0x00000000FFFFFFFFL);
-		bits |= Binding.FIELD;
-
-	}
-
-	public FlowInfo analyseAssignment(
-		BlockScope currentScope,
-		FlowContext flowContext,
-		FlowInfo flowInfo,
-		Assignment assignment,
-		boolean isCompound) {
+}
 
-		// compound assignment extra work
-		if (isCompound) { // check the variable part is initialized if blank final
-			if (binding.isBlankFinal()
-				&& receiver.isThis()
-				&& currentScope.allowBlankFinalFieldAssignment(binding)
-				&& (!flowInfo.isDefinitelyAssigned(binding))) {
-				currentScope.problemReporter().uninitializedBlankFinalField(binding, this);
-				// we could improve error msg here telling "cannot use compound assignment on final blank field"
-			}
-			manageSyntheticAccessIfNecessary(currentScope, flowInfo, true /*read-access*/);
+public FlowInfo analyseAssignment(BlockScope currentScope, 	FlowContext flowContext, 	FlowInfo flowInfo, Assignment assignment, boolean isCompound) {
+	// compound assignment extra work
+	if (isCompound) { // check the variable part is initialized if blank final
+		if (binding.isBlankFinal()
+			&& receiver.isThis()
+			&& currentScope.allowBlankFinalFieldAssignment(binding)
+			&& (!flowInfo.isDefinitelyAssigned(binding))) {
+			currentScope.problemReporter().uninitializedBlankFinalField(binding, this);
+			// we could improve error msg here telling "cannot use compound assignment on final blank field"
 		}
+		manageSyntheticAccessIfNecessary(currentScope, flowInfo, true /*read-access*/);
+	}
+	flowInfo =
+		receiver
+			.analyseCode(currentScope, flowContext, flowInfo, !binding.isStatic())
+			.unconditionalInits();
+	if (assignment.expression != null) {
 		flowInfo =
-			receiver
-				.analyseCode(currentScope, flowContext, flowInfo, !binding.isStatic())
+			assignment
+				.expression
+				.analyseCode(currentScope, flowContext, flowInfo)
 				.unconditionalInits();
-		if (assignment.expression != null) {
-			flowInfo =
-				assignment
-					.expression
-					.analyseCode(currentScope, flowContext, flowInfo)
-					.unconditionalInits();
-		}
-		manageSyntheticAccessIfNecessary(currentScope, flowInfo, false /*write-access*/);
-
-		// check if assigning a final field 
-		if (binding.isFinal()) {
-			// in a context where it can be assigned?
-			if (binding.isBlankFinal()
-				&& !isCompound
-				&& receiver.isThis()
-				&& !(receiver instanceof QualifiedThisReference)
-				&& ((receiver.bits & ParenthesizedMASK) == 0) // (this).x is forbidden
-				&& currentScope.allowBlankFinalFieldAssignment(binding)) {
-				if (flowInfo.isPotentiallyAssigned(binding)) {
-					currentScope.problemReporter().duplicateInitializationOfBlankFinalField(
-						binding,
-						this);
-				} else {
-					flowContext.recordSettingFinal(binding, this, flowInfo);
-				}
-				flowInfo.markAsDefinitelyAssigned(binding);
+	}
+	manageSyntheticAccessIfNecessary(currentScope, flowInfo, false /*write-access*/);
+
+	// check if assigning a final field 
+	if (binding.isFinal()) {
+		// in a context where it can be assigned?
+		if (binding.isBlankFinal()
+			&& !isCompound
+			&& receiver.isThis()
+			&& !(receiver instanceof QualifiedThisReference)
+			&& ((receiver.bits & ParenthesizedMASK) == 0) // (this).x is forbidden
+			&& currentScope.allowBlankFinalFieldAssignment(binding)) {
+			if (flowInfo.isPotentiallyAssigned(binding)) {
+				currentScope.problemReporter().duplicateInitializationOfBlankFinalField(
+					binding,
+					this);
 			} else {
-				// assigning a final field outside an initializer or constructor or wrong reference
-				currentScope.problemReporter().cannotAssignToFinalField(binding, this);
+				flowContext.recordSettingFinal(binding, this, flowInfo);
 			}
+			flowInfo.markAsDefinitelyAssigned(binding);
+		} else {
+			// assigning a final field outside an initializer or constructor or wrong reference
+			currentScope.problemReporter().cannotAssignToFinalField(binding, this);
 		}
-		return flowInfo;
 	}
+	return flowInfo;
+}
 
-	public FlowInfo analyseCode(
-		BlockScope currentScope,
-		FlowContext flowContext,
-		FlowInfo flowInfo) {
+public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo) {
+	return analyseCode(currentScope, flowContext, flowInfo, true);
+}
 
-		return analyseCode(currentScope, flowContext, flowInfo, true);
+public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, boolean valueRequired) {
+	boolean nonStatic = !binding.isStatic();
+	receiver.analyseCode(currentScope, flowContext, flowInfo, nonStatic);
+	if (nonStatic) receiver.checkNullStatus(currentScope, flowContext, flowInfo, FlowInfo.NON_NULL);
+	
+	if (valueRequired || currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4) {
+		manageSyntheticAccessIfNecessary(currentScope, flowInfo, true /*read-access*/);
 	}
+	return flowInfo;
+}
 
-	public FlowInfo analyseCode(
-		BlockScope currentScope,
-		FlowContext flowContext,
-		FlowInfo flowInfo,
-		boolean valueRequired) {
-
-		boolean nonStatic = !binding.isStatic();
-		receiver.analyseCode(currentScope, flowContext, flowInfo, nonStatic);
-		if (nonStatic) receiver.checkNullStatus(currentScope, flowContext, flowInfo, FlowInfo.NON_NULL);
-		
-		if (valueRequired || currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4) {
-			manageSyntheticAccessIfNecessary(currentScope, flowInfo, true /*read-access*/);
+/**
+ * @see org.eclipse.jdt.internal.compiler.ast.Expression#computeConversion(org.eclipse.jdt.internal.compiler.lookup.Scope, org.eclipse.jdt.internal.compiler.lookup.TypeBinding, org.eclipse.jdt.internal.compiler.lookup.TypeBinding)
+ */
+public void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType) {
+	if (runtimeTimeType == null || compileTimeType == null)
+		return;		
+	// set the generic cast after the fact, once the type expectation is fully known (no need for strict cast)
+	if (this.binding != null && this.binding.isValidBinding()) {
+		FieldBinding originalBinding = this.binding.original();
+		if (originalBinding != this.binding && originalBinding.type != this.binding.type) {
+		    // extra cast needed if method return type has type variable
+		    if ((originalBinding.type.tagBits & TagBits.HasTypeVariable) != 0 && runtimeTimeType.id != T_JavaLangObject) {
+		    	TypeBinding targetType = (!compileTimeType.isBaseType() && runtimeTimeType.isBaseType()) 
+		    		? compileTimeType  // unboxing: checkcast before conversion
+		    		: runtimeTimeType;
+		        this.genericCast = originalBinding.type.genericCast(targetType);
+		    }
 		}
-		return flowInfo;
-	}
-
-	/**
-	 * @see org.eclipse.jdt.internal.compiler.ast.Expression#computeConversion(org.eclipse.jdt.internal.compiler.lookup.Scope, org.eclipse.jdt.internal.compiler.lookup.TypeBinding, org.eclipse.jdt.internal.compiler.lookup.TypeBinding)
-	 */
-	public void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType) {
-		if (runtimeTimeType == null || compileTimeType == null)
-			return;		
-		// set the generic cast after the fact, once the type expectation is fully known (no need for strict cast)
-		if (this.binding != null && this.binding.isValidBinding()) {
-			FieldBinding originalBinding = this.binding.original();
-			if (originalBinding != this.binding && originalBinding.type != this.binding.type) {
-			    // extra cast needed if method return type has type variable
-			    if ((originalBinding.type.tagBits & TagBits.HasTypeVariable) != 0 && runtimeTimeType.id != T_JavaLangObject) {
-			    	TypeBinding targetType = (!compileTimeType.isBaseType() && runtimeTimeType.isBaseType()) 
-			    		? compileTimeType  // unboxing: checkcast before conversion
-			    		: runtimeTimeType;
-			        this.genericCast = originalBinding.type.genericCast(targetType);
-			    }
-			}
-		} 	
-		super.computeConversion(scope, runtimeTimeType, compileTimeType);
-	}
+	} 	
+	super.computeConversion(scope, runtimeTimeType, compileTimeType);
+}
 
-	public FieldBinding fieldBinding() {
+public FieldBinding fieldBinding() {
+	return binding;
+}
 
-		return binding;
+public void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired) {
+	int pc = codeStream.position;
+	receiver.generateCode(
+		currentScope,
+		codeStream,
+		!this.codegenBinding.isStatic());
+	codeStream.recordPositionsFrom(pc, this.sourceStart);
+	assignment.expression.generateCode(currentScope, codeStream, true);
+	fieldStore(
+		codeStream,
+		this.codegenBinding,
+		syntheticAccessors == null ? null : syntheticAccessors[WRITE],
+		valueRequired);
+	if (valueRequired) {
+		codeStream.generateImplicitConversion(assignment.implicitConversion);
 	}
+	// no need for generic cast as value got dupped
+}
 
-	public void generateAssignment(
-		BlockScope currentScope,
-		CodeStream codeStream,
-		Assignment assignment,
-		boolean valueRequired) {
-
-		int pc = codeStream.position;
-		receiver.generateCode(
-			currentScope,
-			codeStream,
-			!this.codegenBinding.isStatic());
-		codeStream.recordPositionsFrom(pc, this.sourceStart);
-		assignment.expression.generateCode(currentScope, codeStream, true);
-		fieldStore(
-			codeStream,
-			this.codegenBinding,
-			syntheticAccessors == null ? null : syntheticAccessors[WRITE],
-			valueRequired);
+/**
+ * Field reference code generation
+ *
+ * @param currentScope org.eclipse.jdt.internal.compiler.lookup.BlockScope
+ * @param codeStream org.eclipse.jdt.internal.compiler.codegen.CodeStream
+ * @param valueRequired boolean
+ */
+public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {
+	int pc = codeStream.position;
+	if (constant != Constant.NotAConstant) {
 		if (valueRequired) {
-			codeStream.generateImplicitConversion(assignment.implicitConversion);
+			codeStream.generateConstant(constant, implicitConversion);
 		}
-		// no need for generic cast as value got dupped
-	}
-
-	/**
-	 * Field reference code generation
-	 *
-	 * @param currentScope org.eclipse.jdt.internal.compiler.lookup.BlockScope
-	 * @param codeStream org.eclipse.jdt.internal.compiler.codegen.CodeStream
-	 * @param valueRequired boolean
-	 */
-	public void generateCode(
-		BlockScope currentScope,
-		CodeStream codeStream,
-		boolean valueRequired) {
-
-		int pc = codeStream.position;
-		if (constant != NotAConstant) {
+	} else {
+		boolean isStatic = this.codegenBinding.isStatic();
+		Constant fieldConstant = this.codegenBinding.constant();
+		if (fieldConstant != Constant.NotAConstant) {
+			receiver.generateCode(currentScope, codeStream, !isStatic);
+			if (!isStatic){
+				codeStream.invokeObjectGetClass();
+				codeStream.pop();
+			}
 			if (valueRequired) {
-				codeStream.generateConstant(constant, implicitConversion);
+				codeStream.generateConstant(fieldConstant, implicitConversion);
 			}
 		} else {
-			boolean isStatic = this.codegenBinding.isStatic();
-			if (this.codegenBinding.isConstantValue()) {
-				receiver.generateCode(currentScope, codeStream, !isStatic);
-				if (!isStatic){
-					codeStream.invokeObjectGetClass();
-					codeStream.pop();
-				}
-				if (valueRequired) {
-					codeStream.generateConstant(this.codegenBinding.constant(), implicitConversion);
-				}
-			} else {
-				receiver.generateCode(currentScope, codeStream, !isStatic);
-				if (valueRequired || currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4) {
-					if (this.codegenBinding.declaringClass == null) { // array length
-						codeStream.arraylength();
-						if (valueRequired) {
-							codeStream.generateImplicitConversion(implicitConversion);
-						} else {
-							// could occur if !valueRequired but compliance >= 1.4
-							codeStream.pop();
-						}
+			receiver.generateCode(currentScope, codeStream, !isStatic);
+			if (valueRequired || currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4) {
+				if (this.codegenBinding.declaringClass == null) { // array length
+					codeStream.arraylength();
+					if (valueRequired) {
+						codeStream.generateImplicitConversion(implicitConversion);
 					} else {
-						if (syntheticAccessors == null || syntheticAccessors[READ] == null) {
-							if (isStatic) {
-								codeStream.getstatic(this.codegenBinding);
-							} else {
-								codeStream.getfield(this.codegenBinding);
-							}
-						} else {
-							codeStream.invokestatic(syntheticAccessors[READ]);
-						}
-						if (valueRequired) {
-							if (this.genericCast != null) codeStream.checkcast(this.genericCast);			
-							codeStream.generateImplicitConversion(implicitConversion);
+						// could occur if !valueRequired but compliance >= 1.4
+						codeStream.pop();
+					}
+				} else {
+					if (syntheticAccessors == null || syntheticAccessors[READ] == null) {
+						if (isStatic) {
+							codeStream.getstatic(this.codegenBinding);
 						} else {
-							// could occur if !valueRequired but compliance >= 1.4
-							switch (this.codegenBinding.type.id) {
-								case T_long :
-								case T_double :
-									codeStream.pop2();
-									break;
-								default :
-									codeStream.pop();
-							}
+							codeStream.getfield(this.codegenBinding);
 						}
+					} else {
+						codeStream.invokestatic(syntheticAccessors[READ]);
 					}
-				} else {
-					if (!isStatic){
-						if (!(this.receiver instanceof ThisReference)) codeStream.invokeObjectGetClass(); // perform null check
-						codeStream.pop();
+					if (valueRequired) {
+						if (this.genericCast != null) codeStream.checkcast(this.genericCast);			
+						codeStream.generateImplicitConversion(implicitConversion);
+					} else {
+						// could occur if !valueRequired but compliance >= 1.4
+						switch (this.codegenBinding.type.id) {
+							case T_long :
+							case T_double :
+								codeStream.pop2();
+								break;
+							default :
+								codeStream.pop();
+						}
 					}
 				}
+			} else {
+				if (!isStatic){
+					if (!(this.receiver instanceof ThisReference)) codeStream.invokeObjectGetClass(); // perform null check
+					codeStream.pop();
+				}
 			}
 		}
-		codeStream.recordPositionsFrom(pc, this.sourceStart);
 	}
+	codeStream.recordPositionsFrom(pc, this.sourceStart);
+}
 
-	public void generateCompoundAssignment(
-		BlockScope currentScope,
-		CodeStream codeStream,
-		Expression expression,
-		int operator,
-		int assignmentImplicitConversion,
-		boolean valueRequired) {
-
-		boolean isStatic;
-		receiver.generateCode(
-			currentScope,
-			codeStream,
-			!(isStatic = this.codegenBinding.isStatic()));
-		if (isStatic) {
-			if (syntheticAccessors == null || syntheticAccessors[READ] == null) {
-				codeStream.getstatic(this.codegenBinding);
-			} else {
-				codeStream.invokestatic(syntheticAccessors[READ]);
-			}
+public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired) {
+	boolean isStatic;
+	receiver.generateCode(
+		currentScope,
+		codeStream,
+		!(isStatic = this.codegenBinding.isStatic()));
+	if (isStatic) {
+		if (syntheticAccessors == null || syntheticAccessors[READ] == null) {
+			codeStream.getstatic(this.codegenBinding);
 		} else {
-			codeStream.dup();
-			if (syntheticAccessors == null || syntheticAccessors[READ] == null) {
-				codeStream.getfield(this.codegenBinding);
+			codeStream.invokestatic(syntheticAccessors[READ]);
+		}
+	} else {
+		codeStream.dup();
+		if (syntheticAccessors == null || syntheticAccessors[READ] == null) {
+			codeStream.getfield(this.codegenBinding);
+		} else {
+			codeStream.invokestatic(syntheticAccessors[READ]);
+		}
+	}
+	int operationTypeID;
+	switch(operationTypeID = (implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) {
+		case T_JavaLangString :
+		case T_JavaLangObject :
+		case T_undefined :
+			codeStream.generateStringConcatenationAppend(currentScope, null, expression);
+			break;
+		default :
+			if (this.genericCast != null)
+				codeStream.checkcast(this.genericCast);				
+			// promote the array reference to the suitable operation type
+			codeStream.generateImplicitConversion(implicitConversion);
+			// generate the increment value (will by itself  be promoted to the operation value)
+			if (expression == IntLiteral.One) { // prefix operation
+				codeStream.generateConstant(expression.constant, implicitConversion);
 			} else {
-				codeStream.invokestatic(syntheticAccessors[READ]);
+				expression.generateCode(currentScope, codeStream, true);
 			}
+			// perform the operation
+			codeStream.sendOperator(operator, operationTypeID);
+			// cast the value back to the array reference type
+			codeStream.generateImplicitConversion(assignmentImplicitConversion);
+	}
+	fieldStore(
+		codeStream,
+		this.codegenBinding,
+		syntheticAccessors == null ? null : syntheticAccessors[WRITE],
+		valueRequired);
+	// no need for generic cast as value got dupped
+}
+
+public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired) {
+	boolean isStatic;
+	receiver.generateCode(
+		currentScope,
+		codeStream,
+		!(isStatic = this.codegenBinding.isStatic()));
+	if (isStatic) {
+		if (syntheticAccessors == null || syntheticAccessors[READ] == null) {
+			codeStream.getstatic(this.codegenBinding);
+		} else {
+			codeStream.invokestatic(syntheticAccessors[READ]);
 		}
-		int operationTypeID;
-		switch(operationTypeID = (implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) {
-			case T_JavaLangString :
-			case T_JavaLangObject :
-			case T_undefined :
-				codeStream.generateStringConcatenationAppend(currentScope, null, expression);
-				break;
-			default :
-				if (this.genericCast != null)
-					codeStream.checkcast(this.genericCast);				
-				// promote the array reference to the suitable operation type
-				codeStream.generateImplicitConversion(implicitConversion);
-				// generate the increment value (will by itself  be promoted to the operation value)
-				if (expression == IntLiteral.One) { // prefix operation
-					codeStream.generateConstant(expression.constant, implicitConversion);
-				} else {
-					expression.generateCode(currentScope, codeStream, true);
-				}
-				// perform the operation
-				codeStream.sendOperator(operator, operationTypeID);
-				// cast the value back to the array reference type
-				codeStream.generateImplicitConversion(assignmentImplicitConversion);
+	} else {
+		codeStream.dup();
+		if (syntheticAccessors == null || syntheticAccessors[READ] == null) {
+			codeStream.getfield(this.codegenBinding);
+		} else {
+			codeStream.invokestatic(syntheticAccessors[READ]);
 		}
-		fieldStore(
-			codeStream,
-			this.codegenBinding,
-			syntheticAccessors == null ? null : syntheticAccessors[WRITE],
-			valueRequired);
-		// no need for generic cast as value got dupped
 	}
-
-	public void generatePostIncrement(
-		BlockScope currentScope,
-		CodeStream codeStream,
-		CompoundAssignment postIncrement,
-		boolean valueRequired) {
-
-		boolean isStatic;
-		receiver.generateCode(
-			currentScope,
-			codeStream,
-			!(isStatic = this.codegenBinding.isStatic()));
+	if (valueRequired) {
 		if (isStatic) {
-			if (syntheticAccessors == null || syntheticAccessors[READ] == null) {
-				codeStream.getstatic(this.codegenBinding);
+			if ((this.codegenBinding.type == LongBinding)
+				|| (this.codegenBinding.type == DoubleBinding)) {
+				codeStream.dup2();
 			} else {
-				codeStream.invokestatic(syntheticAccessors[READ]);
+				codeStream.dup();
 			}
-		} else {
-			codeStream.dup();
-			if (syntheticAccessors == null || syntheticAccessors[READ] == null) {
-				codeStream.getfield(this.codegenBinding);
+		} else { // Stack:  [owner][old field value]  ---> [old field value][owner][old field value]
+			if ((this.codegenBinding.type == LongBinding)
+				|| (this.codegenBinding.type == DoubleBinding)) {
+				codeStream.dup2_x1();
 			} else {
-				codeStream.invokestatic(syntheticAccessors[READ]);
-			}
-		}
-		if (valueRequired) {
-			if (isStatic) {
-				if ((this.codegenBinding.type == LongBinding)
-					|| (this.codegenBinding.type == DoubleBinding)) {
-					codeStream.dup2();
-				} else {
-					codeStream.dup();
-				}
-			} else { // Stack:  [owner][old field value]  ---> [old field value][owner][old field value]
-				if ((this.codegenBinding.type == LongBinding)
-					|| (this.codegenBinding.type == DoubleBinding)) {
-					codeStream.dup2_x1();
-				} else {
-					codeStream.dup_x1();
-				}
+				codeStream.dup_x1();
 			}
 		}
-		if (this.genericCast != null)
-			codeStream.checkcast(this.genericCast);
-		codeStream.generateImplicitConversion(this.implicitConversion);		
-		codeStream.generateConstant(
-			postIncrement.expression.constant,
-			this.implicitConversion);
-		codeStream.sendOperator(postIncrement.operator, this.implicitConversion & COMPILE_TYPE_MASK);
-		codeStream.generateImplicitConversion(
-			postIncrement.preAssignImplicitConversion);
-		fieldStore(codeStream, this.codegenBinding, syntheticAccessors == null ? null : syntheticAccessors[WRITE], false);
 	}
-	/**
-	 * @see org.eclipse.jdt.internal.compiler.lookup.InvocationSite#genericTypeArguments()
-	 */
-	public TypeBinding[] genericTypeArguments() {
-		return null;
-	}
-	public static final Constant getConstantFor(
-		FieldBinding binding,
-		Reference reference,
-		boolean isImplicit,
-		Scope referenceScope) {
-
-		//propagation of the constant.
-
-		//ref can be a FieldReference, a SingleNameReference or a QualifiedNameReference
-		//indexInQualification may have a value greater than zero only for QualifiednameReference
-		//if ref==null then indexInQualification==0 AND implicitReceiver == false. This case is a 
-		//degenerated case where a fake reference field (null) 
-		//is associted to a real FieldBinding in order 
-		//to allow its constant computation using the regular path (in other words, find the fieldDeclaration
-		//and proceed to its type resolution). As implicitReceiver is false, no error reporting
-		//against ref will be used ==> no nullPointerException risk .... 
-
-		//special treatment for langage-built-in  field (their declaring class is null)
-		if (binding.declaringClass == null) {
-			//currently only one field "length" : the constant computation is never done
-			return NotAConstant;
-		}
-		if (!binding.isFinal()) {
-			binding.setConstant(NotAConstant);
-			return NotAConstant;
-		}
-		Constant fieldConstant = binding.constant();
-		if (fieldConstant != null) {
-			if (isImplicit 
-					|| (reference instanceof QualifiedNameReference
-						&& binding == ((QualifiedNameReference)reference).binding)) {
-				return fieldConstant;
-			}
-			return NotAConstant;
-		}
-
-		//The field has not been yet type checked.
-		//It also means that the field is not coming from a class that
-		//has already been compiled. It can only be from a class within
-		//compilation units to process. Thus the field is NOT from a BinaryTypeBinbing
+	if (this.genericCast != null)
+		codeStream.checkcast(this.genericCast);
+	codeStream.generateImplicitConversion(this.implicitConversion);		
+	codeStream.generateConstant(
+		postIncrement.expression.constant,
+		this.implicitConversion);
+	codeStream.sendOperator(postIncrement.operator, this.implicitConversion & COMPILE_TYPE_MASK);
+	codeStream.generateImplicitConversion(
+		postIncrement.preAssignImplicitConversion);
+	fieldStore(codeStream, this.codegenBinding, syntheticAccessors == null ? null : syntheticAccessors[WRITE], false);
+}
+/**
+ * @see org.eclipse.jdt.internal.compiler.lookup.InvocationSite#genericTypeArguments()
+ */
+public TypeBinding[] genericTypeArguments() {
+	return null;
+}
 
-		FieldBinding originalField = binding.original();
-		SourceTypeBinding sourceType = (SourceTypeBinding) originalField.declaringClass;
-		TypeDeclaration typeDecl = sourceType.scope.referenceContext;
-		FieldDeclaration fieldDecl = typeDecl.declarationOf(originalField);
+public boolean isSuperAccess() {
+	return receiver.isSuper();
+}
 
-		fieldDecl.resolve(originalField.isStatic() //side effect on binding 
-				? typeDecl.staticInitializerScope
-				: typeDecl.initializerScope); 
+public boolean isTypeAccess() {
+	return receiver != null && receiver.isTypeReference();
+}
 
-		if (isImplicit 
-				|| (reference instanceof QualifiedNameReference
-					&& binding == ((QualifiedNameReference)reference).binding)) {
-			return binding.constant();
+/*
+ * No need to emulate access to protected fields since not implicitly accessed
+ */
+public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess) {
+	if (!flowInfo.isReachable()) return;
+	// if field from parameterized type got found, use the original field at codegen time
+	this.codegenBinding = this.binding.original();
+	
+	if (binding.isPrivate()) {
+		if ((currentScope.enclosingSourceType() != this.codegenBinding.declaringClass) 
+				&& binding.constant() == Constant.NotAConstant) {
+			if (syntheticAccessors == null)
+				syntheticAccessors = new MethodBinding[2];
+			syntheticAccessors[isReadAccess ? READ : WRITE] = 
+				((SourceTypeBinding) this.codegenBinding.declaringClass).addSyntheticMethod(this.codegenBinding, isReadAccess);
+			currentScope.problemReporter().needToEmulateFieldAccess(this.codegenBinding, this, isReadAccess);
+			return;
 		}
-		return NotAConstant;
-	}
-
-	public boolean isSuperAccess() {
-
-		return receiver.isSuper();
-	}
 
-	public boolean isTypeAccess() {
+	} else if (receiver instanceof QualifiedSuperReference) { // qualified super
 
-		return receiver != null && receiver.isTypeReference();
-	}
+		// qualified super need emulation always
+		SourceTypeBinding destinationType =
+			(SourceTypeBinding) (((QualifiedSuperReference) receiver)
+				.currentCompatibleType);
+		if (syntheticAccessors == null)
+			syntheticAccessors = new MethodBinding[2];
+		syntheticAccessors[isReadAccess ? READ : WRITE] = destinationType.addSyntheticMethod(this.codegenBinding, isReadAccess);
+		currentScope.problemReporter().needToEmulateFieldAccess(this.codegenBinding, this, isReadAccess);
+		return;
 
-	/*
-	 * No need to emulate access to protected fields since not implicitly accessed
-	 */
-	public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess) {
+	} else if (binding.isProtected()) {
 
-		if (!flowInfo.isReachable()) return;
-		// if field from parameterized type got found, use the original field at codegen time
-		this.codegenBinding = this.binding.original();
-		
-		if (binding.isPrivate()) {
-			if ((currentScope.enclosingSourceType() != this.codegenBinding.declaringClass) && !binding.isConstantValue()) {
-				if (syntheticAccessors == null)
-					syntheticAccessors = new MethodBinding[2];
-				syntheticAccessors[isReadAccess ? READ : WRITE] = 
-					((SourceTypeBinding) this.codegenBinding.declaringClass).addSyntheticMethod(this.codegenBinding, isReadAccess);
-				currentScope.problemReporter().needToEmulateFieldAccess(this.codegenBinding, this, isReadAccess);
-				return;
-			}
+		SourceTypeBinding enclosingSourceType;
+		if (((bits & DepthMASK) != 0)
+			&& binding.declaringClass.getPackage()
+				!= (enclosingSourceType = currentScope.enclosingSourceType()).getPackage()) {
 
-		} else if (receiver instanceof QualifiedSuperReference) { // qualified super
-
-			// qualified super need emulation always
-			SourceTypeBinding destinationType =
-				(SourceTypeBinding) (((QualifiedSuperReference) receiver)
-					.currentCompatibleType);
+			SourceTypeBinding currentCompatibleType =
+				(SourceTypeBinding) enclosingSourceType.enclosingTypeAt(
+					(bits & DepthMASK) >> DepthSHIFT);
 			if (syntheticAccessors == null)
 				syntheticAccessors = new MethodBinding[2];
-			syntheticAccessors[isReadAccess ? READ : WRITE] = destinationType.addSyntheticMethod(this.codegenBinding, isReadAccess);
+			syntheticAccessors[isReadAccess ? READ : WRITE] = currentCompatibleType.addSyntheticMethod(this.codegenBinding, isReadAccess);
 			currentScope.problemReporter().needToEmulateFieldAccess(this.codegenBinding, this, isReadAccess);
 			return;
-
-		} else if (binding.isProtected()) {
-
-			SourceTypeBinding enclosingSourceType;
-			if (((bits & DepthMASK) != 0)
-				&& binding.declaringClass.getPackage()
-					!= (enclosingSourceType = currentScope.enclosingSourceType()).getPackage()) {
-
-				SourceTypeBinding currentCompatibleType =
-					(SourceTypeBinding) enclosingSourceType.enclosingTypeAt(
-						(bits & DepthMASK) >> DepthSHIFT);
-				if (syntheticAccessors == null)
-					syntheticAccessors = new MethodBinding[2];
-				syntheticAccessors[isReadAccess ? READ : WRITE] = currentCompatibleType.addSyntheticMethod(this.codegenBinding, isReadAccess);
-				currentScope.problemReporter().needToEmulateFieldAccess(this.codegenBinding, this, isReadAccess);
-				return;
-			}
 		}
-		// if the binding declaring class is not visible, need special action
-		// for runtime compatibility on 1.2 VMs : change the declaring class of the binding
-		// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type
-		// and not from Object or implicit static field access.	
-		if (this.binding.declaringClass != this.receiverType
-				&& !this.receiverType.isArrayType()
-				&& this.binding.declaringClass != null // array.length
-				&& !this.binding.isConstantValue()) {
-			CompilerOptions options = currentScope.compilerOptions();
-			if ((options.targetJDK >= ClassFileConstants.JDK1_2
-					&& (options.complianceLevel >= ClassFileConstants.JDK1_4 || !(receiver.isImplicitThis() && this.codegenBinding.isStatic()))
-					&& this.binding.declaringClass.id != T_JavaLangObject) // no change for Object fields
-				|| !this.binding.declaringClass.canBeSeenBy(currentScope)) {
-	
-				this.codegenBinding =
-					currentScope.enclosingSourceType().getUpdatedFieldBinding(
-						this.codegenBinding,
-						(ReferenceBinding) this.receiverType.erasure());
-			}
-		}		
 	}
-
-	public Constant optimizedBooleanConstant() {
-
-		switch (this.resolvedType.id) {
-			case T_boolean :
-			case T_JavaLangBoolean :		
-				return this.constant != NotAConstant ? this.constant : this.binding.constant();
-			default :
-				return NotAConstant;
+	// if the binding declaring class is not visible, need special action
+	// for runtime compatibility on 1.2 VMs : change the declaring class of the binding
+	// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type
+	// and not from Object or implicit static field access.	
+	if (this.binding.declaringClass != this.receiverType
+			&& !this.receiverType.isArrayType()
+			&& this.binding.declaringClass != null // array.length
+			&& this.binding.constant() == Constant.NotAConstant) {
+		CompilerOptions options = currentScope.compilerOptions();
+		if ((options.targetJDK >= ClassFileConstants.JDK1_2
+				&& (options.complianceLevel >= ClassFileConstants.JDK1_4 || !(receiver.isImplicitThis() && this.codegenBinding.isStatic()))
+				&& this.binding.declaringClass.id != T_JavaLangObject) // no change for Object fields
+			|| !this.binding.declaringClass.canBeSeenBy(currentScope)) {
+
+			this.codegenBinding =
+				currentScope.enclosingSourceType().getUpdatedFieldBinding(
+					this.codegenBinding,
+					(ReferenceBinding) this.receiverType.erasure());
 		}
-	}
-	
-	public StringBuffer printExpression(int indent, StringBuffer output) {
+	}		
+}
 
-		return receiver.printExpression(0, output).append('.').append(token);
+public Constant optimizedBooleanConstant() {
+	switch (this.resolvedType.id) {
+		case T_boolean :
+		case T_JavaLangBoolean :		
+			return this.constant != Constant.NotAConstant ? this.constant : this.binding.constant();
+		default :
+			return Constant.NotAConstant;
 	}
-	
-	public TypeBinding resolveType(BlockScope scope) {
+}
+
+public StringBuffer printExpression(int indent, StringBuffer output) {
+	return receiver.printExpression(0, output).append('.').append(token);
+}
 
-		// Answer the signature type of the field.
-		// constants are propaged when the field is final
-		// and initialized with a (compile time) constant 
+public TypeBinding resolveType(BlockScope scope) {
+	// Answer the signature type of the field.
+	// constants are propaged when the field is final
+	// and initialized with a (compile time) constant 
 
-		//always ignore receiver cast, since may affect constant pool reference
-		boolean receiverCast = false;
-		if (this.receiver instanceof CastExpression) {
-			this.receiver.bits |= DisableUnnecessaryCastCheck; // will check later on
-			receiverCast = true;
-		}
-		this.receiverType = receiver.resolveType(scope);
-		if (this.receiverType == null) {
-			constant = NotAConstant;
-			return null;
-		}
-		if (receiverCast) {
-			 // due to change of declaring class with receiver type, only identity cast should be notified
-			if (((CastExpression)this.receiver).expression.resolvedType == this.receiverType) { 
-						scope.problemReporter().unnecessaryCast((CastExpression)this.receiver);		
-			}
-		}		
-		// the case receiverType.isArrayType and token = 'length' is handled by the scope API
-		FieldBinding fieldBinding = this.codegenBinding = this.binding = scope.getField(this.receiverType, token, this);
-		if (!fieldBinding.isValidBinding()) {
-			constant = NotAConstant;
-			scope.problemReporter().invalidField(this, this.receiverType);
-			return null;
-		}
-		TypeBinding receiverErasure = this.receiverType.erasure();
-		if (receiverErasure instanceof ReferenceBinding) {
-			ReferenceBinding match = ((ReferenceBinding)receiverErasure).findSuperTypeWithSameErasure(fieldBinding.declaringClass);
-			if (match == null) {
-				this.receiverType = fieldBinding.declaringClass; // handle indirect inheritance thru variable secondary bound
-			}
-		}
-		this.receiver.computeConversion(scope, this.receiverType, this.receiverType);
-		if (isFieldUseDeprecated(fieldBinding, scope, (this.bits & IsStrictlyAssigned) !=0)) {
-			scope.problemReporter().deprecatedField(fieldBinding, this);
-		}
-		boolean isImplicitThisRcv = receiver.isImplicitThis();
-		constant = FieldReference.getConstantFor(fieldBinding, this, isImplicitThisRcv, scope);
-		if (!isImplicitThisRcv) {
-			constant = NotAConstant;
+	//always ignore receiver cast, since may affect constant pool reference
+	boolean receiverCast = false;
+	if (this.receiver instanceof CastExpression) {
+		this.receiver.bits |= DisableUnnecessaryCastCheck; // will check later on
+		receiverCast = true;
+	}
+	this.receiverType = receiver.resolveType(scope);
+	if (this.receiverType == null) {
+		constant = Constant.NotAConstant;
+		return null;
+	}
+	if (receiverCast) {
+		 // due to change of declaring class with receiver type, only identity cast should be notified
+		if (((CastExpression)this.receiver).expression.resolvedType == this.receiverType) { 
+					scope.problemReporter().unnecessaryCast((CastExpression)this.receiver);		
 		}
-		if (fieldBinding.isStatic()) {
-			// static field accessed through receiver? legal but unoptimal (optional warning)
-			if (!(isImplicitThisRcv
-					|| (receiver instanceof NameReference 
-						&& (((NameReference) receiver).bits & Binding.TYPE) != 0))) {
-				scope.problemReporter().nonStaticAccessToStaticField(this, fieldBinding);
-			}
-			if (!isImplicitThisRcv && fieldBinding.declaringClass != receiverType) {
-				scope.problemReporter().indirectAccessToStaticField(this, fieldBinding);
-			}
+	}		
+	// the case receiverType.isArrayType and token = 'length' is handled by the scope API
+	FieldBinding fieldBinding = this.codegenBinding = this.binding = scope.getField(this.receiverType, token, this);
+	if (!fieldBinding.isValidBinding()) {
+		constant = Constant.NotAConstant;
+		scope.problemReporter().invalidField(this, this.receiverType);
+		return null;
+	}
+	TypeBinding receiverErasure = this.receiverType.erasure();
+	if (receiverErasure instanceof ReferenceBinding) {
+		ReferenceBinding match = ((ReferenceBinding)receiverErasure).findSuperTypeWithSameErasure(fieldBinding.declaringClass);
+		if (match == null) {
+			this.receiverType = fieldBinding.declaringClass; // handle indirect inheritance thru variable secondary bound
 		}
-		// perform capture conversion if read access
-		return this.resolvedType = 
-			(((this.bits & IsStrictlyAssigned) == 0) 
-				? fieldBinding.type.capture(scope, this.sourceEnd)
-				: fieldBinding.type);
 	}
-
-	public void setActualReceiverType(ReferenceBinding receiverType) {
-		// ignored
+	this.receiver.computeConversion(scope, this.receiverType, this.receiverType);
+	if (isFieldUseDeprecated(fieldBinding, scope, (this.bits & IsStrictlyAssigned) !=0)) {
+		scope.problemReporter().deprecatedField(fieldBinding, this);
 	}
-
-	public void setDepth(int depth) {
-
-		bits &= ~DepthMASK; // flush previous depth if any			
-		if (depth > 0) {
-			bits |= (depth & 0xFF) << DepthSHIFT; // encoded on 8 bits
+	boolean isImplicitThisRcv = receiver.isImplicitThis();
+	constant = isImplicitThisRcv ? fieldBinding.constant() : Constant.NotAConstant;
+	if (!isImplicitThisRcv) {
+		constant = Constant.NotAConstant;
+	}
+	if (fieldBinding.isStatic()) {
+		// static field accessed through receiver? legal but unoptimal (optional warning)
+		if (!(isImplicitThisRcv
+				|| (receiver instanceof NameReference 
+					&& (((NameReference) receiver).bits & Binding.TYPE) != 0))) {
+			scope.problemReporter().nonStaticAccessToStaticField(this, fieldBinding);
+		}
+		if (!isImplicitThisRcv && fieldBinding.declaringClass != receiverType) {
+			scope.problemReporter().indirectAccessToStaticField(this, fieldBinding);
 		}
 	}
+	// perform capture conversion if read access
+	return this.resolvedType = 
+		(((this.bits & IsStrictlyAssigned) == 0) 
+			? fieldBinding.type.capture(scope, this.sourceEnd)
+			: fieldBinding.type);
+}
+
+public void setActualReceiverType(ReferenceBinding receiverType) {
+	// ignored
+}
 
-	public void setFieldIndex(int index) {
-		// ignored
+public void setDepth(int depth) {
+	bits &= ~DepthMASK; // flush previous depth if any			
+	if (depth > 0) {
+		bits |= (depth & 0xFF) << DepthSHIFT; // encoded on 8 bits
 	}
+}
 
-	public void traverse(ASTVisitor visitor, BlockScope scope) {
+public void setFieldIndex(int index) {
+	// ignored
+}
 
-		if (visitor.visit(this, scope)) {
-			receiver.traverse(visitor, scope);
-		}
-		visitor.endVisit(this, scope);
+public void traverse(ASTVisitor visitor, BlockScope scope) {
+	if (visitor.visit(this, scope)) {
+		receiver.traverse(visitor, scope);
 	}
+	visitor.endVisit(this, scope);
+}
 }
