diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingResolver.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingResolver.java
index 2c8db33..3041f88 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingResolver.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingResolver.java
@@ -11,13 +11,15 @@
 
 package org.eclipse.jdt.core.dom;
 
+import org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding;
 import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
 import org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope;
 import org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment;
 
 /**
  * A binding resolver is an internal mechanism for figuring out the binding
- * for a major declaration, type, or name reference.
+ * for a major declaration, type, or name reference. This also handles
+ * the creation and mapping between annotations and the ast nodes that define them.
  * <p>
  * The default implementation serves as the default binding resolver
  * that does no resolving whatsoever. Internal subclasses do all the real work.
@@ -93,6 +95,21 @@ class BindingResolver {
 	}
 
 	/**
+	 * Finds the corresponding AST node from which the given annotation instance originated.
+	 * 
+	 * The default implementation of this method returns <code>null</code>.
+	 * Subclasses may reimplement.
+	 * </p>
+	 * 
+	 * @param instance the dom annotation
+	 * @return the corresponding node where the bindings is declared, 
+	 *    or <code>null</code> if none
+	 */
+	ASTNode findDeclaringNode(IResolvedAnnotation instance) {
+		return null;
+	}
+
+	/**
 	 * Allows the user to get information about the given old/new pair of
 	 * AST nodes.
 	 * <p>
@@ -164,6 +181,20 @@ class BindingResolver {
 	}
 	
 	/**
+	 * Return the new annotation corresponding to the given old annotation
+	 * <p>
+	 * The default implementation of this method returns <code>null</code>
+	 * Subclasses may reimplement.
+	 * </p>
+	 * 
+	 * @param instance the old annotation 
+	 * @return the new DOM annotation
+	 */
+	IResolvedAnnotation getAnnotationInstance(AnnotationBinding instance) {
+		return null;
+	}
+
+	/**
 	 * Returns the compiler lookup environment used by this binding resolver.
 	 * Returns <code>null</code> if none.
 	 * 
@@ -785,6 +816,25 @@ class BindingResolver {
 	}
 	
 	/**
+	 * Resolves the given annotation instance and returns the DOM representation for it.
+	 * <p>
+	 * The implementation of {@link Annotation#resolveAnnotation()}
+	 * forwards to this method. 
+	 * </p>
+	 * <p>
+	 * The default implementation of this method returns <code>null</code>.
+	 * Subclasses may reimplement.
+	 * </p>
+	 * 
+	 * @param annotation the annotation ast node of interest
+	 * @return the DOM annotation representation for the given ast node, or 
+	 *    <code>null</code> if none is available
+	 */
+	IResolvedAnnotation resolveAnnotation(Annotation annotation) {
+		return null;
+	}
+
+	/**
 	 * Returns the compilation unit scope used by this binding resolver.
 	 * Returns <code>null</code> if none.
 	 *
