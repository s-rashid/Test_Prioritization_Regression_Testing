diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BreakStatement.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BreakStatement.java
index 93accfc..407009a 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BreakStatement.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BreakStatement.java
@@ -16,80 +16,75 @@ import org.eclipse.jdt.internal.compiler.lookup.*;
 
 public class BreakStatement extends BranchStatement {
 	
-	public BreakStatement(char[] label, int sourceStart, int e) {
-		super(label, sourceStart, e);
-	}
+public BreakStatement(char[] label, int sourceStart, int e) {
+	super(label, sourceStart, e);
+}
 
-	public FlowInfo analyseCode(
-		BlockScope currentScope,
-		FlowContext flowContext,
-		FlowInfo flowInfo) {
+public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo) {
 
-		// here requires to generate a sequence of finally blocks invocations depending corresponding
-		// to each of the traversed try statements, so that execution will terminate properly.
+	// here requires to generate a sequence of finally blocks invocations depending corresponding
+	// to each of the traversed try statements, so that execution will terminate properly.
 
-		// lookup the label, this should answer the returnContext
-		FlowContext targetContext = (label == null) 
-			? flowContext.getTargetContextForDefaultBreak()
-			: flowContext.getTargetContextForBreakLabel(label);
+	// lookup the label, this should answer the returnContext
+	FlowContext targetContext = (this.label == null) 
+		? flowContext.getTargetContextForDefaultBreak()
+		: flowContext.getTargetContextForBreakLabel(this.label);
 
-		if (targetContext == null) {
-			if (label == null) {
-				currentScope.problemReporter().invalidBreak(this);
-			} else {
-				currentScope.problemReporter().undefinedLabel(this); 
+	if (targetContext == null) {
+		if (this.label == null) {
+			currentScope.problemReporter().invalidBreak(this);
+		} else {
+			currentScope.problemReporter().undefinedLabel(this); 
+		}
+		return flowInfo; // pretend it did not break since no actual target
+	}
+	
+	this.targetLabel = targetContext.breakLabel();
+	FlowContext traversedContext = flowContext;
+	int subCount = 0;
+	this.subroutines = new SubRoutineStatement[5];
+	
+	do {
+		SubRoutineStatement sub;
+		if ((sub = traversedContext.subroutine()) != null) {
+			if (subCount == this.subroutines.length) {
+				System.arraycopy(this.subroutines, 0, (this.subroutines = new SubRoutineStatement[subCount*2]), 0, subCount); // grow
+			}
+			this.subroutines[subCount++] = sub;
+			if (sub.isSubRoutineEscaping()) {
+				break;
 			}
-			return flowInfo; // pretend it did not break since no actual target
 		}
+		traversedContext.recordReturnFrom(flowInfo.unconditionalInits());
 		
-		targetLabel = targetContext.breakLabel();
-		FlowContext traversedContext = flowContext;
-		int subIndex = 0, maxSub = 5;
-		subroutines = new SubRoutineStatement[maxSub];
-		
-		do {
-			SubRoutineStatement sub;
-			if ((sub = traversedContext.subRoutine()) != null) {
-				if (subIndex == maxSub) {
-					System.arraycopy(subroutines, 0, (subroutines = new SubRoutineStatement[maxSub*=2]), 0, subIndex); // grow
-				}
-				subroutines[subIndex++] = sub;
-				if (sub.isSubRoutineEscaping()) {
-					break;
-				}
-			}
-			traversedContext.recordReturnFrom(flowInfo.unconditionalInits());
-
-			ASTNode node;
-			if ((node = traversedContext.associatedNode) instanceof TryStatement) {
+		if (traversedContext instanceof InsideSubRoutineFlowContext) {
+			ASTNode node = traversedContext.associatedNode;
+			if (node instanceof TryStatement) {
 				TryStatement tryStatement = (TryStatement) node;
 				flowInfo.addInitializationsFrom(tryStatement.subRoutineInits); // collect inits			
-			} else if (traversedContext == targetContext) {
-				// only record break info once accumulated through subroutines, and only against target context
-				targetContext.recordBreakFrom(flowInfo);
-				break;
 			}
-		} while ((traversedContext = traversedContext.parent) != null);
-		
-		// resize subroutines
-		if (subIndex != maxSub) {
-			System.arraycopy(subroutines, 0, (subroutines = new SubRoutineStatement[subIndex]), 0, subIndex);
+		} else if (traversedContext == targetContext) {
+			// only record break info once accumulated through subroutines, and only against target context
+			targetContext.recordBreakFrom(flowInfo);
+			break;
 		}
-		return FlowInfo.DEAD_END;
-	}
+	} while ((traversedContext = traversedContext.parent) != null);
 	
-	public StringBuffer printStatement(int tab, StringBuffer output) {
-
-		printIndent(tab, output).append("break "); //$NON-NLS-1$
-		if (label != null) output.append(label);
-		return output.append(';');
+	// resize subroutines
+	if (subCount != this.subroutines.length) {
+		System.arraycopy(this.subroutines, 0, (this.subroutines = new SubRoutineStatement[subCount]), 0, subCount);
 	}
-	
-	public void traverse(
-		ASTVisitor visitor,
-		BlockScope blockscope) {
+	return FlowInfo.DEAD_END;
+}
 
-		visitor.visit(this, blockscope);
-		visitor.endVisit(this, blockscope);
-	}
+public StringBuffer printStatement(int tab, StringBuffer output) {
+	printIndent(tab, output).append("break "); //$NON-NLS-1$
+	if (this.label != null) output.append(this.label);
+	return output.append(';');
+}
+
+public void traverse(ASTVisitor visitor, BlockScope blockscope) {
+	visitor.visit(this, blockscope);
+	visitor.endVisit(this, blockscope);
+}
 }
