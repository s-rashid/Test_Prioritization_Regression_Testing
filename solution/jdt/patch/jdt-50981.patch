diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedTypeReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedTypeReference.java
index 0d44f05..aae6e2a 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedTypeReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedTypeReference.java
@@ -75,11 +75,11 @@ public class QualifiedTypeReference extends TypeReference {
 				if (((ClassScope) scope).detectHierarchyCycle(this.resolvedType, this, null)) // must connect hierarchy to find inherited member types
 					return null;
 			ReferenceBinding currentType = (ReferenceBinding) this.resolvedType;
-			if (currentType.isGenericType()) {
-				qualifiedType = scope.environment().createRawType(currentType, qualifiedType);
-			} else if (qualifiedType != null) {
+			if (qualifiedType != null) {
 				boolean rawQualified;
-				if ((rawQualified = qualifiedType.isRawType()) && !currentType.isStatic()) {
+				if (currentType.isGenericType()) {
+					qualifiedType = scope.environment().createRawType(currentType, qualifiedType);
+				} else if ((rawQualified = qualifiedType.isRawType()) && !currentType.isStatic()) {
 					qualifiedType = scope.environment().createRawType((ReferenceBinding)currentType.erasure(), qualifiedType);
 				} else if (rawQualified || qualifiedType.isParameterizedType()) {
 					qualifiedType = scope.environment().createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType);
@@ -87,7 +87,7 @@ public class QualifiedTypeReference extends TypeReference {
 					qualifiedType = currentType;
 				}
 			} else {
-				qualifiedType = currentType;
+				qualifiedType = currentType.isGenericType() ? (ReferenceBinding)scope.environment().convertToRawType(currentType) : currentType;
 			}			
 		}
 		this.resolvedType = qualifiedType;
