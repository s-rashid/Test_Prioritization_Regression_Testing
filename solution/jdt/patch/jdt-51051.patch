diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java
index 0fe35a5..23f4202 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java
@@ -6,24 +6,17 @@
  * http://www.eclipse.org/legal/epl-v10.html
  *
  * Contributors:
- *    jgarms@bea.com - initial API and implementation
+ *    jgarms@bea.com, wharley@bea.com - initial API and implementation
  *    
  *******************************************************************************/
 package org.eclipse.jdt.apt.core.util;
 
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
+import java.util.*;
 
 import org.eclipse.core.resources.ProjectScope;
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.Platform;
-import org.eclipse.core.runtime.preferences.DefaultScope;
 import org.eclipse.core.runtime.preferences.IEclipsePreferences;
 import org.eclipse.core.runtime.preferences.IPreferencesService;
 import org.eclipse.core.runtime.preferences.IScopeContext;
@@ -31,41 +24,21 @@ import org.eclipse.core.runtime.preferences.InstanceScope;
 import org.eclipse.jdt.apt.core.AptPlugin;
 import org.eclipse.jdt.apt.core.internal.FactoryContainer;
 import org.eclipse.jdt.core.IJavaProject;
-import org.osgi.service.prefs.BackingStoreException;
 
 /**
  * Accesses configuration data for APT.
  * Note that some of the code in org.eclipse.jdt.ui reads and writes settings
  * data directly, rather than calling into the methods of this class. 
  * 
+ * Helpful information about the Eclipse preferences mechanism can be found at:
+ * http://dev.eclipse.org/viewcvs/index.cgi/~checkout~/platform-core-home/documents/user_settings/faq.html
+ * 
  * TODO: synchronization of maps
  * TODO: NLS
  * TODO: rest of settings
  */
 public class AptConfig {
 	/**
-	 * Holds the options maps for each project.
-	 */
-	private static Map<IJavaProject, Map> _optionsMaps = new HashMap<IJavaProject, Map>(5);
-	
-	/**
-	 * Holds the containers for each project
-	 */
-	private static Map<IJavaProject, Map<FactoryContainer, Boolean>> _containerMaps = 
-		new HashMap<IJavaProject, Map<FactoryContainer, Boolean>>(5);
-	
-	private static Map<FactoryContainer, Boolean> _workspaceFactories = null;
-	
-	private static final Set<IJavaProject> _projectsWithFactoryPathLoaded = 
-		new HashSet<IJavaProject>(5);
-	
-	private static boolean _workspaceFactoryPathLoaded = false;
-	
-	private static final IEclipsePreferences[] preferencesLookup = new IEclipsePreferences[2];
-	private static final int PREF_INSTANCE = 0;
-	private static final int PREF_DEFAULT = 1;	
-
-	/**
 	 * Update the factory list and other apt settings
 	 */
 	private static class EclipsePreferencesListener implements IEclipsePreferences.IPreferenceChangeListener {
@@ -78,45 +51,43 @@ public class AptConfig {
 	}
 	
 	/**
-	 * Is annotation processing turned on for this project?
-	 * @param jproject an IJavaProject, or null to request workspace preferences.
-	 * @return
+	 * Used to set initial size of some maps.
 	 */
-	public static synchronized boolean isEnabled(IJavaProject jproject) {
-		Map options = getOptions(jproject);
-		return "true".equals(options.get(AptPreferenceConstants.APT_ENABLED));
-	}
+	private static final int INITIAL_PROJECTS_GUESS = 5;
 	
 	/**
-	 * Turn annotation processing on or off for this project.
-	 * TODO: what is the persistence model?  At present, it probably gets blown away
-	 * as soon as any other setting changes, and it never actually gets stored to disk.
-	 * @param jproject an IJavaProject, or null to set workspace preferences.
-	 * @param enabled
+	 * Holds the containers for each project
 	 */
-	public static synchronized void setEnabled(IJavaProject jproject, boolean enabled) {
-		Map options = _optionsMaps.get(jproject);
-		options.put(AptPreferenceConstants.APT_ENABLED, enabled ? "true" : "false");
-	}
+	private static Map<IJavaProject, Map<FactoryContainer, Boolean>> _containerMaps = 
+		new HashMap<IJavaProject, Map<FactoryContainer, Boolean>>(INITIAL_PROJECTS_GUESS);
 	
 	/**
-	 * Get the factory containers for this project. If no project-level configuration
-	 * is set, the workspace config will be returned. Any disabled containers
-	 * will not be returned.
-	 * 
-	 * @param jproj The java project in question. 
-	 * @param getDisabled if set, 
+	 * Holds the options maps for each project.
 	 */
-	public static synchronized List<FactoryContainer> getContainers(IJavaProject jproj) {
-		Map<FactoryContainer, Boolean> containers = getAllContainers(jproj);
-		List<FactoryContainer> result = new ArrayList<FactoryContainer>(containers.size());
-		for (Map.Entry<FactoryContainer, Boolean> entry : containers.entrySet()) {
-			if (entry.getValue()) {
-				result.add(entry.getKey());
-			}
-		}
-		return result;
-	}
+	private static Map<IJavaProject, Map<String, String>> _optionsMaps = 
+		new HashMap<IJavaProject, Map<String, String>>(INITIAL_PROJECTS_GUESS);
+	
+	private static final Set<IJavaProject> _projectsWithFactoryPathLoaded = 
+		new HashSet<IJavaProject>(INITIAL_PROJECTS_GUESS);
+	
+	private static Map<FactoryContainer, Boolean> _workspaceFactories = null;
+	
+	private static boolean _workspaceFactoryPathLoaded = false;
+	
+	private static final String FACTORYPATH_FILE = ".factorypath";
+	
+	/**
+     * Add the equivalent of -Akey=val to the list of processor options.
+     * @param key must be a nonempty string.  It should only include the key;
+     * that is, it should not start with "-A".
+     * @param jproj a project, or null to set the option workspace-wide.
+     * @param val can be null (equivalent to -Akey).
+     * @return the old value, or null if the option was not previously set.
+     */
+    public static String addProcessorOption(IJavaProject jproj, String key, String val) {
+    	// TODO
+    	return null;
+    }
 	
 	/**
 	 * Returns all containers for the provided project, including disabled ones
@@ -166,80 +137,44 @@ public class AptConfig {
 	}
 	
 	/**
-	 * Set the factory containers for a given project or the workspace.
-	 * @param jproj the java project, or null for the workspace
-	 */
-	public synchronized void setContainers(IJavaProject jproj, Map<FactoryContainer, Boolean> containers) 
-	throws IOException, CoreException 
-	{
-		if (jproj == null) {
-			// workspace
-			_workspaceFactories = new HashMap(containers);
-			_workspaceFactoryPathLoaded = true;
-		}
-		else {
-			_containerMaps.put(jproj, new HashMap(containers));
-			_projectsWithFactoryPathLoaded.add(jproj);
-		}
-		FactoryPathUtil.saveFactoryPathFile(jproj, containers);
-		
-	}
-
-	/**
-	 * Return the apt settings for this project, or the workspace settings
-	 * if they are not overridden by project settings.
-	 * TODO: should jproject be allowed to be NULL?
-	 * @param jproject
-	 * @return
+	 * Get the factory containers for this project. If no project-level configuration
+	 * is set, the workspace config will be returned. Any disabled containers
+	 * will not be returned.
+	 * 
+	 * @param jproj The java project in question. 
+	 * @param getDisabled if set, 
 	 */
-	private static Map getOptions(IJavaProject jproject) {
-		Map options = _optionsMaps.get(jproject);
-		if (null != options) {
-			return options;
-		}
-		// We didn't already have an options map for this project, so create one.
-		options = new HashMap(AptPreferenceConstants.NSETTINGS);
-
-		// First load workspace-wide, then overlay per-project options if possible.
-		loadWorkspaceOptions(options);
-		if (jproject.getProject() != null) {
-			IScopeContext context = new ProjectScope(jproject.getProject());
-			final IEclipsePreferences eclipsePreferences = context.getNode(AptPlugin.PLUGIN_ID);
-			try {
-				for (String s : eclipsePreferences.keys()) {
-					options.put(s, eclipsePreferences.get(s, ""));
-				}
-			}
-			catch (BackingStoreException e) {
-				// TODO
-				e.printStackTrace();
+	public static synchronized List<FactoryContainer> getContainers(IJavaProject jproj) {
+		Map<FactoryContainer, Boolean> containers = getAllContainers(jproj);
+		List<FactoryContainer> result = new ArrayList<FactoryContainer>(containers.size());
+		for (Map.Entry<FactoryContainer, Boolean> entry : containers.entrySet()) {
+			if (entry.getValue()) {
+				result.add(entry.getKey());
 			}
 		}
-		return options;
+		return result;
 	}
-
+	
 	/**
-	 * @param options
-	 */
-	private static void loadWorkspaceOptions(Map options) {
-		IPreferencesService service = Platform.getPreferencesService();
+     * Get the options that are the equivalent of the -A command line options
+     * for apt.  The -A and = are stripped out, so (key, value) is the
+     * equivalent of -Akey=value.  
+     * @param jproj a project, or null to query the workspace-wide setting.
+     * @return a map of (key, value) pairs.  Value can be null (equivalent to
+     * "-Akey").
+     */
+    public static Map<String, String> getProcessorOptions(IJavaProject jproj) {
+    	// TODO
+    	return null;
+    }
 
-		// set options using preferences service lookup
-		for (String optionName : AptPreferenceConstants.OPTION_NAMES) {
-		    String value = service.get(optionName, null, preferencesLookup);
-		    if (value != null) {
-			    options.put(optionName, value);
-		    }
-		}
-	}
-	
-	
 	/**
 	 * Initialize preferences lookups, and register change listeners.
-	 * This is called when the APT plugin is loaded.
+	 * This is called once, from AptPlugin.start().
 	 * TODO: the whole change-listener thing is still just copied and pasted from JDT without comprehension.
 	 */
 	public static void initialize() {
+		/* TODO: figure out listeners - here's some stolen sample code for ideas:
 		
 		// Create lookups
 		preferencesLookup[PREF_INSTANCE] = new InstanceScope().getNode(AptPlugin.PLUGIN_ID);
@@ -247,7 +182,6 @@ public class AptConfig {
 		// via the runtime.preferences extension point.
 		preferencesLookup[PREF_DEFAULT] = new DefaultScope().getNode(AptPlugin.PLUGIN_ID);
 
-/* TODO: figure out listeners
 		// Listen to instance preferences node removal from parent in order to refresh stored one
 		IEclipsePreferences.INodeChangeListener listener = new IEclipsePreferences.INodeChangeListener() {
 			public void added(IEclipsePreferences.NodeChangeEvent event) {
@@ -277,6 +211,132 @@ public class AptConfig {
 		((IEclipsePreferences) preferencesLookup[PREF_DEFAULT].parent()).addNodeChangeListener(listener);
 */
 	}
+	
+	/**
+	 * Is annotation processing turned on for this project?
+	 * @param jproject an IJavaProject, or null to request workspace preferences.
+	 * @return
+	 */
+	public static boolean isEnabled(IJavaProject jproject) {
+		return getBoolean(jproject, AptPreferenceConstants.APT_ENABLED);
+	}
+	
+	/**
+	 * Turn annotation processing on or off for this project.
+	 * @param jproject an IJavaProject, or null to set workspace preferences.
+	 * @param enabled
+	 */
+	public static void setEnabled(IJavaProject jproject, boolean enabled) {
+		setBoolean(jproject, AptPreferenceConstants.APT_ENABLED, enabled);
+	}
+	
+	private static synchronized boolean getBoolean(IJavaProject jproject, String optionName) {
+		Map options = getOptions(jproject);
+		return "true".equals(options.get(optionName));
+	}
+	
+    /**
+	 * Return the apt settings for this project, or the workspace settings
+	 * if they are not overridden by project settings.
+	 * TODO: should jproject be allowed to be NULL?
+	 * TODO: efficiently handle the case of projects that don't have per-project settings
+	 * (e.g., only cache one workspace-wide map, not a separate copy for each project).
+	 * @param jproject
+	 * @return
+	 */
+	private static Map getOptions(IJavaProject jproject) {
+		Map options = _optionsMaps.get(jproject);
+		if (null != options) {
+			return options;
+		}
+		// We didn't already have an options map for this project, so create one.
+		IPreferencesService service = Platform.getPreferencesService();
+		// Don't need to do this, because it's the default-default already:
+		//service.setDefaultLookupOrder(AptPlugin.PLUGIN_ID, null, lookupOrder);
+		options = new HashMap(AptPreferenceConstants.NSETTINGS);
+		if (jproject != null) {
+			IScopeContext projContext = new ProjectScope(jproject.getProject());
+			IScopeContext[] contexts = new IScopeContext[] { projContext };
+			for (String optionName : AptPreferenceConstants.OPTION_NAMES) {
+				String val = service.getString(AptPlugin.PLUGIN_ID, optionName, null, contexts);
+				if (val != null) {
+					options.put(optionName, val);
+				}
+			}
+		}
+		else {
+			// TODO: do we need to handle this case?
+			return null;
+		}
+		
+		return options;
+	}
+
+    private static synchronized String getString(IJavaProject jproject, String optionName) {
+		Map options = getOptions(jproject);
+		return (String)options.get(optionName);
+	}
+	
+	private static synchronized void setBoolean(IJavaProject jproject, String optionName, boolean value) {
+		// TODO: should we try to determine whether a project has no per-project settings,
+		// and if so, set the workspace settings?  Or, do we want the caller to tell us
+		// explicitly by setting jproject == null in that case?
+		
+		// TODO: when there are listeners, the following two lines will be superfluous:
+		Map options = getOptions(jproject);
+		options.put(AptPreferenceConstants.APT_ENABLED, value ? "true" : "false");
+		
+		IScopeContext context;
+		if (null != jproject) {
+			context = new ProjectScope(jproject.getProject());
+		}
+		else {
+			context = new InstanceScope();
+		}
+		IEclipsePreferences node = context.getNode(AptPlugin.PLUGIN_ID);
+		node.putBoolean(optionName, value);
+	}
+	
+	private static synchronized void setString(IJavaProject jproject, String optionName, String value) {
+		// TODO: should we try to determine whether a project has no per-project settings,
+		// and if so, set the workspace settings?  Or, do we want the caller to tell us
+		// explicitly by setting jproject == null in that case?
+		
+		// TODO: when there are listeners, the following two lines will be superfluous:
+		Map options = getOptions(jproject);
+		options.put(AptPreferenceConstants.APT_ENABLED, value);
+		
+		IScopeContext context;
+		if (null != jproject) {
+			context = new ProjectScope(jproject.getProject());
+		}
+		else {
+			context = new InstanceScope();
+		}
+		IEclipsePreferences node = context.getNode(AptPlugin.PLUGIN_ID);
+		node.put(optionName, value);
+	}
+
+    /**
+	 * Set the factory containers for a given project or the workspace.
+	 * @param jproj the java project, or null for the workspace
+	 */
+	public synchronized void setContainers(IJavaProject jproj, Map<FactoryContainer, Boolean> containers) 
+	throws IOException, CoreException 
+	{
+		if (jproj == null) {
+			// workspace
+			_workspaceFactories = new HashMap(containers);
+			_workspaceFactoryPathLoaded = true;
+		}
+		else {
+			_containerMaps.put(jproj, new HashMap(containers));
+			_projectsWithFactoryPathLoaded.add(jproj);
+		}
+		FactoryPathUtil.saveFactoryPathFile(jproj, containers);
+		
+	}
+ 
 
 	
 }
