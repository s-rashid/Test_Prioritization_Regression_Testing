diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/JarFactoryContainer.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/JarFactoryContainer.java
index d89fff1..f87558c 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/JarFactoryContainer.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/JarFactoryContainer.java
@@ -12,9 +12,17 @@
 
 package org.eclipse.jdt.apt.core.internal;
 
+import java.io.BufferedReader;
 import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
 
 public class JarFactoryContainer extends FactoryContainer
 {
@@ -23,13 +31,71 @@ public class JarFactoryContainer extends FactoryContainer
 		_jarFile = jarFile.getAbsoluteFile();
 	}
 	
-	public void loadFactoryNames() { 
-		// TODO 
+	protected List<String> loadFactoryNames() { 
+		return getServiceClassnamesFromJar( _jarFile );
 	}
 	
+    /**
+     * Given a jar file, get the names of any AnnotationProcessorFactory
+     * implementations it offers.  The information is based on the Sun
+     * <a href="http://java.sun.com/j2se/1.5.0/docs/guide/jar/jar.html#Service%20Provider">
+     * Jar Service Provider spec</a>: the jar file contains a META-INF/services
+     * directory; that directory contains text files named according to the desired
+     * interfaces; and each file contains the names of the classes implementing
+     * the specified service.  The files may also contain whitespace (which is to
+     * be ignored).  The '#' character indicates the beginning of a line comment,
+     * also to be ignored.  Implied but not stated in the spec is that this routine
+     * also ignores anything after the first nonwhitespace token on a line.
+     * @param jar the jar file.
+     * @return a list, possibly empty, of fully qualified classnames to be instantiated.
+     */
+    private List<String> getServiceClassnamesFromJar(File jar)
+    {
+        List<String> classNames = new ArrayList<String>();
+        JarFile jarFile;
+        try {
+            jarFile = new JarFile(jar);
+
+            for (String providerName : AUTOLOAD_SERVICES) {
+                JarEntry provider = jarFile.getJarEntry(providerName);
+                if (provider == null) {
+                    continue;
+                }
+                // Extract classnames from this text file.
+                InputStream is = jarFile.getInputStream(provider);
+                BufferedReader rd;
+                rd = new BufferedReader(new InputStreamReader(is, "UTF-8"));
+                for (String line = rd.readLine(); line != null; line = rd.readLine()) {
+                    // hack off any comments
+                    int iComment = line.indexOf('#');
+                    if (iComment >= 0) {
+                        line = line.substring(0, iComment);
+                    }
+                    // add the first non-whitespace token to the list
+                    final String[] tokens = line.split("\\s", 2);
+                    if (tokens[0].length() > 0) {
+                        classNames.add(tokens[0]);
+                    }
+                }
+                rd.close();
+            }
+            jarFile.close();
+        }
+        catch (IOException e) {
+            return classNames;
+        }
+        return classNames;
+    }
+	
+	
 	public boolean isPlugin() { return false; }
 	public URL getJarFileURL() throws MalformedURLException { return _jarFile.toURL(); }
 		
+    /** List of jar file entries that specify autoloadable service providers */
+    private static final String[] AUTOLOAD_SERVICES = {
+        "META-INF/services/com.sun.mirror.apt.AnnotationProcessorFactory"
+    };
+	
 	private File _jarFile;
 }
