diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/Index.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/Index.java
index 2bd98c3..8b34648 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/Index.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/Index.java
@@ -47,12 +47,14 @@ static final int MATCH_RULE_INDEX_MASK =
 
 public static boolean isMatch(char[] pattern, char[] word, int matchRule) {
 	if (pattern == null) return true;
-	if (pattern.length == 0) return matchRule != SearchPattern.R_EXACT_MATCH;
-	if (word.length == 0) return (matchRule & SearchPattern.R_PATTERN_MATCH) != 0 && pattern.length == 1 && pattern[0] == '*';
+	int patternLength = pattern.length;
+	int wordLength = word.length;
+	if (patternLength == 0) return matchRule != SearchPattern.R_EXACT_MATCH;
+	if (wordLength == 0) return (matchRule & SearchPattern.R_PATTERN_MATCH) != 0 && patternLength == 1 && pattern[0] == '*';
 
 	// First test camel case if necessary
 	boolean isCamelCase = (matchRule & SearchPattern.R_CAMELCASE_MATCH) != 0;
-	if (isCamelCase && pattern[0] == word[0] && CharOperation.camelCaseMatch(pattern, word)) {
+	if (isCamelCase &&  pattern[0] == word[0] && CharOperation.camelCaseMatch(pattern, word)) {
 		return true;
 	}
 
@@ -60,17 +62,21 @@ public static boolean isMatch(char[] pattern, char[] word, int matchRule) {
 	matchRule &= ~SearchPattern.R_CAMELCASE_MATCH;
 	switch(matchRule & MATCH_RULE_INDEX_MASK) {
 		case SearchPattern.R_EXACT_MATCH :
-			if (isCamelCase) return false;
-			return CharOperation.equals(pattern, word, false);
+			if (!isCamelCase) {
+				return patternLength == wordLength && CharOperation.equals(pattern, word, false);
+			}
+			// fall through prefix match if camel case failed
 		case SearchPattern.R_PREFIX_MATCH :
-			return CharOperation.prefixEquals(pattern, word, false);
+			return patternLength <= wordLength && CharOperation.prefixEquals(pattern, word, false);
 		case SearchPattern.R_PATTERN_MATCH :
 			return CharOperation.match(pattern, word, false);
 		case SearchPattern.R_EXACT_MATCH | SearchPattern.R_CASE_SENSITIVE :
-			if (isCamelCase) return false;
-			return pattern[0] == word[0] && CharOperation.equals(pattern, word);
+			if (!isCamelCase) {
+				return pattern[0] == word[0] && patternLength == wordLength && CharOperation.equals(pattern, word);
+			}
+			// fall through prefix match if camel case failed
 		case SearchPattern.R_PREFIX_MATCH | SearchPattern.R_CASE_SENSITIVE :
-			return pattern[0] == word[0] && CharOperation.prefixEquals(pattern, word);
+			return pattern[0] == word[0] && patternLength <= wordLength && CharOperation.prefixEquals(pattern, word);
 		case SearchPattern.R_PATTERN_MATCH | SearchPattern.R_CASE_SENSITIVE :
 			return CharOperation.match(pattern, word, true);
 	}
