diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java
index 80838a6..c07cf79 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java
@@ -14,7 +14,6 @@ import org.eclipse.jdt.internal.compiler.ASTVisitor;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants;
 import org.eclipse.jdt.internal.compiler.codegen.*;
 import org.eclipse.jdt.internal.compiler.flow.*;
-import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 import org.eclipse.jdt.internal.compiler.impl.Constant;
 import org.eclipse.jdt.internal.compiler.lookup.*;
 
@@ -39,10 +38,6 @@ public class TryStatement extends SubRoutineStatement {
 		returnAddressVariable,
 		secretReturnValue;
 
-	// only used in RET instruction emulation mode
-//	CaseLabel[] returnLocationLabels;
-//	int returnLocationsCount = 0;
-	
 	public final static char[] SecretReturnName = " returnAddress".toCharArray(); //$NON-NLS-1$
 	public final static char[] SecretAnyHandlerName = " anyExceptionHandler".toCharArray(); //$NON-NLS-1$
 	public static final char[] SecretLocalDeclarationName = " returnValue".toCharArray(); //$NON-NLS-1$
@@ -266,25 +261,20 @@ public class TryStatement extends SubRoutineStatement {
 		// in case the labels needs to be reinitialized
 		// when the code generation is restarted in wide mode
 		this.anyExceptionLabel = null;
-//		this.returnLocationsCount = 0;
-//		this.returnLocationLabels = null;
 
 		int pc = codeStream.position;
 		final int NO_FINALLY = 0;										// no finally block
 		final int FINALLY_SUBROUTINE = 1; 					// finally is generated as a subroutine (using jsr/ret bytecodes)
 		final int FINALLY_DOES_NOT_COMPLETE = 2;		// non returning finally is optimized with only one instance of finally block
 		final int FINALLY_INLINE = 3;								// finally block must be inlined since cannot use jsr/ret bytecodes >1.5
-		final int FINALLY_EMULATE_RET = 4;					// finally ret is emulated since cannot use jsr/ret bytecodes >1.5 (NOT WORKING)
+
 		int finallyMode;
 		if (this.subRoutineStartLabel == null) {
 			finallyMode = NO_FINALLY;
 		} else {
-			CompilerOptions options = currentScope.compilerOptions();
 			if (isSubRoutineEscaping()) {
 				finallyMode = FINALLY_DOES_NOT_COMPLETE;
-//			} else if (options.noJSRBytecode) {
-//				finallyMode = FINALLY_EMULATE_RET;
-			} else if (options.inlineJsrBytecode) {
+			} else if (currentScope.compilerOptions().inlineJsrBytecode) {
 				finallyMode = FINALLY_INLINE;
 			} else {
 				finallyMode = FINALLY_SUBROUTINE;
@@ -327,7 +317,6 @@ public class TryStatement extends SubRoutineStatement {
 				switch(finallyMode) {
 					case FINALLY_SUBROUTINE :
 					case FINALLY_INLINE :
-					case FINALLY_EMULATE_RET :
 						requiresNaturalExit = true;
 						// fall through
 					case NO_FINALLY :
@@ -373,7 +362,6 @@ public class TryStatement extends SubRoutineStatement {
 						switch(finallyMode) {
 							case FINALLY_SUBROUTINE :
 							case FINALLY_INLINE :
-							case FINALLY_EMULATE_RET :
 								requiresNaturalExit = true;
 								// fall through
 							case NO_FINALLY :
@@ -388,7 +376,7 @@ public class TryStatement extends SubRoutineStatement {
 			}
 			this.exitAnyExceptionHandler();
 			// extra handler for trailing natural exit (will be fixed up later on when natural exit is generated below)
-			ExceptionLabel naturalExitExceptionHandler = requiresNaturalExit && (finallyMode == FINALLY_SUBROUTINE || finallyMode == FINALLY_EMULATE_RET) 
+			ExceptionLabel naturalExitExceptionHandler = requiresNaturalExit && (finallyMode == FINALLY_SUBROUTINE) 
 						? new ExceptionLabel(codeStream, null) 
 						: null;
 
@@ -448,39 +436,6 @@ public class TryStatement extends SubRoutineStatement {
 						// subroutine
 						this.finallyBlock.generateCode(this.scope, codeStream);
 						break;
-					case FINALLY_EMULATE_RET :
-						// any exception handler
-//						codeStream.store(this.anyExceptionVariable, false);
-//						CaseLabel returnLocationLabel = recordReturnLocation(codeStream);
-//						codeStream.generateInlinedValue(this.returnLocationsCount-1);
-//						codeStream.store(this.returnAddressVariable, false);
-//						codeStream.goto_(this.subRoutineStartLabel);
-//						codeStream.recordPositionsFrom(finallySequenceStartPC, this.finallyBlock.sourceStart);
-//						returnLocationLabel.place();
-//						position = codeStream.position;						
-//						codeStream.throwAnyException(this.anyExceptionVariable);
-//						codeStream.recordPositionsFrom(position, this.finallyBlock.sourceEnd);
-//						// subroutine
-//						this.subRoutineStartLabel.place();
-//						codeStream.pushOnStack(this.scope.getJavaLangThrowable());
-//						position = codeStream.position;	
-//						this.finallyBlock.generateCode(this.scope, codeStream);
-//						position = codeStream.position;
-//						// RET emulation
-//						naturalExitReturnLocationLabel = recordReturnLocation(codeStream);
-//						System.arraycopy(this.returnLocationLabels, 0, this.returnLocationLabels = new CaseLabel[this.returnLocationsCount], 0, this.returnLocationsCount);
-//						int[] sortedIndexes = new int[this.returnLocationsCount];
-//						for (int i = 0; i < this.returnLocationsCount; i++) {
-//							sortedIndexes[i] = i;
-//						}
-//						defaultReturnLocationLabel = new CaseLabel(codeStream);
-//						codeStream.load(this.returnAddressVariable);
-//						codeStream.tableswitch(defaultReturnLocationLabel, 0, this.returnLocationsCount-1, sortedIndexes, sortedIndexes, this.returnLocationLabels);
-//						codeStream.recordPositionsFrom(
-//							position,
-//							this.finallyBlock.sourceEnd);
-						break;
-						// the tableswitch bytecode is part of the subroutine						
 				}
 				// will naturally fall into subsequent code after subroutine invocation
 				naturalExitLabel.place();
@@ -506,19 +461,6 @@ public class TryStatement extends SubRoutineStatement {
 							break;
 						case FINALLY_DOES_NOT_COMPLETE :
 							break;
-						case FINALLY_EMULATE_RET :
-//							position = codeStream.position;
-//							naturalExitExceptionHandler.placeStart();
-//							codeStream.generateInlinedValue(this.returnLocationsCount);
-//							codeStream.store(this.returnAddressVariable, false);
-//							codeStream.goto_(this.subRoutineStartLabel);
-//							naturalExitExceptionHandler.placeEnd();
-//							naturalExitReturnLocationLabel.place();
-//							codeStream.recordPositionsFrom(
-//								position,
-//								this.finallyBlock.sourceEnd);	
-//							defaultReturnLocationLabel.place();
-							break;
 					}
 				}
 			} else {
@@ -549,8 +491,7 @@ public class TryStatement extends SubRoutineStatement {
 		if (isSubRoutineEscaping()) {
 				codeStream.goto_(this.subRoutineStartLabel);
 		} else {
-			CompilerOptions options = currentScope.compilerOptions();
-			if (options.inlineJsrBytecode) {
+			if (currentScope.compilerOptions().inlineJsrBytecode) {
 				// cannot use jsr bytecode, then simply inline the subroutine
 				this.exitAnyExceptionHandler();
 				// inside try block, ensure to deactivate all catch block exception handlers while inlining finally block
@@ -563,12 +504,6 @@ public class TryStatement extends SubRoutineStatement {
 				for (int i = 0, length = this.enclosingExceptionLabels == null ? 0 : this.enclosingExceptionLabels.length; i < length; i++) {
 					this.enclosingExceptionLabels[i].placeStart();
 				}
-//			} else if (options.noJSRBytecode) {
-//				CaseLabel returnLocationLabel = recordReturnLocation(codeStream);
-//				codeStream.generateInlinedValue(this.returnLocationsCount-1);
-//				codeStream.store(this.returnAddressVariable, false);
-//				codeStream.goto_(this.subRoutineStartLabel);
-//				returnLocationLabel.place();
 			} else {
 				// classic subroutine invocation, distinguish case of non-returning subroutine
 				codeStream.jsr(this.subRoutineStartLabel);
@@ -598,20 +533,6 @@ public class TryStatement extends SubRoutineStatement {
 		return output;
 	}
 	
-	/**
-	 * Only used when emulating RET instruction for branching back from subroutine
-	 */
-//	private CaseLabel recordReturnLocation(CodeStream codeStream) {
-//		CaseLabel label = new CaseLabel(codeStream);
-//		if (this.returnLocationLabels == null) {
-//			this.returnLocationLabels = new CaseLabel[5];
-//		} else if (this.returnLocationLabels.length == this.returnLocationsCount) {
-//			System.arraycopy(this.returnLocationLabels, 0, this.returnLocationLabels = new CaseLabel[this.returnLocationsCount*2], 0, this.returnLocationsCount);
-//		}
-//		this.returnLocationLabels[this.returnLocationsCount++] = label;
-//		return label;
-//	}
-	
 	public void resolve(BlockScope upperScope) {
 
 		// special scope for secret locals optimization.	
@@ -631,15 +552,10 @@ public class TryStatement extends SubRoutineStatement {
 				// provision for returning and forcing the finally block to run
 				MethodScope methodScope = this.scope.methodScope();
 	
-				CompilerOptions options = upperScope.compilerOptions();
-				if (!options.inlineJsrBytecode) {
-//					if (options.noJSRBytecode) {
-//						// variable encoding the return site location
-//						this.returnAddressVariable = new LocalVariableBinding(TryStatement.SecretReturnName, TypeBinding.INT, ClassFileConstants.AccDefault, false);
-//					} else {
-						// the type does not matter as long as it is not a base type
-						this.returnAddressVariable = new LocalVariableBinding(TryStatement.SecretReturnName, upperScope.getJavaLangObject(), ClassFileConstants.AccDefault, false);
-//					}
+				// the type does not matter as long as it is not a base type
+				if (!upperScope.compilerOptions().inlineJsrBytecode) {
+					this.returnAddressVariable =
+						new LocalVariableBinding(TryStatement.SecretReturnName, upperScope.getJavaLangObject(), ClassFileConstants.AccDefault, false);
 					finallyScope.addLocalVariable(this.returnAddressVariable);
 					this.returnAddressVariable.setConstant(Constant.NotAConstant); // not inlinable
 				}
