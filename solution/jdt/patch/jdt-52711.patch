diff --git a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java
index 4a30936..aa75c6e 100644
--- a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java
+++ b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java
@@ -103,7 +103,6 @@ import org.eclipse.jdt.internal.compiler.ast.UnaryExpression;
 import org.eclipse.jdt.internal.compiler.ast.WhileStatement;
 import org.eclipse.jdt.internal.compiler.ast.Wildcard;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants;
-import org.eclipse.jdt.internal.compiler.env.IGenericType;
 import org.eclipse.jdt.internal.compiler.impl.Constant;
 import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
 import org.eclipse.jdt.internal.compiler.lookup.ClassScope;
@@ -886,17 +885,17 @@ public class CodeFormatterVisitor extends ASTVisitor {
 		/*
 		 * Type name
 		 */
-        switch(typeDeclaration.kind()) {
-        	case IGenericType.CLASS_DECL :
+        switch(TypeDeclaration.kind(typeDeclaration.modifiers)) {
+        	case TypeDeclaration.CLASS_DECL :
 				this.scribe.printNextToken(TerminalTokens.TokenNameclass, true); 
         		break;
-        	case IGenericType.INTERFACE_DECL :
+        	case TypeDeclaration.INTERFACE_DECL :
 				this.scribe.printNextToken(TerminalTokens.TokenNameinterface, true); 
         		break;
-        	case IGenericType.ENUM_DECL :
+        	case TypeDeclaration.ENUM_DECL :
 				this.scribe.printNextToken(TerminalTokens.TokenNameenum, true); 
         		break;
-        	case IGenericType.ANNOTATION_TYPE_DECL :
+        	case TypeDeclaration.ANNOTATION_TYPE_DECL :
 				this.scribe.printNextToken(TerminalTokens.TokenNameAT, this.preferences.insert_space_before_at_in_annotation_type_declaration);
 				this.scribe.printNextToken(TerminalTokens.TokenNameinterface, this.preferences.insert_space_after_at_in_annotation_type_declaration); 
         		break;
@@ -958,8 +957,9 @@ public class CodeFormatterVisitor extends ASTVisitor {
 		final TypeReference[] superInterfaces = typeDeclaration.superInterfaces;
 		if (superInterfaces != null) {
 			int alignment_for_superinterfaces;
-			switch(typeDeclaration.kind()) {
-				case IGenericType.ENUM_DECL :
+			int kind = TypeDeclaration.kind(typeDeclaration.modifiers);
+			switch(kind) {
+				case TypeDeclaration.ENUM_DECL :
 					alignment_for_superinterfaces = this.preferences.alignment_for_superinterfaces_in_enum_declaration;
 					break;
 				default:
@@ -977,7 +977,7 @@ public class CodeFormatterVisitor extends ASTVisitor {
 			do {
 				try {
 					this.scribe.alignFragment(interfaceAlignment, 0);
-					if (typeDeclaration.kind() == IGenericType.INTERFACE_DECL) {
+					if (kind == TypeDeclaration.INTERFACE_DECL) {
 						this.scribe.printNextToken(TerminalTokens.TokenNameextends, true);
 					} else  {
 						this.scribe.printNextToken(TerminalTokens.TokenNameimplements, true);
@@ -1010,12 +1010,13 @@ public class CodeFormatterVisitor extends ASTVisitor {
 		 */
 		String class_declaration_brace;
 		boolean space_before_opening_brace;
-		switch(typeDeclaration.kind()) {
-			case IGenericType.ENUM_DECL :
+		int kind = TypeDeclaration.kind(typeDeclaration.modifiers);
+		switch(kind) {
+			case TypeDeclaration.ENUM_DECL :
 				class_declaration_brace = this.preferences.brace_position_for_enum_declaration;
 				space_before_opening_brace = this.preferences.insert_space_before_opening_brace_in_enum_declaration;
 				break;
-			case IGenericType.ANNOTATION_TYPE_DECL :
+			case TypeDeclaration.ANNOTATION_TYPE_DECL :
 				class_declaration_brace = this.preferences.brace_position_for_annotation_type_declaration;
 				space_before_opening_brace =  this.preferences.insert_space_before_opening_brace_in_annotation_type_declaration;
 				break;
@@ -1028,11 +1029,11 @@ public class CodeFormatterVisitor extends ASTVisitor {
 		formatTypeOpeningBrace(class_declaration_brace, space_before_opening_brace, typeDeclaration);
 		
 		boolean indent_body_declarations_compare_to_header;
-		switch(typeDeclaration.kind()) {
-			case IGenericType.ENUM_DECL :
+		switch(kind) {
+			case TypeDeclaration.ENUM_DECL :
 				indent_body_declarations_compare_to_header = this.preferences.indent_body_declarations_compare_to_enum_declaration_header;
 				break;
-			case IGenericType.ANNOTATION_TYPE_DECL :
+			case TypeDeclaration.ANNOTATION_TYPE_DECL :
 				// TODO (olivier) might want to add an option for annotation type
 				indent_body_declarations_compare_to_header = this.preferences.indent_body_declarations_compare_to_type_header;
 				break;
@@ -1044,7 +1045,7 @@ public class CodeFormatterVisitor extends ASTVisitor {
 			this.scribe.indent();
 		}
 		
-		if (typeDeclaration.kind() == IGenericType.ENUM_DECL) {
+		if (kind == TypeDeclaration.ENUM_DECL) {
 			FieldDeclaration[] fieldDeclarations = typeDeclaration.fields;
 			boolean hasConstants = false;
 			if (fieldDeclarations != null) {
@@ -1122,13 +1123,13 @@ public class CodeFormatterVisitor extends ASTVisitor {
 			this.scribe.unIndent();
 		}
 		
-		switch(typeDeclaration.kind()) {
-			case IGenericType.ENUM_DECL :
+		switch(kind) {
+			case TypeDeclaration.ENUM_DECL :
 				if (this.preferences.insert_new_line_in_empty_enum_declaration) {
 					this.scribe.printNewLine();
 				}
 				break;
-			case IGenericType.ANNOTATION_TYPE_DECL :
+			case TypeDeclaration.ANNOTATION_TYPE_DECL :
 				// TODO (olivier) might want an option for annotation type
 				if (this.preferences.insert_new_line_in_empty_type_declaration) {
 					this.scribe.printNewLine();
@@ -2010,7 +2011,7 @@ public class CodeFormatterVisitor extends ASTVisitor {
 		boolean insertNewLine = memberLength > 0;
 		
 		if (!insertNewLine) {
-			if (typeDeclaration.kind() == IGenericType.ENUM_DECL) {
+			if (TypeDeclaration.kind(typeDeclaration.modifiers) == TypeDeclaration.ENUM_DECL) {
 				insertNewLine = this.preferences.insert_new_line_in_empty_enum_declaration;
 			} else if ((typeDeclaration.bits & ASTNode.IsAnonymousTypeMASK) != 0) {
 				insertNewLine = this.preferences.insert_new_line_in_empty_anonymous_type_declaration;
