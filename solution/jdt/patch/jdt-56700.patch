diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionJavadoc.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionJavadoc.java
index f1692f2..ffe5bb7 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionJavadoc.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionJavadoc.java
@@ -235,59 +235,61 @@ public class CompletionJavadoc extends Javadoc {
 		int paramTypeParamLength = this.paramTypeParameters == null ? 0 : this.paramTypeParameters.length;
 
 		// Verify if there's any type parameter to tag
-		TypeDeclaration typeDeclaration = null;
-		AbstractMethodDeclaration methodDeclaration = null;
+		TypeParameter[] parameters =  null;
 		TypeVariableBinding[] typeVariables = null;
 		switch (scope.kind) {
 			case Scope.METHOD_SCOPE:
-				methodDeclaration = ((MethodScope)scope).referenceMethod();
+				AbstractMethodDeclaration methodDeclaration = ((MethodScope)scope).referenceMethod();
 				if (methodDeclaration == null) return null;
+				parameters = methodDeclaration.typeParameters();
 				typeVariables = methodDeclaration.binding.typeVariables;
 				break;
 			case Scope.CLASS_SCOPE:
-				typeDeclaration = ((ClassScope) scope).referenceContext;
+				TypeDeclaration typeDeclaration = ((ClassScope) scope).referenceContext;
+				parameters = typeDeclaration.typeParameters;
 				typeVariables = typeDeclaration.binding.typeVariables;
 				break;
 		}
 		if (typeVariables == null || typeVariables.length == 0) return null;
 		
 		// Store all type parameters if there's no @param in javadoc
-		TypeParameter[] parameters = typeDeclaration==null ? methodDeclaration.typeParameters() : typeDeclaration.typeParameters;
-		int typeParametersLength = parameters == null ? 0 : parameters.length;
-		if (paramTypeParamLength == 0) {
-			char[][] missingParams = new char[typeParametersLength][];
-			for (int i = 0; i < typeParametersLength; i++) {
-				missingParams[i] = parameters[i].name;
+		if (parameters != null) {
+			int typeParametersLength = parameters.length;
+			if (paramTypeParamLength == 0) {
+				char[][] missingParams = new char[typeParametersLength][];
+				for (int i = 0; i < typeParametersLength; i++) {
+					missingParams[i] = parameters[i].name;
+				}
+				return missingParams;
 			}
-			return missingParams;
-		}
 
-		// Look for missing type parameter
-		char[][] missingParams = new char[typeParametersLength][];
-		int size = 0;
-		for (int i = 0; i < typeParametersLength; i++) {
-			TypeParameter parameter = parameters[i];
-			boolean found = false;
-			int paramNameRefCount = 0;
-			for (int j = 0; j < paramTypeParamLength && !found; j++) {
-				if (parameter.binding == this.paramTypeParameters[j].resolvedType) {
-					if (parameter.binding == paramNameRefBinding) { // do not count first occurence of param nmae reference
-						paramNameRefCount++;
-						found = paramNameRefCount > 1;
-					} else {
-						found = true;
+			// Look for missing type parameter
+			char[][] missingParams = new char[typeParametersLength][];
+			int size = 0;
+			for (int i = 0; i < typeParametersLength; i++) {
+				TypeParameter parameter = parameters[i];
+				boolean found = false;
+				int paramNameRefCount = 0;
+				for (int j = 0; j < paramTypeParamLength && !found; j++) {
+					if (parameter.binding == this.paramTypeParameters[j].resolvedType) {
+						if (parameter.binding == paramNameRefBinding) { // do not count first occurence of param nmae reference
+							paramNameRefCount++;
+							found = paramNameRefCount > 1;
+						} else {
+							found = true;
+						}
 					}
 				}
+				if (!found) {
+					missingParams[size++] = parameter.name;
+				}
 			}
-			if (!found) {
-				missingParams[size++] = parameter.name;
-			}
-		}
-		if (size > 0) {
-			if (size != typeParametersLength) {
-				System.arraycopy(missingParams, 0, missingParams = new char[size][], 0, size);
+			if (size > 0) {
+				if (size != typeParametersLength) {
+					System.arraycopy(missingParams, 0, missingParams = new char[size][], 0, size);
+				}
+				return missingParams;
 			}
-			return missingParams;
 		}
 		return null;
 	}
