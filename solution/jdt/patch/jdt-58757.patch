diff --git a/org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceBuildTests.java b/org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceBuildTests.java
index 564c907..a261c3e 100644
--- a/org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceBuildTests.java
+++ b/org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceBuildTests.java
@@ -18,8 +18,10 @@ import junit.framework.Test;
 
 import org.eclipse.core.resources.IWorkspace;
 import org.eclipse.core.resources.IWorkspaceRoot;
+import org.eclipse.core.resources.IWorkspaceRunnable;
 import org.eclipse.core.resources.ResourcesPlugin;
 import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.compiler.InvalidInputException;
 import org.eclipse.jdt.internal.compiler.CompilationResult;
@@ -55,6 +57,38 @@ public class FullSourceWorkspaceBuildTests extends FullSourceWorkspaceTests {
 	// Log files
 	private static PrintStream[] LOG_STREAMS = new PrintStream[LOG_TYPES.length];
 
+	// Options
+	private static final String ALL_OPTIONS = "-warn:" +
+			"allDeprecation," +
+			"allJavadoc," +
+			"assertIdentifier," +
+			"charConcat," +
+			"conditionAssign," +
+			"constructorName," +
+			"deprecation," +
+			"emptyBlock," +
+			"fieldHiding," +
+			"finally," +
+			"indirectStatic," +
+			"intfNonInherited," +
+			"localHiding," +
+			"maskedCatchBlock," +
+			"nls," +
+			"noEffectAssign," +
+			"pkgDefaultMethod," +
+			"semicolon," +
+			"unqualifiedField," +
+			"unusedArgument," +
+			"unusedImport," +
+			"unusedLocal," +
+			"unusedPrivate," +
+			"unusedThrown," +
+			"unnecessaryElse," +
+			"uselessTypeCheck," +
+			"specialParamHiding," +
+			"staticReceiver," +
+			"syntheticAccess," +
+			"tasks(TODO|FIX|XXX)";
 	
 	/**
 	 * @param name
@@ -64,8 +98,8 @@ public class FullSourceWorkspaceBuildTests extends FullSourceWorkspaceTests {
 	}
 
 	static {
-//		TESTS_PREFIX = "testPerfBatch";
-//		TESTS_NAMES = new String[] { "testBatchCompilerAllWarnings" };
+//		TESTS_PREFIX = "testCompile";
+//		TESTS_NAMES = new String[] { "testFullBuild", "testBatch" };
 	}
 
 	public static Test suite() {
@@ -82,7 +116,7 @@ public class FullSourceWorkspaceBuildTests extends FullSourceWorkspaceTests {
 	/*
 	 * Parse several times a file giving its name.
 	 */
-	private long[] parseFile(String fileName, int kind, int iterations) throws InvalidInputException, IOException {
+	long[] parseFile(String fileName, int kind, int iterations) throws InvalidInputException, IOException {
 
 		// Test for parser
 		File file = new File(fileName);
@@ -158,19 +192,37 @@ public class FullSourceWorkspaceBuildTests extends FullSourceWorkspaceTests {
 	 * @throws InvalidInputException
 	 * @throws IOException
 	 */
-	void parseParserFile(int kind) throws InvalidInputException, IOException {
+	void parseParserFile(final int kind) throws InvalidInputException, IOException, CoreException {
 
 		// Get workspace path
 		IWorkspace workspace = ResourcesPlugin.getWorkspace();
 		final IWorkspaceRoot workspaceRoot = workspace.getRoot();
-		final String targetWorkspacePath = workspaceRoot.getProject(JavaCore.PLUGIN_ID)
-			.getLocation()
-			.toFile()
-			.getCanonicalPath();
+		final String workspacePath = workspaceRoot.getLocation().toFile().getCanonicalPath();
 		
 		// Run test
 		for (int i=0; i<MEASURES_COUNT; i++) {
-			parseFile(targetWorkspacePath+"/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", kind, ITERATIONS_COUNT*6);
+			IWorkspaceRunnable compilation = new IWorkspaceRunnable() {
+				public void run(IProgressMonitor monitor) throws CoreException {
+					try {
+						parseFile(workspacePath+PARSER_WORKING_COPY.getPath(), kind, ITERATIONS_COUNT*6);
+					} catch (InvalidInputException e) {
+						// TODO Auto-generated catch block
+						e.printStackTrace();
+					} catch (IOException e) {
+						// TODO Auto-generated catch block
+						e.printStackTrace();
+					}
+				}
+			};
+			if (workspace.isTreeLocked()) {
+				compilation.run(null/*no progress available*/);
+			} else {
+				workspace.run(
+					compilation,
+					null/*don't take any lock*/,
+					IWorkspace.AVOID_UPDATE,
+					null/*no progress available here*/);
+			}
 		}
 
 		// dump measure
@@ -184,7 +236,7 @@ public class FullSourceWorkspaceBuildTests extends FullSourceWorkspaceTests {
 	 * 	- 0: only scan all tokens
 	 * 	- 1: scan all tokens and get each identifier
 	 */
-	private void scanFile(String fileName, int kind) throws InvalidInputException, IOException {
+	void scanFile(String fileName, int kind) throws InvalidInputException, IOException {
 
 		// Test for scanner
 		long tokenCount = 0;
@@ -218,12 +270,10 @@ public class FullSourceWorkspaceBuildTests extends FullSourceWorkspaceTests {
 			}
 		}
 
-		// Clean memory
-		runGc();
-
 		// Measures
 		long size = 0;
 		for (int i = 0; i < MEASURES_COUNT; i++) {
+			runGc();
 			startMeasuring();
 			for (int j = 0; j < SCAN_REPEAT; j++) {
 				scanner.resetTo(0, content.length);
@@ -288,6 +338,78 @@ public class FullSourceWorkspaceBuildTests extends FullSourceWorkspaceTests {
 	}
 
 	/**
+	 * Test performance for Scanner on one file.
+	 * Scan is executed many times ({@link #SCAN_REPEAT}) to have significant time for execution.
+	 * This test is repeated several times ({@link #ITERATIONS_COUNT}) to average time measuring.
+	 *  
+	 * @throws InvalidInputException
+	 * @throws IOException
+	 */
+	public void testScanner() throws InvalidInputException, IOException, CoreException {
+		// Do no longer print result in performance fingerprint
+		tagAsSummary("Compile>Scan>Parser>Default", true); // put in fingerprint
+
+		// Get workspace path
+		IWorkspace workspace = ResourcesPlugin.getWorkspace();
+		final IWorkspaceRoot workspaceRoot = workspace.getRoot();
+		final String workspacePath = workspaceRoot.getLocation().toFile().getCanonicalPath();
+
+		// Run test
+		IWorkspaceRunnable compilation = new IWorkspaceRunnable() {
+			public void run(IProgressMonitor monitor) throws CoreException {
+				try {
+					scanFile(workspacePath+PARSER_WORKING_COPY.getPath(), 1/*scan tokens+get identifiers*/);
+				} catch (InvalidInputException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				} catch (IOException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				}
+			}
+		};
+		if (workspace.isTreeLocked()) {
+			compilation.run(null/*no progress available*/);
+		} else {
+			workspace.run(
+				compilation,
+				null/*don't take any lock*/,
+				IWorkspace.AVOID_UPDATE,
+				null/*no progress available here*/);
+		}
+	}
+
+	/**
+	 * Test performance for Parser on one file.
+	 * Parse is executed many times ({@link #ITERATIONS_COUNT}) to have significant time for execution.
+	 * This test is repeated several times ({@link #MEASURES_COUNT}) to average time measuring.
+	 *  
+	 * @throws InvalidInputException
+	 * @throws IOException
+	 */
+	public void testParser() throws InvalidInputException, IOException, CoreException {
+		tagAsSummary("Compile>Parse>Parser>Default", true); // put in fingerprint
+		parseParserFile(0); // Parser kind
+	}
+
+	/**
+	 * Test performance for SourceElementParser on one file.
+	 * Parse is executed many times ({@link #ITERATIONS_COUNT}) to have significant time for execution.
+	 * This test is repeated several times ({@link #MEASURES_COUNT}) to average time measuring.
+	 * 
+	 * Note: This test has been temporarily removed as there's unexplicable difference between
+	 * HEAD and 3.0 versions for CPU Time results (10% faster) and Elapsed process (25% slower)...
+	 * TODO (frederic) Put back when platform-releng will have stabilized performance results process.
+	 *  
+	 * @throws InvalidInputException
+	 * @throws IOException
+	 */
+	public void _testSourceParser() throws InvalidInputException, IOException, CoreException {
+		tagAsSummary("Compile>SrcParse>Parser>Default", true); // put in fingerprint
+		parseParserFile(1); // SourceElementParser kind
+	}
+
+	/**
 	 * Full build with no warning.
 	 * 
 	 * Not calling tagAsSummary means that this test is currently evaluated
@@ -295,21 +417,27 @@ public class FullSourceWorkspaceBuildTests extends FullSourceWorkspaceTests {
 	 * 
 	 * @throws CoreException
 	 * @throws IOException
+	 * TODO (frederic) remove when results on new tests will be verified with releng output
 	 */
-	public void testFullBuildNoWarning() throws CoreException, IOException {
+	public void _testFullBuildNoWarning() throws CoreException, IOException {
 		tagAsSummary("Compile>Build>Clean>Full>No warning", false); // do NOT put in fingerprint
-		startBuild(warningOptions(-1/*no warning*/), false);
+		build(null, warningOptions(-1/*no warning*/), false);
 	}
 
 	/**
 	 * Full build with JavaCore default options.
 	 * 
+	 * WARNING:
+	 * 	This test must be and _ever_ stay at first position as it build the entire workspace.
+	 * 	It also cannot be removed as it's a Global fingerprint!
+	 * 	Move it would have great consequence on all other tests results...
+	 * 
 	 * @throws CoreException
 	 * @throws IOException
 	 */
 	public void testFullBuildDefault() throws CoreException, IOException {
-		tagAsGlobalSummary("Compile>Build>Clean>Full>Default warnings", true); // put in fingerprint
-		startBuild(warningOptions(0/*default warnings*/), false);
+		tagAsGlobalSummary("Compile>Build>Full>Wksp>Default warnings", true); // put in fingerprint
+		build(null, warningOptions(0/*default warnings*/), false);
 	}
 
 	/**
@@ -320,11 +448,47 @@ public class FullSourceWorkspaceBuildTests extends FullSourceWorkspaceTests {
 	 * 
 	 * @throws CoreException
 	 * @throws IOException
-	 * 
+	 * TODO (frederic) remove when results on new tests will be verified with releng output
 	 */
-	public void testFullBuildAllWarnings() throws CoreException, IOException {
+	public void _testFullBuildAllWarnings() throws CoreException, IOException {
 		tagAsSummary("Compile>Build>Clean>Full>All warnings", false); // do NOT put in fingerprint
-		startBuild(warningOptions(1/*all warnings*/), false);
+		build(null, warningOptions(1/*all warnings*/), false);
+	}
+
+	/**
+	 * JDT/Core project full build with no warning.
+	 * 
+	 * @throws CoreException
+	 * @throws IOException
+	 * @since 3.2 M6
+	 */
+	public void testFullBuildProjectNoWarning() throws CoreException, IOException {
+		tagAsSummary("Compile>Build>Full>Project>No warning", false); // do NOT put in fingerprint
+		build(JDT_CORE_PROJECT, warningOptions(-1/*no warning*/), false);
+	}
+
+	/**
+	 * JDT/Core project full build with JavaCore default options.
+	 * 
+	 * @throws CoreException
+	 * @throws IOException
+	 * @since 3.2 M6
+	 */
+	public void testFullBuildProjectDefault() throws CoreException, IOException {
+		tagAsSummary("Compile>Build>Full>Project>Default warnings", false); // put in fingerprint
+		build(JDT_CORE_PROJECT, warningOptions(0/*default warnings*/), false);
+	}
+
+	/**
+	 * JDT/Core project full build with all warnings.
+	 * 
+	 * @throws CoreException
+	 * @throws IOException
+	 * @since 3.2 M6
+	 */
+	public void testFullBuildProjectAllWarnings() throws CoreException, IOException {
+		tagAsSummary("Compile>Build>Full>Project>All warnings", false); // do NOT put in fingerprint
+		build(JDT_CORE_PROJECT, warningOptions(1/*all warnings*/), false);
 	}
 
 	/**
@@ -335,9 +499,9 @@ public class FullSourceWorkspaceBuildTests extends FullSourceWorkspaceTests {
 	 * 
 	 * @throws IOException
 	 */
-	public void testBatchCompilerNoWarning() throws IOException {
+	public void testBatchCompilerNoWarning() throws IOException, CoreException {
 		tagAsSummary("Compile>Batch>Compiler>No warning", true); // put in fingerprint
-		buildUsingBatchCompiler("-nowarn");
+		compile(JavaCore.PLUGIN_ID, "-nowarn", true/*log errors*/);
 	}
 
 	/**
@@ -347,10 +511,11 @@ public class FullSourceWorkspaceBuildTests extends FullSourceWorkspaceTests {
 	 * before put it in builds performance results.
 	 * 
 	 * @throws IOException
+	 * TODO (frederic) remove when results on new tests will be verified with releng output
 	 */
-	public void testBatchCompilerDefault() throws IOException {
+	public void _testBatchCompilerDefault() throws IOException, CoreException {
 		tagAsSummary("Compile>Batch>Compiler>Default warnings", false); // do NOT put in fingerprint
-		buildUsingBatchCompiler("");
+		compile(JavaCore.PLUGIN_ID, "", true/*log errors*/);
 	}
 
 	/**
@@ -360,10 +525,11 @@ public class FullSourceWorkspaceBuildTests extends FullSourceWorkspaceTests {
 	 * before put it in builds performance results.
 	 * 
 	 * @throws IOException
+	 * TODO (frederic) remove when results on new tests will be verified with releng output
 	 */
-	public void testBatchCompilerJavadoc() throws IOException {
+	public void _testBatchCompilerJavadoc() throws IOException, CoreException {
 		tagAsSummary("Compile>Batch>Compiler>Javadoc warnings", false); // do NOT put in fingerprint
-		buildUsingBatchCompiler("-warn:javadoc");
+		compile(JavaCore.PLUGIN_ID, "-warn:javadoc", true/*log errors*/);
 	}
 
 	/**
@@ -373,11 +539,11 @@ public class FullSourceWorkspaceBuildTests extends FullSourceWorkspaceTests {
 	 * before put it in builds performance results.
 	 * 
 	 * @throws IOException
+	 * TODO (frederic) remove when results on new tests will be verified with releng output
 	 */
-	// TODO (frederic) put back after having understood why this test result can have variation over 20%
-	public void _testBatchCompilerAllJavadoc() throws IOException {
+	public void _testBatchCompilerAllJavadoc() throws IOException, CoreException {
 		tagAsSummary("Compile>Batch>Compiler>All Javadoc warnings", false); // do NOT put in fingerprint
-		buildUsingBatchCompiler("-warn:allJavadoc");
+		compile(JavaCore.PLUGIN_ID, "-warn:allJavadoc", true/*log errors*/);
 	}
 
 	/**
@@ -387,96 +553,65 @@ public class FullSourceWorkspaceBuildTests extends FullSourceWorkspaceTests {
 	 * before put it in builds performance results.
 	 * 
 	 * @throws IOException
+	 * TODO (frederic) remove when results on new tests will be verified with releng output
 	 */
-	public void testBatchCompilerAllWarnings() throws IOException {
+	public void _testBatchCompilerAllWarnings() throws IOException, CoreException {
 		tagAsSummary("Compile>Batch>Compiler>All warnings", false); // do NOT put in fingerprint
+		compile(JavaCore.PLUGIN_ID, ALL_OPTIONS, true/*log errors*/);
+	}
 
-		String allOptions = "-warn:" +
-			"allDeprecation," +
-			"allJavadoc," +
-			"assertIdentifier," +
-			"charConcat," +
-			"conditionAssign," +
-			"constructorName," +
-			"deprecation," +
-			"emptyBlock," +
-			"fieldHiding," +
-			"finally," +
-			"indirectStatic," +
-			"intfNonInherited," +
-			"localHiding," +
-			"maskedCatchBlock," +
-			"nls," +
-			"noEffectAssign," +
-			"pkgDefaultMethod," +
-			"semicolon," +
-			"unqualifiedField," +
-			"unusedArgument," +
-			"unusedImport," +
-			"unusedLocal," +
-			"unusedPrivate," +
-			"unusedThrown," +
-			"unnecessaryElse," +
-			"uselessTypeCheck," +
-			"specialParamHiding," +
-			"staticReceiver," +
-			"syntheticAccess," +
-			"tasks(TODO|FIX|XXX)";
-		buildUsingBatchCompiler(allOptions);
+	/**
+	 * Compile JDT/Core project with default warnings
+	 * 
+	 * @throws IOException
+	 * @since 3.2 M6
+	 */
+	public void testCompileJDTCoreProjectNoWarning() throws IOException, CoreException {
+		tagAsSummary("Compile>Project>JDT/Core>No warning", false); // do NOT put in fingerprint
+		compile(JavaCore.PLUGIN_ID, "-nowarn", false/*no log*/);
 	}
 
 	/**
-	 * Test performance for Scanner on one file.
-	 * Scan is executed many times ({@link #SCAN_REPEAT}) to have significant time for execution.
-	 * This test is repeated several times ({@link #ITERATIONS_COUNT}) to average time measuring.
-	 *  
-	 * @throws InvalidInputException
+	 * Compile JDT/Core project with default warnings
+	 * 
 	 * @throws IOException
+	 * @since 3.2 M6
 	 */
-	public void testScanner() throws InvalidInputException, IOException {
-		// Do no longer print result in performance fingerprint
-		tagAsSummary("Compile>Scan>Parser>Default", true); // put in fingerprint
+	public void testCompileJDTCoreProjectDefault() throws IOException, CoreException {
+		tagAsSummary("Compile>Project>JDT/Core>Default warnings", false); // do NOT put in fingerprint
+		compile(JavaCore.PLUGIN_ID, "", false/*no log*/);
+	}
 
-		// Get workspace path
-		IWorkspace workspace = ResourcesPlugin.getWorkspace();
-		final IWorkspaceRoot workspaceRoot = workspace.getRoot();
-		final String targetWorkspacePath = workspaceRoot.getProject(JavaCore.PLUGIN_ID)
-			.getLocation()
-			.toFile()
-			.getCanonicalPath();
-		
-		// Run test
-//		scanFile(targetWorkspacePath+"/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", 0/*only scan tokens*/);
-		scanFile(targetWorkspacePath+"/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", 1/*scan tokens+get identifiers*/);
+	/**
+	 * Compile JDT/Core project with default javadoc warnings
+	 * 
+	 * @throws IOException
+	 * @since 3.2 M6
+	 */
+	public void testCompileJDTCoreProjectJavadoc() throws IOException, CoreException {
+		tagAsSummary("Compile>Project>JDT/Core>Javadoc warnings", false); // do NOT put in fingerprint
+		compile(JavaCore.PLUGIN_ID, "-warn:javadoc", false/*no log*/);
 	}
 
 	/**
-	 * Test performance for Parser on one file.
-	 * Parse is executed many times ({@link #ITERATIONS_COUNT}) to have significant time for execution.
-	 * This test is repeated several times ({@link #MEASURES_COUNT}) to average time measuring.
-	 *  
-	 * @throws InvalidInputException
+	 * Compile JDT/Core project with all warnings
+	 * 
 	 * @throws IOException
+	 * @since 3.2 M6
 	 */
-	public void testParser() throws InvalidInputException, IOException {
-		tagAsSummary("Compile>Parse>Parser>Default", true); // put in fingerprint
-		parseParserFile(0); // Parser kind
+	public void testCompileJDTCoreProjectAllWarnings() throws IOException, CoreException {
+		tagAsSummary("Compile>Project>JDT/Core>All warnings", false); // do NOT put in fingerprint
+		compile(JavaCore.PLUGIN_ID, ALL_OPTIONS, false/*no log*/);
 	}
 
 	/**
-	 * Test performance for SourceElementParser on one file.
-	 * Parse is executed many times ({@link #ITERATIONS_COUNT}) to have significant time for execution.
-	 * This test is repeated several times ({@link #MEASURES_COUNT}) to average time measuring.
+	 * Compile JDT/Core project with default warnings
 	 * 
-	 * Note: This test has been temporarily removed as there's unexplicable difference between
-	 * HEAD and 3.0 versions for CPU Time results (10% faster) and Elapsed process (25% slower)...
-	 * TODO (frederic) Put back when platform-releng will have stabilized performance results process.
-	 *  
-	 * @throws InvalidInputException
 	 * @throws IOException
+	 * @since 3.2 M6
 	 */
-	public void _testSourceParser() throws InvalidInputException, IOException {
-		tagAsSummary("Compile>SrcParse>Parser>Default", true); // put in fingerprint
-		parseParserFile(1); // SourceElementParser kind
+	public void testCompileSWTProjectDefault() throws IOException, CoreException {
+		tagAsSummary("Compile>Project>SWT>Default warnings", false); // do NOT put in fingerprint
+		compile("org.eclipse.swt", "", false/*no log*/);
 	}
 }
