diff --git a/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/APTTestBase.java b/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/APTTestBase.java
new file mode 100644
index 0000000..341ba6d
--- /dev/null
+++ b/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/APTTestBase.java
@@ -0,0 +1,146 @@
+/*******************************************************************************
+ * Copyright (c) 2005 BEA Systems, Inc.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *    tyeung@bea.com - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.apt.tests;
+
+import org.eclipse.core.resources.IFolder;
+import org.eclipse.core.resources.IMarker;
+import org.eclipse.core.resources.IProject;
+import org.eclipse.core.resources.IResource;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IPath;
+
+import org.eclipse.jdt.apt.tests.annotations.ProcessorTestStatus;
+import org.eclipse.jdt.core.tests.builder.Tests;
+import org.eclipse.jdt.core.tests.util.Util;
+
+/** 
+ * Setup a project for common APT testing.
+ */
+public abstract class APTTestBase extends Tests{
+	
+	public APTTestBase(final String name)
+	{
+		super(name);
+	}
+	
+	/**
+	 * Set up a basic project with the following properties.
+	 * - java compliances level is 1.5  
+	 * - 'src' is the source folder
+	 * - 'bin' is the output folder	  
+	 * - add java class library into teh build class path
+	 * - create and add an annotation jar.
+	 */
+	public void setUp() throws Exception
+	{	
+		ProcessorTestStatus.reset();
+		
+		super.setUp();
+
+		env.resetWorkspace();
+
+		// project will be deleted by super-class's tearDown() method
+		IPath projectPath = env.addProject( getProjectName(), "1.5" ); //$NON-NLS-1$
+		env.addExternalJars( projectPath, Util.getJavaClassLibs() );
+		fullBuild( projectPath );
+
+		// remove old package fragment root so that names don't collide
+		env.removePackageFragmentRoot( projectPath, "" ); //$NON-NLS-1$
+		env.addPackageFragmentRoot( projectPath, "src" ); //$NON-NLS-1$
+		env.setOutputFolder( projectPath, "bin" ); //$NON-NLS-1$
+
+		TestUtil.createAndAddAnnotationJar( env.getJavaProject( projectPath ) );
+	}
+	
+	public String getProjectName()
+	{
+		return this.getClass().getName() + "Project"; //$NON-NLS-1$
+	}
+
+	public IPath getSourcePath()
+	{
+		IProject project = env.getProject( getProjectName() );
+		IFolder srcFolder = project.getFolder( "src" ); //$NON-NLS-1$
+		IPath srcRoot = srcFolder.getFullPath();
+		return srcRoot;
+	}
+	
+	private String concate(String[] messages){
+		final int len = messages == null ? 0 : messages.length;
+		StringBuilder buffer = new StringBuilder();
+		for(int i=0; i<len; i++ ){
+			buffer.append(messages[i]);
+			buffer.append('\n');
+		}
+		return buffer.toString();
+	}
+	
+	private String concate(IMarker[] markers){
+		final int len = markers == null ? 0 : markers.length;
+		StringBuilder buffer = new StringBuilder();
+		for(int i=0; i<len; i++ ){
+			try{
+				buffer.append(markers[i].getAttribute(IMarker.MESSAGE));
+			}
+			catch(CoreException ce){
+				assertTrue("unexpected core exception" + ce.getMessage(), false); //$NON-NLS-1$
+			}
+			buffer.append('\n');
+		}
+		return buffer.toString();
+	}
+	
+	protected void expectingMarkers(String[] messages)
+	{	
+		final IMarker[] markers = getAPTBuildMarkerFor(env.getWorkspaceRootPath());
+		assertEquals(concate(messages), concate(markers));
+	}
+	
+	protected void expectingNoMarkers() {
+		expectingNoMarkers(env.getWorkspaceRootPath());
+	}
+	
+	protected void expectingNoMarkers(IPath path)
+	{
+		final IMarker[] markers = getAPTBuildMarkerFor(path);
+		
+		if( markers != null && markers.length != 0 ){
+			try{
+				assertTrue("unexpected marker(s) : " + markers[0].getAttribute(IMarker.MESSAGE), false); //$NON-NLS-1$
+			}
+			catch(CoreException ce){
+				assertTrue("unexpected core exception" + ce.getMessage(), false); //$NON-NLS-1$
+			}
+		}
+	}
+	
+	@SuppressWarnings("unchecked")
+	protected IMarker[] getAPTBuildMarkerFor(IPath path){
+		IResource resource;
+		if(path.equals(env.getWorkspaceRootPath())){
+			resource = env.getWorkspace().getRoot();
+		} else {
+			IProject p = env.getProject(path);
+			if(p != null && path.equals(p.getFullPath())) {
+				resource = env.getProject(path.lastSegment());
+			} else if(path.getFileExtension() == null) {
+				resource = env.getWorkspace().getRoot().getFolder(path);
+			} else {
+				resource = env.getWorkspace().getRoot().getFile(path);
+			}
+		}
+		try {
+			return resource.findMarkers("org.eclipse.jdt.apt.core.marker", true, IResource.DEPTH_INFINITE);
+		} catch(CoreException e){
+			return null;
+		}
+	}
+}
