diff --git a/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/mirrortest/MirrorDeclarationTestAnnotationProcessor.java b/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/mirrortest/MirrorDeclarationTestAnnotationProcessor.java
index 82bd87e..308ed4d 100644
--- a/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/mirrortest/MirrorDeclarationTestAnnotationProcessor.java
+++ b/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/mirrortest/MirrorDeclarationTestAnnotationProcessor.java
@@ -26,7 +26,9 @@ package org.eclipse.jdt.apt.tests.annotations.mirrortest;
 
 import java.util.Collection;
 
-import com.sun.mirror.apt.AnnotationProcessor;
+import org.eclipse.jdt.apt.tests.annotations.BaseProcessor;
+import org.eclipse.jdt.apt.tests.annotations.ProcessorTestStatus;
+
 import com.sun.mirror.apt.AnnotationProcessorEnvironment;
 import com.sun.mirror.declaration.AnnotationMirror;
 import com.sun.mirror.declaration.AnnotationTypeDeclaration;
@@ -46,22 +48,15 @@ import com.sun.mirror.type.ClassType;
 import com.sun.mirror.type.ReferenceType;
 
 @SuppressWarnings("nls")
-public class MirrorDeclarationTestAnnotationProcessor implements AnnotationProcessor {
-	
-	public static final String NO_ERRORS = "NO ERRORS"; //$NON-NLS-1$
-	
-	/** Used by the test harness to verify that no errors were encountered **/
-	public static String ERROR = NO_ERRORS;
-	
-	private final AnnotationProcessorEnvironment env;
+public class MirrorDeclarationTestAnnotationProcessor extends BaseProcessor {
 	
 	public MirrorDeclarationTestAnnotationProcessor(AnnotationProcessorEnvironment env) {
-		this.env = env;
+		super(env);
 	}
 
 	public void process() {
 		try {
-			Collection<TypeDeclaration> decls = env.getSpecifiedTypeDeclarations();
+			Collection<TypeDeclaration> decls = _env.getSpecifiedTypeDeclarations();
 			TypeDeclaration testClass = null;
 			ClassDeclaration testClassDec = null;
 			for(TypeDeclaration decl : decls) {
@@ -80,44 +75,12 @@ public class MirrorDeclarationTestAnnotationProcessor implements AnnotationProce
 			testMethodDeclaration(testClassDec);
 		}
 		catch (Throwable t) {
-			if (ERROR == null) {
-				ERROR = t.toString();
+			if (!ProcessorTestStatus.hasErrors()) {
+				ProcessorTestStatus.failWithoutException(t.toString());
 			}
 			t.printStackTrace();
 		}
 	}
-
-	private void assertEquals(String reason, Object expected, Object actual) {
-		if (expected == actual)
-			return;
-		if (expected != null && expected.equals(actual))
-			return;
-		fail("Expected " + expected + ", but saw " + actual + ". Reason: " + reason);
-	}
-
-	private void assertEquals(String reason, String expected, String actual) {
-		if (expected == actual)
-			return;
-		if (expected != null && expected.equals(actual))
-			return;
-		fail("Expected " + expected + ", but saw " + actual + ". Reason: " + reason);
-	}
-	
-	private void assertEquals(String reason, int expected, int actual) {
-		if (expected == actual)
-			return;
-		fail("Expected " + expected + ", but saw " + actual + ". Reason: " + reason);
-	}
-	
-	private void assertTrue(String reason, boolean expected) {
-		if (!expected)
-			fail(reason);
-	}
-	
-	private void fail(final String reason) {
-		ERROR = reason;
-		throw new IllegalStateException("Failed during test: " + reason);
-	}
 	
 	
 	/**
@@ -134,23 +97,23 @@ public class MirrorDeclarationTestAnnotationProcessor implements AnnotationProce
 		
 		//AnnotationMirror tests
 		Collection<AnnotationMirror> annoMirrors = testClass.getAnnotationMirrors();
-		assertEquals("Number of annotation mirrors", 1, annoMirrors.size());
+		ProcessorTestStatus.assertEquals("Number of annotation mirrors", 1, annoMirrors.size());
 		
         AnnotationMirror annoMirror = annoMirrors.iterator().next();
-        assertTrue("Annotation mirror contents", annoMirror.toString().startsWith("@MirrorDeclarationTestAnnotation"));
+        ProcessorTestStatus.assertTrue("Annotation mirror contents", annoMirror.toString().startsWith("@MirrorDeclarationTestAnnotation"));
         
         AnnotationType annoType = annoMirror.getAnnotationType();
-        assertTrue("AnnotationType name", annoType.toString().endsWith("mirrortest.MirrorDeclarationTestAnnotation"));
+        ProcessorTestStatus.assertTrue("AnnotationType name", annoType.toString().endsWith("mirrortest.MirrorDeclarationTestAnnotation"));
         
 
         //AnnotationTypeDeclaration tests
         AnnotationTypeDeclaration annoTypeDecl = annoType.getDeclaration();
-        assertEquals("AnnotationTypeDeclaration same as AnnotationType", annoType, annoTypeDecl);
+        ProcessorTestStatus.assertEquals("AnnotationTypeDeclaration same as AnnotationType", annoType, annoTypeDecl);
         
         
         //AnnotationTypeElementDeclaration and AnnotationValue tests
         Collection<AnnotationTypeElementDeclaration> elementDeclarations = annoTypeDecl.getMethods();
-        assertEquals("Number of methods on annotation", 2, elementDeclarations.size());
+        ProcessorTestStatus.assertEquals("Number of methods on annotation", 2, elementDeclarations.size());
 
         AnnotationTypeElementDeclaration elementString = null;
         AnnotationTypeElementDeclaration elementInt = null;
@@ -160,15 +123,15 @@ public class MirrorDeclarationTestAnnotationProcessor implements AnnotationProce
         	if(ated.toString().startsWith("i"))
         		elementInt = ated;
         }
-        assertEquals("declaring type same as AnnotationTypeDeclaration", annoTypeDecl, elementString.getDeclaringType());
-        assertEquals("declaring type same as AnnotationTypeDeclaration", annoTypeDecl, elementInt.getDeclaringType());
+        ProcessorTestStatus.assertEquals("declaring type same as AnnotationTypeDeclaration", annoTypeDecl, elementString.getDeclaringType());
+        ProcessorTestStatus.assertEquals("declaring type same as AnnotationTypeDeclaration", annoTypeDecl, elementInt.getDeclaringType());
 
         AnnotationValue valueString = elementString.getDefaultValue();
         AnnotationValue valueInt = elementInt.getDefaultValue();
-        assertEquals("", "bob", valueString.getValue());
-        assertEquals("", new Integer(3), valueInt.getValue());
-        assertEquals("", "bob", valueString.toString());
-        assertEquals("", "3", valueInt.toString());
+        ProcessorTestStatus.assertEquals("", "bob", valueString.getValue());
+        ProcessorTestStatus.assertEquals("", new Integer(3), valueInt.getValue());
+        ProcessorTestStatus.assertEquals("", "bob", valueString.toString());
+        ProcessorTestStatus.assertEquals("", "3", valueInt.toString());
 	}
 	
 	/**
@@ -182,7 +145,7 @@ public class MirrorDeclarationTestAnnotationProcessor implements AnnotationProce
 			
 		//ClassDeclaration tests
 		Collection<ConstructorDeclaration> constructDecls = testClassDec.getConstructors();
-		assertEquals("Number of constructors", 2, constructDecls.size());
+		ProcessorTestStatus.assertEquals("Number of constructors", 2, constructDecls.size());
 
 		ConstructorDeclaration constructNoArg = null;
 		ConstructorDeclaration constructIntArg = null;
@@ -192,18 +155,18 @@ public class MirrorDeclarationTestAnnotationProcessor implements AnnotationProce
 			if(construct.toString().endsWith("(int j)"))
 				constructIntArg = construct;
 		}
-		assertTrue("constructor with no args", constructNoArg != null);
-		assertTrue("constructor with one (int) arg", constructIntArg != null);
+		ProcessorTestStatus.assertTrue("constructor with no args", constructNoArg != null);
+		ProcessorTestStatus.assertTrue("constructor with one (int) arg", constructIntArg != null);
 		
 		Collection<MethodDeclaration> methodDecls = testClassDec.getMethods();
-		assertEquals("Number of methods", 2, methodDecls.size());
+		ProcessorTestStatus.assertEquals("Number of methods", 2, methodDecls.size());
 
 		MethodDeclaration methodDecl = null;
 		methodDecl = methodDecls.iterator().next();
-		assertTrue("method declaration exists", methodDecl != null);
+		ProcessorTestStatus.assertTrue("method declaration exists", methodDecl != null);
 		
 		ClassType superClass = testClassDec.getSuperclass();
-		assertEquals("Object is only super", "java.lang.Object", superClass.toString());	
+		ProcessorTestStatus.assertEquals("Object is only super", "java.lang.Object", superClass.toString());	
 	}
 	
 	/**
@@ -222,10 +185,10 @@ public class MirrorDeclarationTestAnnotationProcessor implements AnnotationProce
 			if(decl.toString().endsWith("EnumDec"))
 				enumDecl = (EnumDeclaration)decl;
 		}
-		assertTrue("EnumDeclaration exists", enumDecl != null);
+		ProcessorTestStatus.assertTrue("EnumDeclaration exists", enumDecl != null);
 
 		Collection<EnumConstantDeclaration> enumConstDecls = enumDecl.getEnumConstants();
-		assertEquals("Number of enum constants", 2, enumConstDecls.size());
+		ProcessorTestStatus.assertEquals("Number of enum constants", 2, enumConstDecls.size());
 		EnumConstantDeclaration enumConstAardvark = null;
 		EnumConstantDeclaration enumConstAnteater = null;
 		for(EnumConstantDeclaration enumConst : enumConstDecls) {
@@ -234,33 +197,33 @@ public class MirrorDeclarationTestAnnotationProcessor implements AnnotationProce
 			if(enumConst.toString().equals("anteater"))
 				enumConstAnteater = enumConst;
 		}
-		assertTrue("enum constant \"aardvark\" exists", enumConstAardvark != null);
-		assertTrue("enum constant \"anteater\" exists", enumConstAnteater != null);
+		ProcessorTestStatus.assertTrue("enum constant \"aardvark\" exists", enumConstAardvark != null);
+		ProcessorTestStatus.assertTrue("enum constant \"anteater\" exists", enumConstAnteater != null);
 		
 		//EnumConstantDeclaration tests
 		EnumDeclaration declaringTypeAardvark = enumConstAardvark.getDeclaringType();
 		EnumDeclaration declaringTypeAnteater = enumConstAnteater.getDeclaringType();
-		assertEquals("Declaring type is EnumDec", "mirrortestpackage.DeclarationTestClass.EnumDec", declaringTypeAardvark.toString());
-		assertEquals("Declaring type is EnumDec", "mirrortestpackage.DeclarationTestClass.EnumDec", declaringTypeAnteater.toString());
+		ProcessorTestStatus.assertEquals("Declaring type is EnumDec", "mirrortestpackage.DeclarationTestClass.EnumDec", declaringTypeAardvark.toString());
+		ProcessorTestStatus.assertEquals("Declaring type is EnumDec", "mirrortestpackage.DeclarationTestClass.EnumDec", declaringTypeAnteater.toString());
 		
 		
 		//Modifier tests
 		Modifier[] valuesArray = Modifier.values();
 		int valuesArrayLength = valuesArray.length;
-		assertEquals("Modifier.values() array length", 11, valuesArrayLength);
+		ProcessorTestStatus.assertEquals("Modifier.values() array length", 11, valuesArrayLength);
 
-		assertEquals("Modifier.ABSTRACT", "abstract", Modifier.ABSTRACT.toString());
-		assertEquals("Modifier.FINAL", "final", Modifier.FINAL.toString());
-		assertEquals("Modifier.NATIVE", "native", Modifier.NATIVE.toString());
-		assertEquals("Modifier.PRIVATE", "private", Modifier.PRIVATE.toString());
-		assertEquals("Modifier.PROTECTED", "protected", Modifier.PROTECTED.toString());
-		assertEquals("Modifier.PUBLIC", "public", Modifier.PUBLIC.toString());
-		assertEquals("Modifier.STATIC", "static", Modifier.STATIC.toString());
-		assertEquals("Modifier.STRICTFP", "strictfp", Modifier.STRICTFP.toString());
-		assertEquals("Modifier.SYNCHRONIZED", "synchronized", Modifier.SYNCHRONIZED.toString());
-		assertEquals("Modifier.TRANSIENT", "transient", Modifier.TRANSIENT.toString());
-		assertEquals("Modifier.VOLATILE", "volatile", Modifier.VOLATILE.toString());
-		assertEquals("Modifier.valueOf(\"PUBLIC\")", Modifier.PUBLIC, Modifier.valueOf("PUBLIC"));
+		ProcessorTestStatus.assertEquals("Modifier.ABSTRACT", "abstract", Modifier.ABSTRACT.toString());
+		ProcessorTestStatus.assertEquals("Modifier.FINAL", "final", Modifier.FINAL.toString());
+		ProcessorTestStatus.assertEquals("Modifier.NATIVE", "native", Modifier.NATIVE.toString());
+		ProcessorTestStatus.assertEquals("Modifier.PRIVATE", "private", Modifier.PRIVATE.toString());
+		ProcessorTestStatus.assertEquals("Modifier.PROTECTED", "protected", Modifier.PROTECTED.toString());
+		ProcessorTestStatus.assertEquals("Modifier.PUBLIC", "public", Modifier.PUBLIC.toString());
+		ProcessorTestStatus.assertEquals("Modifier.STATIC", "static", Modifier.STATIC.toString());
+		ProcessorTestStatus.assertEquals("Modifier.STRICTFP", "strictfp", Modifier.STRICTFP.toString());
+		ProcessorTestStatus.assertEquals("Modifier.SYNCHRONIZED", "synchronized", Modifier.SYNCHRONIZED.toString());
+		ProcessorTestStatus.assertEquals("Modifier.TRANSIENT", "transient", Modifier.TRANSIENT.toString());
+		ProcessorTestStatus.assertEquals("Modifier.VOLATILE", "volatile", Modifier.VOLATILE.toString());
+		ProcessorTestStatus.assertEquals("Modifier.valueOf(\"PUBLIC\")", Modifier.PUBLIC, Modifier.valueOf("PUBLIC"));
 	}
 	
 	/**
@@ -273,7 +236,7 @@ public class MirrorDeclarationTestAnnotationProcessor implements AnnotationProce
 		
 		//FieldDeclaration tests
 		Collection<FieldDeclaration> fieldDecls = testClassDec.getFields();
-		assertEquals("Number of fields", 4, fieldDecls.size());
+		ProcessorTestStatus.assertEquals("Number of fields", 4, fieldDecls.size());
 		FieldDeclaration fieldI = null;
 		FieldDeclaration fieldF = null;
 		FieldDeclaration fieldS = null;
@@ -288,22 +251,22 @@ public class MirrorDeclarationTestAnnotationProcessor implements AnnotationProce
 			if(field.toString().equals("gc"))
 				fieldGC = field;
 		}
-		assertTrue("Field i exists", fieldI != null);
-		assertEquals("Field i constant expression is 1", "1", fieldI.getConstantExpression());
-		assertEquals("Field i constant value is 1", "1", fieldI.getConstantValue().toString());
-		assertEquals("Field i type is int", "int", fieldI.getType().toString());
-		assertTrue("Field f exists", fieldF != null);
-		assertEquals("Field f constant expression is null", null, fieldF.getConstantExpression());
-		assertEquals("Field f constant value is null", null, fieldF.getConstantValue());
-		assertEquals("Field f type is float", "float", fieldF.getType().toString());
-		assertTrue("Field s exists", fieldS != null);
-		assertEquals("Field s constant expression is hello", "hello", fieldS.getConstantExpression());
-		assertEquals("Field s constant value is hello", "hello", fieldS.getConstantValue().toString());
-		assertEquals("Field s type is java.lang.String", "java.lang.String", fieldS.getType().toString());
-		assertTrue("Field gc exists", fieldGC != null);
-		assertEquals("Field gc constant expression is null", null, fieldGC.getConstantExpression());
-		assertEquals("Field gc constant value is null", null, fieldGC.getConstantValue());
-		assertEquals("Field gc type is java.util.GregorianCalendar", "java.util.GregorianCalendar", fieldGC.getType().toString());
+		ProcessorTestStatus.assertTrue("Field i exists", fieldI != null);
+		ProcessorTestStatus.assertEquals("Field i constant expression is 1", "1", fieldI.getConstantExpression());
+		ProcessorTestStatus.assertEquals("Field i constant value is 1", "1", fieldI.getConstantValue().toString());
+		ProcessorTestStatus.assertEquals("Field i type is int", "int", fieldI.getType().toString());
+		ProcessorTestStatus.assertTrue("Field f exists", fieldF != null);
+		ProcessorTestStatus.assertEquals("Field f constant expression is null", null, fieldF.getConstantExpression());
+		ProcessorTestStatus.assertEquals("Field f constant value is null", null, fieldF.getConstantValue());
+		ProcessorTestStatus.assertEquals("Field f type is float", "float", fieldF.getType().toString());
+		ProcessorTestStatus.assertTrue("Field s exists", fieldS != null);
+		ProcessorTestStatus.assertEquals("Field s constant expression is hello", "hello", fieldS.getConstantExpression());
+		ProcessorTestStatus.assertEquals("Field s constant value is hello", "hello", fieldS.getConstantValue().toString());
+		ProcessorTestStatus.assertEquals("Field s type is java.lang.String", "java.lang.String", fieldS.getType().toString());
+		ProcessorTestStatus.assertTrue("Field gc exists", fieldGC != null);
+		ProcessorTestStatus.assertEquals("Field gc constant expression is null", null, fieldGC.getConstantExpression());
+		ProcessorTestStatus.assertEquals("Field gc constant value is null", null, fieldGC.getConstantValue());
+		ProcessorTestStatus.assertEquals("Field gc type is java.util.GregorianCalendar", "java.util.GregorianCalendar", fieldGC.getType().toString());
 	}
 	
 	/**
@@ -325,17 +288,17 @@ public class MirrorDeclarationTestAnnotationProcessor implements AnnotationProce
 			if(method.toString().endsWith("methodDecNoArg()"))
 				methodDecNoArg = method;
 		}
-		assertTrue("Method methodDec exists", methodDec != null);
+		ProcessorTestStatus.assertTrue("Method methodDec exists", methodDec != null);
 
 		Collection<ReferenceType> thrownTypes = methodDec.getThrownTypes();
-		assertEquals("Number of types thrown", 1, thrownTypes.size());
+		ProcessorTestStatus.assertEquals("Number of types thrown", 1, thrownTypes.size());
 		
 		ReferenceType thrownType = thrownTypes.iterator().next();
-		assertEquals("methodDec throws Exception", "java.lang.Exception", thrownType.toString());
-		assertTrue("methodDec is varargs", methodDec.isVarArgs());
-		assertTrue("Method methodDecNoArg exists", methodDecNoArg != null);
-		assertEquals("Number of types thrown", 0, methodDecNoArg.getThrownTypes().size());
-		assertTrue("methodDecNoArg is not varargs", !methodDecNoArg.isVarArgs());
+		ProcessorTestStatus.assertEquals("methodDec throws Exception", "java.lang.Exception", thrownType.toString());
+		ProcessorTestStatus.assertTrue("methodDec is varargs", methodDec.isVarArgs());
+		ProcessorTestStatus.assertTrue("Method methodDecNoArg exists", methodDecNoArg != null);
+		ProcessorTestStatus.assertEquals("Number of types thrown", 0, methodDecNoArg.getThrownTypes().size());
+		ProcessorTestStatus.assertTrue("methodDecNoArg is not varargs", !methodDecNoArg.isVarArgs());
 
 		
 		//Tests for ParameterDeclaration
@@ -348,10 +311,10 @@ public class MirrorDeclarationTestAnnotationProcessor implements AnnotationProce
 			if(param.toString().startsWith("String[]"))
 				paramDeclString = param;
 		}
-		assertTrue("int parameter exists", paramDeclInt != null);
-		assertEquals("Parameter type is int", "int", paramDeclInt.getType().toString());
-		assertTrue("String[] parameter exists", paramDeclString != null);
-		assertEquals("Parameter type is String[]", "java.lang.String[]", paramDeclString.getType().toString());
-		assertEquals("Number of parameters in methodDecNoArg", 0, methodDecNoArg.getParameters().size());
+		ProcessorTestStatus.assertTrue("int parameter exists", paramDeclInt != null);
+		ProcessorTestStatus.assertEquals("Parameter type is int", "int", paramDeclInt.getType().toString());
+		ProcessorTestStatus.assertTrue("String[] parameter exists", paramDeclString != null);
+		ProcessorTestStatus.assertEquals("Parameter type is String[]", "java.lang.String[]", paramDeclString.getType().toString());
+		ProcessorTestStatus.assertEquals("Number of parameters in methodDecNoArg", 0, methodDecNoArg.getParameters().size());
 	}
 }
