diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java
index d56e894..8b083ed 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java
@@ -122,31 +122,6 @@ public LookupEnvironment environment() {
     return this.environment;
 }
 
-/**
- * Find supertype which erases to a given type, or null if not found
- */
-public TypeBinding findSuperTypeWithSameErasure(TypeBinding otherType) {
-
-	if (this == otherType) return this;
-	int otherDim = otherType.dimensions();
-	if (this.dimensions != otherDim) {
-		switch(otherType.id) {
-			case TypeIds.T_JavaLangObject :
-			case TypeIds.T_JavaIoSerializable :
-			case TypeIds.T_JavaLangCloneable :
-				return otherType;
-		}
-		if (otherDim < this.dimensions & otherType.leafComponentType().id == TypeIds.T_JavaLangObject) {
-			return otherType; // X[][] has Object[] as an implicit supertype
-		}
-		return null;
-	}
-	if (!(this.leafComponentType instanceof ReferenceBinding)) return null;
-	TypeBinding leafSuperType = ((ReferenceBinding)this.leafComponentType).findSuperTypeWithSameErasure(otherType.leafComponentType());
-	if (leafSuperType == null) return null;
-	return environment().createArrayType(leafSuperType, this.dimensions);	
-}
-
 public char[] genericTypeSignature() {
 	
     if (this.genericTypeSignature == null) {
