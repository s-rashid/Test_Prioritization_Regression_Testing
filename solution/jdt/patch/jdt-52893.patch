diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/FactoryPathUtil.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/FactoryPathUtil.java
index db03d47..9c61a45 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/FactoryPathUtil.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/FactoryPathUtil.java
@@ -26,12 +26,22 @@ import javax.xml.parsers.ParserConfigurationException;
 
 import org.eclipse.core.resources.IFile;
 import org.eclipse.core.resources.IProject;
-import org.eclipse.core.runtime.*;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IConfigurationElement;
+import org.eclipse.core.runtime.IExtension;
+import org.eclipse.core.runtime.IExtensionPoint;
+import org.eclipse.core.runtime.IPath;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Path;
+import org.eclipse.core.runtime.Platform;
+import org.eclipse.core.runtime.Status;
 import org.eclipse.jdt.apt.core.AptPlugin;
-import org.eclipse.jdt.apt.core.FactoryContainer;
-import org.eclipse.jdt.apt.core.FactoryContainer.FactoryType;
+import org.eclipse.jdt.apt.core.internal.ExtJarFactoryContainer;
 import org.eclipse.jdt.apt.core.internal.PluginFactoryContainer;
-import org.eclipse.jdt.apt.core.util.FactoryPath;
+import org.eclipse.jdt.apt.core.internal.VarJarFactoryContainer;
+import org.eclipse.jdt.apt.core.internal.WkspJarFactoryContainer;
+import org.eclipse.jdt.apt.core.internal.util.FactoryContainer.FactoryType;
+import org.eclipse.jdt.apt.core.util.IFactoryPath;
 import org.eclipse.jdt.core.IJavaProject;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
@@ -51,6 +61,7 @@ public final class FactoryPathUtil {
 	private static final String KIND = "kind"; //$NON-NLS-1$
 	private static final String ID = "id"; //$NON-NLS-1$
 	private static final String ENABLED = "enabled"; //$NON-NLS-1$
+	private static final String RUN_IN_BATCH_MODE = "runInBatchMode"; //$NON-NLS-1$
 	
 	private static final String FACTORYPATH_FILE = ".factorypath"; //$NON-NLS-1$
 	
@@ -70,7 +81,7 @@ public final class FactoryPathUtil {
 	 * Loads a map of factory containers from the factory path for a given
 	 * project. If no factorypath file was found, returns null.
 	 */
-	public static Map<FactoryContainer, Boolean> readFactoryPathFile(IJavaProject jproj) 
+	public static Map<FactoryContainer, FactoryPath.Attributes> readFactoryPathFile(IJavaProject jproj) 
 		throws CoreException
 	{
 		String data = null;
@@ -103,7 +114,7 @@ public final class FactoryPathUtil {
 	 * for a given project. If null is passed in, the factorypath file
 	 * is deleted.
 	 */
-	public static void saveFactoryPathFile(IJavaProject jproj, Map<FactoryContainer, Boolean> containerMap) 
+	public static void saveFactoryPathFile(IJavaProject jproj, Map<FactoryContainer, FactoryPath.Attributes> containers) 
 		throws CoreException 
 	{
 		IFile projFile;
@@ -118,8 +129,8 @@ public final class FactoryPathUtil {
 		}
 		
 		try {
-			if (containerMap != null) {
-				String data = FactoryPathUtil.encodeFactoryPath(containerMap);
+			if (containers != null) {
+				String data = FactoryPathUtil.encodeFactoryPath(containers);
 				// If project is null, set workspace-level data
 				if (jproj == null) {
 					FileSystemUtil.writeStringToFile(wkspFile, data);
@@ -148,99 +159,130 @@ public final class FactoryPathUtil {
 	 * @param factories
 	 * @return
 	 */
-	public static String encodeFactoryPath(Map<FactoryContainer, Boolean> factories) {
+	public static String encodeFactoryPath(Map<FactoryContainer, FactoryPath.Attributes> factories) {
 		StringBuilder sb = new StringBuilder();
 		sb.append("<").append(FACTORYPATH_TAG).append(">\n"); //$NON-NLS-1$ //$NON-NLS-2$
-		for (Map.Entry<FactoryContainer, Boolean> entry : factories.entrySet()) {
+		for (Map.Entry<FactoryContainer, FactoryPath.Attributes> entry : factories.entrySet()) {
 			FactoryContainer container = entry.getKey();
-			Boolean enabled = entry.getValue();
+			FactoryPath.Attributes attr = entry.getValue();
 			sb.append(INDENT);
 			sb.append("<"); //$NON-NLS-1$
 			sb.append(FACTORYPATH_ENTRY_TAG).append(" "); //$NON-NLS-1$
 			sb.append(KIND).append("=\"").append(container.getType()).append("\" "); //$NON-NLS-1$ //$NON-NLS-2$
 			sb.append(ID).append("=\"").append(container.getId()).append("\" "); //$NON-NLS-1$ //$NON-NLS-2$
-			sb.append(ENABLED).append("=\"").append(enabled).append("\"/>\n"); //$NON-NLS-1$ //$NON-NLS-2$
+			sb.append(ENABLED).append("=\"").append(attr.isEnabled()).append("\" "); //$NON-NLS-1$ //$NON-NLS-2$
+			sb.append(RUN_IN_BATCH_MODE).append("=\"").append(attr.runInBatchMode()).append("\"/>\n"); //$NON-NLS-1$ //$NON-NLS-2$
 		}
 		sb.append("</").append(FACTORYPATH_TAG).append(">\n"); //$NON-NLS-1$ //$NON-NLS-2$
 		
 		return sb.toString();
 	}
 	
-	public static Map<FactoryContainer, Boolean> decodeFactoryPath(final String xmlFactoryPath) 
-		throws CoreException
-	{
-		Map<FactoryContainer, Boolean> result = new LinkedHashMap<FactoryContainer, Boolean>();
-		StringReader reader = new StringReader(xmlFactoryPath);
-		Element fpElement = null;
+	/**
+	 * Create a factory container based on an external jar file (not in the 
+	 * workspace).
+	 * @param jar a java.io.File representing the jar file.
+	 */
+	public static FactoryContainer newExtJarFactoryContainer(File jar) {
+		return new ExtJarFactoryContainer(jar);
+	}
+	
+	/**
+	 * Create a factory container based on a jar file in the workspace.
+	 * @param an Eclipse IPath representing the jar file; the path is
+	 * relative to the workspace root.
+	 */
+	public static FactoryContainer newWkspJarFactoryContainer(IPath jar) {
+		return new WkspJarFactoryContainer(jar);
+	}
+	
+	/**
+	 * Create a factory container based on an external jar file specified 
+	 * by a classpath variable (and possibly a path relative to that variable).
+	 * @param jar an Eclipse IPath representing the jar file; the first
+	 * segment of the path is assumed to be the variable name.
+	 */
+	public static FactoryContainer newVarJarFactoryContainer(IPath jar) {
+		return new VarJarFactoryContainer(jar);
+	}
+
+	public static Map<FactoryContainer, FactoryPath.Attributes> decodeFactoryPath(final String xmlFactoryPath) 
+	throws CoreException
+{
+	Map<FactoryContainer, FactoryPath.Attributes> result = new LinkedHashMap<FactoryContainer, FactoryPath.Attributes>();
+	StringReader reader = new StringReader(xmlFactoryPath);
+	Element fpElement = null;
+	
+	try {
+		DocumentBuilder parser = 
+			DocumentBuilderFactory.newInstance().newDocumentBuilder();
+		fpElement = parser.parse(new InputSource(reader)).getDocumentElement();
 		
-		try {
-			DocumentBuilder parser = 
-				DocumentBuilderFactory.newInstance().newDocumentBuilder();
-			fpElement = parser.parse(new InputSource(reader)).getDocumentElement();
+	}
+	catch (IOException e) {
+		throw new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_ioException, e));
+	}
+	catch (SAXException e) {
+		throw new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_couldNotParse, e));
+	}
+	catch (ParserConfigurationException e) {
+		throw new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_parserConfigError, e));
+	}
+	finally {
+		reader.close();
+	}
+	
+	if (!fpElement.getNodeName().equalsIgnoreCase(FACTORYPATH_TAG)) {
+		IOException e = new IOException("Incorrect file format. File must begin with " + FACTORYPATH_TAG); //$NON-NLS-1$
+		throw new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_ioException, e));
+	}
+	NodeList nodes = fpElement.getElementsByTagName(FACTORYPATH_ENTRY_TAG);
+	for (int i=0; i < nodes.getLength(); i++) {
+		Node node = nodes.item(i);
+		if (node.getNodeType() == Node.ELEMENT_NODE) {
+			Element element = (Element)node;
+			String kindString = element.getAttribute(KIND);
+			// deprecated container type "JAR" is now "EXTJAR"
+			if ("JAR".equals(kindString)) { //$NON-NLS-1$
+				kindString = "EXTJAR"; //$NON-NLS-1$
+			}
+			String idString = element.getAttribute(ID);
+			String enabledString = element.getAttribute(ENABLED);
+			String runInAptModeString = element.getAttribute(RUN_IN_BATCH_MODE); 
+			FactoryType kind = FactoryType.valueOf(kindString);
+			FactoryContainer container = null;
+			switch (kind) {
 			
-		}
-		catch (IOException e) {
-			throw new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_ioException, e));
-		}
-		catch (SAXException e) {
-			throw new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_couldNotParse, e));
-		}
-		catch (ParserConfigurationException e) {
-			throw new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_parserConfigError, e));
-		}
-		finally {
-			reader.close();
-		}
-		
-		if (!fpElement.getNodeName().equalsIgnoreCase(FACTORYPATH_TAG)) {
-			IOException e = new IOException("Incorrect file format. File must begin with " + FACTORYPATH_TAG); //$NON-NLS-1$
-			throw new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_ioException, e));
-		}
-		NodeList nodes = fpElement.getElementsByTagName(FACTORYPATH_ENTRY_TAG);
-		for (int i=0; i < nodes.getLength(); i++) {
-			Node node = nodes.item(i);
-			if (node.getNodeType() == Node.ELEMENT_NODE) {
-				Element element = (Element)node;
-				String kindString = element.getAttribute(KIND);
-				// deprecated container type "JAR" is now "EXTJAR"
-				if ("JAR".equals(kindString)) { //$NON-NLS-1$
-					kindString = "EXTJAR"; //$NON-NLS-1$
-				}
-				String idString = element.getAttribute(ID);
-				String enabledString = element.getAttribute(ENABLED);
-				FactoryType kind = FactoryType.valueOf(kindString);
-				FactoryContainer container = null;
-				switch (kind) {
+			case WKSPJAR :
+				container = newWkspJarFactoryContainer(new Path(idString));
+				break;
 				
-				case WKSPJAR :
-					container = FactoryPath.newWkspJarFactoryContainer(new Path(idString));
-					break;
-					
-				case EXTJAR :
-					container = FactoryPath.newExtJarFactoryContainer(new File(idString));
-					break;
-					
-				case VARJAR :
-					container = FactoryPath.newVarJarFactoryContainer(new Path(idString));
-					break;
+			case EXTJAR :
+				container = newExtJarFactoryContainer(new File(idString));
+				break;
 				
-				case PLUGIN :
-					container = FactoryPath.getPluginFactoryContainer(idString);
-					break;
-					
-				default :
-					throw new IllegalStateException("Unrecognized kind: " + kind + ". Original string: " + kindString); //$NON-NLS-1$ //$NON-NLS-2$
-				}
+			case VARJAR :
+				container = newVarJarFactoryContainer(new Path(idString));
+				break;
+			
+			case PLUGIN :
+				container = getPluginFactoryContainer(idString);
+				break;
 				
-				if (null != container) {
-					result.put(container, new Boolean(enabledString));
-				}
+			default :
+				throw new IllegalStateException("Unrecognized kind: " + kind + ". Original string: " + kindString); //$NON-NLS-1$ //$NON-NLS-2$
+			}
+			
+			if (null != container) {
+				FactoryPath.Attributes a = new FactoryPath.Attributes( 
+						Boolean.parseBoolean(enabledString), Boolean.parseBoolean(runInAptModeString));
+				result.put(container, a);
 			}
 		}
-		
-		return result;
 	}
 	
+	return result;
+}
 	/**
 	 * Get a file designator for the workspace-level factory path settings file.
 	 * Typically this is [workspace]/.metadata/plugins/org.eclipse.jdt.apt.core/.factorypath
@@ -284,94 +326,128 @@ public final class FactoryPathUtil {
 	 * are the default for a project); if jproj is null, return the default 
 	 * list of plugin factories (which is the "factory default").
 	 */
-	public static Map<FactoryContainer, Boolean> getDefaultFactoryPath(IJavaProject jproj) {
+	public static IFactoryPath getDefaultFactoryPath(IJavaProject jproj) {
+		FactoryPath fp = new FactoryPath();
 		if (jproj != null) {
-			return getAllContainers(null);
+			fp.setContainers(calculatePath(null));
 		}
 		else {
-			return getAllPluginFactoryContainers();
+			fp.setContainers(getAllPluginFactoryContainers());
 		}
+		return fp;
 	}
 
+	public static FactoryPath getFactoryPath(IJavaProject jproj) {
+		Map<FactoryContainer, FactoryPath.Attributes> map = calculatePath(jproj);
+		FactoryPath fp = new FactoryPath();
+		fp.setContainers(map);
+		return fp;
+	}
+
+	public static void setFactoryPath(IJavaProject jproj, FactoryPath path) 
+			throws CoreException {
+		Map<FactoryContainer, FactoryPath.Attributes> map = path.getAllContainers();
+		saveFactoryPathFile(jproj, map);
+	}
+	
 	/**
+	 * Calculates the active factory path for the specified project.  This
+	 * depends on the stored information in the .factorypath file, as well as
+	 * on the set of plugins that were found at load time of this Eclipse instance.
 	 * Returns all containers for the provided project, including disabled ones.
 	 * @param jproj The java project in question, or null for the workspace
 	 * @return an ordered map, where the key is the container and the value 
 	 * indicates whether the container is enabled.
 	 */
-	public static synchronized Map<FactoryContainer, Boolean> getAllContainers(IJavaProject jproj) {
-		Map<FactoryContainer, Boolean> containers = null;
+	private static synchronized Map<FactoryContainer, FactoryPath.Attributes> calculatePath(IJavaProject jproj) {
+		Map<FactoryContainer, FactoryPath.Attributes> map = null;
 		boolean foundPerProjFile = false;
 		if (jproj != null) {
 			try {
-				containers = readFactoryPathFile(jproj);
-				foundPerProjFile = (containers != null);
+				map = readFactoryPathFile(jproj);
+				foundPerProjFile = (map != null);
 			}
 			catch (CoreException ce) {
 				AptPlugin.log(ce, "Could not get factory containers for project: " + jproj); //$NON-NLS-1$
 			}
 		}
 		// Workspace if no project data was found
-		if (containers == null) {
+		if (map == null) {
 			try {
-				containers = readFactoryPathFile(null);
+				map = readFactoryPathFile(null);
 			}
 			catch (CoreException ce) {
 				AptPlugin.log(ce, "Could not get factory containers for project: " + jproj); //$NON-NLS-1$
 			}
 		}
 		// if no project and no workspace data was found, we'll get the defaults
-		if (containers == null) {
-			containers = new LinkedHashMap<FactoryContainer, Boolean>();
+		if (map == null) {
+			map = new LinkedHashMap<FactoryContainer, FactoryPath.Attributes>();
 		}
 		boolean disableNewPlugins = (jproj != null) && foundPerProjFile;
-		updatePluginContainers(containers, disableNewPlugins);
-		return new LinkedHashMap(containers);
+		updatePluginContainers(map, disableNewPlugins);
+		return map;
 	}
 	
 	/**
 	 * Removes missing plugin containers, and adds any plugin containers 
 	 * that were added since the map was originally created.  The order
 	 * of the original list will be maintained, and new entries will be
-	 * added to the end of the list.
-	 * @param containers the ordered map of containers to be modified.
-	 * The keys in the map are factory containers; the values indicate
-	 * whether the container is enabled.
+	 * added to the end of the list in alphabetic order.  The resulting 
+	 * list has the same contents as PLUGIN_FACTORY_MAP (that is, all the 
+	 * loaded plugins and nothing else), but the order is as close as possible
+	 * to the input.
+	 * 
+	 * @param path the factory path (in raw Map form) to be modified.
 	 * @param disableNewPlugins if true, newly discovered plugins will be
 	 * disabled.  If false, they will be enabled or disabled according to
 	 * their setting in the extension declaration.
 	 */
 	private static void updatePluginContainers(
-			Map<FactoryContainer, Boolean> containers, boolean disableNewPlugins) {
-		Map<FactoryContainer, Boolean> pluginContainers = getAllPluginFactoryContainers();
+			Map<FactoryContainer, FactoryPath.Attributes> path, boolean disableNewPlugins) {
+		
+		// Get the alphabetically-ordered list of all plugins we found at startup.
+		Map<FactoryContainer, FactoryPath.Attributes> pluginContainers = getAllPluginFactoryContainers();
 		
-		// Remove any plugin factories whose plugins we did not find
-		for (Iterator<FactoryContainer> containerIter = containers.keySet().iterator(); containerIter.hasNext(); ) {
-			FactoryContainer container = containerIter.next();
-			if (container.getType() == FactoryType.PLUGIN && !pluginContainers.containsKey(container)) {
-				containerIter.remove();
+		// Remove from the path any plugins which we did not find at startup
+		for (Iterator<FactoryContainer> i = path.keySet().iterator(); i.hasNext(); ) {
+			FactoryContainer fc = i.next();
+			if (fc.getType() == FactoryContainer.FactoryType.PLUGIN && !pluginContainers.containsKey(fc)) {
+				i.remove();
 			}
 		}
 		
-		// Add any plugins which are new since the config was last saved
-		for (Map.Entry<FactoryContainer, Boolean> entry : pluginContainers.entrySet()) {
-			if (!containers.containsKey(entry.getKey())) {
-				containers.put(entry.getKey(), disableNewPlugins ? Boolean.FALSE : entry.getValue());
+		// Add to the end any plugins which are not in the path (i.e., which
+		// have been discovered since the config was last saved)
+		for (Map.Entry<FactoryContainer, FactoryPath.Attributes> entry : pluginContainers.entrySet()) {
+			if (!path.containsKey(entry.getKey())) {
+				FactoryPath.Attributes newAttr;
+				FactoryPath.Attributes oldAttr = entry.getValue();
+				if (disableNewPlugins) {
+					newAttr = new FactoryPath.Attributes(false, oldAttr.runInBatchMode());
+				} else {
+					newAttr = oldAttr;
+				}
+				path.put(entry.getKey(), newAttr);
 			}
 		}
 	}
 
 	/**
 	 * Returns an ordered list of all the plugin factory containers that have 
-	 * been registered as plugins.  Note that this does not take into account 
-	 * any factory plugins that have been disabled by the user's configuration.
+	 * been registered as plugins.  Note that this may include plugins that have 
+	 * been disabled by the user's configuration.  The 'enabled' attribute in the
+	 * returned map reflects the 'enableDefault' attribute in the plugin
+	 * manifest, rather than the user configuration.  
 	 * Ordering is alphabetic by plugin id.
 	 */
-	public static synchronized Map<FactoryContainer, Boolean> getAllPluginFactoryContainers()
+	private static synchronized Map<FactoryContainer, FactoryPath.Attributes> getAllPluginFactoryContainers()
 	{
-		Map<FactoryContainer, Boolean> map = new LinkedHashMap<FactoryContainer, Boolean>();
+		Map<FactoryContainer, FactoryPath.Attributes> map = new LinkedHashMap<FactoryContainer, FactoryPath.Attributes>(PLUGIN_CONTAINER_MAP.size());
+		// The PLUGIN_CONTAINER_MAP is alphabetically ordered.
 		for (PluginFactoryContainer pfc : PLUGIN_CONTAINER_MAP.values()) {
-			map.put(pfc, pfc.getEnableDefault());
+			FactoryPath.Attributes a = new FactoryPath.Attributes(pfc.getEnableDefault(), false);
+			map.put(pfc, a);
 		}
 		return map;
 	}
@@ -453,5 +529,5 @@ public final class FactoryPathUtil {
 			}
 		}
 	}
-	
+
 }
