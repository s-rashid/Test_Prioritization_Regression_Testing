diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/IntegerCache.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/IntegerCache.java
index 989bdd5..35918b6 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/IntegerCache.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/IntegerCache.java
@@ -59,21 +59,6 @@ public boolean containsKey(int key) {
 	}
 	return false;
 }
-/** Gets the object associated with the specified key in the
- * hashtable.
- * @param key <CODE>double</CODE> the specified key
- * @return int the element for the key or -1 if the key is not
- *  defined in the hash table.
- */
-public int get(int key) {
-	int index = hash(key);
-	while ((keyTable[index] != 0) || ((keyTable[index] == 0) &&(valueTable[index] != 0))) {
-		if (keyTable[index] == key)
-			return valueTable[index];
-		index = (index + 1) % keyTable.length;
-	}
-	return -1;
-}
 /**
  * Return a hashcode for the value of the key parameter.
  * @param key int
@@ -107,6 +92,30 @@ public int put(int key, int value) {
 	return value;
 }
 /**
+ * Puts the specified element into the hashtable if absent, using the specified
+ * key.  The element may be retrieved by doing a get() with the same key.
+ * 
+ * @param key <CODE>int</CODE> the specified key in the hashtable
+ * @param value <CODE>int</CODE> the specified element
+ * @return int value
+ */
+public int putIfAbsent(int key, int value) {
+	int index = hash(key);
+	while ((keyTable[index] != 0) || ((keyTable[index] == 0) && (valueTable[index] != 0))) {
+		if (keyTable[index] == key)
+			return valueTable[index];
+		index = (index + 1) % keyTable.length;
+	}
+	keyTable[index] = key;
+	valueTable[index] = value;
+
+	// assumes the threshold is never equal to the size of the table
+	if (++elementSize > threshold) {
+		rehash();
+	}
+	return -value; // negative when added, assumes value is > 0
+}
+/**
  * Rehashes the content of the table into a bigger table.
  * This method is called automatically when the hashtable's
  * size exceeds the threshold.
