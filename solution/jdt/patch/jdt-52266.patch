diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ConditionalExpressionTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ConditionalExpressionTest.java
index 8014c59..f4a1246 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ConditionalExpressionTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ConditionalExpressionTest.java
@@ -10,6 +10,10 @@
  *******************************************************************************/
 package org.eclipse.jdt.core.tests.compiler.regression;
 
+import java.util.Map;
+
+import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
+
 import junit.framework.Test;
 
 public class ConditionalExpressionTest extends AbstractRegressionTest {
@@ -49,4 +53,33 @@ public class ConditionalExpressionTest extends AbstractRegressionTest {
 			"SUCCESS"
 		);
 	}
+	
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=107193
+	public void test002() {
+		Map options = this.getCompilerOptions();
+		options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);
+		options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);
+		options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_5);
+		this.runConformTest(
+			new String[] {
+				"X.java",
+				"class RecipeElement {\n" +
+				"    public static final RecipeElement[] NO_CHILDREN= new RecipeElement[0]; \n" +
+				"}\n" +
+				"class Ingredient extends RecipeElement { }\n" +
+				"class X extends RecipeElement {\n" +
+				"    private Ingredient[] fIngredients;\n" +
+				"    public RecipeElement[] getChildren() {\n" +
+				"        return fIngredients == null ? NO_CHILDREN : fIngredients;\n" +
+				"    }\n" +
+				"}",
+			},
+			"",
+			null,
+			true,
+			null,
+			options,
+			null
+		);
+	}
 }
\ No newline at end of file
