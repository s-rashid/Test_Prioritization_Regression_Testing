diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/BinaryParameterDeclarationImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/BinaryParameterDeclarationImpl.java
index a00f3eb..44b7c16 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/BinaryParameterDeclarationImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/BinaryParameterDeclarationImpl.java
@@ -11,22 +11,37 @@
 
 package org.eclipse.jdt.apt.core.internal.declaration;
 
+import com.sun.mirror.declaration.AnnotationMirror;
 import com.sun.mirror.declaration.Modifier;
 import com.sun.mirror.declaration.ParameterDeclaration;
+import com.sun.mirror.type.TypeMirror;
+import com.sun.mirror.util.DeclarationVisitor;
 import com.sun.mirror.util.SourcePosition;
+
+import java.lang.annotation.Annotation;
 import java.util.Collection;
 import java.util.Collections;
 
 import org.eclipse.core.resources.IFile;
 import org.eclipse.jdt.apt.core.internal.env.BaseProcessorEnv;
+import org.eclipse.jdt.apt.core.internal.util.Factory;
 import org.eclipse.jdt.core.dom.ASTNode;
+import org.eclipse.jdt.core.dom.IBinding;
+import org.eclipse.jdt.core.dom.IMethodBinding;
+import org.eclipse.jdt.core.dom.IResolvedAnnotation;
 import org.eclipse.jdt.core.dom.ITypeBinding;
+import org.eclipse.jdt.core.dom.SimpleName;
+import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
 
 /**
  * Represents a formal parameter that came from binary.
  */
-public class BinaryParameterDeclarationImpl extends ParameterDeclarationImpl implements ParameterDeclaration
+public class BinaryParameterDeclarationImpl extends DeclarationImpl implements ParameterDeclaration
 {   
+	static final String ARG = "arg"; //$NON-NLS-1$
+	private final ITypeBinding _type;
+	private final ExecutableDeclarationImpl _executable;
+	private final int _paramIndex;
     /**
      * Parameter declaration from binary
      */
@@ -35,8 +50,20 @@ public class BinaryParameterDeclarationImpl extends ParameterDeclarationImpl imp
                                           int index,
                                           BaseProcessorEnv env)
     {
-        super(executable, typeBinding, index, env);      
+        super(typeBinding, env);
+        assert( typeBinding != null ) : "missing type binding"; //$NON-NLS-1$
+        assert( index > 0 ) : "invalid index " + index; //$NON-NLS-1$
+        assert executable != null : "missing executable"; //$NON-NLS-1$
+        _type = typeBinding;
+        _paramIndex = index;
+        _executable = executable;
     }
+    
+    public void accept(DeclarationVisitor visitor)
+    {
+        super.accept(visitor);
+        visitor.visitParameterDeclaration(this);
+    }  
  
     public Collection<Modifier> getModifiers()
     {
@@ -44,13 +71,64 @@ public class BinaryParameterDeclarationImpl extends ParameterDeclarationImpl imp
 		// we don't store this information. so simply return nothing for now.
         return Collections.emptyList();
     }
+    
+    public String getDocComment()
+    {
+        return null;
+    }
+    
+    public String getSimpleName()
+    {
+        final SingleVariableDeclaration decl = (SingleVariableDeclaration)getAstNode();
+        if( decl == null ) return ARG + _paramIndex;
+        final SimpleName name = decl.getName();
+        return name == null ? ARG : name.toString();
+    }
 
     public SourcePosition getPosition()
     {
         return null;
     }        
+    
+    public TypeMirror getType()
+    {
+        final TypeMirror mirrorType = Factory.createTypeMirror(getTypeBinding(), _env);
+        if( mirrorType == null )
+            return Factory.createErrorClassType(getTypeBinding());
+        return mirrorType;
+    }
+    
+    public <A extends Annotation> A getAnnotation(Class<A> annotationClass)
+    {
+		final IMethodBinding methodBinding = _executable.getDeclarationBinding();
+		final IResolvedAnnotation[] paramAnnos = methodBinding.getParameterAnnotations(_paramIndex); 
+        return _getAnnotation(annotationClass, paramAnnos);
+    }
+
+    public Collection<AnnotationMirror> getAnnotationMirrors()
+    {
+		final IMethodBinding methodBinding = _executable.getDeclarationBinding();
+		final IResolvedAnnotation[] paramAnnos = methodBinding.getParameterAnnotations(_paramIndex); 
+        return _getAnnotationMirrors(paramAnnos);
+    }    
+    
+	public boolean isBindingBased(){ return true; }
 	
-	public boolean equals(Object obj){
+	public boolean isFromSource(){ return false; }
+
+    ASTNode getAstNode(){ return null; }
+
+    public IFile getResource(){ return null; }
+    
+    private ITypeBinding getTypeBinding(){ return _type; }
+    
+    public MirrorKind kind(){ return MirrorKind.FORMAL_PARAMETER; }
+    
+    public IBinding getDeclarationBinding(){
+    	throw new UnsupportedOperationException("should never be invoked on a BinaryParameterDeclaration"); //$NON-NLS-1$
+    }
+    
+    public boolean equals(Object obj){
         if( obj instanceof BinaryParameterDeclarationImpl ){
             final BinaryParameterDeclarationImpl otherParam = (BinaryParameterDeclarationImpl)obj;
             return otherParam._paramIndex == _paramIndex  &&
@@ -58,10 +136,20 @@ public class BinaryParameterDeclarationImpl extends ParameterDeclarationImpl imp
         }
         return false;
     }
-	
-	public boolean isFromSource(){ return false; }
-
-    ASTNode getAstNode(){ return null; }
-
-    public IFile getResource(){ return null; }
+    
+    public int hashCode(){
+    	final String methodKey = _executable.getDeclarationBinding().getKey();
+    	int hashcode = 0;
+    	if( methodKey != null )
+    		hashcode = methodKey.hashCode();
+    	return hashcode + _paramIndex; 
+    }  
+    
+    public String toString(){		
+        final StringBuilder builder = new StringBuilder();
+        builder.append(getTypeBinding().getName());
+        builder.append(' ');
+        builder.append(getSimpleName());        
+        return builder.toString();
+    }
 }
