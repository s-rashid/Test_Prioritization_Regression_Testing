diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java
index 0710b98..dc1f2be 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java
@@ -30,7 +30,10 @@ public char classOrInterface;
 public int modifiers;
 public char[][] typeParameterSignatures;
 
-protected boolean checkOnlySuperinterfaces; // used for IMPLEMENTORS
+protected int superRefKind;
+public static final int ALL_SUPER_TYPES = 0;
+public static final int ONLY_SUPER_INTERFACES = 1; // used for IMPLEMENTORS
+public static final int ONLY_SUPER_CLASSES = 2; // used for hierarachy with a class focus
 
 protected static char[][] CATEGORIES = { SUPER_REF };
 
@@ -139,7 +142,7 @@ public static char[] createIndexKey(
 public SuperTypeReferencePattern(
 	char[] superQualification,
 	char[] superSimpleName,
-	boolean checkOnlySuperinterfaces,
+	int superRefKind,
 	int matchRule) {
 
 	this(matchRule);
@@ -147,7 +150,7 @@ public SuperTypeReferencePattern(
 	this.superQualification = isCaseSensitive() ? superQualification : CharOperation.toLowerCase(superQualification);
 	this.superSimpleName = isCaseSensitive() ? superSimpleName : CharOperation.toLowerCase(superSimpleName);
 	((InternalSearchPattern)this).mustResolve = superQualification != null;
-	this.checkOnlySuperinterfaces = checkOnlySuperinterfaces; // ie. skip the superclass
+	this.superRefKind = superRefKind;
 }
 SuperTypeReferencePattern(int matchRule) {
 	super(SUPER_REF_PATTERN, matchRule);
@@ -203,8 +206,13 @@ public char[][] getIndexCategories() {
 }
 public boolean matchesDecodedKey(SearchPattern decodedPattern) {
 	SuperTypeReferencePattern pattern = (SuperTypeReferencePattern) decodedPattern;
-	if (this.checkOnlySuperinterfaces)
+	if (this.superRefKind == ONLY_SUPER_INTERFACES)
 		if (pattern.superClassOrInterface != IIndexConstants.INTERFACE_SUFFIX) return false;
+	if (this.superRefKind == ONLY_SUPER_CLASSES && pattern.enclosingTypeName != IIndexConstants.ONE_ZERO/*not an anonymous*/) 
+		// consider enumerations as classes, reject interfaces and annotations
+		if (pattern.superClassOrInterface == IIndexConstants.INTERFACE_SUFFIX 
+			|| pattern.superClassOrInterface == IIndexConstants.ANNOTATION_TYPE_SUFFIX) 
+			return false;
 
 	if (pattern.superQualification != null)
 		if (!matchesName(this.superQualification, pattern.superQualification)) return false;
@@ -234,10 +242,17 @@ EntryResult[] queryIn(Index index) throws IOException {
 	return index.query(getIndexCategories(), key, matchRule); // match rule is irrelevant when the key is null
 }
 protected StringBuffer print(StringBuffer output) {
-	output.append(
-		this.checkOnlySuperinterfaces
-			? "SuperInterfaceReferencePattern: <" //$NON-NLS-1$
-			: "SuperTypeReferencePattern: <"); //$NON-NLS-1$
+	switch (this.superRefKind) {
+		case ALL_SUPER_TYPES:
+			output.append("SuperTypeReferencePattern: <"); //$NON-NLS-1$
+			break;
+		case ONLY_SUPER_INTERFACES:
+			output.append("SuperInterfaceReferencePattern: <"); //$NON-NLS-1$
+			break;
+		case ONLY_SUPER_CLASSES:
+			output.append("SuperClassReferencePattern: <"); //$NON-NLS-1$
+			break;
+	}
 	if (superSimpleName != null) 
 		output.append(superSimpleName);
 	else
