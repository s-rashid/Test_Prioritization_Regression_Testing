diff --git a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathSourceJar.java b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathSourceJar.java
index 8d70a28..200f376 100644
--- a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathSourceJar.java
+++ b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathSourceJar.java
@@ -14,8 +14,6 @@ import java.io.File;
 import java.io.IOException;
 import java.util.zip.ZipEntry;
 
-import org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader;
-import org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException;
 import org.eclipse.jdt.internal.compiler.env.AccessRuleSet;
 import org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer;
 import org.eclipse.jdt.internal.compiler.util.Util;
@@ -32,35 +30,12 @@ public class ClasspathSourceJar extends ClasspathJar {
 
 		ZipEntry sourceEntry = this.zipFile.getEntry(qualifiedBinaryFileName.substring(0, qualifiedBinaryFileName.length() - 6)  + SUFFIX_STRING_java);
 		if (sourceEntry != null) {
-			ZipEntry binaryEntry = this.zipFile.getEntry(qualifiedBinaryFileName);
-			if (binaryEntry != null) {
-				if (sourceEntry.getTime() > binaryEntry.getTime()) {
-					try {
-						return new NameEnvironmentAnswer(new CompilationUnit(Util.getInputStreamAsCharArray(this.zipFile.getInputStream(sourceEntry), -1, this.encoding),
-								qualifiedBinaryFileName.substring(0, qualifiedBinaryFileName.length() - 6)  + SUFFIX_STRING_java, this.encoding),
-								fetchAccessRestriction(qualifiedBinaryFileName));
-					} catch (IOException e) {
-						// treat as if source file is missing
-					}
-				} else {
-					try {
-						ClassFileReader reader = ClassFileReader.read(this.zipFile, qualifiedBinaryFileName);
-						if (reader != null) return new NameEnvironmentAnswer(reader, 
-								fetchAccessRestriction(qualifiedBinaryFileName));
-					} catch(ClassFormatException e) {
-						// treat as if class file is missing
-					} catch (IOException e) {
-						// treat as if class file is missing
-					}
-				}
-			} else {
-				try {
-					return new NameEnvironmentAnswer(new CompilationUnit(Util.getInputStreamAsCharArray(this.zipFile.getInputStream(sourceEntry), -1, this.encoding),
-							qualifiedBinaryFileName.substring(0, qualifiedBinaryFileName.length() - 6)  + SUFFIX_STRING_java, this.encoding),
-							fetchAccessRestriction(qualifiedBinaryFileName));
-				} catch (IOException e) {
-					// treat as if source file is missing
-				}
+			try {
+				return new NameEnvironmentAnswer(new CompilationUnit(Util.getInputStreamAsCharArray(this.zipFile.getInputStream(sourceEntry), -1, this.encoding),
+						qualifiedBinaryFileName.substring(0, qualifiedBinaryFileName.length() - 6)  + SUFFIX_STRING_java, this.encoding),
+						fetchAccessRestriction(qualifiedBinaryFileName));
+			} catch (IOException e) {
+				// treat as if source file is missing
 			}
 		}
 		return null;
