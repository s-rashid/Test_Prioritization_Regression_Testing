diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java
index 6e0e788..76f9566 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java
@@ -39,20 +39,24 @@ public ArrayBinding(TypeBinding type, int dimensions, LookupEnvironment environm
 /**
  * Collect the substitutes into a map for certain type variables inside the receiver type
  * e.g.   Collection<T>.collectSubstitutes(Collection<List<X>>, Map), will populate Map with: T --> List<X>
- */
-public void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint) {
+ * Constraints:
+ *   A << F   corresponds to:   F.collectSubstitutes(..., A, ..., 1)
+ *   A = F   corresponds to:      F.collectSubstitutes(..., A, ..., 0)
+ *   A >> F   corresponds to:   F.collectSubstitutes(..., A, ..., 2)
+*/
+public void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint) {
 	
 	if ((this.tagBits & TagBits.HasTypeVariable) == 0) return;
-	if (otherType == NullBinding) return;
+	if (actualType == NullBinding) return;
 	
-	switch(otherType.kind()) {
+	switch(actualType.kind()) {
 		case Binding.ARRAY_TYPE :
-	        int otherDim = otherType.dimensions();
-	        if (otherDim == this.dimensions) {
-			    this.leafComponentType.collectSubstitutes(scope, otherType.leafComponentType(), substitutes, constraint);
-	        } else if (otherDim > this.dimensions) {
-	            ArrayBinding otherReducedType = this.environment.createArrayType(otherType.leafComponentType(), otherDim - this.dimensions);
-	            this.leafComponentType.collectSubstitutes(scope, otherReducedType, substitutes, constraint);
+	        int actualDim = actualType.dimensions();
+	        if (actualDim == this.dimensions) {
+			    this.leafComponentType.collectSubstitutes(scope, actualType.leafComponentType(), substitutes, constraint);
+	        } else if (actualDim > this.dimensions) {
+	            ArrayBinding actualReducedType = this.environment.createArrayType(actualType.leafComponentType(), actualDim - this.dimensions);
+	            this.leafComponentType.collectSubstitutes(scope, actualReducedType, substitutes, constraint);
 	        }
 			break;
 		case Binding.TYPE_PARAMETER :
