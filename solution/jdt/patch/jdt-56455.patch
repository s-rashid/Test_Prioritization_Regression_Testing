diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java
index 4c87a7e..16684ce 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java
@@ -343,7 +343,8 @@ public class SearchEngine {
 	 *		 <li>{@link IJavaSearchConstants#ALL_OCCURRENCES}: will search for either declarations or references as specified
 	 *  		above.</li>
 	 *
-	 *		 <li>{@link IJavaSearchConstants#IMPLEMENTORS}: for interface, will find all types which implements a given interface.
+	 *		 <li>{@link IJavaSearchConstants#IMPLEMENTORS}: for types, will find all types
+	 *				which directly implement/extend a given interface.
 	 *				Note that types may be only classes or only interfaces if {@link IJavaSearchConstants#CLASS } or
 	 *				{@link IJavaSearchConstants#INTERFACE} is respectively used instead of {@link IJavaSearchConstants#TYPE}.
 	 *		</li>
@@ -377,7 +378,8 @@ public class SearchEngine {
 	 *		 <li>{@link IJavaSearchConstants#ALL_OCCURRENCES}: will search for either declarations or references as specified
 	 *  		above.</li>
 	 *
-	 *		 <li>{@link IJavaSearchConstants#IMPLEMENTORS}: for interface, will find all types which implements a given interface.</li>
+	 *		 <li>{@link IJavaSearchConstants#IMPLEMENTORS}: for types, will find all types
+	 *				which directly implement/extend a given interface.</li>
 	 *	</ul>
 	 * @return a search pattern for a Java element or <code>null</code> if the given element is ill-formed
 	 * @deprecated Use {@link SearchPattern#createPattern(IJavaElement, int)} instead.
@@ -425,13 +427,12 @@ public class SearchEngine {
 	 *		  for all references </li>
 	 *	  <li>{@link IJavaSearchConstants#ALL_OCCURRENCES}: search 
 	 *		  for both declarations and all references </li>
-	 *	  <li>{@link IJavaSearchConstants#IMPLEMENTORS}: search for
-	 *		  all implementors of an interface; the value is only valid if
-	 *		  the Java element represents an interface.<br>
+	 *	  <li>{@link IJavaSearchConstants#IMPLEMENTORS}: for types, will find all types
+	 *			which directly implement/extend a given interface.<br>
 	 *			Note that types may be only classes or only interfaces if respectively {@link IJavaSearchConstants#CLASS} or
 	 *			{@link IJavaSearchConstants#INTERFACE} is used for searchFor parameter instead of {@link IJavaSearchConstants#TYPE}.
 	 *	  </li>
-	 * 	</ul>
+	 * </ul>
 	 * @param scope the search result has to be limited to the given scope
 	 * @param resultCollector a callback object to which each match is reported	 
 	 * @exception JavaModelException if the search failed. Reasons include:
@@ -471,9 +472,8 @@ public class SearchEngine {
 	 *		  for all references </li>
 	 *	  <li>{@link IJavaSearchConstants#ALL_OCCURRENCES}: search 
 	 *		  for both declarations and all references </li>
-	 *	  <li>{@link IJavaSearchConstants#IMPLEMENTORS}: search for
-	 *		  all implementors of an interface; the value is only valid if
-	 *		  the Java element represents an interface</li>
+	 *	  <li>{@link IJavaSearchConstants#IMPLEMENTORS}: for types, will find all types
+	 *				which directly implement/extend a given interface.</li>
 	 * 	</ul>
 	 * @param scope the search result has to be limited to the given scope
 	 * @param resultCollector a callback object to which each match is reported
