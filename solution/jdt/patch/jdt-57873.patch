diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/PostfixExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/PostfixExpression.java
index f90d202..c54183c 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/PostfixExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/PostfixExpression.java
@@ -16,62 +16,55 @@ import org.eclipse.jdt.internal.compiler.lookup.*;
 
 public class PostfixExpression extends CompoundAssignment {
 
-	public PostfixExpression(Expression l, Expression e, int op, int pos) {
-		
-		super(l, e, op, pos);
-		this.sourceStart = l.sourceStart;
-		this.sourceEnd = pos;
-	}
-	
-	/**
-	 * Code generation for PostfixExpression
-	 *
-	 * @param currentScope org.eclipse.jdt.internal.compiler.lookup.BlockScope
-	 * @param codeStream org.eclipse.jdt.internal.compiler.codegen.CodeStream
-	 * @param valueRequired boolean
-	 */
-	public void generateCode(
-		BlockScope currentScope,
-		CodeStream codeStream,
-		boolean valueRequired) {
-
-		// various scenarii are possible, setting an array reference, 
-		// a field reference, a blank final field reference, a field of an enclosing instance or 
-		// just a local variable.
+public PostfixExpression(Expression lhs, Expression expression, int operator, int pos) {
+	super(lhs, expression, operator, pos);
+	this.sourceStart = lhs.sourceStart;
+	this.sourceEnd = pos;
+}
 
-		int pc = codeStream.position;
-		 ((Reference) lhs).generatePostIncrement(currentScope, codeStream, this, valueRequired);
-		if (valueRequired) {
-			codeStream.generateImplicitConversion(implicitConversion);
-		}
-		codeStream.recordPositionsFrom(pc, this.sourceStart);
-	}
+/**
+ * Code generation for PostfixExpression
+ *
+ * @param currentScope org.eclipse.jdt.internal.compiler.lookup.BlockScope
+ * @param codeStream org.eclipse.jdt.internal.compiler.codegen.CodeStream
+ * @param valueRequired boolean
+ */
+public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {
+	// various scenarii are possible, setting an array reference, 
+	// a field reference, a blank final field reference, a field of an enclosing instance or 
+	// just a local variable.
 
-	public String operatorToString() {
-		switch (operator) {
-			case PLUS :
-				return "++"; //$NON-NLS-1$
-			case MINUS :
-				return "--"; //$NON-NLS-1$
-		} 
-		return "unknown operator"; //$NON-NLS-1$
+	int pc = codeStream.position;
+	 ((Reference) this.lhs).generatePostIncrement(currentScope, codeStream, this, valueRequired);
+	if (valueRequired) {
+		codeStream.generateImplicitConversion(this.implicitConversion);
 	}
-	
-	public StringBuffer printExpressionNoParenthesis(int indent, StringBuffer output) {
+	codeStream.recordPositionsFrom(pc, this.sourceStart);
+}
 
-		return lhs.printExpression(indent, output).append(' ').append(operatorToString()); 
+public String operatorToString() {
+	switch (this.operator) {
+		case PLUS :
+			return "++"; //$NON-NLS-1$
+		case MINUS :
+			return "--"; //$NON-NLS-1$
 	} 
+	return "unknown operator"; //$NON-NLS-1$
+}
 
-	public boolean restrainUsageToNumericTypes() {
+public StringBuffer printExpressionNoParenthesis(int indent, StringBuffer output) {
+	return this.lhs.printExpression(indent, output).append(' ').append(operatorToString()); 
+} 
 
-		return true;
-	}
-	
-	public void traverse(ASTVisitor visitor, BlockScope scope) {
+public boolean restrainUsageToNumericTypes() {
+	return true;
+}
 
-		if (visitor.visit(this, scope)) {
-			lhs.traverse(visitor, scope);
-		}
-		visitor.endVisit(this, scope);
+public void traverse(ASTVisitor visitor, BlockScope scope) {
+
+	if (visitor.visit(this, scope)) {
+		this.lhs.traverse(visitor, scope);
 	}
+	visitor.endVisit(this, scope);
+}
 }
