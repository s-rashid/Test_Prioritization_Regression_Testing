diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/CompilationResult.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/CompilationResult.java
index 85ead0c..eda2ed7 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/CompilationResult.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/CompilationResult.java
@@ -30,6 +30,8 @@ package org.eclipse.jdt.internal.compiler;
  * specific fields and methods which were referenced, but does contain their 
  * declaring types and any other types used to locate such fields or methods.
  */
+import java.util.Arrays;
+import java.util.Comparator;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Hashtable;
@@ -47,7 +49,6 @@ import org.eclipse.jdt.internal.compiler.parser.RecoveryScannerData;
 import org.eclipse.jdt.internal.compiler.problem.ProblemReporter;
 
 public class CompilationResult {
-	private static final int[] EMPTY_LINE_ENDS = new int[0];
 	
 	public CategorizedProblem problems[];
 	public CategorizedProblem tasks[];
@@ -60,7 +61,6 @@ public class CompilationResult {
 	public char[][][] qualifiedReferences;
 	public char[][] simpleNameReferences;
 	public boolean hasAnnotations = false;
-
 	public int lineSeparatorPositions[];
 	public RecoveryScannerData recoveryScannerData;
 	public Map compiledTypes = new Hashtable(11);
@@ -73,430 +73,400 @@ public class CompilationResult {
 	long[] suppressWarningScopePositions; // (start << 32) + end 
 	int suppressWarningsCount;
 	
-	public CompilationResult(
+private static final int[] EMPTY_LINE_ENDS = new int[0];
+private static final Comparator PROBLEM_COMPARATOR = new Comparator() {
+	public int compare(Object o1, Object o2) {
+		return ((CategorizedProblem) o1).getSourceStart() - ((CategorizedProblem) o2).getSourceStart();
+	}
+};
+
+public CompilationResult(
 		char[] fileName,
 		int unitIndex, 
 		int totalUnitsKnown,
 		int maxProblemPerUnit){
-	
-		this.fileName = fileName;
-		this.unitIndex = unitIndex;
-		this.totalUnitsKnown = totalUnitsKnown;
-		this.maxProblemPerUnit = maxProblemPerUnit;
-	}
-	
-	public CompilationResult(
+
+	this.fileName = fileName;
+	this.unitIndex = unitIndex;
+	this.totalUnitsKnown = totalUnitsKnown;
+	this.maxProblemPerUnit = maxProblemPerUnit;
+}
+
+public CompilationResult(
 		ICompilationUnit compilationUnit,
 		int unitIndex, 
 		int totalUnitsKnown,
 		int maxProblemPerUnit){
-	
-		this.fileName = compilationUnit.getFileName();
-		this.compilationUnit = compilationUnit;
-		this.unitIndex = unitIndex;
-		this.totalUnitsKnown = totalUnitsKnown;
-		this.maxProblemPerUnit = maxProblemPerUnit;
-	}
 
-	private int computePriority(CategorizedProblem problem){
+	this.fileName = compilationUnit.getFileName();
+	this.compilationUnit = compilationUnit;
+	this.unitIndex = unitIndex;
+	this.totalUnitsKnown = totalUnitsKnown;
+	this.maxProblemPerUnit = maxProblemPerUnit;
+}
+
+private int computePriority(CategorizedProblem problem){
+	final int P_STATIC = 10000;
+	final int P_OUTSIDE_METHOD = 40000;
+	final int P_FIRST_ERROR = 20000;
+	final int P_ERROR = 100000;
 	
-		final int P_STATIC = 10000;
-		final int P_OUTSIDE_METHOD = 40000;
-		final int P_FIRST_ERROR = 20000;
-		final int P_ERROR = 100000;
-		
-		int priority = 10000 - problem.getSourceLineNumber(); // early problems first
-		if (priority < 0) priority = 0;
-		if (problem.isError()){
-			priority += P_ERROR;
-		}
-		ReferenceContext context = problemsMap == null ? null : (ReferenceContext) problemsMap.get(problem);
-		if (context != null){
-			if (context instanceof AbstractMethodDeclaration){
-				AbstractMethodDeclaration method = (AbstractMethodDeclaration) context;
-				if (method.isStatic()) {
-					priority += P_STATIC;
-				}
-			} else {
-				priority += P_OUTSIDE_METHOD;
+	int priority = 10000 - problem.getSourceLineNumber(); // early problems first
+	if (priority < 0) priority = 0;
+	if (problem.isError()){
+		priority += P_ERROR;
+	}
+	ReferenceContext context = this.problemsMap == null ? null : (ReferenceContext) this.problemsMap.get(problem);
+	if (context != null){
+		if (context instanceof AbstractMethodDeclaration){
+			AbstractMethodDeclaration method = (AbstractMethodDeclaration) context;
+			if (method.isStatic()) {
+				priority += P_STATIC;
 			}
-			if (firstErrors.contains(problem)){ // if context is null, firstErrors is null too
-			  priority += P_FIRST_ERROR;
-		    }
 		} else {
 			priority += P_OUTSIDE_METHOD;
 		}
-		return priority;
+		if (this.firstErrors.contains(problem)){ // if context is null, firstErrors is null too
+		  priority += P_FIRST_ERROR;
+	    }
+	} else {
+		priority += P_OUTSIDE_METHOD;
 	}
+	return priority;
+}
 
-	public void discardSuppressedWarnings() {
-
-		if (this.suppressWarningsCount == 0) return;
-		int removed = 0;
-		nextProblem: for (int i = 0, length = this.problemCount; i < length; i++) {
-			CategorizedProblem problem = this.problems[i];
-			int problemID = problem.getID();
-			if (!problem.isWarning()) {
-				switch (problemID) {
-					case IProblem.NonExternalizedStringLiteral :
-					case IProblem.UnnecessaryNLSTag :
-						break;
-					default :
-						continue nextProblem;
-				}
-			}
-			int start = problem.getSourceStart();
-			int end = problem.getSourceEnd();
-			nextSuppress: for (int j = 0, max = this.suppressWarningsCount; j < max; j++) {
-				long position = this.suppressWarningScopePositions[j];
-				int startSuppress = (int) (position >>> 32);
-				int endSuppress = (int) position;
-				if (start < startSuppress) continue nextSuppress;
-				if (end > endSuppress) continue nextSuppress;
-				if ((ProblemReporter.getIrritant(problemID) & this.suppressWarningIrritants[j]) == 0)
-					continue nextSuppress;
-				// discard suppressed warning
-				removed++;
-				problems[i] = null;
-				if (problemsMap != null) problemsMap.remove(problem);
-				if (firstErrors != null) firstErrors.remove(problem);
-				continue nextProblem;
+public void discardSuppressedWarnings() {
+	if (this.suppressWarningsCount == 0) return;
+	int removed = 0;
+	nextProblem: for (int i = 0, length = this.problemCount; i < length; i++) {
+		CategorizedProblem problem = this.problems[i];
+		int problemID = problem.getID();
+		if (!problem.isWarning()) {
+			switch (problemID) {
+				case IProblem.NonExternalizedStringLiteral :
+				case IProblem.UnnecessaryNLSTag :
+					break;
+				default :
+					continue nextProblem;
 			}
 		}
-		if (removed > 0) {
-			for (int i = 0, index = 0; i < this.problemCount; i++) {
-				CategorizedProblem problem;
-				if ((problem = this.problems[i]) != null) {
-					if (i > index) {
-						this.problems[index++] = problem;
-					} else {
-						index++;
-					}
+		int start = problem.getSourceStart();
+		int end = problem.getSourceEnd();
+		nextSuppress: for (int j = 0, max = this.suppressWarningsCount; j < max; j++) {
+			long position = this.suppressWarningScopePositions[j];
+			int startSuppress = (int) (position >>> 32);
+			int endSuppress = (int) position;
+			if (start < startSuppress) continue nextSuppress;
+			if (end > endSuppress) continue nextSuppress;
+			if ((ProblemReporter.getIrritant(problemID) & this.suppressWarningIrritants[j]) == 0)
+				continue nextSuppress;
+			// discard suppressed warning
+			removed++;
+			this.problems[i] = null;
+			if (this.problemsMap != null) this.problemsMap.remove(problem);
+			if (this.firstErrors != null) this.firstErrors.remove(problem);
+			continue nextProblem;
+		}
+	}
+	if (removed > 0) {
+		for (int i = 0, index = 0; i < this.problemCount; i++) {
+			CategorizedProblem problem;
+			if ((problem = this.problems[i]) != null) {
+				if (i > index) {
+					this.problems[index++] = problem;
+				} else {
+					index++;
 				}
 			}
-			this.problemCount -= removed;
 		}
+		this.problemCount -= removed;
 	}
-	
-	public CategorizedProblem[] getAllProblems() {
-		CategorizedProblem[] onlyProblems = this.getProblems();
-		int onlyProblemCount = onlyProblems != null ? onlyProblems.length : 0;
-		CategorizedProblem[] onlyTasks = this.getTasks();
-		int onlyTaskCount = onlyTasks != null ? onlyTasks.length : 0;
-		if (onlyTaskCount == 0) {
-			return onlyProblems;
+}
+
+public CategorizedProblem[] getAllProblems() {
+	CategorizedProblem[] onlyProblems = this.getProblems();
+	int onlyProblemCount = onlyProblems != null ? onlyProblems.length : 0;
+	CategorizedProblem[] onlyTasks = this.getTasks();
+	int onlyTaskCount = onlyTasks != null ? onlyTasks.length : 0;
+	if (onlyTaskCount == 0) {
+		return onlyProblems;
+	}
+	if (onlyProblemCount == 0) {
+		return onlyTasks;
+	}
+
+	int totalNumberOfProblem = onlyProblemCount + onlyTaskCount;
+	CategorizedProblem[] allProblems = new CategorizedProblem[totalNumberOfProblem];
+	int allProblemIndex = 0;
+	int taskIndex = 0;
+	int problemIndex = 0;
+	while (taskIndex + problemIndex < totalNumberOfProblem) {
+		CategorizedProblem nextTask = null;
+		CategorizedProblem nextProblem = null;
+		if (taskIndex < onlyTaskCount) {
+			nextTask = onlyTasks[taskIndex];
 		}
-		if (onlyProblemCount == 0) {
-			return onlyTasks;
+		if (problemIndex < onlyProblemCount) {
+			nextProblem = onlyProblems[problemIndex];
 		}
-
-		int totalNumberOfProblem = onlyProblemCount + onlyTaskCount;
-		CategorizedProblem[] allProblems = new CategorizedProblem[totalNumberOfProblem];
-		int allProblemIndex = 0;
-		int taskIndex = 0;
-		int problemIndex = 0;
-		while (taskIndex + problemIndex < totalNumberOfProblem) {
-			CategorizedProblem nextTask = null;
-			CategorizedProblem nextProblem = null;
-			if (taskIndex < onlyTaskCount) {
-				nextTask = onlyTasks[taskIndex];
-			}
-			if (problemIndex < onlyProblemCount) {
-				nextProblem = onlyProblems[problemIndex];
-			}
-			// select the next problem
-			CategorizedProblem currentProblem = null;
-			if (nextProblem != null) {
-				if (nextTask != null) {
-					if (nextProblem.getSourceStart() < nextTask.getSourceStart()) {
-						currentProblem = nextProblem;
-						problemIndex++;
-					} else {
-						currentProblem = nextTask;
-						taskIndex++;
-					}
-				} else {
+		// select the next problem
+		CategorizedProblem currentProblem = null;
+		if (nextProblem != null) {
+			if (nextTask != null) {
+				if (nextProblem.getSourceStart() < nextTask.getSourceStart()) {
 					currentProblem = nextProblem;
 					problemIndex++;
-				}
-			} else {
-				if (nextTask != null) {
+				} else {
 					currentProblem = nextTask;
 					taskIndex++;
 				}
+			} else {
+				currentProblem = nextProblem;
+				problemIndex++;
+			}
+		} else {
+			if (nextTask != null) {
+				currentProblem = nextTask;
+				taskIndex++;
 			}
-			allProblems[allProblemIndex++] = currentProblem;
 		}
-		return allProblems;
-	}
-	
-	public ClassFile[] getClassFiles() {
-		ClassFile[] classFiles = new ClassFile[compiledTypes.size()];
-		compiledTypes.values().toArray(classFiles);
-		return classFiles;	
+		allProblems[allProblemIndex++] = currentProblem;
 	}
+	return allProblems;
+}
 
-	/**
-	 * Answer the initial compilation unit corresponding to the present compilation result
-	 */
-	public ICompilationUnit getCompilationUnit(){
-		return compilationUnit;
-	}
+public ClassFile[] getClassFiles() {
+	ClassFile[] classFiles = new ClassFile[this.compiledTypes.size()];
+	this.compiledTypes.values().toArray(classFiles);
+	return classFiles;	
+}
+
+/**
+ * Answer the initial compilation unit corresponding to the present compilation result
+ */
+public ICompilationUnit getCompilationUnit(){
+	return this.compilationUnit;
+}
 
-	/**
-	 * Answer the initial file name
-	 */
-	public char[] getFileName(){
-		return fileName;
+/**
+ * Answer the errors encountered during compilation.
+ */
+public CategorizedProblem[] getErrors() {
+	CategorizedProblem[] reportedProblems = getProblems();
+	int errorCount = 0;
+	for (int i = 0; i < this.problemCount; i++) {
+		if (reportedProblems[i].isError()) errorCount++;
 	}
-	
-	/**
-	 * Answer the errors encountered during compilation.
-	 */
-	public CategorizedProblem[] getErrors() {
-	
-		CategorizedProblem[] reportedProblems = getProblems();
-		int errorCount = 0;
-		for (int i = 0; i < this.problemCount; i++) {
-			if (reportedProblems[i].isError()) errorCount++;
+	if (errorCount == this.problemCount) return reportedProblems;
+	CategorizedProblem[] errors = new CategorizedProblem[errorCount];
+	int index = 0;
+	for (int i = 0; i < this.problemCount; i++) {
+		if (reportedProblems[i].isError()) errors[index++] = reportedProblems[i];
+	}
+	return errors;
+}
+
+
+/**
+ * Answer the initial file name
+ */
+public char[] getFileName(){
+	return this.fileName;
+}
+
+public int[] getLineSeparatorPositions() {
+	return this.lineSeparatorPositions == null ? CompilationResult.EMPTY_LINE_ENDS : this.lineSeparatorPositions;
+}
+
+/**
+ * Answer the problems (errors and warnings) encountered during compilation.
+ *
+ * This is not a compiler internal API - it has side-effects !
+ * It is intended to be used only once all problems have been detected,
+ * and makes sure the problems slot as the exact size of the number of
+ * problems.
+ */
+public CategorizedProblem[] getProblems() {
+	// Re-adjust the size of the problems if necessary.
+	if (this.problems != null) {
+		discardSuppressedWarnings();
+
+		if (this.problemCount != this.problems.length) {
+			System.arraycopy(this.problems, 0, (this.problems = new CategorizedProblem[this.problemCount]), 0, this.problemCount);
 		}
-		if (errorCount == this.problemCount) return reportedProblems;
-		CategorizedProblem[] errors = new CategorizedProblem[errorCount];
-		int index = 0;
-		for (int i = 0; i < this.problemCount; i++) {
-			if (reportedProblems[i].isError()) errors[index++] = reportedProblems[i];
+
+		if (this.maxProblemPerUnit > 0 && this.problemCount > this.maxProblemPerUnit){
+			quickPrioritize(this.problems, 0, this.problemCount - 1);
+			this.problemCount = this.maxProblemPerUnit;
+			System.arraycopy(this.problems, 0, (this.problems = new CategorizedProblem[this.problemCount]), 0, this.problemCount);
 		}
-		return errors;
-	}
-	
 
-	public int[] getLineSeparatorPositions() {
-		return this.lineSeparatorPositions == null ? EMPTY_LINE_ENDS : this.lineSeparatorPositions;
+		// Stable sort problems per source positions.
+		Arrays.sort(this.problems, 0, this.problems.length, CompilationResult.PROBLEM_COMPARATOR);
+		//quickSort(problems, 0, problems.length-1);
 	}
+	return this.problems;
+}
 
-	/**
-	 * Answer the problems (errors and warnings) encountered during compilation.
-	 *
-	 * This is not a compiler internal API - it has side-effects !
-	 * It is intended to be used only once all problems have been detected,
-	 * and makes sure the problems slot as the exact size of the number of
-	 * problems.
-	 */
-	public CategorizedProblem[] getProblems() {
-		
-		// Re-adjust the size of the problems if necessary.
-		if (problems != null) {
-			discardSuppressedWarnings();
-	
-			if (this.problemCount != problems.length) {
-				System.arraycopy(problems, 0, (problems = new CategorizedProblem[problemCount]), 0, problemCount);
-			}
-	
-			if (this.maxProblemPerUnit > 0 && this.problemCount > this.maxProblemPerUnit){
-				quickPrioritize(problems, 0, problemCount - 1);
-				this.problemCount = this.maxProblemPerUnit;
-				System.arraycopy(problems, 0, (problems = new CategorizedProblem[problemCount]), 0, problemCount);
-			}
-	
-			// Sort problems per source positions.
-			quickSort(problems, 0, problems.length-1);
+/**
+ * Answer the tasks (TO-DO, ...) encountered during compilation.
+ *
+ * This is not a compiler internal API - it has side-effects !
+ * It is intended to be used only once all problems have been detected,
+ * and makes sure the problems slot as the exact size of the number of
+ * problems.
+ */
+public CategorizedProblem[] getTasks() {
+	// Re-adjust the size of the tasks if necessary.
+	if (this.tasks != null) {
+
+		if (this.taskCount != this.tasks.length) {
+			System.arraycopy(this.tasks, 0, (this.tasks = new CategorizedProblem[this.taskCount]), 0, this.taskCount);
 		}
-		return problems;
+		// Stable sort problems per source positions.
+		Arrays.sort(this.tasks, 0, this.tasks.length, CompilationResult.PROBLEM_COMPARATOR);
+		//quickSort(tasks, 0, tasks.length-1);
 	}
+	return this.tasks;
+}
 
-	/**
-	 * Answer the tasks (TO-DO, ...) encountered during compilation.
-	 *
-	 * This is not a compiler internal API - it has side-effects !
-	 * It is intended to be used only once all problems have been detected,
-	 * and makes sure the problems slot as the exact size of the number of
-	 * problems.
-	 */
-	public CategorizedProblem[] getTasks() {
-		
-		// Re-adjust the size of the tasks if necessary.
-		if (this.tasks != null) {
-	
-			if (this.taskCount != this.tasks.length) {
-				System.arraycopy(this.tasks, 0, (this.tasks = new CategorizedProblem[this.taskCount]), 0, this.taskCount);
-			}
-			quickSort(tasks, 0, tasks.length-1);
+public boolean hasErrors() {
+	if (this.problems != null)
+		for (int i = 0; i < this.problemCount; i++) {
+			if (this.problems[i].isError())
+				return true;
 		}
-		return this.tasks;
-	}
-	
-	public boolean hasErrors() {
+	return false;
+}
 
-		if (problems != null)
-			for (int i = 0; i < problemCount; i++) {
-				if (problems[i].isError())
-					return true;
-			}
-		return false;
-	}
+public boolean hasProblems() {
+	return this.problemCount != 0;
+}
 
-	public boolean hasProblems() {
+public boolean hasTasks() {
+	return this.taskCount != 0;
+}
 
-		return problemCount != 0;
-	}
+public boolean hasWarnings() {
+	if (this.problems != null)
+		for (int i = 0; i < this.problemCount; i++) {
+			if (this.problems[i].isWarning())
+				return true;
+		}
+	return false;
+}
 
-	public boolean hasTasks() {
-		return this.taskCount != 0;
-	}
-	
-	public boolean hasWarnings() {
+private void quickPrioritize(CategorizedProblem[] problemList, int left, int right) {
+	if (left >= right) return;
 
-		if (problems != null)
-			for (int i = 0; i < problemCount; i++) {
-				if (problems[i].isWarning())
-					return true;
-			}
-		return false;
-	}
-	
-	private static void quickSort(CategorizedProblem[] list, int left, int right) {
+	// sort the problems by their priority... starting with the highest priority
+	int original_left = left;
+	int original_right = right;
+	int mid = computePriority(problemList[(left + right) / 2]);
+	do {
+		while (computePriority(problemList[right]) < mid)
+			right--;
+		while (mid < computePriority(problemList[left]))
+			left++;
+		if (left <= right) {
+			CategorizedProblem tmp = problemList[left];
+			problemList[left] = problemList[right];
+			problemList[right] = tmp;
+			left++;
+			right--;
+		}
+	} while (left <= right);
+	if (original_left < right)
+		quickPrioritize(problemList, original_left, right);
+	if (left < original_right)
+		quickPrioritize(problemList, left, original_right);
+}
 
-		if (left >= right) return;
-	
-		// sort the problems by their source start position... starting with 0
-		int original_left = left;
-		int original_right = right;
-		int mid = list[(left + right) / 2].getSourceStart();
-		do {
-			while (list[left].getSourceStart() < mid)
-				left++;
-			while (mid < list[right].getSourceStart())
-				right--;
-			if (left <= right) {
-				CategorizedProblem tmp = list[left];
-				list[left] = list[right];
-				list[right] = tmp;
-				left++;
-				right--;
-			}
-		} while (left <= right);
-		if (original_left < right)
-			quickSort(list, original_left, right);
-		if (left < original_right)
-			quickSort(list, left, original_right);
+public void record(CategorizedProblem newProblem, ReferenceContext referenceContext) {
+	//new Exception("VERBOSE PROBLEM REPORTING").printStackTrace();
+	if(newProblem.getID() == IProblem.Task) {
+			recordTask(newProblem);
+			return;
 	}
-	
-	private void quickPrioritize(CategorizedProblem[] list, int left, int right) {
-		
-		if (left >= right) return;
-	
-		// sort the problems by their priority... starting with the highest priority
-		int original_left = left;
-		int original_right = right;
-		int mid = computePriority(list[(left + right) / 2]);
-		do {
-			while (computePriority(list[right]) < mid)
-				right--;
-			while (mid < computePriority(list[left]))
-				left++;
-			if (left <= right) {
-				CategorizedProblem tmp = list[left];
-				list[left] = list[right];
-				list[right] = tmp;
-				left++;
-				right--;
-			}
-		} while (left <= right);
-		if (original_left < right)
-			quickPrioritize(list, original_left, right);
-		if (left < original_right)
-			quickPrioritize(list, left, original_right);
+	if (this.problemCount == 0) {
+		this.problems = new CategorizedProblem[5];
+	} else if (this.problemCount == this.problems.length) {
+		System.arraycopy(this.problems, 0, (this.problems = new CategorizedProblem[this.problemCount * 2]), 0, this.problemCount);
 	}
-	
-	/**
-	 * For now, remember the compiled type using its compound name.
-	 */
-	public void record(char[] typeName, ClassFile classFile) {
-
-	    SourceTypeBinding sourceType = classFile.referenceBinding;
-	    if (!sourceType.isLocalType() && sourceType.isHierarchyInconsistent()) {
-	        this.hasInconsistentToplevelHierarchies = true;
-	    }
-		compiledTypes.put(typeName, classFile);
+	this.problems[this.problemCount++] = newProblem;
+	if (referenceContext != null){
+		if (this.problemsMap == null) this.problemsMap = new HashMap(5);
+		if (this.firstErrors == null) this.firstErrors = new HashSet(5);
+		if (newProblem.isError() && !referenceContext.hasErrors()) this.firstErrors.add(newProblem);
+		this.problemsMap.put(newProblem, referenceContext);
 	}
+	if ((newProblem.getID() & IProblem.Syntax) != 0 && newProblem.isError())
+		this.hasSyntaxError = true;
+}
 
-	public void record(CategorizedProblem newProblem, ReferenceContext referenceContext) {
+/**
+ * For now, remember the compiled type using its compound name.
+ */
+public void record(char[] typeName, ClassFile classFile) {
+    SourceTypeBinding sourceType = classFile.referenceBinding;
+    if (!sourceType.isLocalType() && sourceType.isHierarchyInconsistent()) {
+        this.hasInconsistentToplevelHierarchies = true;
+    }
+	this.compiledTypes.put(typeName, classFile);
+}
 
-		//new Exception("VERBOSE PROBLEM REPORTING").printStackTrace();
-		if(newProblem.getID() == IProblem.Task) {
-				recordTask(newProblem);
-				return;
-		}
-		if (problemCount == 0) {
-			problems = new CategorizedProblem[5];
-		} else if (problemCount == problems.length) {
-			System.arraycopy(problems, 0, (problems = new CategorizedProblem[problemCount * 2]), 0, problemCount);
-		}
-		problems[problemCount++] = newProblem;
-		if (referenceContext != null){
-			if (problemsMap == null) problemsMap = new HashMap(5);
-			if (firstErrors == null) firstErrors = new HashSet(5);
-			if (newProblem.isError() && !referenceContext.hasErrors()) firstErrors.add(newProblem);
-			problemsMap.put(newProblem, referenceContext);
-		}
-		if ((newProblem.getID() & IProblem.Syntax) != 0 && newProblem.isError())
-			this.hasSyntaxError = true;
+public void recordSuppressWarnings(long irritant, int scopeStart, int scopeEnd) {
+	if (this.suppressWarningIrritants == null) {
+		this.suppressWarningIrritants = new long[3];
+		this.suppressWarningScopePositions = new long[3];
+	} else if (this.suppressWarningIrritants.length == this.suppressWarningsCount) {
+		System.arraycopy(this.suppressWarningIrritants, 0,this.suppressWarningIrritants = new long[2*this.suppressWarningsCount], 0, this.suppressWarningsCount);
+		System.arraycopy(this.suppressWarningScopePositions, 0,this.suppressWarningScopePositions = new long[2*this.suppressWarningsCount], 0, this.suppressWarningsCount);
 	}
+	this.suppressWarningIrritants[this.suppressWarningsCount] = irritant;
+	this.suppressWarningScopePositions[this.suppressWarningsCount++] = ((long)scopeStart<<32) + scopeEnd;
+}
 
-	public void recordSuppressWarnings(long irritant, int scopeStart, int scopeEnd) {
-		if (this.suppressWarningIrritants == null) {
-			this.suppressWarningIrritants = new long[3];
-			this.suppressWarningScopePositions = new long[3];
-		} else if (this.suppressWarningIrritants.length == this.suppressWarningsCount) {
-			System.arraycopy(this.suppressWarningIrritants, 0,this.suppressWarningIrritants = new long[2*this.suppressWarningsCount], 0, this.suppressWarningsCount);
-			System.arraycopy(this.suppressWarningScopePositions, 0,this.suppressWarningScopePositions = new long[2*this.suppressWarningsCount], 0, this.suppressWarningsCount);
-		}
-		this.suppressWarningIrritants[this.suppressWarningsCount] = irritant;
-		this.suppressWarningScopePositions[this.suppressWarningsCount++] = ((long)scopeStart<<32) + scopeEnd;
+private void recordTask(CategorizedProblem newProblem) {
+	if (this.taskCount == 0) {
+		this.tasks = new CategorizedProblem[5];
+	} else if (this.taskCount == this.tasks.length) {
+		System.arraycopy(this.tasks, 0, (this.tasks = new CategorizedProblem[this.taskCount * 2]), 0, this.taskCount);
 	}
+	this.tasks[this.taskCount++] = newProblem;
+}
 
-	private void recordTask(CategorizedProblem newProblem) {
-		if (this.taskCount == 0) {
-			this.tasks = new CategorizedProblem[5];
-		} else if (this.taskCount == this.tasks.length) {
-			System.arraycopy(this.tasks, 0, (this.tasks = new CategorizedProblem[this.taskCount * 2]), 0, this.taskCount);
-		}
-		this.tasks[this.taskCount++] = newProblem;
-	}
-	
-	public CompilationResult tagAsAccepted(){
+public CompilationResult tagAsAccepted(){
+	this.hasBeenAccepted = true;
+	this.problemsMap = null; // flush
+	this.firstErrors = null; // flush
+	return this;
+}
 
-		this.hasBeenAccepted = true;
-		this.problemsMap = null; // flush
-		this.firstErrors = null; // flush
-		return this;
+public String toString(){
+	StringBuffer buffer = new StringBuffer();
+	if (this.fileName != null){
+		buffer.append("Filename : ").append(this.fileName).append('\n'); //$NON-NLS-1$
 	}
-	
-	public String toString(){
-
-		StringBuffer buffer = new StringBuffer();
-		if (this.fileName != null){
-			buffer.append("Filename : ").append(this.fileName).append('\n'); //$NON-NLS-1$
-		}
-		if (this.compiledTypes != null){
-			buffer.append("COMPILED type(s)	\n");  //$NON-NLS-1$
-			Iterator keys = this.compiledTypes.keySet().iterator();
-			while (keys.hasNext()) {
-				char[] typeName = (char[]) keys.next();
-				buffer.append("\t - ").append(typeName).append('\n');   //$NON-NLS-1$
-				
-			}
-		} else {
-			buffer.append("No COMPILED type\n");  //$NON-NLS-1$
+	if (this.compiledTypes != null){
+		buffer.append("COMPILED type(s)	\n");  //$NON-NLS-1$
+		Iterator keys = this.compiledTypes.keySet().iterator();
+		while (keys.hasNext()) {
+			char[] typeName = (char[]) keys.next();
+			buffer.append("\t - ").append(typeName).append('\n');   //$NON-NLS-1$
+			
 		}
-		if (problems != null){
-			buffer.append(this.problemCount).append(" PROBLEM(s) detected \n"); //$NON-NLS-1$
-			for (int i = 0; i < this.problemCount; i++){
-				buffer.append("\t - ").append(this.problems[i]).append('\n'); //$NON-NLS-1$
-			}
-		} else {
-			buffer.append("No PROBLEM\n"); //$NON-NLS-1$
-		} 
-		return buffer.toString();
+	} else {
+		buffer.append("No COMPILED type\n");  //$NON-NLS-1$
 	}
+	if (this.problems != null){
+		buffer.append(this.problemCount).append(" PROBLEM(s) detected \n"); //$NON-NLS-1$
+		for (int i = 0; i < this.problemCount; i++){
+			buffer.append("\t - ").append(this.problems[i]).append('\n'); //$NON-NLS-1$
+		}
+	} else {
+		buffer.append("No PROBLEM\n"); //$NON-NLS-1$
+	} 
+	return buffer.toString();
+}
 }
