diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java
index 77f7c25..9e65a5f 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java
@@ -13,32 +13,24 @@
 package org.eclipse.jdt.apt.core.internal;
 
 import java.util.Collection;
-import java.util.Collections;
-import java.util.HashSet;
 import java.util.Iterator;
 import java.util.LinkedHashSet;
-import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
-import org.eclipse.core.resources.IFile;
 import org.eclipse.core.resources.IMarker;
 import org.eclipse.core.resources.IProject;
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.jdt.apt.core.AptPlugin;
-import org.eclipse.jdt.apt.core.internal.APTDispatch.APTResult;
 import org.eclipse.jdt.apt.core.internal.util.FactoryPath;
 import org.eclipse.jdt.apt.core.util.AptConfig;
+import org.eclipse.jdt.core.ICompilationUnit;
 import org.eclipse.jdt.core.IJavaProject;
+import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.compiler.CompilationParticipant;
-import org.eclipse.jdt.core.compiler.CompilationParticipantEvent;
-import org.eclipse.jdt.core.compiler.CompilationParticipantResult;
-import org.eclipse.jdt.core.compiler.IProblem;
-import org.eclipse.jdt.core.compiler.PreBuildCompilationEvent;
-import org.eclipse.jdt.core.compiler.PreBuildCompilationResult;
-import org.eclipse.jdt.core.compiler.PreReconcileCompilationEvent;
-import org.eclipse.jdt.core.compiler.PreReconcileCompilationResult;
+import org.eclipse.jdt.core.compiler.ICompilationParticipantResult;
+import org.eclipse.jdt.core.compiler.ReconcileContext;
 
 import com.sun.mirror.apt.AnnotationProcessorFactory;
 
@@ -55,6 +47,7 @@ public class AptCompilationParticipant extends CompilationParticipant
 	 * The set is an order preserving. The order is determined by their first invocation.
 	 */
 	private Set<AnnotationProcessorFactory> _previousRoundsBatchFactories = new LinkedHashSet<AnnotationProcessorFactory>();
+	private int _buildRound = 0;
 	private static AptCompilationParticipant INSTANCE;
 	
 	public static AptCompilationParticipant getInstance() {
@@ -70,87 +63,45 @@ public class AptCompilationParticipant extends CompilationParticipant
 	{
 		INSTANCE = this;
 	}
-
-	public CompilationParticipantResult notify( CompilationParticipantEvent cpe )
-	{	
-        // We need to clean even if we have been disabled. This allows
-		// us to remove our generated source files if we get disabled
-        if ( cpe.getKind() == CompilationParticipant.CLEAN_EVENT ) {
-            return cleanNotify( cpe );
-        }
-        else if (!AptConfig.isEnabled(cpe.getJavaProject())) {
-			return GENERIC_COMPILATION_RESULT;
-        }
-        else if ( cpe == null ) {
-			return GENERIC_COMPILATION_RESULT;
-		}
-		else if ( cpe.getKind() == CompilationParticipant.PRE_BUILD_EVENT ) {
-			return preBuildNotify( (PreBuildCompilationEvent) cpe );
-		}
-		else if ( cpe.getKind() == CompilationParticipant.PRE_RECONCILE_EVENT ) {
-			return preReconcileNotify( (PreReconcileCompilationEvent) cpe );
-		}
-		else {
-			return GENERIC_COMPILATION_RESULT;
-		}
+	
+	public boolean isAnnotationProcessor(){
+		return true;
 	}
-		
-	private CompilationParticipantResult preBuildNotify( PreBuildCompilationEvent pbce )
-	{		
-		if ( pbce == null )
-			return EMPTY_PRE_BUILD_COMPILATION_RESULT;
-
-		IFile[] buildFiles = pbce.getFiles();
-		IJavaProject javaProject = pbce.getJavaProject();
-		
-		if ( buildFiles == null || buildFiles.length == 0 )
-			return EMPTY_PRE_BUILD_COMPILATION_RESULT;
-		
+	
+	public void processAnnotations(ICompilationParticipantResult[] filesWithAnnotations, boolean isBatchBuild) {
+		if( filesWithAnnotations == null || filesWithAnnotations.length == 0 )
+			return;
+		final IProject project = filesWithAnnotations[0].getFile().getProject();
+		final IJavaProject javaProject = JavaCore.create(project);
 		// Don't dispatch on pre-1.5 project. They cannot legally have annotations
-		String javaVersion = javaProject.getOption("org.eclipse.jdt.core.compiler.source", true); //$NON-NLS-1$
-		
+		String javaVersion = javaProject.getOption("org.eclipse.jdt.core.compiler.source", true); //$NON-NLS-1$		
 		// Check for 1.3 or 1.4, as we don't want this to break in the future when 1.6
 		// is a possibility
 		if ("1.3".equals(javaVersion) || "1.4".equals(javaVersion)) { //$NON-NLS-1$ //$NON-NLS-2$
-			return EMPTY_PRE_BUILD_COMPILATION_RESULT;
+			return;
 		}			
-	
-		// If we're in batch mode, we need to reset the classloaders
-		// for the batch processors before we begin
-		boolean isFullBuild = pbce.isFullBuild();
+		
 		try {
-			if (isFullBuild && pbce.getRound() == 0) {
-				AnnotationProcessorFactoryLoader.getLoader().resetBatchProcessors(pbce.getJavaProject());
+			if (isBatchBuild && _buildRound == 0 ) {
+				AnnotationProcessorFactoryLoader.getLoader().resetBatchProcessors(javaProject);
 				_previousRoundsBatchFactories.clear();
 			}
-			
+		
 			Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories =
 				AnnotationProcessorFactoryLoader.getLoader().getFactoriesAndAttributesForProject(javaProject);
 			
-			APTResult result = APTDispatch.runAPTDuringBuild(factories, _previousRoundsBatchFactories, buildFiles, javaProject, isFullBuild);
-			Set<IFile> newFiles = result.getNewFiles();			
-			Set<IFile> deletedFiles = new HashSet<IFile>();
-			_previousRoundsBatchFactories.addAll(result.getDispatchedBatchFactory());
-			
-			// for apt, new files will always trump deleted files
-			for ( IFile df : result.getDeletedFiles() ){
-				if ( !newFiles.contains( df ) ){
-					deletedFiles.add(df);
-				}
-			}
-	
-			return new PreBuildCompilationResult( 
-					newFiles.toArray( new IFile[ newFiles.size() ] ), 
-					deletedFiles.toArray( new IFile[ deletedFiles.size() ] ), 
-					result.getNewDependencies(), 
-					result.getProblems());
+			AptProject aptProject = AptPlugin.getAptProject(javaProject);
+			Set<AnnotationProcessorFactory> dispatchedBatchFactories = 
+				APTDispatchRunnable.runAPTDuringBuild(filesWithAnnotations, aptProject, factories, _previousRoundsBatchFactories, isBatchBuild);
+			_previousRoundsBatchFactories.addAll(dispatchedBatchFactories);
 		}
 		finally {
-			if (isFullBuild) {
+			if (isBatchBuild) {
 				// In order to keep from locking jars, we explicitly close any batch-based
 				// classloaders we opened
 				AnnotationProcessorFactoryLoader.getLoader().closeBatchClassLoader();
 			}
+			_buildRound ++;
 		}
 	}
 	
@@ -179,79 +130,63 @@ public class AptCompilationParticipant extends CompilationParticipant
 		}
 	}
 	
-	private CompilationParticipantResult preReconcileNotify( PreReconcileCompilationEvent prce )
-	{
-		IProblem[] problems = null;
+	public void reconcile(ReconcileContext context){
 		
 		try
-		{
-			org.eclipse.jdt.core.ICompilationUnit cu = prce.getCompilationUnit();
-			IJavaProject javaProject = prce.getJavaProject();
-			
-			// these are null sometimes.  Not sure why...
-			if ( cu == null || javaProject == null  )
-				return GENERIC_COMPILATION_RESULT;
+		{	
+			final ICompilationUnit workingCopy = context.getWorkingCopy();
+			if( workingCopy == null ) 
+				return;
+			IJavaProject javaProject = workingCopy.getJavaProject();			
+			if( javaProject == null )
+				return;
+			AptProject aptProject = AptPlugin.getAptProject(javaProject);
 			
 			Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories = 
 				AnnotationProcessorFactoryLoader.getLoader().getFactoriesAndAttributesForProject( javaProject );
-			APTResult result = APTDispatch.runAPTDuringReconcile( factories, cu, javaProject );
-			Map<IFile, List<IProblem>> allproblems = result.getProblems();			
-			
-			final List<IProblem> problemList = allproblems.get(cu.getResource());
-			if( problemList != null && !problemList.isEmpty())
-				problems = problemList.toArray(new IProblem[problemList.size()]);	
+			APTDispatchRunnable.runAPTDuringReconcile(context, aptProject, factories);
 		}
 		catch ( Throwable t )
 		{
-			AptPlugin.log(t, "Failure processing"); //$NON-NLS-1$
+			AptPlugin.log(t, "Failure processing");  //$NON-NLS-1$
 		}	
-		return new PreReconcileCompilationResult(problems);
 	}
-
-	private CompilationParticipantResult cleanNotify( CompilationParticipantEvent cpe )
-	{
-		IJavaProject javaProject = cpe.getJavaProject();
+	
+	public void cleanStarting(IJavaProject javaProject){
 		IProject p = javaProject.getProject();
 		
 		AptPlugin.getAptProject(javaProject).projectClean( true );
 		try{
 			// clear out all markers during a clean.
-			IMarker[] markers = p.findMarkers(AptPlugin.APT_PROCESSOR_PROBLEM_MARKER, true, IResource.DEPTH_INFINITE);
+			IMarker[] markers = p.findMarkers(AptPlugin.APT_BATCH_PROCESSOR_PROBLEM_MARKER, true, IResource.DEPTH_INFINITE);
 			if( markers != null ){
 				for( IMarker marker : markers )
 					marker.delete();
 			}
 		}
 		catch(CoreException e){
-			AptPlugin.log(e, "Unable to delete annotation processor problem markers"); //$NON-NLS-1$
+			AptPlugin.log(e, "Unable to delete batch annotation processor markers"); //$NON-NLS-1$
 		}
-		
-		return GENERIC_COMPILATION_RESULT;
-	}	
+	}
 	
 	/**
 	 * Does APT have anything to do for this project?
 	 * Even if there are no processors on the factory path, apt may still
 	 * be involved during a clean.
 	 */
-	public boolean doesParticipateInProject(IJavaProject project){
+	public boolean isActive(IJavaProject project){
 		return AptConfig.isEnabled(project);
 	}
 	
-	public void aboutToBuild(IJavaProject project) {
-		if (!AptConfig.isEnabled(project)) {
-			return;
-		}		
-		// setup the classpath and make sure the generated source folder is on disk.
+	public int aboutToBuild(IJavaProject project) {
+		if (AptConfig.isEnabled(project)) {
+			// setup the classpath and make sure the generated source folder is on disk.
 		AptPlugin.getAptProject(project).compilationStarted();
+		}		
+		_buildRound = 0; // reset
+		// TODO: (wharley) if the factory path is different we need a full build
+		return CompilationParticipant.READY_FOR_BUILD;
 	}
     
     private final static String DOT_JAVA = ".java"; //$NON-NLS-1$
-	
-	private final static PreBuildCompilationResult EMPTY_PRE_BUILD_COMPILATION_RESULT = 
-		new PreBuildCompilationResult( new IFile[0], new IFile[0], Collections.emptyMap(), Collections.emptyMap() );
-		
-	private final static CompilationParticipantResult GENERIC_COMPILATION_RESULT = 
-		new CompilationParticipantResult();
-
 }
