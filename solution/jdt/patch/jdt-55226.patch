diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java
index 52e7f2a..5c37059 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java
@@ -10,6 +10,7 @@
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.flow;
 
+import org.eclipse.jdt.internal.compiler.impl.Constant;
 import org.eclipse.jdt.internal.compiler.lookup.FieldBinding;
 import org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;
@@ -385,7 +386,7 @@ public class UnconditionalFlowInfo extends FlowInfo {
 			return true;
 
 		// final constants are inlined, and thus considered as always initialized
-		if (local.isConstantValue()) {
+		if (local.constant() != Constant.NotAConstant) {
 			return true;
 		}
 		return isDefinitelyAssigned(local.id + maxFieldCount);
@@ -413,7 +414,7 @@ public class UnconditionalFlowInfo extends FlowInfo {
 		if ((this.reachMode & UNREACHABLE) != 0)
 			return false;
 		// final constants are inlined, and thus considered as always initialized
-		if (local.isConstantValue()) {
+		if (local.constant() != Constant.NotAConstant) {
 			return true;
 		}
 		return isDefinitelyNonNull(local.id + maxFieldCount);
@@ -483,7 +484,7 @@ public class UnconditionalFlowInfo extends FlowInfo {
 	final public boolean isPotentiallyAssigned(LocalVariableBinding local) {
 		
 		// final constants are inlined, and thus considered as always initialized
-		if (local.isConstantValue()) {
+		if (local.constant() != Constant.NotAConstant) {
 			return true;
 		}
 		return isPotentiallyAssigned(local.id + maxFieldCount);
