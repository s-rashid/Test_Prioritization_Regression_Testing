diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RunJavaSearchTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RunJavaSearchTests.java
index 818d6a2..4032f87 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RunJavaSearchTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RunJavaSearchTests.java
@@ -13,7 +13,6 @@ package org.eclipse.jdt.core.tests.model;
 import java.lang.reflect.*;
 import java.util.*;
 import java.util.ArrayList;
-import java.util.Arrays;
 
 import org.eclipse.jdt.core.tests.junit.extension.TestCase;
 
@@ -21,60 +20,68 @@ import junit.framework.Test;
 import junit.framework.TestSuite;
 
 public class RunJavaSearchTests extends junit.framework.TestCase {
-public RunJavaSearchTests(String name) {
-	super(name);
-}
-public static Class[] getJavaSearchTestClasses() {
-	return new Class[] {
-		JavaSearchTests.class,
-		JavaSearchGenericTypeTests.class,
-		JavaSearchGenericTypeEquivalentTests.class,
-		JavaSearchGenericTypeExactTests.class,
-		JavaSearchGenericFieldTests.class,
-		JavaSearchGenericMethodTests.class,
-		JavaSearchGenericMethodExactTests.class,
-		JavaSearchGenericMethodEquivalentTests.class,
-		JavaSearchGenericConstructorTests.class,
-		JavaSearchGenericConstructorExactTests.class,
-		JavaSearchGenericConstructorEquivalentTests.class,
-		WorkingCopySearchTests.class,
-		JavaSearchJavadocTests.class
-	};
-}
-public static Test suite() {
-	TestSuite ts = new TestSuite(RunJavaSearchTests.class.getName());
 
-	// Get all classes
-	AbstractJavaSearchTests.TEST_SUITES = new ArrayList(Arrays.asList(getJavaSearchTestClasses()));
-	List allClasses = new ArrayList(AbstractJavaSearchTests.TEST_SUITES);
-	allClasses.add(JavaSearchBugsTests.class);
-	allClasses.add(JavaSearchMultipleProjectsTests.class);
-	allClasses.add(SearchTests.class);
-	allClasses.add(JavaSearchScopeTests.class);
+	public final static List TEST_CLASSES = new ArrayList();
+	static {
+		TEST_CLASSES.add(JavaSearchTests.class);
+		TEST_CLASSES.add(JavaSearchGenericTypeTests.class);
+		TEST_CLASSES.add(JavaSearchGenericTypeEquivalentTests.class);
+		TEST_CLASSES.add(JavaSearchGenericTypeExactTests.class);
+		TEST_CLASSES.add(JavaSearchGenericFieldTests.class);
+		TEST_CLASSES.add(JavaSearchGenericMethodTests.class);
+		TEST_CLASSES.add(JavaSearchGenericMethodExactTests.class);
+		TEST_CLASSES.add(JavaSearchGenericMethodEquivalentTests.class);
+		TEST_CLASSES.add(JavaSearchGenericConstructorTests.class);
+		TEST_CLASSES.add(JavaSearchGenericConstructorExactTests.class);
+		TEST_CLASSES.add(JavaSearchGenericConstructorEquivalentTests.class);
+		TEST_CLASSES.add(WorkingCopySearchTests.class);
+		TEST_CLASSES.add(JavaSearchJavadocTests.class);
+	}
+
+	public static Class[] getTestClasses() {
+		return (Class[]) TEST_CLASSES.toArray();
+	}
 
-	// Reset forgotten subsets of tests
-	TestCase.TESTS_PREFIX = null;
-	TestCase.TESTS_NAMES = null;
-	TestCase.TESTS_NUMBERS = null;
-	TestCase.TESTS_RANGE = null;
+	public RunJavaSearchTests(String name) {
+		super(name);
+	}
 
-	// Add all tests suite of tests
-	for (int i = 0, size=allClasses.size(); i < size; i++) {
-		Class testClass = (Class) allClasses.get(i);
+	public static Test suite() {
+		TestSuite ts = new TestSuite(RunJavaSearchTests.class.getName());
 
-		// call the suite() method and add the resulting suite to the suite
-		try {
-			Method suiteMethod = testClass.getDeclaredMethod("suite", new Class[0]); //$NON-NLS-1$
-			Test suite = (Test)suiteMethod.invoke(null, new Object[0]);
-			ts.addTest(suite);
-		} catch (IllegalAccessException e) {
-			e.printStackTrace();
-		} catch (InvocationTargetException e) {
-			e.getTargetException().printStackTrace();
-		} catch (NoSuchMethodException e) {
-			e.printStackTrace();
+		// Store test classes with same "JavaSearch"project
+		AbstractJavaSearchTests.JAVA_SEARCH_SUITES = new ArrayList(TEST_CLASSES);
+
+		// Get all classes
+		List allClasses = new ArrayList(TEST_CLASSES);
+		allClasses.add(JavaSearchBugsTests.class);
+		allClasses.add(JavaSearchMultipleProjectsTests.class);
+		allClasses.add(SearchTests.class);
+		allClasses.add(JavaSearchScopeTests.class);
+
+		// Reset forgotten subsets of tests
+		TestCase.TESTS_PREFIX = null;
+		TestCase.TESTS_NAMES = null;
+		TestCase.TESTS_NUMBERS = null;
+		TestCase.TESTS_RANGE = null;
+
+		// Add all tests suite of tests
+		for (int i = 0, size = allClasses.size(); i < size; i++) {
+			Class testClass = (Class) allClasses.get(i);
+
+			// call the suite() method and add the resulting suite to the suite
+			try {
+				Method suiteMethod = testClass.getDeclaredMethod("suite", new Class[0]); //$NON-NLS-1$
+				Test suite = (Test) suiteMethod.invoke(null, new Object[0]);
+				ts.addTest(suite);
+			} catch (IllegalAccessException e) {
+				e.printStackTrace();
+			} catch (InvocationTargetException e) {
+				e.getTargetException().printStackTrace();
+			} catch (NoSuchMethodException e) {
+				e.printStackTrace();
+			}
 		}
+		return ts;
 	}
-	return ts;
-}
 }
