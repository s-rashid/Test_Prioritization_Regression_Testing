diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java
index 1b61d99..3d7a53d 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java
@@ -1666,6 +1666,223 @@ public void test032() {
 		},
 		"");
 }
+//https://bugs.eclipse.org/bugs/show_bug.cgi?id=108783
+public void test033() { 
+	this.runConformTest(
+		new String[] {
+			"X.java",
+			"public class X<T> {\n" + 
+			"	abstract class Member implements Iterable<String> {\n" + 
+			"	}\n" + 
+			"	void foo(Member m) {\n" + 
+			"		for(String s : m) {\n" + 
+			"			return;\n" + 
+			"		} \n" + 
+			"	}\n" + 
+			"}\n",
+		},
+		"");
+}
+//https://bugs.eclipse.org/bugs/show_bug.cgi?id=108783 - variation
+public void test034() { 
+	this.runConformTest(
+		new String[] {
+			"X.java",
+			"import java.util.*;\n" + 
+			"\n" + 
+			"public class X <T extends Bar> {\n" + 
+			"	public static void main(String[] args) {\n" + 
+			"		new X<Bar>().foo(new Bar());\n" + 
+			"	}\n" + 
+			"	void foo(T t) {\n" + 
+			"		for (String s : t) {\n" + 
+			"			System.out.print(s);\n" + 
+			"		}\n" + 
+			"		System.out.println();\n" + 
+			"	}\n" + 
+			"}\n" + 
+			"class ArrayIterator<T> implements Iterator<T> {\n" + 
+			"	T[] values;\n" + 
+			"	int count;\n" + 
+			"	ArrayIterator(T[] values) {\n" + 
+			"		this.values = values;\n" + 
+			"		this.count = 0;\n" + 
+			"	}\n" + 
+			"	public boolean hasNext() {\n" + 
+			"		return this.count < this.values.length;\n" + 
+			"	}\n" + 
+			"	public T next() {\n" + 
+			"		if (this.count >= this.values.length) throw new NoSuchElementException();\n" + 
+			"		T value = this.values[this.count];\n" + 
+			"		this.values[this.count++] = null; // clear\n" + 
+			"		return value;\n" + 
+			"	}\n" + 
+			"	public void remove() {\n" + 
+			"	}\n" + 
+			"}\n" + 
+			"class Bar implements Iterable<String> {\n" + 
+			"	public Iterator<String> iterator() {\n" + 
+			"		return new ArrayIterator<String>(new String[]{\"a\",\"b\"});\n" + 
+			"	}\n" + 
+			"}\n",
+		},
+		"ab");
+	// 	ensure proper declaring class (Bar): 1  invokevirtual Bar.iterator() : java.util.Iterator  [33]
+	String expectedOutput =
+			"  // Method descriptor #23 (LBar;)V\n" + 
+			"  // Signature: (TT;)V\n" + 
+			"  // Stack: 2, Locals: 4\n" + 
+			"  void foo(Bar t);\n" + 
+			"     0  aload_1 [t]\n" + 
+			"     1  invokevirtual Bar.iterator() : java.util.Iterator  [33]\n" +
+			"     4  astore_3\n" + 
+			"     5  goto 25\n" + 
+			"     8  aload_3\n" + 
+			"     9  invokeinterface java.util.Iterator.next() : java.lang.Object  [39] [nargs: 1]\n" + 
+			"    14  checkcast java.lang.String [41]\n" + 
+			"    17  astore_2 [s]\n" + 
+			"    18  getstatic java.lang.System.out : java.io.PrintStream [47]\n" + 
+			"    21  aload_2 [s]\n" + 
+			"    22  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [53]\n" + 
+			"    25  aload_3\n" + 
+			"    26  invokeinterface java.util.Iterator.hasNext() : boolean  [57] [nargs: 1]\n" + 
+			"    31  ifne 8\n" + 
+			"    34  getstatic java.lang.System.out : java.io.PrintStream [47]\n" + 
+			"    37  invokevirtual java.io.PrintStream.println() : void  [60]\n" + 
+			"    40  return\n" + 
+			"      Line numbers:\n" + 
+			"        [pc: 0, line: 8]\n" + 
+			"        [pc: 18, line: 9]\n" + 
+			"        [pc: 25, line: 8]\n" + 
+			"        [pc: 34, line: 11]\n" + 
+			"        [pc: 40, line: 12]\n" + 
+			"      Local variable table:\n" + 
+			"        [pc: 0, pc: 41] local: this index: 0 type: X\n" + 
+			"        [pc: 0, pc: 41] local: t index: 1 type: Bar\n" + 
+			"        [pc: 18, pc: 34] local: s index: 2 type: java.lang.String\n" + 
+			"      Local variable type table:\n" + 
+			"        [pc: 0, pc: 41] local: this index: 0 type: X<T>\n" + 
+			"        [pc: 0, pc: 41] local: t index: 1 type: T\n";
+	
+	try {
+		File f = new File(OUTPUT_DIR + File.separator + "X.class");
+		byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
+		ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
+		String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
+		int index = result.indexOf(expectedOutput);
+		if (index == -1 || expectedOutput.length() == 0) {
+			System.out.println(Util.displayString(result, 3));
+		}
+		if (index == -1) {
+			assertEquals("Wrong contents", expectedOutput, result);
+		}
+	} catch (org.eclipse.jdt.core.util.ClassFormatException e) {
+		assertTrue(false);
+	} catch (IOException e) {
+		assertTrue(false);
+	}		
+}
+//https://bugs.eclipse.org/bugs/show_bug.cgi?id=108783 - variation
+public void test035() { 
+	this.runConformTest(
+		new String[] {
+			"X.java",
+			"import java.util.*;\n" + 
+			"\n" + 
+			"public class X <T extends IFoo> {\n" + 
+			"	public static void main(String[] args) {\n" + 
+			"		new X<IFoo>().foo(new Bar());\n" + 
+			"	}\n" + 
+			"	void foo(T t) {\n" + 
+			"		for (String s : t) {\n" + 
+			"			System.out.print(s);\n" + 
+			"		}\n" + 
+			"		System.out.println();\n" + 
+			"	}\n" + 
+			"}\n" + 
+			"class ArrayIterator<T> implements Iterator<T> {\n" + 
+			"	T[] values;\n" + 
+			"	int count;\n" + 
+			"	ArrayIterator(T[] values) {\n" + 
+			"		this.values = values;\n" + 
+			"		this.count = 0;\n" + 
+			"	}\n" + 
+			"	public boolean hasNext() {\n" + 
+			"		return this.count < this.values.length;\n" + 
+			"	}\n" + 
+			"	public T next() {\n" + 
+			"		if (this.count >= this.values.length) throw new NoSuchElementException();\n" + 
+			"		T value = this.values[this.count];\n" + 
+			"		this.values[this.count++] = null; // clear\n" + 
+			"		return value;\n" + 
+			"	}\n" + 
+			"	public void remove() {\n" + 
+			"	}\n" + 
+			"}\n" + 
+			"interface IFoo extends Iterable<String> {\n" + 
+			"}\n" + 
+			"class Bar implements IFoo {\n" + 
+			"	public Iterator<String> iterator() {\n" + 
+			"		return new ArrayIterator<String>(new String[]{\"a\",\"b\"});\n" + 
+			"	}\n" + 
+			"}\n",
+		},
+		"ab");
+	// 	ensure proper declaring class (IFoo): 1  invokeinterface IFoo.iterator() : java.util.Iterator  [35] [nargs: 1]
+	String expectedOutput =
+			"  // Method descriptor #23 (LIFoo;)V\n" + 
+			"  // Signature: (TT;)V\n" + 
+			"  // Stack: 2, Locals: 4\n" + 
+			"  void foo(IFoo t);\n" + 
+			"     0  aload_1 [t]\n" + 
+			"     1  invokeinterface IFoo.iterator() : java.util.Iterator  [35] [nargs: 1]\n" + 
+			"     6  astore_3\n" + 
+			"     7  goto 27\n" + 
+			"    10  aload_3\n" + 
+			"    11  invokeinterface java.util.Iterator.next() : java.lang.Object  [41] [nargs: 1]\n" + 
+			"    16  checkcast java.lang.String [43]\n" + 
+			"    19  astore_2 [s]\n" + 
+			"    20  getstatic java.lang.System.out : java.io.PrintStream [49]\n" + 
+			"    23  aload_2 [s]\n" + 
+			"    24  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [55]\n" + 
+			"    27  aload_3\n" + 
+			"    28  invokeinterface java.util.Iterator.hasNext() : boolean  [59] [nargs: 1]\n" + 
+			"    33  ifne 10\n" + 
+			"    36  getstatic java.lang.System.out : java.io.PrintStream [49]\n" + 
+			"    39  invokevirtual java.io.PrintStream.println() : void  [62]\n" + 
+			"    42  return\n" + 
+			"      Line numbers:\n" + 
+			"        [pc: 0, line: 8]\n" + 
+			"        [pc: 20, line: 9]\n" + 
+			"        [pc: 27, line: 8]\n" + 
+			"        [pc: 36, line: 11]\n" + 
+			"        [pc: 42, line: 12]\n" + 
+			"      Local variable table:\n" + 
+			"        [pc: 0, pc: 43] local: this index: 0 type: X\n" + 
+			"        [pc: 0, pc: 43] local: t index: 1 type: IFoo\n" + 
+			"        [pc: 20, pc: 36] local: s index: 2 type: java.lang.String\n" + 
+			"      Local variable type table:\n" + 
+			"        [pc: 0, pc: 43] local: this index: 0 type: X<T>\n" + 
+			"        [pc: 0, pc: 43] local: t index: 1 type: T\n";
+	
+	try {
+		File f = new File(OUTPUT_DIR + File.separator + "X.class");
+		byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);
+		ClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();
+		String result = disassembler.disassemble(classFileBytes, "\n", ClassFileBytesDisassembler.DETAILED);
+		int index = result.indexOf(expectedOutput);
+		if (index == -1 || expectedOutput.length() == 0) {
+			System.out.println(Util.displayString(result, 3));
+		}
+		if (index == -1) {
+			assertEquals("Wrong contents", expectedOutput, result);
+		}
+	} catch (org.eclipse.jdt.core.util.ClassFormatException e) {
+		assertTrue(false);
+	} catch (IOException e) {
+		assertTrue(false);
+	}		
+}
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=108783
 public void _test033() { 
 	this.runConformTest(
