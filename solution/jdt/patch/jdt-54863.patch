diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java
index d05cb98..d1a8373 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java
@@ -13,7 +13,6 @@ package org.eclipse.jdt.internal.compiler.lookup;
 import java.util.HashMap;
 import java.util.Hashtable;
 import java.util.Iterator;
-import java.util.Map;
 
 import org.eclipse.jdt.core.compiler.CharOperation;
 import org.eclipse.jdt.internal.compiler.ast.ASTNode;
@@ -510,69 +509,6 @@ public SyntheticMethodBinding addSyntheticBridgeMethod(MethodBinding inheritedMe
 	}
 	return accessMethod;
 }
-/**
- * Collect the substitutes into a map for certain type variables inside the receiver type
- * e.g.   Collection<T>.collectSubstitutes(Collection<List<X>>, Map), will populate Map with: T --> List<X>
- * Constraints:
- *   A << F   corresponds to:   F.collectSubstitutes(..., A, ..., 1)
- *   A = F   corresponds to:      F.collectSubstitutes(..., A, ..., 0)
- *   A >> F   corresponds to:   F.collectSubstitutes(..., A, ..., 2)
- */
-public void collectSubstitutes(Scope currentScope, TypeBinding actualType, Map substitutes, int constraint) {
-	
-	if (actualType == NullBinding) return;
-	if (!(actualType instanceof ReferenceBinding)) return;
-	TypeVariableBinding[] variables = this.typeVariables;
-	if (variables == NoTypeVariables) return;
-	// generic type is acting as parameterized type with its own parameters as arguments
-	
-	ReferenceBinding formalEquivalent, actualEquivalent;
-	switch (constraint) {
-		case CONSTRAINT_EQUAL :
-		case CONSTRAINT_EXTENDS :
-			formalEquivalent = this;
-	        actualEquivalent = ((ReferenceBinding)actualType).findSuperTypeWithSameErasure(this);
-	        if (actualEquivalent == null) return;
-	        break;
-		case CONSTRAINT_SUPER :
-        default:
-	        formalEquivalent = this.findSuperTypeWithSameErasure(actualType);
-	        if (formalEquivalent == null) return;
-	        actualEquivalent = (ReferenceBinding) actualType;
-	        break;
-	}
-    TypeBinding[] formalArguments;
-    switch (formalEquivalent.kind()) {
-    	case Binding.GENERIC_TYPE :
-    		formalArguments = formalEquivalent.typeVariables();
-    		break;
-    	case Binding.PARAMETERIZED_TYPE :
-    		formalArguments = ((ParameterizedTypeBinding)formalEquivalent).arguments;
-    		break;
-    	case Binding.RAW_TYPE :
-    		substitutes.clear(); // clear all variables to indicate raw generic method in the end
-    	default :
-    		return;
-    }
-    TypeBinding[] actualArguments;
-    switch (actualEquivalent.kind()) {
-    	case Binding.GENERIC_TYPE :
-    		actualArguments = actualEquivalent.typeVariables();
-    		break;
-    	case Binding.PARAMETERIZED_TYPE :
-    		actualArguments = ((ParameterizedTypeBinding)actualEquivalent).arguments;
-    		break;
-    	case Binding.RAW_TYPE :
-    		substitutes.clear(); // clear all variables to indicate raw generic method in the end
-    		return;
-    	default :
-    		return;
-    }
-    for (int i = 0, length = formalArguments.length; i < length; i++) {
-    	TypeBinding formalArgument = formalArguments[i];
-        formalArgument.collectSubstitutes(scope, actualArguments[i], substitutes, formalArgument.isWildcard() ? constraint : CONSTRAINT_EQUAL);
-    }
-}
 public int kind() {
 	if (this.typeVariables != NoTypeVariables) return Binding.GENERIC_TYPE;
 	return Binding.TYPE;
@@ -1230,7 +1166,7 @@ private MethodBinding resolveTypesFor(MethodBinding method) {
 			resolvedExceptionType = (ReferenceBinding) exceptionTypes[i].resolveType(methodDecl.scope, true /* check bounds*/);
 			if (resolvedExceptionType == null)
 				continue;
-			if (resolvedExceptionType.isGenericType() || resolvedExceptionType.isBoundParameterizedType()) {
+			if (resolvedExceptionType.isBoundParameterizedType()) {
 				methodDecl.scope.problemReporter().invalidParameterizedExceptionType(resolvedExceptionType, exceptionTypes[i]);
 				continue;
 			}
